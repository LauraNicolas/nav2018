OBJECT Table 5080 To-do
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Description;
    OnInsert=BEGIN
               if "No." = '' then begin
                 RMSetup.GET;
                 RMSetup.TESTFIELD("To-do Nos.");
                 NoSeriesMgt.InitSeries(RMSetup."To-do Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;
               if (("System To-do Type" = "System To-do Type"::Organizer) and
                   ("Team Code" = '')) or
                  ("System To-do Type" = "System To-do Type"::Team)
               then
                 "Organizer To-do No." := "No.";
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    OnModify=BEGIN
               if "No." <> '' then begin
                 "Last Date Modified" := TODAY;
                 "Last Time Modified" := TIME;

                 UpdateAttendeeTasks("No.");
               end;
             END;

    OnDelete=VAR
               Attendee@1001 : Record Attendee;
               Task@1000 : Record "To-do";
               TaskInteractionLanguage@1002 : Record "To-do Interaction Language";
               RMCommentLine@1003 : Record "Rlshp. Mgt. Comment Line";
             BEGIN
               RMCommentLine.SETRANGE("Table Name",RMCommentLine."Table Name"::"To-do");
               RMCommentLine.SETRANGE("No.","No.");
               RMCommentLine.DELETEALL;
               Task.SETRANGE("Organizer To-do No.","No.");
               Task.SETFILTER("No.",'<>%1',"No.");
               if Task.FINDFIRST then
                 Task.DELETEALL;

               Attendee.SETRANGE("To-do No.","No.");
               Attendee.DELETEALL;

               TaskInteractionLanguage.SETRANGE("To-do No.","No.");
               TaskInteractionLanguage.DELETEALL(true);
             END;

    CaptionML=ENU=Task;
    LookupPageID="Task List";
    DrillDownPageID="Task List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  RMSetup.GET;
                                                                  NoSeriesMgt.TestManual(RMSetup."To-do Nos.");
                                                                  "No. Series" := '';
                                                                  if ("System To-do Type" = "System To-do Type"::Organizer) or
                                                                     ("System To-do Type" = "System To-do Type"::Team)
                                                                  then
                                                                    UpdateAttendeeTasks(xRec."No.");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Team Code           ;Code10        ;TableRelation=Team;
                                                   OnValidate=BEGIN
                                                                if ("Team Code" <> xRec."Team Code") and
                                                                   ("No." <> '') and
                                                                   IsCalledFromForm
                                                                then begin
                                                                  if ("Team Code" = '') and ("Salesperson Code" = '') then
                                                                    ERROR(Text035,FIELDCAPTION("Salesperson Code"),FIELDCAPTION("Team Code"));
                                                                  if xRec."Team Code" <> '' then begin
                                                                    if Closed then begin
                                                                      if CONFIRM(STRSUBSTNO(Text039,"No.",xRec."Team Code","Team Code")) then begin
                                                                        ChangeTeam;
                                                                        GET("No.");
                                                                        VALIDATE(Closed,false);
                                                                      end else
                                                                        "Team Code" := xRec."Team Code"
                                                                    end else begin
                                                                      if CONFIRM(STRSUBSTNO(TasksWillBeDeletedQst,xRec."Team Code","Team Code")) then
                                                                        ChangeTeam
                                                                      else
                                                                        "Team Code" := xRec."Team Code"
                                                                    end
                                                                  end else begin
                                                                    if Closed then begin
                                                                      if CONFIRM(STRSUBSTNO(Text042,"No.","Team Code")) then begin
                                                                        ReassignSalespersonTaskToTeam;
                                                                        GET("No.");
                                                                        VALIDATE(Closed,false);
                                                                      end else
                                                                        "Team Code" := ''
                                                                    end else
                                                                      ReassignSalespersonTaskToTeam;
                                                                  end
                                                                end
                                                              END;

                                                   CaptionML=ENU=Team Code }
    { 3   ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   OnValidate=BEGIN
                                                                if (xRec."Salesperson Code" <> "Salesperson Code") and
                                                                   ("No." <> '') and
                                                                   IsCalledFromForm
                                                                then begin
                                                                  if ("Team Code" = '') and ("Salesperson Code" = '') then
                                                                    ERROR(Text035,FIELDCAPTION("Salesperson Code"),FIELDCAPTION("Team Code"));
                                                                  if (Type = Type::Meeting) and ("Team Code" = '') then
                                                                    ERROR(Text009,FIELDCAPTION("Salesperson Code"));

                                                                  if "Team Code" <> '' then begin
                                                                    if Type = Type::Meeting then
                                                                      if Closed then
                                                                        if CONFIRM(STRSUBSTNO(Text040,"No.","Salesperson Code")) then begin
                                                                          ReassignTeamTaskToSalesperson;
                                                                          GET("No.");
                                                                          VALIDATE(Closed,false);
                                                                        end else
                                                                          "Salesperson Code" := xRec."Salesperson Code"
                                                                      else
                                                                        if CONFIRM(STRSUBSTNO(Text033,"No.","Salesperson Code")) then
                                                                          ReassignTeamTaskToSalesperson
                                                                        else
                                                                          "Salesperson Code" := xRec."Salesperson Code"
                                                                    else
                                                                      if Closed then
                                                                        if CONFIRM(STRSUBSTNO(Text041,"No.","Salesperson Code")) then begin
                                                                          ReassignTeamTaskToSalesperson;
                                                                          GET("No.");
                                                                          VALIDATE(Closed,false);
                                                                        end else
                                                                          "Salesperson Code" := xRec."Salesperson Code"
                                                                      else
                                                                        if CONFIRM(STRSUBSTNO(Text032,"No.","Salesperson Code")) then
                                                                          ReassignTeamTaskToSalesperson
                                                                        else
                                                                          "Salesperson Code" := xRec."Salesperson Code"
                                                                  end
                                                                end
                                                              END;

                                                   CaptionML=ENU=Salesperson Code }
    { 4   ;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign No. }
    { 5   ;   ;Contact No.         ;Code20        ;TableRelation=Contact;
                                                   OnValidate=VAR
                                                                TempAttendee@1000 : TEMPORARY Record Attendee;
                                                              BEGIN
                                                                if Cont.GET("Contact No.") then
                                                                  "Contact Company No." := Cont."Company No."
                                                                else
                                                                  CLEAR("Contact Company No.");

                                                                if ("No." <> '') and
                                                                   ("No." = "Organizer To-do No.") and
                                                                   ("Contact No." <> xRec."Contact No.") and
                                                                   (Type <> Type::Meeting)
                                                                then
                                                                  case true of
                                                                    (xRec."Contact No." = '') and ("Contact No." <> ''):
                                                                      begin
                                                                        TempAttendee.CreateAttendee(
                                                                          TempAttendee,
                                                                          "No.",10000,TempAttendee."Attendance Type"::Required,
                                                                          TempAttendee."Attendee Type"::Contact,
                                                                          "Contact No.",false);
                                                                        CreateSubTask(TempAttendee,Rec);
                                                                      end;
                                                                    (xRec."Contact No." <> '') and ("Contact No." = ''):
                                                                      begin
                                                                        TempAttendee.CreateAttendee(
                                                                          TempAttendee,
                                                                          "No.",10000,TempAttendee."Attendance Type"::Required,
                                                                          TempAttendee."Attendee Type"::Contact,
                                                                          xRec."Contact No.",false);
                                                                        DeleteAttendeeTask(TempAttendee);
                                                                      end;
                                                                    xRec."Contact No." <> "Contact No.":
                                                                      begin
                                                                        TempAttendee.CreateAttendee(
                                                                          TempAttendee,
                                                                          "No.",10000,TempAttendee."Attendance Type"::Required,
                                                                          TempAttendee."Attendee Type"::Contact,
                                                                          xRec."Contact No.",false);
                                                                        DeleteAttendeeTask(TempAttendee);
                                                                        TempAttendee.CreateAttendee(
                                                                          TempAttendee,
                                                                          "No.",20000,TempAttendee."Attendance Type"::Required,
                                                                          TempAttendee."Attendee Type"::Contact,
                                                                          "Contact No.",false);
                                                                        CreateSubTask(TempAttendee,Rec);
                                                                      end;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Contact No. }
    { 6   ;   ;Opportunity No.     ;Code20        ;TableRelation=Opportunity;
                                                   OnValidate=VAR
                                                                OppEntry@1001 : Record "Opportunity Entry";
                                                              BEGIN
                                                                OppEntry.RESET;
                                                                OppEntry.SETCURRENTKEY(Active,"Opportunity No.");
                                                                OppEntry.SETRANGE(Active,true);
                                                                OppEntry.SETRANGE("Opportunity No.","Opportunity No.");
                                                                if OppEntry.FINDFIRST then
                                                                  "Opportunity Entry No." := OppEntry."Entry No."
                                                                else
                                                                  "Opportunity Entry No." := 0;
                                                              END;

                                                   CaptionML=ENU=Opportunity No. }
    { 7   ;   ;Segment No.         ;Code20        ;TableRelation="Segment Header";
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Segment No. }
    { 8   ;   ;Type                ;Option        ;OnValidate=VAR
                                                                OldEndDate@1000 : Date;
                                                              BEGIN
                                                                if "No." <> '' then begin
                                                                  if ((xRec.Type = Type::Meeting) and (Type <> Type::Meeting)) or
                                                                     ((xRec.Type <> Type::Meeting) and (Type = Type::Meeting))
                                                                  then
                                                                    ERROR(Text012);
                                                                end else begin
                                                                  if CurrFieldNo = 0 then
                                                                    exit;

                                                                  if xRec.Type <> Type::Meeting then
                                                                    TempEndDateTime := CREATEDATETIME(xRec.Date,xRec."Start Time") - OneDayDuration + xRec.Duration
                                                                  else
                                                                    TempEndDateTime := CREATEDATETIME(xRec.Date,xRec."Start Time") + xRec.Duration;

                                                                  OldEndDate := DT2DATE(TempEndDateTime);

                                                                  if (xRec.Type = Type::Meeting) and (Type <> Type::Meeting) then begin
                                                                    "Start Time" := 000000T;
                                                                    "All Day Event" := false;
                                                                    SetDuration(OldEndDate,000000T);
                                                                  end;

                                                                  if (xRec.Type <> Type::Meeting) and (Type = Type::Meeting) then begin
                                                                    "Start Time" := 000000T;
                                                                    if OldEndDate = Date then begin
                                                                      SetDuration(OldEndDate,DT2TIME(CREATEDATETIME(OldEndDate,000000T) + 30 * 60 * 1000));
                                                                    end else
                                                                      SetDuration(OldEndDate,000000T);
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Meeting,Phone Call";
                                                   OptionString=" ",Meeting,"Phone Call" }
    { 9   ;   ;Date                ;Date          ;OnValidate=BEGIN
                                                                if (Date < DMY2DATE(1,1,1900)) or (Date > DMY2DATE(31,12,2999)) then
                                                                  ERROR(Text006,DMY2DATE(1,1,1900),DMY2DATE(31,12,2999));

                                                                if Date <> xRec.Date then
                                                                  GetEndDateTime;
                                                              END;

                                                   CaptionML=ENU=Date;
                                                   NotBlank=true }
    { 10  ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                if Status = Status::Completed then
                                                                  VALIDATE(Closed,true)
                                                                else
                                                                  VALIDATE(Closed,false);
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                   OptionString="Not Started","In Progress",Completed,Waiting,Postponed }
    { 11  ;   ;Priority            ;Option        ;InitValue=Normal;
                                                   CaptionML=ENU=Priority;
                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 12  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 13  ;   ;Closed              ;Boolean       ;OnValidate=BEGIN
                                                                if Closed then begin
                                                                  "Date Closed" := TODAY;
                                                                  Status := Status::Completed;
                                                                  if not Canceled then begin
                                                                    if ("Team Code" <> '') and
                                                                       ("Completed By" = '')
                                                                    then
                                                                      ERROR(STRSUBSTNO(Text029,FIELDCAPTION("Completed By")));
                                                                    if CurrFieldNo <> 0 then
                                                                      if CONFIRM(Text004,true) then
                                                                        CreateInteraction
                                                                  end;
                                                                  if Recurring then
                                                                    CreateRecurringTask;
                                                                end else begin
                                                                  Canceled := false;
                                                                  "Date Closed" := 0D;
                                                                  if Status = Status::Completed then
                                                                    Status := Status::"In Progress";
                                                                  if "Completed By" <> '' then
                                                                    "Completed By" := ''
                                                                end;
                                                                if CurrFieldNo <> 0 then
                                                                  MODIFY(true);
                                                              END;

                                                   CaptionML=ENU=Closed }
    { 14  ;   ;Date Closed         ;Date          ;CaptionML=ENU=Date Closed;
                                                   Editable=false }
    { 15  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 16  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rlshp. Mgt. Comment Line" WHERE ("Table Name"=CONST("To-do"),
                                                                                                       "No."=FIELD("Organizer To-do No."),
                                                                                                       "Sub No."=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 17  ;   ;Canceled            ;Boolean       ;OnValidate=BEGIN
                                                                if Canceled and not Closed then
                                                                  VALIDATE(Closed,true);
                                                                if (not Canceled) and Closed then
                                                                  VALIDATE(Closed,false);
                                                              END;

                                                   CaptionML=ENU=Canceled }
    { 18  ;   ;Contact Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE ("No."=FIELD("Contact No.")));
                                                   CaptionML=ENU=Contact Name;
                                                   Editable=false }
    { 19  ;   ;Team Name           ;Text30        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Team.Name WHERE (Code=FIELD("Team Code")));
                                                   CaptionML=ENU=Team Name;
                                                   NotBlank=false;
                                                   Editable=false }
    { 20  ;   ;Salesperson Name    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Salesperson/Purchaser".Name WHERE (Code=FIELD("Salesperson Code")));
                                                   CaptionML=ENU=Salesperson Name;
                                                   Editable=false }
    { 21  ;   ;Campaign Description;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Campaign.Description WHERE ("No."=FIELD("Campaign No.")));
                                                   CaptionML=ENU=Campaign Description;
                                                   Editable=false }
    { 22  ;   ;Contact Company No. ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   CaptionML=ENU=Contact Company No. }
    { 23  ;   ;Contact Company Name;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Contact.Name WHERE ("No."=FIELD("Contact Company No.")));
                                                   CaptionML=ENU=Contact Company Name;
                                                   Editable=false }
    { 24  ;   ;Recurring           ;Boolean       ;CaptionML=ENU=Recurring }
    { 25  ;   ;Recurring Date Interval;DateFormula;OnValidate=BEGIN
                                                                if Recurring then
                                                                  TESTFIELD("Recurring Date Interval");
                                                              END;

                                                   CaptionML=ENU=Recurring Date Interval }
    { 26  ;   ;Calc. Due Date From ;Option        ;OnValidate=BEGIN
                                                                if Recurring then
                                                                  TESTFIELD("Calc. Due Date From");
                                                              END;

                                                   CaptionML=ENU=Calc. Due Date From;
                                                   OptionCaptionML=ENU=" ,Due Date,Closing Date";
                                                   OptionString=" ","Due Date","Closing Date" }
    { 27  ;   ;Opportunity Description;Text50     ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Opportunity.Description WHERE ("No."=FIELD("Opportunity No.")));
                                                   CaptionML=ENU=Opportunity Description;
                                                   Editable=false }
    { 28  ;   ;Start Time          ;Time          ;OnValidate=BEGIN
                                                                if "Start Time" <> xRec."Start Time" then
                                                                  GetEndDateTime;
                                                              END;

                                                   CaptionML=ENU=Start Time }
    { 29  ;   ;Duration            ;Duration      ;OnValidate=BEGIN
                                                                if Duration < 0 then
                                                                  ERROR(Text005);

                                                                if Duration < (60 * 1000) then
                                                                  ERROR(Text007);

                                                                if Duration > (CREATEDATETIME(TODAY + 3650,000000T) - CREATEDATETIME(TODAY,000000T)) then
                                                                  ERROR(Text008);

                                                                if Duration <> xRec.Duration then
                                                                  GetEndDateTime;
                                                              END;

                                                   CaptionML=ENU=Duration }
    { 31  ;   ;Opportunity Entry No.;Integer      ;TableRelation="Opportunity Entry";
                                                   CaptionML=ENU=Opportunity Entry No. }
    { 32  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified }
    { 33  ;   ;Last Time Modified  ;Time          ;CaptionML=ENU=Last Time Modified }
    { 34  ;   ;All Day Event       ;Boolean       ;OnValidate=BEGIN
                                                                if "All Day Event" then begin
                                                                  "Start Time" := 000000T;
                                                                  TempStartDateTime := CREATEDATETIME(Date,"Start Time");
                                                                  TempEndDateTime := TempStartDateTime + Duration;
                                                                  if DT2DATE(TempEndDateTime) = Date then
                                                                    Duration := 1440 * 1000 * 60
                                                                  else
                                                                    Duration := ROUNDDATETIME(TempEndDateTime + 1,1440 * 1000 * 60,'>') - TempStartDateTime;
                                                                end else
                                                                  Duration := Duration - 1440 * 1000 * 60;
                                                              END;

                                                   CaptionML=ENU=All Day Event }
    { 35  ;   ;Location            ;Text50        ;CaptionML=ENU=Location }
    { 36  ;   ;Organizer To-do No. ;Code20        ;TableRelation="To-do";
                                                   CaptionML=ENU=Organizer Task No. }
    { 37  ;   ;Interaction Template Code;Code10   ;TableRelation="Interaction Template";
                                                   OnValidate=VAR
                                                                TaskInteractionLanguage@1000 : Record "To-do Interaction Language";
                                                                Attachment@1001 : Record Attachment;
                                                              BEGIN
                                                                if "No." <> '' then
                                                                  UpdateInteractionTemplate(
                                                                    Rec,TaskInteractionLanguage,Attachment,"Interaction Template Code",false);
                                                              END;

                                                   CaptionML=ENU=Interaction Template Code }
    { 38  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   OnValidate=VAR
                                                                TaskInteractionLanguage@1000 : Record "To-do Interaction Language";
                                                              BEGIN
                                                                if CurrFieldNo <> 0 then
                                                                  MODIFY;

                                                                if "Language Code" = xRec."Language Code" then
                                                                  exit;

                                                                if not TaskInteractionLanguage.GET("No.","Language Code") then begin
                                                                  if "No." = '' then
                                                                    exit;
                                                                  if CurrFieldNo <> 0 then
                                                                    if CONFIRM(Text010,true,TaskInteractionLanguage.TABLECAPTION,"Language Code") then begin
                                                                      TaskInteractionLanguage.INIT;
                                                                      TaskInteractionLanguage."To-do No." := "No.";
                                                                      TaskInteractionLanguage."Language Code" := "Language Code";
                                                                      TaskInteractionLanguage.Description := FORMAT("Interaction Template Code") + ' ' + FORMAT("Language Code");
                                                                      TaskInteractionLanguage.INSERT(true);
                                                                      "Attachment No." := 0;
                                                                      MODIFY;
                                                                    end else
                                                                      ERROR('');
                                                                end else
                                                                  "Attachment No." := TaskInteractionLanguage."Attachment No.";
                                                              END;

                                                   OnLookup=VAR
                                                              TaskInteractionLanguage@1000 : Record "To-do Interaction Language";
                                                            BEGIN
                                                              MODIFY;
                                                              COMMIT;

                                                              TaskInteractionLanguage.SETRANGE("To-do No.","Organizer To-do No.");
                                                              if TaskInteractionLanguage.GET("Organizer To-do No.","Language Code") then;
                                                              if PAGE.RUNMODAL(0,TaskInteractionLanguage) = ACTION::LookupOK then begin
                                                                if ("System To-do Type" = "System To-do Type"::Organizer) or
                                                                   ("System To-do Type" = "System To-do Type"::Team)
                                                                then
                                                                  if not TaskInteractionLanguage.ISEMPTY then begin
                                                                    "Language Code" := TaskInteractionLanguage."Language Code";
                                                                    "Attachment No." := TaskInteractionLanguage."Attachment No.";
                                                                  end else begin
                                                                    "Language Code" := '';
                                                                    "Attachment No." := 0;
                                                                  end;
                                                              end else
                                                                if not TaskInteractionLanguage.ISEMPTY then begin
                                                                  if "Language Code" = TaskInteractionLanguage."Language Code" then
                                                                    "Attachment No." := TaskInteractionLanguage."Attachment No.";
                                                                end else begin
                                                                  "Language Code" := '';
                                                                  "Attachment No." := 0;
                                                                end;
                                                            END;

                                                   CaptionML=ENU=Language Code }
    { 39  ;   ;Attachment No.      ;Integer       ;CaptionML=ENU=Attachment No. }
    { 40  ;   ;Subject             ;Text50        ;OnValidate=BEGIN
                                                                if CurrFieldNo <> 0 then
                                                                  MODIFY;
                                                              END;

                                                   CaptionML=ENU=Subject }
    { 41  ;   ;Unit Cost (LCY)     ;Decimal       ;OnValidate=BEGIN
                                                                if CurrFieldNo <> 0 then
                                                                  MODIFY;
                                                              END;

                                                   CaptionML=ENU=Unit Cost (LCY);
                                                   DecimalPlaces=2:2 }
    { 42  ;   ;Unit Duration (Min.);Decimal       ;OnValidate=BEGIN
                                                                if CurrFieldNo <> 0 then
                                                                  MODIFY;
                                                              END;

                                                   CaptionML=ENU=Unit Duration (Min.);
                                                   DecimalPlaces=0:2 }
    { 43  ;   ;No. of Attendees    ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count(Attendee WHERE ("To-do No."=FIELD("Organizer To-do No.")));
                                                   CaptionML=ENU=No. of Attendees;
                                                   Editable=false }
    { 44  ;   ;Attendees Accepted No.;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count(Attendee WHERE ("To-do No."=FIELD("Organizer To-do No."),
                                                                                     "Invitation Response Type"=CONST(Accepted)));
                                                   CaptionML=ENU=Attendees Accepted No.;
                                                   Editable=false }
    { 45  ;   ;System To-do Type   ;Option        ;CaptionML=ENU=System Task Type;
                                                   OptionCaptionML=ENU=Organizer,Salesperson Attendee,Contact Attendee,Team;
                                                   OptionString=Organizer,"Salesperson Attendee","Contact Attendee",Team }
    { 46  ;   ;Completed By        ;Code20        ;TableRelation="Salesperson/Purchaser".Code;
                                                   OnValidate=BEGIN
                                                                if (xRec."Completed By" = '') and
                                                                   ("Completed By" <> '')
                                                                then
                                                                  if CONFIRM(Text034) then
                                                                    VALIDATE(Closed,true)
                                                                  else
                                                                    "Completed By" := '';
                                                              END;

                                                   CaptionML=ENU=Completed By }
    { 47  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                if "Ending Date" <> xRec."Ending Date" then
                                                                  SetDuration("Ending Date","Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 48  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                if "Ending Time" <> xRec."Ending Time" then
                                                                  SetDuration("Ending Date","Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 9501;   ;Wizard Step         ;Option        ;CaptionML=ENU=Wizard Step;
                                                   OptionCaptionML=ENU=" ,1,2,3,4,5,6";
                                                   OptionString=" ","1","2","3","4","5","6";
                                                   Editable=false }
    { 9504;   ;Team To-do          ;Boolean       ;CaptionML=ENU=Team Task }
    { 9505;   ;Send on finish      ;Boolean       ;CaptionML=ENU=Send on finish }
    { 9506;   ;Segment Description ;Text50        ;CaptionML=ENU=Segment Description }
    { 9507;   ;Team Meeting Organizer;Code20      ;CaptionML=ENU=Team Meeting Organizer }
    { 9508;   ;Activity Code       ;Code10        ;TableRelation=Activity.Code;
                                                   CaptionML=ENU=Activity Code }
    { 9509;   ;Wizard Contact Name ;Text50        ;CaptionML=ENU=Wizard Contact Name }
    { 9510;   ;Wizard Campaign Description;Text50 ;CaptionML=ENU=Wizard Campaign Description }
    { 9511;   ;Wizard Opportunity Description;Text50;
                                                   CaptionML=ENU=Wizard Opportunity Description }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Contact Company No.",Date,"Contact No.",Closed }
    {    ;"Contact Company No.","Contact No.",Closed,Date }
    {    ;"Salesperson Code",Date,Closed           }
    {    ;"Team Code",Date,Closed                  }
    {    ;"Campaign No.",Date                      }
    {    ;"Segment No.",Date                       }
    {    ;"Opportunity No.",Date,Closed            }
    {    ;"Organizer To-do No.","System To-do Type" }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.",Description,Status                 }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 must be specified.';
      Text001@1001 : TextConst 'ENU=%1 No. %2 has been created from recurring %3 %4.';
      Text002@1002 : TextConst '@@@="%1 = Segment Header No.";ENU=Do you want to create a Task for all contacts in the %1 Segment';
      Text003@1003 : TextConst '@@@="%1 = Segment Header No.";ENU=Do you want to assign an activity to all Contacts in the %1 Segment';
      RMSetup@1004 : Record "Marketing Setup";
      Cont@1005 : Record Contact;
      Salesperson@1021 : Record "Salesperson/Purchaser";
      Activity@1069 : Record Activity;
      Campaign@1059 : Record Campaign;
      Team@1050 : Record Team;
      Opp@1041 : Record Opportunity;
      SegHeader@1040 : Record "Segment Header";
      TempAttendee@1039 : TEMPORARY Record Attendee;
      TempTaskInteractionLanguage@1037 : TEMPORARY Record "To-do Interaction Language";
      TempAttachment@1026 : TEMPORARY Record Attachment;
      TempRMCommentLine@1024 : TEMPORARY Record "Rlshp. Mgt. Comment Line";
      NoSeriesMgt@1007 : Codeunit NoSeriesManagement;
      Text004@1008 : TextConst 'ENU=Do you want to register an Interaction Log Entry?';
      TempEndDateTime@1012 : DateTime;
      Text005@1013 : TextConst 'ENU=Information that you have entered in this field will cause the duration to be negative which is not allowed. Please modify the ending date/time value.';
      TempStartDateTime@1014 : DateTime;
      Text006@1015 : TextConst 'ENU=The valid range of dates is from %1 to %2. Please enter a date within this range.';
      Text007@1016 : TextConst 'ENU=Information that you have entered in this field will cause the duration to be less than 1 minute, which is not allowed. Please modify the ending date/time value.';
      Text008@1017 : TextConst 'ENU=Information that you have entered in this field will cause the duration to be more than 10 years, which is not allowed. Please modify the ending date/time value.';
      Text009@1022 : TextConst '@@@="%1=Salesperson Code";ENU=You cannot change the %1 for this Task, because this salesperson is the meeting organizer.';
      Text010@1023 : TextConst '@@@="%1=Task Interaction Language,%2=Language Code";ENU=Do you want to create a new %2 value in %1 for this Task?';
      Text012@1025 : TextConst 'ENU=You cannot change a Task type from Blank or Phone Call to Meeting and vice versa. You can only change a Task type from Blank to Phone Call or from Phone Call to Blank.';
      Text015@1029 : TextConst 'ENU=Dear %1,';
      Text016@1030 : TextConst '@@@="%1 = Task Date,%2 = Task StartTime,%3=Task location";ENU=You are cordially invited to attend the meeting, which will take place on %1, %2 at %3.';
      Text017@1028 : TextConst 'ENU=Yours sincerely,';
      Text018@1031 : TextConst 'ENU=The %1 check box is not selected.';
      Text019@1032 : TextConst 'ENU=Send invitations to all Attendees with selected %1 check boxes.';
      Text020@1033 : TextConst 'ENU=Send invitations to Attendees who have not been sent invitations yet.';
      Text021@1034 : TextConst 'ENU=Do not send invitations.';
      Text022@1035 : TextConst 'ENU=Invitations have already been sent to Attendees with selected %1 check boxes. Do you want to resend the invitations?';
      Text023@1036 : TextConst 'ENU=Outlook failed to send an invitation to %1.';
      Text029@1042 : TextConst '@@@="%1=Completed By";ENU=The %1 field must be filled in for Tasks assigned to a team.';
      TasksWillBeDeletedQst@1043 : TextConst '@@@="%1 = old Team code, %2 = new Team code";ENU=Tasks of the %1 team members who do not belong to the %2 team will be deleted. Do you want to continue?';
      Text032@1045 : TextConst '@@@="%1=Task No.,%2=Salesperson Code";ENU=Task No. %1 will be reassigned to %2 and the corresponding salesperson Tasks for team members will be deleted. Do you want to continue?';
      Text033@1046 : TextConst '@@@="%1=Task No.,%2=Salesperson Code";ENU=Task No. %1 will be reassigned to %2. Do you want to continue?';
      Text034@1047 : TextConst 'ENU=Do you want to close the Task?';
      Text035@1027 : TextConst 'ENU=You must fill in either the %1 field or the %2 field.';
      Text036@1049 : TextConst 'ENU=Creating Tasks...\';
      TaskNoMsg@1048 : TextConst '@@@="%1 = counter";ENU=Task No. #1##############\';
      Text038@1044 : TextConst 'ENU=Status    @2@@@@@@@@@@@@@@';
      Text039@1051 : TextConst '@@@="%1=Task No,%2=Team Code,%3=Team Code";ENU=Task No. %1 is closed and will be reopened. The Tasks of the %2 team members who do not belong to the %3 team will be deleted. Do you want to continue?';
      Text040@1052 : TextConst '@@@="%1=Task No.,%2=Salesperson Code";ENU=Task No. %1 is closed and will be reopened. It will be reassigned to %2, and the corresponding salesperson Tasks for team members will be deleted. Do you want to continue?';
      Text041@1053 : TextConst '@@@="%1=Task No.,%2=Salesperson Code";ENU=Task No. %1 is closed. It will be reopened and reassigned to %2. Do you want to continue?';
      Text042@1054 : TextConst '@@@="%1=Task No.,%2=Team Code";ENU=Task No. %1 is closed. Do you want to reopen it and assign to the %2 team?';
      Text043@1068 : TextConst 'ENU=You must fill in the %1 field.';
      Text047@1072 : TextConst 'ENU=You cannot use the wizard to create an attachment. You can create an attachment in the Interaction Template window.';
      Text051@1077 : TextConst 'ENU=Activity Code';
      Text053@1076 : TextConst 'ENU=You must specify %1 or %2.';
      Text056@1073 : TextConst '@@@="%1=Activity Code";ENU=Activity %1 contains Tasks of type Meeting. You must fill in the Meeting Organizer field.';
      Text065@1083 : TextConst 'ENU=You must specify the Task organizer.';
      Text067@1019 : TextConst 'ENU=The %1 must contain an attachment if you want to send an invitation to an %2 of the contact type.';
      Text068@1080 : TextConst 'ENU=You cannot select the Send invitation(s) on Finish check box, because none of the %1 check boxes are selected.';
      RunFormCode@1020 : Boolean;
      CreateExchangeAppointment@1009 : Boolean;

    [External]
    PROCEDURE CreateTaskFromTask@1(VAR Task@1000 : Record "To-do");
    BEGIN
      DELETEALL;
      INIT;
      SetFilterFromTask(Task);
      StartWizard;
    END;

    [External]
    PROCEDURE CreateTaskFromSalesHeader@50(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      DELETEALL;
      INIT;
      VALIDATE("Contact No.",SalesHeader."Sell-to Contact No.");
      SETRANGE("Contact No.",SalesHeader."Sell-to Contact No.");
      if SalesHeader."Salesperson Code" <> '' then begin
        "Salesperson Code" := SalesHeader."Salesperson Code";
        SETRANGE("Salesperson Code","Salesperson Code");
      end;
      if SalesHeader."Campaign No." <> '' then begin
        "Campaign No." := SalesHeader."Campaign No.";
        SETRANGE("Campaign No.","Campaign No.");
      end;

      StartWizard;
    END;

    [External]
    PROCEDURE CreateTaskFromInteractLogEntry@51(InteractionLogEntry@1000 : Record "Interaction Log Entry");
    BEGIN
      INIT;
      VALIDATE("Contact No.",InteractionLogEntry."Contact No.");
      "Salesperson Code" := InteractionLogEntry."Salesperson Code";
      "Campaign No." := InteractionLogEntry."Campaign No.";

      StartWizard;
    END;

    LOCAL PROCEDURE CreateInteraction@10();
    VAR
      TempSegLine@1000 : TEMPORARY Record "Segment Line";
    BEGIN
      case Type of
        Type::" ":
          TempSegLine.CreateInteractionFromTask(Rec);
        Type::Meeting:
          ;
        Type::"Phone Call":
          begin
            TempSegLine."Campaign No." := "Campaign No.";
            TempSegLine."Opportunity No." := "Opportunity No.";
            TempSegLine."Contact No." := "Contact No.";
            TempSegLine."To-do No." := "No.";
            TempSegLine."Salesperson Code" := "Salesperson Code";
            TempSegLine.CreatePhoneCall;
          end;
      end;
    END;

    LOCAL PROCEDURE CreateRecurringTask@4();
    VAR
      Task2@1002 : Record "To-do";
      TaskInteractLanguage@1003 : Record "To-do Interaction Language";
      Attachment@1004 : Record Attachment;
      Attendee@1005 : Record Attendee;
      TempAttendee@1007 : TEMPORARY Record Attendee;
      RMCommentLine@1000 : Record "Rlshp. Mgt. Comment Line";
      RMCommentLine3@1006 : Record "Rlshp. Mgt. Comment Line";
    BEGIN
      TESTFIELD("Recurring Date Interval");
      if "Calc. Due Date From" = "Calc. Due Date From"::" " then
        ERROR(
          STRSUBSTNO(Text000,FIELDCAPTION("Calc. Due Date From")));

      Task2 := Rec;
      with Task2 do begin
        Status := 0;
        Closed := false;
        Canceled := false;
        "Date Closed" := 0D;
        "Completed By" := '';
        case "Calc. Due Date From" of
          "Calc. Due Date From"::"Due Date":
            Date := CALCDATE("Recurring Date Interval",Date);
          "Calc. Due Date From"::"Closing Date":
            Date := CALCDATE("Recurring Date Interval",TODAY);
        end;
        GetEndDateTime;

        RMCommentLine3.RESET;
        RMCommentLine3.SETRANGE("Table Name",RMCommentLine."Table Name"::"To-do");
        RMCommentLine3.SETRANGE("No.","No.");
        RMCommentLine3.SETRANGE("Sub No.",0);

        TaskInteractLanguage.SETRANGE("To-do No.","No.");

        if Type = Type::Meeting then begin
          Attendee.SETRANGE("To-do No.","No.");
          GET(InsertTaskAndRelatedData(
              Task2,TaskInteractLanguage,Attachment,Attendee,RMCommentLine3));
        end else begin
          CreateAttendeesFromTask(TempAttendee,Task2,'');
          GET(InsertTaskAndRelatedData(
              Task2,TaskInteractLanguage,Attachment,TempAttendee,RMCommentLine3));
        end;
      end;

      MESSAGE(
        STRSUBSTNO(Text001,
          TABLECAPTION,Task2."Organizer To-do No.",TABLECAPTION,"No."));
    END;

    PROCEDURE InsertTask@2(Task2@1000 : Record "To-do";VAR RMCommentLine@1004 : Record "Rlshp. Mgt. Comment Line";VAR TempAttendee@1005 : TEMPORARY Record Attendee;VAR TaskInteractionLanguage@1007 : Record "To-do Interaction Language";VAR TempAttachment@1008 : TEMPORARY Record Attachment;ActivityCode@1001 : Code[10];Deliver@1010 : Boolean);
    VAR
      SegHeader@1002 : Record "Segment Header";
      SegLine@1003 : Record "Segment Line";
      ConfirmText@1006 : Text[250];
    BEGIN
      if SegHeader.GET(GETFILTER("Segment No.")) then begin
        SegLine.SETRANGE("Segment No.",SegHeader."No.");
        SegLine.SETFILTER("Contact No.",'<>%1','');
        if SegLine.FINDFIRST then begin
          if ActivityCode = '' then
            ConfirmText := Text002
          else
            ConfirmText := Text003;
          if CONFIRM(ConfirmText,true,SegHeader."No.") then begin
            if ActivityCode = '' then begin
              Task2.GET(InsertTaskAndRelatedData(
                  Task2,TaskInteractionLanguage,TempAttachment,TempAttendee,RMCommentLine));
              if (Task2.Type = Type::Meeting) and Deliver then
                SendMAPIInvitations(Task2,true);
            end else
              InsertActivityTask(Task2,ActivityCode,TempAttendee);
          end;
        end;
      end else begin
        if ActivityCode = '' then begin
          Task2.GET(InsertTaskAndRelatedData(
              Task2,TaskInteractionLanguage,TempAttachment,TempAttendee,RMCommentLine));
          if (Task2.Type = Type::Meeting) and Deliver then
            SendMAPIInvitations(Task2,true);
        end else
          InsertActivityTask(Task2,ActivityCode,TempAttendee);
      end;

      if (Task2.Type = Task2.Type::Meeting) and
         Task2.GET(Task2."Organizer To-do No.")
      then
        Task2.ArrangeOrganizerAttendee;
    END;

    LOCAL PROCEDURE InsertTaskAndRelatedData@14(Task2@1000 : Record "To-do";VAR TaskInteractLanguage@1001 : Record "To-do Interaction Language";VAR Attachment@1002 : Record Attachment;VAR Attendee@1003 : Record Attendee;VAR RMCommentLine@1004 : Record "Rlshp. Mgt. Comment Line") TaskNo : Code[20];
    VAR
      TaskInteractLanguage2@1005 : Record "To-do Interaction Language";
      TempAttendee@1006 : TEMPORARY Record Attendee;
      Task@1007 : Record "To-do";
      TeamSalesperson@1008 : Record "Team Salesperson";
      Attendee2@1010 : Record Attendee;
      Window@1013 : Dialog;
      AttendeeCounter@1017 : Integer;
      TotalAttendees@1018 : Integer;
      CommentLineInserted@1019 : Boolean;
    BEGIN
      if Task2."Team Code" = '' then
        Task2."System To-do Type" := "System To-do Type"::Organizer
      else
        Task2."System To-do Type" := "System To-do Type"::Team;
      if Task2.Type = Type::Meeting then begin
        CLEAR(Task2."No.");
        if Task2."System To-do Type" = Task2."System To-do Type"::Team then
          Task2."Salesperson Code" := '';
        Task2.INSERT(true);

        CreateTaskInteractLanguages(TaskInteractLanguage,Attachment,Task2."No.");
        if TaskInteractLanguage2.GET(Task2."No.",Task2."Language Code") then begin
          Task2."Attachment No." := TaskInteractLanguage2."Attachment No.";
          Task2.MODIFY;
        end;

        if "Team Code" <> '' then begin
          Attendee.SETCURRENTKEY("To-do No.","Attendance Type");
          Attendee.SETRANGE("Attendance Type",Attendee."Attendance Type"::"To-do Organizer");
          if Attendee.FIND('-') then begin
            CreateSubTask(Attendee,Task2);
            Attendee2.INIT;
            Attendee2 := Attendee;
            Attendee2."To-do No." := Task2."No.";
            Attendee2.INSERT;
          end;
          Attendee.SETFILTER("Attendance Type",'<>%1',Attendee."Attendance Type"::"To-do Organizer")
        end;
        if Attendee.FIND('-') then
          repeat
            CreateSubTask(Attendee,Task2);
            Attendee2.INIT;
            Attendee2 := Attendee;
            Attendee2."To-do No." := Task2."No.";
            Attendee2.INSERT
          until Attendee.NEXT = 0;

        Task2.GetMeetingOrganizerTask(Task);
        TaskNo := Task."No."
      end else
        if Task2."Segment No." = '' then begin
          CLEAR(Task2."No.");

          Task2.INSERT(true);
          TaskNo := Task2."No.";
          if Task2."System To-do Type" = "System To-do Type"::Team then begin
            TeamSalesperson.SETRANGE("Team Code",Task2."Team Code");
            if TeamSalesperson.FIND('-') then
              repeat
                TempAttendee.CreateAttendee(
                  TempAttendee,
                  Task2."No.",10000,
                  TempAttendee."Attendance Type"::"To-do Organizer",
                  TempAttendee."Attendee Type"::Salesperson,
                  TeamSalesperson."Salesperson Code",
                  true);
                CreateSubTask(TempAttendee,Task2);
                TempAttendee.DELETEALL
              until TeamSalesperson.NEXT = 0
          end;
          if Attendee.FIND('-') then
            repeat
              CreateSubTask(Attendee,Task2);
            until Attendee.NEXT = 0;
        end else
          if Attendee.FIND('-') then begin
            Window.OPEN(Text036 + TaskNoMsg + Text038);
            TotalAttendees := Attendee.COUNT;
            repeat
              if Task2."System To-do Type" = "System To-do Type"::Team then begin
                Task.INIT;
                Task := Task2;
                CLEAR(Task."No.");
                FillSalesPersonContact(Task,Attendee);
                Task.INSERT(true);
                TaskNo := Task."No.";
                TempAttendee.INIT;
                TempAttendee := Attendee;
                TempAttendee.INSERT;
                CreateSubTask(TempAttendee,Task);
                TempAttendee.DELETEALL;
                TeamSalesperson.SETRANGE("Team Code",Task."Team Code");
                if TeamSalesperson.FIND('-') then
                  repeat
                    TempAttendee.CreateAttendee(
                      TempAttendee,
                      "No.",10000,
                      TempAttendee."Attendance Type"::"To-do Organizer",
                      TempAttendee."Attendee Type"::Salesperson,
                      TeamSalesperson."Salesperson Code",
                      true);
                    CreateSubTask(TempAttendee,Task);
                    TempAttendee.DELETEALL
                  until TeamSalesperson.NEXT = 0
              end else begin
                Task.INIT;
                Task := Task2;
                CLEAR(Task."No.");
                Task."System To-do Type" := "System To-do Type"::Organizer;
                FillSalesPersonContact(Task,Attendee);
                Task.INSERT(true);
                TaskNo := Task."No.";

                TempAttendee.INIT;
                TempAttendee := Attendee;
                TempAttendee.INSERT;
                CreateSubTask(TempAttendee,Task);
              end;
              AttendeeCounter := AttendeeCounter + 1;
              CreateCommentLines(RMCommentLine,TaskNo);
              Window.UPDATE(1,Task."Organizer To-do No.");
              Window.UPDATE(2,ROUND(AttendeeCounter / TotalAttendees * 10000,1));
              COMMIT
            until Attendee.NEXT = 0;
            Window.CLOSE;
            CommentLineInserted := true;
          end;
      if not CommentLineInserted then
        CreateCommentLines(RMCommentLine,Task2."No.");
    END;

    [External]
    PROCEDURE CreateSubTask@15(VAR Attendee@1001 : Record Attendee;Task@1000 : Record "To-do") : Code[20];
    VAR
      Task2@1002 : Record "To-do";
    BEGIN
      Task2.INIT;
      Task2.TRANSFERFIELDS(Task,false);

      if Attendee."Attendance Type" <> Attendee."Attendance Type"::"To-do Organizer" then begin
        if Attendee."Attendee Type" = Attendee."Attendee Type"::Salesperson then begin
          Task2.VALIDATE("Salesperson Code",Attendee."Attendee No.");
          Task2."Organizer To-do No." := Task."No.";
          Task2."System To-do Type" := "System To-do Type"::"Salesperson Attendee";
        end else begin
          Task2.VALIDATE("Salesperson Code",Task."Salesperson Code");
          Task2.VALIDATE("Team Code",Task."Team Code");
          Task2.VALIDATE("Contact No.",Attendee."Attendee No.");
          Task2."Organizer To-do No." := Task."No.";
          Task2."System To-do Type" := "System To-do Type"::"Contact Attendee";
        end;
        Task2.INSERT(true)
      end else
        if Task."Team Code" <> '' then begin
          Task2."System To-do Type" := Task2."System To-do Type"::Organizer;
          Task2.VALIDATE("Salesperson Code",Attendee."Attendee No.");
          Task2.INSERT(true);
        end;
      exit(Task2."No.")
    END;

    [External]
    PROCEDURE DeleteAttendeeTask@20(Attendee@1000 : Record Attendee);
    VAR
      Task@1001 : Record "To-do";
    BEGIN
      if FindAttendeeTask(Task,Attendee) then
        Task.DELETE;
    END;

    [External]
    PROCEDURE FindAttendeeTask@25(VAR Task@1000 : Record "To-do";Attendee@1001 : Record Attendee) : Boolean;
    BEGIN
      Task.RESET;
      Task.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
      Task.SETRANGE("Organizer To-do No.",Attendee."To-do No.");
      if Attendee."Attendee Type" = Attendee."Attendee Type"::Contact then begin
        Task.SETRANGE("System To-do Type",Task."System To-do Type"::"Contact Attendee");
        Task.SETRANGE("Contact No.",Attendee."Attendee No.")
      end else begin
        Task.SETRANGE("System To-do Type",Task."System To-do Type"::"Salesperson Attendee");
        Task.SETRANGE("Salesperson Code",Attendee."Attendee No.");
      end;
      exit(Task.FIND('-'));
    END;

    LOCAL PROCEDURE CreateAttendeesFromTask@19(VAR Attendee@1000 : Record Attendee;Task@1001 : Record "To-do";TeamMeetingOrganizer@1008 : Code[20]);
    VAR
      Cont@1002 : Record Contact;
      Salesperson@1003 : Record "Salesperson/Purchaser";
      SegHeader@1004 : Record "Segment Header";
      SegLine@1005 : Record "Segment Line";
      Opp@1006 : Record Opportunity;
      AttendeeLineNo@1007 : Integer;
    BEGIN
      if Task."Segment No." = '' then begin
        if Task.Type = Type::Meeting then
          if Task."Team Code" = '' then begin
            if Salesperson.GET(Task."Salesperson Code") then
              Attendee.CreateAttendee(
                Attendee,
                Task."No.",10000,Attendee."Attendance Type"::"To-do Organizer",
                Attendee."Attendee Type"::Salesperson,
                Salesperson.Code,true)
          end else
            Task.CreateAttendeesFromTeam(
              Attendee,
              TeamMeetingOrganizer);

        if Attendee.FIND('+') then
          AttendeeLineNo := Attendee."Line No." + 10000
        else
          AttendeeLineNo := 10000;

        if Cont.GET(Task."Contact No.") then
          Attendee.CreateAttendee(
            Attendee,
            Task."No.",AttendeeLineNo,Attendee."Attendance Type"::Required,
            Attendee."Attendee Type"::Contact,
            Cont."No.",Cont."E-Mail" <> '');
      end else begin
        if Task."Team Code" = '' then begin
          if Salesperson.GET(Task."Salesperson Code") then
            Attendee.CreateAttendee(
              Attendee,
              Task."No.",10000,Attendee."Attendance Type"::"To-do Organizer",
              Attendee."Attendee Type"::Salesperson,
              Salesperson.Code,true);
        end else
          Task.CreateAttendeesFromTeam(Attendee,Task."Team Meeting Organizer");

        if Attendee.FIND('+') then
          AttendeeLineNo := Attendee."Line No." + 10000
        else
          AttendeeLineNo := 10000;

        if Opp.GET(Task."Opportunity No.") then
          Attendee.CreateAttendee(
            Attendee,
            Task."No.",AttendeeLineNo,Attendee."Attendance Type"::Required,
            Attendee."Attendee Type"::Contact,
            Opp."Contact No.",
            (Cont.GET(Opp."Contact No.") and
             (Cont."E-Mail" <> '')))
        else
          if SegHeader.GET(Task."Segment No.") then begin
            SegLine.SETRANGE("Segment No.",Task."Segment No.");
            SegLine.SETFILTER("Contact No.",'=%1',Task."Contact No.");
            if SegLine.FIND('-') then
              repeat
                Attendee.CreateAttendee(
                  Attendee,
                  Task."No.",AttendeeLineNo,Attendee."Attendance Type"::Required,
                  Attendee."Attendee Type"::Contact,
                  SegLine."Contact No.",
                  (Cont.GET(SegLine."Contact No.") and
                   (Cont."E-Mail" <> '')));
                AttendeeLineNo := AttendeeLineNo + 10000;
              until SegLine.NEXT = 0;
          end;
      end;
    END;

    LOCAL PROCEDURE CreateTaskInteractLanguages@17(VAR TaskInteractLanguage@1000 : Record "To-do Interaction Language";VAR Attachment@1001 : Record Attachment;TaskNo@1002 : Code[20]);
    VAR
      TaskInteractLanguage2@1003 : Record "To-do Interaction Language";
      Attachment2@1004 : Record Attachment;
      MarketingSetup@1006 : Record "Marketing Setup";
      AttachmentManagement@1005 : Codeunit AttachmentManagement;
      FileName@1007 : Text;
    BEGIN
      if TaskInteractLanguage.FIND('-') then
        repeat
          TaskInteractLanguage2.INIT;
          TaskInteractLanguage2."To-do No." := TaskNo;
          TaskInteractLanguage2."Language Code" := TaskInteractLanguage."Language Code";
          TaskInteractLanguage2.Description := TaskInteractLanguage.Description;
          if TaskInteractLanguage."Attachment No." <> 0 then begin
            Attachment.GET(TaskInteractLanguage."Attachment No.");
            Attachment2.GET(AttachmentManagement.InsertAttachment(0));
            Attachment2.TRANSFERFIELDS(Attachment,false);
            Attachment.CALCFIELDS("Attachment File");
            Attachment2."Attachment File" := Attachment."Attachment File";
            Attachment2.WizSaveAttachment;
            Attachment2.MODIFY(true);
            MarketingSetup.GET;
            if MarketingSetup."Attachment Storage Type" = MarketingSetup."Attachment Storage Type"::"Disk File" then
              if Attachment2."No." <> 0 then begin
                FileName := Attachment2.ConstDiskFileName;
                if FileName <> '' then
                  Attachment.ExportAttachmentToServerFile(FileName);
              end;
            TaskInteractLanguage2."Attachment No." := Attachment2."No.";
          end else
            TaskInteractLanguage2."Attachment No." := 0;
          TaskInteractLanguage2.INSERT;
        until TaskInteractLanguage.NEXT = 0;
    END;

    [External]
    PROCEDURE AssignActivityFromTask@9(VAR Task@1007 : Record "To-do");
    BEGIN
      INIT;
      SetFilterFromTask(Task);
      StartWizard2;
    END;

    LOCAL PROCEDURE InsertActivityTask@3(Task2@1000 : Record "To-do";ActivityCode@1001 : Code[10];VAR Attendee@1004 : Record Attendee);
    VAR
      ActivityStep@1002 : Record "Activity Step";
      TaskDate@1003 : Date;
    BEGIN
      TaskDate := Task2.Date;
      ActivityStep.SETRANGE("Activity Code",ActivityCode);
      if ActivityStep.FIND('-') then begin
        repeat
          InsertActivityStepTask(Task2,ActivityStep,TaskDate,Attendee);
        until ActivityStep.NEXT = 0;
      end else
        InsertActivityStepTask(Task2,ActivityStep,TaskDate,Attendee);
    END;

    LOCAL PROCEDURE InsertActivityStepTask@22(Task2@1010 : Record "To-do";ActivityStep@1009 : Record "Activity Step";TaskDate@1012 : Date;VAR Attendee2@1015 : Record Attendee) TaskNo : Code[20];
    VAR
      TempTask@1011 : TEMPORARY Record "To-do";
      InteractionTemplateSetup@1008 : Record "Interaction Template Setup";
      InteractionTemplate@1007 : Record "Interaction Template";
      TempTaskInteractionLanguage@1006 : TEMPORARY Record "To-do Interaction Language";
      TempAttachment@1005 : TEMPORARY Record Attachment;
      TempAttendee@1004 : TEMPORARY Record Attendee;
      TempRMCommentLine@1003 : TEMPORARY Record "Rlshp. Mgt. Comment Line";
    BEGIN
      TempTask.INIT;
      TempTask := Task2;
      TempTask.INSERT;
      if not ActivityStep.ISEMPTY then begin
        TempTask.Type := ActivityStep.Type;
        TempTask.Priority := ActivityStep.Priority;
        TempTask.Description := ActivityStep.Description;
        TempTask.Date := CALCDATE(ActivityStep."Date Formula",TaskDate);
      end;

      if TempTask.Type = Type::Meeting then begin
        if not Attendee2.ISEMPTY then begin
          Attendee2.SETRANGE("Attendance Type",Attendee2."Attendance Type"::"To-do Organizer");
          Attendee2.FIND('-')
        end;
        TempAttendee.DELETEALL;
        TempTask.VALIDATE("All Day Event",true);

        InteractionTemplateSetup.GET;
        if (InteractionTemplateSetup."Meeting Invitation" <> '') and
           InteractionTemplate.GET(InteractionTemplateSetup."Meeting Invitation")
        then
          UpdateInteractionTemplate(
            TempTask,TempTaskInteractionLanguage,TempAttachment,InteractionTemplate.Code,true);

        CreateAttendeesFromTask(TempAttendee,TempTask,Attendee2."Attendee No.");

        TempTask.VALIDATE("Contact No.",'');

        TaskNo := InsertTaskAndRelatedData(
            TempTask,TempTaskInteractionLanguage,TempAttachment,TempAttendee,TempRMCommentLine);
      end else begin
        TempAttendee.DELETEALL;
        CreateAttendeesFromTask(TempAttendee,TempTask,'');

        InsertTaskAndRelatedData(
          TempTask,TempTaskInteractionLanguage,TempAttachment,TempAttendee,TempRMCommentLine);
      end;
      TempTask.DELETE;
    END;

    LOCAL PROCEDURE SetFilterFromTask@35(VAR Task@1000 : Record "To-do");
    VAR
      Cont@1006 : Record Contact;
      Salesperson@1005 : Record "Salesperson/Purchaser";
      Team@1004 : Record Team;
      Campaign@1003 : Record Campaign;
      Opp@1002 : Record Opportunity;
      SegHeader@1001 : Record "Segment Header";
    BEGIN
      if Cont.GET(Task.GETFILTER("Contact Company No.")) then begin
        VALIDATE("Contact No.",Cont."No.");
        "Salesperson Code" := Cont."Salesperson Code";
        SETRANGE("Contact Company No.","Contact No.");
      end;
      if Cont.GET(Task.GETFILTER("Contact No.")) then begin
        VALIDATE("Contact No.",Cont."No.");
        "Salesperson Code" := Cont."Salesperson Code";
        SETRANGE("Contact No.","Contact No.");
      end;
      if Salesperson.GET(Task.GETFILTER("Salesperson Code")) then begin
        "Salesperson Code" := Salesperson.Code;
        SETRANGE("Salesperson Code","Salesperson Code");
      end;
      if Team.GET(Task.GETFILTER("Team Code")) then begin
        VALIDATE("Team Code",Team.Code);
        SETRANGE("Team Code","Team Code");
      end;
      if Campaign.GET(Task.GETFILTER("Campaign No.")) then begin
        "Campaign No." := Campaign."No.";
        "Salesperson Code" := Campaign."Salesperson Code";
        SETRANGE("Campaign No.","Campaign No.");
      end;
      if Opp.GET(Task.GETFILTER("Opportunity No.")) then begin
        VALIDATE("Opportunity No.",Opp."No.");
        "Contact No." := Opp."Contact No.";
        "Contact Company No." := Opp."Contact Company No.";
        "Campaign No." := Opp."Campaign No.";
        "Salesperson Code" := Opp."Salesperson Code";
        SETRANGE("Opportunity No.","Opportunity No.");
      end;
      if SegHeader.GET(Task.GETFILTER("Segment No.")) then begin
        VALIDATE("Segment No.",SegHeader."No.");
        "Campaign No." := SegHeader."Campaign No.";
        "Salesperson Code" := SegHeader."Salesperson Code";
        SETRANGE("Segment No.","Segment No.");
      end;
    END;

    [External]
    PROCEDURE CancelOpenTasks@6(OpportunityNo@1000 : Code[20]);
    VAR
      OldTask@1001 : Record "To-do";
      OldTask2@1002 : Record "To-do";
    BEGIN
      if OpportunityNo = '' then
        exit;

      OldTask.RESET;
      OldTask.SETCURRENTKEY("Opportunity No.");
      OldTask.SETRANGE("Opportunity No.",OpportunityNo);
      OldTask.SETRANGE(Closed,false);
      OldTask.SETRANGE(Canceled,false);

      if OldTask.FIND('-') then
        repeat
          OldTask2.GET(OldTask."No.");
          OldTask2.Recurring := false;
          OldTask2.VALIDATE(Canceled,true);
          OldTask2.MODIFY;
        until OldTask.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCommentLines@7(VAR RMCommentLine2@1001 : Record "Rlshp. Mgt. Comment Line";TaskNo@1000 : Code[20]);
    VAR
      RMCommentLine@1002 : Record "Rlshp. Mgt. Comment Line";
    BEGIN
      if RMCommentLine2.FIND('-') then
        repeat
          RMCommentLine.INIT;
          RMCommentLine := RMCommentLine2;
          RMCommentLine."No." := TaskNo;
          RMCommentLine.INSERT;
        until RMCommentLine2.NEXT = 0;
    END;

    [External]
    PROCEDURE SetDuration@16(EndingDate@1000 : Date;EndingTime@1001 : Time);
    BEGIN
      if (EndingDate < DMY2DATE(1,1,1900)) or (EndingDate > DMY2DATE(31,12,2999)) then
        ERROR(Text006,DMY2DATE(1,1,1900),DMY2DATE(31,12,2999));
      if not "All Day Event" and (Type = Type::Meeting) then
        Duration := CREATEDATETIME(EndingDate,EndingTime) - CREATEDATETIME(Date,"Start Time")
      else
        Duration := CREATEDATETIME(EndingDate + 1,000000T) - CREATEDATETIME(Date,000000T);

      VALIDATE(Duration);
    END;

    [External]
    PROCEDURE GetEndDateTime@18();
    BEGIN
      if (Type <> Type::Meeting) or "All Day Event" then
        if "Start Time" <> 000000T then
          TempEndDateTime := CREATEDATETIME(Date - 1,"Start Time") + Duration
        else begin
          TempEndDateTime := CREATEDATETIME(Date,000000T) + Duration;
          if "All Day Event" then
            TempEndDateTime := CREATEDATETIME(DT2DATE(TempEndDateTime - 1000),000000T);
        end
      else
        TempEndDateTime := CREATEDATETIME(Date,"Start Time") + Duration;

      "Ending Date" := DT2DATE(TempEndDateTime);
      if "All Day Event" then
        "Ending Time" := 000000T
      else
        "Ending Time" := DT2TIME(TempEndDateTime);
    END;

    LOCAL PROCEDURE UpdateAttendeeTasks@12(OldTaskNo@1003 : Code[20]);
    VAR
      Task2@1001 : Record "To-do";
      TempTask@1002 : TEMPORARY Record "To-do";
    BEGIN
      Task2.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
      Task2.SETRANGE("Organizer To-do No.",OldTaskNo);
      if "Team Code" = '' then
        Task2.SETFILTER(
          "System To-do Type",
          '%1|%2',
          Task2."System To-do Type"::"Salesperson Attendee",
          Task2."System To-do Type"::"Contact Attendee")
      else
        Task2.SETFILTER("System To-do Type",'<>%1',Task2."System To-do Type"::Team);
      if Task2.FIND('-') then
        repeat
          TempTask.INIT;
          TempTask.TRANSFERFIELDS(Task2,false);
          TempTask.INSERT;
          Task2.TRANSFERFIELDS(Rec,false);
          Task2."System To-do Type" := TempTask."System To-do Type";
          if Task2."System To-do Type" = Task2."System To-do Type"::"Contact Attendee" then
            Task2.VALIDATE("Contact No.",TempTask."Contact No.")
          else
            Task2."Salesperson Code" := TempTask."Salesperson Code";
          if Task2."No." <> OldTaskNo then
            Task2.MODIFY(true);
          TempTask.DELETE;
        until Task2.NEXT = 0
    END;

    LOCAL PROCEDURE UpdateInteractionTemplate@13(VAR Task@1004 : Record "To-do";VAR TaskInteractionLanguage@1007 : Record "To-do Interaction Language";VAR Attachment@1001 : Record Attachment;InteractTmplCode@1006 : Code[10];AttachmentTemporary@1005 : Boolean);
    VAR
      InteractTmpl@1002 : Record "Interaction Template";
      InteractTemplLanguage@1008 : Record "Interaction Tmpl. Language";
      Attachment2@1003 : Record Attachment;
      AttachmentManagement@1000 : Codeunit AttachmentManagement;
    BEGIN
      Task.MODIFY;
      TaskInteractionLanguage.SETRANGE("To-do No.",Task."No.");

      if AttachmentTemporary then
        TaskInteractionLanguage.DELETEALL
      else
        TaskInteractionLanguage.DELETEALL(true);

      Task."Interaction Template Code" := InteractTmplCode;

      if InteractTmpl.GET(Task."Interaction Template Code") then begin
        Task."Language Code" := InteractTmpl."Language Code (Default)";
        Task.Subject := InteractTmpl.Description;
        Task."Unit Cost (LCY)" := InteractTmpl."Unit Cost (LCY)";
        Task."Unit Duration (Min.)" := InteractTmpl."Unit Duration (Min.)";
        if Task."Campaign No." = '' then
          Task."Campaign No." := InteractTmpl."Campaign No.";

        if AttachmentTemporary then
          Attachment.DELETEALL;

        InteractTemplLanguage.RESET;
        InteractTemplLanguage.SETRANGE("Interaction Template Code",Task."Interaction Template Code");
        if InteractTemplLanguage.FIND('-') then
          repeat
            TaskInteractionLanguage.INIT;
            TaskInteractionLanguage."To-do No." := Task."No.";
            TaskInteractionLanguage."Language Code" := InteractTemplLanguage."Language Code";
            TaskInteractionLanguage.Description := InteractTemplLanguage.Description;
            if Attachment2.GET(InteractTemplLanguage."Attachment No.") then begin
              if AttachmentTemporary then begin
                Attachment.INIT;
                if Attachment2."Storage Type" = Attachment2."Storage Type"::Embedded then
                  Attachment2.CALCFIELDS("Attachment File");
                Attachment.TRANSFERFIELDS(Attachment2);
                Attachment.INSERT;
                TaskInteractionLanguage."Attachment No." := Attachment."No.";
              end else
                TaskInteractionLanguage."Attachment No." :=
                  AttachmentManagement.InsertAttachment(InteractTemplLanguage."Attachment No.");
            end;
            TaskInteractionLanguage.INSERT;
          until InteractTemplLanguage.NEXT = 0
        else
          Task."Attachment No." := 0;
      end else begin
        Task."Language Code" := '';
        Task.Subject := '';
        Task."Unit Cost (LCY)" := 0;
        Task."Unit Duration (Min.)" := 0;
        Task."Attachment No." := 0;
      end;

      if TaskInteractionLanguage.GET(Task."No.",Task."Language Code") then
        Task."Attachment No." := TaskInteractionLanguage."Attachment No.";

      Task.MODIFY;
    END;

    [Internal]
    PROCEDURE SendMAPIInvitations@21(Task@1000 : Record "To-do";FromWizard@1019 : Boolean);
    VAR
      Attendee@1001 : Record Attendee;
      NoToSend@1014 : Integer;
      NoNotSent@1016 : Integer;
      Selected@1018 : Integer;
      Options@1017 : Text[1024];
    BEGIN
      if Task."System To-do Type" <> Task."System To-do Type"::Organizer then
        Task.GetMeetingOrganizerTask(Task);
      if Task."Attachment No." = 0 then begin
        Attendee.SETRANGE("To-do No.",Task."Organizer To-do No.");
        Attendee.SETRANGE("Send Invitation",true);
        Attendee.SETRANGE("Attendee Type",Attendee."Attendee Type"::Contact);
        if not Attendee.ISEMPTY then begin
          Attendee.SETCURRENTKEY("To-do No.","Attendance Type");
          Attendee.SETRANGE("Send Invitation");
          Attendee.SETRANGE("Attendee Type");
          Attendee.SETRANGE("Attendance Type",Attendee."Attendance Type"::"To-do Organizer");
          if not Attendee.ISEMPTY then
            ERROR(Text067,Task.TABLECAPTION,Attendee.TABLECAPTION)
        end;
        Attendee.RESET;
      end;

      Attendee.SETRANGE("To-do No.",Task."Organizer To-do No.");
      Attendee.SETFILTER("Attendance Type",'<>%1',Attendee."Attendance Type"::"To-do Organizer");
      Attendee.SETRANGE("Send Invitation",true);

      if not FromWizard then begin
        NoToSend := Attendee.COUNT;
        Attendee.SETRANGE("Invitation Sent",false);
        NoNotSent := Attendee.COUNT;
        if NoToSend = 0 then
          ERROR(Text018,Attendee.FIELDCAPTION("Send Invitation"));
        if (NoToSend > NoNotSent) and (NoNotSent <> 0) then begin
          Options :=
            STRSUBSTNO(
              Text019,Attendee.FIELDCAPTION("Send Invitation")) + ',' +
            Text020 + ',' +
            Text021;
          Selected := STRMENU(Options,1);
          if Selected in [0,3] then
            ERROR('');
        end;
        if NoNotSent = 0 then begin
          if not CONFIRM(
               STRSUBSTNO(
                 Text022,Attendee.FIELDCAPTION("Send Invitation")),false)
          then
            ERROR('');
        end;
        if NoToSend = NoNotSent then begin
          if not CONFIRM(STRSUBSTNO(Text019,Attendee.FIELDCAPTION("Send Invitation")),false) then
            ERROR('');
        end;

        Attendee.RESET;
        Attendee.SETRANGE("To-do No.",Task."Organizer To-do No.");
        Attendee.SETRANGE("Send Invitation",true);
        if Selected = 2 then
          Attendee.SETRANGE("Invitation Sent",false);
      end;

      if Attendee.FINDFIRST then
        ProcessAttendeeAppointment(Task,Attendee);
    END;

    [Internal]
    PROCEDURE CreateAttachment@23(PageNotEditable@1000 : Boolean);
    VAR
      TaskInteractionLanguage@1001 : Record "To-do Interaction Language";
    BEGIN
      if "Interaction Template Code" = '' then
        exit;
      if not TaskInteractionLanguage.GET("Organizer To-do No.","Language Code") then begin
        TaskInteractionLanguage.INIT;
        TaskInteractionLanguage."To-do No." := "Organizer To-do No.";
        TaskInteractionLanguage."Language Code" := "Language Code";
        TaskInteractionLanguage.INSERT(true);
      end;
      if TaskInteractionLanguage.CreateAttachment(PageNotEditable) then begin
        "Attachment No." := TaskInteractionLanguage."Attachment No.";
        MODIFY(true);
      end;
    END;

    [Internal]
    PROCEDURE OpenAttachment@24(PageNotEditable@1000 : Boolean);
    VAR
      TaskInteractionLanguage@1001 : Record "To-do Interaction Language";
    BEGIN
      if "Interaction Template Code" = '' then
        exit;
      if TaskInteractionLanguage.GET("Organizer To-do No.","Language Code") then
        if TaskInteractionLanguage."Attachment No." <> 0 then
          TaskInteractionLanguage.OpenAttachment(PageNotEditable);
      MODIFY(true);
    END;

    [Internal]
    PROCEDURE ImportAttachment@26();
    VAR
      TaskInteractionLanguage@1000 : Record "To-do Interaction Language";
    BEGIN
      if "Interaction Template Code" = '' then
        exit;

      if not TaskInteractionLanguage.GET("Organizer To-do No.","Language Code") then begin
        TaskInteractionLanguage.INIT;
        TaskInteractionLanguage."To-do No." := "Organizer To-do No.";
        TaskInteractionLanguage."Language Code" := "Language Code";
        TaskInteractionLanguage.INSERT(true);
      end;
      TaskInteractionLanguage.ImportAttachment;
      "Attachment No." := TaskInteractionLanguage."Attachment No.";
      MODIFY(true);
    END;

    [Internal]
    PROCEDURE ExportAttachment@27();
    VAR
      TaskInteractionLanguage@1000 : Record "To-do Interaction Language";
    BEGIN
      if "Interaction Template Code" = '' then
        exit;

      if TaskInteractionLanguage.GET("Organizer To-do No.","Language Code") then
        if TaskInteractionLanguage."Attachment No." <> 0 then
          TaskInteractionLanguage.ExportAttachment;
    END;

    [Internal]
    PROCEDURE RemoveAttachment@28(Prompt@1000 : Boolean);
    VAR
      TaskInteractionLanguage@1001 : Record "To-do Interaction Language";
    BEGIN
      if "Interaction Template Code" = '' then
        exit;

      if TaskInteractionLanguage.GET("Organizer To-do No.","Language Code") then
        if TaskInteractionLanguage."Attachment No." <> 0 then
          if TaskInteractionLanguage.RemoveAttachment(Prompt) then begin
            "Attachment No." := 0;
            MODIFY(true);
          end;
      MODIFY(true);
    END;

    LOCAL PROCEDURE LogTaskInteraction@30(VAR Task@1006 : Record "To-do";VAR Task2@1000 : Record "To-do";Deliver@1010 : Boolean);
    VAR
      TempSegLine@1001 : TEMPORARY Record "Segment Line";
      Cont@1002 : Record Contact;
      Salesperson@1003 : Record "Salesperson/Purchaser";
      Campaign@1004 : Record Campaign;
      Attachment@1007 : Record Attachment;
      TempAttachment@1008 : TEMPORARY Record Attachment;
      TempInterLogEntryCommentLine@1009 : TEMPORARY Record "Inter. Log Entry Comment Line";
      SegManagement@1005 : Codeunit SegManagement;
    BEGIN
      if Attachment.GET(Task."Attachment No.") then begin
        TempAttachment.DELETEALL;
        TempAttachment.INIT;
        TempAttachment.WizEmbeddAttachment(Attachment);
        TempAttachment.INSERT;
      end;

      TempSegLine.DELETEALL;
      TempSegLine.INIT;
      TempSegLine."To-do No." := Task."Organizer To-do No.";
      TempSegLine.SETRANGE("To-do No.",TempSegLine."To-do No.");
      if Cont.GET(Task2."Contact No.") then
        TempSegLine.VALIDATE("Contact No.",Task2."Contact No.");
      if Salesperson.GET(Task."Salesperson Code") then
        TempSegLine."Salesperson Code" := Salesperson.Code;
      if Campaign.GET(Task."Campaign No.") then
        TempSegLine."Campaign No." := Campaign."No.";
      TempSegLine."Interaction Template Code" := Task."Interaction Template Code";
      TempSegLine."Attachment No." := Task."Attachment No.";
      TempSegLine."Language Code" := Task."Language Code";
      TempSegLine.Subject := Task.Description;
      TempSegLine.Description := Task.Description;
      TempSegLine."Correspondence Type" := TempSegLine."Correspondence Type"::Email;
      TempSegLine."Cost (LCY)" := Task."Unit Cost (LCY)";
      TempSegLine."Duration (Min.)" := Task."Unit Duration (Min.)";
      TempSegLine."Opportunity No." := Task."Opportunity No.";
      TempSegLine.VALIDATE(Date,WORKDATE);

      TempSegLine.INSERT;
      SegManagement.LogInteraction(TempSegLine,TempAttachment,TempInterLogEntryCommentLine,Deliver,false);
    END;

    [External]
    PROCEDURE CreateAttendeesFromTeam@33(VAR Attendee@1002 : Record Attendee;TeamMeetingOrganizer@1000 : Code[20]);
    VAR
      TeamSalesperson@1003 : Record "Team Salesperson";
      AttendeeLineNo@1004 : Integer;
    BEGIN
      if TeamMeetingOrganizer = '' then
        exit;
      Attendee.CreateAttendee(
        Attendee,
        "No.",10000,Attendee."Attendance Type"::"To-do Organizer",
        Attendee."Attendee Type"::Salesperson,
        TeamMeetingOrganizer,
        true);

      TeamSalesperson.SETRANGE("Team Code","Team Code");
      if TeamSalesperson.FIND('-') then begin
        AttendeeLineNo := 20000;
        repeat
          if TeamSalesperson."Salesperson Code" <> TeamMeetingOrganizer then
            Attendee.CreateAttendee(
              Attendee,
              "No.",AttendeeLineNo,Attendee."Attendance Type"::Required,
              Attendee."Attendee Type"::Salesperson,
              TeamSalesperson."Salesperson Code",
              false);
          AttendeeLineNo := AttendeeLineNo + 10000;
        until TeamSalesperson.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ChangeTeam@37();
    VAR
      Task@1000 : Record "To-do";
      TeamSalesperson@1001 : Record "Team Salesperson";
      TeamSalespersonOld@1004 : Record "Team Salesperson";
      TempAttendee@1002 : TEMPORARY Record Attendee;
      Attendee@1003 : Record Attendee;
      Salesperson@1007 : Record "Salesperson/Purchaser";
      AttendeeLineNo@1005 : Integer;
      SendInvitation@1006 : Boolean;
      TeamCode@1009 : Code[10];
    BEGIN
      MODIFY;
      TeamSalespersonOld.SETRANGE("Team Code",xRec."Team Code");
      TeamSalesperson.SETRANGE("Team Code","Team Code");
      if TeamSalesperson.FIND('-') then
        repeat
          TeamSalesperson.MARK(true)
        until TeamSalesperson.NEXT = 0;

      if Type = Type::Meeting then begin
        Attendee.SETCURRENTKEY("To-do No.","Attendee Type","Attendee No.");
        Attendee.SETRANGE("To-do No.","Organizer To-do No.");
        Attendee.SETRANGE("Attendee Type",Attendee."Attendee Type"::Salesperson);
        if Attendee.FIND('-') then
          repeat
            TeamSalesperson.SETRANGE("Salesperson Code",Attendee."Attendee No.");
            if TeamSalesperson.FIND('-') then
              TeamSalesperson.MARK(false)
            else
              if Attendee."Attendance Type" <> Attendee."Attendance Type"::"To-do Organizer" then begin
                TeamSalespersonOld.SETRANGE("Salesperson Code",Attendee."Attendee No.");
                if TeamSalespersonOld.FINDFIRST then begin
                  Attendee.MARK(true);
                  DeleteAttendeeTask(Attendee)
                end
              end
          until Attendee.NEXT = 0;
        Attendee.MARKEDONLY(true);
        Attendee.DELETEALL
      end else begin
        Task.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
        Task.SETRANGE("Organizer To-do No.","Organizer To-do No.");
        Task.SETFILTER("System To-do Type",'%1|%2',
          Task."System To-do Type"::Organizer,
          Task."System To-do Type"::"Salesperson Attendee");
        if Task.FIND('-') then
          repeat
            TeamSalesperson.SETRANGE("Salesperson Code",Task."Salesperson Code");
            if TeamSalesperson.FIND('-') then
              TeamSalesperson.MARK(false)
            else
              Task.DELETE(true)
          until Task.NEXT = 0
      end;

      TeamCode := "Team Code";
      GET("No.");
      "Team Code" := TeamCode;

      TeamSalesperson.MARKEDONLY(true);
      TeamSalesperson.SETRANGE("Salesperson Code");
      if TeamSalesperson.FIND('-') then begin
        if Type = Type::Meeting then
          repeat
            Attendee.RESET;
            Attendee.SETRANGE("To-do No.","Organizer To-do No.");
            if Attendee.FIND('+') then
              AttendeeLineNo := Attendee."Line No." + 10000
            else
              AttendeeLineNo := 10000;
            if Salesperson.GET(TeamSalesperson."Salesperson Code") then
              if Salesperson."E-Mail" <> '' then
                SendInvitation := true
              else
                SendInvitation := false;
            Attendee.CreateAttendee(
              Attendee,
              "Organizer To-do No.",AttendeeLineNo,
              Attendee."Attendance Type"::Required,
              Attendee."Attendee Type"::Salesperson,
              TeamSalesperson."Salesperson Code",SendInvitation);
            CreateSubTask(Attendee,Rec)
          until TeamSalesperson.NEXT = 0
        else
          repeat
            TempAttendee.CreateAttendee(
              TempAttendee,
              "No.",10000,
              TempAttendee."Attendance Type"::"To-do Organizer",
              TempAttendee."Attendee Type"::Salesperson,
              TeamSalesperson."Salesperson Code",
              true);
            CreateSubTask(TempAttendee,Rec);
            TempAttendee.DELETEALL
          until TeamSalesperson.NEXT = 0
      end;
      MODIFY(true)
    END;

    LOCAL PROCEDURE ReassignTeamTaskToSalesperson@38();
    VAR
      Task@1000 : Record "To-do";
      Attendee@1001 : Record Attendee;
      AttendeeLineNo@1002 : Integer;
      SalespersonCode@1005 : Code[20];
    BEGIN
      MODIFY;
      if Type = Type::Meeting then begin
        Task.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
        Task.SETRANGE("Organizer To-do No.","No.");
        Task.SETRANGE("Salesperson Code","Salesperson Code");
        if Task.FINDFIRST then begin
          Attendee.SETCURRENTKEY("To-do No.","Attendee Type","Attendee No.");
          Attendee.SETRANGE("To-do No.","No.");
          Attendee.SETRANGE("Attendee Type",Attendee."Attendee Type"::Salesperson);
          Attendee.SETRANGE("Attendee No.","Salesperson Code");
          if Attendee.FINDFIRST then
            if Attendee."Attendance Type" = Attendee."Attendance Type"::"To-do Organizer" then begin
              Attendee.DELETE;
              Task.DELETE;
            end else
              Attendee.DELETE(true)
        end;

        SalespersonCode := "Salesperson Code";
        GET("No.");
        "Salesperson Code" := SalespersonCode;

        Task.SETRANGE("Salesperson Code");
        Task.SETRANGE("System To-do Type","System To-do Type"::Organizer);
        if Task.FINDFIRST then begin
          Attendee.RESET;
          Attendee.SETCURRENTKEY("To-do No.","Attendee Type","Attendee No.");
          Attendee.SETRANGE("To-do No.","No.");
          Attendee.SETRANGE("Attendee Type",Attendee."Attendee Type"::Salesperson);
          Attendee.SETRANGE("Attendee No.",Task."Salesperson Code");
          if Attendee.FINDFIRST then begin
            Attendee."Attendance Type" := Attendee."Attendance Type"::Required;
            Attendee.MODIFY
          end;
          Task."System To-do Type" := Task."System To-do Type"::"Salesperson Attendee";
          Task.MODIFY(true)
        end;

        Attendee.RESET;
        Attendee.SETRANGE("To-do No.","No.");
        if Attendee.FINDLAST then
          AttendeeLineNo := Attendee."Line No." + 10000
        else
          AttendeeLineNo := 10000;
        Attendee.CreateAttendee(
          Attendee,"No.",AttendeeLineNo,
          Attendee."Attendance Type"::"To-do Organizer",
          Attendee."Attendee Type"::Salesperson,
          "Salesperson Code",true);
        ArrangeOrganizerAttendee;
      end else begin
        Task.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
        Task.SETRANGE("Organizer To-do No.","No.");
        Task.SETRANGE("System To-do Type","System To-do Type"::Organizer);
        if Task.FINDFIRST then
          Task.DELETEALL(true);

        if "Contact No." <> '' then begin
          Task.SETRANGE("System To-do Type","System To-do Type"::"Contact Attendee");
          if Task.FINDFIRST then begin
            Task."Salesperson Code" := "Salesperson Code";
            Task.MODIFY(true)
          end
        end
      end;

      "System To-do Type" := "System To-do Type"::Organizer;
      "Team Code" := '';
      MODIFY(true);
    END;

    LOCAL PROCEDURE ReassignSalespersonTaskToTeam@36();
    VAR
      TeamSalesperson@1000 : Record "Team Salesperson";
      Attendee@1001 : Record Attendee;
      TempAttendee@1002 : TEMPORARY Record Attendee;
      Task@1003 : Record "To-do";
      AttendeeLineNo@1004 : Integer;
      SendInvitation@1005 : Boolean;
      SalespersonCode@1006 : Code[20];
      TaskNo@1007 : Code[20];
    BEGIN
      MODIFY;
      SalespersonCode := "Salesperson Code";
      "Salesperson Code" := '';
      "System To-do Type" := "System To-do Type"::Team;
      MODIFY;

      Task.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
      Task.SETRANGE("Organizer To-do No.","No.");

      if Type = Type::Meeting then begin
        Attendee.SETRANGE("To-do No.","No.");
        Attendee.SETRANGE("Attendance Type",Attendee."Attendance Type"::"To-do Organizer");
        if Attendee.FINDFIRST then begin
          Attendee."Attendance Type" := Attendee."Attendance Type"::Required;
          TaskNo := CreateSubTask(Attendee,Rec);
          Attendee."Attendance Type" := Attendee."Attendance Type"::"To-do Organizer";
          Attendee.MODIFY;
          if Task.GET(TaskNo) then begin
            Task."System To-do Type" := Task."System To-do Type"::Organizer;
            Task.MODIFY;
          end
        end;

        Task.SETFILTER("System To-do Type",'<>%1',Task."System To-do Type"::"Contact Attendee");
        TeamSalesperson.SETRANGE("Team Code","Team Code");
        if TeamSalesperson.FIND('-') then
          repeat
            Task.SETRANGE("Salesperson Code",TeamSalesperson."Salesperson Code");
            if Task.FINDFIRST then begin
              if (Task."System To-do Type" = Task."System To-do Type"::Organizer) and
                 (Task."Salesperson Code" <> SalespersonCode)
              then begin
                Task."System To-do Type" := Task."System To-do Type"::"Salesperson Attendee";
                MODIFY(true)
              end
            end else begin
              Attendee.RESET;
              Attendee.SETRANGE("To-do No.","No.");
              if Attendee.FINDLAST then
                AttendeeLineNo := Attendee."Line No." + 10000
              else
                AttendeeLineNo := 10000;
              if Salesperson.GET(TeamSalesperson."Salesperson Code") then
                if Salesperson."E-Mail" <> '' then
                  SendInvitation := true
                else
                  SendInvitation := false;
              Attendee.CreateAttendee(
                Attendee,"No.",AttendeeLineNo,
                Attendee."Attendance Type"::Required,
                Attendee."Attendee Type"::Salesperson,
                TeamSalesperson."Salesperson Code",
                SendInvitation);
              CreateSubTask(Attendee,Rec)
            end
          until TeamSalesperson.NEXT = 0
      end else begin
        TeamSalesperson.SETRANGE("Team Code","Team Code");
        if TeamSalesperson.FIND('-') then
          repeat
            TempAttendee.CreateAttendee(
              TempAttendee,
              "No.",10000,
              TempAttendee."Attendance Type"::"To-do Organizer",
              TempAttendee."Attendee Type"::Salesperson,
              TeamSalesperson."Salesperson Code",
              true);
            CreateSubTask(TempAttendee,Rec);
            TempAttendee.DELETEALL
          until TeamSalesperson.NEXT = 0;
      end;

      MODIFY(true)
    END;

    [External]
    PROCEDURE GetMeetingOrganizerTask@39(VAR Task@1000 : Record "To-do");
    BEGIN
      if Type = Type::Meeting then
        if "Team Code" <> '' then begin
          Task.SETCURRENTKEY("Organizer To-do No.","System To-do Type");
          Task.SETRANGE("Organizer To-do No.","Organizer To-do No.");
          Task.SETRANGE("System To-do Type","System To-do Type"::Organizer);
          Task.FIND('-')
        end else
          Task.GET("Organizer To-do No.")
    END;

    [External]
    PROCEDURE ArrangeOrganizerAttendee@40();
    VAR
      Attendee@1000 : Record Attendee;
      FirstLineNo@1001 : Integer;
      LastLineNo@1002 : Integer;
      OrganizerLineNo@1003 : Integer;
    BEGIN
      Attendee.SETRANGE("To-do No.","No.");
      if not Attendee.FINDFIRST then
        exit;
      FirstLineNo := Attendee."Line No.";
      Attendee.FINDLAST;
      LastLineNo := Attendee."Line No.";

      Attendee.SETCURRENTKEY("To-do No.","Attendance Type");
      Attendee.SETRANGE("Attendance Type",Attendee."Attendance Type"::"To-do Organizer");
      Attendee.FINDFIRST;
      OrganizerLineNo := Attendee."Line No.";

      if FirstLineNo <> OrganizerLineNo then begin
        Attendee.RENAME("No.",LastLineNo + 1);
        Attendee.GET("No.",FirstLineNo);
        Attendee.RENAME("No.",OrganizerLineNo);
        Attendee.GET("No.",LastLineNo + 1);
        Attendee.RENAME("No.",FirstLineNo)
      end
    END;

    LOCAL PROCEDURE StartWizard@48();
    BEGIN
      "Wizard Step" := "Wizard Step"::"1";

      "Wizard Contact Name" := GetContactName;
      if Campaign.GET("Campaign No.") then
        "Wizard Campaign Description" := Campaign.Description;
      if Opp.GET("Opportunity No.") then
        "Wizard Opportunity Description" := Opp.Description;
      if SegHeader.GET(GETFILTER("Segment No.")) then
        "Segment Description" := SegHeader.Description;
      if Team.GET(GETFILTER("Team Code")) then
        "Team To-do" := true;

      Duration := 1440 * 1000 * 60;
      Date := TODAY;
      GetEndDateTime;

      INSERT;
      if PAGE.RUNMODAL(PAGE::"Create Task",Rec) = ACTION::OK then;
    END;

    [External]
    PROCEDURE CheckStatus@42();
    VAR
      Salesperson@1001 : Record "Salesperson/Purchaser";
    BEGIN
      if Date = 0D then
        ErrorMessage(FIELDCAPTION(Date));

      if Description = '' then
        ErrorMessage(FIELDCAPTION(Description));

      if "Team To-do" and ("Team Code" = '') then
        ErrorMessage(FIELDCAPTION("Team Code"));

      if not "Team To-do" and ("Salesperson Code" = '') then
        ErrorMessage(FIELDCAPTION("Salesperson Code"));

      if Type = Type::Meeting then begin
        if not "All Day Event" then begin
          if "Start Time" = 000000T then
            ErrorMessage(FIELDCAPTION("Start Time"));
          if Duration = 0 then
            ErrorMessage(FIELDCAPTION(Duration));
        end;

        if ("Interaction Template Code" = '') and "Send on finish" then
          ErrorMessage(FIELDCAPTION("Interaction Template Code"));

        TempAttendee.RESET;
        TempAttendee.SETRANGE("Attendance Type",TempAttendee."Attendance Type"::"To-do Organizer");
        if TempAttendee.ISEMPTY then begin
          TempAttendee.RESET;
          ERROR(Text065);
        end;

        if TempAttendee.FIND('-') then
          Salesperson.GET(TempAttendee."Attendee No.");
        TempAttendee.RESET;
        if ("Attachment No." = 0) and "Send on finish" then begin
          TempAttendee.SETRANGE("Send Invitation",true);
          TempAttendee.SETRANGE("Attendee Type",TempAttendee."Attendee Type"::Contact);
          if not TempAttendee.ISEMPTY then begin
            TempAttendee.RESET;
            ERROR(Text067,TABLECAPTION,TempAttendee.TABLECAPTION);
          end;
          TempAttendee.RESET;
        end;
        TempAttendee.RESET;
        if "Send on finish" then begin
          TempAttendee.SETRANGE("Send Invitation",true);
          if TempAttendee.ISEMPTY then begin
            TempAttendee.RESET;
            ERROR(Text068,TempAttendee.FIELDCAPTION("Send Invitation"));
          end;
          TempAttendee.RESET;
        end;
      end;

      if (Location = '') and "Send on finish" then
        ErrorMessage(FIELDCAPTION(Location));
    END;

    [Internal]
    PROCEDURE FinishWizard@41(SendExchangeAppointment@1002 : Boolean);
    VAR
      SegLine@1000 : Record "Segment Line";
      SendOnFinish@1001 : Boolean;
    BEGIN
      CreateExchangeAppointment := SendExchangeAppointment;
      if Recurring then begin
        TESTFIELD("Recurring Date Interval");
        TESTFIELD("Calc. Due Date From");
      end;
      if Type = Type::Meeting then begin
        if not "Team To-do" then begin
          TempAttendee.SETRANGE("Attendance Type",TempAttendee."Attendance Type"::"To-do Organizer");
          TempAttendee.FIND('-');
          VALIDATE("Salesperson Code",TempAttendee."Attendee No.");
          TempAttendee.RESET;
        end;
        VALIDATE("Contact No.",'');
      end else begin
        if Cont.GET("Contact No.") then
          TempAttendee.CreateAttendee(
            TempAttendee,
            "No.",10000,TempAttendee."Attendance Type"::Required,
            TempAttendee."Attendee Type"::Contact,
            Cont."No.",Cont."E-Mail" <> '');
        if SegHeader.GET("Segment No.") then begin
          SegLine.SETRANGE("Segment No.","Segment No.");
          SegLine.SETFILTER("Contact No.",'<>%1','');
          if SegLine.FIND('-') then
            repeat
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",SegLine."Line No.",TempAttendee."Attendance Type"::Required,
                TempAttendee."Attendee Type"::Contact,
                SegLine."Contact No.",
                (Cont.GET(SegLine."Contact No.") and
                 (Cont."E-Mail" <> '')));
            until SegLine.NEXT = 0;
        end;
      end;

      SendOnFinish := "Send on finish";
      "Wizard Step" := "Wizard Step"::" ";
      "Team To-do" := false;
      "Send on finish" := false;
      "Segment Description" := '';
      "Team Meeting Organizer" := '';
      "Activity Code" := '';
      "Wizard Contact Name" := '';
      "Wizard Campaign Description" := '';
      "Wizard Opportunity Description" := '';
      MODIFY;
      InsertTask(Rec,TempRMCommentLine,TempAttendee,TempTaskInteractionLanguage,TempAttachment,'',SendOnFinish);
      DELETE;
    END;

    LOCAL PROCEDURE GetContactName@65() : Text[50];
    BEGIN
      if Cont.GET("Contact No.") then
        exit(Cont.Name);
      if Cont.GET("Contact Company No.") then
        exit(Cont.Name);
    END;

    LOCAL PROCEDURE ErrorMessage@47(FieldName@1000 : Text[1024]);
    BEGIN
      ERROR(Text043,FieldName);
    END;

    [Internal]
    PROCEDURE AssignDefaultAttendeeInfo@46();
    VAR
      InteractionTemplate@1002 : Record "Interaction Template";
      InteractionTemplateSetup@1001 : Record "Interaction Template Setup";
      SegLine@1003 : Record "Segment Line";
      TeamSalesperson@1004 : Record "Team Salesperson";
      Salesperson@1000 : Record "Salesperson/Purchaser";
      AttendeeLineNo@1005 : Integer;
    BEGIN
      if TempAttendee.FIND('+') then
        AttendeeLineNo := TempAttendee."Line No." + 10000
      else
        AttendeeLineNo := 10000;
      case true of
        (GETFILTER("Contact No.") <> '') and (GETFILTER("Salesperson Code") <> ''):
          begin
            if Salesperson.GET(GETFILTER("Salesperson Code")) then begin
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::"To-do Organizer",
                TempAttendee."Attendee Type"::Salesperson,
                Salesperson.Code,true);
              AttendeeLineNo += 10000;
            end;
            if Cont.GET(GETFILTER("Contact No.")) then begin
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::Required,
                TempAttendee."Attendee Type"::Contact,
                Cont."No.",
                Cont."E-Mail" <> '');
              AttendeeLineNo += 10000;
            end;
          end;
        (GETFILTER("Contact No.") <> '') and (GETFILTER("Campaign No.") <> ''):
          begin
            if Campaign.GET(GETFILTER("Campaign No.")) then
              if Salesperson.GET(Campaign."Salesperson Code") then begin
                TempAttendee.CreateAttendee(
                  TempAttendee,
                  "No.",AttendeeLineNo,
                  TempAttendee."Attendance Type"::"To-do Organizer",
                  TempAttendee."Attendee Type"::Salesperson,
                  Salesperson.Code,true);
                AttendeeLineNo += 10000
              end;
            if Cont.GET(GETFILTER("Contact No.")) then begin
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::Required,
                TempAttendee."Attendee Type"::Contact,
                Cont."No.",Cont."E-Mail" <> '');
              AttendeeLineNo += 10000;
            end;
          end
        else begin
          if Cont.GET(GETFILTER("Contact No.")) then begin
            if Cont."Salesperson Code" <> '' then begin
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::"To-do Organizer",
                TempAttendee."Attendee Type"::Salesperson,
                Cont."Salesperson Code",true);
              AttendeeLineNo += 10000
            end;
            TempAttendee.CreateAttendee(
              TempAttendee,
              "No.",AttendeeLineNo,
              TempAttendee."Attendance Type"::Required,
              TempAttendee."Attendee Type"::Contact,
              Cont."No.",Cont."E-Mail" <> '');
            AttendeeLineNo += 10000;
          end else
            if Cont.GET(GETFILTER("Contact Company No.")) then begin
              if Cont."Salesperson Code" <> '' then begin
                TempAttendee.CreateAttendee(
                  TempAttendee,
                  "No.",AttendeeLineNo,
                  TempAttendee."Attendance Type"::"To-do Organizer",
                  TempAttendee."Attendee Type"::Salesperson,
                  Cont."Salesperson Code",true);
                AttendeeLineNo += 10000
              end;
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::Required,
                TempAttendee."Attendee Type"::Contact,
                Cont."No.",Cont."E-Mail" <> '');
              AttendeeLineNo += 10000;
            end;

          if Salesperson.GET(GETFILTER("Salesperson Code")) then begin
            TempAttendee.CreateAttendee(
              TempAttendee,
              "No.",AttendeeLineNo,
              TempAttendee."Attendance Type"::"To-do Organizer",
              TempAttendee."Attendee Type"::Salesperson,
              Salesperson.Code,true);
            AttendeeLineNo += 10000;
          end;

          if Campaign.GET(GETFILTER("Campaign No.")) then
            if Salesperson.GET(Campaign."Salesperson Code") then begin
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::"To-do Organizer",
                TempAttendee."Attendee Type"::Salesperson,
                Salesperson.Code,true);
              AttendeeLineNo += 10000
            end;

          if Opp.GET(GETFILTER("Opportunity No.")) then begin
            if Salesperson.GET(Opp."Salesperson Code") then begin
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::"To-do Organizer",
                TempAttendee."Attendee Type"::Salesperson,
                Salesperson.Code,true);
              AttendeeLineNo += 10000
            end;
            if Cont.GET(Opp."Contact No.") then begin
              TempAttendee.CreateAttendee(
                TempAttendee,
                "No.",AttendeeLineNo,
                TempAttendee."Attendance Type"::Required,
                TempAttendee."Attendee Type"::Contact,
                Cont."No.",Cont."E-Mail" <> '');
              AttendeeLineNo += 10000
            end;
          end;
        end;
      end;

      if SegHeader.GET(GETFILTER("Segment No.")) then begin
        if Salesperson.GET(SegHeader."Salesperson Code") then begin
          TempAttendee.CreateAttendee(
            TempAttendee,
            "No.",AttendeeLineNo,
            TempAttendee."Attendance Type"::"To-do Organizer",
            TempAttendee."Attendee Type"::Salesperson,
            Salesperson.Code,true);
          AttendeeLineNo += 10000
        end;
        SegLine.SETRANGE("Segment No.","Segment No.");
        SegLine.SETFILTER("Contact No.",'<>%1','');
        if SegLine.FIND('-') then
          repeat
            TempAttendee.CreateAttendee(
              TempAttendee,
              "No.",AttendeeLineNo,
              TempAttendee."Attendance Type"::Required,
              TempAttendee."Attendee Type"::Contact,
              SegLine."Contact No.",
              (Cont.GET(SegLine."Contact No.") and
               (Cont."E-Mail" <> '')));
            AttendeeLineNo += 10000
          until SegLine.NEXT = 0;
      end;
      if Team.GET("Team Code") then begin
        TeamSalesperson.SETRANGE("Team Code",Team.Code);
        if TeamSalesperson.FIND('-') then
          repeat
            TempAttendee.SETRANGE("Attendee Type",TempAttendee."Attendee Type"::Salesperson);
            TempAttendee.SETRANGE("Attendee No.",TeamSalesperson."Salesperson Code");
            if not TempAttendee.FIND('-') then
              if Salesperson.GET(TeamSalesperson."Salesperson Code") then begin
                TempAttendee.RESET;
                TempAttendee.CreateAttendee(
                  TempAttendee,
                  "No.",AttendeeLineNo,
                  TempAttendee."Attendance Type"::Required,
                  TempAttendee."Attendee Type"::Salesperson,
                  TeamSalesperson."Salesperson Code",
                  Salesperson."E-Mail" <> '');
                AttendeeLineNo += 10000
              end;
            TempAttendee.RESET;
          until TeamSalesperson.NEXT = 0;
      end;

      InteractionTemplateSetup.GET;
      if (InteractionTemplateSetup."Meeting Invitation" <> '') and
         InteractionTemplate.GET(InteractionTemplateSetup."Meeting Invitation")
      then
        UpdateInteractionTemplate(
          Rec,TempTaskInteractionLanguage,TempAttachment,InteractionTemplate.Code,true);
    END;

    [Internal]
    PROCEDURE ValidateInteractionTemplCode@66();
    BEGIN
      UpdateInteractionTemplate(
        Rec,TempTaskInteractionLanguage,TempAttachment,"Interaction Template Code",true);
      LoadTempAttachment;
    END;

    [Internal]
    PROCEDURE AssistEditAttachment@58();
    BEGIN
      if TempAttachment.GET("Attachment No.") then begin
        TempAttachment.OpenAttachment("Interaction Template Code" + ' ' + Description,true,"Language Code");
        TempAttachment.MODIFY;
      end else
        ERROR(Text047);
    END;

    [External]
    PROCEDURE ValidateLanguageCode@67();
    BEGIN
      if "Language Code" = xRec."Language Code" then
        exit;

      if not TempTaskInteractionLanguage.GET("No.","Language Code") then begin
        if "No." = '' then
          ERROR(Text009,TempTaskInteractionLanguage.TABLECAPTION);
      end else
        "Attachment No." := TempTaskInteractionLanguage."Attachment No.";
    END;

    [External]
    PROCEDURE LookupLanguageCode@68();
    BEGIN
      TempTaskInteractionLanguage.SETFILTER("To-do No.",'');
      if TempTaskInteractionLanguage.GET('',"Language Code") then
        if PAGE.RUNMODAL(0,TempTaskInteractionLanguage) = ACTION::LookupOK then begin
          "Language Code" := TempTaskInteractionLanguage."Language Code";
          "Attachment No." := TempTaskInteractionLanguage."Attachment No.";
        end;
    END;

    [Internal]
    PROCEDURE LoadTempAttachment@45();
    VAR
      Attachment@1000 : Record Attachment;
      TempAttachment2@1001 : TEMPORARY Record Attachment;
    BEGIN
      if TempAttachment.FINDSET then
        repeat
          TempAttachment2 := TempAttachment;
          TempAttachment2.INSERT;
        until TempAttachment.NEXT = 0;

      if TempAttachment2.FINDSET then
        repeat
          Attachment.GET(TempAttachment2."No.");
          Attachment.CALCFIELDS("Attachment File");
          TempAttachment.GET(TempAttachment2."No.");
          TempAttachment.WizEmbeddAttachment(Attachment);
          TempAttachment."No." := TempAttachment2."No.";
          TempAttachment.MODIFY;
        until TempAttachment2.NEXT = 0;
    END;

    [External]
    PROCEDURE ClearDefaultAttendeeInfo@44();
    BEGIN
      TempAttendee.DELETEALL;
      TempAttachment.DELETEALL;
      TempTaskInteractionLanguage.DELETEALL;
      "Interaction Template Code" := '';
      "Language Code" := '';
      "Attachment No." := 0;
      Subject := '';
      "Unit Cost (LCY)" := 0;
      "Unit Duration (Min.)" := 0;
      MODIFY;
    END;

    [External]
    PROCEDURE GetAttendee@59(VAR Attendee@1000 : Record Attendee);
    BEGIN
      Attendee.DELETEALL;
      if TempAttendee.FIND('-') then
        repeat
          Attendee := TempAttendee;
          Attendee.INSERT;
        until TempAttendee.NEXT = 0;
    END;

    [External]
    PROCEDURE SetAttendee@49(VAR Attendee@1000 : Record Attendee);
    BEGIN
      TempAttendee.DELETEALL;

      if Attendee.FINDSET then
        repeat
          TempAttendee := Attendee;
          TempAttendee.INSERT;
        until Attendee.NEXT = 0;
    END;

    [External]
    PROCEDURE SetComments@53(VAR RMCommentLine@1001 : Record "Rlshp. Mgt. Comment Line");
    BEGIN
      TempRMCommentLine.DELETEALL;
      if RMCommentLine.FINDSET then
        repeat
          TempRMCommentLine := RMCommentLine;
          TempRMCommentLine.INSERT;
        until RMCommentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE StartWizard2@63();
    BEGIN
      "Wizard Contact Name" := GetContactName;
      if Cont.GET(GETFILTER("Contact No.")) then
        "Wizard Contact Name" := Cont.Name
      else
        if Cont.GET(GETFILTER("Contact Company No.")) then
          "Wizard Contact Name" := Cont.Name;

      if Campaign.GET(GETFILTER("Campaign No.")) then
        "Wizard Campaign Description" := Campaign.Description;

      if SegHeader.GET(GETFILTER("Segment No.")) then
        "Segment Description" := SegHeader.Description;

      "Wizard Step" := "Wizard Step"::"1";
      Duration := 1440 * 1000 * 60;

      INSERT;

      if PAGE.RUNMODAL(PAGE::"Assign Activity",Rec) = ACTION::OK then;
    END;

    [External]
    PROCEDURE CheckAssignActivityStatus@60();
    BEGIN
      if "Activity Code" = '' then
        ErrorMessage(Text051);
      if Date = 0D then
        ErrorMessage(FIELDCAPTION(Date));
      if ("Team Code" = '') and ("Salesperson Code" = '') then
        ERROR(Text053,FIELDCAPTION("Salesperson Code"),FIELDCAPTION("Team Code"));
      if ("Team Code" <> '') and
         Activity.IncludesMeeting("Activity Code") and
         ("Team Meeting Organizer" = '')
      then
        ERROR(Text056,"Activity Code");
    END;

    PROCEDURE FinishAssignActivity@54();
    VAR
      TempRMCommentLine@1003 : TEMPORARY Record "Rlshp. Mgt. Comment Line";
      TempAttendee@1002 : TEMPORARY Record Attendee;
      TempTaskInteractionLanguage@1001 : TEMPORARY Record "To-do Interaction Language";
      TempAttachment@1000 : TEMPORARY Record Attachment;
    BEGIN
      TempAttendee.DELETEALL;
      if "Team Meeting Organizer" <> '' then
        TempAttendee.CreateAttendee(
          TempAttendee,
          "No.",10000,TempAttendee."Attendance Type"::"To-do Organizer",
          TempAttendee."Attendee Type"::Salesperson,
          "Team Meeting Organizer",
          true)
      else
        if "Salesperson Code" <> '' then
          TempAttendee.CreateAttendee(
            TempAttendee,
            "No.",10000,TempAttendee."Attendance Type"::"To-do Organizer",
            TempAttendee."Attendee Type"::Salesperson,
            "Salesperson Code",
            true);
      InsertTask(
        Rec,TempRMCommentLine,TempAttendee,
        TempTaskInteractionLanguage,TempAttachment,"Activity Code",false);
      DELETE;
    END;

    LOCAL PROCEDURE FillSalesPersonContact@8(VAR TaskParameter@1000 : Record "To-do";AttendeeParameter@1001 : Record Attendee);
    BEGIN
      case AttendeeParameter."Attendee Type" of
        AttendeeParameter."Attendee Type"::Contact:
          TaskParameter.VALIDATE("Contact No.",AttendeeParameter."Attendee No.");
        AttendeeParameter."Attendee Type"::Salesperson:
          TaskParameter.VALIDATE("Salesperson Code",AttendeeParameter."Attendee No.");
      end;
    END;

    [External]
    PROCEDURE SetRunFromForm@11();
    BEGIN
      RunFormCode := true;
    END;

    LOCAL PROCEDURE IsCalledFromForm@29() : Boolean;
    BEGIN
      exit((CurrFieldNo <> 0) or RunFormCode);
    END;

    LOCAL PROCEDURE OneDayDuration@31() : Integer;
    BEGIN
      exit(86400000); // 24 * 60 * 60 * 1000 = 86,400,000 ms in 24 hours
    END;

    LOCAL PROCEDURE GetCurrentUserTimeZone@32(VAR TimeZoneInfo@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";TimeZoneID@1000 : Text);
    VAR
      TimeZoneInfoRussianStandard@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
    BEGIN
      if TimeZoneID = 'Russian Standard Time' then begin
        TimeZoneInfoRussianStandard := TimeZoneInfoRussianStandard.FindSystemTimeZoneById(TimeZoneID);
        TimeZoneInfo := TimeZoneInfo.CreateCustomTimeZone(TimeZoneID,TimeZoneInfoRussianStandard.BaseUtcOffset,'','');
      end else
        TimeZoneInfo := TimeZoneInfo.FindSystemTimeZoneById(TimeZoneID);
    END;

    LOCAL PROCEDURE InitializeExchangeAppointment@81(VAR Appointment@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IAppointment";VAR ExchangeWebServicesServer@1001 : Codeunit "Exchange Web Services Server");
    VAR
      TimeZoneInfo@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo";
    BEGIN
      SetupExchangeService(ExchangeWebServicesServer);
      ExchangeWebServicesServer.CreateAppointment(Appointment);
      GetCurrentUserTimeZone(TimeZoneInfo,ExchangeWebServicesServer.GetCurrentUserTimeZone);
      UpdateAppointment(Appointment,TimeZoneInfo);
    END;

    LOCAL PROCEDURE UpdateAppointmentSalesPersonList@82(VAR SalesPersonList@1000 : Text;AddSalesPersonName@1001 : Text[50]);
    BEGIN
      if AddSalesPersonName <> '' then
        if SalesPersonList = '' then
          SalesPersonList := AddSalesPersonName
        else
          SalesPersonList += ', ' + AddSalesPersonName ;
    END;

    LOCAL PROCEDURE SaveAppointment@52(VAR Appointment@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IAppointment");
    BEGIN
      Appointment.SendAppointment;
    END;

    [External]
    PROCEDURE UpdateAppointment@61(VAR Appointment@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IAppointment";TimeZoneInfo@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.TimeZoneInfo");
    VAR
      DateTime@1001 : DateTime;
    BEGIN
      Appointment.Subject := Description;
      Appointment.Location := Location;
      DateTime := CREATEDATETIME(Date,"Start Time");
      Appointment.MeetingStart := DateTime;
      if "All Day Event" then
        Appointment.IsAllDayEvent := true
      else begin
        DateTime := CREATEDATETIME("Ending Date","Ending Time");
        Appointment.MeetingEnd := DateTime;
      end;
      Appointment.StartTimeZone := TimeZoneInfo;
      Appointment.EndTimeZone := TimeZoneInfo;
    END;

    [Internal]
    PROCEDURE SetupExchangeService@62(VAR ExchangeWebServicesServer@1000 : Codeunit "Exchange Web Services Server");
    VAR
      User@1001 : Record User;
    BEGIN
      COMMIT;
      User.SETRANGE("User Name",USERID);
      if not User.FINDFIRST and not Initialize(ExchangeWebServicesServer,User."Authentication Email") then
        if not InitializeServiceWithCredentials(ExchangeWebServicesServer) then
          ERROR('');
    END;

    LOCAL PROCEDURE MakeAppointmentBody@43(Task@1001 : Record "To-do";SalespersonsList@1000 : Text;SalespersonName@1002 : Text[50]) : Text;
    BEGIN
      exit(
        STRSUBSTNO(Text015,SalespersonsList) + '<br/><br/>' +
        STRSUBSTNO(Text016,FORMAT(Task.Date),FORMAT(Task."Start Time"),FORMAT(Task.Location)) + '<br/><br/>' +
        Text017 + '<br/>' +
        SalespersonName + '<br/>' +
        FORMAT(TODAY) + ' ' + FORMAT(TIME));
    END;

    LOCAL PROCEDURE SetAttendeeInvitationSent@76(VAR Attendee@1000 : Record Attendee);
    BEGIN
      Attendee."Invitation Sent" := true;
      Attendee.MODIFY;
    END;

    [External]
    PROCEDURE AddAppointmentAttendee@70(VAR Appointment@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IAppointment";VAR Attendee@1001 : Record Attendee;Email@1002 : Text);
    BEGIN
      if Attendee."Attendance Type" = Attendee."Attendance Type"::Required then
        Appointment.AddRequiredAttendee(Email)
      else
        Appointment.AddOptionalAttendee(Email);
      SetAttendeeInvitationSent(Attendee);
    END;

    LOCAL PROCEDURE ProcessAttendeeAppointment@72(Task@1002 : Record "To-do";VAR Attendee@1004 : Record Attendee);
    VAR
      Task2@1003 : Record "To-do";
      Salesperson@1006 : Record "Salesperson/Purchaser";
      Salesperson2@1005 : Record "Salesperson/Purchaser";
      ExchangeWebServicesServer@1001 : Codeunit "Exchange Web Services Server";
      Mail@1009 : Codeunit Mail;
      Appointment@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.IAppointment";
      SalesPersonList@1007 : Text;
      Body@1008 : Text;
    BEGIN
      if CreateExchangeAppointment then
        InitializeExchangeAppointment(Appointment,ExchangeWebServicesServer);
      repeat
        if FindAttendeeTask(Task2,Attendee) then
          if Attendee."Attendee Type" = Attendee."Attendee Type"::Salesperson then
            if Salesperson2.GET(Task2."Salesperson Code") and
               Salesperson.GET(Task."Salesperson Code")
            then
              if CreateExchangeAppointment then begin
                UpdateAppointmentSalesPersonList(SalesPersonList,Salesperson2.Name);
                if Salesperson2."E-Mail" <> '' then
                  AddAppointmentAttendee(Appointment,Attendee,Salesperson2."E-Mail");
              end else begin
                Body := MakeAppointmentBody(Task,Salesperson2.Name,Salesperson.Name);
                if Mail.NewMessage(Salesperson2."E-Mail",'','',Task2.Description,Body,'',false) then
                  SetAttendeeInvitationSent(Attendee)
                else
                  MESSAGE(Text023,Attendee."Attendee Name");
              end
            else begin
              LogTaskInteraction(Task,Task2,true);
              SetAttendeeInvitationSent(Attendee);
            end;
      until Attendee.NEXT = 0;
      if CreateExchangeAppointment and (SalesPersonList <> '') then begin
        Body := MakeAppointmentBody(Task,SalesPersonList,Salesperson.Name);
        Appointment.Body := Body;
        SaveAppointment(Appointment)
      end;
    END;

    [TryFunction]
    LOCAL PROCEDURE InitializeServiceWithCredentials@73(VAR ExchangeWebServicesServer@1001 : Codeunit "Exchange Web Services Server");
    VAR
      TempOfficeAdminCredentials@1000 : TEMPORARY Record "Office Admin. Credentials";
      WebCredentials@1004 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials";
      WebCredentialsLogin@1002 : Text[250];
    BEGIN
      TempOfficeAdminCredentials.INIT;
      TempOfficeAdminCredentials.INSERT;
      COMMIT;
      CLEARLASTERROR;
      if PAGE.RUNMODAL(PAGE::"Office 365 Credentials",TempOfficeAdminCredentials) <> ACTION::LookupOK then
        ERROR('');
      WebCredentialsLogin := TempOfficeAdminCredentials.Email;
      WebCredentials := WebCredentials.WebCredentials(WebCredentialsLogin,TempOfficeAdminCredentials.GetPassword);
      TempOfficeAdminCredentials.DELETE;
      ExchangeWebServicesServer.Initialize(
        WebCredentialsLogin,ExchangeWebServicesServer.ProdEndpoint,WebCredentials,false);
    END;

    [TryFunction]
    LOCAL PROCEDURE Initialize@34(VAR ExchangeWebServicesServer@1004 : Codeunit "Exchange Web Services Server";AuthenticationEmail@1003 : Text[250]);
    VAR
      ExchangeServiceSetup@1000 : Record "Exchange Service Setup";
      AzureADMgt@1001 : Codeunit "Azure AD Mgt.";
      AccessToken@1002 : Text;
    BEGIN
      AccessToken := AzureADMgt.GetAccessToken(AzureADMgt.GetO365Resource,AzureADMgt.GetO365ResourceName,false);

      if AccessToken <> '' then begin
        ExchangeWebServicesServer.InitializeWithOAuthToken(AccessToken,ExchangeWebServicesServer.GetEndpoint);
        exit;
      end;

      ExchangeServiceSetup.GET;

      ExchangeWebServicesServer.InitializeWithCertificate(
        ExchangeServiceSetup."Azure AD App. ID",ExchangeServiceSetup."Azure AD App. Cert. Thumbprint",
        ExchangeServiceSetup."Azure AD Auth. Endpoint",ExchangeServiceSetup."Exchange Service Endpoint",
        ExchangeServiceSetup."Exchange Resource Uri");

      ExchangeWebServicesServer.SetImpersonatedIdentity(AuthenticationEmail);
    END;

    BEGIN
    END.
  }
}

