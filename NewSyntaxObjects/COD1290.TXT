OBJECT Codeunit 1290 SOAP Web Service Request Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BodyPathTxt@1001 : TextConst '@@@={Locked};ENU=/soap:Envelope/soap:Body';
      ContentTypeTxt@1000 : TextConst '@@@={Locked};ENU="multipart/form-data; charset=utf-8"';
      FaultStringXmlPathTxt@1012 : TextConst '@@@={Locked};ENU=/soap:Envelope/soap:Body/soap:Fault/faultstring';
      NoRequestBodyErr@1015 : TextConst 'ENU=The request body is not set.';
      NoServiceAddressErr@1017 : TextConst 'ENU=The web service URI is not set.';
      ExpectedResponseNotReceivedErr@1009 : TextConst 'ENU=The expected data was not received from the web service.';
      SchemaNamespaceTxt@1007 : TextConst '@@@={Locked};ENU=http://www.w3.org/2001/XMLSchema';
      SchemaInstanceNamespaceTxt@1006 : TextConst '@@@={Locked};ENU=http://www.w3.org/2001/XMLSchema-instance';
      SecurityUtilityNamespaceTxt@1003 : TextConst '@@@={Locked};ENU=http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
      SecurityExtensionNamespaceTxt@1004 : TextConst '@@@={Locked};ENU=http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
      SoapNamespaceTxt@1002 : TextConst '@@@={Locked};ENU=http://schemas.xmlsoap.org/soap/envelope/';
      UsernameTokenNamepsaceTxt@1005 : TextConst '@@@={Locked};ENU=http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
      TempDebugLogTempBlob@1010 : TEMPORARY Record TempBlob;
      ResponseBodyTempBlob@1020 : Record TempBlob;
      ResponseInStreamTempBlob@1019 : Record TempBlob;
      Trace@1016 : Codeunit Trace;
      GlobalRequestBodyInStream@1022 : InStream;
      HttpWebResponse@1021 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      GlobalPassword@1013 : Text;
      GlobalURL@1014 : Text;
      GlobalUsername@1008 : Text;
      TraceLogEnabled@1011 : Boolean;
      GlobalTimeout@1024 : Integer;
      InternalErr@1028 : TextConst 'ENU=The remote service has returned the following error message:\\';
      GlobalSkipCheckHttps@1018 : Boolean;
      GlobalProgressDialogEnabled@1023 : Boolean;

    [TryFunction]
    [Internal]
    PROCEDURE SendRequestToWebService@17();
    VAR
      WebRequestHelper@1000 : Codeunit "Web Request Helper";
      HttpWebRequest@1007 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpStatusCode@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ResponseHeaders@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";
      ResponseInStream@1006 : InStream;
    BEGIN
      CheckGlobals;
      BuildWebRequest(GlobalURL,HttpWebRequest);
      ResponseInStreamTempBlob.INIT;
      ResponseInStreamTempBlob.Blob.CREATEINSTREAM(ResponseInStream);
      CreateSoapRequest(HttpWebRequest.GetRequestStream,GlobalRequestBodyInStream,GlobalUsername,GlobalPassword);
      WebRequestHelper.GetWebResponse(HttpWebRequest,HttpWebResponse,ResponseInStream,
        HttpStatusCode,ResponseHeaders,GlobalProgressDialogEnabled);
      ExtractContentFromResponse(ResponseInStream,ResponseBodyTempBlob);
    END;

    LOCAL PROCEDURE BuildWebRequest@3(ServiceUrl@1000 : Text;VAR HttpWebRequest@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest");
    VAR
      DecompressionMethods@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.DecompressionMethods";
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(ServiceUrl);
      HttpWebRequest.Method := 'POST';
      HttpWebRequest.KeepAlive := true;
      HttpWebRequest.AllowAutoRedirect := true;
      HttpWebRequest.UseDefaultCredentials := true;
      HttpWebRequest.ContentType := ContentTypeTxt;
      if GlobalTimeout <= 0 then
        GlobalTimeout := 600000;
      HttpWebRequest.Timeout := GlobalTimeout;
      HttpWebRequest.AutomaticDecompression := DecompressionMethods.GZip;
    END;

    LOCAL PROCEDURE CreateSoapRequest@2(RequestOutStream@1000 : OutStream;BodyContentInStream@1004 : InStream;Username@1003 : Text;Password@1005 : Text);
    VAR
      XmlDoc@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      BodyXmlNode@1016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      CreateEnvelope(XmlDoc,BodyXmlNode,Username,Password);
      AddBodyToEnvelope(BodyXmlNode,BodyContentInStream);
      XmlDoc.Save(RequestOutStream);
      TraceLogXmlDocToTempFile(XmlDoc,'FullRequest');
    END;

    LOCAL PROCEDURE CreateEnvelope@11(VAR XmlDoc@1011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR BodyXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Username@1009 : Text;Password@1010 : Text);
    VAR
      XMLDOMMgt@1000 : Codeunit "XML DOM Management";
      EnvelopeXmlNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      HeaderXmlNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SecurityXmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      UsernameTokenXmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TempXmlNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PasswordXmlNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;
      with XMLDOMMgt do begin
        AddRootElementWithPrefix(XmlDoc,'Envelope','s',SoapNamespaceTxt,EnvelopeXmlNode);
        AddAttribute(EnvelopeXmlNode,'xmlns:u',SecurityUtilityNamespaceTxt);

        AddElementWithPrefix(EnvelopeXmlNode,'Header','','s',SoapNamespaceTxt,HeaderXmlNode);

        if (Username <> '') or (Password <> '') then begin
          AddElementWithPrefix(HeaderXmlNode,'Security','','o',SecurityExtensionNamespaceTxt,SecurityXmlNode);
          AddAttributeWithPrefix(SecurityXmlNode,'mustUnderstand','s',SoapNamespaceTxt,'1');

          AddElementWithPrefix(SecurityXmlNode,'UsernameToken','','o',SecurityExtensionNamespaceTxt,UsernameTokenXmlNode);
          AddAttributeWithPrefix(UsernameTokenXmlNode,'Id','u',SecurityUtilityNamespaceTxt,CreateUUID);

          AddElementWithPrefix(UsernameTokenXmlNode,'Username',Username,'o',SecurityExtensionNamespaceTxt,TempXmlNode);
          AddElementWithPrefix(UsernameTokenXmlNode,'Password',Password,'o',SecurityExtensionNamespaceTxt,PasswordXmlNode);
          AddAttribute(PasswordXmlNode,'Type',UsernameTokenNamepsaceTxt);
        end;

        AddElementWithPrefix(EnvelopeXmlNode,'Body','','s',SoapNamespaceTxt,BodyXmlNode);
        AddAttribute(BodyXmlNode,'xmlns:xsi',SchemaInstanceNamespaceTxt);
        AddAttribute(BodyXmlNode,'xmlns:xsd',SchemaNamespaceTxt);
      end;
    END;

    LOCAL PROCEDURE CreateUUID@9() : Text;
    BEGIN
      exit('uuid-' + DELCHR(LOWERCASE(FORMAT(CREATEGUID)),'=','{}'));
    END;

    LOCAL PROCEDURE AddBodyToEnvelope@12(VAR BodyXmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";BodyInStream@1000 : InStream);
    VAR
      XMLDOMManagement@1001 : Codeunit "XML DOM Management";
      BodyContentXmlDoc@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDOMManagement.LoadXMLDocumentFromInStream(BodyInStream,BodyContentXmlDoc);
      TraceLogXmlDocToTempFile(BodyContentXmlDoc,'RequestBodyContent');

      BodyXmlNode.AppendChild(BodyXmlNode.OwnerDocument.ImportNode(BodyContentXmlDoc.DocumentElement,true));
    END;

    LOCAL PROCEDURE ExtractContentFromResponse@4(ResponseInStream@1000 : InStream;VAR BodyTempBlob@1002 : Record TempBlob);
    VAR
      XMLDOMMgt@1005 : Codeunit "XML DOM Management";
      ResponseBodyXMLDoc@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ResponseBodyXmlNode@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      BodyOutStream@1007 : OutStream;
      Found@1001 : Boolean;
    BEGIN
      TraceLogStreamToTempFile(ResponseInStream,'FullResponse',TempDebugLogTempBlob);
      XMLDOMMgt.LoadXMLNodeFromInStream(ResponseInStream,XmlNode);

      Found := XMLDOMMgt.FindNodeWithNamespace(XmlNode,BodyPathTxt,'soap',SoapNamespaceTxt,ResponseBodyXmlNode);
      if not Found then
        ERROR(ExpectedResponseNotReceivedErr);

      ResponseBodyXMLDoc := ResponseBodyXMLDoc.XmlDocument;
      ResponseBodyXMLDoc.AppendChild(ResponseBodyXMLDoc.ImportNode(ResponseBodyXmlNode.FirstChild,true));

      BodyTempBlob.Blob.CREATEOUTSTREAM(BodyOutStream);
      ResponseBodyXMLDoc.Save(BodyOutStream);
      TraceLogXmlDocToTempFile(ResponseBodyXMLDoc,'ResponseBodyContent');
    END;

    [Internal]
    PROCEDURE GetResponseContent@22(VAR ResponseBodyInStream@1000 : InStream);
    BEGIN
      ResponseBodyTempBlob.Blob.CREATEINSTREAM(ResponseBodyInStream);
    END;

    [Internal]
    PROCEDURE ProcessFaultResponse@15(SupportInfo@1001 : Text);
    VAR
      WebRequestHelper@1002 : Codeunit "Web Request Helper";
      XMLDOMMgt@1006 : Codeunit "XML DOM Management";
      WebException@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";
      XmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ResponseInputStream@1000 : InStream;
      ErrorText@1009 : Text;
      ServiceURL@1010 : Text;
    BEGIN
      ErrorText := WebRequestHelper.GetWebResponseError(WebException,ServiceURL);

      if ErrorText <> '' then
        ERROR(ErrorText);

      ResponseInputStream := WebException.Response.GetResponseStream;
      if TraceLogEnabled then
        Trace.LogStreamToTempFile(ResponseInputStream,'WebExceptionResponse',TempDebugLogTempBlob);

      XMLDOMMgt.LoadXMLNodeFromInStream(ResponseInputStream,XmlNode);

      ErrorText := XMLDOMMgt.FindNodeTextWithNamespace(XmlNode,FaultStringXmlPathTxt,'soap',SoapNamespaceTxt);
      if ErrorText = '' then
        ErrorText := WebException.Message;
      ErrorText := InternalErr + ErrorText + ServiceURL;

      if SupportInfo <> '' then
        ErrorText += '\\' + SupportInfo;

      ERROR(ErrorText);
    END;

    [External]
    PROCEDURE SetGlobals@10(RequestBodyInStream@1000 : InStream;URL@1001 : Text;Username@1002 : Text;Password@1003 : Text);
    BEGIN
      GlobalRequestBodyInStream := RequestBodyInStream;

      GlobalSkipCheckHttps := false;

      GlobalURL := URL;
      GlobalUsername := Username;
      GlobalPassword := Password;

      GlobalProgressDialogEnabled := true;

      TraceLogEnabled := false;
    END;

    [External]
    PROCEDURE SetTimeout@7(NewTimeout@1000 : Integer);
    BEGIN
      GlobalTimeout := NewTimeout;
    END;

    LOCAL PROCEDURE CheckGlobals@14();
    VAR
      WebRequestHelper@1000 : Codeunit "Web Request Helper";
    BEGIN
      if GlobalRequestBodyInStream.EOS then
        ERROR(NoRequestBodyErr);

      if GlobalURL = '' then
        ERROR(NoServiceAddressErr);

      if GlobalSkipCheckHttps then
        WebRequestHelper.IsValidUri(GlobalURL)
      else
        WebRequestHelper.IsSecureHttpUrl(GlobalURL);
    END;

    LOCAL PROCEDURE TraceLogStreamToTempFile@33(VAR ToLogInStream@1000 : InStream;Name@1005 : Text;VAR TraceLogTempBlob@1001 : Record TempBlob);
    BEGIN
      if TraceLogEnabled then
        Trace.LogStreamToTempFile(ToLogInStream,Name,TraceLogTempBlob);
    END;

    LOCAL PROCEDURE TraceLogXmlDocToTempFile@67(VAR XmlDoc@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Name@1005 : Text);
    BEGIN
      if TraceLogEnabled then
        Trace.LogXmlDocToTempFile(XmlDoc,Name);
    END;

    [External]
    PROCEDURE SetTraceMode@1(NewTraceMode@1000 : Boolean);
    BEGIN
      TraceLogEnabled := NewTraceMode;
    END;

    [External]
    PROCEDURE DisableHttpsCheck@13();
    BEGIN
      GlobalSkipCheckHttps := true;
    END;

    [External]
    PROCEDURE DisableProgressDialog@18();
    BEGIN
      GlobalProgressDialogEnabled := false;
    END;

    BEGIN
    END.
  }
}

