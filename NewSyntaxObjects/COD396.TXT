OBJECT Codeunit 396 NoSeriesManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "No. Series Line"=rimd;
    OnRun=BEGIN
            TryNo := GetNextNo(TryNoSeriesCode,TrySeriesDate,false);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="You may not enter numbers manually. "';
      Text001@1001 : TextConst 'ENU=If you want to enter numbers manually, please activate %1 in %2 %3.';
      Text002@1002 : TextConst 'ENU="It is not possible to assign numbers automatically. "';
      Text003@1003 : TextConst 'ENU=If you want the program to assign numbers automatically, please activate %1 in %2 %3.';
      Text004@1004 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on %2.';
      Text005@1005 : TextConst 'ENU=You cannot assign new numbers from the number series %1.';
      Text006@1006 : TextConst 'ENU=You cannot assign new numbers from the number series %1 on a date before %2.';
      Text007@1007 : TextConst 'ENU=You cannot assign numbers greater than %1 from the number series %2.';
      Text009@1009 : TextConst 'ENU=The number format in %1 must be the same as the number format in %2.';
      Text010@1010 : TextConst 'ENU=The number %1 cannot be extended to more than 20 characters.';
      NoSeries@1011 : Record "No. Series";
      LastNoSeriesLine@1012 : Record "No. Series Line";
      NoSeriesCode@1013 : Code[20];
      WarningNoSeriesCode@1014 : Code[20];
      TryNoSeriesCode@1015 : Code[20];
      TrySeriesDate@1016 : Date;
      TryNo@1017 : Code[20];

    [External]
    PROCEDURE TestManual@21(DefaultNoSeriesCode@1000 : Code[20]);
    BEGIN
      if DefaultNoSeriesCode <> '' then begin
        NoSeries.GET(DefaultNoSeriesCode);
        if not NoSeries."Manual Nos." then
          ERROR(
            Text000 +
            Text001,
            NoSeries.FIELDCAPTION("Manual Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
      end;
    END;

    [External]
    PROCEDURE InitSeries@3(DefaultNoSeriesCode@1000 : Code[20];OldNoSeriesCode@1001 : Code[20];NewDate@1002 : Date;VAR NewNo@1003 : Code[20];VAR NewNoSeriesCode@1004 : Code[20]);
    BEGIN
      if NewNo = '' then begin
        NoSeries.GET(DefaultNoSeriesCode);
        if not NoSeries."Default Nos." then
          ERROR(
            Text002 +
            Text003,
            NoSeries.FIELDCAPTION("Default Nos."),NoSeries.TABLECAPTION,NoSeries.Code);
        if OldNoSeriesCode <> '' then begin
          NoSeriesCode := DefaultNoSeriesCode;
          FilterSeries;
          NoSeries.Code := OldNoSeriesCode;
          if not NoSeries.FIND then
            NoSeries.GET(DefaultNoSeriesCode);
        end;
        NewNo := GetNextNo(NoSeries.Code,NewDate,true);
        NewNoSeriesCode := NoSeries.Code;
      end else
        TestManual(DefaultNoSeriesCode);
    END;

    [External]
    PROCEDURE SetDefaultSeries@5(VAR NewNoSeriesCode@1000 : Code[20];NoSeriesCode@1001 : Code[20]);
    BEGIN
      if NoSeriesCode <> '' then begin
        NoSeries.GET(NoSeriesCode);
        if NoSeries."Default Nos." then
          NewNoSeriesCode := NoSeries.Code;
      end;
    END;

    [External]
    PROCEDURE SelectSeries@2(DefaultNoSeriesCode@1000 : Code[20];OldNoSeriesCode@1001 : Code[20];VAR NewNoSeriesCode@1002 : Code[20]) : Boolean;
    BEGIN
      NoSeriesCode := DefaultNoSeriesCode;
      FilterSeries;
      if NewNoSeriesCode = '' then begin
        if OldNoSeriesCode <> '' then
          NoSeries.Code := OldNoSeriesCode;
      end else
        NoSeries.Code := NewNoSeriesCode;
      if PAGE.RUNMODAL(0,NoSeries) = ACTION::LookupOK then begin
        NewNoSeriesCode := NoSeries.Code;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE LookupSeries@16(DefaultNoSeriesCode@1000 : Code[20];VAR NewNoSeriesCode@1001 : Code[20]) : Boolean;
    BEGIN
      exit(SelectSeries(DefaultNoSeriesCode,NewNoSeriesCode,NewNoSeriesCode));
    END;

    [External]
    PROCEDURE TestSeries@8(DefaultNoSeriesCode@1000 : Code[20];NewNoSeriesCode@1001 : Code[20]);
    BEGIN
      NoSeriesCode := DefaultNoSeriesCode;
      FilterSeries;
      NoSeries.Code := NewNoSeriesCode;
      NoSeries.FIND;
    END;

    [External]
    PROCEDURE SetSeries@6(VAR NewNo@1000 : Code[20]);
    VAR
      NoSeriesCode2@1001 : Code[20];
    BEGIN
      NoSeriesCode2 := NoSeries.Code;
      FilterSeries;
      NoSeries.Code := NoSeriesCode2;
      NoSeries.FIND;
      NewNo := GetNextNo(NoSeries.Code,0D,true);
    END;

    LOCAL PROCEDURE FilterSeries@1();
    VAR
      NoSeriesRelationship@1000 : Record "No. Series Relationship";
    BEGIN
      NoSeries.RESET;
      NoSeriesRelationship.SETRANGE(Code,NoSeriesCode);
      if NoSeriesRelationship.FINDSET then
        repeat
          NoSeries.Code := NoSeriesRelationship."Series Code";
          NoSeries.MARK := true;
        until NoSeriesRelationship.NEXT = 0;
      NoSeries.GET(NoSeriesCode);
      NoSeries.MARK := true;
      NoSeries.MARKEDONLY := true;
    END;

    [External]
    PROCEDURE GetNextNo@12(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean) : Code[20];
    BEGIN
      exit(GetNextNo3(NoSeriesCode,SeriesDate,ModifySeries,false));
    END;

    [External]
    PROCEDURE GetNextNo3@22(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date;ModifySeries@1002 : Boolean;NoErrorsOrWarnings@1004 : Boolean) : Code[20];
    VAR
      NoSeriesLine@1003 : Record "No. Series Line";
    BEGIN
      if SeriesDate = 0D then
        SeriesDate := WORKDATE;

      if ModifySeries or (LastNoSeriesLine."Series Code" = '') then begin
        if ModifySeries then
          NoSeriesLine.LOCKTABLE;
        NoSeries.GET(NoSeriesCode);
        SetNoSeriesLineFilter(NoSeriesLine,NoSeriesCode,SeriesDate);
        if not NoSeriesLine.FINDFIRST then begin
          if NoErrorsOrWarnings then
            exit('');
          NoSeriesLine.SETRANGE("Starting Date");
          if not NoSeriesLine.ISEMPTY then
            ERROR(
              Text004,
              NoSeriesCode,SeriesDate);
          ERROR(
            Text005,
            NoSeriesCode);
        end;
      end else
        NoSeriesLine := LastNoSeriesLine;

      if NoSeries."Date Order" and (SeriesDate < NoSeriesLine."Last Date Used") then begin
        if NoErrorsOrWarnings then
          exit('');
        ERROR(
          Text006,
          NoSeries.Code,NoSeriesLine."Last Date Used");
      end;
      NoSeriesLine."Last Date Used" := SeriesDate;
      if NoSeriesLine."Last No. Used" = '' then begin
        if NoErrorsOrWarnings and (NoSeriesLine."Starting No." = '') then
          exit('');
        NoSeriesLine.TESTFIELD("Starting No.");
        NoSeriesLine."Last No. Used" := NoSeriesLine."Starting No.";
      end else
        if NoSeriesLine."Increment-by No." <= 1 then
          NoSeriesLine."Last No. Used" := INCSTR(NoSeriesLine."Last No. Used")
        else
          IncrementNoText(NoSeriesLine."Last No. Used",NoSeriesLine."Increment-by No.");
      if (NoSeriesLine."Ending No." <> '') and
         (NoSeriesLine."Last No. Used" > NoSeriesLine."Ending No.")
      then begin
        if NoErrorsOrWarnings then
          exit('');
        ERROR(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      end;
      if (NoSeriesLine."Ending No." <> '') and
         (NoSeriesLine."Warning No." <> '') and
         (NoSeriesLine."Last No. Used" >= NoSeriesLine."Warning No.") and
         (NoSeriesCode <> WarningNoSeriesCode) and
         (TryNoSeriesCode = '')
      then begin
        if NoErrorsOrWarnings then
          exit('');
        WarningNoSeriesCode := NoSeriesCode;
        MESSAGE(
          Text007,
          NoSeriesLine."Ending No.",NoSeriesCode);
      end;
      NoSeriesLine.VALIDATE(Open);

      if ModifySeries then
        NoSeriesLine.MODIFY
      else
        LastNoSeriesLine := NoSeriesLine;
      exit(NoSeriesLine."Last No. Used");
    END;

    [External]
    PROCEDURE TryGetNextNo@10(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date) : Code[20];
    VAR
      NoSeriesMgt@1002 : Codeunit NoSeriesManagement;
    BEGIN
      NoSeriesMgt.GetNextNo1(NoSeriesCode,SeriesDate);
      if NoSeriesMgt.RUN then
        exit(NoSeriesMgt.GetNextNo2);
    END;

    [External]
    PROCEDURE GetNextNo1@19(NoSeriesCode@1000 : Code[20];SeriesDate@1001 : Date);
    BEGIN
      TryNoSeriesCode := NoSeriesCode;
      TrySeriesDate := SeriesDate;
    END;

    [External]
    PROCEDURE GetNextNo2@17() : Code[20];
    BEGIN
      exit(TryNo);
    END;

    [External]
    PROCEDURE SaveNoSeries@18();
    BEGIN
      if LastNoSeriesLine."Series Code" <> '' then
        LastNoSeriesLine.MODIFY;
    END;

    [External]
    PROCEDURE SetNoSeriesLineFilter@11(VAR NoSeriesLine@1000 : Record "No. Series Line";NoSeriesCode@1001 : Code[20];StartDate@1002 : Date);
    BEGIN
      if StartDate = 0D then
        StartDate := WORKDATE;
      NoSeriesLine.RESET;
      NoSeriesLine.SETCURRENTKEY("Series Code","Starting Date");
      NoSeriesLine.SETRANGE("Series Code",NoSeriesCode);
      NoSeriesLine.SETRANGE("Starting Date",0D,StartDate);
      if NoSeriesLine.FINDLAST then begin
        NoSeriesLine.SETRANGE("Starting Date",NoSeriesLine."Starting Date");
        NoSeriesLine.SETRANGE(Open,true);
      end;
    END;

    [External]
    PROCEDURE IncrementNoText@20(VAR No@1000 : Code[20];IncrementByNo@1001 : Decimal);
    VAR
      BigIntNo@1006 : BigInteger;
      BigIntIncByNo@1002 : BigInteger;
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      NewNo@1005 : Text[30];
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      EVALUATE(BigIntNo,COPYSTR(No,StartPos,EndPos - StartPos + 1));
      BigIntIncByNo := IncrementByNo;
      NewNo := FORMAT(BigIntNo + BigIntIncByNo,0,1);
      ReplaceNoText(No,NewNo,0,StartPos,EndPos);
    END;

    [External]
    PROCEDURE UpdateNoSeriesLine@15(VAR NoSeriesLine@1000 : Record "No. Series Line";NewNo@1001 : Code[20];NewFieldName@1002 : Text[100]);
    VAR
      NoSeriesLine2@1003 : Record "No. Series Line";
      TextManagement@1005 : Codeunit TextManagement;
      Length@1004 : Integer;
    BEGIN
      if NewNo <> '' then begin
        TextManagement.EvaluateIncStr(NewNo,NewFieldName);
        NoSeriesLine2 := NoSeriesLine;
        if NewNo = GetNoText(NewNo) then
          Length := 0
        else begin
          Length := STRLEN(GetNoText(NewNo));
          UpdateLength(NoSeriesLine."Starting No.",Length);
          UpdateLength(NoSeriesLine."Ending No.",Length);
          UpdateLength(NoSeriesLine."Last No. Used",Length);
          UpdateLength(NoSeriesLine."Warning No.",Length);
        end;
        UpdateNo(NoSeriesLine."Starting No.",NewNo,Length);
        UpdateNo(NoSeriesLine."Ending No.",NewNo,Length);
        UpdateNo(NoSeriesLine."Last No. Used",NewNo,Length);
        UpdateNo(NoSeriesLine."Warning No.",NewNo,Length);
        if (NewFieldName <> NoSeriesLine.FIELDCAPTION("Last No. Used")) and
           (NoSeriesLine."Last No. Used" <> NoSeriesLine2."Last No. Used")
        then
          ERROR(
            Text009,
            NewFieldName,NoSeriesLine.FIELDCAPTION("Last No. Used"));
      end;
    END;

    LOCAL PROCEDURE UpdateLength@13(No@1000 : Code[20];VAR MaxLength@1001 : Integer);
    VAR
      Length@1002 : Integer;
    BEGIN
      if No <> '' then begin
        Length := STRLEN(DELCHR(GetNoText(No),'<','0'));
        if Length > MaxLength then
          MaxLength := Length;
      end;
    END;

    LOCAL PROCEDURE UpdateNo@14(VAR No@1000 : Code[20];NewNo@1001 : Code[20];Length@1002 : Integer);
    VAR
      StartPos@1003 : Integer;
      EndPos@1004 : Integer;
      TempNo@1005 : Code[20];
    BEGIN
      if No <> '' then begin
        if Length <> 0 then begin
          No := DELCHR(GetNoText(No),'<','0');
          TempNo := No;
          No := NewNo;
          NewNo := TempNo;
          GetIntegerPos(No,StartPos,EndPos);
          ReplaceNoText(No,NewNo,Length,StartPos,EndPos);
        end;
      end;
    END;

    LOCAL PROCEDURE ReplaceNoText@7(VAR No@1000 : Code[20];NewNo@1001 : Code[20];FixedLength@1002 : Integer;StartPos@1003 : Integer;EndPos@1004 : Integer);
    VAR
      StartNo@1005 : Code[20];
      EndNo@1006 : Code[20];
      ZeroNo@1007 : Code[20];
      NewLength@1008 : Integer;
      OldLength@1009 : Integer;
    BEGIN
      if StartPos > 1 then
        StartNo := COPYSTR(No,1,StartPos - 1);
      if EndPos < STRLEN(No) then
        EndNo := COPYSTR(No,EndPos + 1);
      NewLength := STRLEN(NewNo);
      OldLength := EndPos - StartPos + 1;
      if FixedLength > OldLength then
        OldLength := FixedLength;
      if OldLength > NewLength then
        ZeroNo := PADSTR('',OldLength - NewLength,'0');
      if STRLEN(StartNo) + STRLEN(ZeroNo) + STRLEN(NewNo) + STRLEN(EndNo) > 20 then
        ERROR(
          Text010,
          No);
      No := StartNo + ZeroNo + NewNo + EndNo;
    END;

    LOCAL PROCEDURE GetNoText@9(No@1000 : Code[20]) : Code[20];
    VAR
      StartPos@1001 : Integer;
      EndPos@1002 : Integer;
    BEGIN
      GetIntegerPos(No,StartPos,EndPos);
      if StartPos <> 0 then
        exit(COPYSTR(No,StartPos,EndPos - StartPos + 1));
    END;

    LOCAL PROCEDURE GetIntegerPos@4(No@1000 : Code[20];VAR StartPos@1001 : Integer;VAR EndPos@1002 : Integer);
    VAR
      IsDigit@1003 : Boolean;
      i@1004 : Integer;
    BEGIN
      StartPos := 0;
      EndPos := 0;
      if No <> '' then begin
        i := STRLEN(No);
        repeat
          IsDigit := No[i] in ['0'..'9'];
          if IsDigit then begin
            if EndPos = 0 then
              EndPos := i;
            StartPos := i;
          end;
          i := i - 1;
        until (i = 0) or (StartPos <> 0) and not IsDigit;
      end;
    END;

    PROCEDURE GetNoSeriesWithCheck@24(NewNoSeriesCode@1000 : Code[20];SelectNoSeriesAllowed@1001 : Boolean;CurrentNoSeriesCode@1002 : Code[20]) : Code[20];
    BEGIN
      if not SelectNoSeriesAllowed then
        exit(NewNoSeriesCode);

      NoSeries.GET(NewNoSeriesCode);
      if NoSeries."Default Nos." then
        exit(NewNoSeriesCode);

      if SeriesHasRelations(NewNoSeriesCode) then
        if SelectSeries(NewNoSeriesCode,'',CurrentNoSeriesCode) then
          exit(CurrentNoSeriesCode);
      exit(NewNoSeriesCode);
    END;

    PROCEDURE SeriesHasRelations@23(DefaultNoSeriesCode@1000 : Code[20]) : Boolean;
    VAR
      NoSeriesRelationship@1001 : Record "No. Series Relationship";
    BEGIN
      NoSeriesRelationship.RESET;
      NoSeriesRelationship.SETRANGE(Code,DefaultNoSeriesCode);
      exit(not NoSeriesRelationship.ISEMPTY);
    END;

    BEGIN
    END.
  }
}

