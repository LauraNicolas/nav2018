OBJECT Codeunit 7313 Create Put-away
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Posted Whse. Receipt Line";
    OnRun=BEGIN
            PostedWhseRcptLine.COPY(Rec);
            Code;
            COPY(PostedWhseRcptLine)
          END;

  }
  CODE
  {
    VAR
      CrossDockBinContent@1005 : Record "Bin Content";
      PostedWhseRcptLine@1007 : Record "Posted Whse. Receipt Line";
      xPostedWhseRcptLine@1036 : TEMPORARY Record "Posted Whse. Receipt Line";
      WhseActivHeader@1009 : Record "Warehouse Activity Header";
      WhseActivLine@1024 : Record "Warehouse Activity Line";
      TempWhseActivHeader@1022 : TEMPORARY Record "Warehouse Activity Header";
      TempWhseActivLine@1023 : TEMPORARY Record "Warehouse Activity Line";
      TempWhseItemTrkgLine@1018 : TEMPORARY Record "Whse. Item Tracking Line";
      PutAwayTemplHeader@1019 : Record "Put-away Template Header";
      PutAwayTemplLine@1003 : Record "Put-away Template Line";
      Location@1013 : Record Location;
      BinContent@1002 : Record "Bin Content";
      Bin@1001 : Record Bin;
      Item@1012 : Record Item;
      SKU@1014 : Record "Stockkeeping Unit";
      PutAwayItemUOM@1015 : Record "Item Unit of Measure";
      WMSMgt@1037 : Codeunit "WMS Management";
      BinTypeFilter@1004 : Text[250];
      MessageText@1035 : Text[80];
      WarehouseClassCode@1016 : Code[10];
      AssignedID@1021 : Code[50];
      EverythingHandled@1008 : Boolean;
      DoNotFillQtytoHandle@1026 : Boolean;
      BreakbulkFilter@1027 : Boolean;
      QtyToPickBase@1039 : Decimal;
      QtyToPutAwayBase@1040 : Decimal;
      RemQtyToPutAwayBase@1041 : Decimal;
      LineNo@1010 : Integer;
      OldLineNo@1000 : Integer;
      BreakbulkNo@1025 : Integer;
      EntryNo@1028 : Integer;
      SortActivity@1020 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To","Bin Ranking","Action Type"';
      Text001@1029 : TextConst 'ENU=There are no %1 created.';
      Text002@1030 : TextConst 'ENU=There is not enough bin capacity for items.';
      NewCrossDockBinContent@1034 : Boolean;
      CrossDock@1032 : Boolean;
      CrossDockInfo@1031 : Option;
      Text003@1038 : TextConst 'ENU=There is no default bin for one or more item.';

    LOCAL PROCEDURE Code@1();
    VAR
      BinType@1005 : Record "Bin Type";
      BinContentQtyBase@1004 : Decimal;
      TakeLineNo@1000 : Integer;
      BreakPackage@1001 : Boolean;
      Breakbulk@1003 : Boolean;
    BEGIN
      with PostedWhseRcptLine do begin
        QtyToPickBase := 0;
        QtyToPutAwayBase := 0;
        CrossDockInfo := 0;
        MessageText := '';
        EverythingHandled := false;
        TempWhseActivLine.DELETEALL;

        GetLocation("Location Code");
        if not Location."Bin Mandatory" then begin
          MakeCrossDockPutAway;
          CalcQtyToPutAway(true,false);
          exit;
        end;

        if Location."Directed Put-away and Pick" then begin
          GetItemAndSKU("Item No.","Location Code","Variant Code");
          GetPutAwayUOM;
          GetPutAwayTemplate;
          if PutAwayTemplHeader.Code = '' then begin
            MessageText := STRSUBSTNO(Text001,PutAwayTemplHeader.TABLECAPTION);
            exit;
          end;

          PutAwayTemplLine.RESET;
          PutAwayTemplLine.SETRANGE("Put-away Template Code",PutAwayTemplHeader.Code);
          if not PutAwayTemplLine.FIND('-') then begin
            MessageText := STRSUBSTNO(Text001,PutAwayTemplLine.TABLECAPTION);
            exit;
          end;
          RemQtyToPutAwayBase := "Qty. (Base)";
          if "Qty. per Unit of Measure" > PutAwayItemUOM."Qty. per Unit of Measure" then
            CreateBreakPackageLines(PostedWhseRcptLine);

          if RemQtyToPutAwayBase = 0 then
            exit;
        end else
          RemQtyToPutAwayBase := "Qty. (Base)";

        MakeCrossDockPutAway;

        LineNo := LineNo + 10000;
        if Location."Directed Put-away and Pick" then begin
          BinType.CreateBinTypeFilter(BinTypeFilter,2);
          repeat
            QtyToPutAwayBase := RemQtyToPutAwayBase;
            if not (PutAwayTemplLine."Find Empty Bin" or PutAwayTemplLine."Find Floating Bin") or
               PutAwayTemplLine."Find Fixed Bin" or
               PutAwayTemplLine."Find Same Item" or
               PutAwayTemplLine."Find Unit of Measure Match" or
               PutAwayTemplLine."Find Bin w. Less than Min. Qty"
            then begin
              // Calc Availability per Bin Content
              if FindBinContent("Location Code","Item No.","Variant Code",WarehouseClassCode) then
                repeat
                  if BinContent."Bin Code" <> "Bin Code" then begin
                    QtyToPutAwayBase := RemQtyToPutAwayBase;

                    BinContent.CALCFIELDS("Quantity (Base)","Put-away Quantity (Base)","Positive Adjmt. Qty. (Base)");
                    BinContentQtyBase :=
                      BinContent."Quantity (Base)" + BinContent."Put-away Quantity (Base)" + BinContent."Positive Adjmt. Qty. (Base)";
                    if (not PutAwayTemplLine."Find Bin w. Less than Min. Qty" or
                        (BinContentQtyBase < BinContent."Min. Qty." * BinContent."Qty. per Unit of Measure")) and
                       (not PutAwayTemplLine."Find Empty Bin" or (BinContentQtyBase <= 0))
                    then begin
                      if (BinContent."Max. Qty." <> 0) and
                         (BinContent."Max. Qty." * BinContent."Qty. per Unit of Measure" >= BinContentQtyBase)
                      then begin
                        QtyToPutAwayBase := BinContent."Max. Qty." * BinContent."Qty. per Unit of Measure" - BinContentQtyBase;
                        if QtyToPutAwayBase > RemQtyToPutAwayBase then
                          QtyToPutAwayBase := RemQtyToPutAwayBase;
                      end;
                      if (BinContent."Max. Qty." <> 0) and
                         (BinContent."Max. Qty." * BinContent."Qty. per Unit of Measure" >= BinContentQtyBase)
                      then begin
                        QtyToPutAwayBase :=
                          BinContent."Max. Qty." * BinContent."Qty. per Unit of Measure" - BinContentQtyBase;
                        if QtyToPutAwayBase > RemQtyToPutAwayBase then
                          QtyToPutAwayBase := RemQtyToPutAwayBase;
                      end;

                      GetBin("Location Code",BinContent."Bin Code");
                      CalcQtyToPutAway(false,false);
                    end;
                  end;
                until (BinContent.NEXT(-1) = 0) or EverythingHandled
            end else begin
              // Calc Availability per Bin
              if FindBin("Location Code",WarehouseClassCode) then
                repeat
                  if Bin.Code <> "Bin Code" then begin
                    QtyToPutAwayBase := RemQtyToPutAwayBase;
                    if BinContent.GET(
                         "Location Code",Bin.Code,"Item No.","Variant Code",PutAwayItemUOM.Code)
                    then begin
                      BinContent.CALCFIELDS("Quantity (Base)","Put-away Quantity (Base)","Positive Adjmt. Qty. (Base)");
                      BinContentQtyBase :=
                        BinContent."Quantity (Base)" +
                        BinContent."Put-away Quantity (Base)" +
                        BinContent."Positive Adjmt. Qty. (Base)";

                      if BinContent."Max. Qty." <> 0 then begin
                        QtyToPutAwayBase := BinContent."Max. Qty." * BinContent."Qty. per Unit of Measure" - BinContentQtyBase;
                        if QtyToPutAwayBase > RemQtyToPutAwayBase then
                          QtyToPutAwayBase := RemQtyToPutAwayBase;
                      end;
                      CalcQtyToPutAway(false,false);
                      BinContentQtyBase := BinContent.CalcQtyBase;
                      if BinContent."Max. Qty." <> 0 then begin
                        QtyToPutAwayBase :=
                          BinContent."Max. Qty." * BinContent."Qty. per Unit of Measure" - BinContentQtyBase;
                        if QtyToPutAwayBase > RemQtyToPutAwayBase then
                          QtyToPutAwayBase := RemQtyToPutAwayBase;
                      end;
                    end else
                      CalcQtyToPutAway(false,true);
                  end;
                until (Bin.NEXT(-1) = 0) or EverythingHandled
            end
          until (PutAwayTemplLine.NEXT = 0) or EverythingHandled;
        end else begin
          CLEAR(Bin);
          if WMSMgt.GetDefaultBin("Item No.","Variant Code","Location Code",Bin.Code) then
            Bin.GET(Location.Code,Bin.Code);
          QtyToPutAwayBase := RemQtyToPutAwayBase;
          CalcQtyToPutAway(false,false);
        end;

        if not EverythingHandled and Location."Always Create Put-away Line" then begin
          QtyToPutAwayBase := RemQtyToPutAwayBase;
          CalcQtyToPutAway(true,false);
        end;

        if QtyToPickBase > 0 then begin
          if InsertBreakPackageLines then begin
            TakeLineNo := OldLineNo + 30000;
            Breakbulk := true;
          end else begin
            TakeLineNo := OldLineNo + 10000;
            if ("Unit of Measure Code" <> PutAwayItemUOM.Code) and
               Location."Directed Put-away and Pick"
            then
              BreakPackage := true;
          end;
          CreateNewWhseActivity(
            PostedWhseRcptLine,WhseActivLine,1,TakeLineNo,
            0,QtyToPickBase,false,BreakPackage,false,Breakbulk);
          OldLineNo := LineNo
        end else
          if MessageText = '' then
            if Location."Directed Put-away and Pick" then
              MessageText := Text002
            else
              MessageText := Text003;
      end
    END;

    LOCAL PROCEDURE CreateBreakPackageLines@12(PostedWhseReceiptLine@1000 : Record "Posted Whse. Receipt Line");
    BEGIN
      with PostedWhseRcptLine do begin
        LineNo := LineNo + 10000;
        BreakbulkNo := BreakbulkNo + 1;
        CreateNewWhseActivity(
          PostedWhseReceiptLine,TempWhseActivLine,1,LineNo,
          BreakbulkNo,"Qty. (Base)",false,true,false,false);
        LineNo := LineNo + 10000;
        CreateNewWhseActivity(
          PostedWhseReceiptLine,TempWhseActivLine,2,LineNo,
          BreakbulkNo,RemQtyToPutAwayBase,false,false,false,true);
      end;
    END;

    LOCAL PROCEDURE InsertBreakPackageLines@24() : Boolean;
    VAR
      WhseActivLine@1000 : Record "Warehouse Activity Line";
    BEGIN
      if TempWhseActivLine.FIND('-') then begin
        repeat
          WhseActivLine.INIT;
          WhseActivLine := TempWhseActivLine;
          WhseActivLine."Activity Type" := WhseActivHeader.Type;
          WhseActivLine."No." := WhseActivHeader."No.";
          WhseActivLine."Bin Code" := PostedWhseRcptLine."Bin Code";
          WhseActivLine."Zone Code" := PostedWhseRcptLine."Zone Code";
          WhseActivLine.INSERT;
        until TempWhseActivLine.NEXT = 0;
        exit(true);
      end
    END;

    LOCAL PROCEDURE CreateNewWhseActivity@5(PostedWhseRcptLine@1001 : Record "Posted Whse. Receipt Line";VAR WhseActivLine@1000 : Record "Warehouse Activity Line";ActionType@1002 : ',Take,Place';LineNo@1003 : Integer;BreakbulkNo@1008 : Integer;QtyToHandleBase@1010 : Decimal;InsertHeader@1004 : Boolean;BreakPackage@1006 : Boolean;EmptyZoneBin@1007 : Boolean;Breakbulk@1009 : Boolean);
    BEGIN
      with PostedWhseRcptLine do begin
        if (WhseActivHeader."No." = '') and InsertHeader then
          InsertWhseActivHeader("Location Code");

        WhseActivLine.INIT;
        WhseActivLine."Activity Type" := WhseActivHeader.Type;
        WhseActivLine."No." := WhseActivHeader."No.";
        WhseActivLine."Line No." := LineNo;
        WhseActivLine."Action Type" := ActionType;
        WhseActivLine."Source Type" := "Source Type";
        WhseActivLine."Source Subtype" := "Source Subtype";
        WhseActivLine."Source No." := "Source No.";
        WhseActivLine."Source Line No." := "Source Line No.";
        WhseActivLine."Source Document" := "Source Document";
        if WhseActivLine."Source Type" = 0 then
          WhseActivLine."Whse. Document Type" := WhseActivLine."Whse. Document Type"::"Internal Put-away"
        else
          WhseActivLine."Whse. Document Type" := WhseActivLine."Whse. Document Type"::Receipt;
        WhseActivLine."Whse. Document No." := "No.";
        WhseActivLine."Whse. Document Line No." := "Line No.";
        WhseActivLine."Location Code" := Location.Code;
        WhseActivLine."Shelf No." := "Shelf No.";
        WhseActivLine."Due Date" := "Due Date";
        WhseActivLine."Starting Date" := "Starting Date";
        WhseActivLine."Breakbulk No." := BreakbulkNo;
        WhseActivLine."Original Breakbulk" := Breakbulk;
        if BreakbulkFilter then
          WhseActivLine.Breakbulk := Breakbulk;
        case ActionType of
          ActionType::Take:
            begin
              WhseActivLine."Bin Code" := "Bin Code";
              WhseActivLine."Zone Code" := "Zone Code";
            end;
          ActionType::Place:
            begin
              if not EmptyZoneBin then
                AssignPlaceBinZone(WhseActivLine);
            end;
          else
            begin
            WhseActivLine."Bin Code" := '';
            WhseActivLine."Zone Code" := '';
          end
        end;
        if WhseActivLine."Bin Code" <> '' then begin
          WhseActivLine."Special Equipment Code" :=
            GetSpecEquipmentCode(WhseActivLine."Bin Code");
          GetBin(WhseActivLine."Location Code",WhseActivLine."Bin Code");
          WhseActivLine.Dedicated := Bin.Dedicated;
          WhseActivLine."Bin Ranking" := Bin."Bin Ranking";
          WhseActivLine."Bin Type Code" := Bin."Bin Type Code";
        end;
        WhseActivLine."Item No." := "Item No.";
        WhseActivLine."Variant Code" := "Variant Code";
        WhseActivLine.Description := Description;
        WhseActivLine."Description 2" := "Description 2";
        WhseActivLine."Cross-Dock Information" := CrossDockInfo;
        if BreakPackage or (ActionType = 0) or
           not Location."Directed Put-away and Pick"
        then begin
          WhseActivLine."Unit of Measure Code" := "Unit of Measure Code";
          WhseActivLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        end else begin
          WhseActivLine."Unit of Measure Code" := PutAwayItemUOM.Code;
          WhseActivLine."Qty. per Unit of Measure" := PutAwayItemUOM."Qty. per Unit of Measure";
        end;
        WhseActivLine.VALIDATE(Quantity,ROUND(QtyToHandleBase / WhseActivLine."Qty. per Unit of Measure",0.00001));
        if QtyToHandleBase <> 0 then begin
          WhseActivLine."Qty. (Base)" := QtyToHandleBase;
          WhseActivLine."Qty. to Handle (Base)" := QtyToHandleBase;
          WhseActivLine."Qty. Outstanding (Base)" := QtyToHandleBase;
        end;
        if DoNotFillQtytoHandle then begin
          WhseActivLine."Qty. to Handle" := 0;
          WhseActivLine."Qty. to Handle (Base)" := 0;
          WhseActivLine.Cubage := 0;
          WhseActivLine.Weight := 0;
        end;
        if "Serial No." <> '' then
          WhseActivLine.TESTFIELD("Qty. per Unit of Measure",1);
        WhseActivLine."Serial No." := "Serial No.";
        WhseActivLine."Lot No." := "Lot No.";
        WhseActivLine."Warranty Date" := "Warranty Date";
        WhseActivLine."Expiration Date" := "Expiration Date";
        WhseActivLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE AssignPlaceBinZone@22(VAR WhseActivLine@1000 : Record "Warehouse Activity Line");
    VAR
      Bin2@1002 : Record Bin;
    BEGIN
      with WhseActivLine do begin
        "Bin Code" := Bin.Code;
        "Zone Code" := Bin."Zone Code";
        if Location.IsBWReceive and
           (CrossDockInfo <> "Cross-Dock Information"::"Cross-Dock Items") and
           ((Bin.Code = PostedWhseRcptLine."Bin Code") or Location.IsBinBWReceiveOrShip(Bin.Code))
        then begin
          Bin2.SETRANGE("Location Code",Location.Code);
          Bin2.SETFILTER(Code,'<>%1&<>%2&<>%3',Location."Receipt Bin Code",Location."Shipment Bin Code",
            PostedWhseRcptLine."Bin Code");
          if Bin2.FINDFIRST then begin
            "Bin Code" := Bin2.Code;
            "Zone Code" := Bin2."Zone Code";
          end else begin
            "Bin Code" := '';
            "Zone Code" := '';
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE InsertWhseActivHeader@15(LocationCode@1000 : Code[10]);
    BEGIN
      WhseActivHeader.LOCKTABLE;
      WhseActivHeader.INIT;
      WhseActivHeader.Type := WhseActivHeader.Type::"Put-away";
      WhseActivHeader."Location Code" := LocationCode;
      WhseActivHeader.VALIDATE("Assigned User ID",AssignedID);
      WhseActivHeader."Sorting Method" := SortActivity;
      WhseActivHeader."Breakbulk Filter" := BreakbulkFilter;
      WhseActivHeader.INSERT(true);
      COMMIT;
      InsertTempWhseActivHeader(WhseActivHeader);
      WhseActivLine.LOCKTABLE;
    END;

    LOCAL PROCEDURE FindBinContent@16(LocationCode@1003 : Code[10];ItemNo@1000 : Code[20];VariantCode@1002 : Code[10];WarehouseClassCode@1001 : Code[10]) : Boolean;
    BEGIN
      with BinContent do begin
        RESET;
        SETCURRENTKEY("Location Code","Warehouse Class Code",Fixed,"Bin Ranking");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Warehouse Class Code",WarehouseClassCode);
        if PutAwayTemplLine."Find Fixed Bin" then
          SETRANGE(Fixed,true)
        else
          SETRANGE(Fixed,false);
        SETFILTER("Block Movement",'%1|%2',"Block Movement"::" ","Block Movement"::Outbound);
        SETFILTER("Bin Type Code",BinTypeFilter);
        SETRANGE("Cross-Dock Bin",false);
        if PutAwayTemplLine."Find Same Item" then begin
          SETCURRENTKEY(
            "Location Code","Item No.","Variant Code","Warehouse Class Code",Fixed,"Bin Ranking");
          SETRANGE("Item No.",ItemNo);
          SETRANGE("Variant Code",VariantCode);
        end;
        if PutAwayTemplLine."Find Unit of Measure Match" then
          SETRANGE("Unit of Measure Code",PutAwayItemUOM.Code);
        if FIND('+') then
          exit(true);

        exit(false)
      end
    END;

    LOCAL PROCEDURE FindBin@17(LocationCode@1001 : Code[10];WarehouseClassCode@1000 : Code[10]) : Boolean;
    VAR
      WhseActivLine@1002 : Record "Warehouse Activity Line";
    BEGIN
      with Bin do begin
        RESET;
        SETCURRENTKEY("Location Code","Warehouse Class Code","Bin Ranking");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Warehouse Class Code",WarehouseClassCode);
        SETRANGE("Adjustment Bin",false);
        SETFILTER("Block Movement",'%1|%2',"Block Movement"::" ","Block Movement"::Outbound);
        SETFILTER("Bin Type Code",BinTypeFilter);
        SETRANGE("Cross-Dock Bin",false);
        if PutAwayTemplLine."Find Empty Bin" then
          SETRANGE(Empty,true);
        if FIND('+') then begin
          if not (PutAwayTemplLine."Find Empty Bin" or PutAwayTemplLine."Find Floating Bin") then
            exit(true);
          repeat
            if PutAwayTemplLine."Find Empty Bin" then begin
              WhseActivLine.SETCURRENTKEY("Bin Code","Location Code","Action Type");
              WhseActivLine.SETRANGE("Bin Code",Code);
              WhseActivLine.SETRANGE("Location Code",LocationCode);
              WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Place);
              if WhseActivLine.ISEMPTY then
                if not PutAwayTemplLine."Find Floating Bin" or IsFloatingBin then
                  exit(true);
            end else
              if IsFloatingBin then
                exit(true);
          until NEXT(-1) = 0;
        end;
      end;
      exit(false)
    END;

    LOCAL PROCEDURE CalcQtyToPutAway@19(EmptyZoneBin@1001 : Boolean;NewBinContent@1002 : Boolean);
    VAR
      ActionType@1000 : ',Take,Place';
    BEGIN
      if Location."Bin Mandatory" then begin
        ActionType := ActionType::Place;
        if not EmptyZoneBin and Location."Directed Put-away and Pick" then
          CalcAvailCubageAndWeight;
        if QtyToPutAwayBase >= RemQtyToPutAwayBase then begin
          QtyToPutAwayBase := RemQtyToPutAwayBase;
          EverythingHandled := true;
        end else
          RemQtyToPutAwayBase := RemQtyToPutAwayBase - QtyToPutAwayBase;
      end else
        QtyToPutAwayBase := PostedWhseRcptLine."Qty. (Base)";

      QtyToPickBase := QtyToPickBase + QtyToPutAwayBase;
      if QtyToPutAwayBase > 0 then begin
        LineNo := LineNo + 10000;
        if NewBinContent and Location."Directed Put-away and Pick" then
          CreateBinContent(PostedWhseRcptLine);
        CreateNewWhseActivity(
          PostedWhseRcptLine,WhseActivLine,ActionType,LineNo,
          0,QtyToPutAwayBase,true,false,EmptyZoneBin,false)
      end
    END;

    LOCAL PROCEDURE CalcAvailCubageAndWeight@10();
    VAR
      AvailPerCubageBase@1001 : Decimal;
      AvailPerWeightBase@1000 : Decimal;
    BEGIN
      with Bin do begin
        if ("Maximum Cubage" <> 0) or ("Maximum Weight" <> 0) then begin
          if (PutAwayItemUOM.Cubage <> 0) or (PutAwayItemUOM.Weight <> 0) then
            CalcCubageAndWeight(AvailPerCubageBase,AvailPerWeightBase,false);
          if ("Maximum Cubage" <> 0) and (PutAwayItemUOM.Cubage <> 0) then begin
            AvailPerCubageBase := AvailPerCubageBase div PutAwayItemUOM.Cubage * PutAwayItemUOM."Qty. per Unit of Measure";
            if AvailPerCubageBase < 0 then
              AvailPerCubageBase := 0;
            if AvailPerCubageBase < QtyToPutAwayBase then
              QtyToPutAwayBase := AvailPerCubageBase;
          end;
          if ("Maximum Weight" <> 0) and (PutAwayItemUOM.Weight <> 0) then begin
            AvailPerWeightBase := AvailPerWeightBase div PutAwayItemUOM.Weight * PutAwayItemUOM."Qty. per Unit of Measure";
            if AvailPerWeightBase < 0 then
              AvailPerWeightBase := 0;
            if AvailPerWeightBase < QtyToPutAwayBase then
              QtyToPutAwayBase := AvailPerWeightBase;
          end
        end
      end
    END;

    LOCAL PROCEDURE CreateBinContent@14(PostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line");
    VAR
      NewBinContent@1001 : Record "Bin Content";
    BEGIN
      with PostedWhseRcptLine do begin
        NewBinContent.INIT;
        NewBinContent."Location Code" := Bin."Location Code";
        NewBinContent."Bin Code" := Bin.Code;
        NewBinContent."Item No." := "Item No.";
        NewBinContent."Variant Code" := "Variant Code";
        NewBinContent."Unit of Measure Code" := PutAwayItemUOM.Code;
        NewBinContent.Dedicated := Bin.Dedicated;
        NewBinContent."Zone Code" := Bin."Zone Code";
        NewBinContent."Bin Type Code" := Bin."Bin Type Code";
        NewBinContent."Warehouse Class Code" := Bin."Warehouse Class Code";
        NewBinContent."Block Movement" := Bin."Block Movement";
        NewBinContent."Qty. per Unit of Measure" := PutAwayItemUOM."Qty. per Unit of Measure";
        NewBinContent."Bin Ranking" := Bin."Bin Ranking";
        NewBinContent."Cross-Dock Bin" := Bin."Cross-Dock Bin";
        NewBinContent.INSERT;
      end;
    END;

    LOCAL PROCEDURE GetSpecEquipmentCode@3(BinCode@1000 : Code[20]) : Code[10];
    BEGIN
      case Location."Special Equipment" of
        Location."Special Equipment"::"According to Bin":
          begin
            GetBin(Location.Code,BinCode);
            if Bin."Special Equipment Code" <> '' then
              exit(Bin."Special Equipment Code");

            if SKU."Special Equipment Code" <> '' then
              exit(SKU."Special Equipment Code");

            exit(Item."Special Equipment Code")
          end;
        Location."Special Equipment"::"According to SKU/Item":
          begin
            if SKU."Special Equipment Code" <> '' then
              exit(SKU."Special Equipment Code");

            if Item."Special Equipment Code" <> '' then
              exit(Item."Special Equipment Code");

            GetBin(Location.Code,BinCode);
            exit(Bin."Special Equipment Code")
          end
      end
    END;

    LOCAL PROCEDURE GetLocation@33(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode <> Location.Code then
        Location.GET(LocationCode)
    END;

    LOCAL PROCEDURE GetBin@21(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      if (Bin."Location Code" <> LocationCode) or
         (Bin.Code <> BinCode)
      then
        Bin.GET(LocationCode,BinCode)
    END;

    LOCAL PROCEDURE GetItemAndSKU@48(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1002 : Code[10]);
    BEGIN
      if Item."No." <> ItemNo then begin
        Item.GET(ItemNo);
        GetWarehouseClassCode;
      end;
      if (ItemNo <> SKU."Item No.") or
         (LocationCode <> SKU."Location Code") or
         (VariantCode <> SKU."Variant Code")
      then begin
        if not SKU.GET(Location.Code,Item."No.",PostedWhseRcptLine."Variant Code") then
          CLEAR(SKU)
      end
    END;

    LOCAL PROCEDURE GetWarehouseClassCode@51();
    BEGIN
      WarehouseClassCode := Item."Warehouse Class Code";
    END;

    LOCAL PROCEDURE GetPutAwayUOM@57();
    BEGIN
      if not Location."Directed Put-away and Pick" then begin
        PutAwayItemUOM.Code := PostedWhseRcptLine."Unit of Measure Code";
        PutAwayItemUOM."Qty. per Unit of Measure" := PostedWhseRcptLine."Qty. per Unit of Measure";
        exit;
      end;
      if (PutAwayItemUOM."Item No." <> '') and (PutAwayItemUOM.Code <> '') and
         (SKU."Item No." = PutAwayItemUOM."Item No.") and
         (SKU."Put-away Unit of Measure Code" = PutAwayItemUOM.Code)
      then
        exit;

      if (SKU."Put-away Unit of Measure Code" <> '') and
         ((Item."No." <> PutAwayItemUOM."Item No.") or
          (SKU."Put-away Unit of Measure Code" <> PutAwayItemUOM.Code))
      then begin
        if not PutAwayItemUOM.GET(Item."No.",SKU."Put-away Unit of Measure Code") then
          if not PutAwayItemUOM.GET(Item."No.",Item."Put-away Unit of Measure Code") then
            PutAwayItemUOM.GET(Item."No.",PostedWhseRcptLine."Unit of Measure Code")
      end else
        if (Item."No." <> PutAwayItemUOM."Item No.") or
           (Item."Put-away Unit of Measure Code" <> PutAwayItemUOM.Code)
        then
          if not PutAwayItemUOM.GET(Item."No.",Item."Put-away Unit of Measure Code") then
            PutAwayItemUOM.GET(Item."No.",PostedWhseRcptLine."Unit of Measure Code")
    END;

    LOCAL PROCEDURE GetPutAwayTemplate@2();
    BEGIN
      if SKU."Put-away Template Code" <> '' then begin
        if SKU."Put-away Template Code" <> PutAwayTemplHeader.Code then
          if not PutAwayTemplHeader.GET(SKU."Put-away Template Code") then
            if (Item."Put-away Template Code" <> '') and
               (Item."Put-away Template Code" <> PutAwayTemplHeader.Code)
            then
              if not PutAwayTemplHeader.GET(Item."Put-away Template Code") then
                if (PutAwayTemplHeader.Code <> Location."Put-away Template Code")
                then
                  PutAwayTemplHeader.GET(Location."Put-away Template Code");
      end else
        if (Item."Put-away Template Code" <> '') or
           (Item."Put-away Template Code" <> PutAwayTemplHeader.Code)
        then begin
          if not PutAwayTemplHeader.GET(Item."Put-away Template Code") then
            if (PutAwayTemplHeader.Code <> Location."Put-away Template Code")
            then
              PutAwayTemplHeader.GET(Location."Put-away Template Code")
        end else
          PutAwayTemplHeader.GET(Location."Put-away Template Code")
    END;

    [External]
    PROCEDURE SetValues@4(NewAssignedID@1002 : Code[50];NewSortActivity@1001 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To","Bin Ranking","Action Type"';NewDoNotFillQtytoHandle@1003 : Boolean;BreakbulkFilter2@1004 : Boolean);
    BEGIN
      AssignedID := NewAssignedID;
      SortActivity := NewSortActivity;
      DoNotFillQtytoHandle := NewDoNotFillQtytoHandle;
      BreakbulkFilter := BreakbulkFilter2;
    END;

    [External]
    PROCEDURE GetWhseActivHeaderNo@6(VAR FirstPutAwayNo@1001 : Code[20];VAR LastPutAwayNo@1000 : Code[20]);
    BEGIN
      FirstPutAwayNo := WhseActivHeader."No.";
      LastPutAwayNo := WhseActivHeader."No.";
    END;

    [External]
    PROCEDURE EverythingIsHandled@7() : Boolean;
    BEGIN
      exit(EverythingHandled);
    END;

    LOCAL PROCEDURE InsertTempWhseActivHeader@13(WhseActivHeader@1000 : Record "Warehouse Activity Header");
    BEGIN
      TempWhseActivHeader.INIT;
      TempWhseActivHeader := WhseActivHeader;
      TempWhseActivHeader.INSERT;
    END;

    [External]
    PROCEDURE GetFirstPutAwayDocument@11(VAR WhseActivHeader@1000 : Record "Warehouse Activity Header") : Boolean;
    VAR
      WhseActivLine@1002 : Record "Warehouse Activity Line";
      Found@1001 : Boolean;
    BEGIN
      Found := TempWhseActivHeader.FIND('-');
      if Found then begin
        WhseActivHeader := TempWhseActivHeader;
        WhseActivLine.SETRANGE("Activity Type",WhseActivHeader.Type);
        WhseActivLine.SETRANGE("No.",WhseActivHeader."No.");
        Found := WhseActivLine.FINDFIRST;
      end;
      exit(Found);
    END;

    [External]
    PROCEDURE GetNextPutAwayDocument@9(VAR WhseActivHeader@1000 : Record "Warehouse Activity Header") : Boolean;
    VAR
      WhseActivLine@1002 : Record "Warehouse Activity Line";
      Found@1001 : Boolean;
    BEGIN
      Found := TempWhseActivHeader.NEXT <> 0;
      if Found then begin
        WhseActivHeader := TempWhseActivHeader;
        WhseActivLine.SETRANGE("Activity Type",WhseActivHeader.Type);
        WhseActivLine.SETRANGE("No.",WhseActivHeader."No.");
        Found := WhseActivLine.FINDFIRST;
      end;
      exit(Found);
    END;

    [External]
    PROCEDURE GetMessage@18(VAR ErrText000@1000 : Text[80]);
    BEGIN
      ErrText000 := MessageText;
    END;

    [External]
    PROCEDURE UpdateTempWhseItemTrkgLines@7304(PostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line";SourceType@1001 : Integer);
    BEGIN
      TempWhseItemTrkgLine.INIT;
      EntryNo += 1;
      TempWhseItemTrkgLine."Entry No." := EntryNo;
      TempWhseItemTrkgLine."Source Type" := SourceType;
      TempWhseItemTrkgLine."Source ID" := PostedWhseRcptLine."No.";
      TempWhseItemTrkgLine."Source Ref. No." := PostedWhseRcptLine."Line No.";
      TempWhseItemTrkgLine."Serial No." := PostedWhseRcptLine."Serial No.";
      TempWhseItemTrkgLine."Lot No." := PostedWhseRcptLine."Lot No.";
      TempWhseItemTrkgLine."Quantity (Base)" := QtyToPickBase;
      TempWhseItemTrkgLine.INSERT;
    END;

    [External]
    PROCEDURE GetQtyHandledBase@7305(VAR TempRec@1000 : TEMPORARY Record "Whse. Item Tracking Line") QtyHandledBase@1001 : Decimal;
    BEGIN
      TempRec.RESET;
      TempRec.DELETEALL;
      QtyHandledBase := 0;
      if TempWhseItemTrkgLine.FIND('-') then
        repeat
          QtyHandledBase += TempWhseItemTrkgLine."Quantity (Base)";
          TempRec := TempWhseItemTrkgLine;
          TempRec.INSERT;
        until TempWhseItemTrkgLine.NEXT = 0;
      TempWhseItemTrkgLine.DELETEALL;
      exit(QtyHandledBase);
    END;

    LOCAL PROCEDURE MakeCrossDockPutAway@8();
    VAR
      CrossDockMgt@1000 : Codeunit "Whse. Cross-Dock Management";
      UseCrossDock@1001 : Boolean;
      UOMCode@1002 : Code[10];
    BEGIN
      with PostedWhseRcptLine do begin
        if not CrossDock then
          exit;
        CrossDockMgt.GetUseCrossDock(UseCrossDock,"Location Code","Item No.");
        if not UseCrossDock then
          exit;
        if "Qty. Cross-Docked" <> 0 then begin
          if not Location."Bin Mandatory" then
            PutAwayItemUOM.GET("Item No.","Unit of Measure Code")
          else
            Bin.GET("Location Code","Cross-Dock Bin Code");
          LineNo := LineNo + 10000;
          xPostedWhseRcptLine := PostedWhseRcptLine;
          if Location."Directed Put-away and Pick" then
            Quantity := "Qty. Cross-Docked (Base)" / PutAwayItemUOM."Qty. per Unit of Measure"
          else
            Quantity := "Qty. Cross-Docked";

          QtyToPutAwayBase := "Qty. Cross-Docked (Base)";
          RemQtyToPutAwayBase := "Qty. Cross-Docked (Base)";
          "Zone Code" := "Cross-Dock Zone Code";
          "Bin Code" := "Cross-Dock Bin Code";
          if Location."Directed Put-away and Pick" then
            UOMCode := PutAwayItemUOM.Code
          else
            UOMCode := "Unit of Measure Code";
          if CrossDockBinContent.GET("Location Code","Cross-Dock Bin Code","Item No.","Variant Code",UOMCode) then
            NewCrossDockBinContent := false
          else
            NewCrossDockBinContent := true;
          if not Location."Bin Mandatory" then
            NewCrossDockBinContent := false;
          CrossDockInfo := 1;
          CalcQtyToPutAway(false,NewCrossDockBinContent);
          CrossDockInfo := 2;
          PostedWhseRcptLine := xPostedWhseRcptLine;
          QtyToPutAwayBase := "Qty. (Base)" - "Qty. Cross-Docked (Base)";
          RemQtyToPutAwayBase := "Qty. (Base)" - "Qty. Cross-Docked (Base)";
          if Location."Directed Put-away and Pick" then
            Quantity := ("Qty. (Base)" - "Qty. Cross-Docked (Base)") / PutAwayItemUOM."Qty. per Unit of Measure"
          else
            Quantity := Quantity - "Qty. Cross-Docked";
          "Qty. (Base)" := Quantity * "Qty. per Unit of Measure";
          EverythingHandled := false;
        end;
      end;
    END;

    [External]
    PROCEDURE SetCrossDockValues@20(NewCrossDock@1000 : Boolean);
    BEGIN
      CrossDock := NewCrossDock;
    END;

    LOCAL PROCEDURE IsFloatingBin@23() : Boolean;
    BEGIN
      if Bin.Dedicated = true then
        exit(false);
      with BinContent do begin
        RESET;
        SETRANGE("Location Code",Bin."Location Code");
        SETRANGE("Zone Code",Bin."Zone Code");
        SETRANGE("Bin Code",Bin.Code);
        if FINDSET then
          repeat
            if Fixed or Default then
              exit(false);
          until NEXT = 0;
        exit(true);
      end;
    END;

    BEGIN
    END.
  }
}

