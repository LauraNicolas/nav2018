OBJECT Report 91 Export Consolidation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Export Consolidation;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   TransferPerDay := true;
                 END;

    OnPreReport=VAR
                  FileMgt@1000 : Codeunit "File Management";
                BEGIN
                  DimSelectionBuf.CompareDimText(3,REPORT::"Export Consolidation",'',ColumnDim,Text007);
                  ServerFileName := FileMgt.ServerTempFileName('xml');
                  IsWebClient;
                END;

    OnPostReport=VAR
                   FileManagement@1000 : Codeunit "File Management";
                 BEGIN
                   if IsWebClient then begin
                     if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then
                       ClientFileName := ClientFileName + '.xml'
                     else
                       ClientFileName := ClientFileName + '.txt';

                     FileManagement.DownloadHandler(ServerFileName,'','','',ClientFileName);
                   end else
                     FileManagement.DownloadToFile(ServerFileName,ClientFileName);
                 END;

  }
  DATASET
  {
    { 6710;    ;DataItem;G/L Account         ;
               DataItemTable="G/L Account";
               DataItemTableView=SORTING("No.") WHERE("Account Type"=CONST(Posting));
               OnPreDataItem=BEGIN
                               if ServerFileName = '' then
                                 ERROR(Text000);
                               if ConsolidStartDate = 0D then
                                 ERROR(Text001);
                               if ConsolidEndDate = 0D then
                                 ERROR(Text002);

                               CheckClosingDates(ConsolidStartDate,ConsolidEndDate,TransferPerDay);

                               if NORMALDATE(ConsolidEndDate) - NORMALDATE(ConsolidStartDate) + 1 > 500 then
                                 ERROR(Text003);

                               if Dim.FIND('-') then begin
                                 repeat
                                   TempDim.INIT;
                                   TempDim := Dim;
                                   TempDim.INSERT;
                                 until Dim.NEXT = 0;
                               end;
                               if DimVal.FIND('-') then begin
                                 repeat
                                   TempDimVal.INIT;
                                   TempDimVal := DimVal;
                                   TempDimVal.INSERT;
                                 until DimVal.NEXT = 0;
                               end;

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Export Consolidation");
                               if SelectedDim.FIND('-') then begin
                                 repeat
                                   TempSelectedDim.INIT;
                                   TempSelectedDim := SelectedDim;
                                   TempDim.SETRANGE("Consolidation Code",SelectedDim."Dimension Code");
                                   if TempDim.FINDFIRST then
                                     TempSelectedDim."Dimension Code" := TempDim.Code;
                                   TempSelectedDim.INSERT;
                                 until SelectedDim.NEXT = 0;
                               end;
                               TempDim.RESET;

                               if FileFormat = FileFormat::"Version 3.70 or Earlier (.txt)" then begin
                                 CLEAR(GLEntryFile);
                                 GLEntryFile.TEXTMODE := true;
                                 GLEntryFile.WRITEMODE := true;
                                 GLEntryFile.CREATE(ServerFileName);
                                 GLEntryFile.WRITE(
                                   STRSUBSTNO(
                                     '<01>#1############################ #2####### #3####### #4#',
                                     COMPANYNAME,ConsolidStartDate,ConsolidEndDate,FORMAT(TransferPerDay,0,2)));
                               end;

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,"No.");
                                  Window.UPDATE(2,'');
                                  if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then
                                    Consolidate.InsertGLAccount("G/L Account");
                                END;

               OnPostDataItem=BEGIN
                                if FileFormat = FileFormat::"Version 3.70 or Earlier (.txt)" then
                                  GLEntryFile.CLOSE;
                              END;
                               }

    { 7069;1   ;DataItem;G/L Entry           ;
               DataItemTable="G/L Entry";
               DataItemTableView=SORTING("G/L Account No.","Posting Date");
               OnPreDataItem=BEGIN
                               SETRANGE("Posting Date",ConsolidStartDate,ConsolidEndDate);

                               TempDimBufIn.SETRANGE("Table ID",DATABASE::"G/L Entry");
                               TempDimBufOut.SETRANGE("Table ID",DATABASE::"G/L Entry");

                               if ConsolidStartDate = NORMALDATE(ConsolidStartDate) then
                                 CheckClosingPostings("G/L Account"."No.",ConsolidStartDate,ConsolidEndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(2,"Posting Date");
                                  SETRANGE("Posting Date","Posting Date");

                                  if not TempSelectedDim.FINDFIRST then begin
                                    CALCSUMS(
                                      Amount,"Debit Amount","Credit Amount",
                                      "Add.-Currency Debit Amount","Add.-Currency Credit Amount");
                                    if (Amount <> 0) or ("Debit Amount" <> 0) or ("Credit Amount" <> 0) then begin
                                      TempGLEntry.RESET;
                                      TempGLEntry.DELETEALL;
                                      TempDimBufOut.RESET;
                                      TempDimBufOut.DELETEALL;
                                      TempGLEntry := "G/L Entry";
                                      TempGLEntry.INSERT;
                                      if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then
                                        Consolidate.InsertGLEntry(TempGLEntry)
                                      else begin
                                        UpdateExportedInfo(TempGLEntry);
                                        WriteFile(TempGLEntry,TempDimBufOut);
                                      end;
                                    end;
                                    FIND('+');
                                  end else begin
                                    TempGLEntry.RESET;
                                    TempGLEntry.DELETEALL;
                                    DimBufMgt.DeleteAllDimensions;
                                    repeat
                                      TempDimBufIn.RESET;
                                      TempDimBufIn.DELETEALL;
                                      DimSetEntry.RESET;
                                      DimSetEntry.SETRANGE("Dimension Set ID","Dimension Set ID");
                                      if DimSetEntry.FINDSET then begin
                                        repeat
                                          if TempSelectedDim.GET(USERID,3,REPORT::"Export Consolidation",'',DimSetEntry."Dimension Code") then begin
                                            TempDimBufIn.INIT;
                                            TempDimBufIn."Table ID" := DATABASE::"G/L Entry";
                                            TempDimBufIn."Entry No." := "Entry No.";
                                            if TempDim.GET(DimSetEntry."Dimension Code") then
                                              if TempDim."Consolidation Code" <> '' then
                                                TempDimBufIn."Dimension Code" := TempDim."Consolidation Code"
                                              else
                                                TempDimBufIn."Dimension Code" := TempDim.Code
                                            else
                                              TempDimBufIn."Dimension Code" := DimSetEntry."Dimension Code";
                                            if TempDimVal.GET(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code") then
                                              if TempDimVal."Consolidation Code" <> '' then
                                                TempDimBufIn."Dimension Value Code" := TempDimVal."Consolidation Code"
                                              else
                                                TempDimBufIn."Dimension Value Code" := TempDimVal.Code
                                            else
                                              TempDimBufIn."Dimension Value Code" := DimSetEntry."Dimension Value Code";
                                            TempDimBufIn.INSERT;
                                          end;
                                        until DimSetEntry.NEXT = 0;
                                      end;
                                      UpdateTempGLEntry(TempDimBufIn);
                                    until NEXT = 0;

                                    TempGLEntry.RESET;
                                    if TempGLEntry.FINDSET then begin
                                      repeat
                                        TempDimBufOut.RESET;
                                        TempDimBufOut.DELETEALL;
                                        DimBufMgt.GetDimensions(TempGLEntry."Entry No.",TempDimBufOut);
                                        TempDimBufOut.SETRANGE("Entry No.",TempGLEntry."Entry No.");
                                        if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then begin
                                          if (TempGLEntry."Debit Amount" <> 0) or (TempGLEntry."Credit Amount" <> 0) then
                                            WriteFile(TempGLEntry,TempDimBufOut);
                                        end else begin
                                          UpdateExportedInfo(TempGLEntry);
                                          if TempGLEntry.Amount <> 0 then
                                            WriteFile(TempGLEntry,TempDimBufOut);
                                        end;
                                      until TempGLEntry.NEXT = 0;
                                    end;
                                  end;

                                  SETRANGE("Posting Date",ConsolidStartDate,ConsolidEndDate);
                                END;

               DataItemLink="G/L Account No."=FIELD("No.") }

    { 8685;    ;DataItem;Currency Exchange Rate;
               DataItemTable="Currency Exchange Rate";
               DataItemTableView=SORTING("Currency Code","Starting Date");
               OnPreDataItem=BEGIN
                               if FileFormat = FileFormat::"Version 3.70 or Earlier (.txt)" then
                                 CurrReport.BREAK;
                               GLSetup.GET;
                               if GLSetup."Additional Reporting Currency" = '' then
                                 SETRANGE("Currency Code",ParentCurrencyCode)
                               else
                                 SETFILTER("Currency Code",'%1|%2',ParentCurrencyCode,GLSetup."Additional Reporting Currency");
                               SETRANGE("Starting Date",0D,ConsolidEndDate);
                             END;

               OnAfterGetRecord=BEGIN
                                  Consolidate.InsertExchRate("Currency Exchange Rate");
                                END;

               OnPostDataItem=BEGIN
                                if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then begin
                                  Consolidate.SetGlobals(
                                    ProductVersion,FormatVersion,COMPANYNAME,
                                    GLSetup."LCY Code",GLSetup."Additional Reporting Currency",ParentCurrencyCode,
                                    0,ConsolidStartDate,ConsolidEndDate);
                                  Consolidate.SetGlobals(
                                    ProductVersion,FormatVersion,COMPANYNAME,
                                    GLSetup."LCY Code",GLSetup."Additional Reporting Currency",ParentCurrencyCode,
                                    Consolidate.CalcCheckSum,ConsolidStartDate,ConsolidEndDate);
                                  Consolidate.ExportToXML(ServerFileName);
                                end;
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 9   ;2   ;Field     ;
                  Name=FileFormat;
                  CaptionML=ENU=File Format;
                  ToolTipML=ENU=Specifies the file format that you want to use for the consolidation. If the parent company that will perform the consolidation also has Dynamics 365 for Finance and Operations, Business edition 4.0 or later versions, select the .xml format. Otherwise, select the .txt format.;
                  OptionCaptionML=ENU=Version 4.00 or Later (.xml),Version 3.70 or Earlier (.txt);
                  ApplicationArea=#Suite;
                  SourceExpr=FileFormat }

      { 1   ;2   ;Field     ;
                  Name=ClientFileNameControl;
                  CaptionML=ENU=File Name;
                  ToolTipML=ENU=Specifies the name of the file to be exported from a business unit to a consolidated company.;
                  ApplicationArea=#Suite;
                  SourceExpr=ClientFileName;
                  OnAssistEdit=VAR
                                 FileManagement@1000 : Codeunit "File Management";
                               BEGIN
                                 if not IsWebClient then begin
                                   if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then
                                     ClientFileName := FileManagement.SaveFileDialog(Text011,ClientFileName,FileManagement.GetToFilterText('','.xml'))
                                   else
                                     ClientFileName := FileManagement.SaveFileDialog(Text008,ClientFileName,FileManagement.GetToFilterText('','.txt'));
                                 end else
                                   ERROR(EnterFileNameErr);
                               END;
                                }

      { 22  ;2   ;Group     ;
                  Name=Consolidation Period;
                  CaptionML=ENU=Consolidation Period }

      { 2   ;3   ;Field     ;
                  Name=StartDate;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the first date in the period from which entries will be exported. If you use a closing date, the starting date and ending date must be the same.;
                  ApplicationArea=#Suite;
                  ClosingDates=true;
                  SourceExpr=ConsolidStartDate }

      { 3   ;3   ;Field     ;
                  Name=EndDate;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the last date in the period from which entries will be exported.;
                  ApplicationArea=#Suite;
                  ClosingDates=true;
                  SourceExpr=ConsolidEndDate }

      { 7   ;2   ;Group     ;
                  Name=Copy Field Contents;
                  CaptionML=ENU=Copy Field Contents }

      { 5   ;3   ;Field     ;
                  Name=Copy Dimensions;
                  CaptionML=ENU=Copy Dimensions;
                  ToolTipML=ENU=Specifies if you want the entries to be classified by dimensions when they are transferred.;
                  ApplicationArea=#Suite;
                  SourceExpr=ColumnDim;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Export Consolidation",ColumnDim);
                               END;
                                }

      { 4   ;2   ;Field     ;
                  Name=Parent Currency Code;
                  CaptionML=ENU=Parent Currency Code;
                  ToolTipML=ENU=Specifies the currency code of the company that will perform the consolidation.;
                  ApplicationArea=#Suite;
                  SourceExpr=ParentCurrencyCode;
                  TableRelation=Currency }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ProductVersion@1036 : TextConst 'ENU=4.00';
      FormatVersion@1037 : TextConst 'ENU=1.00';
      Text000@1000 : TextConst 'ENU=Enter the file name.';
      Text001@1001 : TextConst 'ENU=Enter the starting date for the consolidation period.';
      Text002@1002 : TextConst 'ENU=Enter the ending date for the consolidation period.';
      Text003@1003 : TextConst 'ENU=The export can include a maximum of 500 days.';
      Text004@1004 : TextConst 'ENU=Processing the chart of accounts...\\';
      Text005@1005 : TextConst 'ENU=No.             #1##########\';
      Text006@1006 : TextConst 'ENU=Date            #2######';
      Text007@1007 : TextConst 'ENU=Copy Dimensions';
      Text008@1008 : TextConst 'ENU=Export to Text File';
      Text009@1009 : TextConst 'ENU="A G/L Entry with posting date on a closing date (%1) was found while exporting nonclosing entries. G/L Account No. = %2."';
      Text010@1010 : TextConst 'ENU=When using closing dates, the starting and ending dates must be the same.';
      TempGLEntry@1011 : TEMPORARY Record "G/L Entry";
      DimSetEntry@1012 : Record "Dimension Set Entry";
      Dim@1013 : Record Dimension;
      DimVal@1014 : Record "Dimension Value";
      TempDim@1015 : TEMPORARY Record Dimension;
      TempDimVal@1016 : TEMPORARY Record "Dimension Value";
      SelectedDim@1017 : Record "Selected Dimension";
      TempSelectedDim@1018 : TEMPORARY Record "Selected Dimension";
      TempDimBufIn@1019 : TEMPORARY Record "Dimension Buffer";
      TempDimBufOut@1020 : TEMPORARY Record "Dimension Buffer";
      DimSelectionBuf@1021 : Record "Dimension Selection Buffer";
      GLSetup@1038 : Record "General Ledger Setup";
      DimBufMgt@1022 : Codeunit "Dimension Buffer Management";
      Consolidate@1035 : Codeunit Consolidate;
      FileManagement@1039 : Codeunit "File Management";
      Window@1023 : Dialog;
      GLEntryFile@1024 : File;
      ServerFileName@1025 : Text;
      FileFormat@1031 : '"Version 4.00 or Later (.xml)","Version 3.70 or Earlier (.txt)"';
      ConsolidStartDate@1026 : Date;
      ConsolidEndDate@1027 : Date;
      TransferPerDay@1028 : Boolean;
      TransferPerDayReq@1029 : Boolean;
      ColumnDim@1030 : Text[250];
      ParentCurrencyCode@1032 : Code[10];
      Text011@1033 : TextConst 'ENU=Export to XML File';
      ClientFileName@1040 : Text;
      EnterFileNameErr@1034 : TextConst 'ENU=Enter a file name.';

    LOCAL PROCEDURE WriteFile@1(VAR GLEntry2@1000 : Record "G/L Entry";VAR DimBuf@1001 : Record "Dimension Buffer");
    VAR
      GLEntryNo@1002 : Integer;
    BEGIN
      if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then
        GLEntryNo := Consolidate.InsertGLEntry(GLEntry2)
      else
        GLEntryFile.WRITE(
          STRSUBSTNO(
            '<02>#1################## #2####### #3####################',
            GLEntry2."G/L Account No.",
            GLEntry2."Posting Date",
            GLEntry2.Amount));

      if DimBuf.FIND('-') then begin
        repeat
          if FileFormat = FileFormat::"Version 4.00 or Later (.xml)" then
            Consolidate.InsertEntryDim(DimBuf,GLEntryNo)
          else
            GLEntryFile.WRITE(
              STRSUBSTNO(
                '<03>#1################## #2##################',
                DimBuf."Dimension Code",
                DimBuf."Dimension Value Code"));
        until DimBuf.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateTempGLEntry@6(VAR TempDimBuf@1002 : TEMPORARY Record "Dimension Buffer");
    VAR
      DimEntryNo@1000 : Integer;
    BEGIN
      DimEntryNo := DimBufMgt.FindDimensions(TempDimBuf);
      if (not TempDimBuf.ISEMPTY) and (DimEntryNo = 0) then begin
        TempGLEntry := "G/L Entry";
        TempGLEntry."Entry No." := DimBufMgt.InsertDimensions(TempDimBuf);
        TempGLEntry.INSERT;
      end else
        if TempGLEntry.GET(DimEntryNo) then begin
          TempGLEntry.Amount := TempGLEntry.Amount + "G/L Entry".Amount;
          TempGLEntry."Debit Amount" := TempGLEntry."Debit Amount" + "G/L Entry"."Debit Amount";
          TempGLEntry."Credit Amount" := TempGLEntry."Credit Amount" + "G/L Entry"."Credit Amount";
          TempGLEntry."Additional-Currency Amount" :=
            TempGLEntry."Additional-Currency Amount" + "G/L Entry"."Additional-Currency Amount";
          TempGLEntry."Add.-Currency Debit Amount" :=
            TempGLEntry."Add.-Currency Debit Amount" + "G/L Entry"."Add.-Currency Debit Amount";
          TempGLEntry."Add.-Currency Credit Amount" :=
            TempGLEntry."Add.-Currency Credit Amount" + "G/L Entry"."Add.-Currency Credit Amount";
          TempGLEntry.MODIFY;
        end else begin
          TempGLEntry := "G/L Entry";
          TempGLEntry."Entry No." := DimEntryNo;
          TempGLEntry.INSERT;
        end;
    END;

    LOCAL PROCEDURE UpdateExportedInfo@2(VAR GLEntry3@1000 : Record "G/L Entry");
    BEGIN
      with GLEntry3 do begin
        if Amount < 0 then begin
          "G/L Account".TESTFIELD("Consol. Credit Acc.");
          "G/L Account No." := "G/L Account"."Consol. Credit Acc.";
        end else begin
          "G/L Account".TESTFIELD("Consol. Debit Acc.");
          "G/L Account No." := "G/L Account"."Consol. Debit Acc.";
        end;
        MODIFY;
      end;
    END;

    LOCAL PROCEDURE CheckClosingPostings@5(GLAccNo@1000 : Code[20];StartDate@1001 : Date;EndDate@1002 : Date);
    VAR
      GLEntry@1003 : Record "G/L Entry";
      AccountingPeriod@1004 : Record "Accounting Period";
    BEGIN
      AccountingPeriod.SETCURRENTKEY("New Fiscal Year","Date Locked");
      AccountingPeriod.SETRANGE("New Fiscal Year",true);
      AccountingPeriod.SETRANGE("Date Locked",true);
      AccountingPeriod.SETRANGE("Starting Date",StartDate + 1,EndDate);
      if AccountingPeriod.FIND('-') then begin
        GLEntry.SETRANGE("G/L Account No.",GLAccNo);
        repeat
          GLEntry.SETRANGE("Posting Date",CLOSINGDATE(AccountingPeriod."Starting Date" - 1));
          if not GLEntry.ISEMPTY then
            ERROR(
              Text009,
              GLEntry.GETFILTER("Posting Date"),
              GLAccNo);
        until AccountingPeriod.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckClosingDates@20(StartDate@1000 : Date;EndDate@1001 : Date;VAR TransferPerDay@1002 : Boolean);
    BEGIN
      if (StartDate = CLOSINGDATE(StartDate)) or
         (EndDate = CLOSINGDATE(EndDate))
      then begin
        if StartDate <> EndDate then
          ERROR(Text010);
        TransferPerDay := false;
      end else
        TransferPerDay := TransferPerDayReq;
    END;

    [External]
    PROCEDURE InitializeRequest@3(NewFileFormat@1000 : Option;NewFileName@1001 : Text);
    BEGIN
      FileFormat := NewFileFormat;
      ClientFileName := NewFileName;
    END;

    LOCAL PROCEDURE IsWebClient@4() : Boolean;
    BEGIN
      exit(FileManagement.IsWebClient);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

