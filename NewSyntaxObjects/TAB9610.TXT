OBJECT Table 9610 XML Schema Element
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=XML Schema Element;
  }
  FIELDS
  {
    { 1   ;   ;XML Schema Code     ;Code20        ;TableRelation="XML Schema";
                                                   CaptionML=ENU=XML Schema Code }
    { 2   ;   ;ID                  ;Integer       ;CaptionML=ENU=ID }
    { 3   ;   ;Parent ID           ;Integer       ;CaptionML=ENU=Parent ID }
    { 4   ;   ;Node Name           ;Text250       ;CaptionML=ENU=Node Name }
    { 5   ;   ;Node Type           ;Option        ;CaptionML=ENU=Node Type;
                                                   OptionCaptionML=ENU=Element,Attribute,Definition Node;
                                                   OptionString=Element,Attribute,"Definition Node" }
    { 6   ;   ;Data Type           ;Text250       ;CaptionML=ENU=Data Type }
    { 7   ;   ;MinOccurs           ;Integer       ;CaptionML=ENU=MinOccurs }
    { 8   ;   ;MaxOccurs           ;Integer       ;CaptionML=ENU=MaxOccurs }
    { 9   ;   ;Choice              ;Boolean       ;CaptionML=ENU=Choice }
    { 20  ;   ;Sort Key            ;Text200       ;CaptionML=ENU=Sort Key }
    { 21  ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
    { 22  ;   ;Visible             ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Visible }
    { 23  ;   ;Selected            ;Boolean       ;OnValidate=VAR
                                                                XSDParser@1001 : Codeunit "XSD Parser";
                                                                xID@1000 : Integer;
                                                              BEGIN
                                                                xID := ID;

                                                                MODIFY;
                                                                if Selected then begin
                                                                  XSDParser.ExtendSelectedElement(Rec);

                                                                  while Indentation > 0 do begin
                                                                    GET("XML Schema Code","Parent ID");
                                                                    if not Selected then begin
                                                                      Selected := true;
                                                                      MODIFY;
                                                                    end;
                                                                  end;
                                                                  GET("XML Schema Code",xID);
                                                                  SelectMandatoryNodes;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Selected }
    { 24  ;   ;Simple Data Type    ;Text50        ;OnValidate=VAR
                                                                NamespaceLength@1000 : Integer;
                                                              BEGIN
                                                                NamespaceLength := STRPOS("Simple Data Type",':');
                                                                if NamespaceLength > 0 then
                                                                  "Simple Data Type" := COPYSTR("Simple Data Type",NamespaceLength + 1);
                                                              END;

                                                   CaptionML=ENU=Simple Data Type;
                                                   Editable=false }
    { 25  ;   ;Defintion XML Schema Code;Code20   ;CaptionML=ENU=Defintion XML Schema Code }
    { 26  ;   ;Definition XML Schema ID;Integer   ;CaptionML=ENU=Definition XML Schema ID }
  }
  KEYS
  {
    {    ;"XML Schema Code",ID                    ;Clustered=true }
    {    ;"Parent ID","XML Schema Code"            }
    {    ;"XML Schema Code","Sort Key"             }
    {    ;"Node Name","XML Schema Code"            }
    {    ;"Data Type","XML Schema Code"            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE IsLeaf@1063() : Boolean;
    VAR
      ChildXMLSchemaElement@1061 : Record "XML Schema Element";
    BEGIN
      ChildXMLSchemaElement.SETRANGE("XML Schema Code","XML Schema Code");
      ChildXMLSchemaElement.SETRANGE("Parent ID",ID);
      ChildXMLSchemaElement.SETRANGE("Node Type","Node Type"::Element);
      exit(ChildXMLSchemaElement.ISEMPTY);
    END;

    [External]
    PROCEDURE GetFullPath@1() : Text;
    VAR
      ParentXMLSchemaElement@1000 : Record "XML Schema Element";
      Prefix@1001 : Text;
      Suffix@1002 : Text;
    BEGIN
      Prefix := '/';
      if "Node Type" = "Node Type"::Attribute then begin
        Prefix := '[@';
        Suffix := ']'
      end;

      if ParentXMLSchemaElement.GET("XML Schema Code","Parent ID") then
        exit(ParentXMLSchemaElement.GetFullPath + Prefix + "Node Name" + Suffix);
      exit(Prefix + "Node Name" + Suffix);
    END;

    [External]
    PROCEDURE SelectMandatoryNodes@3();
    VAR
      XMLSchemaElement@1000 : Record "XML Schema Element";
    BEGIN
      XMLSchemaElement.SETRANGE("XML Schema Code","XML Schema Code");
      XMLSchemaElement.SETRANGE("Parent ID",ID);
      if XMLSchemaElement.FINDSET then
        repeat
          XMLSchemaElement.Selected := XMLSchemaElement.Selected or (XMLSchemaElement.MinOccurs > 0);
          XMLSchemaElement.MODIFY;
          XMLSchemaElement.SelectMandatoryNodes;
        until XMLSchemaElement.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

