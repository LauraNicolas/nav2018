OBJECT Codeunit 5488 Graph Mgt - Reports
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BalanceSchedNameTxt@1001 : TextConst '@@@=Max 10 char;ENU=M-BALANCE';
      BalanceColumnNameTxt@1000 : TextConst '@@@=Max 10 char;ENU=M-BALANCE';
      CashFlowSchedNameTxt@1003 : TextConst '@@@=Max 10 char;ENU=M-CASHFLOW';
      NetChangeColumnNameTxt@1002 : TextConst '@@@=Max 10 char;ENU=M-NETCHANG';
      IncomeSchedNameTxt@1004 : TextConst '@@@=Max 10 char;ENU=M-INCOME';
      RetainedEarningSchedNameTxt@1011 : TextConst '@@@=Max 10 char;ENU=M-RETAIND';
      RecordNotProvidedErr@1005 : TextConst 'ENU=A record must be provided for this report API.';
      HeaderLineTypeTxt@1007 : TextConst '@@@={Locked};ENU=header';
      DetailLineTypeTxt@1008 : TextConst '@@@={Locked};ENU=detail';
      FooterLineTypeTxt@1009 : TextConst '@@@={Locked};ENU=total';
      SpacerLineTypeTxt@1010 : TextConst '@@@={Locked};ENU=spacer';

    PROCEDURE SetUpTrialBalanceAPIData@1(VAR TrialBalanceEntityBuffer@1000 : Record "Trial Balance Entity Buffer");
    VAR
      GLAccount@1002 : Record "G/L Account";
      NewTrialBalanceEntityBuffer@1004 : Record "Trial Balance Entity Buffer";
      DateFilter@1001 : Text;
    BEGIN
      DateFilter := STRSUBSTNO('%1',DELCHR(TrialBalanceEntityBuffer.GETFILTER("Date Filter"),'<>',''''));
      if DateFilter = '' then
        DateFilter := FORMAT(TODAY);

      GLAccount.SETFILTER("Date Filter",DateFilter);
      if GLAccount.FINDSET then begin
        repeat
          GLAccount.CALCFIELDS("Debit Amount","Balance at Date");
          GLAccount.CALCFIELDS("Credit Amount","Balance at Date");
          TrialBalanceEntityBuffer.INIT;
          TrialBalanceEntityBuffer."No." := GLAccount."No.";
          TrialBalanceEntityBuffer.Name := GLAccount.Name;
          TrialBalanceEntityBuffer."Account Type" := GLAccount."Account Type";
          TrialBalanceEntityBuffer."Account Id" := GLAccount.Id;
          if GLAccount."Account Type" in
             [GLAccount."Account Type"::"End-Total",GLAccount."Account Type"::Posting,GLAccount."Account Type"::Total]
          then begin
            TrialBalanceEntityBuffer."Total Debit" := TransformAmount(GLAccount."Debit Amount");
            TrialBalanceEntityBuffer."Total Credit" := TransformAmount(GLAccount."Credit Amount");
            if GLAccount."Balance at Date" < 0 then begin
              TrialBalanceEntityBuffer."Balance at Date Credit" := TransformAmount(GLAccount."Balance at Date");
              TrialBalanceEntityBuffer."Balance at Date Debit" := DELCHR(FORMAT(0.0,15,FormatStr(1)),'<',' ');
            end else begin
              TrialBalanceEntityBuffer."Balance at Date Debit" := TransformAmount(GLAccount."Balance at Date");
              TrialBalanceEntityBuffer."Balance at Date Credit" := DELCHR(FORMAT(0.0,15,FormatStr(1)),'<',' ');
            end;
          end;
          TrialBalanceEntityBuffer."Date Filter" := GetDateRangeMax(DateFilter);
          TrialBalanceEntityBuffer.INSERT;
        until GLAccount.NEXT = 0;
        NewTrialBalanceEntityBuffer.TRANSFERFIELDS(TrialBalanceEntityBuffer);
        TrialBalanceEntityBuffer.COPY(NewTrialBalanceEntityBuffer);
      end;
    END;

    LOCAL PROCEDURE SetUpAccountScheduleBaseAPIData@18(VAR BalanceSheetBuffer@1001 : Record "Balance Sheet Buffer";VAR AccScheduleLineEntity@1020 : Record "Acc. Schedule Line Entity";ReportType@1015 : '"Balance Sheet","Income Statement","Trial Balance","CashFlow Statement","Aged Accounts Payable","Aged Accounts Receivable","Retained Earnings"';DateFilter@1000 : Text);
    VAR
      AccScheduleLine@1002 : Record "Acc. Schedule Line";
      TempColumnLayout@1004 : TEMPORARY Record "Column Layout";
      AccSchedName@1007 : Record "Acc. Schedule Name";
      AnalysisView@1008 : Record "Analysis View";
      GLSetup@1009 : Record "General Ledger Setup";
      AccSchedManagement@1003 : Codeunit AccSchedManagement;
      MatrixMgt@1013 : Codeunit "Matrix Management";
      CurrentSchedName@1006 : Code[10];
      CurrentColumnName@1005 : Code[10];
      ColumnNo@1010 : Integer;
      DummyColumnOffset@1011 : Integer;
      ColumnValues@1012 : ARRAY [12] OF Decimal;
      DummyUseAmtsInAddCurr@1014 : Boolean;
    BEGIN
      case ReportType of
        ReportType::"Balance Sheet":
          begin
            CurrentSchedName := BalanceSchedNameTxt;
            CurrentColumnName := BalanceColumnNameTxt;
          end;
        ReportType::"CashFlow Statement":
          begin
            CurrentSchedName := CashFlowSchedNameTxt;
            CurrentColumnName := NetChangeColumnNameTxt;
          end;
        ReportType::"Income Statement":
          begin
            CurrentSchedName := IncomeSchedNameTxt;
            CurrentColumnName := NetChangeColumnNameTxt;
          end;
        ReportType::"Retained Earnings":
          begin
            CurrentSchedName := RetainedEarningSchedNameTxt;
            CurrentColumnName := NetChangeColumnNameTxt;
          end;
      end;

      if DateFilter = '' then
        DateFilter := FORMAT(TODAY);

      AccScheduleLine.SETFILTER("Date Filter",DateFilter);
      AccScheduleLine.SETRANGE("Schedule Name",CurrentSchedName);
      if AccScheduleLine.FINDSET then begin
        AccSchedManagement.CopyColumnsToTemp(CurrentColumnName,TempColumnLayout);
        AccSchedManagement.OpenSchedule(CurrentSchedName,AccScheduleLine);
        AccSchedManagement.OpenColumns(CurrentColumnName,TempColumnLayout);
        AccSchedManagement.CheckAnalysisView(CurrentSchedName,CurrentColumnName,true);

        if AccSchedName.GET(CurrentSchedName) then begin
          CLEAR(AnalysisView);
          AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        end;

        repeat
          ColumnNo := 0;
          if not (AccScheduleLine.Totaling = '') and TempColumnLayout.FINDSET then
            repeat
              EVALUATE(AccScheduleLineEntity."Net Change",DELCHR(FORMAT(0.0,15,FormatStr(1)),'<',' '));
              ColumnNo := ColumnNo + 1;
              if (ColumnNo > DummyColumnOffset) and (ColumnNo - DummyColumnOffset <= ARRAYLEN(ColumnValues)) then
                ColumnValues[ColumnNo - DummyColumnOffset] :=
                  MatrixMgt.RoundValue(
                    AccSchedManagement.CalcCell(AccScheduleLine,TempColumnLayout,DummyUseAmtsInAddCurr),
                    TempColumnLayout."Rounding Factor")
            until TempColumnLayout.NEXT = 0;

          case ReportType of
            ReportType::"Balance Sheet":
              begin
                BalanceSheetBuffer.INIT;
                BalanceSheetBuffer."Line No." := AccScheduleLine."Line No.";
                BalanceSheetBuffer.Description := AccScheduleLine.Description;
                if not (AccScheduleLine.Totaling = '') and TempColumnLayout.FINDSET then
                  EVALUATE(BalanceSheetBuffer.Balance,DELCHR(FORMAT(ColumnValues[1],15,FormatStr(ColumnNo)),'<',' '));
                EVALUATE(BalanceSheetBuffer."Date Filter",DateFilter);
                if (AccScheduleLine.Description = '') and (AccScheduleLine.Totaling = '') then
                  BalanceSheetBuffer."Line Type" := SpacerLineTypeTxt
                else
                  if AccScheduleLine."Totaling Type" = AccScheduleLine."Totaling Type"::"Posting Accounts" then begin
                    if AccScheduleLine.Bold then
                      BalanceSheetBuffer."Line Type" := HeaderLineTypeTxt
                    else
                      BalanceSheetBuffer."Line Type" := DetailLineTypeTxt
                  end else
                    BalanceSheetBuffer."Line Type" := FooterLineTypeTxt;
                BalanceSheetBuffer.Indentation := AccScheduleLine.Indentation;
                BalanceSheetBuffer.INSERT;
              end;
            ReportType::"Income Statement",
            ReportType::"CashFlow Statement",
            ReportType::"Retained Earnings":
              begin
                AccScheduleLineEntity.INIT;
                AccScheduleLineEntity."Line No." := AccScheduleLine."Line No.";
                AccScheduleLineEntity.Description := AccScheduleLine.Description;
                if not (AccScheduleLine.Totaling = '') and TempColumnLayout.FINDSET then
                  EVALUATE(AccScheduleLineEntity."Net Change",DELCHR(FORMAT(ColumnValues[1],15,FormatStr(ColumnNo))));
                AccScheduleLineEntity."Date Filter" := GetDateRangeMax(DateFilter);
                if (AccScheduleLine.Description = '') and (AccScheduleLine.Totaling = '') then
                  AccScheduleLineEntity."Line Type" := SpacerLineTypeTxt
                else
                  if AccScheduleLine."Totaling Type" = AccScheduleLine."Totaling Type"::"Posting Accounts" then begin
                    if AccScheduleLine.Bold then
                      AccScheduleLineEntity."Line Type" := HeaderLineTypeTxt
                    else
                      AccScheduleLineEntity."Line Type" := DetailLineTypeTxt
                  end else
                    AccScheduleLineEntity."Line Type" := FooterLineTypeTxt;
                AccScheduleLineEntity.Indentation := AccScheduleLine.Indentation;
                AccScheduleLineEntity.INSERT;
              end;
          end;
          AccSchedManagement.ForceRecalculate(false);
        until AccScheduleLine.NEXT = 0;
      end;
    END;

    PROCEDURE SetUpBalanceSheetAPIData@2(VAR BalanceSheetBuffer@1016 : Record "Balance Sheet Buffer");
    VAR
      TempAccScheduleLineEntity@1015 : TEMPORARY Record "Acc. Schedule Line Entity";
      ReportAPIType@1001 : '"Balance Sheet","Income Statement","Trial Balance","CashFlow Statement","Aged Accounts Payable","Aged Accounts Receivable","Retained Earnings"';
      DateFilter@1000 : Text;
    BEGIN
      EVALUATE(DateFilter,BalanceSheetBuffer.GETFILTER("Date Filter"));
      if DateFilter = '' then
        DateFilter := FORMAT(TODAY);

      SetUpAccountScheduleBaseAPIData(BalanceSheetBuffer,TempAccScheduleLineEntity,
        ReportAPIType::"Balance Sheet",DateFilter);
    END;

    PROCEDURE SetUpAccountScheduleBaseAPIDataWrapper@4(VAR AccScheduleLineEntity@1016 : Record "Acc. Schedule Line Entity";ReportType@1001 : '"Balance Sheet","Income Statement","Trial Balance","CashFlow Statement","Aged Accounts Payable","Aged Accounts Receivable","Retained Earnings"');
    VAR
      TempBalanceSheetBuffer@1017 : TEMPORARY Record "Balance Sheet Buffer";
      DateFilter@1000 : Text;
    BEGIN
      DateFilter := STRSUBSTNO('%1',DELCHR(AccScheduleLineEntity.GETFILTER("Date Filter"),'<>',''''));
      if DateFilter = '' then
        DateFilter := FORMAT(TODAY);

      SetUpAccountScheduleBaseAPIData(TempBalanceSheetBuffer,
        AccScheduleLineEntity,ReportType,DateFilter);
    END;

    PROCEDURE SetUpAgedReportAPIData@58(VAR AgedReportEntity@1016 : Record "Aged Report Entity";ReportType@1001 : '"Balance Sheet","Income Statement","Trial Balance","CashFlow Statement","Aged Accounts Payable","Aged Accounts Receivable","Retained Earnings"');
    VAR
      Customer@1005 : Record Customer;
      Vendor@1007 : Record Vendor;
      DummyGuid@1000 : GUID;
      PeriodLengthFilter@1002 : Text[10];
      PeriodStartDate@1003 : Date;
    BEGIN
      case ReportType of
        ReportType::"Aged Accounts Receivable":
          begin
            if Customer.FINDSET then
              repeat
                AgedReportEntity.INIT;
                GetAgedAmounts(AgedReportEntity,Customer);
                AgedReportEntity.AccountId := Customer.Id;
                AgedReportEntity."No." := Customer."No.";
                AgedReportEntity.Name := Customer.Name;
                AgedReportEntity."Currency Code" := Customer."Currency Code";
                if PeriodLengthFilter = '' then
                  PeriodLengthFilter := AgedReportEntity."Period Length";
                PeriodStartDate := AgedReportEntity."Period Start Date";
                AgedReportEntity.INSERT;
              until Customer.NEXT = 0;
          end;
        ReportType::"Aged Accounts Payable":
          begin
            if Vendor.FINDSET then
              repeat
                AgedReportEntity.INIT;
                GetAgedAmounts(AgedReportEntity,Vendor);
                AgedReportEntity.AccountId := Vendor.Id;
                AgedReportEntity."No." := Vendor."No.";
                AgedReportEntity.Name := Vendor.Name;
                AgedReportEntity."Currency Code" := Vendor."Currency Code";
                if PeriodLengthFilter = '' then
                  PeriodLengthFilter := AgedReportEntity."Period Length";
                PeriodStartDate := AgedReportEntity."Period Start Date";
                AgedReportEntity.INSERT;
              until Vendor.NEXT = 0;
          end;
      end;

      AgedReportEntity.INIT;
      AgedReportEntity.AccountId := DummyGuid;
      AgedReportEntity.Name := 'Total';
      AgedReportEntity.CALCSUMS(Before);
      AgedReportEntity.Before := AgedReportEntity.Before;
      AgedReportEntity.CALCSUMS("Period 1");
      AgedReportEntity."Period 1" := AgedReportEntity."Period 1";
      AgedReportEntity.CALCSUMS("Period 2");
      AgedReportEntity."Period 2" := AgedReportEntity."Period 2";
      AgedReportEntity.CALCSUMS("Period 3");
      AgedReportEntity."Period 3" := AgedReportEntity."Period 3";
      AgedReportEntity.CALCSUMS(After);
      AgedReportEntity.After := AgedReportEntity.After;
      AgedReportEntity.CALCSUMS(Balance);
      AgedReportEntity.Balance := AgedReportEntity.Balance;
      AgedReportEntity."Period Length" := FORMAT(PeriodLengthFilter);
      AgedReportEntity."Period Start Date" := PeriodStartDate;
      AgedReportEntity.INSERT;
    END;

    LOCAL PROCEDURE GetAgedAmounts@61(VAR AgedReportEntity@1016 : Record "Aged Report Entity";CurrentAccount@1000 : Variant);
    VAR
      Customer@1005 : Record Customer;
      Vendor@1001 : Record Vendor;
      DetailedCustLedgEntry@1011 : Record "Detailed Cust. Ledg. Entry";
      DetailedVendorLedgEntry@1012 : Record "Detailed Vendor Ledg. Entry";
      RecRef@1006 : RecordRef;
      PeriodLength@1007 : DateFormula;
      PeriodStartDate@1008 : ARRAY [5] OF Date;
      FilterPeriodStart@1004 : Date;
      PeriodStartFilter@1003 : Text;
      PeriodLengthFilter@1002 : Text[10];
      i@1009 : Integer;
      LineTotalAmountDue@1010 : Decimal;
      IsVendor@1013 : Boolean;
    BEGIN
      PeriodStartFilter := FORMAT(AgedReportEntity.GETFILTER("Period Start Date"));
      PeriodLengthFilter := FORMAT(AgedReportEntity.GETFILTER("Period Length"));
      if not CurrentAccount.ISRECORD then
        ERROR(RecordNotProvidedErr);
      RecRef.GETTABLE(CurrentAccount);

      if PeriodStartFilter = '' then
        AgedReportEntity."Period Start Date" := TODAY
      else begin
        EVALUATE(FilterPeriodStart,PeriodStartFilter);
        AgedReportEntity."Period Start Date" := FilterPeriodStart;
      end;

      if PeriodLengthFilter = '' then
        EVALUATE(PeriodLengthFilter,'<3M>');

      EVALUATE(PeriodLength,'<->' + FORMAT(PeriodLengthFilter));
      AgedReportEntity."Period Length" := DELCHR(FORMAT(PeriodLengthFilter),'<>','<>');

      PeriodStartDate[1] := DMY2DATE(31,12,9999);
      PeriodStartDate[2] := AgedReportEntity."Period Start Date";

      for i := 3 to 4 do
        PeriodStartDate[i] := CALCDATE(PeriodLength,PeriodStartDate[i - 1]);
      PeriodStartDate[5] := DMY2DATE(1,1,1753);

      LineTotalAmountDue := 0;
      for i := 1 to 4 do
        case RecRef.NUMBER of
          DATABASE::Customer:
            begin
              RecRef.SETTABLE(Customer);
              DetailedCustLedgEntry.SETCURRENTKEY("Customer No.","Initial Entry Due Date");
              DetailedCustLedgEntry.SETRANGE("Customer No.",Customer."No.");
              DetailedCustLedgEntry.SETRANGE("Initial Entry Due Date",PeriodStartDate[i + 1],PeriodStartDate[i] - 1);

              if DetailedCustLedgEntry.FINDFIRST then
                CalculateLineTotalAmount(AgedReportEntity,LineTotalAmountDue,DetailedCustLedgEntry,i);
            end;
          DATABASE::Vendor:
            begin
              RecRef.SETTABLE(Vendor);
              IsVendor := true;
              DetailedVendorLedgEntry.SETCURRENTKEY("Vendor No.","Initial Entry Due Date");
              DetailedVendorLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
              DetailedVendorLedgEntry.SETRANGE("Initial Entry Due Date",PeriodStartDate[i + 1],PeriodStartDate[i] - 1);

              if DetailedVendorLedgEntry.FINDFIRST then
                CalculateLineTotalAmount(AgedReportEntity,LineTotalAmountDue,DetailedVendorLedgEntry,i);
            end;
        end;

      if IsVendor then
        LineTotalAmountDue := -LineTotalAmountDue;
      AgedReportEntity.Balance := LineTotalAmountDue;
    END;

    LOCAL PROCEDURE CalculateLineTotalAmount@6(VAR AgedReportEntity@1001 : Record "Aged Report Entity";VAR LineTotalAmountDue@1003 : Decimal;DetailLedgEntryVariant@1000 : Variant;PeriodCount@1002 : Integer);
    VAR
      DetailedCustLedgEntry@1006 : Record "Detailed Cust. Ledg. Entry";
      DetailedVendorLedgEntry@1005 : Record "Detailed Vendor Ledg. Entry";
      RecRef@1004 : RecordRef;
    BEGIN
      if not DetailLedgEntryVariant.ISRECORD then
        ERROR(RecordNotProvidedErr);
      RecRef.GETTABLE(DetailLedgEntryVariant);

      case RecRef.NUMBER of
        DATABASE::"Detailed Cust. Ledg. Entry":
          begin
            RecRef.SETTABLE(DetailedCustLedgEntry);
            DetailedCustLedgEntry.CALCSUMS("Amount (LCY)");
            case PeriodCount of
              4:
                AgedReportEntity."Period 3" := DetailedCustLedgEntry."Amount (LCY)";
              3:
                AgedReportEntity."Period 2" := DetailedCustLedgEntry."Amount (LCY)";
              2:
                AgedReportEntity."Period 1" := DetailedCustLedgEntry."Amount (LCY)";
              1:
                AgedReportEntity.Before := DetailedCustLedgEntry."Amount (LCY)";
            end;
            LineTotalAmountDue := LineTotalAmountDue + DetailedCustLedgEntry."Amount (LCY)";
          end;
        DATABASE::"Detailed Vendor Ledg. Entry":
          begin
            RecRef.SETTABLE(DetailedVendorLedgEntry);
            DetailedVendorLedgEntry.CALCSUMS("Amount (LCY)");
            case PeriodCount of
              4:
                AgedReportEntity."Period 3" := -DetailedVendorLedgEntry."Amount (LCY)";
              3:
                AgedReportEntity."Period 2" := -DetailedVendorLedgEntry."Amount (LCY)";
              2:
                AgedReportEntity."Period 1" := -DetailedVendorLedgEntry."Amount (LCY)";
              1:
                AgedReportEntity.Before := -DetailedVendorLedgEntry."Amount (LCY)";
            end;
            LineTotalAmountDue := LineTotalAmountDue + DetailedVendorLedgEntry."Amount (LCY)";
          end;
      end;
    END;

    LOCAL PROCEDURE FormatStr@8(ColumnNo@1000 : Integer) : Text;
    VAR
      ColumnLayoutArr@1002 : ARRAY [12] OF Record "Column Layout";
      MatrixMgt@1001 : Codeunit "Matrix Management";
      DummyUseAmtsInAddCurr@1003 : Boolean;
    BEGIN
      exit(MatrixMgt.GetFormatString(ColumnLayoutArr[ColumnNo]."Rounding Factor",DummyUseAmtsInAddCurr));
    END;

    LOCAL PROCEDURE GetDateRangeMax@42(DateFilter@1000 : Text) RangeMax : Date;
    VAR
      RegularExpression@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      RegExMatches@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.MatchCollection";
      Match@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Match";
      TempDate@1002 : Date;
    BEGIN
      RegularExpression := RegularExpression.Regex('(\d{1,2})\/(\d{1,2})\/(\d{2})');
      RegExMatches := RegularExpression.Matches(DateFilter);

      if RegExMatches.Count <= 0 then begin
        RangeMax := TODAY;
        exit;
      end;

      foreach Match in RegExMatches do begin
        EVALUATE(TempDate,Match.Value);
        if TempDate > RangeMax then
          RangeMax := TempDate;
      end;
    END;

    LOCAL PROCEDURE TransformAmount@52(Amount@1150 : Decimal) NewAmount : Text[30];
    BEGIN
      if Amount < 0 then
        NewAmount := DELCHR(FORMAT(Amount * -1,15,FormatStr(1)),'<',' ')
      else
        NewAmount := DELCHR(FORMAT(Amount,15,FormatStr(1)),'<',' ');
    END;

    BEGIN
    END.
  }
}

