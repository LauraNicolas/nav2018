OBJECT Report 1137 Transfer Budget to Actual
{
  OBJECT-PROPERTIES
  {
    Date=20150915D;
    Time=120000T;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Transfer Budget to Actual;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 3233;    ;DataItem;Cost Budget Entry   ;
               DataItemTable="Cost Budget Entry";
               DataItemTableView=SORTING("Budget Name","Cost Type No.",Date);
               OnPreDataItem=BEGIN
                               if GETFILTER("Budget Name") = '' then
                                 ERROR(Text000);

                               if GETFILTER(Date) = '' then
                                 ERROR(Text001);

                               if not CONFIRM(Text002,true,GETFILTER("Budget Name"),GETFILTER(Date)) then
                                 ERROR('');

                               LOCKTABLE;

                               Window.OPEN(Text003);

                               Window.UPDATE(1,COUNT);
                             END;

               OnAfterGetRecord=VAR
                                  SourceCodeSetup@1001 : Record "Source Code Setup";
                                BEGIN
                                  SourceCodeSetup.GET;
                                  SourceCodeSetup.TESTFIELD("Transfer Budget to Actual");
                                  TempCostJnlLine.INIT;
                                  LastEntryNo := LastEntryNo + 1;
                                  TempCostJnlLine."Line No." := LastEntryNo;
                                  TempCostJnlLine."Cost Type No." := "Cost Type No.";
                                  TempCostJnlLine."Posting Date" := Date;
                                  TempCostJnlLine."Document No." := "Document No.";
                                  if TempCostJnlLine."Document No." = '' then
                                    TempCostJnlLine."Document No." := 'BUDGET';
                                  TempCostJnlLine.Description := Description;
                                  TempCostJnlLine.Amount := Amount;
                                  TempCostJnlLine."Cost Center Code" := "Cost Center Code";
                                  TempCostJnlLine."Cost Object Code" := "Cost Object Code";
                                  TempCostJnlLine."Source Code" := SourceCodeSetup."Transfer Budget to Actual";
                                  TempCostJnlLine."Allocation Description" := "Allocation Description";
                                  TempCostJnlLine."Allocation ID" := "Allocation ID";
                                  TempCostJnlLine.INSERT;

                                  NoInserted := NoInserted + 1;
                                  if (NoInserted mod 100) = 0 then
                                    Window.UPDATE(2,NoInserted);
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;

                                if not CONFIRM(Text004,true,NoInserted) then
                                  ERROR('');

                                PostCostJournalLines;
                              END;

               ReqFilterFields="Budget Name",Date,Allocated,"Cost Type No.","Cost Center Code","Cost Object Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      TempCostJnlLine@1000 : TEMPORARY Record "Cost Journal Line";
      Window@1001 : Dialog;
      LastEntryNo@1002 : Integer;
      NoInserted@1003 : Integer;
      Text000@1004 : TextConst 'ENU=Define the name of the source budget.';
      Text001@1005 : TextConst 'ENU=Date range must be defined.';
      Text002@1006 : TextConst 'ENU=The cost budget "%1" for the date range of "%2" will be transferred to the actual cost entries. \Do you want to start the job?';
      Text003@1007 : TextConst 'ENU=Copying budget entries\No of entries #1#####\Copied        #2#####';
      Text004@1008 : TextConst 'ENU=%1 budget entries were transferred to actual cost entries.\\Do you want to copy entries?';
      Text005@1009 : TextConst 'ENU=Posting Cost Entries @1@@@@@@@@@@\';

    LOCAL PROCEDURE PostCostJournalLines@1();
    VAR
      CostJnlLine@1000 : Record "Cost Journal Line";
      CAJnlPostLine@1001 : Codeunit "CA Jnl.-Post Line";
      Window2@1002 : Dialog;
      JournalLineCount@1003 : Integer;
      CostJnlLineStep@1005 : Integer;
    BEGIN
      TempCostJnlLine.RESET;
      Window2.OPEN(
        Text005);
      if TempCostJnlLine.COUNT > 0 then
        JournalLineCount := 10000 * 100000 div TempCostJnlLine.COUNT;
      if TempCostJnlLine.FINDSET then
        repeat
          CostJnlLineStep := CostJnlLineStep + JournalLineCount;
          Window2.UPDATE(1,CostJnlLineStep div 100000);
          CostJnlLine := TempCostJnlLine;
          CAJnlPostLine.RunWithCheck(CostJnlLine);
        until TempCostJnlLine.NEXT = 0;
      Window2.CLOSE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

