OBJECT Codeunit 1660 Payroll Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData User=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      PayrollServiceNotFoundErr@1006 : TextConst 'ENU=A payroll service could not be found.';
      PayrollServiceDisabledErr@1004 : TextConst '@@@=%1 Payroll Service Name;ENU=Payroll service %1 is disabled.';
      SelectPayrollServiceToUseTxt@1003 : TextConst 'ENU=Several payroll services are installed and enabled. Select a service you want to use.';
      SelectPayrollServiceToEnableTxt@1002 : TextConst 'ENU=Select a payroll service you want to enable and use.';
      EnablePayrollServicesQst@1005 : TextConst 'ENU=All payroll services are disabled. Do you want to enable a payroll service?';

    [External]
    PROCEDURE ShowPayrollForTestInNonSaas@1() : Boolean;
    VAR
      PermissionManager@1000 : Codeunit "Permission Manager";
    BEGIN
      if PermissionManager.SoftwareAsAService then
        exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE ImportPayroll@2(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      TempServiceConnection@1002 : TEMPORARY Record "Service Connection";
    BEGIN
      TempServiceConnection.DELETEALL;
      OnRegisterPayrollService(TempServiceConnection);

      if TempServiceConnection.ISEMPTY then
        ERROR(PayrollServiceNotFoundErr);

      if not EnabledPayrollServiceExists(TempServiceConnection) then begin
        if CONFIRM(EnablePayrollServicesQst) then
          EnablePayrollService(TempServiceConnection)
        else
          exit;
      end;

      if EnabledPayrollServiceExists(TempServiceConnection) then
        if SelectPayrollService(TempServiceConnection,SelectPayrollServiceToUseTxt) then
          OnImportPayroll(TempServiceConnection,GenJournalLine);
    END;

    LOCAL PROCEDURE EnabledPayrollServiceExists@9(VAR TempServiceConnection@1000 : TEMPORARY Record "Service Connection") : Boolean;
    BEGIN
      TempServiceConnection.SETFILTER(
        Status,STRSUBSTNO('%1|%2',TempServiceConnection.Status::Enabled,TempServiceConnection.Status::Connected));
      exit(TempServiceConnection.FINDSET);
    END;

    LOCAL PROCEDURE EnablePayrollService@8(VAR TempServiceConnection@1000 : TEMPORARY Record "Service Connection");
    VAR
      SelectedServiceRecordId@1004 : RecordID;
      SelectedServiceName@1005 : Text;
    BEGIN
      TempServiceConnection.RESET;
      if SelectPayrollService(TempServiceConnection,SelectPayrollServiceToEnableTxt) then begin
        SelectedServiceRecordId := TempServiceConnection."Record ID";
        SelectedServiceName := TempServiceConnection.Name;
        SetupPayrollService(TempServiceConnection);
        TempServiceConnection.DELETEALL;
        OnRegisterPayrollService(TempServiceConnection);
        if not TempServiceConnection.ISEMPTY then begin
          TempServiceConnection.SETRANGE("Record ID",SelectedServiceRecordId);
          if not EnabledPayrollServiceExists(TempServiceConnection) then
            ERROR(PayrollServiceDisabledErr,SelectedServiceName);
        end else
          ERROR(PayrollServiceNotFoundErr);
      end;
    END;

    LOCAL PROCEDURE SelectPayrollService@31(VAR TempServiceConnection@1000 : TEMPORARY Record "Service Connection";Instruction@1001 : Text) : Boolean;
    VAR
      ServiceList@1004 : Text;
      SelectedServiceIndex@1003 : Integer;
    BEGIN
      if TempServiceConnection.COUNT < 2 then
        exit(TempServiceConnection.FINDFIRST);

      TempServiceConnection.SETCURRENTKEY(Name);
      TempServiceConnection.SETASCENDING(Name,true);
      TempServiceConnection.FINDFIRST;
      repeat
        if ServiceList = '' then
          ServiceList := CONVERTSTR(TempServiceConnection.Name,',',' ')
        else
          ServiceList := ServiceList + ',' + CONVERTSTR(TempServiceConnection.Name,',',' ');
      until TempServiceConnection.NEXT = 0;
      SelectedServiceIndex := STRMENU(ServiceList,1,Instruction);

      if SelectedServiceIndex > 0 then begin
        TempServiceConnection.FINDFIRST;
        if SelectedServiceIndex > 1 then
          TempServiceConnection.NEXT(SelectedServiceIndex - 1);
      end;
      exit(SelectedServiceIndex > 0);
    END;

    LOCAL PROCEDURE SetupPayrollService@10(VAR TempServiceConnection@1000 : TEMPORARY Record "Service Connection");
    VAR
      AssistedSetup@1002 : Record "Assisted Setup";
      RecordRef@1001 : RecordRef;
      RecordRefVariant@1003 : Variant;
    BEGIN
      RecordRef.GET(TempServiceConnection."Record ID");
      if (TempServiceConnection.Status <> TempServiceConnection.Status::Enabled) and
         (TempServiceConnection.Status <> TempServiceConnection.Status::Connected) and
         (TempServiceConnection."Assisted Setup Page ID" <> 0) and
         AssistedSetup.GET(TempServiceConnection."Assisted Setup Page ID") and
         (AssistedSetup.Status = AssistedSetup.Status::"Not Completed") and
         AssistedSetup.Visible
      then
        AssistedSetup.Run
      else begin
        RecordRefVariant := RecordRef;
        PAGE.RUNMODAL(TempServiceConnection."Page ID",RecordRefVariant);
      end;
    END;

    [Integration]
    [External]
    PROCEDURE OnRegisterPayrollService@5(VAR TempServiceConnection@1000 : TEMPORARY Record "Service Connection");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnImportPayroll@4(VAR TempServiceConnection@1000 : TEMPORARY Record "Service Connection";GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    BEGIN
    END.
  }
}

