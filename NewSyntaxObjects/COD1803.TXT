OBJECT Codeunit 1803 Encrypted Key/Value Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Encrypted Key/Value"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      EncryptedKeyValueTxt@1000 : TextConst 'ENU=Encrypted Key/Value';
      NamespaceKeyTemplateTxt@1006 : TextConst '@@@={Locked};ENU=%1_%2';
      ServiceKeyExistsErr@1002 : TextConst '@@@="%1 = key name that has been provided (e.g. ServiceName_Username)";ENU=Configuration key %1 already exists.';
      ServiceKeyNotExistsErr@1003 : TextConst '@@@="%1 = key name that has been provided (e.g. ServiceName_Username)";ENU=Configuration key %1 does not exist.';
      ServiceKeyTooLongErr@1005 : TextConst 'ENU=The specified key name is too long.';
      InvalidKeyErr@1004 : TextConst 'ENU=The specified key name is not valid.';
      InsertEventTxt@1008 : TextConst 'ENU=Insert key.';
      UpdateEventTxt@1009 : TextConst 'ENU=Update key.';
      DeleteEventTxt@1010 : TextConst 'ENU=Delete key.';
      CleanupEventTxt@1001 : TextConst 'ENU=Cleanup.';
      SuccessTxt@1012 : TextConst 'ENU=Success.';
      RequestInitTxt@1013 : TextConst 'ENU=Request initiated.';
      NoPermissionTxt@1007 : TextConst 'ENU=The user does not have permission.';
      NoEncryptionTxt@1011 : TextConst 'ENU=Encryption has not been enabled.';
      DevBetaEnabledTxt@1015 : TextConst 'ENU=Developer Mode Enabled.';
      DevBetaDisabledTxt@1016 : TextConst 'ENU=Developer Mode Disabled.';

    [External]
    PROCEDURE Insert@1(Namespace@1003 : Code[50];Key@1000 : Code[50];Value@1001 : Text) : Boolean;
    VAR
      EncryptedKeyValue@1002 : Record "Encrypted Key/Value";
      FullKey@1004 : Code[50];
    BEGIN
      FullKey := GenerateFullKey(Namespace,Key);

      // If key is DEV_BETA we should set development mode and exit
      if ProcessSettingDevelopmentMode(FullKey,Value) then
        exit(true);

      if not HasCapability(InsertEventTxt) then
        exit(false);

      if EncryptedKeyValue.GET(FullKey) then begin
        LogActivity(InsertEventTxt,STRSUBSTNO(ServiceKeyExistsErr,FullKey),false);
        exit(false);
      end;

      EncryptedKeyValue.INIT;
      EncryptedKeyValue.VALIDATE(Key,FullKey);
      EncryptedKeyValue.InsertValue(Value);
      EncryptedKeyValue.INSERT(true);

      LogActivity(InsertEventTxt,FullKey,true);
      exit(true);
    END;

    [External]
    PROCEDURE Update@2(Namespace@1003 : Code[50];Key@1001 : Code[50];Value@1000 : Text) : Boolean;
    VAR
      EncryptedKeyValue@1002 : Record "Encrypted Key/Value";
      FullKey@1004 : Code[50];
    BEGIN
      if not HasCapability(UpdateEventTxt) then
        exit(false);

      FullKey := GenerateFullKey(Namespace,Key);

      if not EncryptedKeyValue.GET(FullKey) then begin
        LogActivity(UpdateEventTxt,STRSUBSTNO(ServiceKeyNotExistsErr,FullKey),false);
        exit(false);
      end;

      EncryptedKeyValue.InsertValue(Value);
      EncryptedKeyValue.MODIFY(true);

      LogActivity(UpdateEventTxt,FullKey,true);
      exit(true);
    END;

    [External]
    PROCEDURE Remove@3(Namespace@1002 : Code[50];Key@1001 : Code[50]) : Boolean;
    VAR
      EncryptedKeyValue@1000 : Record "Encrypted Key/Value";
      FullKey@1003 : Code[50];
    BEGIN
      if not HasCapability(DeleteEventTxt) then
        exit(false);

      FullKey := GenerateFullKey(Namespace,Key);

      if EncryptedKeyValue.GET(FullKey) then begin
        EncryptedKeyValue.DELETE(true);
        LogActivity(DeleteEventTxt,FullKey,true);
      end else
        LogActivity(DeleteEventTxt,STRSUBSTNO(ServiceKeyNotExistsErr,FullKey),true);

      exit(true);
    END;

    [External]
    PROCEDURE Cleanup@4() : Boolean;
    VAR
      EncryptedKeyValue@1001 : Record "Encrypted Key/Value";
      ErrorOccured@1000 : Boolean;
    BEGIN
      if not HasCapability(CleanupEventTxt) then
        exit(false);

      LogActivity(CleanupEventTxt,RequestInitTxt,true);
      COMMIT;

      ErrorOccured := false;
      OnCleanUpEvent(ErrorOccured);

      if not ErrorOccured then
        EncryptedKeyValue.DELETEALL;

      LogActivity(CleanupEventTxt,SuccessTxt,not ErrorOccured);
      exit(not ErrorOccured);
    END;

    LOCAL PROCEDURE ProcessSettingDevelopmentMode@7(Key@1000 : Code[50];Value@1001 : Text) : Boolean;
    VAR
      CompanyInformation@1002 : Record "Company Information";
      EnableDeveloperMode@1003 : Boolean;
    BEGIN
      if Key <> CompanyInformation.GetDevBetaModeTxt then
        exit(false);

      if not EVALUATE(EnableDeveloperMode,Value,9) then
        exit(false);

      CompanyInformation.GET;

      if (not EnableDeveloperMode) and (CompanyInformation."Custom System Indicator Text" <> CompanyInformation.GetDevBetaModeTxt) then
        exit(false);

      if EnableDeveloperMode then begin
        CompanyInformation.VALIDATE("Custom System Indicator Text",CompanyInformation.GetDevBetaModeTxt);
        LogActivity(InsertEventTxt,DevBetaEnabledTxt,true);
      end else begin
        CLEAR(CompanyInformation."Custom System Indicator Text");
        LogActivity(InsertEventTxt,DevBetaDisabledTxt,true);
      end;

      CompanyInformation.MODIFY(true);
      exit(true);
    END;

    LOCAL PROCEDURE GenerateFullKey@15(Namespace@1000 : Code[50];Key@1001 : Code[50]) : Code[50];
    VAR
      Result@1002 : Code[50];
    BEGIN
      if (Namespace = '') or (Key = '') then
        ERROR(InvalidKeyErr);

      if STRLEN(STRSUBSTNO(NamespaceKeyTemplateTxt,Namespace,Key)) > MAXSTRLEN(Result) then
        ERROR(ServiceKeyTooLongErr);

      Result := COPYSTR(STRSUBSTNO(NamespaceKeyTemplateTxt,Namespace,Key),1,MAXSTRLEN(Result));
      exit(Result);
    END;

    LOCAL PROCEDURE LogActivity@31(ActivityDescription@1002 : Text;ActivityMessage@1003 : Text;Success@1001 : Boolean);
    VAR
      ActivityLog@1000 : Record "Activity Log";
      EncryptedKeyValue@1005 : Record "Encrypted Key/Value";
      Status@1004 : Integer;
    BEGIN
      if Success then
        Status := ActivityLog.Status::Success
      else
        Status := ActivityLog.Status::Failed;

      ActivityLog.LogActivity(EncryptedKeyValue.RECORDID,Status,EncryptedKeyValueTxt,
        ActivityDescription,ActivityMessage);
    END;

    LOCAL PROCEDURE HasCapability@6(EventType@1004 : Text) : Boolean;
    VAR
      EncryptedKeyValue@1000 : Record "Encrypted Key/Value";
      EncryptionManagement@1003 : Codeunit "Encryption Management";
      HasPermission@1001 : Boolean;
      HasEncryption@1002 : Boolean;
    BEGIN
      HasPermission := EncryptedKeyValue.WRITEPERMISSION and EncryptedKeyValue.READPERMISSION;
      HasEncryption := EncryptionManagement.IsEncryptionEnabled and EncryptionManagement.IsEncryptionPossible;

      if not HasPermission then begin
        LogActivity(EventType,NoPermissionTxt,false);
        exit(false);
      end;

      if not HasEncryption then begin
        LogActivity(EventType,NoEncryptionTxt,false);
        exit(false);
      end;

      exit(true);
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnCleanUpEvent@5(VAR ErrorOccured@1000 : Boolean);
    BEGIN
      // The subscriber of this event should perform any clean up that is dependant on the Encrypted Key/Value table.
      // If an error occurs it should set ErrorOccured to true.
    END;

    BEGIN
    END.
  }
}

