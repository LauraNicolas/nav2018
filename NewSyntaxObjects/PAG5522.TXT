OBJECT Page 5522 Order Planning
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Order Planning;
    InsertAllowed=false;
    SourceTable="Requisition Line";
    PageType=Worksheet;
    SourceTableTemporary=true;
    OnInit=BEGIN
             DemandOrderFilterCtrlEnable := true;
             SupplyFromEditable := true;
             ReserveEditable := true;
           END;

    OnOpenPage=BEGIN
                 if not MfgUserTempl.GET(USERID) then begin
                   MfgUserTempl.INIT;
                   MfgUserTempl."User ID" := USERID;
                   MfgUserTempl."Make Orders" := MfgUserTempl."Make Orders"::"The Active Order";
                   MfgUserTempl."Create Purchase Order" := MfgUserTempl."Create Purchase Order"::"Make Purch. Orders";
                   MfgUserTempl."Create Production Order" := MfgUserTempl."Create Production Order"::"Firm Planned";
                   MfgUserTempl."Create Transfer Order" := MfgUserTempl."Create Transfer Order"::"Make Trans. Orders";
                   MfgUserTempl."Create Assembly Order" := MfgUserTempl."Create Assembly Order"::"Make Assembly Orders";
                   MfgUserTempl.INSERT;
                 end;

                 InitTempRec;
               END;

    OnAfterGetRecord=BEGIN
                       DescriptionIndent := 0;
                       StatusText := FORMAT(Status);
                       StatusTextOnFormat(StatusText);
                       DemandTypeText := FORMAT("Demand Type");
                       DemandTypeTextOnFormat(DemandTypeText);
                       DemandSubtypeText := FORMAT("Demand Subtype");
                       DemandSubtypeTextOnFormat(DemandSubtypeText);
                       DemandOrderNoOnFormat;
                       DescriptionOnFormat;
                       DemandQuantityOnFormat;
                       DemandQtyAvailableOnFormat;
                       ReplenishmentSystemOnFormat;
                       QuantityOnFormat;
                       ReserveOnFormat;
                     END;

    OnModifyRecord=VAR
                     ReqLine@1000 : Record "Requisition Line";
                   BEGIN
                     ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.");
                     ReqLine.TRANSFERFIELDS(Rec,false);
                     ReqLine.MODIFY(true);
                   END;

    OnDeleteRecord=VAR
                     xReqLine@1000 : Record "Requisition Line";
                   BEGIN
                     xReqLine := Rec;
                     while (NEXT <> 0) and (Level > xReqLine.Level) do
                       DELETE(true);
                     Rec := xReqLine;
                     xReqLine.DELETE(true);
                     DELETE;
                     exit(false);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           if ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") then begin
                             Rec := ReqLine;
                             MODIFY
                           end else
                             if GET("Worksheet Template Name","Journal Batch Name","Line No.") then
                               DELETE;

                           UpdateSupplyFrom;
                           CalcItemAvail;
                         END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 99      ;1   ;ActionGroup;
                      Name=&Line;
                      CaptionML=ENU=&Line;
                      Image=Line }
      { 18      ;2   ;Action    ;
                      Name=Show Document;
                      CaptionML=ENU=Show Document;
                      ToolTipML=ENU=Open the document that the selected line exists on.;
                      ApplicationArea=#Planning;
                      Image=View;
                      OnAction=BEGIN
                                 ShowDemandOrder;
                               END;
                                }
      { 63      ;2   ;Separator ;
                      Name=Separator63 }
      { 42      ;2   ;Action    ;
                      Name=Components;
                      CaptionML=ENU=Components;
                      ToolTipML=ENU=View or edit the production order components of the parent item on the line.;
                      ApplicationArea=#Planning;
                      RunObject=Page "Planning Components";
                      RunPageLink="Worksheet Template Name"=FIELD("Worksheet Template Name"),
                                  "Worksheet Batch Name"=FIELD("Journal Batch Name"),
                                  "Worksheet Line No."=FIELD("Line No.");
                      Image=Components }
      { 47      ;2   ;Action    ;
                      Name=Ro&uting;
                      CaptionML=ENU=Ro&uting;
                      ToolTipML=ENU=View or edit the operations list of the parent item on the line.;
                      ApplicationArea=#Planning;
                      RunObject=Page "Planning Routing";
                      RunPageLink="Worksheet Template Name"=FIELD("Worksheet Template Name"),
                                  "Worksheet Batch Name"=FIELD("Journal Batch Name"),
                                  "Worksheet Line No."=FIELD("Line No.");
                      Image=Route }
      { 101     ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData Dimension=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#Dimensions;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                                 CurrPage.SAVERECORD;
                               END;
                                }
      { 100     ;1   ;ActionGroup;
                      Name=&Item;
                      CaptionML=ENU=&Item;
                      Image=Item }
      { 19      ;2   ;Action    ;
                      Name=Card;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=Card;
                      ToolTipML=ENU=View or change detailed information about the record on the document or journal line.;
                      ApplicationArea=#Planning;
                      Image=EditLines;
                      OnAction=VAR
                                 Item@1000 : Record Item;
                               BEGIN
                                 TESTFIELD(Type,Type::Item);
                                 TESTFIELD("No.");
                                 Item."No." := "No.";
                                 PAGE.RUNMODAL(PAGE::"Item Card",Item);
                               END;
                                }
      { 105     ;2   ;ActionGroup;
                      Name=&Item Availability by;
                      CaptionML=ENU=&Item Availability by;
                      Image=ItemAvailability }
      { 3       ;3   ;Action    ;
                      Name=Event;
                      CaptionML=ENU=Event;
                      ToolTipML=ENU=View how the actual and the projected available balance of an item will develop over time according to supply and demand events.;
                      ApplicationArea=#Planning;
                      Image=Event;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByEvent);
                               END;
                                }
      { 106     ;3   ;Action    ;
                      Name=Period;
                      CaptionML=ENU=Period;
                      ToolTipML=ENU=View the projected quantity of the item over time according to time periods, such as day, week, or month.;
                      ApplicationArea=#Planning;
                      Image=Period;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByPeriod);
                               END;
                                }
      { 107     ;3   ;Action    ;
                      Name=Variant;
                      CaptionML=ENU=Variant;
                      ToolTipML=ENU=View or edit the item's variants. Instead of setting up each color of an item as a separate item, you can set up the various colors as variants of the item.;
                      ApplicationArea=#Advanced;
                      Image=ItemVariant;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByVariant);
                               END;
                                }
      { 108     ;3   ;Action    ;
                      Name=Location;
                      AccessByPermission=TableData Location=R;
                      CaptionML=ENU=Location;
                      ToolTipML=ENU=View the actual and projected quantity of the item per location.;
                      ApplicationArea=#Location;
                      Image=Warehouse;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByLocation);
                               END;
                                }
      { 5       ;3   ;Action    ;
                      Name=BOM Level;
                      CaptionML=ENU=BOM Level;
                      ToolTipML=ENU=View availability figures for items on bills of materials that show how many units of a parent item you can make based on the availability of child items.;
                      ApplicationArea=#Assembly;
                      Image=BOMLevel;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromReqLine(Rec,ItemAvailFormsMgt.ByBOM);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 39      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 37      ;2   ;Action    ;
                      Name=CalculatePlan;
                      CaptionML=ENU=&Calculate Plan;
                      ToolTipML=ENU=Start the calculation of supply orders needed to fulfill the specified demand. Remember that each time, you choose the Calculate Plan action, only  one product level is planned.;
                      ApplicationArea=#Planning;
                      Promoted=true;
                      Image=CalculatePlan;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalcPlan;
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 48      ;2   ;Separator ;
                      Name=Separator48 }
      { 66      ;2   ;Action    ;
                      Name=&Reserve;
                      CaptionML=ENU=&Reserve;
                      ToolTipML=ENU=Reserve the quantity that is required on the document line that you opened this window for.;
                      ApplicationArea=#Planning;
                      Image=Reserve;
                      OnAction=BEGIN
                                 CurrPage.SAVERECORD;
                                 ShowReservation;
                               END;
                                }
      { 67      ;2   ;Action    ;
                      Name=OrderTracking;
                      CaptionML=ENU=Order &Tracking;
                      ToolTipML=ENU=Tracks the connection of a supply to its corresponding demand. This can help you find the original demand that created a specific production order or purchase order.;
                      ApplicationArea=#Planning;
                      Image=OrderTracking;
                      OnAction=VAR
                                 TrackingForm@1001 : Page "Order Tracking";
                               BEGIN
                                 TrackingForm.SetReqLine(Rec);
                                 TrackingForm.RUNMODAL;
                               END;
                                }
      { 77      ;2   ;Action    ;
                      Name=Refresh &Planning Line;
                      Ellipsis=true;
                      CaptionML=ENU=Refresh &Planning Line;
                      ToolTipML=ENU=Update the planning components and the routing lines for the selected planning line with any changes.;
                      ApplicationArea=#Planning;
                      Image=RefreshPlanningLine;
                      OnAction=VAR
                                 ReqLine2@1000 : Record "Requisition Line";
                               BEGIN
                                 ReqLine2.SETRANGE("Worksheet Template Name","Worksheet Template Name");
                                 ReqLine2.SETRANGE("Journal Batch Name","Journal Batch Name");
                                 ReqLine2.SETRANGE("Line No.","Line No.");

                                 REPORT.RUNMODAL(REPORT::"Refresh Planning Demand",true,false,ReqLine2);
                               END;
                                }
      { 36      ;2   ;Separator ;
                      Name=Separator36 }
      { 55      ;1   ;Action    ;
                      Name=Make &Orders;
                      Ellipsis=true;
                      CaptionML=ENU=Make &Orders;
                      ToolTipML=ENU=Create the suggested supply orders according to options that you specify in a new window.;
                      ApplicationArea=#Planning;
                      Promoted=true;
                      Image=NewOrder;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 MakeSupplyOrders@1001 : Codeunit "Make Supply Orders (Yes/No)";
                               BEGIN
                                 MakeSupplyOrders.SetManufUserTemplate(MfgUserTempl);
                                 MakeSupplyOrders.RUN(Rec);

                                 if MakeSupplyOrders.ActionMsgCarriedOut then begin
                                   RefreshTempTable;
                                   SetRecFilters;
                                   CurrPage.UPDATE(false);
                                 end;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 78  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 80  ;2   ;Field     ;
                Name=DemandOrderFilterCtrl;
                CaptionML=ENU=Show Demand as;
                ToolTipML=ENU=Specifies a filter to define which demand types you want to display in the Order Planning window.;
                OptionCaptionML=ENU=All Demand,Production Demand,Sales Demand,Service Demand,Job Demand,Assembly Demand;
                ApplicationArea=#Planning;
                SourceExpr=DemandOrderFilter;
                Enabled=DemandOrderFilterCtrlEnable;
                OnValidate=BEGIN
                             DemandOrderFilterOnAfterValida;
                           END;

                ImplicitType=Option }

    { 1   ;1   ;Group     ;
                Name=Group1;
                IndentationColumnName=DescriptionIndent;
                IndentationControls=Description;
                ShowAsTree=true;
                GroupType=Repeater }

    { 14  ;2   ;Field     ;
                Name=Demand Date;
                ToolTipML=ENU=Specifies the demanded date of the demand that the planning line represents.;
                ApplicationArea=#Planning;
                SourceExpr="Demand Date";
                ImplicitType=Date }

    { 72  ;2   ;Field     ;
                Name=StatusText;
                ApplicationArea=#Planning;
                SourceExpr=StatusText;
                CaptionClass=FIELDCAPTION(Status);
                Editable=FALSE;
                HideValue=StatusHideValue;
                ImplicitType=Text1024 }

    { 43  ;2   ;Field     ;
                Name=DemandTypeText;
                Lookup=false;
                ApplicationArea=#Planning;
                SourceExpr=DemandTypeText;
                CaptionClass=FIELDCAPTION("Demand Type");
                Editable=FALSE;
                HideValue=DemandTypeHideValue;
                Style=Strong;
                StyleExpr=DemandTypeEmphasize;
                ImplicitType=Text1024 }

    { 46  ;2   ;Field     ;
                Name=DemandSubtypeText;
                ApplicationArea=#Planning;
                SourceExpr=DemandSubtypeText;
                CaptionClass=FIELDCAPTION("Demand Subtype");
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Text1024 }

    { 57  ;2   ;Field     ;
                Name=Demand Order No.;
                CaptionML=ENU=Order No.;
                ToolTipML=ENU=Specifies the number of the demanded order that represents the planning line.;
                ApplicationArea=#Planning;
                SourceExpr="Demand Order No.";
                HideValue=DemandOrderNoHideValue;
                Style=Strong;
                StyleExpr=DemandOrderNoEmphasize;
                ImplicitType=Code20 }

    { 87  ;2   ;Field     ;
                Name=Demand Line No.;
                ToolTipML=ENU=Specifies the line number of the demand, such as a sales order line.;
                ApplicationArea=#Planning;
                SourceExpr="Demand Line No.";
                Visible=FALSE;
                ImplicitType=Integer }

    { 4   ;2   ;Field     ;
                Name=No.;
                CaptionML=ENU=Item No.;
                ToolTipML=ENU=Specifies the number of the item with insufficient availability and must be planned.;
                ApplicationArea=#Planning;
                SourceExpr="No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Variant Code;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Variant Code";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Code10 }

    { 16  ;2   ;Field     ;
                Name=Location Code;
                ToolTipML=ENU=Specifies a code for an inventory location where the items that are being ordered will be registered.;
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Code10 }

    { 6   ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies text that describes the entry.;
                ApplicationArea=#Planning;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=DescriptionEmphasize;
                ImplicitType=Text50 }

    { 10  ;2   ;Field     ;
                Name=Demand Quantity;
                ToolTipML=ENU=Specifies the quantity on the demand that the planning line represents.;
                ApplicationArea=#Planning;
                SourceExpr="Demand Quantity";
                Visible=FALSE;
                HideValue=DemandQuantityHideValue;
                ImplicitType=Decimal }

    { 95  ;2   ;Field     ;
                Name=Demand Qty. Available;
                ToolTipML=ENU=Specifies how many of the demand quantity are available.;
                ApplicationArea=#Planning;
                SourceExpr="Demand Qty. Available";
                Visible=FALSE;
                HideValue=DemandQtyAvailableHideValue;
                ImplicitType=Decimal }

    { 2   ;2   ;Field     ;
                Name=Needed Quantity;
                ToolTipML=ENU=Specifies the demand quantity that is not available and must be ordered to meet the demand represented on the planning line.;
                ApplicationArea=#Planning;
                SourceExpr="Needed Quantity";
                Visible=TRUE;
                ImplicitType=Decimal }

    { 24  ;2   ;Field     ;
                Name=Replenishment System;
                ToolTipML=ENU=Specifies which kind of order to use to create replenishment orders and order proposals.;
                ApplicationArea=#Planning;
                SourceExpr="Replenishment System";
                HideValue=ReplenishmentSystemHideValue;
                OnValidate=BEGIN
                             ReplenishmentSystemOnAfterVali;
                           END;

                ImplicitType=Option }

    { 26  ;2   ;Field     ;
                Name=Supply From;
                ToolTipML=ENU=Specifies a value, according to the selected replenishment system, before a supply order can be created for the line.;
                ApplicationArea=#Planning;
                SourceExpr="Supply From";
                Editable=SupplyFromEditable;
                ImplicitType=Code20 }

    { 62  ;2   ;Field     ;
                Name=Reserve;
                ToolTipML=ENU=Specifies whether the item on the planning line has a setting of Always in the Reserve field on its item card.;
                ApplicationArea=#Planning;
                SourceExpr=Reserve;
                Editable=ReserveEditable;
                ImplicitType=Boolean }

    { 28  ;2   ;Field     ;
                Name=Quantity;
                CaptionML=ENU=Qty. to Order;
                ToolTipML=ENU=Specifies the quantity that will be ordered on the supply order, such as purchase or assembly, that you can create from the planning line.;
                ApplicationArea=#Planning;
                SourceExpr=Quantity;
                HideValue=QuantityHideValue;
                ImplicitType=Decimal }

    { 12  ;2   ;Field     ;
                Name=Unit of Measure Code;
                ToolTipML=ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                ApplicationArea=#Planning;
                SourceExpr="Unit of Measure Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 32  ;2   ;Field     ;
                Name=Order Date;
                ToolTipML=ENU=Specifies the date when the related order was created.;
                ApplicationArea=#Planning;
                SourceExpr="Order Date";
                ImplicitType=Date }

    { 74  ;2   ;Field     ;
                Name=Starting Date;
                ToolTipML=ENU=Specifies the starting date of the manufacturing process, if the planned supply is a production order.;
                ApplicationArea=#Planning;
                SourceExpr="Starting Date";
                Visible=FALSE;
                ImplicitType=Date }

    { 30  ;2   ;Field     ;
                Name=Due Date;
                ToolTipML=ENU=Specifies the date when you can expect to receive the items.;
                ApplicationArea=#Planning;
                SourceExpr="Due Date";
                ImplicitType=Date }

    { 34  ;2   ;Field     ;
                Name=Unit Cost;
                ToolTipML=ENU=Specifies the unit costs for the planning worksheet line.;
                ApplicationArea=#Planning;
                SourceExpr="Unit Cost";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 53  ;2   ;Field     ;
                Name=Direct Unit Cost;
                ToolTipML=ENU=Specifies the cost of one unit of the selected item or resource.;
                ApplicationArea=#Planning;
                SourceExpr="Direct Unit Cost";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 51  ;2   ;Field     ;
                Name=Currency Code;
                ToolTipML=ENU=Specifies the currency code for the requisition lines.;
                ApplicationArea=#Planning;
                SourceExpr="Currency Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 49  ;2   ;Field     ;
                Name=Purchasing Code;
                ToolTipML=ENU=Specifies which purchaser is assigned to the vendor.;
                ApplicationArea=#Planning;
                SourceExpr="Purchasing Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 20  ;2   ;Field     ;
                Name=Shortcut Dimension 1 Code;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 22  ;2   ;Field     ;
                Name=Shortcut Dimension 2 Code;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 38  ;1   ;Group     ;
                Name=Group38 }

    { 1902204901;2;Group  ;
                Name=Group1902204901;
                GroupType=FixedLayout }

    { 1901313001;3;Group  ;
                Name=Available for Transfer;
                CaptionML=ENU=Available for Transfer }

    { 60  ;4   ;Field     ;
                Name=AvailableForTransfer;
                CaptionML=ENU=Available For Transfer;
                ToolTipML=ENU=Specifies the quantity of the item on the active planning line, that is available on another location than the one defined.;
                ApplicationArea=#Location;
                DecimalPlaces=0:5;
                SourceExpr=QtyOnOtherLocations;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               OrderPlanningMgt.InsertAltSupplyLocation(Rec);
                             END;

                ImplicitType=Decimal }

    { 1901741901;3;Group  ;
                Name=Substitutes Exist;
                CaptionML=ENU=Substitutes Exist }

    { 58  ;4   ;Field     ;
                Name=SubstitionAvailable;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Substitutes Exist;
                ToolTipML=ENU=Specifies if a substitute item exists for the component on the planning line.;
                ApplicationArea=#Planning;
                SourceExpr=SubstitionAvailable;
                Editable=FALSE;
                OnAssistEdit=VAR
                               ReqLine2@1001 : Record "Requisition Line";
                               xReqLine@1002 : Record "Requisition Line";
                               ReqLine3@1003 : Record "Requisition Line";
                             BEGIN
                               ReqLine3 := Rec;
                               OrderPlanningMgt.InsertAltSupplySubstitution(ReqLine3);
                               Rec := ReqLine3;
                               MODIFY;

                               if OrderPlanningMgt.DeleteLine then begin
                                 xReqLine := Rec;
                                 ReqLine2.SETCURRENTKEY("User ID","Demand Type","Demand Subtype","Demand Order No.");
                                 ReqLine2.SETRANGE("User ID",USERID);
                                 ReqLine2.SETRANGE("Demand Type","Demand Type");
                                 ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
                                 ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
                                 ReqLine2.SETRANGE(Level,Level,Level + 1);
                                 ReqLine2.SETFILTER("Line No.",'<>%1',"Line No.");
                                 if not ReqLine2.FINDFIRST then begin // No other children
                                   ReqLine2.SETRANGE("Line No.");
                                   ReqLine2.SETRANGE(Level,0);
                                   if ReqLine2.FINDFIRST then begin // Find and delete parent
                                     Rec := ReqLine2;
                                     DELETE;
                                   end;
                                 end;

                                 Rec := xReqLine;
                                 DELETE;
                                 CurrPage.UPDATE(false);
                               end else
                                 CurrPage.UPDATE(true);
                             END;

                ImplicitType=Boolean }

    { 1901741801;3;Group  ;
                Name=Quantity Available;
                CaptionML=ENU=Quantity Available }

    { 68  ;4   ;Field     ;
                Name=QuantityAvailable;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Quantity Available;
                ToolTipML=ENU=Specifies the total availability of the item on the active planning line, irrespective of quantities calculated for the line.;
                ApplicationArea=#Planning;
                DecimalPlaces=0:5;
                SourceExpr=QtyATP;
                Editable=FALSE;
                ImplicitType=Decimal }

    { 1901312901;3;Group  ;
                Name=Earliest Date Available;
                CaptionML=ENU=Earliest Date Available }

    { 70  ;4   ;Field     ;
                Name=EarliestShptDateAvailable;
                Lookup=false;
                DrillDown=false;
                CaptionML=ENU=Earliest Date Available;
                ToolTipML=ENU=Specifies the arrival date of an inbound supply order that can cover the needed quantity on a date later than the demand date.;
                ApplicationArea=#Planning;
                SourceExpr=EarliestShptDateAvailable;
                Editable=FALSE;
                ImplicitType=Date }

  }
  CODE
  {
    VAR
      ReqLine@1001 : Record "Requisition Line";
      SalesHeader@1000 : Record "Sales Header";
      ProdOrder@1006 : Record "Production Order";
      AsmHeader@1013 : Record "Assembly Header";
      ServHeader@1004 : Record "Service Header";
      Job@1010 : Record Job;
      MfgUserTempl@1015 : Record "Manufacturing User Template";
      OrderPlanningMgt@1002 : Codeunit "Order Planning Mgt.";
      ItemAvailFormsMgt@1003 : Codeunit "Item Availability Forms Mgt";
      DemandOrderFilter@1007 : '"All Demands","Production Demand","Sales Demand","Service Demand","Job Demand","Assembly Demand"';
      Text001@1008 : TextConst 'ENU=Sales';
      Text002@1009 : TextConst 'ENU=Production';
      Text003@1011 : TextConst 'ENU=Service';
      Text004@1012 : TextConst 'ENU=Jobs';
      StatusHideValue@19077886 : Boolean INDATASET;
      StatusText@19037117 : Text[1024] INDATASET;
      DemandTypeHideValue@19039011 : Boolean INDATASET;
      DemandTypeEmphasize@19074322 : Boolean INDATASET;
      DemandTypeText@19010028 : Text[1024] INDATASET;
      DemandSubtypeText@19017088 : Text[1024] INDATASET;
      DemandOrderNoHideValue@19045269 : Boolean INDATASET;
      DemandOrderNoEmphasize@19029891 : Boolean INDATASET;
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      DescriptionIndent@19057867 : Integer INDATASET;
      DemandQuantityHideValue@19062899 : Boolean INDATASET;
      DemandQtyAvailableHideValue@19060213 : Boolean INDATASET;
      ReplenishmentSystemHideValue@19034362 : Boolean INDATASET;
      QuantityHideValue@19060207 : Boolean INDATASET;
      SupplyFromEditable@19071852 : Boolean INDATASET;
      ReserveEditable@1016 : Boolean INDATASET;
      DemandOrderFilterCtrlEnable@19066621 : Boolean INDATASET;
      Text005@1014 : TextConst 'ENU=Assembly';
      QtyOnOtherLocations@1005 : Decimal;
      SubstitionAvailable@1017 : Boolean;
      QtyATP@1018 : Decimal;
      EarliestShptDateAvailable@1019 : Date;

    [External]
    PROCEDURE SetSalesOrder@2(SalesHeader2@1001 : Record "Sales Header");
    BEGIN
      SalesHeader := SalesHeader2;
      DemandOrderFilter := DemandOrderFilter::"Sales Demand";
      DemandOrderFilterCtrlEnable := false;
    END;

    [External]
    PROCEDURE SetProdOrder@3(ProdOrder2@1000 : Record "Production Order");
    BEGIN
      ProdOrder := ProdOrder2;
      DemandOrderFilter := DemandOrderFilter::"Production Demand";
      DemandOrderFilterCtrlEnable := false;
    END;

    [External]
    PROCEDURE SetAsmOrder@23(AsmHeader2@1001 : Record "Assembly Header");
    BEGIN
      AsmHeader := AsmHeader2;
      DemandOrderFilter := DemandOrderFilter::"Assembly Demand";
      DemandOrderFilterCtrlEnable := false;
    END;

    [External]
    PROCEDURE SetServOrder@19(ServHeader2@1001 : Record "Service Header");
    BEGIN
      ServHeader := ServHeader2;
      DemandOrderFilter := DemandOrderFilter::"Service Demand";
      DemandOrderFilterCtrlEnable := false;
    END;

    [External]
    PROCEDURE SetJobOrder@21(Job2@1001 : Record Job);
    BEGIN
      Job := Job2;
      DemandOrderFilter := DemandOrderFilter::"Job Demand";
      DemandOrderFilterCtrlEnable := false;
    END;

    LOCAL PROCEDURE InitTempRec@12();
    VAR
      ReqLine@1000 : Record "Requisition Line";
      ReqLineWithCursor@1001 : Record "Requisition Line";
    BEGIN
      DELETEALL;

      ReqLine.RESET;
      ReqLine.COPYFILTERS(Rec);
      ReqLine.SETRANGE("User ID",USERID);
      ReqLine.SETRANGE("Worksheet Template Name",'');
      if ReqLine.FINDSET then
        repeat
          Rec := ReqLine;
          INSERT;
          if ReqLine.Level = 0 then
            FindReqLineForCursor(ReqLineWithCursor,ReqLine);
        until ReqLine.NEXT = 0;

      if FINDFIRST then
        if ReqLineWithCursor."Line No." > 0 then
          Rec := ReqLineWithCursor;

      SetRecFilters;
    END;

    LOCAL PROCEDURE FindReqLineForCursor@22(VAR ReqLineWithCursor@1000 : Record "Requisition Line";ActualReqLine@1001 : Record "Requisition Line");
    BEGIN
      if ProdOrder."No." = '' then
        exit;

      if (ActualReqLine."Demand Type" = DATABASE::"Prod. Order Component") and
         (ActualReqLine."Demand Subtype" = ProdOrder.Status) and
         (ActualReqLine."Demand Order No." = ProdOrder."No.")
      then
        ReqLineWithCursor := ActualReqLine;
    END;

    LOCAL PROCEDURE RefreshTempTable@14();
    VAR
      TempReqLine2@1001 : Record "Requisition Line";
      ReqLine@1000 : Record "Requisition Line";
    BEGIN
      TempReqLine2.COPY(Rec);

      RESET;
      if FIND('-') then
        repeat
          ReqLine := Rec;
          if not ReqLine.FIND or
             ((Level = 0) and ((ReqLine.NEXT = 0) or (ReqLine.Level = 0)))
          then begin
            if Level = 0 then begin
              ReqLine := Rec;
              ReqLine.FIND;
              ReqLine.DELETE(true);
            end;
            DELETE
          end;
        until NEXT = 0;

      COPY(TempReqLine2);
    END;

    [External]
    PROCEDURE SetRecFilters@5();
    BEGIN
      RESET;
      FILTERGROUP(2);
      SETRANGE("User ID",USERID);
      SETRANGE("Worksheet Template Name",'');

      case DemandOrderFilter of
        DemandOrderFilter::"All Demands":
          begin
            SETRANGE("Demand Type");
            SETCURRENTKEY("User ID","Worksheet Template Name","Journal Batch Name","Line No.");
          end;
        DemandOrderFilter::"Sales Demand":
          begin
            SETRANGE("Demand Type",DATABASE::"Sales Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          end;
        DemandOrderFilter::"Production Demand":
          begin
            SETRANGE("Demand Type",DATABASE::"Prod. Order Component");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          end;
        DemandOrderFilter::"Assembly Demand":
          begin
            SETRANGE("Demand Type",DATABASE::"Assembly Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          end;
        DemandOrderFilter::"Service Demand":
          begin
            SETRANGE("Demand Type",DATABASE::"Service Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          end;
        DemandOrderFilter::"Job Demand":
          begin
            SETRANGE("Demand Type",DATABASE::"Job Planning Line");
            SETCURRENTKEY("User ID","Demand Type","Worksheet Template Name","Journal Batch Name","Line No.");
          end;
      end;
      FILTERGROUP(0);

      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ShowDemandOrder@15();
    VAR
      SalesHeader@1001 : Record "Sales Header";
      ProdOrder@1000 : Record "Production Order";
      ServHeader@1002 : Record "Service Header";
      Job@1003 : Record Job;
      AsmHeader@1004 : Record "Assembly Header";
    BEGIN
      case "Demand Type" of
        DATABASE::"Sales Line":
          begin
            SalesHeader.GET("Demand Subtype","Demand Order No.");
            case SalesHeader."Document Type" of
              SalesHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Sales Order",SalesHeader);
              SalesHeader."Document Type"::"Return Order":
                PAGE.RUN(PAGE::"Sales Return Order",SalesHeader);
            end;
          end;
        DATABASE::"Prod. Order Component":
          begin
            ProdOrder.GET("Demand Subtype","Demand Order No.");
            case ProdOrder.Status of
              ProdOrder.Status::Planned:
                PAGE.RUN(PAGE::"Planned Production Order",ProdOrder);
              ProdOrder.Status::"Firm Planned":
                PAGE.RUN(PAGE::"Firm Planned Prod. Order",ProdOrder);
              ProdOrder.Status::Released:
                PAGE.RUN(PAGE::"Released Production Order",ProdOrder);
            end;
          end;
        DATABASE::"Assembly Line":
          begin
            AsmHeader.GET("Demand Subtype","Demand Order No.");
            case AsmHeader."Document Type" of
              AsmHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Assembly Order",AsmHeader);
            end;
          end;
        DATABASE::"Service Line":
          begin
            ServHeader.GET("Demand Subtype","Demand Order No.");
            case ServHeader."Document Type" of
              ServHeader."Document Type"::Order:
                PAGE.RUN(PAGE::"Service Order",ServHeader);
            end;
          end;
        DATABASE::"Job Planning Line":
          begin
            Job.GET("Demand Order No.");
            case Job.Status of
              Job.Status::Open:
                PAGE.RUN(PAGE::"Job Card",Job);
            end;
          end;
      end;
    END;

    LOCAL PROCEDURE CalcItemAvail@16();
    BEGIN
      QtyOnOtherLocations := CalcQtyOnOtherLocations;
      SubstitionAvailable := CalcSubstitionAvailable;
      QtyATP := CalcQtyATP;
      EarliestShptDateAvailable := CalcEarliestShptDateAvailable;
    END;

    LOCAL PROCEDURE CalcQtyOnOtherLocations@6() : Decimal;
    VAR
      QtyOnOtherLocation@1000 : Decimal;
    BEGIN
      if "No." = '' then
        exit;

      QtyOnOtherLocation := OrderPlanningMgt.AvailQtyOnOtherLocations(Rec); // Base Unit
      if "Qty. per Unit of Measure" = 0 then
        "Qty. per Unit of Measure" := 1;
      QtyOnOtherLocation := ROUND(QtyOnOtherLocation / "Qty. per Unit of Measure",0.00001);

      exit(QtyOnOtherLocation);
    END;

    LOCAL PROCEDURE CalcQtyATP@8() : Decimal;
    VAR
      QtyATP@1000 : Decimal;
    BEGIN
      if "No." = '' then
        exit;

      QtyATP := OrderPlanningMgt.CalcATPQty("No.","Variant Code","Location Code","Demand Date"); // Base Unit
      if "Qty. per Unit of Measure" = 0 then
        "Qty. per Unit of Measure" := 1;
      QtyATP := ROUND(QtyATP / "Qty. per Unit of Measure",0.00001);

      exit(QtyATP);
    END;

    LOCAL PROCEDURE CalcEarliestShptDateAvailable@9() : Date;
    VAR
      Item@1000 : Record Item;
    BEGIN
      if "No." = '' then
        exit;

      Item.GET("No.");
      if Item."Order Tracking Policy" = Item."Order Tracking Policy"::"Tracking & Action Msg." then
        exit;

      exit(OrderPlanningMgt.CalcATPEarliestDate("No.","Variant Code","Location Code","Demand Date","Quantity (Base)"));
    END;

    LOCAL PROCEDURE CalcSubstitionAvailable@11() : Boolean;
    BEGIN
      if "No." = '' then
        exit;

      exit(OrderPlanningMgt.SubstitutionPossible(Rec));
    END;

    LOCAL PROCEDURE CalcPlan@13();
    VAR
      ReqLine@1001 : Record "Requisition Line";
    BEGIN
      RESET;
      DELETEALL;

      CLEAR(OrderPlanningMgt);
      case DemandOrderFilter of
        DemandOrderFilter::"Sales Demand":
          OrderPlanningMgt.SetSalesOrder;
        DemandOrderFilter::"Assembly Demand":
          OrderPlanningMgt.SetAsmOrder;
        DemandOrderFilter::"Production Demand":
          OrderPlanningMgt.SetProdOrder;
        DemandOrderFilter::"Service Demand":
          OrderPlanningMgt.SetServOrder;
        DemandOrderFilter::"Job Demand":
          OrderPlanningMgt.SetJobOrder;
      end;
      OrderPlanningMgt.GetOrdersToPlan(ReqLine);

      InitTempRec;
    END;

    LOCAL PROCEDURE UpdateSupplyFrom@17();
    BEGIN
      SupplyFromEditable := not ("Replenishment System" in ["Replenishment System"::"Prod. Order",
                                                            "Replenishment System"::Assembly]);
    END;

    LOCAL PROCEDURE DemandOrderFilterOnAfterValida@19021326();
    BEGIN
      CurrPage.SAVERECORD;
      SetRecFilters;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnAfterVali@19026301();
    BEGIN
      UpdateSupplyFrom;
    END;

    LOCAL PROCEDURE StatusTextOnFormat@19078586(VAR Text@19010365 : Text[1024]);
    BEGIN
      if "Demand Line No." = 0 then
        case "Demand Type" of
          DATABASE::"Prod. Order Component":
            begin
              ProdOrder.Status := Status;
              Text := FORMAT(ProdOrder.Status);
            end;
          DATABASE::"Sales Line":
            begin
              SalesHeader.Status := Status;
              Text := FORMAT(SalesHeader.Status);
            end;
          DATABASE::"Service Line":
            begin
              ServHeader.INIT;
              ServHeader.Status := Status;
              Text := FORMAT(ServHeader.Status);
            end;
          DATABASE::"Job Planning Line":
            begin
              Job.INIT;
              Job.Status := Status;
              Text := FORMAT(Job.Status);
            end;
          DATABASE::"Assembly Line":
            begin
              AsmHeader.Status := Status;
              Text := FORMAT(AsmHeader.Status);
            end;
        end;

      StatusHideValue := "Demand Line No." <> 0;
    END;

    LOCAL PROCEDURE DemandTypeTextOnFormat@19059433(VAR Text@19044954 : Text[1024]);
    BEGIN
      if "Demand Line No." = 0 then
        case "Demand Type" of
          DATABASE::"Sales Line":
            Text := Text001;
          DATABASE::"Prod. Order Component":
            Text := Text002;
          DATABASE::"Service Line":
            Text := Text003;
          DATABASE::"Job Planning Line":
            Text := Text004;
          DATABASE::"Assembly Line":
            Text := Text005;
        end;

      DemandTypeHideValue := "Demand Line No." <> 0;
      DemandTypeEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DemandSubtypeTextOnFormat@19071287(VAR Text@19000137 : Text[1024]);
    BEGIN
      case "Demand Type" of
        DATABASE::"Prod. Order Component":
          begin
            ProdOrder.Status := Status;
            Text := FORMAT(ProdOrder.Status);
          end;
        DATABASE::"Sales Line":
          begin
            SalesHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(SalesHeader."Document Type");
          end;
        DATABASE::"Service Line":
          begin
            ServHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(ServHeader."Document Type");
          end;
        DATABASE::"Job Planning Line":
          begin
            Job.Status := Status;
            Text := FORMAT(Job.Status);
          end;
        DATABASE::"Assembly Line":
          begin
            AsmHeader."Document Type" := "Demand Subtype";
            Text := FORMAT(AsmHeader."Document Type");
          end;
      end
    END;

    LOCAL PROCEDURE DemandOrderNoOnFormat@19021785();
    BEGIN
      DemandOrderNoHideValue := "Demand Line No." <> 0;
      DemandOrderNoEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DescriptionOnFormat@19023855();
    BEGIN
      DescriptionIndent := Level + "Planning Level";
      DescriptionEmphasize := Level = 0;
    END;

    LOCAL PROCEDURE DemandQuantityOnFormat@19031262();
    BEGIN
      DemandQuantityHideValue := Level = 0;
    END;

    LOCAL PROCEDURE DemandQtyAvailableOnFormat@19015974();
    BEGIN
      DemandQtyAvailableHideValue := Level = 0;
    END;

    LOCAL PROCEDURE ReplenishmentSystemOnFormat@19008444();
    BEGIN
      ReplenishmentSystemHideValue := "Replenishment System" = "Replenishment System"::" ";
    END;

    LOCAL PROCEDURE QuantityOnFormat@19071269();
    BEGIN
      QuantityHideValue := Level = 0;
    END;

    LOCAL PROCEDURE ReserveOnFormat@26();
    BEGIN
      ReserveEditable := Level <> 0;
    END;

    BEGIN
    END.
  }
}

