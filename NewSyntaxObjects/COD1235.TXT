OBJECT Codeunit 1235 XML Buffer Writer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GetJsonStructure@1009 : Codeunit "Get Json Structure";
      XmlReader@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReader";
      XmlReaderSettings@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlReaderSettings";
      XmlUrlResolver@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlUrlResolver";
      XmlDtdProcessing@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.DtdProcessing";
      XmlNodeType@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeType";
      NetCredentialCache@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.CredentialCache";
      StringReader@1008 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringReader";
      OnlyGenerateStructure@1007 : Boolean;
      UnsupportedInputTypeErr@1005 : TextConst 'ENU=The supplied variable type is not supported.';

    [Internal]
    PROCEDURE InitializeXMLBufferFrom@15(VAR XMLBuffer@1002 : Record "XML Buffer";StreamOrServerFile@1001 : Variant);
    BEGIN
      OnlyGenerateStructure := false;
      InitializeXMLReaderSettings;
      CreateXMLReaderFrom(StreamOrServerFile);
      ReadXmlReader;
      ParseXML(XMLBuffer);
    END;

    [Internal]
    PROCEDURE InitializeXMLBufferFromText@9(VAR XMLBuffer@1002 : Record "XML Buffer";XmlText@1001 : Text);
    BEGIN
      InitializeXMLReaderSettings;
      CreateXmlReaderFromXmlText(XmlText);
      ReadXmlReader;
      ParseXML(XMLBuffer);
    END;

    [Internal]
    PROCEDURE GenerateStructureFromPath@1(VAR XMLBuffer@1002 : Record "XML Buffer";Path@1000 : Text);
    BEGIN
      OnlyGenerateStructure := true;
      InitializeXMLReaderSettings;
      CreateXMLReaderFromPath(Path);
      if ReadXmlReader then
        ParseXML(XMLBuffer)
      else
        GetJsonStructure.GenerateStructure(Path,XMLBuffer);
    END;

    [Internal]
    PROCEDURE GenerateStructure@3(VAR XMLBuffer@1002 : Record "XML Buffer";OutStream@1000 : OutStream);
    BEGIN
      InitializeXMLReaderSettings;
      CreateXMLReaderFromOutStream(OutStream);
      ReadXmlReader;
      ParseXML(XMLBuffer);
    END;

    LOCAL PROCEDURE CreateXMLReaderFrom@7(StreamOrServerFile@1000 : Variant);
    BEGIN
      case true of
        StreamOrServerFile.ISTEXT:
          CreateXMLReaderFromPath(StreamOrServerFile);
        StreamOrServerFile.ISINSTREAM:
          CreateXMLReaderFromInStream(StreamOrServerFile);
        StreamOrServerFile.ISOUTSTREAM:
          CreateXMLReaderFromOutStream(StreamOrServerFile);
        else
          ERROR(UnsupportedInputTypeErr);
      end;
    END;

    LOCAL PROCEDURE CreateXMLReaderFromPath@4(Path@1000 : Text);
    BEGIN
      XmlReader := XmlReader.Create(Path,XmlReaderSettings);
    END;

    LOCAL PROCEDURE CreateXMLReaderFromInStream@6(InStream@1000 : InStream);
    BEGIN
      XmlReader := XmlReader.Create(InStream,XmlReaderSettings);
    END;

    LOCAL PROCEDURE CreateXMLReaderFromOutStream@24(OutStream@1000 : OutStream);
    BEGIN
      XmlReader := XmlReader.Create(OutStream,XmlReaderSettings);
    END;

    LOCAL PROCEDURE CreateXmlReaderFromXmlText@12(XmlText@1000 : Text);
    BEGIN
      StringReader := StringReader.StringReader(XmlText);
      XmlReader := XmlReader.Create(StringReader);
    END;

    LOCAL PROCEDURE InitializeXMLReaderSettings@5();
    BEGIN
      XmlUrlResolver := XmlUrlResolver.XmlUrlResolver;
      XmlUrlResolver.Credentials := NetCredentialCache.DefaultNetworkCredentials;

      XmlReaderSettings := XmlReaderSettings.XmlReaderSettings;
      XmlReaderSettings.DtdProcessing := XmlDtdProcessing.Ignore;
      XmlReaderSettings.XmlResolver := XmlUrlResolver;
    END;

    LOCAL PROCEDURE ParseXML@14(VAR XMLBuffer@1001 : Record "XML Buffer");
    VAR
      ParentXMLBuffer@1000 : Record "XML Buffer";
    BEGIN
      if XMLBuffer.FINDLAST then ;

      ParentXMLBuffer.INIT;
      ParseXMLIteratively(XMLBuffer,ParentXMLBuffer);

      XmlReader.Close;
      XMLBuffer.RESET;
      XMLBuffer.SETRANGE("Import ID",XMLBuffer."Import ID");
      XMLBuffer.FINDFIRST;
    END;

    LOCAL PROCEDURE ParseXMLIteratively@13(VAR XMLBuffer@1001 : Record "XML Buffer";ParentXMLBuffer@1000 : Record "XML Buffer");
    VAR
      LastInsertedXMLBufferElement@1003 : Record "XML Buffer";
      ElementNumber@1002 : Integer;
      Depth@1004 : Integer;
    BEGIN
      Depth := XmlReader.Depth;
      repeat
        if IsParentElement(Depth) then
          exit;
        ParseCurrentXmlNode(XMLBuffer,ParentXMLBuffer,LastInsertedXMLBufferElement,ElementNumber,Depth);
      until not XmlReader.Read;
    END;

    LOCAL PROCEDURE ParseCurrentXmlNode@16(VAR XMLBuffer@1001 : Record "XML Buffer";ParentXMLBuffer@1000 : Record "XML Buffer";VAR LastInsertedXMLBufferElement@1003 : Record "XML Buffer";VAR ElementNumber@1002 : Integer;Depth@1004 : Integer);
    BEGIN
      if IsParentElement(Depth) then
        exit;
      if IsChildElement(Depth) then begin
        ParseXMLIteratively(XMLBuffer,LastInsertedXMLBufferElement);
        ParseCurrentXmlNode(XMLBuffer,ParentXMLBuffer,LastInsertedXMLBufferElement,ElementNumber,Depth);
      end else
        ReadAndInsertXmlElement(XMLBuffer,ParentXMLBuffer,ElementNumber,LastInsertedXMLBufferElement);
    END;

    LOCAL PROCEDURE IsChildElement@10(CurrentDepth@1000 : Integer) : Boolean;
    BEGIN
      exit(XmlReader.Depth > CurrentDepth)
    END;

    LOCAL PROCEDURE IsParentElement@20(CurrentDepth@1000 : Integer) : Boolean;
    BEGIN
      exit(XmlReader.Depth < CurrentDepth)
    END;

    LOCAL PROCEDURE ReadAndInsertXmlElement@19(VAR XMLBuffer@1001 : Record "XML Buffer";ParentXMLBuffer@1000 : Record "XML Buffer";VAR ElementNumber@1002 : Integer;VAR InsertedXMLBufferElement@1003 : Record "XML Buffer");
    VAR
      TempXMLBuffer@1004 : TEMPORARY Record "XML Buffer";
    BEGIN
      XmlNodeType := XmlReader.NodeType;
      if XmlNodeType.Equals(XmlNodeType.Element) then begin
        ElementNumber += 1;
        ProcessXmlElement(XMLBuffer,ParentXMLBuffer,ElementNumber,InsertedXMLBufferElement)
      end else
        if XmlNodeType.Equals(XmlNodeType.Text) then begin
          if XMLBuffer.ISTEMPORARY then begin
            TempXMLBuffer.COPY(XMLBuffer,true);
            TempXMLBuffer := ParentXMLBuffer;
            AddXmlTextNodeIntoParentXMLBuffer(TempXMLBuffer);
          end else
            AddXmlTextNodeIntoParentXMLBuffer(ParentXMLBuffer);
        end else
          if XmlNodeType.Equals(XmlNodeType.XmlDeclaration) or
             XmlNodeType.Equals(XmlNodeType.ProcessingInstruction) or
             XmlNodeType.Equals(XmlNodeType.Comment)
          then
            ;
    END;

    LOCAL PROCEDURE ProcessXmlElement@8(VAR XMLBuffer@1003 : Record "XML Buffer";ParentXMLBuffer@1000 : Record "XML Buffer";ElementNumber@1001 : Integer;VAR InsertedXMLBufferElement@1002 : Record "XML Buffer");
    VAR
      AttributeNumber@1004 : Integer;
    BEGIN
      InsertXmlElement(XMLBuffer,ParentXMLBuffer,ElementNumber);
      InsertedXMLBufferElement := XMLBuffer;

      if XmlReader.MoveToFirstAttribute then
        repeat
          AttributeNumber += 1;
          InsertXmlAttribute(XMLBuffer,InsertedXMLBufferElement,AttributeNumber);
        until not XmlReader.MoveToNextAttribute;
    END;

    LOCAL PROCEDURE InsertXmlElement@17(VAR XMLBuffer@1002 : Record "XML Buffer";ParentXMLBuffer@1001 : Record "XML Buffer";ElementNumber@1000 : Integer);
    BEGIN
      with XMLBuffer do begin
        if OnlyGenerateStructure then begin
          RESET;
          SETRANGE("Parent Entry No.",ParentXMLBuffer."Entry No.");
          SETRANGE(Type,Type::Element);
          SETRANGE(Name,XmlReader.Name);
          if FINDFIRST then
            exit;
        end;

        InsertElement(XMLBuffer,ParentXMLBuffer,ElementNumber,XmlReader.Depth + 1,XmlReader.Name,'');
      end;
    END;

    LOCAL PROCEDURE InsertXmlAttribute@18(VAR XMLBuffer@1001 : Record "XML Buffer";ParentXMLBuffer@1000 : Record "XML Buffer";AttributeNumber@1002 : Integer);
    BEGIN
      with XMLBuffer do begin
        if OnlyGenerateStructure then begin
          RESET;
          SETRANGE("Parent Entry No.",ParentXMLBuffer."Entry No.");
          SETRANGE(Type,Type::Attribute);
          SETRANGE(Name,XmlReader.Name);
          if FINDFIRST then
            exit;
        end;

        InsertAttribute(XMLBuffer,ParentXMLBuffer,AttributeNumber,XmlReader.Depth + 1,XmlReader.Name,XmlReader.Value);
      end;
    END;

    LOCAL PROCEDURE GetType@2(Value@1000 : Text) : Integer;
    VAR
      DummyXMLBuffer@1001 : Record "XML Buffer";
      Decimal@1003 : Decimal;
    BEGIN
      if Value = '' then
        exit(DummyXMLBuffer."Data Type"::Text);

      if EVALUATE(Decimal,Value) then
        exit(DummyXMLBuffer."Data Type"::Decimal);

      exit(DummyXMLBuffer."Data Type"::Text)
    END;

    LOCAL PROCEDURE AddXmlTextNodeIntoParentXMLBuffer@11(VAR XMLBuffer@1000 : Record "XML Buffer");
    BEGIN
      if XMLBuffer.Value <> '' then
        exit;

      XMLBuffer.VALIDATE(Value,COPYSTR(XmlReader.Value,1,MAXSTRLEN(XMLBuffer.Value)));
      XMLBuffer.VALIDATE("Data Type",GetType(XMLBuffer.Value));
      XMLBuffer.MODIFY;
    END;

    [External]
    PROCEDURE InsertAttribute@22(VAR XMLBuffer@1000 : Record "XML Buffer";ParentXMLBuffer@1005 : Record "XML Buffer";NodeNumber@1001 : Integer;NodeDepth@1004 : Integer;AttributeName@1007 : Text[250];AttributeValue@1008 : Text[250]);
    BEGIN
      with XMLBuffer do begin
        RESET;
        if FINDLAST then;
        INIT;
        "Entry No." += 1;
        "Parent Entry No." := ParentXMLBuffer."Entry No.";
        Path := COPYSTR(ParentXMLBuffer.Path + '/@' + AttributeName,1,MAXSTRLEN(Path));
        "Node Number" := NodeNumber;
        Depth := NodeDepth;
        Name := AttributeName;
        Value := AttributeValue;
        "Data Type" := GetType(Value);
        Type := Type::Attribute;
        "Import ID" := ParentXMLBuffer."Import ID";

        INSERT;
      end;
    END;

    [External]
    PROCEDURE InsertElement@21(VAR XMLBuffer@1010 : Record "XML Buffer";ParentXMLBuffer@1009 : Record "XML Buffer";ElementNumber@1003 : Integer;ElementDepth@1006 : Integer;ElementNameAndNamespace@1008 : Text[250];ElementValue@1007 : Text[250]);
    VAR
      ElementName@1000 : Text[250];
      ElementNamespace@1005 : Text[250];
    BEGIN
      SplitXmlElementName(ElementNameAndNamespace,ElementName,ElementNamespace);

      if ISNULLGUID(ParentXMLBuffer."Import ID") then
        ParentXMLBuffer."Import ID" := CREATEGUID;

      with XMLBuffer do begin
        RESET;
        if FINDLAST then ;
        INIT;
        "Entry No." += 1;
        "Parent Entry No." := ParentXMLBuffer."Entry No.";
        Path := COPYSTR(STRSUBSTNO('%1/%2',ParentXMLBuffer.Path,ElementNameAndNamespace),1,MAXSTRLEN(Path));
        "Node Number" := ElementNumber;
        Depth := ElementDepth;
        Name := ElementName;
        Value := ElementValue;
        Type := Type::Element;
        Namespace := ElementNamespace;
        "Import ID" := ParentXMLBuffer."Import ID";

        INSERT;
      end;
    END;

    LOCAL PROCEDURE SplitXmlElementName@46(RawXmlElementName@1000 : Text[250];VAR ElementName@1001 : Text[250];VAR ElementNamespace@1002 : Text[250]);
    VAR
      ColonPosition@1003 : Integer;
    BEGIN
      ColonPosition := STRPOS(RawXmlElementName,':');
      if ColonPosition <> 0 then begin
        ElementNamespace := COPYSTR(RawXmlElementName,1,ColonPosition - 1);
        ElementName := COPYSTR(RawXmlElementName,ColonPosition + 1);
      end else begin
        ElementName := RawXmlElementName;
        ElementNamespace := '';
      end;
    END;

    [TryFunction]
    LOCAL PROCEDURE ReadXmlReader@23();
    BEGIN
      XmlReader.Read
    END;

    BEGIN
    END.
  }
}

