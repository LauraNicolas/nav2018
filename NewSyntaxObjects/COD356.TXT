OBJECT Codeunit 356 DateComprMgt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountingPeriod@1000 : Record "Accounting Period";
      FiscYearDate@1001 : ARRAY [2] OF Date;
      AccountingPeriodDate@1002 : ARRAY [2] OF Date;
      Date1@1003 : Date;
      Date2@1004 : Date;

    [External]
    PROCEDURE GetDateFilter@1(Date@1000 : Date;DateComprReg@1001 : Record "Date Compr. Register";CheckFiscYearEnd@1002 : Boolean) : Text[250];
    BEGIN
      if (Date = 0D) or (Date = CLOSINGDATE(Date)) then
        exit(FORMAT(Date));

      if (Date < FiscYearDate[1]) or (Date > FiscYearDate[2]) then begin
        AccountingPeriod.SETRANGE("New Fiscal Year",true);
        AccountingPeriod."Starting Date" := Date;
        AccountingPeriod.FIND('=<');
        FiscYearDate[1] := AccountingPeriod."Starting Date";
        AccountingPeriod."Starting Date" := Date;
        AccountingPeriod.FIND('>');
        FiscYearDate[2] := AccountingPeriod."Starting Date" - 1;
        AccountingPeriod.SETRANGE("New Fiscal Year");
        if CheckFiscYearEnd then
          AccountingPeriod.TESTFIELD("Date Locked",true);
      end;

      if DateComprReg."Period Length" = DateComprReg."Period Length"::Day then
        exit(FORMAT(Date));

      Date1 := DateComprReg."Starting Date";
      Date2 := DateComprReg."Ending Date";
      Maximize(Date1,FiscYearDate[1]);
      Minimize(Date2,FiscYearDate[2]);

      Maximize(Date1,CALCDATE('<CY+1D-1Y>',Date));
      Minimize(Date2,CALCDATE('<CY>',Date));
      if DateComprReg."Period Length" = DateComprReg."Period Length"::Year then
        exit(STRSUBSTNO('%1..%2',Date1,Date2));

      if (Date < AccountingPeriodDate[1]) or (Date > AccountingPeriodDate[2]) then begin
        AccountingPeriod."Starting Date" := Date;
        AccountingPeriod.FIND('=<');
        AccountingPeriodDate[1] := AccountingPeriod."Starting Date";
        AccountingPeriod.NEXT;
        AccountingPeriodDate[2] := AccountingPeriod."Starting Date" - 1;
      end;

      if DateComprReg."Period Length" = DateComprReg."Period Length"::Period then begin
        Maximize(Date1,AccountingPeriodDate[1]);
        Minimize(Date2,AccountingPeriodDate[2]);
        exit(STRSUBSTNO('%1..%2',Date1,Date2));
      end;

      Maximize(Date1,CALCDATE('<CQ+1D-1Q>',Date));
      Minimize(Date2,CALCDATE('<CQ>',Date));
      if DateComprReg."Period Length" = DateComprReg."Period Length"::Quarter then
        exit(STRSUBSTNO('%1..%2',Date1,Date2));

      Maximize(Date1,CALCDATE('<CM+1D-1M>',Date));
      Minimize(Date2,CALCDATE('<CM>',Date));
      if DateComprReg."Period Length" = DateComprReg."Period Length"::Month then
        exit(STRSUBSTNO('%1..%2',Date1,Date2));

      Maximize(Date1,CALCDATE('<CW+1D-1W>',Date));
      Minimize(Date2,CALCDATE('<CW>',Date));
      exit(STRSUBSTNO('%1..%2',Date1,Date2));
    END;

    LOCAL PROCEDURE Maximize@2(VAR Date@1000 : Date;NewDate@1001 : Date);
    BEGIN
      if Date < NewDate then
        Date := NewDate;
    END;

    LOCAL PROCEDURE Minimize@3(VAR Date@1000 : Date;NewDate@1001 : Date);
    BEGIN
      if Date > NewDate then
        Date := NewDate;
    END;

    BEGIN
    END.
  }
}

