OBJECT Table 5330 CRM Connection Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Service Password"=rimd;
    CaptionML=ENU=CRM Connection Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code20        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Server Address      ;Text250       ;OnValidate=BEGIN
                                                                CRMIntegrationManagement.CheckModifyCRMConnectionURL("Server Address");

                                                                if STRPOS("Server Address",'.dynamics.com') > 0 then
                                                                  "Authentication Type" := "Authentication Type"::Office365
                                                                else
                                                                  "Authentication Type" := "Authentication Type"::AD;
                                                                if "User Name" <> '' then
                                                                  UpdateConnectionString;
                                                              END;

                                                   CaptionML=ENU=Dynamics 365 for Sales URL }
    { 3   ;   ;User Name           ;Text250       ;OnValidate=BEGIN
                                                                "User Name" := DELCHR("User Name",'<>');
                                                                CheckUserName;
                                                                UpdateDomainName;
                                                                UpdateConnectionString;
                                                              END;

                                                   CaptionML=ENU=User Name }
    { 4   ;   ;User Password Key   ;GUID          ;CaptionML=ENU=User Password Key }
    { 5   ;   ;Last Update Invoice Entry No.;Integer;
                                                   CaptionML=ENU=Last Update Invoice Entry No.;
                                                   Editable=false }
    { 60  ;   ;Is Enabled          ;Boolean       ;OnValidate=BEGIN
                                                                EnableCRMConnection;
                                                                UpdateIsEnabledState;
                                                                RefreshDataFromCRM;
                                                              END;

                                                   CaptionML=ENU=Is Enabled }
    { 61  ;   ;Is User Mapping Required;Boolean   ;OnValidate=BEGIN
                                                                UpdateAllConnectionRegistrations;
                                                                UpdateIsEnabledState;
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV Users Must Map to Dynamics 365 for Sales Users }
    { 62  ;   ;Is User Mapped To CRM User;Boolean ;CaptionML=ENU=Is User Mapped To CRM User }
    { 63  ;   ;CRM Version         ;Text30        ;CaptionML=ENU=CRM Version }
    { 66  ;   ;Is S.Order Integration Enabled;Boolean;
                                                   OnValidate=BEGIN
                                                                if "Is S.Order Integration Enabled" then
                                                                  if CONFIRM(STRSUBSTNO(SetCRMSOPEnableQst,PRODUCTNAME.SHORT)) then
                                                                    SetCRMSOPEnabled
                                                                  else
                                                                    ERROR('')
                                                                else
                                                                  SetCRMSOPDisabled;
                                                                RefreshDataFromCRM;

                                                                if "Is S.Order Integration Enabled" then
                                                                  MESSAGE(SetCRMSOPEnableConfirmMsg,CRMProductName.SHORT)
                                                                else
                                                                  MESSAGE(SetCRMSOPDisableConfirmMsg,CRMProductName.SHORT);
                                                              END;

                                                   CaptionML=ENU=Is S.Order Integration Enabled }
    { 67  ;   ;Is CRM Solution Installed;Boolean  ;CaptionML=ENU=Is CRM Solution Installed }
    { 68  ;   ;Is Enabled For User ;Boolean       ;CaptionML=ENU=Is Enabled For User }
    { 69  ;   ;Dynamics NAV URL    ;Text250       ;OnValidate=BEGIN
                                                                CRMIntegrationManagement.SetCRMNAVConnectionUrl("Dynamics NAV URL");
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV URL }
    { 70  ;   ;Dynamics NAV OData URL;Text250     ;OnValidate=BEGIN
                                                                CRMIntegrationManagement.SetCRMNAVODataUrlCredentials(
                                                                  "Dynamics NAV OData URL","Dynamics NAV OData Username","Dynamics NAV OData Accesskey");
                                                              END;

                                                   CaptionML=ENU=Dynamics NAV OData URL }
    { 71  ;   ;Dynamics NAV OData Username;Text250;OnValidate=VAR
                                                                User@1000 : Record User;
                                                              BEGIN
                                                                User.SETRANGE("User Name","Dynamics NAV OData Username");
                                                                if User.FINDFIRST then
                                                                  UpdateODataUsernameAccesskey(User)
                                                                else begin
                                                                  "Dynamics NAV OData Username" := '';
                                                                  "Dynamics NAV OData Accesskey" := '';
                                                                end;
                                                              END;

                                                   OnLookup=VAR
                                                              User@1000 : Record User;
                                                            BEGIN
                                                              if PAGE.RUNMODAL(PAGE::Users,User) = ACTION::LookupOK then
                                                                UpdateODataUsernameAccesskey(User);
                                                            END;

                                                   CaptionML=ENU=Dynamics NAV OData Username }
    { 72  ;   ;Dynamics NAV OData Accesskey;Text250;
                                                   CaptionML=ENU=Dynamics NAV OData Accesskey }
    { 75  ;   ;Default CRM Price List ID;GUID     ;CaptionML=ENU=Default CRM Price List ID }
    { 118 ;   ;CurrencyDecimalPrecision;Integer   ;CaptionML=ENU=Currency Decimal Precision;
                                                   Description=Number of decimal places that can be used for currency. }
    { 124 ;   ;BaseCurrencyId      ;GUID          ;TableRelation="CRM Transactioncurrency".TransactionCurrencyId;
                                                   ExternalAccess=Insert;
                                                   CaptionML=ENU=Currency;
                                                   Description=Unique identifier of the base currency of the organization. }
    { 133 ;   ;BaseCurrencyPrecision;Integer      ;ExternalAccess=Read;
                                                   CaptionML=ENU=Base Currency Precision;
                                                   MinValue=0;
                                                   MaxValue=4;
                                                   Description=Number of decimal places that can be used for the base currency. }
    { 134 ;   ;BaseCurrencySymbol  ;Text5         ;ExternalAccess=Read;
                                                   CaptionML=ENU=Base Currency Symbol;
                                                   Description=Symbol used for the base currency. }
    { 135 ;   ;Authentication Type ;Option        ;OnValidate=BEGIN
                                                                if xRec."Authentication Type" <> "Authentication Type" then
                                                                  VALIDATE("Is User Mapping Required",false);
                                                                case "Authentication Type" of
                                                                  "Authentication Type"::Office365:
                                                                    Domain := '';
                                                                  "Authentication Type"::AD:
                                                                    UpdateDomainName;
                                                                end;
                                                                UpdateConnectionString;
                                                              END;

                                                   CaptionML=ENU=Authentication Type;
                                                   OptionCaptionML=ENU=Office365,AD,IFD,OAuth;
                                                   OptionString=Office365,AD,IFD,OAuth }
    { 136 ;   ;Connection String   ;Text250       ;OnValidate=BEGIN
                                                                if STRPOS("Connection String",MissingPasswordTok) = 0 then
                                                                  ERROR(ConnectionStringPwdPlaceHolderMissingErr);
                                                              END;

                                                   CaptionML=ENU=Connection String }
    { 137 ;   ;Domain              ;Text250       ;CaptionML=ENU=Domain;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CRMIntegrationManagement@1055 : Codeunit "CRM Integration Management";
      CantRegisterDisabledConnectionErr@1001 : TextConst 'ENU=A disabled connection cannot be registered.';
      ConnectionErr@1009 : TextConst '@@@=%1 Error message from the provider (.NET exception message);ENU=The connection setup cannot be validated. Verify the settings and try again.\Detailed error description: %1.';
      ConnectionStringFormatTok@1000 : TextConst '@@@={Locked};ENU="Url=%1; UserName=%2; Password=%3; %4"';
      ConnectionSuccessMsg@1008 : TextConst 'ENU=The connection test was successful. The settings are valid.';
      ConnectionSuccessNotEnabledForCurrentUserMsg@1007 : TextConst '@@@="%1 = Current User ID, %2 - product name, %3 = CRM product name";ENU=The connection test was successful. The settings are valid.\\However, because the %2 Users Must Map to %3 Users field is set, %3 integration is not enabled for %1.';
      CannotResolveUserFromConnectionSetupErr@1013 : TextConst '@@@="%1 = CRM product name";ENU=The %1 user that is specified in the CRM connection setup does not exist.';
      DetailsMissingErr@1006 : TextConst '@@@="%1 = CRM product name";ENU=A %1 URL, user name and password are required to enable a connection.';
      UnableToRetrieveCrmVersionErr@1004 : TextConst '@@@="%1 = CRM product name";ENU=Unable to retrieve the %1 version.';
      MissingUsernameTok@1003 : TextConst '@@@={Locked};ENU={USER}';
      MissingPasswordTok@1005 : TextConst '@@@={Locked};ENU={PASSWORD}';
      ProcessDialogMapTitleMsg@1011 : TextConst '@@@=@1 Progress dialog map no.;ENU=Synchronizing @1';
      UserCRMSetupTxt@1015 : TextConst 'ENU=User CRM Setup';
      CannotConnectCRMErr@1014 : TextConst '@@@="%1 - email of the user, %2 = CRM product name";ENU=The system is unable to connect to %2, and the connection has been disabled. Verify the credentials of the user account %1, and then enable the connection again in the CRM Connection Setup window.';
      LCYMustMatchBaseCurrencyErr@1016 : TextConst '@@@=%1,%2 - ISO currency codes;ENU=LCY Code %1 does not match ISO Currency Code %2 of the CRM base currency.';
      UserNameMustIncludeDomainErr@1020 : TextConst 'ENU=The user name must include the domain when the authentication type is set to Active Directory.';
      UserNameMustBeEmailErr@1021 : TextConst 'ENU=The user name must be a valid email address when the authentication type is set to Office 365.';
      ConnectionStringPwdPlaceHolderMissingErr@1028 : TextConst 'ENU=The connection string must include the password placeholder {PASSWORD}.';
      CannotDisableSalesOrderIntErr@1010 : TextConst 'ENU=You cannot disable CRM sales order integration when a CRM sales order has the Submitted status.';
      SetCRMSOPEnableQst@1018 : TextConst '@@@=%1 - product name;ENU=Enabling Sales Order Integration will allow you to create %1 Sales Orders from Dynamics CRM.\\To enable this setting, you must provide Dynamics CRM administrator credentials (user name and password).\\Do you want to continue?';
      SetCRMSOPEnableConfirmMsg@1017 : TextConst '@@@="%1 = CRM product name";ENU=Sales Order Integration with %1 is enabled.';
      SetCRMSOPDisableConfirmMsg@1019 : TextConst '@@@="%1 = CRM product name";ENU=Sales Order Integration with %1 is disabled.';
      CRMProductName@1002 : Codeunit "CRM Product Name";

    [External]
    PROCEDURE CountCRMJobQueueEntries@30(VAR ActiveJobs@1000 : Integer;VAR TotalJobs@1001 : Integer);
    VAR
      JobQueueEntry@1002 : Record "Job Queue Entry";
    BEGIN
      if not "Is Enabled" then begin
        TotalJobs := 0;
        ActiveJobs := 0;
      end else begin
        if "Is CRM Solution Installed" then
          JobQueueEntry.SETFILTER("Object ID to Run",'%1|%2',CODEUNIT::"Integration Synch. Job Runner",CODEUNIT::"CRM Statistics Job")
        else
          JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Integration Synch. Job Runner");
        TotalJobs := JobQueueEntry.COUNT;

        JobQueueEntry.SETFILTER(Status,'%1|%2',JobQueueEntry.Status::Ready,JobQueueEntry.Status::"In Process");
        ActiveJobs := JobQueueEntry.COUNT;
      end;
    END;

    [External]
    PROCEDURE HasPassword@8() : Boolean;
    BEGIN
      exit(GetPassword <> '');
    END;

    [External]
    PROCEDURE SetPassword@1(PasswordText@1000 : Text);
    VAR
      ServicePassword@1002 : Record "Service Password";
    BEGIN
      if ISNULLGUID("User Password Key") or not ServicePassword.GET("User Password Key") then begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.INSERT(true);
        "User Password Key" := ServicePassword.Key;
      end else begin
        ServicePassword.SavePassword(PasswordText);
        ServicePassword.MODIFY;
      end;
    END;

    [Internal]
    PROCEDURE UpdateAllConnectionRegistrations@4();
    BEGIN
      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::CRM,GETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM));

      UnregisterConnection;
      if "Is Enabled" then
        RegisterUserConnection;
    END;

    [External]
    PROCEDURE UpdateIsEnabledState@34();
    BEGIN
      "Is User Mapped To CRM User" := IsCurrentUserMappedToCrmSystemUser;
      "Is Enabled For User" :=
        "Is Enabled" and
        ((not "Is User Mapping Required") or ("Is User Mapping Required" and "Is User Mapped To CRM User"));
    END;

    LOCAL PROCEDURE UpdateODataUsernameAccesskey@43(User@1000 : Record User);
    VAR
      IdentityManagement@1001 : Codeunit "Identity Management";
    BEGIN
      "Dynamics NAV OData Username" := User."User Name";
      "Dynamics NAV OData Accesskey" := IdentityManagement.GetWebServicesKey(User."User Security ID");

      CRMIntegrationManagement.SetCRMNAVODataUrlCredentials(
        "Dynamics NAV OData URL","Dynamics NAV OData Username","Dynamics NAV OData Accesskey");
    END;

    [External]
    PROCEDURE RegisterConnection@17();
    BEGIN
      if not HASTABLECONNECTION(TABLECONNECTIONTYPE::CRM,"Primary Key") then
        RegisterConnectionWithName("Primary Key");
    END;

    [External]
    PROCEDURE RegisterConnectionWithName@12(ConnectionName@1000 : Text);
    BEGIN
      REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName,GetConnectionStringWithPassword);
      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,GetDefaultCRMConnection(ConnectionName));
    END;

    [External]
    PROCEDURE UnregisterConnection@5() : Boolean;
    BEGIN
      exit(UnregisterConnectionWithName("Primary Key"));
    END;

    [TryFunction]
    [External]
    PROCEDURE UnregisterConnectionWithName@20(ConnectionName@1000 : Text);
    BEGIN
      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName);
    END;

    PROCEDURE ConstructConnectionString@3() : Text;
    VAR
      Password@1000 : Text;
    BEGIN
      if "User Name" = '' then
        Password := MissingPasswordTok
      else
        Password := GetPassword;
      exit(STRSUBSTNO(ConnectionStringFormatTok,"Server Address",GetUserName,Password,CrmAuthenticationType));
    END;

    LOCAL PROCEDURE ConstructConnectionStringWithCalledID@16(CallerID@1000 : Text) : Text;
    BEGIN
      exit(GetConnectionStringWithPassword + 'CallerID=' + CallerID);
    END;

    LOCAL PROCEDURE GetConnectionStringWithPassword@53() ConnectionString : Text;
    VAR
      PasswordPlaceHolderPos@1000 : Integer;
    BEGIN
      if "Connection String" = '' then
        UpdateConnectionString;
      if "User Name" = '' then
        exit("Connection String");
      PasswordPlaceHolderPos := STRPOS("Connection String",MissingPasswordTok);
      ConnectionString :=
        COPYSTR("Connection String",1,PasswordPlaceHolderPos - 1) + GetPassword +
        COPYSTR("Connection String",PasswordPlaceHolderPos + STRLEN(MissingPasswordTok));
    END;

    [Internal]
    PROCEDURE RegisterUserConnection@6() ConnectionName : Text;
    VAR
      SyncUser@1000 : Record User;
      CallerID@1001 : GUID;
    BEGIN
      RegisterConnection;
      SyncUser."User Name" := COPYSTR("User Name",1,MAXSTRLEN(SyncUser."User Name"));
      SyncUser."Authentication Email" := "User Name";
      if not TryGetSystemUserId(SyncUser,CallerID) then begin
        UnregisterConnection;
        VALIDATE("Is Enabled",false);
        VALIDATE("Is User Mapping Required",false);
        MODIFY;
        ShowError(UserCRMSetupTxt,STRSUBSTNO(CannotConnectCRMErr,"User Name",CRMProductName.SHORT));
      end else
        ConnectionName := RegisterAuthUserConnection;
    END;

    LOCAL PROCEDURE RegisterAuthUserConnection@42() ConnectionName : Text;
    VAR
      User@1001 : Record User;
      CallerID@1000 : GUID;
    BEGIN
      if GetUser(User) then
        if not TryGetSystemUserId(User,CallerID) then begin
          UnregisterConnection;
          ShowError(UserCRMSetupTxt,STRSUBSTNO(CannotConnectCRMErr,User."Authentication Email"));
        end else
          if not ISNULLGUID(CallerID) then begin
            UnregisterConnection;
            ConnectionName := RegisterConnectionWithCallerID(CallerID);
          end;
    END;

    LOCAL PROCEDURE RegisterConnectionWithCallerID@11(CallerID@1000 : Text) ConnectionName : Text;
    BEGIN
      if "Is Enabled" then begin
        REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::CRM,"Primary Key",ConstructConnectionStringWithCalledID(CallerID));
        ConnectionName := "Primary Key";
        if "Primary Key" = '' then begin
          ConnectionName := GetDefaultCRMConnection("Primary Key");
          SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::CRM,ConnectionName);
        end;
      end else
        ShowError(UserCRMSetupTxt,CantRegisterDisabledConnectionErr);
    END;

    [External]
    PROCEDURE GetIntegrationUserID@7() IntegrationUserID : GUID;
    VAR
      CRMSystemuser@1001 : Record "CRM Systemuser";
    BEGIN
      GET;
      TESTFIELD("Is Enabled");
      FilterCRMSystemUser(CRMSystemuser);
      if CRMSystemuser.FINDFIRST then
        IntegrationUserID := CRMSystemuser.SystemUserId;
      if ISNULLGUID(IntegrationUserID) then
        ShowError(UserCRMSetupTxt,STRSUBSTNO(CannotResolveUserFromConnectionSetupErr,CRMProductName.SHORT));
    END;

    LOCAL PROCEDURE GetPassword@2() : Text;
    VAR
      ServicePassword@1000 : Record "Service Password";
    BEGIN
      if not ISNULLGUID("User Password Key") then
        if ServicePassword.GET("User Password Key") then
          exit(ServicePassword.GetPassword);
    END;

    LOCAL PROCEDURE GetUser@51(VAR User@1000 : Record User) : Boolean;
    BEGIN
      if User.GET(DATABASE.USERSECURITYID) then
        exit(true);
      User.RESET;
      User.SETRANGE("Windows Security ID",SID);
      exit(User.FINDFIRST);
    END;

    LOCAL PROCEDURE GetUserName@60() UserName : Text;
    BEGIN
      if "User Name" = '' then
        UserName := MissingUsernameTok
      else
        UserName := COPYSTR("User Name",STRPOS("User Name",'\') + 1);
    END;

    [Internal]
    PROCEDURE PerformTestConnection@19();
    BEGIN
      VerifyTestConnection;

      if "Is User Mapping Required" and "Is Enabled" then
        if not IsCurrentUserMappedToCrmSystemUser then begin
          MESSAGE(ConnectionSuccessNotEnabledForCurrentUserMsg,USERID,PRODUCTNAME.SHORT,CRMProductName.SHORT);
          exit;
        end;

      MESSAGE(ConnectionSuccessMsg);
    END;

    [Internal]
    PROCEDURE VerifyTestConnection@21() : Boolean;
    BEGIN
      if ("Server Address" = '') or ("User Name" = '') or not HasPassword then
        ERROR(DetailsMissingErr,CRMProductName.SHORT);

      CRMIntegrationManagement.ClearState;

      if not TestConnection then
        ERROR(ConnectionErr,CRMIntegrationManagement.GetLastErrorMessage);

      exit(true);
    END;

    [External]
    PROCEDURE TestConnection@9() Success : Boolean;
    VAR
      TestConnectionName@1000 : Text;
    BEGIN
      TestConnectionName := FORMAT(CREATEGUID);
      UnregisterConnectionWithName(TestConnectionName);
      RegisterConnectionWithName(TestConnectionName);
      SETDEFAULTTABLECONNECTION(
        TABLECONNECTIONTYPE::CRM,GetDefaultCRMConnection(TestConnectionName),true);
      Success := TryReadSystemUsers;

      UnregisterConnectionWithName(TestConnectionName);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryReadSystemUsers@14();
    VAR
      CRMSystemuser@1000 : Record "CRM Systemuser";
    BEGIN
      CRMSystemuser.FINDFIRST;
    END;

    LOCAL PROCEDURE CreateOrganizationService@10(VAR service@1000 : DotNet "'Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Xrm.Sdk.IOrganizationService");
    VAR
      crmConnection@1002 : DotNet "'Microsoft.Xrm.Tooling.Connector, Version=2.2.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Xrm.Tooling.Connector.CrmServiceClient";
    BEGIN
      crmConnection := crmConnection.CrmServiceClient(ConstructConnectionString);
      if crmConnection.IsReady then begin
        if not ISNULL(crmConnection.OrganizationWebProxyClient) then
          service := crmConnection.OrganizationWebProxyClient
        else
          service := crmConnection.OrganizationServiceProxy;
        exit;
      end;

      if not ISNULL(crmConnection.LastCrmException) then
        ERROR(crmConnection.LastCrmException.Message);
      ERROR(crmConnection.LastCrmError);
    END;

    [TryFunction]
    LOCAL PROCEDURE GetCrmVersion@15(VAR Version@1003 : Text);
    VAR
      service@1000 : DotNet "'Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Xrm.Sdk.IOrganizationService";
      request@1001 : DotNet "'Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Xrm.Sdk.OrganizationRequest";
      response@1002 : DotNet "'Microsoft.Xrm.Sdk, Version=8.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Xrm.Sdk.OrganizationResponse";
    BEGIN
      if not DoReadCRMData then
        exit;

      Version := '';
      CreateOrganizationService(service);
      request := request.OrganizationRequest;
      request.RequestName := 'RetrieveVersion';
      response := service.Execute(request);
      if not response.Results.TryGetValue('Version',Version) then
        ERROR(UnableToRetrieveCrmVersionErr,CRMProductName.SHORT);
    END;

    [External]
    PROCEDURE IsVersionValid@33() : Boolean;
    VAR
      Version@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Version";
    BEGIN
      if "CRM Version" <> '' then
        if Version.TryParse("CRM Version",Version) then
          exit((Version.Major > 6) and not ((Version.Major = 7) and (Version.Minor = 1)));
      exit(false);
    END;

    [Internal]
    PROCEDURE IsCurrentUserMappedToCrmSystemUser@13() : Boolean;
    VAR
      User@1000 : Record User;
      CRMSystemUserId@1002 : GUID;
    BEGIN
      if GetUser(User) then
        if TryGetSystemUserId(User,CRMSystemUserId) then
          exit(not ISNULLGUID(CRMSystemUserId));
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetSystemUserId@18(User@1003 : Record User;VAR SystemUserId@1001 : GUID);
    VAR
      CRMSystemuser@1002 : Record "CRM Systemuser";
    BEGIN
      // Returns FALSE if CRMSystemuser.FINDFIRST throws an exception, e.g. due to wrong credentials;
      // Returns TRUE regardless of CRMSystemuser.FINDFIRST result,
      // further check of ISNULLGUID(SystemUserId) is required to identify if the user exists
      CLEAR(SystemUserId);
      if "Is Enabled" then
        if "Is User Mapping Required" then begin
          CRMSystemuser.SETRANGE(IsDisabled,false);
          case "Authentication Type" of
            "Authentication Type"::AD,"Authentication Type"::IFD:
              CRMSystemuser.SETRANGE(DomainName,User."User Name");
            "Authentication Type"::Office365,"Authentication Type"::OAuth:
              CRMSystemuser.SETRANGE(InternalEMailAddress,User."Authentication Email");
          end;
          if CRMSystemuser.FINDFIRST then
            SystemUserId := CRMSystemuser.SystemUserId;
        end;
    END;

    [External]
    PROCEDURE UpdateFromWizard@23(VAR SourceCRMConnectionSetup@1001 : Record "CRM Connection Setup";PasswordText@1002 : Text);
    BEGIN
      if not GET then begin
        INIT;
        INSERT;
      end;
      VALIDATE("Server Address",SourceCRMConnectionSetup."Server Address");
      VALIDATE("Authentication Type","Authentication Type"::Office365);
      VALIDATE("User Name",SourceCRMConnectionSetup."User Name");
      SetPassword(PasswordText);
      MODIFY(true);
    END;

    LOCAL PROCEDURE EnableCRMConnection@24();
    BEGIN
      if "Is Enabled" = xRec."Is Enabled" then
        exit;

      if not UnregisterConnection then
        CLEARLASTERROR;

      if "Is Enabled" then begin
        VerifyTestConnection;
        RegisterUserConnection;
        VerifyBaseCurrencyMatchesLCY;
        EnableIntegrationTables;
      end else begin
        "CRM Version" := '';
        "Is S.Order Integration Enabled" := false;
        "Is CRM Solution Installed" := false;
        CurrencyDecimalPrecision := 0;
        CLEAR(BaseCurrencyId);
        BaseCurrencyPrecision := 0;
        BaseCurrencySymbol := '';
        UpdateCRMJobQueueEntriesStatus;
      end;
    END;

    LOCAL PROCEDURE EnableIntegrationTables@27();
    VAR
      IntegrationTableMapping@1003 : Record "Integration Table Mapping";
      IntegrationRecord@1002 : Record "Integration Record";
      IntegrationManagement@1001 : Codeunit "Integration Management";
      CRMSetupDefaults@1000 : Codeunit "CRM Setup Defaults";
    BEGIN
      if IntegrationRecord.ISEMPTY then
        IntegrationManagement.SetupIntegrationTables;
      IntegrationManagement.SetConnectorIsEnabledForSession(true);
      if IntegrationTableMapping.ISEMPTY then begin
        MODIFY; // Job Queue to read "Is Enabled"
        COMMIT;
        CRMSetupDefaults.ResetConfiguration(Rec);
      end else
        UpdateCRMJobQueueEntriesStatus;
    END;

    [External]
    PROCEDURE EnableCRMConnectionFromWizard@25();
    VAR
      CRMSystemuser@1001 : Record "CRM Systemuser";
    BEGIN
      GET;
      "Is User Mapping Required" := false;
      VALIDATE("Is Enabled",true);
      MODIFY(true);

      FilterCRMSystemUser(CRMSystemuser);
      CRMSystemuser.FINDFIRST;
      if (CRMSystemuser.InviteStatusCode <> CRMSystemuser.InviteStatusCode::InvitationAccepted) or
         (not CRMSystemuser.IsIntegrationUser)
      then begin
        CRMSystemuser.InviteStatusCode := CRMSystemuser.InviteStatusCode::InvitationAccepted;
        CRMSystemuser.IsIntegrationUser := true;
        CRMSystemuser.MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE SetCRMSOPEnabled@37();
    BEGIN
      TESTFIELD("Is CRM Solution Installed",true);
      SetCRMSOPEnabledWithCredentials('',CREATEGUID,true);
    END;

    PROCEDURE SetCRMSOPDisabled@55();
    VAR
      CRMSalesorder@1000 : Record "CRM Salesorder";
    BEGIN
      CRMSalesorder.SETRANGE(StateCode,CRMSalesorder.StateCode::Submitted);
      if not CRMSalesorder.ISEMPTY then
        ERROR(CannotDisableSalesOrderIntErr);
      SetCRMSOPEnabledWithCredentials('',CREATEGUID,false);
    END;

    [External]
    PROCEDURE SetCRMSOPEnabledWithCredentials@36(AdminEmail@1003 : Text[250];AdminPassKey@1004 : GUID;SOPIntegrationEnable@1006 : Boolean);
    VAR
      CRMOrganization@1000 : Record "CRM Organization";
      TempCRMConnectionSetup@1001 : TEMPORARY Record "CRM Connection Setup";
      ServicePassword@1005 : Record "Service Password";
      ConnectionName@1002 : Text;
    BEGIN
      CreateTempAdminConnection(TempCRMConnectionSetup);
      if (AdminEmail <> '') and (not ISNULLGUID(AdminPassKey)) then begin
        ServicePassword.GET(AdminPassKey);
        TempCRMConnectionSetup.SetPassword(ServicePassword.GetPassword);
        TempCRMConnectionSetup.VALIDATE("User Name",AdminEmail);
      end;
      ConnectionName := FORMAT(CREATEGUID);
      TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      SETDEFAULTTABLECONNECTION(
        TABLECONNECTIONTYPE::CRM,GetDefaultCRMConnection(ConnectionName),true);

      CRMOrganization.FINDFIRST;
      if CRMOrganization.IsSOPIntegrationEnabled <> SOPIntegrationEnable then begin
        CRMOrganization.IsSOPIntegrationEnabled := SOPIntegrationEnable;
        CRMOrganization.MODIFY(true);
      end;

      TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
    END;

    [External]
    PROCEDURE SetUserAsIntegrationUser@39();
    VAR
      CRMSystemuser@1000 : Record "CRM Systemuser";
      TempCRMConnectionSetup@1001 : TEMPORARY Record "CRM Connection Setup";
      ConnectionName@1002 : Text;
    BEGIN
      CreateTempAdminConnection(TempCRMConnectionSetup);
      ConnectionName := FORMAT(CREATEGUID);
      TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      SETDEFAULTTABLECONNECTION(
        TABLECONNECTIONTYPE::CRM,GetDefaultCRMConnection(ConnectionName),true);
      FilterCRMSystemUser(CRMSystemuser);
      CRMSystemuser.FINDFIRST;

      if (CRMSystemuser.InviteStatusCode <> CRMSystemuser.InviteStatusCode::InvitationAccepted) or
         (not CRMSystemuser.IsIntegrationUser)
      then begin
        CRMSystemuser.InviteStatusCode := CRMSystemuser.InviteStatusCode::InvitationAccepted;
        CRMSystemuser.IsIntegrationUser := true;
        CRMSystemuser.MODIFY(true);
      end;

      TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
    END;

    LOCAL PROCEDURE CreateTempAdminConnection@40(VAR CRMConnectionSetup@1000 : Record "CRM Connection Setup");
    BEGIN
      CreateTempNoDelegateConnection(CRMConnectionSetup);
      CLEAR(CRMConnectionSetup."User Password Key");
      CRMConnectionSetup.VALIDATE("User Name",'');
    END;

    LOCAL PROCEDURE CreateTempNoDelegateConnection@41(VAR CRMConnectionSetup@1000 : Record "CRM Connection Setup");
    BEGIN
      CRMConnectionSetup.INIT;
      CRMConnectionSetup.TRANSFERFIELDS(Rec);
      CRMConnectionSetup."Primary Key" := COPYSTR('TEMP' + "Primary Key",1,MAXSTRLEN(CRMConnectionSetup."Primary Key"));
      CRMConnectionSetup."Is Enabled" := true;
      CRMConnectionSetup."Is User Mapping Required" := false;
    END;

    [Internal]
    PROCEDURE RefreshDataFromCRM@31();
    VAR
      TempCRMConnectionSetup@1000 : TEMPORARY Record "CRM Connection Setup";
      ConnectionName@1001 : Text;
    BEGIN
      if "Is Enabled" then begin
        if "Is User Mapping Required" then begin
          CreateTempNoDelegateConnection(TempCRMConnectionSetup);
          ConnectionName := FORMAT(CREATEGUID);
          TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
          "Is User Mapped To CRM User" := IsCurrentUserMappedToCrmSystemUser;
        end;

        "Is CRM Solution Installed" := CRMIntegrationManagement.IsCRMSolutionInstalled;
        RefreshFromCRMConnectionInformation;
        if TryRefreshCRMSettings then;

        if ConnectionName <> '' then
          TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);
      end;
    END;

    LOCAL PROCEDURE RefreshFromCRMConnectionInformation@29();
    VAR
      CRMNAVConnection@1001 : Record "CRM NAV Connection";
    BEGIN
      if "Is CRM Solution Installed" then
        if CRMNAVConnection.FINDFIRST then begin
          "Dynamics NAV URL" := CRMNAVConnection."Dynamics NAV URL";
          "Dynamics NAV OData URL" := CRMNAVConnection."Dynamics NAV OData URL";
          "Dynamics NAV OData Username" := CRMNAVConnection."Dynamics NAV OData Username";
          "Dynamics NAV OData Accesskey" := CRMNAVConnection."Dynamics NAV OData Accesskey";
        end;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRefreshCRMSettings@26();
    VAR
      CRMOrganization@1001 : Record "CRM Organization";
    BEGIN
      GetCrmVersion("CRM Version");
      VALIDATE("CRM Version");

      if CRMOrganization.FINDFIRST then begin
        "Is S.Order Integration Enabled" := CRMOrganization.IsSOPIntegrationEnabled;
        CurrencyDecimalPrecision := CRMOrganization.CurrencyDecimalPrecision;
        BaseCurrencyId := CRMOrganization.BaseCurrencyId;
        BaseCurrencyPrecision := CRMOrganization.BaseCurrencyPrecision;
        BaseCurrencySymbol := CRMOrganization.BaseCurrencySymbol;
      end else
        "Is S.Order Integration Enabled" := false;
    END;

    LOCAL PROCEDURE VerifyBaseCurrencyMatchesLCY@35();
    VAR
      CRMOrganization@1001 : Record "CRM Organization";
      CRMTransactioncurrency@1002 : Record "CRM Transactioncurrency";
      GLSetup@1000 : Record "General Ledger Setup";
    BEGIN
      CRMOrganization.FINDFIRST;
      CRMTransactioncurrency.GET(CRMOrganization.BaseCurrencyId);
      GLSetup.GET;
      if DELCHR(CRMTransactioncurrency.ISOCurrencyCode) <> DELCHR(GLSetup."LCY Code") then
        ERROR(STRSUBSTNO(LCYMustMatchBaseCurrencyErr,GLSetup."LCY Code",CRMTransactioncurrency.ISOCurrencyCode));
    END;

    [Internal]
    PROCEDURE PerformWebClientUrlReset@32();
    VAR
      TempCRMConnectionSetup@1000 : TEMPORARY Record "CRM Connection Setup";
      CRMSetupDefaults@1002 : Codeunit "CRM Setup Defaults";
      ConnectionName@1001 : Text;
    BEGIN
      CreateTempNoDelegateConnection(TempCRMConnectionSetup);
      ConnectionName := FORMAT(CREATEGUID);
      TempCRMConnectionSetup.RegisterConnectionWithName(ConnectionName);
      SETDEFAULTTABLECONNECTION(
        TABLECONNECTIONTYPE::CRM,GetDefaultCRMConnection(ConnectionName),true);

      CRMSetupDefaults.ResetCRMNAVConnectionData;

      TempCRMConnectionSetup.UnregisterConnectionWithName(ConnectionName);

      RefreshDataFromCRM;
    END;

    [External]
    PROCEDURE SynchronizeNow@44(DoFullSynch@1000 : Boolean);
    VAR
      IntegrationTableMapping@1006 : Record "Integration Table Mapping";
      TempNameValueBuffer@1005 : TEMPORARY Record "Name/Value Buffer";
      CRMSetupDefaults@1004 : Codeunit "CRM Setup Defaults";
      ProgressWindow@1003 : Dialog;
      MappingCount@1002 : Integer;
      CurrentMappingIndex@1001 : Integer;
    BEGIN
      CRMSetupDefaults.GetPrioritizedMappingList(TempNameValueBuffer);
      TempNameValueBuffer.ASCENDING(true);
      TempNameValueBuffer.FINDSET;

      CurrentMappingIndex := 0;
      MappingCount := TempNameValueBuffer.COUNT;
      ProgressWindow.OPEN(ProcessDialogMapTitleMsg,CurrentMappingIndex);
      repeat
        CurrentMappingIndex := CurrentMappingIndex + 1;
        ProgressWindow.UPDATE(1,ROUND(CurrentMappingIndex / MappingCount * 10000,1));
        if IntegrationTableMapping.GET(TempNameValueBuffer.Value) then
          IntegrationTableMapping.SynchronizeNow(DoFullSynch);
      until TempNameValueBuffer.NEXT = 0;
      ProgressWindow.CLOSE;
    END;

    LOCAL PROCEDURE ShowError@336(ActivityDescription@1001 : Text[128];ErrorMessage@1000 : Text);
    VAR
      MyNotifications@1003 : Record "My Notifications";
      LogonManagement@1002 : Codeunit "Logon Management";
    BEGIN
      if not LogonManagement.IsLogonInProgress then
        ERROR(ErrorMessage);

      MyNotifications.InsertDefault(GetCRMNotificationId,ActivityDescription,ErrorMessage,true);
    END;

    LOCAL PROCEDURE GetCRMNotificationId@28() : GUID;
    BEGIN
      exit('692A2701-4BBB-4C5B-B4C0-629D96B60644');
    END;

    PROCEDURE DoReadCRMData@45() : Boolean;
    VAR
      SkipReading@1000 : Boolean;
    BEGIN
      OnReadingCRMData(SkipReading);
      exit(not SkipReading);
    END;

    [Integration]
    LOCAL PROCEDURE OnReadingCRMData@22(VAR SkipReading@1000 : Boolean);
    BEGIN
    END;

    [Internal]
    PROCEDURE GetDefaultCRMConnection@46(ConnectionName@1000 : Text) : Text;
    BEGIN
      OnGetDefaultCRMConnection(ConnectionName);
      exit(ConnectionName);
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDefaultCRMConnection@48(VAR ConnectionName@1000 : Text);
    BEGIN
    END;

    LOCAL PROCEDURE CrmAuthenticationType@49() : Text;
    BEGIN
      case "Authentication Type" of
        "Authentication Type"::Office365:
          exit('AuthType=Office365;');
        "Authentication Type"::AD:
          exit('AuthType=AD;' + GetDomain);
        "Authentication Type"::IFD:
          exit('AuthType=IFD;' + GetDomain + 'HomeRealmUri= ;');
        "Authentication Type"::OAuth:
          exit('AuthType=OAuth;' + 'AppId= ;' + 'RedirectUri= ;' + 'TokenCacheStorePath= ;' + 'LoginPrompt=Auto;');
      end;
    END;

    PROCEDURE UpdateConnectionString@50();
    BEGIN
      VALIDATE(
        "Connection String",
        STRSUBSTNO(
          ConnectionStringFormatTok,"Server Address",GetUserName,MissingPasswordTok,CrmAuthenticationType));
    END;

    LOCAL PROCEDURE UpdateDomainName@54();
    BEGIN
      if "User Name" <> '' then
        if STRPOS("User Name",'\') > 0 then
          VALIDATE(Domain,COPYSTR("User Name",1,STRPOS("User Name",'\') - 1))
        else
          Domain := '';
    END;

    LOCAL PROCEDURE CheckUserName@47();
    BEGIN
      if "User Name" <> '' then
        case "Authentication Type" of
          "Authentication Type"::AD:
            if STRPOS("User Name",'\') = 0 then
              ERROR(UserNameMustIncludeDomainErr);
          "Authentication Type"::Office365:
            if STRPOS("User Name",'@') = 0 then
              ERROR(UserNameMustBeEmailErr);
        end;
    END;

    LOCAL PROCEDURE GetDomain@68() : Text;
    BEGIN
      if Domain <> '' then
        exit(STRSUBSTNO('Domain=%1;',Domain));
    END;

    LOCAL PROCEDURE FilterCRMSystemUser@57(VAR CRMSystemuser@1000 : Record "CRM Systemuser");
    BEGIN
      case "Authentication Type" of
        "Authentication Type"::Office365,"Authentication Type"::OAuth:
          CRMSystemuser.SETRANGE(InternalEMailAddress,"User Name");
        "Authentication Type"::AD,"Authentication Type"::IFD:
          CRMSystemuser.SETRANGE(DomainName,"User Name");
      end;
    END;

    PROCEDURE UpdateCRMJobQueueEntriesStatus@52();
    VAR
      IntegrationTableMapping@1000 : Record "Integration Table Mapping";
      JobQueueEntry@1001 : Record "Job Queue Entry";
      NewStatus@1002 : Option;
    BEGIN
      if "Is Enabled" then
        NewStatus := JobQueueEntry.Status::Ready
      else
        NewStatus := JobQueueEntry.Status::"On Hold";
      IntegrationTableMapping.SETRANGE("Synch. Codeunit ID",CODEUNIT::"CRM Integration Table Synch.");
      IntegrationTableMapping.SETRANGE("Delete After Synchronization",false);
      if IntegrationTableMapping.FINDSET then
        repeat
          JobQueueEntry.SETRANGE("Record ID to Process",IntegrationTableMapping.RECORDID);
          if JobQueueEntry.FINDSET then
            repeat
              JobQueueEntry.SetStatus(NewStatus);
            until JobQueueEntry.NEXT = 0;
        until IntegrationTableMapping.NEXT = 0;
    END;

    PROCEDURE UpdateLastUpdateInvoiceEntryNo@38() : Boolean;
    VAR
      DtldCustLedgEntry@1000 : Record "Detailed Cust. Ledg. Entry";
    BEGIN
      GET;
      DtldCustLedgEntry.RESET;
      if DtldCustLedgEntry.FINDLAST then
        if "Last Update Invoice Entry No." <> DtldCustLedgEntry."Entry No." then begin
          "Last Update Invoice Entry No." := DtldCustLedgEntry."Entry No.";
          exit(MODIFY);
        end;
    END;

    BEGIN
    END.
  }
}

