OBJECT XMLport 1 Consolidation Import/Export
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Consolidation Import/Export;
    Format/Evaluate=XML Format/Evaluate;
  }
  ELEMENTS
  {
    { ['{5CDBAF06-C7E1-4222-9633-B90B6840C9FC}'];;subFinReport        ;Element ;Text    ;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  NextGLEntryNo := 1;
                                                                                END;
                                                                                 }

    { ['{B6564B5B-C840-45E1-91C8-A3B073508158}'];1;product            ;Attribute;Text    }

    { ['{476179A5-6D2C-4BD6-9924-08687237A462}'];1;productVersion     ;Attribute;Text    }

    { ['{92C00E3F-2218-41BF-A788-242559DF8E43}'];1;formatVersion      ;Attribute;Text   ;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  // add code here to test format Version against CurrentFormatVersion.
                                                                                  // if different only behind the decimal point, than ok.
                                                                                  // if different before the decimal, then give error message.
                                                                                END;
                                                                                 }

    { ['{3609D822-9A93-44AB-A1D9-60A57D06D9B2}'];1;subCompanyName     ;Attribute;Text    }

    { ['{03051B56-8E9E-4890-8EFF-D19138E51115}'];1;currencyLCY        ;Attribute;Text   ;
                                                  Occurrence=Optional }

    { ['{403BCC17-A05E-4C60-B6C0-EAA216A4A338}'];1;currencyACY        ;Attribute;Text   ;
                                                  Occurrence=Optional }

    { ['{5C189382-CE6F-4E9C-B7EA-13AD3A65D52F}'];1;currencyPCY        ;Attribute;Text   ;
                                                  Occurrence=Optional }

    { ['{EB9A5AD3-FFF2-4883-A0F5-C35468D5FCDC}'];1;checkSum           ;Attribute;Text    }

    { ['{4E3F5603-FB98-43BE-87A6-F2C0357E57C7}'];1;startingDate       ;Attribute;Text   ;
                                                  Occurrence=Optional }

    { ['{26D5DCF9-C941-44EB-9A77-9B0994B7D951}'];1;startingDateIsClosing;Attribute;Text ;
                                                  Occurrence=Optional }

    { ['{364E19CC-B2C6-4374-B263-D6796AEB5710}'];1;endingDate         ;Attribute;Text    }

    { ['{A3CC269E-EA06-486D-BD8F-9E8ED75C9474}'];1;endingDateIsClosing;Attribute;Text   ;
                                                  Occurrence=Optional }

    { ['{5C4BCA68-52E0-4C0C-9110-4AD9500F27ED}'];1;reportingDate      ;Attribute;Text    }

    { ['{A37D7517-4A21-4780-B825-60921BBFD7B2}'];1;reportingUserID    ;Attribute;Text    }

    { ['{EABBC626-6C90-4054-BB28-7C728EBCB335}'];1;exchRateTable      ;Element ;Text    ;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once }

    { ['{2D177F23-0857-4E76-83E2-7B2BE181FB40}'];2;exchRate           ;Element ;Table   ;
                                                  SourceTable="Currency Exchange Rate";
                                                  SourceTableView=SORTING("Currency Code","Starting Date");
                                                  Temporary=true;
                                                  MinOccurs=Zero }

    { ['{D25A01B7-C405-484D-973E-896BD1DE3C53}'];3;currencyCode       ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Currency Exchange Rate::Currency Code;
                                                  Occurrence=Required }

    { ['{B1F15BC8-7A55-40B4-BF8A-68AECAB9B754}'];3;relCurrencyCode    ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Currency Exchange Rate::Relational Currency Code;
                                                  Occurrence=Optional }

    { ['{00C74AC3-EAC2-43E1-BFCB-F0E28207C85B}'];3;startingDate       ;Attribute;Field  ;
                                                  DataType=Date;
                                                  SourceField=Currency Exchange Rate::Starting Date }

    { ['{09FDCFCA-73CB-4313-9BEA-7867B5E566B6}'];3;exchRateAmount     ;Attribute;Field  ;
                                                  DataType=Decimal;
                                                  SourceField=Currency Exchange Rate::Exchange Rate Amount }

    { ['{64E757B2-AC85-4989-8CC6-F5DD6CB9F213}'];3;relExchRateAmount  ;Attribute;Field  ;
                                                  DataType=Decimal;
                                                  SourceField=Currency Exchange Rate::Relational Exch. Rate Amount }

    { ['{43320295-4D3B-4E19-B133-9B3AA5B36FC7}'];1;glAccountTable     ;Element ;Text    ;
                                                  MinOccurs=Once;
                                                  MaxOccurs=Once }

    { ['{23143A4A-54D6-44B0-A9DC-06DD54EF4B7F}'];2;glAccount          ;Element ;Table   ;
                                                  SourceTable="G/L Account";
                                                  SourceTableView=SORTING("No.");
                                                  Temporary=true }

    { ['{8770CA07-24B5-401E-BB9A-3EEA4FB0FA4C}'];3;no                 ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=G/L Account::No. }

    { ['{D785C97E-7DB7-407E-B9A6-594B173122A1}'];3;accountDebit       ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=G/L Account::Consol. Debit Acc.;
                                                  Occurrence=Optional }

    { ['{31A63C25-4BB1-4A6D-8CAE-0E7DAAF1B678}'];3;accountCredit      ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=G/L Account::Consol. Credit Acc.;
                                                  Occurrence=Optional }

    { ['{40CF9AD9-0204-4AD8-B9C5-EE468EA89E2E}'];3;translationMethod  ;Attribute;Field  ;
                                                  DataType=Option;
                                                  SourceField=G/L Account::Consol. Translation Method }

    { ['{8F09EE39-16E2-4538-A816-355D3DA5126D}'];3;glEntry            ;Element ;Table   ;
                                                  SourceTable="G/L Entry";
                                                  SourceTableView=SORTING("G/L Account No.","Posting Date");
                                                  LinkFields="G/L Account No."=FIELD("No.");
                                                  LinkTable=G/L Account;
                                                  Temporary=true;
                                                  MinOccurs=Zero;
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 "G/L Entry"."Entry No." := NextGLEntryNo;
                                                                                 "G/L Entry"."G/L Account No." := "G/L Account"."No.";
                                                                                 if isClosingEntry = '1' then
                                                                                   "G/L Entry"."Posting Date" := CLOSINGDATE("G/L Entry"."Posting Date");
                                                                               END;

                                                  Export::OnAfterGetRecord=BEGIN
                                                                             if "G/L Entry"."Posting Date" = NORMALDATE("G/L Entry"."Posting Date") then
                                                                               isClosingEntry := ''
                                                                             else
                                                                               isClosingEntry := '1';
                                                                           END;

                                                  Import::OnAfterInsertRecord=BEGIN
                                                                                NextGLEntryNo := NextGLEntryNo + 1;
                                                                              END;
                                                                               }

    { ['{4A78056E-39C7-4263-8185-50F6FC332C9B}'];4;postingDate        ;Attribute;Field  ;
                                                  DataType=Date;
                                                  SourceField=G/L Entry::Posting Date }

    { ['{921B8532-13F3-48E4-B479-8AD3DB8DDCE7}'];4;isClosingEntry     ;Attribute;Text   ;
                                                  Occurrence=Optional }

    { ['{1CAA0172-6A2A-4C4E-952E-38C03FFA54EC}'];4;amountDebit        ;Attribute;Field  ;
                                                  DataType=Decimal;
                                                  SourceField=G/L Entry::Debit Amount;
                                                  Occurrence=Optional }

    { ['{CFD78F83-7698-4498-AB6E-4EA2B1E8F2DA}'];4;amountCredit       ;Attribute;Field  ;
                                                  DataType=Decimal;
                                                  SourceField=G/L Entry::Credit Amount;
                                                  Occurrence=Optional }

    { ['{FAA3EF59-136A-4297-B327-7CC9F1BC3D5F}'];4;arcAmountDebit     ;Attribute;Field  ;
                                                  DataType=Decimal;
                                                  SourceField=G/L Entry::Add.-Currency Debit Amount;
                                                  Occurrence=Optional }

    { ['{FAE9B5BD-59D6-4D6E-B797-D29DB2060CAD}'];4;arcAmountCredit    ;Attribute;Field  ;
                                                  DataType=Decimal;
                                                  SourceField=G/L Entry::Add.-Currency Credit Amount;
                                                  Occurrence=Optional }

    { ['{87233B97-96D8-4EA5-BFC1-5C427156AC16}'];4;dimension          ;Element ;Table   ;
                                                  SourceTable="Dimension Buffer";
                                                  SourceTableView=WHERE("Table ID"=CONST(17));
                                                  LinkFields="Entry No."=FIELD("Entry No.");
                                                  LinkTable=G/L Entry;
                                                  Temporary=true;
                                                  MinOccurs=Zero;
                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 "Dimension Buffer"."Table ID" := DATABASE::"G/L Entry";
                                                                                 "Dimension Buffer"."Entry No." := "G/L Entry"."Entry No.";
                                                                               END;
                                                                                }

    { ['{8E784AAA-13A6-419F-B9C7-A7BC3A5E61F8}'];5;code               ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Dimension Buffer::Dimension Code }

    { ['{0864FC58-CA4E-4CE4-A0D7-B0C04CACE903}'];5;value              ;Attribute;Field  ;
                                                  DataType=Code;
                                                  SourceField=Dimension Buffer::Dimension Value Code }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      CurrentProduct@1001 : TextConst 'ENU=Microsoft Dynamics NAV';
      CurrentProductVersion@1010 : TextConst 'ENU=4.00';
      CurrentFormatVersion@1011 : TextConst 'ENU=1.00';
      NextGLEntryNo@1000 : Integer;

    [External]
    PROCEDURE SetGlobals@1(NewCompanyName@1000 : Text[30];NewCurrencyLCY@1001 : Code[10];NewCurrencyACY@1002 : Code[10];NewCurrencyPCY@1003 : Code[10];NewCheckSum@1004 : Decimal;NewStartingDate@1005 : Date;NewEndingDate@1006 : Date);
    BEGIN
      product := CurrentProduct;
      productVersion := CurrentProductVersion;
      formatVersion := CurrentFormatVersion;
      subCompanyName := NewCompanyName;
      currencyLCY := NewCurrencyLCY;
      currencyACY := NewCurrencyACY;
      currencyPCY := NewCurrencyPCY;
      checkSum := DecimalToXMLText(NewCheckSum);
      startingDate := DateToXMLText(NewStartingDate);
      endingDate := DateToXMLText(NewEndingDate);
      reportingDate := DateToXMLText(TODAY);
      reportingUserID := USERID;

      if NewStartingDate = NORMALDATE(NewStartingDate) then
        startingDateIsClosing := ''
      else
        startingDateIsClosing := '1';

      if NewEndingDate = NORMALDATE(NewEndingDate) then
        endingDateIsClosing := ''
      else
        endingDateIsClosing := '1';
    END;

    [External]
    PROCEDURE GetGlobals@2(VAR ImpProductVersion@1000 : Code[10];VAR ImpFormatVersion@1001 : Code[10];VAR ImpCompanyName@1002 : Text[30];VAR ImpCurrencyLCY@1003 : Code[10];VAR ImpCurrencyACY@1004 : Code[10];VAR ImpCurrencyPCY@1005 : Code[10];VAR ImpCheckSum@1006 : Decimal;VAR ImpStartingDate@1007 : Date;VAR ImpEndingDate@1008 : Date);
    BEGIN
      ImpProductVersion := productVersion;
      ImpFormatVersion := formatVersion;
      ImpCompanyName := subCompanyName;
      ImpCurrencyLCY := currencyLCY;
      ImpCurrencyACY := currencyACY;
      ImpCurrencyPCY := currencyPCY;
      ImpCheckSum := XMLTextToDecimal(checkSum);
      ImpStartingDate := XMLTextToDate(startingDate);
      ImpEndingDate := XMLTextToDate(endingDate);

      if startingDateIsClosing = '1' then
        ImpStartingDate := CLOSINGDATE(ImpStartingDate);

      if endingDateIsClosing = '1' then
        ImpEndingDate := CLOSINGDATE(ImpEndingDate);
    END;

    [External]
    PROCEDURE SetGLAccount@7(VAR TempGLAccount@1000 : Record "G/L Account");
    BEGIN
      "G/L Account".RESET;
      "G/L Account".DELETEALL;
      if TempGLAccount.FIND('-') then
        repeat
          "G/L Account" := TempGLAccount;
          "G/L Account".INSERT;
        until TempGLAccount.NEXT = 0;
    END;

    [External]
    PROCEDURE GetGLAccount@8(VAR TempGLAccount@1000 : Record "G/L Account");
    BEGIN
      TempGLAccount.RESET;
      TempGLAccount.DELETEALL;
      "G/L Account".RESET;
      if "G/L Account".FIND('-') then
        repeat
          TempGLAccount := "G/L Account";
          TempGLAccount.INSERT;
        until "G/L Account".NEXT = 0;
    END;

    [External]
    PROCEDURE SetGLEntry@9(VAR TempGLEntry@1000 : Record "G/L Entry");
    BEGIN
      "G/L Entry".RESET;
      "G/L Entry".DELETEALL;
      if TempGLEntry.FIND('-') then
        repeat
          "G/L Entry" := TempGLEntry;
          "G/L Entry".INSERT;
        until TempGLEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE GetGLEntry@10(VAR TempGLEntry@1000 : Record "G/L Entry");
    BEGIN
      TempGLEntry.RESET;
      TempGLEntry.DELETEALL;
      "G/L Entry".RESET;
      if "G/L Entry".FIND('-') then
        repeat
          TempGLEntry := "G/L Entry";
          TempGLEntry.INSERT;
        until "G/L Entry".NEXT = 0;
    END;

    [External]
    PROCEDURE SetEntryDim@11(VAR TempDimBuf@1000 : TEMPORARY Record "Dimension Buffer");
    BEGIN
      "Dimension Buffer".RESET;
      "Dimension Buffer".DELETEALL;
      if TempDimBuf.FIND('-') then
        repeat
          "Dimension Buffer" := TempDimBuf;
          "Dimension Buffer".INSERT;
        until TempDimBuf.NEXT = 0;
    END;

    [External]
    PROCEDURE GetEntryDim@12(VAR TempDimBuf@1000 : TEMPORARY Record "Dimension Buffer");
    BEGIN
      TempDimBuf.RESET;
      TempDimBuf.DELETEALL;
      "Dimension Buffer".RESET;
      if "Dimension Buffer".FIND('-') then
        repeat
          TempDimBuf := "Dimension Buffer";
          TempDimBuf.INSERT;
        until "Dimension Buffer".NEXT = 0;
    END;

    [External]
    PROCEDURE SetExchRate@13(VAR TempExchRate@1000 : Record "Currency Exchange Rate");
    BEGIN
      "Currency Exchange Rate".RESET;
      "Currency Exchange Rate".DELETEALL;
      if TempExchRate.FIND('-') then
        repeat
          "Currency Exchange Rate" := TempExchRate;
          "Currency Exchange Rate".INSERT;
        until TempExchRate.NEXT = 0;
    END;

    [External]
    PROCEDURE GetExchRate@14(VAR TempExchRate@1000 : Record "Currency Exchange Rate");
    BEGIN
      TempExchRate.RESET;
      TempExchRate.DELETEALL;
      "Currency Exchange Rate".RESET;
      if "Currency Exchange Rate".FIND('-') then
        repeat
          TempExchRate := "Currency Exchange Rate";
          TempExchRate.INSERT;
        until "Currency Exchange Rate".NEXT = 0;
    END;

    LOCAL PROCEDURE DateToXMLText@3(Date@1000 : Date) XMLText : Text[30];
    BEGIN
      XMLText := FORMAT(Date,10,'<Year4>-<Month,2>-<Day,2>');
    END;

    LOCAL PROCEDURE XMLTextToDate@4(XMLText@1000 : Text[30]) Date : Date;
    VAR
      Month@1004 : Integer;
      Day@1003 : Integer;
      Year@1002 : Integer;
    BEGIN
      EVALUATE(Year,COPYSTR(XMLText,1,4));
      EVALUATE(Month,COPYSTR(XMLText,6,2));
      EVALUATE(Day,COPYSTR(XMLText,9,2));
      Date := DMY2DATE(Day,Month,Year);
    END;

    LOCAL PROCEDURE DecimalToXMLText@5(Amount@1000 : Decimal) XMLText : Text[30];
    VAR
      BeforePoint@1001 : Decimal;
      AfterPoint@1002 : Decimal;
      Places@1003 : Integer;
      Minus@1004 : Boolean;
    BEGIN
      Minus := (Amount < 0);
      if Minus then
        Amount := -Amount;
      BeforePoint := ROUND(Amount,1,'<');
      AfterPoint := Amount - BeforePoint;
      Places := 0;
      while ROUND(AfterPoint,1) <> AfterPoint do begin
        AfterPoint := AfterPoint * 10;
        Places := Places + 1;
      end;
      XMLText :=
        FORMAT(BeforePoint,0,1) + '.' + CONVERTSTR(FORMAT(AfterPoint,Places,1),' ','0');
      if Minus then
        XMLText := '-' + XMLText;
    END;

    LOCAL PROCEDURE XMLTextToDecimal@6(XMLText@1000 : Text[30]) Amount : Decimal;
    VAR
      BeforePoint@1003 : Decimal;
      AfterPoint@1002 : Decimal;
      BeforeText@1001 : Text[30];
      AfterText@1004 : Text[30];
      Minus@1005 : Boolean;
      Places@1006 : Integer;
      Point@1007 : Integer;
    BEGIN
      if STRLEN(XMLText) = 0 then
        exit(0);
      Minus := (XMLText[1] = '-');
      if Minus then
        XMLText := DELSTR(XMLText,1,1);
      Point := STRLEN(XMLText);
      AfterText := '';
      while (XMLText[Point] in ['0','1','2','3','4','5','6','7','8','9']) and
            (Point > 1)
      do begin
        Places := Places + 1;
        AfterText := ' ' + AfterText;
        AfterText[1] := XMLText[Point];
        Point := Point - 1;
      end;
      BeforeText := DELCHR(COPYSTR(XMLText,1,Point),'=','.,');
      EVALUATE(BeforePoint,BeforeText);
      EVALUATE(AfterPoint,AfterText);
      while Places > 0 do begin
        AfterPoint := AfterPoint / 10;
        Places := Places - 1;
      end;
      Amount := BeforePoint + AfterPoint;
      if Minus then
        Amount := -Amount;
    END;

    BEGIN
    END.
  }
}

