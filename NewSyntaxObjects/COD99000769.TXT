OBJECT Codeunit 99000769 Production BOM-Check
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Production BOM Header";
    Permissions=TableData Item=r,
                TableData "Routing Line"=r,
                TableData "Manufacturing Setup"=r;
    OnRun=BEGIN
            Code(Rec,'');
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Checking Item           #1########## @2@@@@@@@@@@@@@';
      Text001@1001 : TextConst 'ENU=The maximum number of BOM levels, %1, was exceeded. The process stopped at item number %2, BOM header number %3, BOM level %4.';
      Text003@1002 : TextConst 'ENU=%1 with %2 %3 cannot be found. Check %4 %5 %6 %7.';
      Item@1003 : Record Item;
      ItemUnitOfMeasure@1004 : Record "Item Unit of Measure";
      RtngLine@1005 : Record "Routing Line";
      MfgSetup@1006 : Record "Manufacturing Setup";
      VersionMgt@1007 : Codeunit VersionManagement;
      CalcLowLevel@1008 : Codeunit "Calculate Low-Level Code";
      Window@1009 : Dialog;
      NoOfItems@1010 : Integer;
      ItemCounter@1011 : Integer;

    [External]
    PROCEDURE Code@1(VAR ProdBOMHeader@1000 : Record "Production BOM Header";VersionCode@1001 : Code[20]);
    BEGIN
      ProdBOMHeader.TESTFIELD("Unit of Measure Code");
      MfgSetup.GET;
      if MfgSetup."Dynamic Low-Level Code" then begin
        CalcLowLevel.SetActualProdBOM(ProdBOMHeader);
        ProdBOMHeader."Low-Level Code" := CalcLowLevel.CalcLevels(2,ProdBOMHeader."No.",ProdBOMHeader."Low-Level Code",1);
        CalcLowLevel.RecalcLowerLevels(ProdBOMHeader."No.",ProdBOMHeader."Low-Level Code",false);
        ProdBOMHeader.MODIFY;
      end;

      Item.SETCURRENTKEY("Production BOM No.");
      Item.SETRANGE("Production BOM No.",ProdBOMHeader."No.");

      if Item.FIND('-') then begin
        if GUIALLOWED then
          Window.OPEN(Text000);
        NoOfItems := Item.COUNT;
        ItemCounter := 0;
        repeat
          ItemCounter := ItemCounter + 1;

          if GUIALLOWED then begin
            Window.UPDATE(1,Item."No.");
            Window.UPDATE(2,ROUND(ItemCounter / NoOfItems * 10000,1));
          end;
          if MfgSetup."Dynamic Low-Level Code" then
            CalcLowLevel.RUN(Item);
          if Item."Routing No." <> '' then
            CheckBOMStructure(ProdBOMHeader."No.",VersionCode,1);
          ItemUnitOfMeasure.GET(Item."No.",ProdBOMHeader."Unit of Measure Code");
        until Item.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CheckBOMStructure@2(BOMHeaderNo@1000 : Code[20];VersionCode@1001 : Code[20];Level@1002 : Integer);
    VAR
      ProdBOMHeader@1003 : Record "Production BOM Header";
      ProdBOMComponent@1004 : Record "Production BOM Line";
    BEGIN
      if Level > 99 then
        ERROR(
          Text001,
          99,BOMHeaderNo,Item."Production BOM No.",Level);

      ProdBOMHeader.GET(BOMHeaderNo);

      ProdBOMComponent.SETRANGE("Production BOM No.",BOMHeaderNo);
      ProdBOMComponent.SETRANGE("Version Code",VersionCode);
      ProdBOMComponent.SETFILTER("No.",'<>%1','');

      if ProdBOMComponent.FIND('-') then
        repeat
          case ProdBOMComponent.Type of
            ProdBOMComponent.Type::Item:
              if ProdBOMComponent."Routing Link Code" <> '' then begin
                Item.TESTFIELD("Routing No.");
                RtngLine.SETRANGE("Routing No.",Item."Routing No.");
                RtngLine.SETRANGE("Routing Link Code",ProdBOMComponent."Routing Link Code");
                if not RtngLine.FINDFIRST then
                  ERROR(
                    Text003,
                    RtngLine.TABLECAPTION,
                    RtngLine.FIELDCAPTION("Routing Link Code"),
                    ProdBOMComponent."Routing Link Code",
                    ProdBOMComponent.FIELDCAPTION("Production BOM No."),
                    ProdBOMComponent."Production BOM No.",
                    ProdBOMComponent.FIELDCAPTION("Line No."),
                    ProdBOMComponent."Line No.");
              end;
            ProdBOMComponent.Type::"Production BOM":
              CheckBOMStructure(
                ProdBOMComponent."No.",
                VersionMgt.GetBOMVersion(ProdBOMComponent."No.",WORKDATE,true),Level + 1);
          end;
        until ProdBOMComponent.NEXT = 0;
    END;

    [External]
    PROCEDURE ProdBOMLineCheck@3(ProdBOMNo@1001 : Code[20];VersionCode@1002 : Code[20]);
    VAR
      ProdBOMLine@1000 : Record "Production BOM Line";
    BEGIN
      ProdBOMLine.SETRANGE("Production BOM No.",ProdBOMNo);
      ProdBOMLine.SETRANGE("Version Code",VersionCode);
      ProdBOMLine.SETFILTER(Type,'<>%1',ProdBOMLine.Type::" ");
      ProdBOMLine.SETRANGE("No.",'');
      if ProdBOMLine.FINDFIRST then
        ProdBOMLine.FIELDERROR("No.");
    END;

    BEGIN
    END.
  }
}

