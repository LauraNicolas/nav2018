OBJECT Codeunit 5461 Graph Int. - Contact
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      BusinessTypeMissingErr@1000 : TextConst '@@@={Locked};ENU=BusinessType is not present on Graph Contact.';
      BusinessTypeUnknownValueErr@1001 : TextConst '@@@={Locked};ENU=BusinessType has an invalid value: %1.';
      BusinessCategoryMissingErr@1002 : TextConst '@@@={Locked};ENU=The Graph Contact must have 1 or more business category fields.';
      BusinessCategoryWrongValueErr@1003 : TextConst '@@@={Locked};ENU=The business category has an invalid value: %1.\%2.';
      NoBusinessCategoryErr@1004 : TextConst '@@@={Locked};ENU=At least one business category must be set to True.';
      CannotGetGraphXrmIdErr@1005 : TextConst '@@@={Locked};ENU=Cannot find the graph XrmId for graph record id %1.';

    [EventSubscriber(Codeunit,5345,OnAfterTransferRecordFields)]
    LOCAL PROCEDURE OnAfterTransferRecordFields@35(VAR SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR AdditionalFieldsWereModified@1000 : Boolean);
    VAR
      Contact@1003 : Record Contact;
      GraphContact@1004 : Record "Graph Contact";
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Contact-Graph Contact':
          begin
            DestinationRecordRef.SETTABLE(GraphContact);
            SourceRecordRef.SETTABLE(Contact);
            SetContactFieldsOnGraph(Contact,GraphContact);
            SetIntegrationIdFieldOnGraph(Contact,GraphContact);
            AdditionalFieldsWereModified := true;
            DestinationRecordRef.GETTABLE(GraphContact);
          end;
      end;
    END;

    [EventSubscriber(Codeunit,5345,OnBeforeInsertRecord)]
    LOCAL PROCEDURE OnBeforeInsertRecord@1(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1000 : RecordRef);
    VAR
      Contact@1002 : Record Contact;
      GraphContact@1004 : Record "Graph Contact";
      GraphCollectionMgtContact@1005 : Codeunit "Graph Collection Mgt - Contact";
      ContactType@1006 : Option;
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Graph Contact-Contact':
          begin
            DestinationRecordRef.SETTABLE(Contact);
            SourceRecordRef.SETTABLE(GraphContact);
            VerifyGraphContactRequiredData(GraphContact);
            ContactType := Contact.Type;
            GraphCollectionMgtContact.GetBusinessType(GraphContact.GetBusinessTypeString,ContactType);
            Contact.Type := ContactType;
            SetGraphFieldsOnContact(GraphContact,Contact);
            DestinationRecordRef.GETTABLE(Contact);
          end;
      end;
    END;

    [EventSubscriber(Codeunit,5345,OnAfterInsertRecord)]
    LOCAL PROCEDURE OnAfterInsertRecord@45(VAR SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    VAR
      Contact@1003 : Record Contact;
      GraphContact@1004 : Record "Graph Contact";
      ModifySourceRecord@1005 : Boolean;
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Graph Contact-Contact':
          begin
            DestinationRecordRef.SETTABLE(Contact);
            SourceRecordRef.SETTABLE(GraphContact);
            SetContactBusinessRelations(GraphContact,Contact);
            CheckAndFixDisplayName(GraphContact,Contact,ModifySourceRecord);
            ModifySourceGraphContact(GraphContact,ModifySourceRecord);
            DestinationRecordRef.GETTABLE(Contact);
            SourceRecordRef.GETTABLE(GraphContact);
          end;
      end;
    END;

    [EventSubscriber(Codeunit,5345,OnBeforeModifyRecord)]
    LOCAL PROCEDURE OnBeforeModifyRecord@12(IntegrationTableMapping@1000 : Record "Integration Table Mapping";SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    VAR
      GraphContact@1003 : Record "Graph Contact";
      Contact@1004 : Record Contact;
      ModifySource@1005 : Boolean;
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Graph Contact-Contact':
          begin
            DestinationRecordRef.SETTABLE(Contact);
            SourceRecordRef.SETTABLE(GraphContact);
            VerifyGraphContactRequiredData(GraphContact);
            SetGraphFieldsOnContact(GraphContact,Contact);
            SetContactBusinessRelations(GraphContact,Contact);
            DestinationRecordRef.GETTABLE(Contact);
          end;
        'Contact-Graph Contact':
          begin
            DestinationRecordRef.SETTABLE(GraphContact);
            SourceRecordRef.SETTABLE(Contact);
            CheckAndFixContactBusinessRelations(GraphContact,Contact,ModifySource);
            if ModifySource then
              DestinationRecordRef.GETTABLE(GraphContact);
          end;
      end;
    END;

    [EventSubscriber(Codeunit,5345,OnAfterModifyRecord)]
    LOCAL PROCEDURE OnAfterModifyRecord@51(VAR SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    VAR
      GraphContact@1000 : Record "Graph Contact";
      Contact@1003 : Record Contact;
      ModifySourceRecord@1004 : Boolean;
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Graph Contact-Contact':
          begin
            DestinationRecordRef.SETTABLE(Contact);
            SourceRecordRef.SETTABLE(GraphContact);
            SetContactBusinessRelations(GraphContact,Contact);
            CheckAndFixContactBusinessRelations(GraphContact,Contact,ModifySourceRecord);
            CheckAndFixDisplayName(GraphContact,Contact,ModifySourceRecord);
            ModifySourceGraphContact(GraphContact,ModifySourceRecord);
            SourceRecordRef.GETTABLE(GraphContact);
          end;
      end;
    END;

    [EventSubscriber(Codeunit,5347,OnBeforeDeleteRecord)]
    [Internal]
    LOCAL PROCEDURE OnBeforeDeleteRecord@13(IntegrationTableMapping@1000 : Record "Integration Table Mapping";VAR DestinationRecordRef@1001 : RecordRef);
    VAR
      Contact@1003 : Record Contact;
    BEGIN
      case GetDestCode(DestinationRecordRef) of
        'Contact':
          begin
            DestinationRecordRef.SETTABLE(Contact);
            BlockCustVendBank(Contact);
          end;
      end;
    END;

    PROCEDURE FindOrCreateCustomerFromGraphContactSafe@16(GraphContactId@1000 : Text[250];VAR Customer@1001 : Record Customer;VAR Contact@1006 : Record Contact) : Boolean;
    VAR
      MarketingSetup@1008 : Record "Marketing Setup";
    BEGIN
      if not FindContactFromGraphId(GraphContactId,Contact) then begin
        SyncFromGraphSynchronously;
        if not FindContactFromGraphId(GraphContactId,Contact) then
          exit(false);
      end;

      if FindCustomerFromContact(Customer,Contact) then
        exit(true);

      // Promote contact to customer
      if not MarketingSetup.GET then
        exit(false);

      if MarketingSetup."Bus. Rel. Code for Customers" = '' then
        exit(false);

      Contact.SetHideValidationDialog(true);
      Contact.CreateCustomer(MarketingSetup.GetCustomerTemplate(Contact.Type));

      // This line triggers sync back to graph via Background session
      // We need to update IsCustomer flag back to Graph
      // FindCustomerFromGraphContact function is used in the web services
      // We must be able to revert changes back, thus background session is needed (there are several COMMITs)
      Contact.MODIFY(true);

      exit(FindCustomerFromContact(Customer,Contact));
    END;

    LOCAL PROCEDURE FindContactFromGraphId@22(GraphContactId@1000 : Text[250];VAR Contact@1006 : Record Contact) : Boolean;
    VAR
      DummyGraphIntegrationRecord@1002 : Record "Graph Integration Record";
      SearchGraphIntegrationRecord@1007 : Record "Graph Integration Record";
      ContactRecordID@1005 : RecordID;
      ContactXrmId@1004 : GUID;
    BEGIN
      if GraphContactId = '' then
        exit(false);

      if EVALUATE(ContactXrmId,GraphContactId) then begin
        SearchGraphIntegrationRecord.SETRANGE(XRMId,ContactXrmId);
        if not SearchGraphIntegrationRecord.FINDFIRST then
          exit(false);

        GraphContactId := SearchGraphIntegrationRecord."Graph ID";
      end;

      if not DummyGraphIntegrationRecord.FindRecordIDFromID(GraphContactId,DATABASE::Contact,ContactRecordID) then
        exit(false);

      exit(Contact.GET(ContactRecordID));
    END;

    LOCAL PROCEDURE FindCustomerFromContact@26(VAR Customer@1001 : Record Customer;VAR Contact@1006 : Record Contact) : Boolean;
    VAR
      ContactBusinessRelation@1003 : Record "Contact Business Relation";
    BEGIN
      // Check primary contact first
      Customer.SETRANGE("Primary Contact No.",Contact."No.");
      if Customer.FINDFIRST then
        exit(true);

      Customer.SETRANGE("Primary Contact No.");
      ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      ContactBusinessRelation.SETRANGE("Contact No.",Contact."No.");

      if not ContactBusinessRelation.FINDFIRST then
        exit(false);

      exit(Customer.GET(ContactBusinessRelation."No."));
    END;

    PROCEDURE FindGraphContactIdFromCustomer@18(VAR GraphContactId@1000 : Text[250];VAR Customer@1001 : Record Customer;VAR Contact@1006 : Record Contact) : Boolean;
    VAR
      GraphIntegrationRecord@1002 : Record "Graph Integration Record";
      ContactBusinessRelation@1003 : Record "Contact Business Relation";
      MarketingSetup@1007 : Record "Marketing Setup";
      ContactNo@1004 : Code[20];
    BEGIN
      // Use primary contact if specified
      if Customer."Primary Contact No." <> '' then
        ContactNo := Customer."Primary Contact No."
      else begin
        ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
        ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
        ContactBusinessRelation.SETRANGE("No.",Customer."No.");
        if MarketingSetup.GET then
          ContactBusinessRelation.SETRANGE("Business Relation Code",MarketingSetup."Bus. Rel. Code for Customers");

        if not ContactBusinessRelation.FINDFIRST then
          exit(false);

        ContactNo := ContactBusinessRelation."Contact No.";
      end;

      if not Contact.GET(ContactNo) then
        exit(false);

      exit(GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphContactId));
    END;

    PROCEDURE FindGraphContactIdFromCustomerNo@19(VAR GraphContactID@1002 : Text[250];CustomerNo@1001 : Code[20]) : Boolean;
    VAR
      Customer@1000 : Record Customer;
      DummyContact@1003 : Record Contact;
    BEGIN
      if not Customer.GET(CustomerNo) then
        exit;

      exit(FindGraphContactIdFromCustomer(GraphContactID,Customer,DummyContact));
    END;

    PROCEDURE FindGraphContactIdFromVendor@27(VAR GraphContactId@1000 : Text[250];VAR Vendor@1001 : Record Vendor;VAR Contact@1006 : Record Contact) : Boolean;
    VAR
      GraphIntegrationRecord@1002 : Record "Graph Integration Record";
      ContactBusinessRelation@1003 : Record "Contact Business Relation";
      MarketingSetup@1007 : Record "Marketing Setup";
      ContactNo@1004 : Code[20];
    BEGIN
      // Use primary contact if specified
      if Vendor."Primary Contact No." <> '' then
        ContactNo := Vendor."Primary Contact No."
      else begin
        ContactBusinessRelation.SETCURRENTKEY("Link to Table","No.");
        ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
        ContactBusinessRelation.SETRANGE("No.",Vendor."No.");
        if MarketingSetup.GET then
          ContactBusinessRelation.SETRANGE("Business Relation Code",MarketingSetup."Bus. Rel. Code for Vendors");

        if not ContactBusinessRelation.FINDFIRST then
          exit(false);

        ContactNo := ContactBusinessRelation."Contact No.";
      end;

      if not Contact.GET(ContactNo) then
        exit(false);

      exit(GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphContactId));
    END;

    LOCAL PROCEDURE GetSourceDestCode@38(SourceRecordRef@1001 : RecordRef;DestinationRecordRef@1000 : RecordRef) : Text;
    BEGIN
      if (SourceRecordRef.NUMBER <> 0) and (DestinationRecordRef.NUMBER <> 0) then
        exit(STRSUBSTNO('%1-%2',SourceRecordRef.NAME,DestinationRecordRef.NAME));
      exit('');
    END;

    LOCAL PROCEDURE GetDestCode@14(DestinationRecordRef@1000 : RecordRef) : Text;
    BEGIN
      if DestinationRecordRef.NUMBER <> 0 then
        exit(STRSUBSTNO('%1',DestinationRecordRef.NAME));
      exit('');
    END;

    LOCAL PROCEDURE SetContactFieldsOnGraph@2(Contact@1001 : Record Contact;VAR GraphContact@1000 : Record "Graph Contact");
    VAR
      GraphCollectionMgtContact@1002 : Codeunit "Graph Collection Mgt - Contact";
      EmailAddressesString@1005 : Text;
      BusinessTypeString@1006 : Text;
      IsNavCreatedString@1013 : Text;
      IsLead@1010 : Boolean;
      IsPartner@1011 : Boolean;
      IsContact@1012 : Boolean;
    BEGIN
      // Avoid syncing contacts without a name to Graph, which may be created because of creating a Customer without a name.
      Contact.TESTFIELD(Name);

      if Contact.Type = Contact.Type::Company then
        GraphContact.DisplayName := Contact."Company Name"
      else
        if (Contact."First Name" in ['',' ']) and (Contact."Middle Name" = '') and (Contact.Surname = '') then
          GraphContact.DisplayName := Contact.Name;

      // E-MailAddresses:
      EmailAddressesString := GraphContact.GetEmailAddressesString;
      EmailAddressesString := GraphCollectionMgtContact.UpdateEmailAddress(EmailAddressesString,0,Contact."E-Mail");
      EmailAddressesString := GraphCollectionMgtContact.UpdateEmailAddress(EmailAddressesString,1,Contact."E-Mail 2");
      GraphContact.SetEmailAddressesString(EmailAddressesString);

      // Extensions
      BusinessTypeString := GraphCollectionMgtContact.AddBusinessType(Contact.Type);
      GraphContact.SetBusinessTypeString(BusinessTypeString);

      // If the property exists OR IsCustomer = TRUE then set the property, else leave empty.
      UpdateBusinessCategoriesFromNAV(Contact,GraphContact);

      if GraphContact.Id = '' then begin // new graph contact
        IsNavCreatedString := GraphCollectionMgtContact.AddIsNavCreated(true);
        GraphContact.SetIsNavCreatedString(IsNavCreatedString);
      end;

      IsLead := GraphCollectionMgtContact.GetIsLead(GraphContact.GetIsLeadString);
      IsPartner := GraphCollectionMgtContact.GetIsPartner(GraphContact.GetIsPartnerString);
      IsContact := GraphCollectionMgtContact.GetIsContact(GraphContact.GetIsContactString);

      // at least 1 must be true. If none are true, set IsContact = TRUE
      if not (CheckIsBank(Contact) or CheckIsCustomer(Contact) or CheckIsVendor(Contact) or IsLead or IsPartner or IsContact) then
        GraphContact.SetIsContactString(GraphCollectionMgtContact.AddIsContact(true));

      // Comments
      GraphContact.SetPersonalNotesString(GraphCollectionMgtContact.GetContactComments(Contact));
    END;

    LOCAL PROCEDURE SetGraphFieldsOnContact@8(GraphContact@1003 : Record "Graph Contact";VAR Contact@1002 : Record Contact);
    VAR
      GraphCollectionMgtContact@1004 : Codeunit "Graph Collection Mgt - Contact";
      DummyName@1005 : Text;
    BEGIN
      if Contact.Type = Contact.Type::Company then begin
        if (GraphContact.DisplayName = '') and (GraphContact.CompanyName <> '') then
          Contact.VALIDATE(Name,COPYSTR(GraphContact.CompanyName,1,MAXSTRLEN(Contact.Name)))
        else
          Contact.VALIDATE(Name,COPYSTR(GraphContact.DisplayName,1,MAXSTRLEN(Contact.Name)));
      end else
        Contact.VALIDATE("First Name");

      // E-MailAddresses:
      GraphCollectionMgtContact.InitializeCollection(GraphContact.GetEmailAddressesString);
      GraphCollectionMgtContact.GetEmailAddress(0,DummyName,Contact."E-Mail");
      GraphCollectionMgtContact.GetEmailAddress(1,DummyName,Contact."E-Mail 2");

      // Comments
      GraphCollectionMgtContact.SetContactComments(Contact,GraphContact.GetPersonalNotesString);
    END;

    LOCAL PROCEDURE SetContactBusinessRelations@9(GraphContact@1001 : Record "Graph Contact";VAR Contact@1000 : Record Contact);
    VAR
      MarketingSetup@1005 : Record "Marketing Setup";
      GraphCollectionMgtContact@1002 : Codeunit "Graph Collection Mgt - Contact";
    BEGIN
      if MarketingSetup.GET then begin
        // IsCustomer
        Contact.SetHideValidationDialog(true);
        if MarketingSetup."Bus. Rel. Code for Customers" <> '' then
          if GraphCollectionMgtContact.GetIsCustomer(GraphContact.GetIsCustomerString) and
             not CheckIsCustomer(Contact)
          then
            Contact.CreateCustomer(MarketingSetup.GetCustomerTemplate(Contact.Type));

        if Contact.Type = Contact.Type::Company then begin
          // IsVendor
          if MarketingSetup."Bus. Rel. Code for Vendors" <> '' then
            if GraphCollectionMgtContact.GetIsVendor(GraphContact.GetIsVendorString) and
               not CheckIsVendor(Contact)
            then
              Contact.CreateVendor;

          // IsBank
          if MarketingSetup."Bus. Rel. Code for Bank Accs." <> '' then
            if GraphCollectionMgtContact.GetIsBank(GraphContact.GetIsBankString) and
               not CheckIsBank(Contact)
            then
              Contact.CreateBankAccount;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateBusinessCategoriesFromNAV@25(VAR Contact@1000 : Record Contact;VAR GraphContact@1001 : Record "Graph Contact") Modified : Boolean;
    VAR
      GraphCollectionMgtContact@1005 : Codeunit "Graph Collection Mgt - Contact";
      IsBankString@1010 : Text;
      IsCustomerString@1011 : Text;
      IsVendorString@1012 : Text;
      GraphIsBank@1008 : Boolean;
      GraphIsCustomer@1004 : Boolean;
      GraphIsVendor@1003 : Boolean;
      NavIsBank@1006 : Boolean;
      NavIsCustomer@1007 : Boolean;
      NavIsVendor@1009 : Boolean;
    BEGIN
      // Checks for inconsistencies in the business category fields and updates the graph contact accordingly

      GraphIsBank := GraphCollectionMgtContact.GetIsBank(GraphContact.GetIsBankString);
      GraphIsCustomer := GraphCollectionMgtContact.GetIsCustomer(GraphContact.GetIsCustomerString);
      GraphIsVendor := GraphCollectionMgtContact.GetIsVendor(GraphContact.GetIsVendorString);

      NavIsBank := CheckIsBank(Contact);
      NavIsCustomer := CheckIsCustomer(Contact);
      NavIsVendor := CheckIsVendor(Contact);

      if GraphIsBank <> NavIsBank then begin
        IsBankString := GraphCollectionMgtContact.AddIsBank(NavIsBank);
        GraphContact.SetIsBankString(IsBankString);
        Modified := true;
      end;

      if GraphIsCustomer <> NavIsCustomer then begin
        IsCustomerString := GraphCollectionMgtContact.AddIsCustomer(NavIsCustomer);
        GraphContact.SetIsCustomerString(IsCustomerString);
        Modified := true;
      end;

      if GraphIsVendor <> NavIsVendor then begin
        IsVendorString := GraphCollectionMgtContact.AddIsVendor(NavIsVendor);
        GraphContact.SetIsVendorString(IsVendorString);
        Modified := true;
      end;
    END;

    LOCAL PROCEDURE CheckIsCustomer@5(Contact@1001 : Record Contact) : Boolean;
    VAR
      ContactBusinessRelation@1000 : Record "Contact Business Relation";
    BEGIN
      ContactBusinessRelation.SETRANGE("Contact No.",Contact."No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      exit(not ContactBusinessRelation.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckIsVendor@6(Contact@1000 : Record Contact) : Boolean;
    VAR
      ContactBusinessRelation@1001 : Record "Contact Business Relation";
    BEGIN
      ContactBusinessRelation.SETRANGE("Contact No.",Contact."No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      exit(not ContactBusinessRelation.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckIsBank@7(Contact@1001 : Record Contact) : Boolean;
    VAR
      ContactBusinessRelation@1000 : Record "Contact Business Relation";
    BEGIN
      ContactBusinessRelation.SETRANGE("Contact No.",Contact."No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::"Bank Account");
      exit(not ContactBusinessRelation.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckAndFixContactBusinessRelations@3(VAR GraphContact@1001 : Record "Graph Contact";Contact@1000 : Record Contact;VAR ModifySourceRecord@1002 : Boolean);
    BEGIN
      ModifySourceRecord := UpdateBusinessCategoriesFromNAV(Contact,GraphContact) or ModifySourceRecord;
    END;

    LOCAL PROCEDURE CheckAndFixDisplayName@4(VAR GraphContact@1000 : Record "Graph Contact";VAR Contact@1001 : Record Contact;VAR ModifySourceRecord@1002 : Boolean);
    BEGIN
      if (GraphContact.DisplayName = '') and (Contact.Name <> '') then begin
        GraphContact.DisplayName := Contact.Name;
        ModifySourceRecord := true;
      end;
    END;

    LOCAL PROCEDURE ModifySourceGraphContact@11(VAR GraphContact@1000 : Record "Graph Contact";ModifySourceRecord@1001 : Boolean);
    BEGIN
      if ModifySourceRecord then
        GraphContact.MODIFY(true);
    END;

    LOCAL PROCEDURE VerifyGraphContactRequiredData@10(GraphContact@1000 : Record "Graph Contact");
    VAR
      GraphCollectionMgtContact@1001 : Codeunit "Graph Collection Mgt - Contact";
      Value@1002 : Text;
      BusinessTypeString@1009 : Text;
      IsCustomerString@1003 : Text;
      IsVendorString@1004 : Text;
      IsBankString@1005 : Text;
      IsContactString@1006 : Text;
      IsLeadString@1007 : Text;
      IsPartnerString@1008 : Text;
      HasBusinessCategory@1010 : Boolean;
    BEGIN
      BusinessTypeString := GraphContact.GetBusinessTypeString;

      // GraphContact MUST contain BusinessType
      if not GraphCollectionMgtContact.HasBusinessType(BusinessTypeString) then
        ERROR(BusinessTypeMissingErr);

      // BusinessType MUST contain a valid value
      if not GraphCollectionMgtContact.TryGetBusinessTypeValue(BusinessTypeString,Value) then
        ERROR(BusinessTypeUnknownValueErr,Value);

      IsCustomerString := GraphContact.GetIsCustomerString;
      IsVendorString := GraphContact.GetIsVendorString;
      IsBankString := GraphContact.GetIsBankString;
      IsContactString := GraphContact.GetIsContactString;
      IsLeadString := GraphContact.GetIsLeadString;
      IsPartnerString := GraphContact.GetIsPartnerString;

      // At least one of the Business Category fields must be present
      if not (GraphCollectionMgtContact.HasIsCustomer(IsCustomerString) or
              GraphCollectionMgtContact.HasIsVendor(IsVendorString) or
              GraphCollectionMgtContact.HasIsBank(IsBankString) or
              GraphCollectionMgtContact.HasIsContact(IsContactString) or
              GraphCollectionMgtContact.HasIsLead(IsLeadString) or
              GraphCollectionMgtContact.HasIsPartner(IsPartnerString))
      then
        ERROR(BusinessCategoryMissingErr);

      // Business Category fields MUST contain a valid value
      // At least 1 Business Category must be set to TRUE
      if GraphCollectionMgtContact.HasIsCustomer(IsCustomerString) then begin
        if not GraphCollectionMgtContact.TryGetIsCustomerValue(IsCustomerString,Value) then
          ERROR(BusinessCategoryWrongValueErr,GETLASTERRORTEXT,IsCustomerString);
        if GraphCollectionMgtContact.GetIsCustomer(IsCustomerString) then
          HasBusinessCategory := true;
      end;

      if GraphCollectionMgtContact.HasIsVendor(IsVendorString) then begin
        if not GraphCollectionMgtContact.TryGetIsVendorValue(IsVendorString,Value) then
          ERROR(BusinessCategoryWrongValueErr,GETLASTERRORTEXT,IsVendorString);
        if GraphCollectionMgtContact.GetIsVendor(IsVendorString) then
          HasBusinessCategory := true;
      end;

      if GraphCollectionMgtContact.HasIsBank(IsBankString) then begin
        if not GraphCollectionMgtContact.TryGetIsBankValue(IsBankString,Value) then
          ERROR(BusinessCategoryWrongValueErr,GETLASTERRORTEXT,IsBankString);
        if GraphCollectionMgtContact.GetIsBank(IsBankString) then
          HasBusinessCategory := true;
      end;

      if GraphCollectionMgtContact.HasIsContact(IsContactString) then begin
        if not GraphCollectionMgtContact.TryGetIsContactValue(IsContactString,Value) then
          ERROR(BusinessCategoryWrongValueErr,GETLASTERRORTEXT,IsContactString);
        if GraphCollectionMgtContact.GetIsContact(IsContactString) then
          HasBusinessCategory := true;
      end;

      if GraphCollectionMgtContact.HasIsLead(IsLeadString) then begin
        if not GraphCollectionMgtContact.TryGetIsLeadValue(IsLeadString,Value) then
          ERROR(BusinessCategoryWrongValueErr,GETLASTERRORTEXT,IsLeadString);
        if GraphCollectionMgtContact.GetIsLead(IsLeadString) then
          HasBusinessCategory := true;
      end;

      if GraphCollectionMgtContact.HasIsPartner(IsPartnerString) then begin
        if not GraphCollectionMgtContact.TryGetIsPartnerValue(IsPartnerString,Value) then
          ERROR(BusinessCategoryWrongValueErr,GETLASTERRORTEXT,IsPartnerString);
        if GraphCollectionMgtContact.GetIsPartner(IsPartnerString) then
          HasBusinessCategory := true;
      end;

      if not HasBusinessCategory then
        ERROR(NoBusinessCategoryErr);
    END;

    LOCAL PROCEDURE BlockCustVendBank@15(DeletedContact@1000 : Record Contact);
    VAR
      ContactBusinessRelation@1001 : Record "Contact Business Relation";
      Customer@1002 : Record Customer;
      Vendor@1003 : Record Vendor;
      BankAccount@1004 : Record "Bank Account";
    BEGIN
      ContactBusinessRelation.SETRANGE("Contact No.",DeletedContact."No.");
      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Customer);
      if ContactBusinessRelation.FINDFIRST then
        if Customer.GET(ContactBusinessRelation."No.") then begin
          Customer.Blocked := Customer.Blocked::All;
          Customer.MODIFY;
        end;

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::Vendor);
      if ContactBusinessRelation.FINDFIRST then
        if Vendor.GET(ContactBusinessRelation."No.") then begin
          Vendor.Blocked := Vendor.Blocked::All;
          Vendor.MODIFY;
        end;

      ContactBusinessRelation.SETRANGE("Link to Table",ContactBusinessRelation."Link to Table"::"Bank Account");
      if ContactBusinessRelation.FINDFIRST then
        if BankAccount.GET(ContactBusinessRelation."No.") then begin
          BankAccount.Blocked := true;
          BankAccount.MODIFY;
        end;
    END;

    LOCAL PROCEDURE SetIntegrationIdFieldOnGraph@17(VAR Contact@1000 : Record Contact;VAR GraphContact@1001 : Record "Graph Contact");
    VAR
      IntegrationRecord@1002 : Record "Integration Record";
      GraphCollectionMgtContact@1003 : Codeunit "Graph Collection Mgt - Contact";
      IntegrationIdString@1004 : Text;
    BEGIN
      if not IntegrationRecord.FindByRecordId(Contact.RECORDID) then
        exit;

      IntegrationIdString := GraphCollectionMgtContact.AddNavIntegrationId(IntegrationRecord."Integration ID");
      GraphContact.SetNavIntegrationIdString(IntegrationIdString);
    END;

    PROCEDURE SetXRMId@21(VAR GraphIntegrationRecord@1002 : Record "Graph Integration Record");
    VAR
      GraphContact@1004 : Record "Graph Contact";
      XrmID@1000 : GUID;
    BEGIN
      if not (GraphIntegrationRecord."Table ID" = DATABASE::Contact) then
        exit;

      if not GraphContact.GET(GraphIntegrationRecord."Graph ID") then
        exit;

      if GraphContact.GetXrmId(XrmID) then
        GraphIntegrationRecord.XRMId := XrmID;
    END;

    PROCEDURE UpdateBlankXrmIds@20();
    VAR
      GraphIntegrationRecord@1007 : Record "Graph Integration Record";
      GraphContact@1006 : Record "Graph Contact";
      GraphConnectionSetup@1005 : Codeunit "Graph Connection Setup";
      GraphSyncRunner@1004 : Codeunit "Graph Sync. Runner";
      BlankGuid@1003 : GUID;
      XrmId@1002 : GUID;
      InboundConnectionName@1001 : Text;
    BEGIN
      if not GraphSyncRunner.IsGraphSyncEnabled then
        exit;

      GraphIntegrationRecord.SETRANGE(XRMId,BlankGuid);
      GraphIntegrationRecord.SETRANGE("Table ID",DATABASE::Contact);
      if not GraphIntegrationRecord.FINDSET(true,false) then
        exit;

      InboundConnectionName := GraphConnectionSetup.GetInboundConnectionName(DATABASE::Contact);

      if not HASTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,InboundConnectionName) then
        REGISTERTABLECONNECTION(
          TABLECONNECTIONTYPE::MicrosoftGraph,InboundConnectionName,
          GraphConnectionSetup.GetInboundConnectionString(DATABASE::Contact));

      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::MicrosoftGraph,InboundConnectionName,true);

      repeat
        if GetGraphContact(GraphContact,GraphIntegrationRecord) then begin
          if not GraphContact.GetXrmId(XrmId) then
            ERROR(CannotGetGraphXrmIdErr,GraphIntegrationRecord."Graph ID");
          GraphIntegrationRecord.XRMId := XrmId;
          GraphIntegrationRecord.MODIFY;
        end;
      until GraphIntegrationRecord.NEXT = 0;
    END;

    [TryFunction]
    LOCAL PROCEDURE GetGraphContact@24(VAR GraphContact@1000 : Record "Graph Contact";GraphIntegrationRecord@1001 : Record "Graph Integration Record");
    BEGIN
      GraphContact.GET(GraphIntegrationRecord."Graph ID");
    END;

    LOCAL PROCEDURE SyncFromGraphSynchronously@23();
    VAR
      SessionId@1000 : Integer;
      Timeout@1001 : Integer;
      TimeoutReached@1003 : Boolean;
      StartDateTime@1004 : DateTime;
      TimePassed@1005 : Duration;
    BEGIN
      // Start session will use CPU time of main thread while main thread is SLEEPing
      // Taskscheduler cannot be used since it requires a COMMIT to start
      SessionId := 0;
      if not STARTSESSION(SessionId,CODEUNIT::"Graph Subscription Management",COMPANYNAME) then
        exit;

      // Timeout after 30 seconds
      Timeout := 30;
      StartDateTime := CURRENTDATETIME;

      repeat
        SLEEP(100);
        if not ISSESSIONACTIVE(SessionId) then
          exit;

        TimePassed := CURRENTDATETIME - StartDateTime;
        TimeoutReached := TimePassed > Timeout * 1000;
      until TimeoutReached;
    END;

    BEGIN
    END.
  }
}

