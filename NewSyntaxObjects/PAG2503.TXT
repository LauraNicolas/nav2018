OBJECT Page 2503 Extension Installation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Extension Installation;
    SourceTable="NAV App";
    PageType=NavigatePage;
    SourceTableTemporary=true;
    OnOpenPage=VAR
                 WinLanguagesTable@1000 : Record "Windows Language";
                 NavAppTable@1001 : Record "NAV App";
                 NavExtensionInstallationMgmt@1002 : Codeunit NavExtensionInstallationMgmt;
               BEGIN
                 GetDetailsFromFilters;
                 ExtensionPkgId := "Package ID";
                 ExtensionAppId := ID;
                 TelemetryUrl := responseUrl;
                 ReviewVisible := false;

                 RESET;

                 NavAppTable.SETFILTER("Package ID",'%1',ExtensionPkgId);
                 ExtensionNotFound := not NavAppTable.FINDFIRST;

                 NotFoundMsg := STRSUBSTNO(ExtensionNotFoundLbl,'Package',ExtensionPkgId);

                 // If extension not found by package id, search for app id
                 if ExtensionNotFound and (not ISNULLGUID(ExtensionAppId)) then begin
                   NavAppTable.SETFILTER("Package ID",'%1',NavExtensionInstallationMgmt.GetLatestVersionPackageId(ExtensionAppId));
                   ExtensionNotFound := not NavAppTable.FINDFIRST;
                   NotFoundMsg := STRSUBSTNO(ExtensionNotFoundLbl,'App',ExtensionAppId);
                 end;

                 if not ExtensionNotFound then begin
                   ReviewVisible := true;

                   if Name = '' then
                     "Package ID" := NavAppTable."Package ID";

                   LanguageID := GLOBALLANGUAGE;
                   WinLanguagesTable.SETRANGE("Language ID",LanguageID);
                   if WinLanguagesTable.FINDFIRST then
                     LanguageName := WinLanguagesTable.Name;
                 end;

                 CurrPage.UPDATE;
               END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      Name=ActionContainer10;
                      ActionContainerType=ActionItems }
      { 17      ;1   ;Action    ;
                      Name=Ok;
                      ApplicationArea=#Basic,#Suite;
                      Visible=ExtensionNotFound;
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 CurrPage.CLOSE;
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=Install;
                      CaptionML=ENU=Install;
                      ApplicationArea=#Basic,#Suite;
                      Visible=ReviewVisible;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=VAR
                                 NavExtensionInstallationMgmt@1003 : Codeunit NavExtensionInstallationMgmt;
                                 ExtensionInstallationDialog@1002 : Page "Extension Installation Dialog";
                                 Dependencies@1000 : Text;
                                 CanChange@1001 : Boolean;
                                 Result@1005 : Option;
                               BEGIN
                                 CanChange := NavExtensionInstallationMgmt.IsInstalled("Package ID");

                                 if CanChange then begin
                                   MESSAGE(STRSUBSTNO(AlreadyInstalledMsg,Name));
                                   exit;
                                 end;

                                 Dependencies := NavExtensionInstallationMgmt.GetDependenciesForExtensionToInstall("Package ID");
                                 CanChange := (STRLEN(Dependencies) = 0);

                                 if not CanChange then
                                   CanChange := CONFIRM(STRSUBSTNO(DependenciesFoundQst,Name,Dependencies),false);

                                 Result := OperationResult::Successful;
                                 if CanChange then begin
                                   ExtensionInstallationDialog.SETRECORD(Rec);
                                   ExtensionInstallationDialog.SetLanguageId(LanguageID);
                                   if not (ExtensionInstallationDialog.RUNMODAL = ACTION::OK) then
                                     Result := OperationResult::DeploymentFailedDueToPackage;
                                 end;

                                 MakeTelemetryCallback(Result);
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container;
                ContainerType=ContentArea }

    { 7   ;1   ;Group     ;
                Name=Group7;
                Visible=ReviewVisible;
                GroupType=Group;
                Layout=Columns }

    { 9   ;2   ;Part      ;
                Name=ReviewPart;
                CaptionML=ENU=Review Extension Installation Details;
                ApplicationArea=#Basic,#Suite;
                SubPageView=SORTING("Package ID")
                            ORDER(Ascending);
                SubPageLink="Package ID"=FIELD("Package ID");
                PagePartID="Extension Details Part";
                PartType=Page;
                ShowFilter=false }

    { 3   ;2   ;Group     ;
                Name=Group3;
                GroupType=Group }

    { 6   ;3   ;Field     ;
                Name=Language;
                CaptionML=ENU=Language;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=LanguageName;
                OnValidate=VAR
                             WinLanguagesTable@1000 : Record "Windows Language";
                           BEGIN
                             WinLanguagesTable.SETRANGE(Name,LanguageName);
                             WinLanguagesTable.SETRANGE("Globally Enabled",true);
                             WinLanguagesTable.SETRANGE("Localization Exist",true);
                             if WinLanguagesTable.FINDFIRST then
                               LanguageID := WinLanguagesTable."Language ID"
                             else
                               ERROR(LanguageNotFoundErr,LanguageName);
                           END;

                OnLookup=VAR
                           WinLanguagesTable@1000 : Record "Windows Language";
                         BEGIN
                           WinLanguagesTable.SETRANGE("Globally Enabled",true);
                           WinLanguagesTable.SETRANGE("Localization Exist",true);
                           if PAGE.RUNMODAL(PAGE::"Windows Languages",WinLanguagesTable) = ACTION::LookupOK then begin
                             LanguageID := WinLanguagesTable."Language ID";
                             LanguageName := WinLanguagesTable.Name;
                           end;
                         END;

                ImplicitType=Text }

    { 2   ;1   ;Group     ;
                Name=Group2;
                Visible=ExtensionNotFound;
                GroupType=Group }

    { 4   ;2   ;Field     ;
                Name=NotFoundMsg;
                CaptionML=ENU=Extension not found;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=NotFoundMsg;
                Editable=FALSE;
                MultiLine=true;
                ImplicitType=Text;
                ShowCaption=false }

  }
  CODE
  {
    VAR
      LanguageNotFoundErr@1004 : TextConst '@@@="Error message to notify user that the entered language was not found. This could mean that the language doesn''t exist or that the language is not valid within the filter set for the lookup. %1=Entered value.";ENU=Cannot find the specified language, %1. Choose the lookup button to select a language.';
      LanguageID@1005 : Integer;
      LanguageName@1006 : Text;
      AlreadyInstalledMsg@1008 : TextConst '@@@="%1=name of app";ENU=The extension %1 is already installed.';
      ExtensionPkgId@1014 : Text;
      ExtensionAppId@1000 : Text;
      NotFoundMsg@1017 : Text;
      ExtensionNotFound@1013 : Boolean;
      ReviewVisible@1001 : Boolean;
      ExtensionNotFoundLbl@1002 : TextConst '@@@="%1=id type (package vs app), %2=target extension id";ENU=Could not find an extension for the specified target, %1 with the ID %2.\\Extension is not published.';
      DependenciesFoundQst@1003 : TextConst '@@@="%1=name of app, %2=semicolon separated list of uninstalled dependencies";ENU=The extension %1 has a dependency on one or more extensions: %2.\\Do you wish to install %1 and all of its dependencies?';
      TelemetryUrl@1010 : Text;
      OperationResult@1012 : 'UserNotAuthorized,DeploymentFailedDueToPackage,DeploymentFailed,Successful,UserCancel,UserTimeOut';

    LOCAL PROCEDURE GetDetailsFromFilters@1();
    VAR
      RecRef@1001 : RecordRef;
      i@1000 : Integer;
    BEGIN
      RecRef.GETTABLE(Rec);
      for i := 1 to RecRef.FIELDCOUNT do
        ParseFilter(RecRef.FIELDINDEX(i));
      RecRef.SETTABLE(Rec);
    END;

    LOCAL PROCEDURE ParseFilter@2(FieldRef@1003 : FieldRef);
    VAR
      FilterPrefixRegEx@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      SingleQuoteRegEx@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      EscapedEqualityRegEx@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      Filter@1000 : Text;
    BEGIN
      FilterPrefixRegEx := FilterPrefixRegEx.Regex('^@\*([^\\]+)\*$');
      SingleQuoteRegEx := SingleQuoteRegEx.Regex('^''([^\\]+)''$');
      EscapedEqualityRegEx := EscapedEqualityRegEx.Regex('~');
      Filter := FieldRef.GETFILTER;
      Filter := FilterPrefixRegEx.Replace(Filter,'$1');
      Filter := SingleQuoteRegEx.Replace(Filter,'$1');
      Filter := EscapedEqualityRegEx.Replace(Filter,'=');

      if Filter <> '' then
        FieldRef.VALUE(Filter);
    END;

    LOCAL PROCEDURE MakeTelemetryCallback@4(Result@1000 : 'UserNotAuthorized,DeploymentFailedDueToPackage,DeploymentFailed,Successful,UserCancel,UserTimeOut');
    VAR
      ExtensionMarketplaceMgmt@1001 : Codeunit ExtensionMarketplaceMgmt;
    BEGIN
      if TelemetryUrl <> '' then
        ExtensionMarketplaceMgmt.MakeMarketplaceTelemetryCallback(TelemetryUrl,Result,"Package ID");
    END;

    BEGIN
    END.
  }
}

