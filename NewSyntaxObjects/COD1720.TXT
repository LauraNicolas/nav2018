OBJECT Codeunit 1720 Deferral Utilities
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      AccountingPeriod@1004 : Record "Accounting Period";
      DeferralHeader@1000 : Record "Deferral Header";
      GenJnlCheckLine@1008 : Codeunit "Gen. Jnl.-Check Line";
      AmountRoundingPrecision@1011 : Decimal;
      InvalidPostingDateErr@1007 : TextConst '@@@="%1=The date passed in for the posting date.";ENU=%1 is not within the range of posting dates for your company.';
      DeferSchedOutOfBoundsErr@1022 : TextConst 'ENU=The deferral schedule falls outside the accounting periods that have been set up for the company.';
      SelectDeferralCodeMsg@1023 : TextConst 'ENU=A deferral code must be selected for the line to view the deferral schedule.';

    [External]
    PROCEDURE CreateRecurringDescription@4(PostingDate@1000 : Date;Description@1001 : Text[50]) FinalDescription : Text[50];
    VAR
      Day@1006 : Integer;
      Week@1005 : Integer;
      Month@1004 : Integer;
      Year@1002 : Integer;
      MonthText@1003 : Text[30];
    BEGIN
      Day := DATE2DMY(PostingDate,1);
      Week := DATE2DWY(PostingDate,2);
      Month := DATE2DMY(PostingDate,2);
      MonthText := FORMAT(PostingDate,0,'<Month Text>');
      Year := DATE2DMY(PostingDate,3);
      AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
      if not AccountingPeriod.FINDLAST then
        AccountingPeriod.Name := '';
      FinalDescription :=
        COPYSTR(STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name,Year),1,MAXSTRLEN(Description));
    END;

    [External]
    PROCEDURE CreateDeferralSchedule@1(DeferralCode@1008 : Code[10];DeferralDocType@1011 : Integer;GenJnlTemplateName@1012 : Code[10];GenJnlBatchName@1013 : Code[10];DocumentType@1003 : Integer;DocumentNo@1004 : Code[20];LineNo@1016 : Integer;AmountToDefer@1017 : Decimal;CalcMethod@1018 : '"Straight-Line","Equal per Period","Days per Period","User-Defined"';StartDate@1019 : Date;NoOfPeriods@1020 : Integer;ApplyDeferralPercentage@1026 : Boolean;DeferralDescription@1028 : Text[50];AdjustStartDate@1001 : Boolean;CurrencyCode@1002 : Code[10]);
    VAR
      DeferralTemplate@1010 : Record "Deferral Template";
      DeferralHeader@1021 : Record "Deferral Header";
      DeferralLine@1000 : Record "Deferral Line";
      AdjustedStartDate@1024 : Date;
      AdjustedDeferralAmount@1027 : Decimal;
    BEGIN
      InitCurrency(CurrencyCode);
      DeferralTemplate.GET(DeferralCode);
      // "Start Date" passed in needs to be adjusted based on the Deferral Code's Start Date setting
      if AdjustStartDate then
        AdjustedStartDate := SetStartDate(DeferralTemplate,StartDate)
      else
        AdjustedStartDate := StartDate;

      AdjustedDeferralAmount := AmountToDefer;
      if ApplyDeferralPercentage then
        AdjustedDeferralAmount := ROUND(AdjustedDeferralAmount * (DeferralTemplate."Deferral %" / 100),AmountRoundingPrecision);

      SetDeferralRecords(DeferralHeader,DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,
        CalcMethod,NoOfPeriods,AdjustedDeferralAmount,AdjustedStartDate,
        DeferralCode,DeferralDescription,AmountToDefer,AdjustStartDate,CurrencyCode);

      case CalcMethod of
        CalcMethod::"Straight-Line":
          CalculateStraightline(DeferralHeader,DeferralLine,DeferralTemplate);
        CalcMethod::"Equal per Period":
          CalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);
        CalcMethod::"Days per Period":
          CalculateDaysPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);
        CalcMethod::"User-Defined":
          CalculateUserDefined(DeferralHeader,DeferralLine,DeferralTemplate);
      end;
    END;

    [External]
    PROCEDURE CalcDeferralNoOfPeriods@205(CalcMethod@1003 : Option;NoOfPeriods@1004 : Integer;StartDate@1002 : Date) : Integer;
    VAR
      DeferralTemplate@1000 : Record "Deferral Template";
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      case CalcMethod of
        DeferralTemplate."Calc. Method"::"Equal per Period",
        DeferralTemplate."Calc. Method"::"User-Defined":
          exit(NoOfPeriods);
        DeferralTemplate."Calc. Method"::"Straight-Line",
        DeferralTemplate."Calc. Method"::"Days per Period":
          begin
            AccountingPeriod.SETFILTER("Starting Date",'>=%1',StartDate);
            AccountingPeriod.FINDFIRST;
            if AccountingPeriod."Starting Date" = StartDate then
              exit(NoOfPeriods);

            exit(NoOfPeriods + 1);
          end;
      end;

      DeferralTemplate."Calc. Method" := CalcMethod;
      DeferralTemplate.FIELDERROR("Calc. Method");
    END;

    LOCAL PROCEDURE CalculateStraightline@2(DeferralHeader@1001 : Record "Deferral Header";VAR DeferralLine@1000 : Record "Deferral Line";DeferralTemplate@1002 : Record "Deferral Template");
    VAR
      AmountToDefer@1010 : Decimal;
      AmountToDeferFirstPeriod@1015 : Decimal;
      FractionOfPeriod@1016 : Decimal;
      PeriodicDeferralAmount@1003 : Decimal;
      RunningDeferralTotal@1014 : Decimal;
      PeriodicCount@1004 : Integer;
      HowManyDaysLeftInPeriod@1017 : Integer;
      NumberOfDaysInPeriod@1013 : Integer;
      PostDate@1005 : Date;
      FirstPeriodDate@1011 : Date;
      SecondPeriodDate@1012 : Date;
      PerDiffSum@1009 : Decimal;
    BEGIN
      // If the Start Date passed in matches the first date of a financial period, this is essentially the same
      // as the "Equal Per Period" deferral method, so call that function.
      AccountingPeriod.SETFILTER("Starting Date",'>=%1',DeferralHeader."Start Date");
      if AccountingPeriod.FINDFIRST then begin
        if AccountingPeriod."Starting Date" = DeferralHeader."Start Date" then begin
          CalculateEqualPerPeriod(DeferralHeader,DeferralLine,DeferralTemplate);
          exit;
        end
      end else
        ERROR(DeferSchedOutOfBoundsErr);

      PeriodicDeferralAmount := ROUND(DeferralHeader."Amount to Defer" / DeferralHeader."No. of Periods",AmountRoundingPrecision);

      for PeriodicCount := 1 to (DeferralHeader."No. of Periods" + 1) do begin
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        if (PeriodicCount = 1) or (PeriodicCount = (DeferralHeader."No. of Periods" + 1)) then begin
          if PeriodicCount = 1 then begin
            CLEAR(RunningDeferralTotal);

            // Get the starting date of the accounting period of the posting date is in
            AccountingPeriod.SETFILTER("Starting Date",'<%1',PostDate);
            if AccountingPeriod.FINDLAST then
              FirstPeriodDate := AccountingPeriod."Starting Date"
            else
              ERROR(DeferSchedOutOfBoundsErr);

            // Get the starting date of the next accounting period
            AccountingPeriod.SETFILTER("Starting Date",'>%1',PostDate);
            if AccountingPeriod.FINDFIRST then
              SecondPeriodDate := AccountingPeriod."Starting Date"
            else
              ERROR(DeferSchedOutOfBoundsErr);

            HowManyDaysLeftInPeriod := (SecondPeriodDate - DeferralHeader."Start Date");
            NumberOfDaysInPeriod := (SecondPeriodDate - FirstPeriodDate);
            FractionOfPeriod := (HowManyDaysLeftInPeriod / NumberOfDaysInPeriod);

            AmountToDeferFirstPeriod := (PeriodicDeferralAmount * FractionOfPeriod);
            AmountToDefer := ROUND(AmountToDeferFirstPeriod,AmountRoundingPrecision);
            RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
          end else
            // Last period
            AmountToDefer := (DeferralHeader."Amount to Defer" - RunningDeferralTotal);
        end else begin
          AmountToDefer := ROUND(PeriodicDeferralAmount,AmountRoundingPrecision);
          RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
        end;

        DeferralLine."Posting Date" := PostDate;
        DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description");

        if GenJnlCheckLine.DateNotAllowed(PostDate) then
          ERROR(InvalidPostingDateErr,PostDate);

        PerDiffSum := PerDiffSum + ROUND(AmountToDefer / DeferralHeader."No. of Periods",AmountRoundingPrecision);

        DeferralLine.Amount := AmountToDefer;

        DeferralLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE CalculateEqualPerPeriod@3(DeferralHeader@1001 : Record "Deferral Header";VAR DeferralLine@1000 : Record "Deferral Line";DeferralTemplate@1002 : Record "Deferral Template");
    VAR
      PeriodicCount@1009 : Integer;
      PostDate@1008 : Date;
      AmountToDefer@1007 : Decimal;
      RunningDeferralTotal@1010 : Decimal;
    BEGIN
      for PeriodicCount := 1 to DeferralHeader."No. of Periods" do begin
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        DeferralLine.VALIDATE("Posting Date",PostDate);
        DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description");

        AmountToDefer := DeferralHeader."Amount to Defer";
        if PeriodicCount = 1 then
          CLEAR(RunningDeferralTotal);

        if PeriodicCount <> DeferralHeader."No. of Periods" then begin
          AmountToDefer := ROUND(AmountToDefer / DeferralHeader."No. of Periods",AmountRoundingPrecision);
          RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
        end else
          AmountToDefer := (DeferralHeader."Amount to Defer" - RunningDeferralTotal);

        DeferralLine.Amount := AmountToDefer;
        DeferralLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE CalculateDaysPerPeriod@5(DeferralHeader@1001 : Record "Deferral Header";VAR DeferralLine@1000 : Record "Deferral Line";DeferralTemplate@1002 : Record "Deferral Template");
    VAR
      AmountToDefer@1016 : Decimal;
      PeriodicCount@1012 : Integer;
      NumberOfDaysInPeriod@1010 : Integer;
      NumberOfDaysInSchedule@1022 : Integer;
      NumberOfDaysIntoCurrentPeriod@1018 : Integer;
      NumberOfPeriods@1020 : Integer;
      PostDate@1009 : Date;
      FirstPeriodDate@1008 : Date;
      SecondPeriodDate@1007 : Date;
      EndDate@1019 : Date;
      TempDate@1021 : Date;
      NoExtraPeriod@1017 : Boolean;
      DailyDeferralAmount@1023 : Decimal;
      RunningDeferralTotal@1024 : Decimal;
    BEGIN
      AccountingPeriod.SETFILTER("Starting Date",'>=%1',DeferralHeader."Start Date");
      if AccountingPeriod.FINDFIRST then begin
        if AccountingPeriod."Starting Date" = DeferralHeader."Start Date" then
          NoExtraPeriod := true
        else
          NoExtraPeriod := false
      end else
        ERROR(DeferSchedOutOfBoundsErr);

      // If comparison used <=, it messes up the calculations
      if not NoExtraPeriod then begin
        AccountingPeriod.SETFILTER("Starting Date",'<%1',DeferralHeader."Start Date");
        AccountingPeriod.FINDLAST;

        NumberOfDaysIntoCurrentPeriod := (DeferralHeader."Start Date" - AccountingPeriod."Starting Date");
      end else
        NumberOfDaysIntoCurrentPeriod := 0;

      if NoExtraPeriod then
        NumberOfPeriods := DeferralHeader."No. of Periods"
      else
        NumberOfPeriods := (DeferralHeader."No. of Periods" + 1);

      for PeriodicCount := 1 to NumberOfPeriods do begin
        // Figure out the end date...
        if PeriodicCount = 1 then
          TempDate := DeferralHeader."Start Date";

        if PeriodicCount <> NumberOfPeriods then begin
          AccountingPeriod.SETFILTER("Starting Date",'>%1',TempDate);
          if AccountingPeriod.FINDFIRST then
            TempDate := AccountingPeriod."Starting Date"
          else
            ERROR(DeferSchedOutOfBoundsErr);
        end else
          // Last Period, special case here...
          if NoExtraPeriod then begin
            AccountingPeriod.SETFILTER("Starting Date",'>%1',TempDate);
            if AccountingPeriod.FINDFIRST then
              TempDate := AccountingPeriod."Starting Date"
            else
              ERROR(DeferSchedOutOfBoundsErr);
            EndDate := TempDate;
          end else
            EndDate := (TempDate + NumberOfDaysIntoCurrentPeriod);
      end;
      NumberOfDaysInSchedule := (EndDate - DeferralHeader."Start Date");
      DailyDeferralAmount := (DeferralHeader."Amount to Defer" / NumberOfDaysInSchedule);

      for PeriodicCount := 1 to NumberOfPeriods do begin
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        if PeriodicCount = 1 then begin
          CLEAR(RunningDeferralTotal);
          FirstPeriodDate := DeferralHeader."Start Date";

          // Get the starting date of the next accounting period
          AccountingPeriod.SETFILTER("Starting Date",'>%1',PostDate);
          AccountingPeriod.FINDFIRST;
          SecondPeriodDate := AccountingPeriod."Starting Date";
          NumberOfDaysInPeriod := (SecondPeriodDate - FirstPeriodDate);

          AmountToDefer := ROUND(NumberOfDaysInPeriod * DailyDeferralAmount,AmountRoundingPrecision);
          RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
        end else begin
          // Get the starting date of the accounting period of the posting date is in
          AccountingPeriod.SETFILTER("Starting Date",'<=%1',PostDate);
          AccountingPeriod.FINDLAST;
          FirstPeriodDate := AccountingPeriod."Starting Date";

          // Get the starting date of the next accounting period
          AccountingPeriod.SETFILTER("Starting Date",'>%1',PostDate);
          AccountingPeriod.FINDFIRST;
          SecondPeriodDate := AccountingPeriod."Starting Date";

          NumberOfDaysInPeriod := (SecondPeriodDate - FirstPeriodDate);

          if PeriodicCount <> NumberOfPeriods then begin
            // Not the last period
            AmountToDefer := ROUND(NumberOfDaysInPeriod * DailyDeferralAmount,AmountRoundingPrecision);
            RunningDeferralTotal := RunningDeferralTotal + AmountToDefer;
          end else
            AmountToDefer := (DeferralHeader."Amount to Defer" - RunningDeferralTotal);
        end;

        DeferralLine."Posting Date" := PostDate;
        DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description");

        if GenJnlCheckLine.DateNotAllowed(PostDate) then
          ERROR(InvalidPostingDateErr,PostDate);

        DeferralLine.Amount := AmountToDefer;

        DeferralLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE CalculateUserDefined@6(DeferralHeader@1001 : Record "Deferral Header";VAR DeferralLine@1000 : Record "Deferral Line";DeferralTemplate@1006 : Record "Deferral Template");
    VAR
      PeriodicCount@1002 : Integer;
      PostDate@1003 : Date;
    BEGIN
      for PeriodicCount := 1 to DeferralHeader."No. of Periods" do begin
        InitializeDeferralHeaderAndSetPostDate(DeferralLine,DeferralHeader,PeriodicCount,PostDate);

        DeferralLine."Posting Date" := PostDate;
        DeferralLine.Description := CreateRecurringDescription(PostDate,DeferralTemplate."Period Description");

        if GenJnlCheckLine.DateNotAllowed(PostDate) then
          ERROR(InvalidPostingDateErr,PostDate);

        // For User-Defined, user must enter in deferral amounts
        DeferralLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE SetStartDate@12(DeferralTemplate@1000 : Record "Deferral Template";StartDate@1001 : Date) AdjustedStartDate : Date;
    VAR
      DeferralStartOption@1002 : '"Posting Date","Beginning of Period","End of Period","Beginning of Next Period"';
    BEGIN
      // "Start Date" passed in needs to be adjusted based on the Deferral Code's Start Date setting;
      case DeferralTemplate."Start Date" of
        DeferralStartOption::"Posting Date":
          AdjustedStartDate := StartDate;
        DeferralStartOption::"Beginning of Period":
          begin
            AccountingPeriod.SETRANGE("Starting Date",0D,StartDate);
            if AccountingPeriod.FINDLAST then
              AdjustedStartDate := AccountingPeriod."Starting Date";
          end;
        DeferralStartOption::"End of Period":
          begin
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            if AccountingPeriod.FINDFIRST then
              AdjustedStartDate := CALCDATE('<-1D>',AccountingPeriod."Starting Date");
          end;
        DeferralStartOption::"Beginning of Next Period":
          begin
            AccountingPeriod.SETFILTER("Starting Date",'>%1',StartDate);
            if AccountingPeriod.FINDFIRST then
              AdjustedStartDate := AccountingPeriod."Starting Date";
          end;
      end;
    END;

    [External]
    PROCEDURE SetDeferralRecords@7(VAR DeferralHeader@1001 : Record "Deferral Header";DeferralDocType@1006 : Integer;GenJnlTemplateName@1013 : Code[10];GenJnlBatchName@1012 : Code[10];DocumentType@1010 : Integer;DocumentNo@1009 : Code[20];LineNo@1008 : Integer;CalcMethod@1007 : '"Straight-Line","Equal per Period","Days per Period","User-Defined"';NoOfPeriods@1005 : Integer;AdjustedDeferralAmount@1003 : Decimal;AdjustedStartDate@1004 : Date;DeferralCode@1011 : Code[10];DeferralDescription@1014 : Text[50];AmountToDefer@1000 : Decimal;AdjustStartDate@1002 : Boolean;CurrencyCode@1015 : Code[10]);
    BEGIN
      if not DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) then begin
        // Need to create the header record.
        DeferralHeader."Deferral Doc. Type" := DeferralDocType;
        DeferralHeader."Gen. Jnl. Template Name" := GenJnlTemplateName;
        DeferralHeader."Gen. Jnl. Batch Name" := GenJnlBatchName;
        DeferralHeader."Document Type" := DocumentType;
        DeferralHeader."Document No." := DocumentNo;
        DeferralHeader."Line No." := LineNo;
        DeferralHeader.INSERT;
      end;
      DeferralHeader."Amount to Defer" := AdjustedDeferralAmount;
      if AdjustStartDate then
        DeferralHeader."Initial Amount to Defer" := AmountToDefer;
      DeferralHeader."Calc. Method" := CalcMethod;
      DeferralHeader."Start Date" := AdjustedStartDate;
      DeferralHeader."No. of Periods" := NoOfPeriods;
      DeferralHeader."Schedule Description" := DeferralDescription;
      DeferralHeader."Deferral Code" := DeferralCode;
      DeferralHeader."Currency Code" := CurrencyCode;
      DeferralHeader.MODIFY;
      // Remove old lines as they will be recalculated/recreated
      RemoveDeferralLines(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
    END;

    [External]
    PROCEDURE RemoveOrSetDeferralSchedule@9(DeferralCode@1006 : Code[10];DeferralDocType@1001 : Integer;GenJnlTemplateName@1013 : Code[10];GenJnlBatchName@1012 : Code[10];DocumentType@1008 : Integer;DocumentNo@1007 : Code[20];LineNo@1009 : Integer;Amount@1010 : Decimal;PostingDate@1011 : Date;Description@1002 : Text[50];CurrencyCode@1004 : Code[10];AdjustStartDate@1014 : Boolean);
    VAR
      DeferralHeader@1005 : Record "Deferral Header";
      DeferralTemplate@1003 : Record "Deferral Template";
      DeferralDescription@1000 : Text[50];
    BEGIN
      if DeferralCode = '' then
        // If the user cleared the deferral code, we should remove the saved schedule...
        if DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) then begin
          DeferralHeader.DELETE;
          RemoveDeferralLines(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
        end;
      if DeferralCode <> '' then
        if LineNo <> 0 then
          if DeferralTemplate.GET(DeferralCode) then begin
            ValidateDeferralTemplate(DeferralTemplate);
            if GenJnlBatchName <> '' then
              DeferralDescription := GenJnlBatchName + '-' + COPYSTR(Description,1,30)
            else
              DeferralDescription := DocumentNo + '-' + COPYSTR(Description,1,30);

            CreateDeferralSchedule(DeferralCode,DeferralDocType,
              GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Amount,
              DeferralTemplate."Calc. Method",PostingDate,DeferralTemplate."No. of Periods",
              true,DeferralDescription,AdjustStartDate,CurrencyCode);
          end;
    END;

    [External]
    PROCEDURE CreateScheduleFromGL@22(GenJournalLine@1008 : Record "Gen. Journal Line";FirstEntryNo@1010 : Integer);
    VAR
      DeferralHeader@1001 : Record "Deferral Header";
      DeferralLine@1002 : Record "Deferral Line";
      DeferralTemplate@1007 : Record "Deferral Template";
      PostedDeferralHeader@1004 : Record "Posted Deferral Header";
      PostedDeferralLine@1005 : Record "Posted Deferral Line";
      CustPostingGr@1009 : Record "Customer Posting Group";
      VendPostingGr@1011 : Record "Vendor Posting Group";
      BankAcc@1013 : Record "Bank Account";
      BankAccPostingGr@1014 : Record "Bank Account Posting Group";
      GenJnlPostLine@1003 : Codeunit "Gen. Jnl.-Post Line";
      DeferralAccount@1006 : Code[20];
      Account@1000 : Code[20];
      GLAccount@1012 : Code[20];
      GLAccountType@1015 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner"';
    BEGIN
      if DeferralHeader.GET(DeferralHeader."Deferral Doc. Type"::"G/L",
           GenJournalLine."Journal Template Name",
           GenJournalLine."Journal Batch Name",0,'',
           GenJournalLine."Line No.")
      then begin
        if DeferralTemplate.GET(DeferralHeader."Deferral Code") then
          DeferralAccount := DeferralTemplate."Deferral Account";

        if (GenJournalLine."Account No." = '') and (GenJournalLine."Bal. Account No." <> '') then begin
          GLAccount := GenJournalLine."Bal. Account No.";
          GLAccountType := GenJournalLine."Bal. Account Type";
        end else begin
          GLAccount := GenJournalLine."Account No.";
          GLAccountType := GenJournalLine."Account Type";
        end;

        // Account types not G/L are not storing a GL account in the GenJnlLine's Account field, need to retrieve
        case GLAccountType of
          GenJournalLine."Account Type"::Customer:
            begin
              CustPostingGr.GET(GenJournalLine."Posting Group");
              Account := CustPostingGr.GetReceivablesAccount;
            end;
          GenJournalLine."Account Type"::Vendor:
            begin
              VendPostingGr.GET(GenJournalLine."Posting Group");
              Account := VendPostingGr.GetPayablesAccount;
            end;
          GenJournalLine."Account Type"::"Bank Account":
            begin
              BankAcc.GET(GLAccount);
              BankAccPostingGr.GET(BankAcc."Bank Acc. Posting Group");
              Account := BankAccPostingGr."G/L Bank Account No.";
            end;
          else
            Account := GLAccount;
        end;

        // Create the Posted Deferral Schedule with the Document Number created from the posted GL Trx...
        PostedDeferralHeader.INIT;
        PostedDeferralHeader.TRANSFERFIELDS(DeferralHeader);
        PostedDeferralHeader."Deferral Doc. Type" := DeferralHeader."Deferral Doc. Type"::"G/L";
        // Adding document number so we can connect the Ledger and Deferral Schedule details...
        PostedDeferralHeader."Gen. Jnl. Document No." := GenJournalLine."Document No.";
        PostedDeferralHeader."Account No." := Account;
        PostedDeferralHeader."Document Type" := 0;
        PostedDeferralHeader."Document No." := '';
        PostedDeferralHeader."Line No." := GenJournalLine."Line No.";
        PostedDeferralHeader."Currency Code" := GenJournalLine."Currency Code";
        PostedDeferralHeader."Deferral Account" := DeferralAccount;
        PostedDeferralHeader."Posting Date" := GenJournalLine."Posting Date";
        PostedDeferralHeader."Entry No." := FirstEntryNo;
        PostedDeferralHeader.INSERT;

        DeferralLine.SETRANGE("Deferral Doc. Type",DeferralHeader."Deferral Doc. Type"::"G/L");
        DeferralLine.SETRANGE("Gen. Jnl. Template Name",GenJournalLine."Journal Template Name");
        DeferralLine.SETRANGE("Gen. Jnl. Batch Name",GenJournalLine."Journal Batch Name");
        DeferralLine.SETRANGE("Document Type",0);
        DeferralLine.SETRANGE("Document No.",'');
        DeferralLine.SETRANGE("Line No.",GenJournalLine."Line No.");
        if DeferralLine.FINDSET then begin
          repeat
            PostedDeferralLine.INIT;
            PostedDeferralLine.TRANSFERFIELDS(DeferralLine);
            PostedDeferralLine."Deferral Doc. Type" := DeferralHeader."Deferral Doc. Type"::"G/L";
            PostedDeferralLine."Gen. Jnl. Document No." := GenJournalLine."Document No.";
            PostedDeferralLine."Account No." := Account;
            PostedDeferralLine."Document Type" := 0;
            PostedDeferralLine."Document No." := '';
            PostedDeferralLine."Line No." := GenJournalLine."Line No.";
            PostedDeferralLine."Currency Code" := GenJournalLine."Currency Code";
            PostedDeferralLine."Deferral Account" := DeferralAccount;
            PostedDeferralLine.INSERT;
          until DeferralLine.NEXT = 0;
        end;
      end;

      GenJnlPostLine.RemoveDeferralSchedule(GenJournalLine);
    END;

    [External]
    PROCEDURE DeferralCodeOnValidate@13(DeferralCode@1007 : Code[10];DeferralDocType@1006 : Integer;GenJnlTemplateName@1014 : Code[10];GenJnlBatchName@1013 : Code[10];DocumentType@1011 : Integer;DocumentNo@1010 : Code[20];LineNo@1009 : Integer;Amount@1001 : Decimal;PostingDate@1008 : Date;Description@1002 : Text[50];CurrencyCode@1012 : Code[10]);
    VAR
      DeferralHeader@1005 : Record "Deferral Header";
      DeferralLine@1004 : Record "Deferral Line";
      DeferralTemplate@1003 : Record "Deferral Template";
      DeferralDescription@1000 : Text[50];
    BEGIN
      DeferralHeader.INIT;
      DeferralLine.INIT;
      if DeferralCode = '' then
        // If the user cleared the deferral code, we should remove the saved schedule...
        DeferralCodeOnDelete(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo)
      else
        if LineNo <> 0 then
          if DeferralTemplate.GET(DeferralCode) then begin
            ValidateDeferralTemplate(DeferralTemplate);
            if GenJnlBatchName <> '' then
              DeferralDescription := GenJnlBatchName + '-' + COPYSTR(Description,1,30)
            else
              DeferralDescription := DocumentNo + '-' + COPYSTR(Description,1,30);
            CreateDeferralSchedule(DeferralCode,DeferralDocType,
              GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Amount,
              DeferralTemplate."Calc. Method",PostingDate,DeferralTemplate."No. of Periods",
              true,DeferralDescription,true,CurrencyCode);
          end;
    END;

    [External]
    PROCEDURE DeferralCodeOnDelete@14(DeferralDocType@1000 : Integer;GenJnlTemplateName@1006 : Code[10];GenJnlBatchName@1005 : Code[10];DocumentType@1003 : Integer;DocumentNo@1002 : Code[20];LineNo@1001 : Integer);
    VAR
      DeferralHeader@1004 : Record "Deferral Header";
    BEGIN
      if LineNo <> 0 then
        // Deferral Additions
        if DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) then begin
          DeferralHeader.DELETE;
          RemoveDeferralLines(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
        end;
    END;

    [Internal]
    PROCEDURE OpenLineScheduleEdit@15(DeferralCode@1006 : Code[10];DeferralDocType@1002 : Integer;GenJnlTemplateName@1015 : Code[10];GenJnlBatchName@1014 : Code[10];DocumentType@1005 : Integer;DocumentNo@1004 : Code[20];LineNo@1003 : Integer;Amount@1001 : Decimal;PostingDate@1000 : Date;Description@1010 : Text[50];CurrencyCode@1011 : Code[10]) : Boolean;
    VAR
      DeferralTemplate@1007 : Record "Deferral Template";
      DeferralHeader@1008 : Record "Deferral Header";
      DeferralSchedule@1012 : Page "Deferral Schedule";
      DeferralDescription@1009 : Text[50];
      Changed@1013 : Boolean;
    BEGIN
      if DeferralCode = '' then
        MESSAGE(SelectDeferralCodeMsg)
      else
        if DeferralTemplate.GET(DeferralCode) then
          if DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) then begin
            DeferralSchedule.SetParameter(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
            DeferralSchedule.RUNMODAL;
            Changed := DeferralSchedule.GetParameter;
            CLEAR(DeferralSchedule);
          end else begin
            if GenJnlBatchName <> '' then
              DeferralDescription := GenJnlBatchName + '-' + COPYSTR(Description,1,30)
            else
              DeferralDescription := DocumentNo + '-' + COPYSTR(Description,1,30);
            CreateDeferralSchedule(DeferralCode,DeferralDocType,
              GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo,Amount,
              DeferralTemplate."Calc. Method",PostingDate,DeferralTemplate."No. of Periods",true,DeferralDescription,true,
              CurrencyCode);
            COMMIT;
            if DeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) then begin
              DeferralSchedule.SetParameter(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo);
              DeferralSchedule.RUNMODAL;
              Changed := DeferralSchedule.GetParameter;
              CLEAR(DeferralSchedule);
            end;
          end;
      exit(Changed);
    END;

    [External]
    PROCEDURE OpenLineScheduleView@16(DeferralCode@1006 : Code[10];DeferralDocType@1000 : Integer;GenJnlTemplateName@1005 : Code[10];GenJnlBatchName@1004 : Code[10];DocumentType@1002 : Integer;DocumentNo@1001 : Code[20];LineNo@1003 : Integer);
    VAR
      DeferralTemplate@1010 : Record "Deferral Template";
      PostedDeferralHeader@1009 : Record "Posted Deferral Header";
    BEGIN
      // On view nothing will happen if the record does not exist
      if DeferralCode <> '' then
        if DeferralTemplate.GET(DeferralCode) then begin
          if PostedDeferralHeader.GET(DeferralDocType,GenJnlTemplateName,GenJnlBatchName,DocumentType,DocumentNo,LineNo) then
            PAGE.RUNMODAL(PAGE::"Deferral Schedule View",PostedDeferralHeader);
        end;
    END;

    [External]
    PROCEDURE OpenLineScheduleArchive@19(DeferralCode@1008 : Code[10];DeferralDocType@1007 : Integer;DocumentType@1001 : Integer;DocumentNo@1000 : Code[20];DocNoOccurence@1010 : Integer;VersionNo@1011 : Integer;LineNo@1004 : Integer);
    VAR
      DeferralHeaderArchive@1009 : Record "Deferral Header Archive";
    BEGIN
      // On view nothing will happen if the record does not exist
      if DeferralCode <> '' then
        if DeferralHeaderArchive.GET(DeferralDocType,DocumentType,DocumentNo,DocNoOccurence,VersionNo,LineNo) then
          PAGE.RUNMODAL(PAGE::"Deferral Schedule Archive",DeferralHeaderArchive);
    END;

    LOCAL PROCEDURE RemoveDeferralLines@17(DeferralDocType@1000 : Integer;GenJnlTemplateName@1008 : Code[10];GenJnlBatchName@1007 : Code[10];DocumentType@1003 : Integer;DocumentNo@1002 : Code[20];LineNo@1001 : Integer);
    VAR
      DeferralLine@1004 : Record "Deferral Line";
    BEGIN
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralDocType);
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",GenJnlTemplateName);
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",GenJnlBatchName);
      DeferralLine.SETRANGE("Document Type",DocumentType);
      DeferralLine.SETRANGE("Document No.",DocumentNo);
      DeferralLine.SETRANGE("Line No.",LineNo);
      DeferralLine.DELETEALL;
    END;

    LOCAL PROCEDURE ValidateDeferralTemplate@18(DeferralTemplate@1000 : Record "Deferral Template");
    BEGIN
      with DeferralTemplate do begin
        TESTFIELD("Deferral Account");
        TESTFIELD("Deferral %");
        TESTFIELD("No. of Periods");
      end;
    END;

    [External]
    PROCEDURE RoundDeferralAmount@20(VAR DeferralHeader@1018 : Record "Deferral Header";CurrencyCode@1009 : Code[10];CurrencyFactor@1000 : Decimal;PostingDate@1007 : Date;VAR AmtToDefer@1015 : Decimal;VAR AmtToDeferLCY@1014 : Decimal);
    VAR
      DeferralLine@1006 : Record "Deferral Line";
      CurrExchRate@1010 : Record "Currency Exchange Rate";
      UseDate@1008 : Date;
      DeferralCount@1011 : Integer;
      TotalAmountLCY@1012 : Decimal;
      TotalDeferralCount@1013 : Integer;
    BEGIN
      // Calculate the LCY amounts for posting
      if PostingDate = 0D then
        UseDate := WORKDATE
      else
        UseDate := PostingDate;

      DeferralHeader."Amount to Defer (LCY)" :=
        ROUND(CurrExchRate.ExchangeAmtFCYToLCY(UseDate,CurrencyCode,DeferralHeader."Amount to Defer",CurrencyFactor));
      DeferralHeader.MODIFY;
      AmtToDefer := DeferralHeader."Amount to Defer";
      AmtToDeferLCY := DeferralHeader."Amount to Defer (LCY)";
      DeferralLine.SETRANGE("Deferral Doc. Type",DeferralHeader."Deferral Doc. Type");
      DeferralLine.SETRANGE("Gen. Jnl. Template Name",DeferralHeader."Gen. Jnl. Template Name");
      DeferralLine.SETRANGE("Gen. Jnl. Batch Name",DeferralHeader."Gen. Jnl. Batch Name");
      DeferralLine.SETRANGE("Document Type",DeferralHeader."Document Type");
      DeferralLine.SETRANGE("Document No.",DeferralHeader."Document No.");
      DeferralLine.SETRANGE("Line No.",DeferralHeader."Line No.");
      if DeferralLine.FINDSET then begin
        TotalDeferralCount := DeferralLine.COUNT;
        repeat
          DeferralCount := DeferralCount + 1;
          if DeferralCount = TotalDeferralCount then begin
            DeferralLine."Amount (LCY)" := DeferralHeader."Amount to Defer (LCY)" - TotalAmountLCY;
            DeferralLine.MODIFY;
          end else begin
            DeferralLine."Amount (LCY)" :=
              ROUND(CurrExchRate.ExchangeAmtFCYToLCY(UseDate,CurrencyCode,DeferralLine.Amount,CurrencyFactor));
            TotalAmountLCY := TotalAmountLCY + DeferralLine."Amount (LCY)";
            DeferralLine.MODIFY;
          end;
        until DeferralLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InitCurrency@21(CurrencyCode@1000 : Code[10]);
    VAR
      Currency@1001 : Record Currency;
    BEGIN
      if CurrencyCode = '' then
        Currency.InitRoundingPrecision
      else begin
        Currency.GET(CurrencyCode);
        Currency.TESTFIELD("Amount Rounding Precision");
      end;
      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    [External]
    PROCEDURE GetSalesDeferralDocType@23() : Integer;
    BEGIN
      exit(DeferralHeader."Deferral Doc. Type"::Sales)
    END;

    LOCAL PROCEDURE InitializeDeferralHeaderAndSetPostDate@29(VAR DeferralLine@1000 : Record "Deferral Line";DeferralHeader@1003 : Record "Deferral Header";PeriodicCount@1002 : Integer;VAR PostDate@1001 : Date);
    BEGIN
      DeferralLine.INIT;
      DeferralLine."Deferral Doc. Type" := DeferralHeader."Deferral Doc. Type";
      DeferralLine."Gen. Jnl. Template Name" := DeferralHeader."Gen. Jnl. Template Name";
      DeferralLine."Gen. Jnl. Batch Name" := DeferralHeader."Gen. Jnl. Batch Name";
      DeferralLine."Document Type" := DeferralHeader."Document Type";
      DeferralLine."Document No." := DeferralHeader."Document No.";
      DeferralLine."Line No." := DeferralHeader."Line No.";
      DeferralLine."Currency Code" := DeferralHeader."Currency Code";

      if PeriodicCount = 1 then begin
        AccountingPeriod.SETFILTER("Starting Date",'..%1',DeferralHeader."Start Date");
        if not AccountingPeriod.FINDFIRST then
          ERROR(DeferSchedOutOfBoundsErr);

        PostDate := DeferralHeader."Start Date";
      end else begin
        AccountingPeriod.SETFILTER("Starting Date",'>%1',PostDate);
        if AccountingPeriod.FINDFIRST then
          PostDate := AccountingPeriod."Starting Date"
        else
          ERROR(DeferSchedOutOfBoundsErr);
      end;
    END;

    [External]
    PROCEDURE GetPurchDeferralDocType@24() : Integer;
    BEGIN
      exit(DeferralHeader."Deferral Doc. Type"::Purchase)
    END;

    [External]
    PROCEDURE GetDeferralStartDate@26(DeferralDocType@1004 : Integer;RecordDocumentType@1003 : Integer;RecordDocumentNo@1002 : Code[20];RecordLineNo@1001 : Integer;DeferralCode@1006 : Code[10];PostingDate@1007 : Date) : Date;
    VAR
      DeferralHeader@1000 : Record "Deferral Header";
      DeferralTemplate@1005 : Record "Deferral Template";
    BEGIN
      if DeferralHeader.GET(DeferralDocType,'','',RecordDocumentType,RecordDocumentNo,RecordLineNo) then
        exit(DeferralHeader."Start Date");

      if DeferralTemplate.GET(DeferralCode) then
        exit(SetStartDate(DeferralTemplate,PostingDate));

      exit(PostingDate);
    END;

    [External]
    PROCEDURE AdjustTotalAmountForDeferrals@8(DeferralCode@1000 : Code[10];VAR AmtToDefer@1002 : Decimal;VAR AmtToDeferACY@1003 : Decimal;VAR TotalAmount@1004 : Decimal;VAR TotalAmountACY@1005 : Decimal;VAR TotalVATBase@1006 : Decimal;VAR TotalVATBaseACY@1007 : Decimal);
    BEGIN
      TotalVATBase := TotalAmount;
      TotalVATBaseACY := TotalAmountACY;
      if DeferralCode <> '' then
        if (AmtToDefer = TotalAmount) and (AmtToDeferACY = TotalAmountACY) then begin
          AmtToDefer := 0;
          AmtToDeferACY := 0;
        end else begin
          TotalAmount := TotalAmount - AmtToDefer;
          TotalAmountACY := TotalAmountACY - AmtToDeferACY;
        end;
    END;

    BEGIN
    END.
  }
}

