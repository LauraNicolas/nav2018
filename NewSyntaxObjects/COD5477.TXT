OBJECT Codeunit 5477 Sales Invoice Aggregator
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Invoice Header"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DocumentIDNotSpecifiedForLinesErr@1000 : TextConst '@@@={Locked};ENU=You must specify a document id to get the lines.';
      DocumentDoesNotExistErr@1001 : TextConst '@@@={Locked};ENU=No document with the specified ID exists.';
      MultipleDocumentsFoundForIdErr@1006 : TextConst '@@@={Locked};ENU=Multiple documents have been found for the specified criteria.';
      CannotModifyPostedInvioceErr@1002 : TextConst '@@@={Locked};ENU=The invoice has been posted and can no longer be modified.';
      CannotInsertALineThatAlreadyExistsErr@1003 : TextConst '@@@={Locked};ENU=You cannot insert a line because a line already exists.';
      CannotModifyALineThatDoesntExistErr@1004 : TextConst '@@@={Locked};ENU=You cannot modify a line that does not exist.';
      CannotInsertPostedInvoiceErr@1005 : TextConst '@@@={Locked};ENU=Invoices created through the API must be in Draft state.';
      GraphMgtGeneralTools@1007 : Codeunit "Graph Mgt - General Tools";
      CanOnlySetUOMForTypeItemErr@1008 : TextConst '@@@={Locked};ENU=Unit of Measure can be set only for lines with type Item.';
      SkipUpdateDiscounts@1014 : Boolean;
      VATPostingSetupForCombinationDoesNotExistErr@1009 : TextConst '@@@={Locked};ENU=The provided combination (%1,%2) of VAT Business Posting Group and VAT Product Posting Group does not exist in the VAT Posting Setup table.';

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesHeader@2(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    BEGIN
      if not CheckValidRecord(Rec) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromSalesHeader(Rec);
    END;

    [EventSubscriber(Table,36,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesHeader@3(VAR Rec@1000 : Record "Sales Header";VAR xRec@1001 : Record "Sales Header";RunTrigger@1002 : Boolean);
    BEGIN
      if not CheckValidRecord(Rec) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromSalesHeader(Rec);
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesHeader@5(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record "Sales Invoice Entity Aggregate";
    BEGIN
      if not CheckValidRecord(Rec) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      TransferIntegrationRecordID(Rec);

      if not SalesInvoiceEntityAggregate.GET(Rec."No.",false) then
        exit;
      SalesInvoiceEntityAggregate.DELETE;
    END;

    [EventSubscriber(Codeunit,56,OnAfterResetRecalculateInvoiceDisc)]
    LOCAL PROCEDURE OnAfterResetRecalculateInvoiceDisc@34(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      if not CheckValidRecord(SalesHeader) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromSalesHeader(SalesHeader);
    END;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesLine@71(VAR Rec@1000 : Record "Sales Line";RunTrigger@1001 : Boolean);
    BEGIN
      if not CheckValidLineRecord(Rec) then
        exit;

      ModifyTotalsSalesLine(Rec,true);
    END;

    [EventSubscriber(Table,37,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesLine@72(VAR Rec@1000 : Record "Sales Line";VAR xRec@1001 : Record "Sales Line";RunTrigger@1002 : Boolean);
    BEGIN
      if not CheckValidLineRecord(Rec) then
        exit;

      ModifyTotalsSalesLine(Rec,Rec."Recalculate Invoice Disc.");
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesLine@73(VAR Rec@1000 : Record "Sales Line";RunTrigger@1001 : Boolean);
    VAR
      SalesLine@1003 : Record "Sales Line";
    BEGIN
      if not CheckValidLineRecord(Rec) then
        exit;

      SalesLine.SETRANGE("Document No.",Rec."Document No.");
      SalesLine.SETRANGE("Document Type",Rec."Document Type");
      SalesLine.SETRANGE("Recalculate Invoice Disc.",true);

      if SalesLine.FINDFIRST then begin
        ModifyTotalsSalesLine(SalesLine,true);
        exit;
      end;

      SalesLine.SETRANGE("Recalculate Invoice Disc.");

      if not SalesLine.FINDFIRST then
        BlankTotals(Rec."Document No.",false);
    END;

    [EventSubscriber(Table,112,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesInvoiceHeader@20(VAR Rec@1000 : Record "Sales Invoice Header";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromSalesInvoiceHeader(Rec);
    END;

    [EventSubscriber(Table,112,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesInvoiceHeader@21(VAR Rec@1000 : Record "Sales Invoice Header";VAR xRec@1001 : Record "Sales Invoice Header";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromSalesInvoiceHeader(Rec);
    END;

    [EventSubscriber(Table,112,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameSalesInvoiceHeader@22(VAR Rec@1000 : Record "Sales Invoice Header";VAR xRec@1001 : Record "Sales Invoice Header";RunTrigger@1002 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1003 : Record "Sales Invoice Entity Aggregate";
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if not SalesInvoiceEntityAggregate.GET(xRec."No.",true) then
        exit;

      SalesInvoiceEntityAggregate.SetIsRenameAllowed(true);
      SalesInvoiceEntityAggregate.RENAME(Rec."No.",true);
    END;

    [EventSubscriber(Table,112,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteSalesInvoiceHeader@23(VAR Rec@1000 : Record "Sales Invoice Header";RunTrigger@1001 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record "Sales Invoice Entity Aggregate";
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if not SalesInvoiceEntityAggregate.GET(Rec."No.",true) then
        exit;

      SalesInvoiceEntityAggregate.DELETE;
    END;

    [EventSubscriber(Codeunit,60,OnAfterCalcSalesDiscount)]
    LOCAL PROCEDURE OnAfterCalculateSalesDiscountOnSalesHeader@36(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      if not CheckValidRecord(SalesHeader) or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      InsertOrModifyFromSalesHeader(SalesHeader);
    END;

    [EventSubscriber(Table,21,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertCustomerLedgerEntry@11(VAR Rec@1000 : Record "Cust. Ledger Entry";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,21,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyCustomerLedgerEntry@13(VAR Rec@1000 : Record "Cust. Ledger Entry";VAR xRec@1001 : Record "Cust. Ledger Entry";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,21,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameCustomerLedgerEntry@14(VAR Rec@1000 : Record "Cust. Ledger Entry";VAR xRec@1001 : Record "Cust. Ledger Entry";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,21,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCustomerLedgerEntry@18(VAR Rec@1000 : Record "Cust. Ledger Entry";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCustLedgerEntry(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertCancelledDocument@29(VAR Rec@1000 : Record "Cancelled Document";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifyCancelledDocument@28(VAR Rec@1000 : Record "Cancelled Document";VAR xRec@1001 : Record "Cancelled Document";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterRenameCancelledDocument@27(VAR Rec@1000 : Record "Cancelled Document";VAR xRec@1001 : Record "Cancelled Document";RunTrigger@1002 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(xRec);
      SetStatusOptionFromCancelledDocument(Rec);
    END;

    [EventSubscriber(Table,1900,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterDeleteCancelledDocument@26(VAR Rec@1000 : Record "Cancelled Document";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      SetStatusOptionFromCancelledDocument(Rec);
    END;

    PROCEDURE PropagateOnInsert@15(VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate";VAR TempFieldBuffer@1003 : TEMPORARY Record "Field Buffer");
    VAR
      SalesHeader@1001 : Record "Sales Header";
      TypeHelper@1002 : Codeunit "Type Helper";
      TargetRecordRef@1004 : RecordRef;
      DocTypeFieldRef@1006 : FieldRef;
      NoFieldRef@1007 : FieldRef;
    BEGIN
      if SalesInvoiceEntityAggregate.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if SalesInvoiceEntityAggregate.Posted then
        ERROR(CannotInsertPostedInvoiceErr);

      TargetRecordRef.OPEN(DATABASE::"Sales Header");

      DocTypeFieldRef := TargetRecordRef.FIELD(SalesHeader.FIELDNO("Document Type"));
      DocTypeFieldRef.VALUE(SalesHeader."Document Type"::Invoice);

      NoFieldRef := TargetRecordRef.FIELD(SalesHeader.FIELDNO("No."));

      TypeHelper.TransferFieldsWithValidate(TempFieldBuffer,SalesInvoiceEntityAggregate,TargetRecordRef);

      TargetRecordRef.INSERT(true);

      SalesInvoiceEntityAggregate."No." := NoFieldRef.VALUE;
      SalesInvoiceEntityAggregate.FIND;
    END;

    PROCEDURE PropagateOnModify@16(VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate";VAR TempFieldBuffer@1004 : TEMPORARY Record "Field Buffer");
    VAR
      SalesHeader@1001 : Record "Sales Header";
      TypeHelper@1002 : Codeunit "Type Helper";
      TargetRecordRef@1005 : RecordRef;
      Exists@1003 : Boolean;
    BEGIN
      if SalesInvoiceEntityAggregate.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if SalesInvoiceEntityAggregate.Posted then
        ERROR(CannotModifyPostedInvioceErr);

      Exists := SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.");
      if Exists then
        TargetRecordRef.GETTABLE(SalesHeader)
      else
        TargetRecordRef.OPEN(DATABASE::"Sales Header");

      TypeHelper.TransferFieldsWithValidate(TempFieldBuffer,SalesInvoiceEntityAggregate,TargetRecordRef);

      if Exists then
        TargetRecordRef.MODIFY(true)
      else
        TargetRecordRef.INSERT(true);
    END;

    PROCEDURE PropagateOnDelete@17(VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
      SalesHeader@1002 : Record "Sales Header";
    BEGIN
      if SalesInvoiceEntityAggregate.ISTEMPORARY or (not GraphMgtGeneralTools.IsApiEnabled) then
        exit;

      if SalesInvoiceEntityAggregate.Posted then begin
        SalesInvoiceHeader.GET(SalesInvoiceEntityAggregate."No.");
        if SalesInvoiceHeader."No. Printed" = 0 then
          SalesInvoiceHeader."No. Printed" := 1;
        SalesInvoiceHeader.DELETE(true);
      end else begin
        SalesHeader.GET(SalesHeader."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.");
        SalesHeader.DELETE(true);
      end;
    END;

    PROCEDURE UpdateAggregateTableRecords@35();
    VAR
      SalesHeader@1000 : Record "Sales Header";
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      if SalesHeader.FINDSET then
        repeat
          InsertOrModifyFromSalesHeader(SalesHeader);
        until SalesHeader.NEXT = 0;

      if SalesInvoiceHeader.FINDSET then
        repeat
          InsertOrModifyFromSalesInvoiceHeader(SalesInvoiceHeader);
        until SalesInvoiceHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertOrModifyFromSalesHeader@39(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesInvoiceEntityAggregate@1002 : Record "Sales Invoice Entity Aggregate";
      RecordExists@1001 : Boolean;
    BEGIN
      SalesInvoiceEntityAggregate.LOCKTABLE;
      RecordExists := SalesInvoiceEntityAggregate.GET(SalesHeader."No.",false);

      SalesInvoiceEntityAggregate.TRANSFERFIELDS(SalesHeader,true);
      SalesInvoiceEntityAggregate.Posted := false;
      SetStatusOptionFromSalesHeader(SalesHeader,SalesInvoiceEntityAggregate);
      AssignTotalsFromSalesHeader(SalesHeader,SalesInvoiceEntityAggregate);
      SalesInvoiceEntityAggregate.UpdateReferencedRecordIds;

      if RecordExists then
        SalesInvoiceEntityAggregate.MODIFY(true)
      else
        SalesInvoiceEntityAggregate.INSERT(true);
    END;

    LOCAL PROCEDURE InsertOrModifyFromSalesInvoiceHeader@42(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      SalesInvoiceEntityAggregate@1002 : Record "Sales Invoice Entity Aggregate";
      RecordExists@1001 : Boolean;
    BEGIN
      SalesInvoiceEntityAggregate.LOCKTABLE;
      RecordExists := SalesInvoiceEntityAggregate.GET(SalesInvoiceHeader."No.",true);
      SalesInvoiceEntityAggregate.TRANSFERFIELDS(SalesInvoiceHeader,true);
      SalesInvoiceEntityAggregate.Posted := true;
      SetStatusOptionFromSalesInvoiceHeader(SalesInvoiceHeader,SalesInvoiceEntityAggregate);
      AssignTotalsFromSalesInvoiceHeader(SalesInvoiceHeader,SalesInvoiceEntityAggregate);
      SalesInvoiceEntityAggregate.UpdateReferencedRecordIds;

      if RecordExists then
        SalesInvoiceEntityAggregate.MODIFY(true)
      else
        SalesInvoiceEntityAggregate.INSERT(true);
    END;

    LOCAL PROCEDURE SetStatusOptionFromSalesInvoiceHeader@9(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header";VAR SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate");
    BEGIN
      if not GraphMgtGeneralTools.IsApiEnabled then
        exit;

      SalesInvoiceHeader.CALCFIELDS(Cancelled,Closed,Corrective);
      if SalesInvoiceHeader.Cancelled then begin
        SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Canceled;
        exit;
      end;

      if SalesInvoiceHeader.Corrective then begin
        SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Corrective;
        exit;
      end;

      if SalesInvoiceHeader.Closed then begin
        SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Paid;
        exit;
      end;

      SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Open;
    END;

    LOCAL PROCEDURE SetStatusOptionFromSalesHeader@47(VAR SalesHeader@1000 : Record "Sales Header";VAR SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate");
    BEGIN
      if (not GraphMgtGeneralTools.IsApiEnabled) and (not SalesHeader.ISTEMPORARY) then
        exit;

      SalesInvoiceEntityAggregate.Status := SalesInvoiceEntityAggregate.Status::Draft;
    END;

    LOCAL PROCEDURE SetStatusOptionFromCustLedgerEntry@19(VAR CustLedgerEntry@1000 : Record "Cust. Ledger Entry");
    VAR
      SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate";
    BEGIN
      if not GraphMgtGeneralTools.IsApiEnabled then
        exit;

      SalesInvoiceEntityAggregate.SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      SalesInvoiceEntityAggregate.SETRANGE(Posted,true);

      if not SalesInvoiceEntityAggregate.FINDSET(true) then
        exit;

      repeat
        UpdateStatusIfChanged(SalesInvoiceEntityAggregate);
      until SalesInvoiceEntityAggregate.NEXT = 0;
    END;

    LOCAL PROCEDURE SetStatusOptionFromCancelledDocument@30(VAR CancelledDocument@1000 : Record "Cancelled Document");
    VAR
      SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate";
    BEGIN
      if not GraphMgtGeneralTools.IsApiEnabled then
        exit;

      case CancelledDocument."Source ID" of
        DATABASE::"Sales Invoice Header":
          if not SalesInvoiceEntityAggregate.GET(CancelledDocument."Cancelled Doc. No.",true) then
            exit;
        DATABASE::"Sales Cr.Memo Header":
          if not SalesInvoiceEntityAggregate.GET(CancelledDocument."Cancelled By Doc. No.",true) then
            exit;
        else
          exit;
      end;

      UpdateStatusIfChanged(SalesInvoiceEntityAggregate);
    END;

    PROCEDURE SetTaxGroupIdAndCode@32(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";TaxGroupCode@1001 : Code[20];VATProductPostingGroupCode@1005 : Code[20];VATIdentifier@1006 : Code[20]);
    VAR
      TaxGroup@1004 : Record "Tax Group";
      VATProductPostingGroup@1003 : Record "VAT Product Posting Group";
      GeneralLedgerSetup@1002 : Record "General Ledger Setup";
    BEGIN
      if GeneralLedgerSetup.UseVat then begin
        SalesInvoiceLineAggregate."Tax Code" := VATIdentifier;
        if VATProductPostingGroup.GET(VATProductPostingGroupCode) then
          SalesInvoiceLineAggregate."Tax Id" := VATProductPostingGroup.Id;
      end else begin
        SalesInvoiceLineAggregate."Tax Code" := TaxGroupCode;
        if TaxGroup.GET(TaxGroupCode) then
          SalesInvoiceLineAggregate."Tax Id" := TaxGroup.Id;
      end;
    END;

    PROCEDURE UpdateUnitOfMeasure@43(VAR Item@1004 : Record Item;JSONUnitOfMeasureTxt@1001 : Text);
    VAR
      TempFieldSet@1000 : TEMPORARY Record Field;
      GraphCollectionMgtItem@1003 : Codeunit "Graph Collection Mgt - Item";
      ItemModified@1005 : Boolean;
    BEGIN
      GraphCollectionMgtItem.UpdateOrCreateItemUnitOfMeasureFromSalesDocument(JSONUnitOfMeasureTxt,Item,TempFieldSet,ItemModified);

      if ItemModified then
        Item.MODIFY(true);
    END;

    LOCAL PROCEDURE UpdateStatusIfChanged@33(VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
      CurrentStatus@1002 : Option;
    BEGIN
      SalesInvoiceHeader.GET(SalesInvoiceEntityAggregate."No.");
      CurrentStatus := SalesInvoiceEntityAggregate.Status;

      SetStatusOptionFromSalesInvoiceHeader(SalesInvoiceHeader,SalesInvoiceEntityAggregate);
      if CurrentStatus <> SalesInvoiceEntityAggregate.Status then
        SalesInvoiceEntityAggregate.MODIFY(true);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesHeader@58(VAR SalesHeader@1000 : Record "Sales Header";VAR SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesLine@1006 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");

      if not SalesLine.FINDFIRST then begin
        BlankTotals(SalesLine."Document No.",false);
        exit;
      end;

      AssignTotalsFromSalesLine(SalesLine,SalesInvoiceEntityAggregate,SalesHeader);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesInvoiceHeader@69(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header";VAR SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesInvoiceLine@1006 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");

      if not SalesInvoiceLine.FINDFIRST then begin
        BlankTotals(SalesInvoiceLine."Document No.",true);
        exit;
      end;

      AssignTotalsFromSalesInvoiceLine(SalesInvoiceLine,SalesInvoiceEntityAggregate);
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesLine@76(VAR SalesLine@1000 : Record "Sales Line";VAR SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate";VAR SalesHeader@1002 : Record "Sales Header");
    VAR
      TotalSalesLine@1003 : Record "Sales Line";
      DocumentTotals@1004 : Codeunit "Document Totals";
      VATAmount@1005 : Decimal;
    BEGIN
      if SalesLine."VAT Calculation Type" = SalesLine."VAT Calculation Type"::"Sales Tax" then begin
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := true;
        SalesInvoiceEntityAggregate."Prices Including VAT" := false;
      end else
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := not SalesHeader."Prices Including VAT";

      DocumentTotals.CalculateSalesTotals(TotalSalesLine,VATAmount,SalesLine);

      SalesInvoiceEntityAggregate."Invoice Discount Amount" := TotalSalesLine."Inv. Discount Amount";
      SalesInvoiceEntityAggregate.Amount := TotalSalesLine.Amount;
      SalesInvoiceEntityAggregate."Total Tax Amount" := VATAmount;
      SalesInvoiceEntityAggregate."Subtotal Amount" := TotalSalesLine."Line Amount";
      SalesInvoiceEntityAggregate."Amount Including VAT" := TotalSalesLine."Amount Including VAT";
    END;

    LOCAL PROCEDURE AssignTotalsFromSalesInvoiceLine@75(VAR SalesInvoiceLine@1000 : Record "Sales Invoice Line";VAR SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesInvoiceHeader@1003 : Record "Sales Invoice Header";
      TotalSalesInvoiceHeader@1006 : Record "Sales Invoice Header";
      TotalSalesInvoiceLine@1005 : Record "Sales Invoice Line";
      DocumentTotals@1004 : Codeunit "Document Totals";
      VATAmount@1002 : Decimal;
    BEGIN
      if SalesInvoiceLine."VAT Calculation Type" = SalesInvoiceLine."VAT Calculation Type"::"Sales Tax" then
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := true
      else begin
        SalesInvoiceHeader.GET(SalesInvoiceLine."Document No.");
        SalesInvoiceEntityAggregate."Discount Applied Before Tax" := not SalesInvoiceHeader."Prices Including VAT";
      end;

      DocumentTotals.CalculatePostedSalesInvoiceTotals(TotalSalesInvoiceHeader,VATAmount,SalesInvoiceLine);

      SalesInvoiceEntityAggregate."Invoice Discount Amount" := TotalSalesInvoiceHeader."Invoice Discount Amount";
      SalesInvoiceEntityAggregate.Amount := TotalSalesInvoiceHeader.Amount;
      SalesInvoiceEntityAggregate."Total Tax Amount" := VATAmount;

      TotalSalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceLine."Document No.");
      TotalSalesInvoiceLine.CALCSUMS("Line Amount");
      SalesInvoiceEntityAggregate."Subtotal Amount" := TotalSalesInvoiceLine."Line Amount";
      SalesInvoiceEntityAggregate."Amount Including VAT" := TotalSalesInvoiceHeader."Amount Including VAT";
    END;

    LOCAL PROCEDURE BlankTotals@25(DocumentNo@1000 : Code[20];Posted@1001 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1002 : Record "Sales Invoice Entity Aggregate";
    BEGIN
      if not SalesInvoiceEntityAggregate.GET(DocumentNo,Posted) then
        exit;

      SalesInvoiceEntityAggregate."Invoice Discount Amount" := 0;
      SalesInvoiceEntityAggregate."Total Tax Amount" := 0;
      SalesInvoiceEntityAggregate."Subtotal Amount" := 0;
      SalesInvoiceEntityAggregate.Amount := 0;
      SalesInvoiceEntityAggregate."Amount Including VAT" := 0;
      SalesInvoiceEntityAggregate.MODIFY;
    END;

    LOCAL PROCEDURE CheckValidRecord@8(VAR SalesHeader@1000 : Record "Sales Header") : Boolean;
    BEGIN
      if SalesHeader.ISTEMPORARY then
        exit(false);

      if SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE ModifyTotalsSalesLine@12(VAR SalesLine@1000 : Record "Sales Line";RecalculateInvoiceDisc@1002 : Boolean);
    VAR
      SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate";
      SalesHeader@1003 : Record "Sales Header";
    BEGIN
      if not RecalculateInvoiceDisc then
        exit;

      if not SalesInvoiceEntityAggregate.GET(SalesLine."Document No.",false) then
        exit;

      SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.");
      AssignTotalsFromSalesLine(SalesLine,SalesInvoiceEntityAggregate,SalesHeader);
      SalesInvoiceEntityAggregate.MODIFY(true);
    END;

    LOCAL PROCEDURE TransferSalesInvoiceLineAggregateToSalesLine@37(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";VAR SalesLine@1001 : Record "Sales Line";VAR TempFieldBuffer@1002 : TEMPORARY Record "Field Buffer");
    VAR
      VATProductPostingGroup@1006 : Record "VAT Product Posting Group";
      SalesHeader@1010 : Record "Sales Header";
      TaxGroup@1007 : Record "Tax Group";
      GeneralLedgerSetup@1005 : Record "General Ledger Setup";
      VATPostingSetup@1009 : Record "VAT Posting Setup";
      TypeHelper@1004 : Codeunit "Type Helper";
      SalesLineRecordRef@1003 : RecordRef;
      BlankGUID@1008 : GUID;
    BEGIN
      SalesLine."Document Type" := SalesLine."Document Type"::Invoice;

      SalesLineRecordRef.GETTABLE(SalesLine);

      TypeHelper.TransferFieldsWithValidate(TempFieldBuffer,SalesInvoiceLineAggregate,SalesLineRecordRef);
      SalesLineRecordRef.SETTABLE(SalesLine);

      if SalesInvoiceLineAggregate."Tax Id" <> BlankGUID then
        if GeneralLedgerSetup.UseVat then begin
          VATProductPostingGroup.SETRANGE(Id,SalesInvoiceLineAggregate."Tax Id");
          VATProductPostingGroup.FINDFIRST;

          SalesHeader.SETRANGE(Id,SalesInvoiceLineAggregate."Document Id");
          if not SalesHeader.FINDFIRST then
            ERROR(DocumentDoesNotExistErr);

          if not VATPostingSetup.GET(SalesHeader."VAT Bus. Posting Group",VATProductPostingGroup.Code) then
            ERROR(STRSUBSTNO(
                VATPostingSetupForCombinationDoesNotExistErr,
                SalesHeader."VAT Bus. Posting Group",
                VATProductPostingGroup.Id));

          SalesLine.VALIDATE("VAT Prod. Posting Group",VATProductPostingGroup.Code);
        end else begin
          TaxGroup.SETRANGE(Id,SalesInvoiceLineAggregate."Tax Id");
          TaxGroup.FINDFIRST;
          SalesLine.VALIDATE("Tax Group Code",TaxGroup.Code);
        end;
    END;

    LOCAL PROCEDURE TransferIntegrationRecordID@10(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
      NewIntegrationRecord@1002 : Record "Integration Record";
      OldIntegrationRecord@1003 : Record "Integration Record";
      IntegrationManagement@1004 : Codeunit "Integration Management";
      SalesInvoiceHeaderRecordRef@1005 : RecordRef;
    BEGIN
      if ISNULLGUID(SalesHeader.Id) then
        exit;

      SalesInvoiceHeader.SETRANGE("Pre-Assigned No.",SalesHeader."No.");
      if not SalesInvoiceHeader.FINDFIRST then
        exit;

      if SalesInvoiceHeader.Id = SalesHeader.Id then
        exit;

      if OldIntegrationRecord.GET(SalesHeader.Id) then
        OldIntegrationRecord.DELETE;

      if NewIntegrationRecord.GET(SalesInvoiceHeader.Id) then
        NewIntegrationRecord.DELETE;

      SalesInvoiceHeader.Id := SalesHeader.Id;
      SalesInvoiceHeader.MODIFY(true);
      SalesInvoiceHeaderRecordRef.GETTABLE(SalesInvoiceHeader);

      IntegrationManagement.InsertUpdateIntegrationRecord(SalesInvoiceHeaderRecordRef,CURRENTDATETIME);
    END;

    PROCEDURE RedistributeInvoiceDiscounts@31(VAR SalesInvoiceEntityAggregate@1002 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      if SalesInvoiceEntityAggregate.Posted then
        exit;

      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");
      SalesLine.SETRANGE("Recalculate Invoice Disc.",true);
      if SalesLine.FINDFIRST then
        CODEUNIT.RUN(CODEUNIT::"Sales - Calc Discount By Type",SalesLine);

      SalesInvoiceEntityAggregate.FIND;
    END;

    PROCEDURE LoadLines@1(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";DocumentIdFilter@1007 : Text);
    VAR
      SalesInvoiceEntityAggregate@1004 : Record "Sales Invoice Entity Aggregate";
    BEGIN
      if DocumentIdFilter = '' then
        ERROR(DocumentIDNotSpecifiedForLinesErr);

      SalesInvoiceEntityAggregate.SETFILTER(Id,DocumentIdFilter);
      if not SalesInvoiceEntityAggregate.FINDFIRST then
        exit;

      if SalesInvoiceEntityAggregate.Posted then
        LoadSalesInvoiceLines(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate)
      else
        LoadSalesLines(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);
    END;

    LOCAL PROCEDURE LoadSalesInvoiceLines@4(VAR SalesInvoiceLineAggregate@1001 : Record "Sales Invoice Line Aggregate";VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesInvoiceLine@1002 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");

      if SalesInvoiceLine.FINDSET(false,false) then
        repeat
          CLEAR(SalesInvoiceLineAggregate);
          SalesInvoiceLineAggregate.TRANSFERFIELDS(SalesInvoiceLine,true);
          SalesInvoiceLineAggregate."Document Id" := SalesInvoiceEntityAggregate.Id;
          SetTaxGroupIdAndCode(
            SalesInvoiceLineAggregate,
            SalesInvoiceLine."Tax Group Code",
            SalesInvoiceLine."VAT Prod. Posting Group",
            SalesInvoiceLine."VAT Identifier");
          SalesInvoiceLineAggregate."VAT %" := SalesInvoiceLine."VAT %";
          SalesInvoiceLineAggregate."Tax Amount" := SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine."VAT Base Amount";
          SalesInvoiceLineAggregate."Currency Code" := SalesInvoiceLine.GetCurrencyCode;
          SalesInvoiceLineAggregate."Prices Including Tax" := SalesInvoiceEntityAggregate."Prices Including VAT";
          SalesInvoiceLineAggregate.UpdateReferencedRecordIds;
          UpdateLineAmountsFromSalesInvoiceLine(SalesInvoiceLineAggregate,SalesInvoiceLine);
          SalesInvoiceLineAggregate.INSERT(true);
        until SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE LoadSalesLines@38(VAR SalesInvoiceLineAggregate@1002 : Record "Sales Invoice Line Aggregate";VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
      SalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");

      if SalesLine.FINDSET(false,false) then
        repeat
          TransferFromSalesLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate,SalesLine);
          SalesInvoiceLineAggregate.INSERT(true);
        until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TransferFromSalesLine@40(VAR SalesInvoiceLineAggregate@1002 : Record "Sales Invoice Line Aggregate";VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate";VAR SalesLine@1001 : Record "Sales Line");
    BEGIN
      TransferFromSalesLineToAggregateLine(
        SalesInvoiceLineAggregate,SalesLine,SalesInvoiceEntityAggregate.Id,SalesInvoiceEntityAggregate."Prices Including VAT");
    END;

    PROCEDURE TransferFromSalesLineToAggregateLine@101(VAR SalesInvoiceLineAggregate@1002 : Record "Sales Invoice Line Aggregate";VAR SalesLine@1001 : Record "Sales Line";DocumentId@1000 : GUID;PricesIncludingVAT@1003 : Boolean);
    BEGIN
      CLEAR(SalesInvoiceLineAggregate);
      SalesInvoiceLineAggregate.TRANSFERFIELDS(SalesLine,true);
      SalesInvoiceLineAggregate."Document Id" := DocumentId;
      SetTaxGroupIdAndCode(
        SalesInvoiceLineAggregate,
        SalesLine."Tax Group Code",
        SalesLine."VAT Prod. Posting Group",
        SalesLine."VAT Identifier");
      SalesInvoiceLineAggregate."VAT %" := SalesLine."VAT %";
      SalesInvoiceLineAggregate."Tax Amount" := SalesLine."Amount Including VAT" - SalesLine."VAT Base Amount";
      SalesInvoiceLineAggregate."Prices Including Tax" := PricesIncludingVAT;
      SalesInvoiceLineAggregate.UpdateReferencedRecordIds;
      UpdateLineAmountsFromSalesLine(SalesInvoiceLineAggregate,SalesLine);
    END;

    PROCEDURE PropagateInsertLine@7(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";VAR TempFieldBuffer@1005 : TEMPORARY Record "Field Buffer");
    VAR
      SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate";
      SalesLine@1002 : Record "Sales Line";
      LastUsedSalesLine@1004 : Record "Sales Line";
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);

      SalesLine."Document Type" := SalesLine."Document Type"::Invoice;
      SalesLine."Document No." := SalesInvoiceEntityAggregate."No.";

      if SalesInvoiceLineAggregate."Line No." = 0 then begin
        LastUsedSalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");
        LastUsedSalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
        if LastUsedSalesLine.FINDLAST then
          SalesInvoiceLineAggregate."Line No." := LastUsedSalesLine."Line No." + 10000
        else
          SalesInvoiceLineAggregate."Line No." := 10000;

        SalesLine."Line No." := SalesInvoiceLineAggregate."Line No.";
      end else
        if SalesLine.GET(SalesLine."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.",SalesInvoiceLineAggregate."Line No.") then
          ERROR(CannotInsertALineThatAlreadyExistsErr);

      TransferSalesInvoiceLineAggregateToSalesLine(SalesInvoiceLineAggregate,SalesLine,TempFieldBuffer);
      SalesLine.INSERT(true);

      if not SkipUpdateDiscounts then
        RedistributeInvoiceDiscounts(SalesInvoiceEntityAggregate);

      SalesLine.FIND;
      TransferFromSalesLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate,SalesLine);
    END;

    PROCEDURE PropagateModifyLine@24(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";VAR TempFieldBuffer@1004 : TEMPORARY Record "Field Buffer");
    VAR
      SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate";
      SalesLine@1002 : Record "Sales Line";
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);

      if not SalesLine.GET(SalesLine."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.",SalesInvoiceLineAggregate."Line No.") then
        ERROR(CannotModifyALineThatDoesntExistErr);

      TransferSalesInvoiceLineAggregateToSalesLine(SalesInvoiceLineAggregate,SalesLine,TempFieldBuffer);

      SalesLine.MODIFY(true);

      if not SkipUpdateDiscounts then
        RedistributeInvoiceDiscounts(SalesInvoiceEntityAggregate);

      SalesLine.FIND;
      TransferFromSalesLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate,SalesLine);
    END;

    PROCEDURE PropagateDeleteLine@6(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate");
    VAR
      SalesInvoiceEntityAggregate@1003 : Record "Sales Invoice Entity Aggregate";
      SalesLine@1002 : Record "Sales Line";
    BEGIN
      VerifyCRUDIsPossibleForLine(SalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);

      if SalesLine.GET(SalesLine."Document Type"::Invoice,SalesInvoiceEntityAggregate."No.",SalesInvoiceLineAggregate."Line No.") then begin
        SalesLine.DELETE(true);
        if not SkipUpdateDiscounts then
          RedistributeInvoiceDiscounts(SalesInvoiceEntityAggregate);
      end;
    END;

    PROCEDURE PropagateMultipleLinesUpdate@65(VAR TempNewSalesInvoiceLineAggregate@1000 : TEMPORARY Record "Sales Invoice Line Aggregate");
    VAR
      TempCurrentSalesInvoiceLineAggregate@1005 : TEMPORARY Record "Sales Invoice Line Aggregate";
      SalesInvoiceEntityAggregate@1001 : Record "Sales Invoice Entity Aggregate";
      SalesLine@1002 : Record "Sales Line";
      TempAllFieldBuffer@1003 : TEMPORARY Record "Field Buffer";
      NativeEDMTypes@1004 : Codeunit "Native - EDM Types";
    BEGIN
      VerifyCRUDIsPossibleForLine(TempNewSalesInvoiceLineAggregate,SalesInvoiceEntityAggregate);
      NativeEDMTypes.GetFieldSetBufferWithAllFieldsSet(TempAllFieldBuffer);

      if not TempNewSalesInvoiceLineAggregate.FINDFIRST then begin
        SalesLine.SETRANGE("Document Type",SalesLine."Document Type"::Invoice);
        SalesLine.SETRANGE("Document No.",SalesInvoiceEntityAggregate."No.");
        SalesLine.DELETEALL(true);
        exit;
      end;

      LoadLines(TempCurrentSalesInvoiceLineAggregate,SalesInvoiceEntityAggregate.Id);

      SkipUpdateDiscounts := true;

      // Remove deleted lines
      if TempCurrentSalesInvoiceLineAggregate.FINDSET(true,false) then
        repeat
          if not TempNewSalesInvoiceLineAggregate.GET(SalesInvoiceEntityAggregate.Id,TempCurrentSalesInvoiceLineAggregate."Line No.") then
            PropagateDeleteLine(TempCurrentSalesInvoiceLineAggregate);
        until TempCurrentSalesInvoiceLineAggregate.NEXT = 0;

      // Update Lines
      TempNewSalesInvoiceLineAggregate.FINDFIRST;

      repeat
        if not TempCurrentSalesInvoiceLineAggregate.GET(
             TempNewSalesInvoiceLineAggregate."Document Id",TempNewSalesInvoiceLineAggregate."Line No.")
        then
          PropagateInsertLine(TempNewSalesInvoiceLineAggregate,TempAllFieldBuffer)
        else
          PropagateModifyLine(TempNewSalesInvoiceLineAggregate,TempAllFieldBuffer);
      until TempNewSalesInvoiceLineAggregate.NEXT = 0;

      SalesInvoiceEntityAggregate.FIND;
    END;

    LOCAL PROCEDURE VerifyCRUDIsPossibleForLine@60(VAR SalesInvoiceLineAggregate@1001 : Record "Sales Invoice Line Aggregate";VAR SalesInvoiceEntityAggregate@1000 : Record "Sales Invoice Entity Aggregate");
    VAR
      SearchSalesInvoiceEntityAggregate@1002 : Record "Sales Invoice Entity Aggregate";
      DocumentIDFilter@1003 : Text;
    BEGIN
      if ISNULLGUID(SalesInvoiceLineAggregate."Document Id") then begin
        DocumentIDFilter := SalesInvoiceLineAggregate.GETFILTER("Document Id");
        if DocumentIDFilter = '' then
          ERROR(DocumentIDNotSpecifiedForLinesErr);
        SalesInvoiceEntityAggregate.SETFILTER(Id,DocumentIDFilter);
      end else
        SalesInvoiceEntityAggregate.SETRANGE(Id,SalesInvoiceLineAggregate."Document Id");

      if not SalesInvoiceEntityAggregate.FINDFIRST then
        ERROR(DocumentDoesNotExistErr);

      SearchSalesInvoiceEntityAggregate.COPY(SalesInvoiceEntityAggregate);
      if SearchSalesInvoiceEntityAggregate.NEXT <> 0 then
        ERROR(MultipleDocumentsFoundForIdErr);

      if SalesInvoiceEntityAggregate.Posted then
        ERROR(CannotModifyPostedInvioceErr);
    END;

    LOCAL PROCEDURE UpdateLineAmountsFromSalesLine@44(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";VAR SalesLine@1001 : Record "Sales Line");
    BEGIN
      SalesInvoiceLineAggregate."Line Amount Excluding Tax" := SalesLine.GetLineAmountExclVAT;
      SalesInvoiceLineAggregate."Line Amount Including Tax" := SalesLine.GetLineAmountInclVAT;
      SalesInvoiceLineAggregate."Line Tax Amount" :=
        SalesInvoiceLineAggregate."Line Amount Including Tax" - SalesInvoiceLineAggregate."Line Amount Excluding Tax";
      UpdateInvoiceDiscountAmount(SalesInvoiceLineAggregate);
    END;

    LOCAL PROCEDURE UpdateLineAmountsFromSalesInvoiceLine@49(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate";VAR SalesInvoiceLine@1001 : Record "Sales Invoice Line");
    BEGIN
      SalesInvoiceLineAggregate."Line Amount Excluding Tax" := SalesInvoiceLine.GetLineAmountExclVAT;
      SalesInvoiceLineAggregate."Line Amount Including Tax" := SalesInvoiceLine.GetLineAmountInclVAT;
      SalesInvoiceLineAggregate."Line Tax Amount" :=
        SalesInvoiceLineAggregate."Line Amount Including Tax" - SalesInvoiceLineAggregate."Line Amount Excluding Tax";
      UpdateInvoiceDiscountAmount(SalesInvoiceLineAggregate);
    END;

    PROCEDURE UpdateInvoiceDiscountAmount@48(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate");
    BEGIN
      if SalesInvoiceLineAggregate."Prices Including Tax" then
        SalesInvoiceLineAggregate."Inv. Discount Amount Excl. VAT" :=
          SalesInvoiceLineAggregate."Line Amount Excluding Tax" - SalesInvoiceLineAggregate.Amount
      else
        SalesInvoiceLineAggregate."Inv. Discount Amount Excl. VAT" := SalesInvoiceLineAggregate."Inv. Discount Amount";
    END;

    PROCEDURE VerifyCanUpdateUOM@45(VAR SalesInvoiceLineAggregate@1000 : Record "Sales Invoice Line Aggregate");
    BEGIN
      if SalesInvoiceLineAggregate."API Type" <> SalesInvoiceLineAggregate."API Type"::Item then
        ERROR(CanOnlySetUOMForTypeItemErr);
    END;

    LOCAL PROCEDURE CheckValidLineRecord@41(VAR SalesLine@1000 : Record "Sales Line") : Boolean;
    BEGIN
      if SalesLine.ISTEMPORARY then
        exit(false);

      if not GraphMgtGeneralTools.IsApiEnabled then
        exit(false);

      if SalesLine."Document Type" <> SalesLine."Document Type"::Invoice then
        exit(false);

      exit(true);
    END;

    BEGIN
    END.
  }
}

