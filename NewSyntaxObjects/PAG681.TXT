OBJECT Page 681 Report Inbox Part
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Report Inbox;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Report Inbox";
    SourceTableView=SORTING("User ID","Created Date-Time")
                    ORDER(Descending);
    PageType=ListPart;
    RefreshOnActivate=true;
    OnOpenPage=BEGIN
                 SETRANGE("User ID",USERID);
                 SETAUTOCALCFIELDS;
                 ShowAll := true;
                 UpdateVisibility;
                 AddInReady := false;
               END;

    OnFindRecord=BEGIN
                   ActionsEnabled := not ISEMPTY;
                   exit(FIND(Which));
                 END;

    OnQueryClosePage=BEGIN
                       if AddInReady then
                         CurrPage.PingPong.Stop;
                       exit(true);
                     END;

    ActionList=ACTIONS
    {
      { 7       ;    ;ActionContainer;
                      Name=Report;
                      CaptionML=ENU=Report;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Show;
                      ShortCutKey=Return;
                      CaptionML=ENU=Show;
                      ToolTipML=ENU=Open your report inbox.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=ActionsEnabled;
                      Image=Report;
                      OnAction=BEGIN
                                 ShowReport;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 11      ;1   ;Separator ;
                      Name=Separator11 }
      { 12      ;1   ;Action    ;
                      Name=Unread;
                      CaptionML=ENU=Unread Reports;
                      ToolTipML=ENU=Show only unread reports in your inbox.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=ShowAll;
                      Image=FilterLines;
                      OnAction=BEGIN
                                 ShowAll := false;
                                 UpdateVisibility;
                               END;
                                }
      { 13      ;1   ;Action    ;
                      Name=All;
                      CaptionML=ENU=All Reports;
                      ToolTipML=ENU=View all reports in your inbox.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NOT ShowAll;
                      Image=AllLines;
                      OnAction=BEGIN
                                 ShowAll := true;
                                 UpdateVisibility;
                               END;
                                }
      { 14      ;1   ;Separator ;
                      Name=Separator14 }
      { 9       ;1   ;Action    ;
                      Name=Delete;
                      CaptionML=ENU=Delete;
                      ToolTipML=ENU=Delete the record.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=ActionsEnabled;
                      Image=Delete;
                      OnAction=VAR
                                 ReportInbox@1000 : Record "Report Inbox";
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ReportInbox);
                                 ReportInbox.DELETEALL;
                                 UpdateVisibility;
                               END;
                                }
      { 18      ;1   ;Separator ;
                      Name=Separator18 }
      { 19      ;1   ;Action    ;
                      Name=ShowQueue;
                      CaptionML=ENU=Show Queue;
                      ToolTipML=ENU=Show scheduled reports.;
                      ApplicationArea=#Basic,#Suite;
                      Image=List;
                      OnAction=VAR
                                 JobQueueEntry@1000 : Record "Job Queue Entry";
                               BEGIN
                                 JobQueueEntry.FILTERGROUP(2);
                                 JobQueueEntry.SETRANGE("User ID",USERID);
                                 JobQueueEntry.FILTERGROUP(0);
                                 PAGE.RUN(PAGE::"Job Queue Entries",JobQueueEntry);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=User ID;
                ToolTipML=ENU=Specifies the ID of the user who posted the entry, to be used, for example, in the change log.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="User ID";
                Visible=false;
                Style=Strong;
                StyleExpr=NOT Read;
                ImplicitType=Text65 }

    { 4   ;2   ;Field     ;
                Name=Created Date-Time;
                ToolTipML=ENU=Specifies the date and time that the scheduled report was processed from the job queue.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Created Date-Time";
                Style=Strong;
                StyleExpr=NOT Read;
                ImplicitType=DateTime }

    { 5   ;2   ;Field     ;
                Name=Report ID;
                ToolTipML=ENU=Specifies the ID of the report that was scheduled and processed by job queue.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Report ID";
                Visible=false;
                Style=Strong;
                StyleExpr=NOT Read;
                ImplicitType=Integer }

    { 6   ;2   ;Field     ;
                Name=Report Name;
                ToolTipML=ENU=Specifies the name of the scheduled report that was processed from the job queue.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Report Name";
                Visible=FALSE;
                Style=Strong;
                StyleExpr=NOT Read;
                OnDrillDown=BEGIN
                              ShowReport;
                              CurrPage.UPDATE;
                            END;

                ImplicitType=Text250 }

    { 15  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies the description of the scheduled report that was processed from the job queue.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Style=Strong;
                StyleExpr=NOT Read;
                OnDrillDown=BEGIN
                              ShowReport;
                              CurrPage.UPDATE;
                            END;

                ImplicitType=Text250 }

    { 10  ;2   ;Field     ;
                Name=Output Type;
                ToolTipML=ENU=Specifies the output type of the scheduled report.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Output Type";
                Style=Strong;
                StyleExpr=NOT Read;
                ImplicitType=Option }

    { 16  ;1   ;Group     ;
                Name=Group16;
                GroupType=Group }

    { 17  ;2   ;Field     ;
                Name=PingPong;
                ApplicationArea=#Basic,#Suite;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.PingPong;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      ShowAll@1000 : Boolean;
      PrevNumberOfRecords@1001 : Integer;
      AddInReady@1002 : Boolean;
      ActionsEnabled@1003 : Boolean;

    LOCAL PROCEDURE UpdateVisibility@1();
    BEGIN
      if ShowAll then
        SETRANGE(Read)
      else
        SETRANGE(Read,false);
      ActionsEnabled := FINDFIRST;
      CurrPage.UPDATE(false);
    END;

    EVENT PingPong@-17::AddInReady@2();
    BEGIN
      AddInReady := true;
      PrevNumberOfRecords := COUNT;
      CurrPage.PingPong.Ping(10000);
    END;

    EVENT PingPong@-17::Pong@3();
    VAR
      CurrNumberOfRecords@1000 : Integer;
    BEGIN
      CurrNumberOfRecords := COUNT;
      if PrevNumberOfRecords <> CurrNumberOfRecords then
        CurrPage.UPDATE(false);
      PrevNumberOfRecords := CurrNumberOfRecords;
      CurrPage.PingPong.Ping(10000);
    END;

    BEGIN
    END.
  }
}

