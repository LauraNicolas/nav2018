OBJECT Page 5097 Create Task
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Task;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="To-do";
    DataCaptionExpr=Caption;
    PageType=Card;
    OnInit=BEGIN
             AttachmentEnable := true;
             LanguageCodeEnable := true;
             CalcDueDateFromEnable := true;
             RecurringDateIntervalEnable := true;
             WizardContactNameEnable := true;
             AllDayEventEnable := true;
             LocationEnable := true;
             DurationEnable := true;
             EndingTimeEnable := true;
             StartTimeEnable := true;
             SalespersonCodeEnable := true;
             SalespersonCodeEditable := true;
             WizardOpportunityDescriptionEd := true;
             WizardCampaignDescriptionEdita := true;
             WizardContactNameEditable := true;
             TeamTaskEditable := true;
           END;

    OnOpenPage=BEGIN
                 IsOnMobile := CURRENTCLIENTTYPE = CLIENTTYPE::Phone;

                 WizardContactNameEditable := false;
                 WizardCampaignDescriptionEdita := false;
                 WizardOpportunityDescriptionEd := false;

                 if SalesPurchPerson.GET(GETFILTER("Salesperson Code")) then begin
                   SalespersonCodeEditable := false;
                   TeamTaskEditable := false;
                 end;

                 if "Segment Description" <> '' then
                   SegmentDescEditable := false;

                 IsMeeting := (Type = Type::Meeting);
               END;

    OnAfterGetRecord=BEGIN
                       EnableFields;
                       WizardContactNameOnFormat(FORMAT("Wizard Contact Name"));
                     END;

    OnQueryClosePage=BEGIN
                       if CloseAction in [ACTION::OK,ACTION::LookupOK] then
                         FinishPage;
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 10      ;1   ;Action    ;
                      Name=Finish;
                      CaptionML=ENU=&Finish;
                      ToolTipML=ENU=Finish the task.;
                      ApplicationArea=#RelationshipMgmt;
                      Promoted=true;
                      Visible=IsOnMobile;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=BEGIN
                                 FinishPage;
                                 CurrPage.CLOSE;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General;
                GroupType=Group }

    { 18  ;2   ;Field     ;
                Name=Type;
                ToolTipML=ENU=Specifies the type of the Task.;
                OptionCaptionML=ENU=" ,,Phone Call";
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Type;
                OnValidate=BEGIN
                             if Type <> xRec.Type then
                               if Type = Type::Meeting then begin
                                 AssignDefaultAttendeeInfo;
                                 LoadTempAttachment;
                                 if not "Team To-do" then
                                   if "Salesperson Code" = '' then begin
                                     if Cont.GET("Contact No.") then
                                       VALIDATE("Salesperson Code",Cont."Salesperson Code")
                                     else
                                       if Cont.GET("Contact Company No.") then
                                         VALIDATE("Salesperson Code",Cont."Salesperson Code");
                                     if Campaign.GET(GETFILTER("Campaign No.")) then
                                       VALIDATE("Salesperson Code",Campaign."Salesperson Code");
                                     if Opp.GET(GETFILTER("Opportunity No.")) then
                                       VALIDATE("Salesperson Code",Opp."Salesperson Code");
                                     if SegHeader.GET(GETFILTER("Segment No.")) then
                                       VALIDATE("Salesperson Code",SegHeader."Salesperson Code");
                                     MODIFY;
                                   end;
                                 GetAttendee(AttendeeTemp);
                                 CurrPage.AttendeeSubform.PAGE.SetAttendee(AttendeeTemp);
                                 CurrPage.AttendeeSubform.PAGE.SetTaskFilter(SalespersonFilter,ContactFilter);
                                 CurrPage.AttendeeSubform.PAGE.UpdateForm;
                               end else begin
                                 ClearDefaultAttendeeInfo;
                                 CurrPage.AttendeeSubform.PAGE.GetAttendee(AttendeeTemp);
                                 SetAttendee(AttendeeTemp);
                                 SalespersonCodeEnable := false;
                                 WizardContactNameEnable := true;
                               end;
                             IsMeeting := (Type = Type::Meeting);
                             TypeOnAfterValidate;
                             CurrPage.UPDATE;
                           END;

                ImplicitType=Option }

    { 23  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies the description of the Task.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Description;
                ImplicitType=Text50 }

    { 44  ;2   ;Field     ;
                Name=AllDayEvent;
                CaptionML=ENU=All Day Event;
                ToolTipML=ENU=Specifies that the Task of the Meeting type is an all-day event, which is an activity that lasts 24 hours or longer.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="All Day Event";
                Enabled=AllDayEventEnable;
                OnValidate=BEGIN
                             AllDayEventOnAfterValidate;
                           END;

                ImplicitType=Boolean }

    { 12  ;2   ;Field     ;
                Name=Date;
                CaptionML=ENU=Start Date;
                ToolTipML=ENU=Specifies the date when the Task should be started. There are certain rules for how dates should be entered found in How to: Enter Dates and Times.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Date;
                ImplicitType=Date }

    { 49  ;2   ;Field     ;
                Name=Start Time;
                CaptionML=ENU=Start Time;
                ToolTipML=ENU=Specifies the time when the Task of the Meeting type should be started.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Start Time";
                Enabled=StartTimeEnable;
                ImplicitType=Time }

    { 51  ;2   ;Field     ;
                Name=Duration;
                CaptionML=ENU=Duration;
                ToolTipML=ENU=Specifies the duration of the Task of the Meeting type.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Duration;
                Enabled=DurationEnable;
                ImplicitType=Duration }

    { 45  ;2   ;Field     ;
                Name=Ending Date;
                CaptionML=ENU=Ending Date;
                ToolTipML=ENU=Specifies the date of when the Task should end. There are certain rules for how dates should be entered. For more information, see How to: Enter Dates and Times.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Ending Date";
                ImplicitType=Date }

    { 55  ;2   ;Field     ;
                Name=Ending Time;
                CaptionML=ENU=Ending Time;
                ToolTipML=ENU=Specifies the time of when the Task of the Meeting type should end.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Ending Time";
                Enabled=EndingTimeEnable;
                ImplicitType=Time }

    { 29  ;2   ;Field     ;
                Name=TeamTask;
                CaptionML=ENU=Team Task;
                ToolTipML=ENU=Specifies if the Task is meant to be done team-wide. Select the check box to specify that the Task applies to the entire Team.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Team To-do";
                Editable=TeamTaskEditable;
                OnValidate=BEGIN
                             if not "Team To-do" then begin
                               "Team Code" := '';
                               SalespersonCodeEnable := false;
                               if Type = Type::Meeting then begin
                                 ClearDefaultAttendeeInfo;
                                 AssignDefaultAttendeeInfo;
                               end;
                             end;
                           END;

                ImplicitType=Boolean }

    { 21  ;2   ;Field     ;
                Name=Wizard Contact Name;
                Lookup=false;
                CaptionML=ENU=Contact;
                ToolTipML=ENU=Specifies a Contact name from the wizard.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Wizard Contact Name";
                TableRelation=Contact;
                Enabled=WizardContactNameEnable;
                Editable=WizardContactNameEditable;
                OnAssistEdit=VAR
                               Cont@1102601001 : Record Contact;
                             BEGIN
                               if (GETFILTER("Contact No.") = '') and (GETFILTER("Contact Company No.") = '') and ("Segment Description" = '') then begin
                                 if Cont.GET("Contact No.") then ;
                                 if PAGE.RUNMODAL(0,Cont) = ACTION::LookupOK then begin
                                   VALIDATE("Contact No.",Cont."No.");
                                   "Wizard Contact Name" := Cont.Name;
                                 end;
                               end;
                             END;

                ImplicitType=Text50 }

    { 9   ;2   ;Field     ;
                Name=Salesperson Code;
                CaptionML=ENU=Salesperson;
                ToolTipML=ENU=Specifies the code of the Salesperson assigned to the Task.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Salesperson Code";
                Enabled=SalespersonCodeEnable;
                Editable=SalespersonCodeEditable;
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Team Code;
                CaptionML=ENU=Team;
                ToolTipML=ENU=Specifies the code of the Team to which the Task is assigned.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Team Code";
                Enabled="Team To-do" OR NOT IsMeeting;
                Editable="Team To-do";
                OnValidate=BEGIN
                             if (xRec."Team Code" <> "Team Code") and
                                ("Team Code" <> '') and
                                (Type = Type::Meeting)
                             then begin
                               ClearDefaultAttendeeInfo;
                               AssignDefaultAttendeeInfo
                             end
                           END;

                ImplicitType=Code10 }

    { 11  ;2   ;Field     ;
                Name=Wizard Campaign Description;
                Lookup=false;
                CaptionML=ENU=Campaign;
                ToolTipML=ENU=Specifies a description of the campaign that is related to the task. The description is copied from the campaign card.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Wizard Campaign Description";
                TableRelation=Campaign;
                Importance=Additional;
                Editable=WizardCampaignDescriptionEdita;
                OnAssistEdit=VAR
                               Campaign@1102601001 : Record Campaign;
                             BEGIN
                               if GETFILTER("Campaign No.") = '' then begin
                                 if Campaign.GET("Campaign No.") then ;
                                 if PAGE.RUNMODAL(0,Campaign) = ACTION::LookupOK then begin
                                   VALIDATE("Campaign No.",Campaign."No.");
                                   "Wizard Campaign Description" := Campaign.Description;
                                 end;
                               end;
                             END;

                ImplicitType=Text50 }

    { 5   ;2   ;Field     ;
                Name=Wizard Opportunity Description;
                Lookup=false;
                CaptionML=ENU=Opportunity;
                ToolTipML=ENU=Specifies a description of the Opportunity that is related to the Task. The description is copied from the Campaign card.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Wizard Opportunity Description";
                TableRelation=Opportunity;
                Importance=Additional;
                Editable=WizardOpportunityDescriptionEd;
                OnAssistEdit=VAR
                               Opp@1102601001 : Record Opportunity;
                             BEGIN
                               if GETFILTER("Opportunity No.") = '' then begin
                                 if Opp.GET("Opportunity No.") then ;
                                 if PAGE.RUNMODAL(0,Opp) = ACTION::LookupOK then begin
                                   VALIDATE("Opportunity No.",Opp."No.");
                                   "Wizard Opportunity Description" := Opp.Description;
                                 end;
                               end;
                             END;

                ImplicitType=Text50 }

    { 6   ;2   ;Field     ;
                Name=SegmentDesc;
                Lookup=false;
                CaptionML=ENU=Create Tasks for Segment Contacts;
                ToolTipML=ENU=Specifies a description of the Segment related to the Task. The description is copied from the Segment Card.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Segment Description";
                TableRelation="Segment Header";
                Importance=Additional;
                Editable=SegmentDescEditable;
                OnAssistEdit=VAR
                               SegmentHeader@1102601000 : Record "Segment Header";
                             BEGIN
                               if GETFILTER("Segment No.") = '' then begin
                                 if SegmentHeader.GET("Segment No.") then ;
                                 if PAGE.RUNMODAL(0,SegmentHeader) = ACTION::LookupOK then begin
                                   VALIDATE("Segment No.",SegmentHeader."No.");
                                   "Segment Description" := SegmentHeader.Description;
                                 end;
                               end;
                             END;

                ImplicitType=Text50 }

    { 2   ;2   ;Field     ;
                Name=Priority;
                CaptionML=ENU=Priority;
                ToolTipML=ENU=Specifies the priority of the Task. There are three options:;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Priority;
                Importance=Additional;
                ImplicitType=Option }

    { 3   ;2   ;Field     ;
                Name=Location;
                CaptionML=ENU=Location;
                ToolTipML=ENU=Specifies the Location where the Meeting will take place.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Location;
                Importance=Promoted;
                Enabled=LocationEnable;
                ImplicitType=Text50 }

    { 20  ;1   ;Group     ;
                Name=MeetingAttendees;
                CaptionML=ENU=Meeting Attendees;
                Visible=IsMeeting;
                GroupType=Group }

    { 19  ;2   ;Part      ;
                Name=AttendeeSubform;
                ApplicationArea=#RelationshipMgmt;
                SubPageLink="To-do No."=FIELD("No.");
                PagePartID="Attendee Wizard Subform";
                PartType=Page }

    { 22  ;2   ;Group     ;
                Name=MeetingInteraction;
                CaptionML=ENU=Interaction;
                GroupType=Group }

    { 16  ;3   ;Field     ;
                Name=Send on finish;
                CaptionML=ENU=Send Invitation(s) on Finish;
                ToolTipML=ENU=Specifies if the meeting invitation task will be sent when the Create Task wizard is finished.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Send on finish";
                ImplicitType=Boolean }

    { 15  ;3   ;Field     ;
                Name=Interaction Template Code;
                CaptionML=ENU=Interaction Template;
                ToolTipML=ENU=Specifies the code for the Interaction Template that you have selected.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Interaction Template Code";
                TableRelation="Interaction Template";
                OnValidate=BEGIN
                             ValidateInteractionTemplCode;
                             InteractionTemplateCodeOnAfter;
                           END;

                ImplicitType=Code10 }

    { 14  ;3   ;Field     ;
                Name=Language Code;
                ToolTipML=ENU=Specifies the Language Code for the Interaction Template.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Language Code";
                Enabled=LanguageCodeEnable;
                OnValidate=BEGIN
                             ValidateLanguageCode;
                           END;

                OnLookup=BEGIN
                           LookupLanguageCode;
                         END;

                ImplicitType=Code10 }

    { 13  ;3   ;Field     ;
                Name=Attachment;
                AssistEdit=true;
                CaptionML=ENU=Attachment;
                ToolTipML=ENU=Specifies if the linked attachment is inherited or unique.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Attachment No." > 0;
                Enabled=AttachmentEnable;
                Editable=FALSE;
                OnAssistEdit=BEGIN
                               AssistEditAttachment;
                             END;
                              }

    { 4   ;1   ;Group     ;
                Name=RecurringOptions;
                CaptionML=ENU=Recurring;
                GroupType=Group }

    { 17  ;2   ;Field     ;
                Name=Recurring;
                CaptionML=ENU=Recurring Task;
                ToolTipML=ENU=Specifies that the Task occurs periodically.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr=Recurring;
                OnValidate=BEGIN
                             RecurringOnAfterValidate;
                           END;

                ImplicitType=Boolean }

    { 26  ;2   ;Field     ;
                Name=Recurring Date Interval;
                CaptionML=ENU=Recurring Date Interval;
                ToolTipML=ENU=Specifies the date formula to assign automatically a recurring Task to a Salesperson or Team.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Recurring Date Interval";
                Enabled=RecurringDateIntervalEnable;
                ImplicitType=DateFormula }

    { 34  ;2   ;Field     ;
                Name=Calc. Due Date From;
                CaptionML=ENU=Calculate from Date;
                ToolTipML=ENU=Specifies the date to use to calculate the date on which the next Task should be completed.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Calc. Due Date From";
                Enabled=CalcDueDateFromEnable;
                ImplicitType=Option }

  }
  CODE
  {
    VAR
      Text000@1025 : TextConst 'ENU=(Multiple)';
      Text001@1001 : TextConst 'ENU=untitled';
      Cont@1004 : Record Contact;
      SalesPurchPerson@1005 : Record "Salesperson/Purchaser";
      Campaign@1006 : Record Campaign;
      Team@1007 : Record Team;
      Opp@1008 : Record Opportunity;
      SegHeader@1009 : Record "Segment Header";
      AttendeeTemp@1012 : TEMPORARY Record Attendee;
      SalespersonFilter@1026 : Code[10];
      ContactFilter@1030 : Code[20];
      TeamTaskEditable@19073246 : Boolean INDATASET;
      WizardContactNameEditable@19024232 : Boolean INDATASET;
      WizardCampaignDescriptionEdita@19073396 : Boolean INDATASET;
      WizardOpportunityDescriptionEd@19027967 : Boolean INDATASET;
      SalespersonCodeEditable@19071610 : Boolean INDATASET;
      SegmentDescEditable@19045407 : Boolean INDATASET;
      IsMeeting@1000 : Boolean;
      IsOnMobile@1002 : Boolean;
      SalespersonCodeEnable@19074307 : Boolean INDATASET;
      StartTimeEnable@19064228 : Boolean INDATASET;
      EndingTimeEnable@19019613 : Boolean INDATASET;
      DurationEnable@19035217 : Boolean INDATASET;
      LocationEnable@19013618 : Boolean INDATASET;
      AllDayEventEnable@19049519 : Boolean INDATASET;
      WizardContactNameEnable@19059568 : Boolean INDATASET;
      RecurringDateIntervalEnable@19019953 : Boolean INDATASET;
      CalcDueDateFromEnable@19036769 : Boolean INDATASET;
      LanguageCodeEnable@19042658 : Boolean INDATASET;
      AttachmentEnable@19033701 : Boolean INDATASET;

    LOCAL PROCEDURE Caption@1() : Text[260];
    VAR
      CaptionStr@1000 : Text[260];
    BEGIN
      if Cont.GET(GETFILTER("Contact Company No.")) then
        CaptionStr := COPYSTR(Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      if Cont.GET(GETFILTER("Contact No.")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + Cont."No." + ' ' + Cont.Name,1,MAXSTRLEN(CaptionStr));
      if SalesPurchPerson.GET(GETFILTER("Salesperson Code")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + SalesPurchPerson.Code + ' ' + SalesPurchPerson.Name,1,MAXSTRLEN(CaptionStr));
      if Team.GET(GETFILTER("Team Code")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + Team.Code + ' ' + Team.Name,1,MAXSTRLEN(CaptionStr));
      if Campaign.GET(GETFILTER("Campaign No.")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + Campaign."No." + ' ' + Campaign.Description,1,MAXSTRLEN(CaptionStr));
      if Opp.GET(GETFILTER("Opportunity No.")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + Opp."No." + ' ' + Opp.Description,1,MAXSTRLEN(CaptionStr));
      if SegHeader.GET(GETFILTER("Segment No.")) then
        CaptionStr := COPYSTR(CaptionStr + ' ' + SegHeader."No." + ' ' + SegHeader.Description,1,MAXSTRLEN(CaptionStr));
      if CaptionStr = '' then
        CaptionStr := Text001;

      exit(CaptionStr);
    END;

    LOCAL PROCEDURE EnableFields@21();
    BEGIN
      RecurringDateIntervalEnable := Recurring;
      CalcDueDateFromEnable := Recurring;

      if not Recurring then begin
        EVALUATE("Recurring Date Interval",'');
        CLEAR("Calc. Due Date From");
      end;

      IsMeeting := Type = Type::Meeting;

      if IsMeeting then begin
        StartTimeEnable := not "All Day Event";
        EndingTimeEnable := not "All Day Event";
        DurationEnable := not "All Day Event";
        LocationEnable := true;
        AllDayEventEnable := true;
        LanguageCodeEnable := "Interaction Template Code" <> '';
        AttachmentEnable := "Interaction Template Code" <> '';
      end else begin
        StartTimeEnable := false;
        EndingTimeEnable := false;
        LocationEnable := false;
        DurationEnable := false;
        AllDayEventEnable := false;
      end;
    END;

    LOCAL PROCEDURE TypeOnAfterValidate@19069045();
    BEGIN
      EnableFields;
    END;

    LOCAL PROCEDURE AllDayEventOnAfterValidate@19020274();
    BEGIN
      EnableFields;
    END;

    LOCAL PROCEDURE RecurringOnAfterValidate@19068337();
    BEGIN
      EnableFields;
    END;

    LOCAL PROCEDURE InteractionTemplateCodeOnAfter@19000597();
    BEGIN
      EnableFields
    END;

    LOCAL PROCEDURE WizardContactNameOnFormat@19031225(Text@19070643 : Text[1024]);
    BEGIN
      if SegHeader.GET(GETFILTER("Segment No.")) then
        Text := Text000;
    END;

    LOCAL PROCEDURE FinishPage@2();
    BEGIN
      CurrPage.AttendeeSubform.PAGE.GetAttendee(AttendeeTemp);
      SetAttendee(AttendeeTemp);

      CheckStatus;
      FinishWizard(false);
    END;

    BEGIN
    END.
  }
}

