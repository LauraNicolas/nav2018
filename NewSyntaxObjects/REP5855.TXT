OBJECT Report 5855 Implement Standard Cost Change
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Implement Standard Cost Change;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  RevalItemJnlTemplate.GET(RevalItemJnlTemplate.Name);
                  RevalItemJnlTemplate.TESTFIELD(Type,RevalItemJnlTemplate.Type::Revaluation);
                  RevalItemJnlBatch.GET(RevalItemJnlTemplate.Name,RevalItemJnlBatch.Name);

                  if DocNo = '' then
                    ERROR(Text001);
                  if StdCostWkshName = '' then
                    ERROR(STRSUBSTNO(Text002));
                END;

  }
  DATASET
  {
    { 4691;    ;DataItem;Standard Cost Worksheet;
               DataItemTable="Standard Cost Worksheet";
               DataItemTableView=SORTING("Standard Cost Worksheet Name",Type,"No.");
               OnPreDataItem=BEGIN
                               SETRANGE("Standard Cost Worksheet Name",StdCostWkshName);
                               if ISEMPTY then
                                 ERROR(Text013,StdCostWkshName);

                               Window.OPEN(
                                 Text000 +
                                 Text007 +
                                 Text008);

                               ItemJnlLine.LOCKTABLE;
                               LOCKTABLE;

                               RevalJnlCreated := false;
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,Type);
                                  Window.UPDATE(2,"No.");

                                  case Type of
                                    Type::Item:
                                      begin
                                        UpdateItem("Standard Cost Worksheet");
                                        UpdateSKU("Standard Cost Worksheet");
                                        InsertRevalItemJnlLine;
                                      end;
                                    Type::"Work Center":
                                      UpdateWorkCenter("Standard Cost Worksheet");
                                    Type::"Machine Center":
                                      UpdateMachCenter("Standard Cost Worksheet");
                                    Type::Resource:
                                      UpdateRes("Standard Cost Worksheet");
                                  end;
                                  UpdateStdCostWksh("Standard Cost Worksheet")
                                END;

               OnPostDataItem=BEGIN
                                if not NoMessage then
                                  MESSAGE(GetMessage);
                              END;

               ReqFilterFields=Type,"No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if PostingDate = 0D then
                     PostingDate := WORKDATE;

                   ValidatePostingDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 12  ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date that the revaluation should take place.;
                  ApplicationArea=#Advanced;
                  NotBlank=true;
                  SourceExpr=PostingDate }

      { 10  ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the revaluation journal lines.;
                  ApplicationArea=#Advanced;
                  SourceExpr=DocNo }

      { 6   ;2   ;Field     ;
                  Name=ItemJournalTemplate;
                  CaptionML=ENU="Item Journal Template ";
                  ToolTipML=ENU=Specifies the name of the revaluation journal template.;
                  ApplicationArea=#Advanced;
                  NotBlank=true;
                  SourceExpr=RevalItemJnlTemplate.Name;
                  TableRelation="Item Journal Template" WHERE (Type=CONST(Revaluation)) }

      { 1   ;2   ;Field     ;
                  Name=ItemJournalBatchName;
                  CaptionML=ENU=Item Journal Batch Name;
                  ToolTipML=ENU=Specifies the name of the actual revaluation journal.;
                  ApplicationArea=#Advanced;
                  NotBlank=true;
                  SourceExpr=RevalItemJnlBatch.Name;
                  TableRelation="Item Journal Batch".Name;
                  OnValidate=BEGIN
                               RevalItemJnlBatchNameOnAfterVa;
                             END;

                  OnLookup=BEGIN
                             RevalItemJnlBatch.SETFILTER("Journal Template Name",RevalItemJnlTemplate.Name);
                             if PAGE.RUNMODAL(0,RevalItemJnlBatch) = ACTION::LookupOK then begin
                               Text := Text + RevalItemJnlBatch.Name;
                               exit(true);
                             end;
                             exit(false);
                           END;
                            }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      ItemJnlLine@1004 : Record "Item Journal Line";
      RevalItemJnlTemplate@1000 : Record "Item Journal Template";
      RevalItemJnlBatch@1001 : Record "Item Journal Batch";
      Window@1002 : Dialog;
      StdCostWkshName@1013 : Code[10];
      DocNo@1017 : Code[20];
      PostingDate@1018 : Date;
      Text000@1009 : TextConst 'ENU=Implementing standard cost changes...\\';
      Text001@1015 : TextConst 'ENU=You must specify a document no.';
      Text002@1021 : TextConst 'ENU=You must specify a worksheet to implement from.';
      Text007@1007 : TextConst 'ENU=Type                       #1##########\';
      Text008@1006 : TextConst 'ENU=No.                        #2##########';
      Text009@1024 : TextConst 'ENU=\Revaluation journal lines have also been created.';
      RevalJnlCreated@1014 : Boolean;
      ItemCostsUpdated@1010 : Boolean;
      MachCtrCostsUpdated@1011 : Boolean;
      WorkCtrCostsUpdated@1012 : Boolean;
      ResCostsUpdated@1022 : Boolean;
      SKUCostsUpdated@1016 : Boolean;
      NoMessage@1003 : Boolean;
      HideDuplWarning@1023 : Boolean;
      Text010@1005 : TextConst 'ENU="Costs have been updated on the following: "';
      Text011@1020 : TextConst 'ENU=", "';
      Text012@1019 : TextConst 'ENU=.';
      Text013@1008 : TextConst 'ENU=Standard Cost Worksheet %1 is empty.';

    LOCAL PROCEDURE UpdateItem@5(StdCostWksh@1000 : Record "Standard Cost Worksheet");
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do begin
        GET(StdCostWksh."No.");
        VALIDATE("Indirect Cost %",StdCostWksh."New Indirect Cost %");
        VALIDATE("Overhead Rate",StdCostWksh."New Overhead Rate");
        VALIDATE("Standard Cost",StdCostWksh."New Standard Cost");
        "Single-Level Material Cost" := StdCostWksh."New Single-Lvl Material Cost";
        "Single-Level Capacity Cost" := StdCostWksh."New Single-Lvl Cap. Cost";
        "Single-Level Subcontrd. Cost" := StdCostWksh."New Single-Lvl Subcontrd Cost";
        "Single-Level Cap. Ovhd Cost" := StdCostWksh."New Single-Lvl Cap. Ovhd Cost";
        "Single-Level Mfg. Ovhd Cost" := StdCostWksh."New Single-Lvl Mfg. Ovhd Cost";

        "Rolled-up Material Cost" := StdCostWksh."New Rolled-up Material Cost";
        "Rolled-up Capacity Cost" := StdCostWksh."New Rolled-up Cap. Cost";
        "Rolled-up Subcontracted Cost" := StdCostWksh."New Rolled-up Subcontrd Cost";
        "Rolled-up Mfg. Ovhd Cost" := StdCostWksh."New Rolled-up Mfg. Ovhd Cost";
        "Rolled-up Cap. Overhead Cost" := StdCostWksh."New Rolled-up Cap. Ovhd Cost";

        "Last Unit Cost Calc. Date" := PostingDate;
        MODIFY(true);

        ItemCostsUpdated := true;
      end;
    END;

    LOCAL PROCEDURE UpdateSKU@6(StdCostWksh@1000 : Record "Standard Cost Worksheet");
    VAR
      SKU@1001 : Record "Stockkeeping Unit";
    BEGIN
      with SKU do begin
        SETRANGE("Item No.",StdCostWksh."No.");
        if FIND('-') then begin
          SKUCostsUpdated := true;
          repeat
            VALIDATE("Standard Cost",StdCostWksh."New Standard Cost");
            MODIFY(true);
          until NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdateMachCenter@8(StdCostWksh@1000 : Record "Standard Cost Worksheet");
    VAR
      MachCtr@1002 : Record "Machine Center";
    BEGIN
      with MachCtr do begin
        GET(StdCostWksh."No.");
        VALIDATE("Overhead Rate",StdCostWksh."New Overhead Rate");
        VALIDATE("Indirect Cost %",StdCostWksh."New Indirect Cost %");
        VALIDATE("Unit Cost",StdCostWksh."New Standard Cost");
        MODIFY(true);
        MachCtrCostsUpdated := true;
      end;
    END;

    LOCAL PROCEDURE UpdateWorkCenter@9(StdCostWksh@1000 : Record "Standard Cost Worksheet");
    VAR
      WorkCtr@1001 : Record "Work Center";
    BEGIN
      with WorkCtr do begin
        GET(StdCostWksh."No.");
        VALIDATE("Overhead Rate",StdCostWksh."New Overhead Rate");
        VALIDATE("Indirect Cost %",StdCostWksh."New Indirect Cost %");
        VALIDATE("Unit Cost",StdCostWksh."New Standard Cost");
        MODIFY(true);
        WorkCtrCostsUpdated := true;
      end;
    END;

    LOCAL PROCEDURE UpdateRes@10(StdCostWksh@1000 : Record "Standard Cost Worksheet");
    VAR
      ResCost@1002 : Record "Resource Cost";
      Res@1001 : Record Resource;
    BEGIN
      with Res do begin
        GET(StdCostWksh."No.");
        VALIDATE("Indirect Cost %",StdCostWksh."New Indirect Cost %");
        VALIDATE("Unit Cost",StdCostWksh."New Standard Cost");
        MODIFY(true);
        ResCostsUpdated := true;
      end;

      with ResCost do begin
        Type := Type::Resource;
        Code := StdCostWksh."No.";
        VALIDATE("Direct Unit Cost",Res."Direct Unit Cost");
        VALIDATE("Unit Cost",StdCostWksh."New Standard Cost");
        if not MODIFY(true) then;
      end;
    END;

    LOCAL PROCEDURE UpdateStdCostWksh@2(VAR StdCostWksh@1001 : Record "Standard Cost Worksheet");
    BEGIN
      with StdCostWksh do begin
        Implemented := true;
        MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE InsertRevalItemJnlLine@7();
    VAR
      GLSetup@1004 : Record "General Ledger Setup";
      Item@1001 : Record Item;
      ItemJnlLine2@1000 : Record "Item Journal Line";
      CalcInvtValue@1002 : Report "Calculate Inventory Value";
      CalculatePer@1003 : '"Item Ledger Entry",Item';
    BEGIN
      ItemJnlLine2.SETRANGE("Journal Template Name",RevalItemJnlTemplate.Name);
      ItemJnlLine2.SETRANGE("Journal Batch Name",RevalItemJnlBatch.Name);
      if ItemJnlLine2.FIND('+') then;

      ItemJnlLine."Journal Template Name" := RevalItemJnlTemplate.Name;
      ItemJnlLine."Journal Batch Name" := RevalItemJnlBatch.Name;
      CalcInvtValue.SetItemJnlLine(ItemJnlLine);
      CLEAR(Item);
      Item.SETRANGE("No.","Standard Cost Worksheet"."No.");
      CalcInvtValue.SETTABLEVIEW(Item);
      CalcInvtValue.InitializeRequest(PostingDate,DocNo,HideDuplWarning,CalculatePer::Item,false,false,false,0,false);
      CalcInvtValue.USEREQUESTPAGE(false);
      CalcInvtValue.RUN;
      HideDuplWarning := true;

      GLSetup.GET;
      if ItemJnlLine2.NEXT <> 0 then
        repeat
          ItemJnlLine2.VALIDATE(
            "Unit Cost (Revalued)",ROUND("Standard Cost Worksheet"."New Standard Cost",GLSetup."Unit-Amount Rounding Precision"));
          ItemJnlLine2.MODIFY(true);
          RevalJnlCreated := true;
        until ItemJnlLine2.NEXT = 0;
    END;

    PROCEDURE SetStdCostWksh@1(NewStdCostWkshName@1000 : Code[10]);
    BEGIN
      StdCostWkshName := NewStdCostWkshName;
    END;

    LOCAL PROCEDURE GetMessage@14() TheMsg : Text[250];
    VAR
      Item@1000 : Record Item;
      MachCtr@1001 : Record "Machine Center";
      WorkCtr@1002 : Record "Work Center";
      Res@1004 : Record Resource;
      SKU@1003 : Record "Stockkeeping Unit";
    BEGIN
      TheMsg := '';
      if ItemCostsUpdated then
        TheMsg := Item.TABLECAPTION;
      if SKUCostsUpdated then begin
        TheMsg := TheMsg + Text011;
        TheMsg := TheMsg + SKU.TABLECAPTION;
      end;
      if MachCtrCostsUpdated then begin
        if TheMsg <> '' then
          TheMsg := TheMsg + Text011;
        TheMsg := TheMsg + MachCtr.TABLECAPTION;
      end;
      if WorkCtrCostsUpdated then begin
        if TheMsg <> '' then
          TheMsg := TheMsg + Text011;
        TheMsg := TheMsg + WorkCtr.TABLECAPTION;
      end;
      if ResCostsUpdated then begin
        if TheMsg <> '' then
          TheMsg := TheMsg + Text011;
        TheMsg := TheMsg + Res.TABLECAPTION;
      end;
      if TheMsg <> '' then
        TheMsg := Text010 + TheMsg + Text012;
      if RevalJnlCreated then
        TheMsg := TheMsg + Text009;
      exit(TheMsg);
    END;

    LOCAL PROCEDURE ValidatePostingDate@4();
    VAR
      NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
    BEGIN
      with RevalItemJnlBatch do
        if GET(RevalItemJnlTemplate.Name,Name) then
          if "No. Series" = '' then
            DocNo := ''
          else begin
            DocNo := NoSeriesMgt.GetNextNo("No. Series",PostingDate,false);
            CLEAR(NoSeriesMgt);
          end;
    END;

    PROCEDURE Initialize@3();
    VAR
      DocNo2@1001 : Code[20];
      PostingDate2@1000 : Date;
      RevalItemJnlTemplate2@1003 : Code[10];
      RevalItemJnlBatch2@1002 : Code[10];
      NoMessage2@1004 : Boolean;
    BEGIN
      PostingDate := PostingDate2;
      DocNo := DocNo2;
      RevalItemJnlTemplate.GET(RevalItemJnlTemplate2);
      RevalItemJnlBatch.GET(RevalItemJnlTemplate2,RevalItemJnlBatch2);
      NoMessage := NoMessage2;
    END;

    LOCAL PROCEDURE RevalItemJnlBatchNameOnAfterVa@19049600();
    BEGIN
      ValidatePostingDate;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

