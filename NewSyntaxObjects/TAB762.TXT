OBJECT Table 762 Account Schedules Chart Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               DeleteLines;
             END;

    CaptionML=ENU=Account Schedules Chart Setup;
    LookupPageID="Account Schedule Chart List";
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Text132       ;CaptionML=ENU=User ID;
                                                   Editable=false }
    { 2   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 3   ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 10  ;   ;Account Schedule Name;Code10       ;TableRelation="Acc. Schedule Name".Name;
                                                   OnValidate=VAR
                                                                AccScheduleName@1001 : Record "Acc. Schedule Name";
                                                                AccSchedChartManagement@1000 : Codeunit "Acc. Sched. Chart Management";
                                                              BEGIN
                                                                AccSchedChartManagement.CheckDuplicateAccScheduleLineDescription("Account Schedule Name");
                                                                if AccScheduleName.GET("Account Schedule Name") then
                                                                  if AccScheduleName."Default Column Layout" <> '' then
                                                                    VALIDATE("Column Layout Name",AccScheduleName."Default Column Layout");
                                                                RefreshLines(false);
                                                              END;

                                                   CaptionML=ENU=Account Schedule Name }
    { 20  ;   ;Column Layout Name  ;Code10        ;TableRelation="Column Layout Name".Name;
                                                   OnValidate=VAR
                                                                AccSchedChartManagement@1000 : Codeunit "Acc. Sched. Chart Management";
                                                              BEGIN
                                                                AccSchedChartManagement.CheckDuplicateColumnLayoutColumnHeader("Column Layout Name");
                                                                RefreshLines(false);
                                                              END;

                                                   CaptionML=ENU=Column Layout Name }
    { 30  ;   ;Base X-Axis on      ;Option        ;OnValidate=BEGIN
                                                                RefreshLines(false);
                                                                if "End Date" = 0D then
                                                                  "End Date" := "Start Date";
                                                              END;

                                                   CaptionML=ENU=Base X-Axis on;
                                                   OptionCaptionML=ENU=Period,Acc. Sched. Line,Acc. Sched. Column;
                                                   OptionString=Period,"Acc. Sched. Line","Acc. Sched. Column" }
    { 31  ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("Start Date");
                                                              END;

                                                   CaptionML=ENU=Start Date }
    { 32  ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("End Date");
                                                              END;

                                                   CaptionML=ENU=End Date }
    { 41  ;   ;Period Length       ;Option        ;CaptionML=ENU=Period Length;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year;
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 42  ;   ;No. of Periods      ;Integer       ;InitValue=12;
                                                   OnValidate=BEGIN
                                                                if "No. of Periods" < 1 then
                                                                  ERROR(Text002,FIELDCAPTION("No. of Periods"),"No. of Periods");
                                                              END;

                                                   CaptionML=ENU=No. of Periods }
    { 50  ;   ;Last Viewed         ;Boolean       ;OnValidate=VAR
                                                                AccountSchedulesChartSetup@1000 : Record "Account Schedules Chart Setup";
                                                              BEGIN
                                                                if (not "Last Viewed") or ("Last Viewed" = xRec."Last Viewed") then
                                                                  exit;

                                                                AccountSchedulesChartSetup.SETRANGE("User ID","User ID");
                                                                AccountSchedulesChartSetup.SETFILTER(Name,'<>%1',Name);
                                                                AccountSchedulesChartSetup.SETRANGE("Last Viewed",true);
                                                                AccountSchedulesChartSetup.MODIFYALL("Last Viewed",false);
                                                              END;

                                                   CaptionML=ENU=Last Viewed;
                                                   Editable=false }
    { 51  ;   ;Look Ahead          ;Boolean       ;CaptionML=ENU=Look Ahead }
  }
  KEYS
  {
    {    ;"User ID",Name                          ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst '@@@="%1=Account Schdule Line_Description %2=Column Layout_Coulmn Header";ENU=%1 %2';
      Text002@1000 : TextConst 'ENU=You cannot set %1 to %2.';

    [External]
    PROCEDURE SetAccScheduleName@10(AccSchedName@1000 : Code[10]);
    BEGIN
      VALIDATE("Account Schedule Name",AccSchedName);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetColumnLayoutName@11(ColumnLayoutName@1000 : Code[10]);
    BEGIN
      VALIDATE("Column Layout Name",ColumnLayoutName);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetShowPer@12(ShowPer@1000 : Option);
    BEGIN
      VALIDATE("Base X-Axis on",ShowPer);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetPeriodLength@7(PeriodLength@1000 : Option);
    BEGIN
      "Period Length" := PeriodLength;
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetLastViewed@17();
    BEGIN
      VALIDATE("Last Viewed",true);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetLinkToLines@5(VAR AccSchedChartSetupLine@1000 : Record "Acc. Sched. Chart Setup Line");
    BEGIN
      AccSchedChartSetupLine.SETRANGE("User ID","User ID");
      AccSchedChartSetupLine.SETRANGE(Name,Name);
    END;

    [External]
    PROCEDURE SetLinkToMeasureLines@3(VAR AccSchedChartSetupLine@1000 : Record "Acc. Sched. Chart Setup Line");
    BEGIN
      SetLinkToLines(AccSchedChartSetupLine);
      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          ;
        "Base X-Axis on"::"Acc. Sched. Line":
          AccSchedChartSetupLine.SETRANGE("Account Schedule Line No.",0);
        "Base X-Axis on"::"Acc. Sched. Column":
          AccSchedChartSetupLine.SETRANGE("Column Layout Line No.",0);
      end;
    END;

    [External]
    PROCEDURE SetLinkToDimensionLines@14(VAR AccSchedChartSetupLine@1000 : Record "Acc. Sched. Chart Setup Line");
    BEGIN
      SetLinkToLines(AccSchedChartSetupLine);
      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          begin
            AccSchedChartSetupLine.SETRANGE("Account Schedule Line No.",0);
            AccSchedChartSetupLine.SETRANGE("Column Layout Line No.",0);
          end;
        "Base X-Axis on"::"Acc. Sched. Line":
          AccSchedChartSetupLine.SETRANGE("Column Layout Line No.",0);
        "Base X-Axis on"::"Acc. Sched. Column":
          AccSchedChartSetupLine.SETRANGE("Account Schedule Line No.",0);
      end;
    END;

    [External]
    PROCEDURE RefreshLines@1(Force@1002 : Boolean);
    VAR
      AccSchedChartSetupLine@1000 : Record "Acc. Sched. Chart Setup Line";
      TempAccSchedChartSetupLine@1001 : TEMPORARY Record "Acc. Sched. Chart Setup Line";
    BEGIN
      if not Force then
        if ("Account Schedule Name" = xRec."Account Schedule Name") and
           ("Column Layout Name" = xRec."Column Layout Name") and
           ("Base X-Axis on" = xRec."Base X-Axis on")
        then
          exit;

      GetMeasuresInTemp(TempAccSchedChartSetupLine);

      SetLinkToLines(AccSchedChartSetupLine);
      AccSchedChartSetupLine.DELETEALL;

      AccSchedChartSetupLine.RESET;
      if TempAccSchedChartSetupLine.FINDSET then
        repeat
          AccSchedChartSetupLine := TempAccSchedChartSetupLine;
          AccSchedChartSetupLine.INSERT;
        until TempAccSchedChartSetupLine.NEXT = 0;
    END;

    [External]
    PROCEDURE FilterAccSchedLines@6(VAR AccScheduleLine@1000 : Record "Acc. Schedule Line");
    BEGIN
      AccScheduleLine.SETRANGE("Schedule Name","Account Schedule Name");
      AccScheduleLine.SETFILTER(Description,'<>%1','');
    END;

    [External]
    PROCEDURE FilterColumnLayout@8(VAR ColumnLayout@1000 : Record "Column Layout");
    BEGIN
      ColumnLayout.SETRANGE("Column Layout Name","Column Layout Name");
      ColumnLayout.SETFILTER("Column Header",'<>%1','');
    END;

    LOCAL PROCEDURE GetMeasuresInTemp@4(VAR TempAccSchedChartSetupLine@1002 : TEMPORARY Record "Acc. Sched. Chart Setup Line");
    VAR
      AccScheduleLine@1000 : Record "Acc. Schedule Line";
      ColumnLayout@1001 : Record "Column Layout";
    BEGIN
      FilterAccSchedLines(AccScheduleLine);
      FilterColumnLayout(ColumnLayout);

      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          begin
            if ColumnLayout.FINDSET then
              repeat
                if AccScheduleLine.FINDSET then
                  repeat
                    InsertLineIntoTemp(TempAccSchedChartSetupLine,AccScheduleLine,ColumnLayout);
                  until AccScheduleLine.NEXT = 0;
              until ColumnLayout.NEXT = 0;
          end;
        "Base X-Axis on"::"Acc. Sched. Line",
        "Base X-Axis on"::"Acc. Sched. Column":
          begin
            if AccScheduleLine.FINDSET then
              repeat
                InsertLineIntoTemp(TempAccSchedChartSetupLine,AccScheduleLine,ColumnLayout);
              until AccScheduleLine.NEXT = 0;
            CLEAR(AccScheduleLine);
            if ColumnLayout.FINDSET then
              repeat
                InsertLineIntoTemp(TempAccSchedChartSetupLine,AccScheduleLine,ColumnLayout);
              until ColumnLayout.NEXT = 0;
          end;
      end;

      SetChartTypesToDefault(TempAccSchedChartSetupLine);
    END;

    LOCAL PROCEDURE InsertLineIntoTemp@9(VAR TempAccSchedChartSetupLine@1000 : TEMPORARY Record "Acc. Sched. Chart Setup Line";AccScheduleLine@1002 : Record "Acc. Schedule Line";ColumnLayout@1001 : Record "Column Layout");
    VAR
      AccSchedChartSetupLine@1003 : Record "Acc. Sched. Chart Setup Line";
    BEGIN
      TempAccSchedChartSetupLine.INIT;
      TempAccSchedChartSetupLine."User ID" := "User ID";
      TempAccSchedChartSetupLine.Name := Name;
      TempAccSchedChartSetupLine."Account Schedule Name" := "Account Schedule Name";
      TempAccSchedChartSetupLine."Account Schedule Line No." := AccScheduleLine."Line No.";
      TempAccSchedChartSetupLine."Column Layout Name" := "Column Layout Name";
      TempAccSchedChartSetupLine."Column Layout Line No." := ColumnLayout."Line No.";

      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          begin
            TempAccSchedChartSetupLine."Original Measure Name" :=
              STRSUBSTNO(Text001,AccScheduleLine.Description,ColumnLayout."Column Header");
            TempAccSchedChartSetupLine."Measure Value" := STRSUBSTNO(Text001,AccScheduleLine."Line No.",ColumnLayout."Line No.");
          end;
        "Base X-Axis on"::"Acc. Sched. Line",
        "Base X-Axis on"::"Acc. Sched. Column":
          case true of
            AccScheduleLine."Line No." = 0:
              begin
                TempAccSchedChartSetupLine."Original Measure Name" := ColumnLayout."Column Header";
                TempAccSchedChartSetupLine."Measure Value" := FORMAT(ColumnLayout."Line No.");
              end;
            ColumnLayout."Line No." = 0:
              begin
                TempAccSchedChartSetupLine."Original Measure Name" := AccScheduleLine.Description;
                TempAccSchedChartSetupLine."Measure Value" := FORMAT(AccScheduleLine."Line No.");
              end;
          end;
      end;
      TempAccSchedChartSetupLine."Measure Name" := TempAccSchedChartSetupLine."Original Measure Name";

      if AccSchedChartSetupLine.GET(TempAccSchedChartSetupLine."User ID",
           TempAccSchedChartSetupLine.Name,
           TempAccSchedChartSetupLine."Account Schedule Line No.",
           TempAccSchedChartSetupLine."Column Layout Line No.")
      then
        TempAccSchedChartSetupLine."Chart Type" := AccSchedChartSetupLine."Chart Type";

      TempAccSchedChartSetupLine.INSERT;
    END;

    LOCAL PROCEDURE SetChartTypesToDefault@13(VAR TempAccSchedChartSetupLine@1000 : TEMPORARY Record "Acc. Sched. Chart Setup Line");
    VAR
      TempAccSchedChartSetupLine2@1004 : TEMPORARY Record "Acc. Sched. Chart Setup Line";
    BEGIN
      TempAccSchedChartSetupLine2.COPY(TempAccSchedChartSetupLine,true);

      SetMeasureChartTypesToDefault(TempAccSchedChartSetupLine2);

      TempAccSchedChartSetupLine2.RESET;
      SetLinkToDimensionLines(TempAccSchedChartSetupLine2);
      TempAccSchedChartSetupLine2.SETFILTER("Chart Type",'<>%1',TempAccSchedChartSetupLine2."Chart Type"::" ");
      if TempAccSchedChartSetupLine2.ISEMPTY then
        SetDimensionChartTypesToDefault(TempAccSchedChartSetupLine2);
    END;

    [External]
    PROCEDURE SetMeasureChartTypesToDefault@15(VAR AccSchedChartSetupLine@1000 : Record "Acc. Sched. Chart Setup Line");
    VAR
      BusinessChartBuffer@1003 : Record "Business Chart Buffer";
      MaxNumMeasures@1002 : Integer;
      NumOfMeasuresToBeSet@1001 : Integer;
    BEGIN
      AccSchedChartSetupLine.RESET;
      SetLinkToMeasureLines(AccSchedChartSetupLine);
      AccSchedChartSetupLine.SETFILTER("Chart Type",'<>%1',AccSchedChartSetupLine."Chart Type"::" ");
      MaxNumMeasures := BusinessChartBuffer.GetMaxNumberOfMeasures;
      NumOfMeasuresToBeSet := MaxNumMeasures - AccSchedChartSetupLine.COUNT;
      if NumOfMeasuresToBeSet > 0 then begin
        AccSchedChartSetupLine.SETRANGE("Chart Type",AccSchedChartSetupLine."Chart Type"::" ");
        if AccSchedChartSetupLine.FINDSET then
          repeat
            AccSchedChartSetupLine."Chart Type" := AccSchedChartSetupLine.GetDefaultChartType;
            AccSchedChartSetupLine.MODIFY;
            NumOfMeasuresToBeSet -= 1;
          until (NumOfMeasuresToBeSet = 0) or (AccSchedChartSetupLine.NEXT = 0);
      end;
    END;

    [External]
    PROCEDURE SetDimensionChartTypesToDefault@16(VAR AccSchedChartSetupLine@1000 : Record "Acc. Sched. Chart Setup Line");
    BEGIN
      AccSchedChartSetupLine.RESET;
      SetLinkToDimensionLines(AccSchedChartSetupLine);
      AccSchedChartSetupLine.SETRANGE("Chart Type",AccSchedChartSetupLine."Chart Type"::" ");
      AccSchedChartSetupLine.MODIFYALL("Chart Type",AccSchedChartSetupLine.GetDefaultChartType);
    END;

    LOCAL PROCEDURE DeleteLines@2();
    VAR
      AccSchedChartSetupLine@1000 : Record "Acc. Sched. Chart Setup Line";
    BEGIN
      AccSchedChartSetupLine.SETRANGE("User ID","User ID");
      AccSchedChartSetupLine.SETRANGE(Name,Name);
      AccSchedChartSetupLine.DELETEALL;
    END;

    BEGIN
    END.
  }
}

