OBJECT Codeunit 19 Gen. Jnl.-Post Preview
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NothingToPostMsg@1019 : TextConst 'ENU=There is nothing to post.';
      PreviewModeErr@1002 : TextConst 'ENU=Preview mode.';
      PostingPreviewEventHandler@1000 : Codeunit "Posting Preview Event Handler";
      SubscriberTypeErr@1001 : TextConst 'ENU=Invalid Subscriber type. The type must be CODEUNIT.';
      RecVarTypeErr@1003 : TextConst 'ENU=Invalid RecVar type. The type must be RECORD.';
      PreviewExitStateErr@1004 : TextConst 'ENU=The posting preview has stopped because of a state that is not valid.';

    [External]
    PROCEDURE Preview@6(Subscriber@1002 : Variant;RecVar@1000 : Variant);
    VAR
      RunResult@1003 : Boolean;
    BEGIN
      if not Subscriber.ISCODEUNIT then
        ERROR(SubscriberTypeErr);
      if not RecVar.ISRECORD then
        ERROR(RecVarTypeErr);

      BINDSUBSCRIPTION(PostingPreviewEventHandler);
      OnAfterBindSubscription;

      RunResult := RunPreview(Subscriber,RecVar);

      UNBINDSUBSCRIPTION(PostingPreviewEventHandler);
      OnAfterUnbindSubscription;

      // The OnRunPreview event expects subscriber following template: Result := <Codeunit>.RUN
      // So we assume RunPreview returns FALSE with the error.
      // To prevent return FALSE without thrown error we check error call stack.
      if RunResult or (GETLASTERRORCALLSTACK = '') then
        ERROR(PreviewExitStateErr);

      if GETLASTERRORTEXT <> PreviewModeErr then
        ERROR(GETLASTERRORTEXT);
      ShowAllEntries;
      ERROR('');
    END;

    [External]
    PROCEDURE IsActive@8() : Boolean;
    VAR
      EventSubscription@1000 : Record "Event Subscription";
      Result@1001 : Boolean;
    BEGIN
      EventSubscription.SETRANGE("Subscriber Codeunit ID",CODEUNIT::"Posting Preview Event Handler");
      EventSubscription.SETFILTER("Active Manual Instances",'<>%1',0);
      Result := not EventSubscription.ISEMPTY;

      CLEAR(EventSubscription);
      EventSubscription.SETRANGE("Publisher Object ID",CODEUNIT::"Gen. Jnl.-Post Preview");
      EventSubscription.SETFILTER("Active Manual Instances",'<>%1',0);
      exit(Result and (not EventSubscription.ISEMPTY));
    END;

    LOCAL PROCEDURE RunPreview@5(Subscriber@1000 : Variant;RecVar@1002 : Variant) : Boolean;
    VAR
      Result@1001 : Boolean;
    BEGIN
      OnRunPreview(Result,Subscriber,RecVar);
      exit(Result);
    END;

    LOCAL PROCEDURE ShowAllEntries@20();
    VAR
      TempDocumentEntry@1000 : TEMPORARY Record "Document Entry";
      GLPostingPreview@1001 : Page "G/L Posting Preview";
    BEGIN
      PostingPreviewEventHandler.FillDocumentEntry(TempDocumentEntry);
      if not TempDocumentEntry.ISEMPTY then begin
        GLPostingPreview.Set(TempDocumentEntry,PostingPreviewEventHandler);
        GLPostingPreview.RUN
      end else
        MESSAGE(NothingToPostMsg);
    END;

    [Internal]
    PROCEDURE ShowDimensions@4(TableID@1000 : Integer;EntryNo@1001 : Integer;DimensionSetID@1002 : Integer);
    VAR
      DimMgt@1003 : Codeunit DimensionManagement;
      RecRef@1004 : RecordRef;
    BEGIN
      RecRef.OPEN(TableID);
      DimMgt.ShowDimensionSet(DimensionSetID,STRSUBSTNO('%1 %2',RecRef.CAPTION,EntryNo));
    END;

    [External]
    PROCEDURE ThrowError@7();
    BEGIN
      ERROR(PreviewModeErr);
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnRunPreview@3(VAR Result@1000 : Boolean;Subscriber@1001 : Variant;RecVar@1002 : Variant);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterBindSubscription@1();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUnbindSubscription@2();
    BEGIN
    END;

    BEGIN
    END.
  }
}

