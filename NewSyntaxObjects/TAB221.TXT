OBJECT Table 221 Gen. Jnl. Allocation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               LOCKTABLE;
               GenJnlLine.GET("Journal Template Name","Journal Batch Name","Journal Line No.");

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
             END;

    OnDelete=BEGIN
               VALIDATE(Amount,0);
             END;

    CaptionML=ENU=Gen. Jnl. Allocation;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 2   ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE ("Journal Template Name"=FIELD("Journal Template Name"));
                                                   CaptionML=ENU=Journal Batch Name }
    { 3   ;   ;Journal Line No.    ;Integer       ;TableRelation="Gen. Journal Line"."Line No." WHERE ("Journal Template Name"=FIELD("Journal Template Name"),
                                                                                                       "Journal Batch Name"=FIELD("Journal Batch Name"));
                                                   CaptionML=ENU=Journal Line No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Account No.         ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                if "Account No." = '' then begin
                                                                  GLAcc.INIT;
                                                                  CreateDim(DATABASE::"G/L Account","Account No.");
                                                                end else begin
                                                                  GLAcc.GET("Account No.");
                                                                  GLAcc.CheckGLAcc;
                                                                  GLAcc.TESTFIELD("Direct Posting",true);
                                                                end;
                                                                "Account Name" := GLAcc.Name;
                                                                "Gen. Posting Type" := GLAcc."Gen. Posting Type";
                                                                "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
                                                                "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
                                                                "VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
                                                                "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
                                                                VALIDATE("VAT Prod. Posting Group");

                                                                CreateDim(DATABASE::"G/L Account","Account No.");
                                                              END;

                                                   CaptionML=ENU=Account No. }
    { 6   ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 7   ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 8   ;   ;Allocation Quantity ;Decimal       ;OnValidate=BEGIN
                                                                if "Allocation Quantity" = 0 then begin
                                                                  "Allocation %" := 0;
                                                                  Amount := 0;
                                                                end;
                                                                UpdateAllocations(GenJnlLine);
                                                              END;

                                                   CaptionML=ENU=Allocation Quantity;
                                                   DecimalPlaces=0:5 }
    { 9   ;   ;Allocation %        ;Decimal       ;OnValidate=BEGIN
                                                                "Allocation Quantity" := 0;
                                                                if "Allocation %" = 0 then
                                                                  Amount := 0;
                                                                UpdateAllocations(GenJnlLine);
                                                              END;

                                                   CaptionML=ENU=Allocation %;
                                                   DecimalPlaces=2:2 }
    { 10  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                if ("Allocation Quantity" <> 0) or ("Allocation %" <> 0) then begin
                                                                  "Allocation Quantity" := 0;
                                                                  "Allocation %" := 0;
                                                                  UpdateAllocations(GenJnlLine);
                                                                end else begin
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                                  MODIFY;
                                                                  UpdateJnlBalance(GenJnlLine);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 11  ;   ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale";
                                                   OptionString=" ",Purchase,Sale }
    { 12  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 13  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" then
                                                                  if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") then
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 14  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax";
                                                   Editable=false }
    { 15  ;   ;VAT Amount          ;Decimal       ;CaptionML=ENU=VAT Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 16  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=false }
    { 17  ;   ;Account Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Account".Name WHERE ("No."=FIELD("Account No.")));
                                                   CaptionML=ENU=Account Name;
                                                   Editable=false }
    { 18  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 19  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 20  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 21  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Use Tax }
    { 22  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 23  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                GenJnlLine.GET("Journal Template Name","Journal Batch Name","Journal Line No.");
                                                                CheckVAT(GenJnlLine);
                                                                UpdateVAT(GenJnlLine);
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 24  ;   ;Additional-Currency Amount;Decimal ;CaptionML=ENU=Additional-Currency Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Journal Template Name","Journal Batch Name","Journal Line No.","Line No.";
                                                   SumIndexFields=Amount;
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 cannot be used in allocations when they are completed on the general journal line.';
      GLAcc@1001 : Record "G/L Account";
      GenJnlLine@1002 : Record "Gen. Journal Line";
      GenBusPostingGrp@1003 : Record "Gen. Business Posting Group";
      GenProdPostingGrp@1004 : Record "Gen. Product Posting Group";
      DimMgt@1005 : Codeunit DimensionManagement;

    [External]
    PROCEDURE UpdateAllocations@2(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJnlAlloc@1001 : Record "Gen. Jnl. Allocation";
      GenJnlAlloc2@1002 : Record "Gen. Jnl. Allocation";
      FromAllocations@1003 : Boolean;
      TotalQty@1004 : Decimal;
      TotalPct@1005 : Decimal;
      TotalPctRnded@1006 : Decimal;
      TotalAmountLCY@1007 : Decimal;
      TotalAmountLCY2@1008 : Decimal;
      TotalAmountLCYRnded@1009 : Decimal;
      TotalAmountLCYRnded2@1010 : Decimal;
      UpdateGenJnlLine@1011 : Boolean;
    BEGIN
      if "Line No." <> 0 then begin
        FromAllocations := true;
        GenJnlAlloc.UpdateVAT(GenJnlLine);
        MODIFY;
        GenJnlLine.GET("Journal Template Name","Journal Batch Name","Journal Line No.");
        CheckVAT(GenJnlLine);
      end;

      GenJnlAlloc.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlAlloc.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlAlloc.SETRANGE("Journal Line No.",GenJnlLine."Line No.");
      if FromAllocations then
        UpdateGenJnlLine := true
      else
        if not GenJnlAlloc.ISEMPTY then begin
          GenJnlAlloc.LOCKTABLE;
          UpdateGenJnlLine := true;
        end;
      if GenJnlAlloc.FINDSET then
        repeat
          if (GenJnlAlloc."Allocation Quantity" <> 0) or (GenJnlAlloc."Allocation %" <> 0) then begin
            if not FromAllocations then
              GenJnlAlloc.CheckVAT(GenJnlLine);
            if GenJnlAlloc."Allocation Quantity" = 0 then begin
              TotalAmountLCY2 := TotalAmountLCY2 - GenJnlLine."Amount (LCY)" * GenJnlAlloc."Allocation %" / 100;
              GenJnlAlloc.Amount := ROUND(TotalAmountLCY2) - TotalAmountLCYRnded2;
              TotalAmountLCYRnded2 := TotalAmountLCYRnded2 + GenJnlAlloc.Amount;
            end else begin
              if TotalQty = 0 then begin
                GenJnlAlloc2.COPY(GenJnlAlloc);
                GenJnlAlloc2.SETFILTER("Allocation Quantity",'<>0');
                repeat
                  TotalQty := TotalQty + GenJnlAlloc2."Allocation Quantity";
                until GenJnlAlloc2.NEXT = 0;
                if TotalQty = 0 then
                  TotalQty := 1;
              end;
              TotalPct := TotalPct + GenJnlAlloc."Allocation Quantity" / TotalQty * 100;
              GenJnlAlloc."Allocation %" := ROUND(TotalPct,0.01) - TotalPctRnded;
              TotalPctRnded := TotalPctRnded + GenJnlAlloc."Allocation %";
              TotalAmountLCY := TotalAmountLCY - GenJnlLine."Amount (LCY)" * GenJnlAlloc."Allocation Quantity" / TotalQty;
              GenJnlAlloc.Amount := ROUND(TotalAmountLCY) - TotalAmountLCYRnded;
              TotalAmountLCYRnded := TotalAmountLCYRnded + GenJnlAlloc.Amount;
            end;
            GenJnlAlloc.UpdateVAT(GenJnlLine);
            GenJnlAlloc.MODIFY;
          end;
        until GenJnlAlloc.NEXT = 0;

      if UpdateGenJnlLine then
        UpdateJnlBalance(GenJnlLine);

      if FromAllocations then
        FIND;
    END;

    [External]
    PROCEDURE UpdateAllocationsAddCurr@6(VAR GenJnlLine@1000 : Record "Gen. Journal Line";AddCurrAmount@1001 : Decimal);
    VAR
      GenJnlAlloc@1002 : Record "Gen. Jnl. Allocation";
      GenJnlAlloc2@1003 : Record "Gen. Jnl. Allocation";
      GLSetup@1004 : Record "General Ledger Setup";
      Currency@1005 : Record Currency;
      TotalQty@1006 : Decimal;
      TotalPct@1007 : Decimal;
      TotalPctRnded@1008 : Decimal;
      TotalAmountAddCurr@1009 : Decimal;
      TotalAmountAddCurr2@1010 : Decimal;
      TotalAmountAddCurrRnded@1011 : Decimal;
      TotalAmountAddCurrRnded2@1012 : Decimal;
    BEGIN
      GenJnlAlloc.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
      GenJnlAlloc.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
      GenJnlAlloc.SETRANGE("Journal Line No.",GenJnlLine."Line No.");
      GenJnlAlloc.LOCKTABLE;
      if GenJnlAlloc.FINDSET then begin
        GLSetup.GET;
        Currency.GET(GLSetup."Additional Reporting Currency");
        Currency.TESTFIELD("Amount Rounding Precision");
        repeat
          if (GenJnlAlloc."Allocation Quantity" <> 0) or (GenJnlAlloc."Allocation %" <> 0) then begin
            if GenJnlAlloc."Allocation Quantity" = 0 then begin
              TotalAmountAddCurr2 :=
                TotalAmountAddCurr2 - AddCurrAmount * GenJnlAlloc."Allocation %" / 100;
              GenJnlAlloc."Additional-Currency Amount" :=
                ROUND(TotalAmountAddCurr2,Currency."Amount Rounding Precision") -
                TotalAmountAddCurrRnded2;
              TotalAmountAddCurrRnded2 :=
                TotalAmountAddCurrRnded2 + GenJnlAlloc."Additional-Currency Amount";
            end else begin
              if TotalQty = 0 then begin
                GenJnlAlloc2.COPY(GenJnlAlloc);
                GenJnlAlloc2.SETFILTER("Allocation Quantity",'<>0');
                repeat
                  TotalQty := TotalQty + GenJnlAlloc2."Allocation Quantity";
                until GenJnlAlloc2.NEXT = 0;
                if TotalQty = 0 then
                  TotalQty := 1;
              end;
              TotalPct := TotalPct + GenJnlAlloc."Allocation Quantity" / TotalQty * 100;
              GenJnlAlloc."Allocation %" := ROUND(TotalPct,0.01) - TotalPctRnded;
              TotalPctRnded := TotalPctRnded + GenJnlAlloc."Allocation %";
              TotalAmountAddCurr :=
                TotalAmountAddCurr -
                AddCurrAmount * GenJnlAlloc."Allocation Quantity" / TotalQty;
              GenJnlAlloc."Additional-Currency Amount" :=
                ROUND(TotalAmountAddCurr,Currency."Amount Rounding Precision") -
                TotalAmountAddCurrRnded;
              TotalAmountAddCurrRnded :=
                TotalAmountAddCurrRnded + GenJnlAlloc."Additional-Currency Amount";
            end;
            GenJnlAlloc.MODIFY;
          end;
        until GenJnlAlloc.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdateJnlBalance@4(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      GenJnlLine.CALCFIELDS("Allocated Amt. (LCY)");
      if GenJnlLine."Bal. Account No." = '' then
        GenJnlLine."Balance (LCY)" := GenJnlLine."Amount (LCY)" + GenJnlLine."Allocated Amt. (LCY)"
      else
        GenJnlLine."Balance (LCY)" := GenJnlLine."Allocated Amt. (LCY)";
      GenJnlLine.MODIFY;
    END;

    [External]
    PROCEDURE CheckVAT@1(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      if ("Gen. Posting Type" <> 0) and (GenJnlLine."Gen. Posting Type" <> 0) then
        ERROR(
          Text000,
          GenJnlLine.FIELDCAPTION("Gen. Posting Type"));
    END;

    [External]
    PROCEDURE UpdateVAT@3(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJnlLine2@1001 : Record "Gen. Journal Line";
    BEGIN
      GenJnlLine2.CopyFromGenJnlAllocation(Rec);
      GenJnlLine2."Posting Date" := GenJnlLine."Posting Date";
      GenJnlLine2.VALIDATE("VAT Prod. Posting Group");
      Amount := GenJnlLine2."Amount (LCY)";
      "VAT Calculation Type" := GenJnlLine2."VAT Calculation Type";
      "VAT Amount" := GenJnlLine2."VAT Amount";
      "VAT %" := GenJnlLine2."VAT %";
    END;

    [External]
    PROCEDURE GetCurrencyCode@5() : Code[10];
    VAR
      GenJnlLine3@1000 : Record "Gen. Journal Line";
    BEGIN
      GenJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJnlLine3.SETRANGE("Line No.","Journal Line No.");
      if GenJnlLine3.FINDFIRST then
        exit(GenJnlLine3."Currency Code");

      exit('');
    END;

    LOCAL PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(Rec,CurrFieldNo,TableID,No,'',"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE ShowDimensions@7();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2("Dimension Set ID",
          STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Journal Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR GenJnlAllocation@1000 : Record "Gen. Jnl. Allocation";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

