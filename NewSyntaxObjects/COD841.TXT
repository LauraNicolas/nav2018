OBJECT Codeunit 841 Cash Flow Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SourceDataDoesNotExistErr@1000 : TextConst '@@@=Source data doesn''t exist for G/L Account: 8210.;ENU=Source data does not exist for %1: %2.';
      SourceDataDoesNotExistInfoErr@1001 : TextConst '@@@=Source data doesn''t exist in Vendor Ledger Entry for Document No.: PO000123.;ENU=Source data does not exist in %1 for %2: %3.';
      SourceTypeNotSupportedErr@1002 : TextConst 'ENU=Source type is not supported.';
      DefaultTxt@1003 : TextConst 'ENU=Default';
      DummyDate@1004 : Date;
      CashFlowTxt@1005 : TextConst 'ENU=CashFlow';
      CashFlowForecastTxt@1007 : TextConst 'ENU=Cash Flow Forecast';
      CashFlowAbbreviationTxt@1006 : TextConst '@@@=Abbreviation of Cash Flow;ENU=CF';
      UpdatingMsg@1008 : TextConst 'ENU=Updating Cash Flow Forecast...';

    [Internal]
    PROCEDURE ShowSourceDocument@31(CFVariant@1001 : Variant);
    VAR
      CFRecordRef@1004 : RecordRef;
    BEGIN
      CFRecordRef.GETTABLE(CFVariant);
      case CFRecordRef.NUMBER of
        DATABASE::"Cash Flow Worksheet Line":
          ShowSourceLocalCFWorkSheetLine(true,CFVariant);
        DATABASE::"Cash Flow Forecast Entry":
          ShowSourceLocalCFEntry(true,CFVariant);
      end;
    END;

    [Internal]
    PROCEDURE ShowSource@32(CFVariant@1000 : Variant);
    VAR
      CFRecordRef@1001 : RecordRef;
    BEGIN
      CFRecordRef.GETTABLE(CFVariant);
      case CFRecordRef.NUMBER of
        DATABASE::"Cash Flow Worksheet Line":
          ShowSourceLocalCFWorkSheetLine(false,CFVariant);
        DATABASE::"Cash Flow Forecast Entry":
          ShowSourceLocalCFEntry(false,CFVariant);
      end;
    END;

    LOCAL PROCEDURE ShowSourceLocalCFWorkSheetLine@36(ShowDocument@1001 : Boolean;CFVariant@1002 : Variant);
    VAR
      CashFlowWorksheetLine@1000 : Record "Cash Flow Worksheet Line";
    BEGIN
      CashFlowWorksheetLine := CFVariant;
      CashFlowWorksheetLine.TESTFIELD("Source Type");
      if CashFlowWorksheetLine."Source Type" <> CashFlowWorksheetLine."Source Type"::Tax then
        CashFlowWorksheetLine.TESTFIELD("Source No.");
      if CashFlowWorksheetLine."Source Type" = CashFlowWorksheetLine."Source Type"::"G/L Budget" then
        CashFlowWorksheetLine.TESTFIELD("G/L Budget Name");

      ShowSourceLocal(ShowDocument,
        CashFlowWorksheetLine."Source Type",
        CashFlowWorksheetLine."Source No.",
        CashFlowWorksheetLine."G/L Budget Name",
        CashFlowWorksheetLine."Document Date",
        CashFlowWorksheetLine."Document No.");
    END;

    LOCAL PROCEDURE ShowSourceLocalCFEntry@37(ShowDocument@1001 : Boolean;CFVariant@1002 : Variant);
    VAR
      CashFlowForecastEntry@1000 : Record "Cash Flow Forecast Entry";
    BEGIN
      CashFlowForecastEntry := CFVariant;
      CashFlowForecastEntry.TESTFIELD("Source Type");
      if CashFlowForecastEntry."Source Type" <> CashFlowForecastEntry."Source Type"::Tax then
        CashFlowForecastEntry.TESTFIELD("Source No.");
      if CashFlowForecastEntry."Source Type" = CashFlowForecastEntry."Source Type"::"G/L Budget" then
        CashFlowForecastEntry.TESTFIELD("G/L Budget Name");

      ShowSourceLocal(ShowDocument,
        CashFlowForecastEntry."Source Type",
        CashFlowForecastEntry."Source No.",
        CashFlowForecastEntry."G/L Budget Name",
        CashFlowForecastEntry."Document Date",
        CashFlowForecastEntry."Document No.");
    END;

    LOCAL PROCEDURE ShowSourceLocal@1(ShowDocument@1005 : Boolean;SourceType@1002 : Integer;SourceNo@1001 : Code[20];BudgetName@1000 : Code[10];DocumentDate@1003 : Date;DocumentNo@1004 : Code[20]);
    VAR
      CFWorksheetLine@1008 : Record "Cash Flow Worksheet Line";
    BEGIN
      case SourceType of
        CFWorksheetLine."Source Type"::"Liquid Funds":
          ShowLiquidFunds(SourceNo,ShowDocument);
        CFWorksheetLine."Source Type"::Receivables:
          ShowCustomer(SourceNo,ShowDocument);
        CFWorksheetLine."Source Type"::Payables:
          ShowVendor(SourceNo,ShowDocument);
        CFWorksheetLine."Source Type"::"Sales Orders":
          ShowSO(SourceNo);
        CFWorksheetLine."Source Type"::"Purchase Orders":
          ShowPO(SourceNo);
        CFWorksheetLine."Source Type"::"Service Orders":
          ShowServO(SourceNo);
        CFWorksheetLine."Source Type"::"Cash Flow Manual Revenue":
          ShowManualRevenue(SourceNo);
        CFWorksheetLine."Source Type"::"Cash Flow Manual Expense":
          ShowManualExpense(SourceNo);
        CFWorksheetLine."Source Type"::"Fixed Assets Budget",
        CFWorksheetLine."Source Type"::"Fixed Assets Disposal":
          ShowFA(SourceNo);
        CFWorksheetLine."Source Type"::"G/L Budget":
          ShowGLBudget(BudgetName,SourceNo);
        CFWorksheetLine."Source Type"::Job:
          ShowJob(SourceNo,DocumentDate,DocumentNo);
        CFWorksheetLine."Source Type"::Tax:
          ShowTax(SourceNo,DocumentDate);
        CFWorksheetLine."Source Type"::"Cortana Intelligence":
          ShowCortanaIntelligenceForecast;
        else
          ERROR(SourceTypeNotSupportedErr);
      end;
    END;

    LOCAL PROCEDURE ShowLiquidFunds@4(SourceNo@1000 : Code[20];ShowDocument@1001 : Boolean);
    VAR
      GLAccount@1007 : Record "G/L Account";
    BEGIN
      GLAccount.SETRANGE("No.",SourceNo);
      if not GLAccount.FINDFIRST then
        ERROR(SourceDataDoesNotExistErr,GLAccount.TABLECAPTION,SourceNo);
      if ShowDocument then
        PAGE.RUN(PAGE::"G/L Account Card",GLAccount)
      else
        PAGE.RUN(PAGE::"Chart of Accounts",GLAccount);
    END;

    LOCAL PROCEDURE ShowCustomer@5(SourceNo@1000 : Code[20];ShowDocument@1001 : Boolean);
    VAR
      CustLedgEntry@1012 : Record "Cust. Ledger Entry";
    BEGIN
      CustLedgEntry.SETRANGE("Document No.",SourceNo);
      if not CustLedgEntry.FINDFIRST then
        ERROR(SourceDataDoesNotExistInfoErr,CustLedgEntry.TABLECAPTION,CustLedgEntry.FIELDCAPTION("Document No."),SourceNo);
      if ShowDocument then
        CustLedgEntry.ShowDoc
      else
        PAGE.RUN(0,CustLedgEntry);
    END;

    LOCAL PROCEDURE ShowVendor@6(SourceNo@1000 : Code[20];ShowDocument@1001 : Boolean);
    VAR
      VendLedgEntry@1011 : Record "Vendor Ledger Entry";
    BEGIN
      VendLedgEntry.SETRANGE("Document No.",SourceNo);
      if not VendLedgEntry.FINDFIRST then
        ERROR(SourceDataDoesNotExistInfoErr,VendLedgEntry.TABLECAPTION,VendLedgEntry.FIELDCAPTION("Document No."),SourceNo);
      if ShowDocument then
        VendLedgEntry.ShowDoc
      else
        PAGE.RUN(0,VendLedgEntry);
    END;

    LOCAL PROCEDURE ShowSO@7(SourceNo@1000 : Code[20]);
    VAR
      SalesHeader@1010 : Record "Sales Header";
      SalesOrder@1005 : Page "Sales Order";
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETRANGE("No.",SourceNo);
      if not SalesHeader.FINDFIRST then
        ERROR(SourceDataDoesNotExistErr,SalesOrder.CAPTION,SourceNo);
      SalesOrder.SETTABLEVIEW(SalesHeader);
      SalesOrder.RUN;
    END;

    LOCAL PROCEDURE ShowPO@8(SourceNo@1000 : Code[20]);
    VAR
      PurchaseHeader@1009 : Record "Purchase Header";
      PurchaseOrder@1004 : Page "Purchase Order";
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETRANGE("No.",SourceNo);
      if not PurchaseHeader.FINDFIRST then
        ERROR(SourceDataDoesNotExistErr,PurchaseOrder.CAPTION,SourceNo);
      PurchaseOrder.SETTABLEVIEW(PurchaseHeader);
      PurchaseOrder.RUN;
    END;

    LOCAL PROCEDURE ShowServO@9(SourceNo@1000 : Code[20]);
    VAR
      ServiceHeader@1008 : Record "Service Header";
      ServiceOrder@1003 : Page "Service Order";
    BEGIN
      ServiceHeader.SETRANGE("Document Type",ServiceHeader."Document Type"::Order);
      ServiceHeader.SETRANGE("No.",SourceNo);
      if not ServiceHeader.FINDFIRST then
        ERROR(SourceDataDoesNotExistErr,ServiceOrder.CAPTION,SourceNo);
      ServiceOrder.SETTABLEVIEW(ServiceHeader);
      ServiceOrder.RUN;
    END;

    LOCAL PROCEDURE ShowManualRevenue@10(SourceNo@1000 : Code[20]);
    VAR
      CFManualRevenue@1006 : Record "Cash Flow Manual Revenue";
      CFManualRevenues@1001 : Page "Cash Flow Manual Revenues";
    BEGIN
      CFManualRevenue.SETRANGE(Code,SourceNo);
      if not CFManualRevenue.FINDFIRST then
        ERROR(SourceDataDoesNotExistErr,CFManualRevenues.CAPTION,SourceNo);
      CFManualRevenues.SETTABLEVIEW(CFManualRevenue);
      CFManualRevenues.RUN;
    END;

    LOCAL PROCEDURE ShowManualExpense@11(SourceNo@1000 : Code[20]);
    VAR
      CFManualExpense@1006 : Record "Cash Flow Manual Expense";
      CFManualExpenses@1001 : Page "Cash Flow Manual Expenses";
    BEGIN
      CFManualExpense.SETRANGE(Code,SourceNo);
      if not CFManualExpense.FINDFIRST then
        ERROR(SourceDataDoesNotExistErr,CFManualExpenses.CAPTION,SourceNo);
      CFManualExpenses.SETTABLEVIEW(CFManualExpense);
      CFManualExpenses.RUN;
    END;

    LOCAL PROCEDURE ShowFA@2(SourceNo@1000 : Code[20]);
    VAR
      FixedAsset@1006 : Record "Fixed Asset";
    BEGIN
      FixedAsset.SETRANGE("No.",SourceNo);
      if not FixedAsset.FINDFIRST then
        ERROR(SourceDataDoesNotExistInfoErr,FixedAsset.TABLECAPTION,FixedAsset.FIELDCAPTION("No."),SourceNo);
      PAGE.RUN(PAGE::"Fixed Asset Card",FixedAsset);
    END;

    LOCAL PROCEDURE ShowGLBudget@3(BudgetName@1000 : Code[10];SourceNo@1001 : Code[20]);
    VAR
      GLBudgetName@1003 : Record "G/L Budget Name";
      GLAccount@1004 : Record "G/L Account";
      Budget@1002 : Page Budget;
    BEGIN
      if not GLAccount.GET(SourceNo) then
        ERROR(SourceDataDoesNotExistErr,GLAccount.TABLECAPTION,SourceNo);
      if not GLBudgetName.GET(BudgetName) then
        ERROR(SourceDataDoesNotExistErr,GLBudgetName.TABLECAPTION,BudgetName);
      Budget.SetBudgetName(BudgetName);
      Budget.SetGLAccountFilter(SourceNo);
      Budget.RUN;
    END;

    LOCAL PROCEDURE ShowCortanaIntelligenceForecast@41();
    BEGIN
    END;

    [External]
    PROCEDURE CashFlowName@12(CashFlowNo@1001 : Code[20]) : Text[50];
    VAR
      CashFlowForecast@1000 : Record "Cash Flow Forecast";
    BEGIN
      if CashFlowForecast.GET(CashFlowNo) then
        exit(CashFlowForecast.Description);
      exit('')
    END;

    [External]
    PROCEDURE CashFlowAccountName@13(CashFlowAccountNo@1000 : Code[20]) : Text[50];
    VAR
      CashFlowAccount@1001 : Record "Cash Flow Account";
    BEGIN
      if CashFlowAccount.GET(CashFlowAccountNo) then
        exit(CashFlowAccount.Name);
      exit('')
    END;

    LOCAL PROCEDURE ShowJob@20(SourceNo@1000 : Code[20];DocumentDate@1001 : Date;DocumentNo@1002 : Code[20]);
    VAR
      JobPlanningLine@1010 : Record "Job Planning Line";
      JobPlanningLines@1005 : Page "Job Planning Lines";
    BEGIN
      JobPlanningLine.SETRANGE("Job No.",SourceNo);
      JobPlanningLine.SETRANGE("Document Date",DocumentDate);
      JobPlanningLine.SETRANGE("Document No.",DocumentNo);
      JobPlanningLine.SETFILTER("Line Type",
        STRSUBSTNO('%1|%2',
          JobPlanningLine."Line Type"::Billable,
          JobPlanningLine."Line Type"::"Both Budget and Billable"));
      if not JobPlanningLine.FINDFIRST then
        ERROR(SourceDataDoesNotExistErr,JobPlanningLines.CAPTION,SourceNo);
      JobPlanningLines.SETTABLEVIEW(JobPlanningLine);
      JobPlanningLines.RUN;
    END;

    LOCAL PROCEDURE ShowTax@27(SourceNo@1007 : Code[20];TaxPayableDate@1000 : Date);
    VAR
      PurchaseHeader@1002 : Record "Purchase Header";
      SalesHeader@1003 : Record "Sales Header";
      VATEntry@1004 : Record "VAT Entry";
      SalesOrderList@1001 : Page "Sales Order List";
      PurchaseOrderList@1005 : Page "Purchase Order List";
      SourceNum@1008 : Integer;
    BEGIN
      EVALUATE(SourceNum,SourceNo);
      case SourceNum of
        DATABASE::"Purchase Header":
          begin
            SetViewOnPurchaseHeaderForTaxCalc(PurchaseHeader,TaxPayableDate);
            PurchaseOrderList.SkipShowingLinesWithoutVAT;
            PurchaseOrderList.SETTABLEVIEW(PurchaseHeader);
            PurchaseOrderList.RUN;
          end;
        DATABASE::"Sales Header":
          begin
            SetViewOnSalesHeaderForTaxCalc(SalesHeader,TaxPayableDate);
            SalesOrderList.SkipShowingLinesWithoutVAT;
            SalesOrderList.SETTABLEVIEW(SalesHeader);
            SalesOrderList.RUN;
          end;
        DATABASE::"VAT Entry":
          begin
            SetViewOnVATEntryForTaxCalc(VATEntry,TaxPayableDate);
            PAGE.RUN(PAGE::"VAT Entries",VATEntry);
          end;
      end;
    END;

    [External]
    PROCEDURE RecurrenceToRecurringFrequency@21(Recurrence@1000 : '" ",Daily,Weekly,Monthly,Quarterly,Yearly') RecurringFrequency : Text;
    BEGIN
      case Recurrence of
        Recurrence::Daily:
          RecurringFrequency := '<1D>';
        Recurrence::Weekly:
          RecurringFrequency := '<1W>';
        Recurrence::Monthly:
          RecurringFrequency := '<1M>';
        Recurrence::Quarterly:
          RecurringFrequency := '<1Q>';
        Recurrence::Yearly:
          RecurringFrequency := '<1Y>';
        else
          RecurringFrequency := '';
      end;
    END;

    [External]
    PROCEDURE RecurringFrequencyToRecurrence@23(RecurringFrequency@1000 : DateFormula;VAR RecurrenceOut@1001 : '" ",Daily,Weekly,Monthly,Quarterly,Yearly');
    VAR
      Daily@1002 : DateFormula;
      Weekly@1003 : DateFormula;
      Monthly@1004 : DateFormula;
      Quarterly@1006 : DateFormula;
      Yearly@1005 : DateFormula;
    BEGIN
      EVALUATE(Daily,'<1D>');
      EVALUATE(Weekly,'<1W>');
      EVALUATE(Monthly,'<1M>');
      EVALUATE(Quarterly,'<1Q>');
      EVALUATE(Yearly,'<1Y>');

      case RecurringFrequency of
        Daily:
          RecurrenceOut := RecurrenceOut::Daily;
        Weekly:
          RecurrenceOut := RecurrenceOut::Weekly;
        Monthly:
          RecurrenceOut := RecurrenceOut::Monthly;
        Quarterly:
          RecurrenceOut := RecurrenceOut::Quarterly;
        Yearly:
          RecurrenceOut := RecurrenceOut::Yearly;
        else
          RecurrenceOut := RecurrenceOut::" ";
      end;
    END;

    [External]
    PROCEDURE CreateAndStartJobQueueEntry@35(UpdateFrequency@1002 : 'Never,Daily,Weekly');
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
      JobQueueManagement@1003 : Codeunit "Job Queue Management";
    BEGIN
      // Create a new job queue entry for Cash Flow Forecast
      JobQueueEntry."No. of Minutes between Runs" := UpdateFrequencyToNoOfMinutes(UpdateFrequency);
      JobQueueEntry."Object Type to Run" := JobQueueEntry."Object Type to Run"::Codeunit;
      JobQueueEntry."Object ID to Run" := CODEUNIT::"Cash Flow Forecast Update";
      JobQueueManagement.CreateJobQueueEntry(JobQueueEntry);

      // Start it
      CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
    END;

    [External]
    PROCEDURE DeleteJobQueueEntries@22();
    VAR
      JobQueueEntry@1011 : Record "Job Queue Entry";
      JobQueueManagement@1010 : Codeunit "Job Queue Management";
    BEGIN
      JobQueueManagement.DeleteJobQueueEntries(JobQueueEntry."Object Type to Run"::Codeunit,CODEUNIT::"Cash Flow Forecast Update");
    END;

    [Internal]
    PROCEDURE GetCashAccountFilter@19() CashAccountFilter : Text;
    VAR
      GLAccountCategory@1000 : Record "G/L Account Category";
    BEGIN
      GLAccountCategory.SETRANGE("Additional Report Definition",GLAccountCategory."Additional Report Definition"::"Cash Accounts");
      if not GLAccountCategory.FINDSET then
        exit;

      CashAccountFilter := GLAccountCategory.GetTotaling;

      while GLAccountCategory.NEXT <> 0 do
        CashAccountFilter += '|' + GLAccountCategory.GetTotaling;
    END;

    [External]
    PROCEDURE SetupCashFlow@14(LiquidFundsGLAccountFilter@1000 : Code[250]);
    VAR
      CashFlowNoSeriesCode@1001 : Code[10];
    BEGIN
      DeleteExistingSetup;
      CreateCashFlowAccounts(LiquidFundsGLAccountFilter);
      CashFlowNoSeriesCode := CreateCashFlowNoSeries;
      CreateCashFlowSetup(CashFlowNoSeriesCode);
      CreateCashFlowForecast;
      CreateCashFlowChartSetup;
      CreateCashFlowReportSelection;
    END;

    LOCAL PROCEDURE DeleteExistingSetup@18();
    VAR
      CashFlowForecast@1000 : Record "Cash Flow Forecast";
      CashFlowAccount@1001 : Record "Cash Flow Account";
      CashFlowAccountComment@1004 : Record "Cash Flow Account Comment";
      CashFlowSetup@1002 : Record "Cash Flow Setup";
      CashFlowWorksheetLine@1003 : Record "Cash Flow Worksheet Line";
      CashFlowForecastEntry@1005 : Record "Cash Flow Forecast Entry";
      CashFlowManualRevenue@1006 : Record "Cash Flow Manual Revenue";
      CashFlowManualExpense@1007 : Record "Cash Flow Manual Expense";
      CashFlowReportSelection@1008 : Record "Cash Flow Report Selection";
      CashFlowChartSetup@1009 : Record "Cash Flow Chart Setup";
      JobQueueEntry@1011 : Record "Job Queue Entry";
      JobQueueManagement@1010 : Codeunit "Job Queue Management";
    BEGIN
      CashFlowForecast.DELETEALL;
      CashFlowAccount.DELETEALL;
      CashFlowAccountComment.DELETEALL;
      CashFlowSetup.DELETEALL;
      CashFlowWorksheetLine.DELETEALL;
      CashFlowForecastEntry.DELETEALL;
      CashFlowManualRevenue.DELETEALL;
      CashFlowManualExpense.DELETEALL;
      CashFlowReportSelection.DELETEALL;
      CashFlowChartSetup.DELETEALL;
      JobQueueManagement.DeleteJobQueueEntries(JobQueueEntry."Object Type to Run"::Codeunit,CODEUNIT::"Cash Flow Forecast Update");
    END;

    LOCAL PROCEDURE CreateCashFlowAccounts@15(LiquidFundsGLAccountFilter@1001 : Code[250]);
    VAR
      CashFlowAccount@1000 : Record "Cash Flow Account";
    BEGIN
      CreateCashFlowAccount(CashFlowAccount."Source Type"::Receivables,'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::Payables,'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Sales Orders",'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Service Orders",'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Purchase Orders",'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Fixed Assets Budget",'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Fixed Assets Disposal",'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Liquid Funds",LiquidFundsGLAccountFilter);
      CreateCashFlowAccount(CashFlowAccount."Source Type"::Job,'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Cash Flow Manual Expense",'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::"Cash Flow Manual Revenue",'');
      CreateCashFlowAccount(CashFlowAccount."Source Type"::Tax,'');
    END;

    LOCAL PROCEDURE CreateCashFlowAccount@28(SourceType@1000 : Option;LiquidFundsGLAccountFilter@1003 : Code[250]);
    VAR
      CashFlowAccount@1001 : Record "Cash Flow Account";
      DummyCashFlowAccount@1002 : Record "Cash Flow Account";
    BEGIN
      DummyCashFlowAccount."Source Type" := SourceType;

      CashFlowAccount.INIT;
      CashFlowAccount.VALIDATE("No.",FORMAT(DummyCashFlowAccount."Source Type",20));
      CashFlowAccount.VALIDATE(Name,FORMAT(DummyCashFlowAccount."Source Type"));
      CashFlowAccount.VALIDATE("Source Type",DummyCashFlowAccount."Source Type");
      if SourceType = DummyCashFlowAccount."Source Type"::"Liquid Funds" then begin
        CashFlowAccount."G/L Integration" := CashFlowAccount."G/L Integration"::Balance;
        CashFlowAccount."G/L Account Filter" := LiquidFundsGLAccountFilter;
      end;
      CashFlowAccount.INSERT;
    END;

    LOCAL PROCEDURE CreateCashFlowForecast@16();
    VAR
      CashFlowForecast@1000 : Record "Cash Flow Forecast";
    BEGIN
      CashFlowForecast.INIT;
      CashFlowForecast.VALIDATE("No.",DefaultTxt);
      CashFlowForecast.VALIDATE(Description,DefaultTxt);
      CashFlowForecast.ValidateShowInChart(true);
      CashFlowForecast."Overdue CF Dates to Work Date" := true;
      CashFlowForecast.INSERT;
    END;

    LOCAL PROCEDURE CreateCashFlowNoSeries@40() : Code[10];
    VAR
      NoSeries@1009 : Record "No. Series";
      NoSeriesLine@1010 : Record "No. Series Line";
    BEGIN
      if NoSeries.GET(CashFlowTxt) then
        exit(NoSeries.Code);

      NoSeries.INIT;
      NoSeries.Code := CashFlowTxt;
      NoSeries.Description := CashFlowForecastTxt;
      NoSeries."Default Nos." := true;
      NoSeries."Manual Nos." := true;
      NoSeries.INSERT;

      NoSeriesLine.INIT;
      NoSeriesLine."Series Code" := NoSeries.Code;
      NoSeriesLine."Line No." := 10000;
      NoSeriesLine.VALIDATE("Starting No.",CashFlowAbbreviationTxt + '000001');
      NoSeriesLine.INSERT(true);

      exit(NoSeries.Code);
    END;

    LOCAL PROCEDURE CreateCashFlowSetup@17(CashFlowNoSeriesCode@1002 : Code[10]);
    VAR
      CashFlowSetup@1000 : Record "Cash Flow Setup";
      CashFlowAccount@1005 : Record "Cash Flow Account";
    BEGIN
      CashFlowSetup.INIT;
      CashFlowSetup.VALIDATE("Cash Flow Forecast No. Series",CashFlowNoSeriesCode);
      CashFlowSetup.VALIDATE("Receivables CF Account No.",FORMAT(CashFlowAccount."Source Type"::Receivables,20));
      CashFlowSetup.VALIDATE("Payables CF Account No.",FORMAT(CashFlowAccount."Source Type"::Payables,20));
      CashFlowSetup.VALIDATE("Sales Order CF Account No.",FORMAT(CashFlowAccount."Source Type"::"Sales Orders",20));
      CashFlowSetup.VALIDATE("Service CF Account No.",FORMAT(CashFlowAccount."Source Type"::"Service Orders",20));
      CashFlowSetup.VALIDATE("Purch. Order CF Account No.",FORMAT(CashFlowAccount."Source Type"::"Purchase Orders",20));
      CashFlowSetup.VALIDATE("FA Budget CF Account No.",FORMAT(CashFlowAccount."Source Type"::"Fixed Assets Budget",20));
      CashFlowSetup.VALIDATE("FA Disposal CF Account No.",FORMAT(CashFlowAccount."Source Type"::"Fixed Assets Disposal",20));
      CashFlowSetup.VALIDATE("Job CF Account No.",FORMAT(CashFlowAccount."Source Type"::Job,20));
      CashFlowSetup.VALIDATE("Tax CF Account No.",FORMAT(CashFlowAccount."Source Type"::Tax,20));
      CashFlowSetup.INSERT;
    END;

    LOCAL PROCEDURE CreateCashFlowChartSetup@24();
    VAR
      User@1001 : Record User;
    BEGIN
      if not User.FINDSET then
        CreateCashFlowChartSetupForUser(USERID)
      else
        repeat
          CreateCashFlowChartSetupForUser(User."User Name");
        until User.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateCashFlowChartSetupForUser@33(UserName@1000 : Code[50]);
    VAR
      CashFlowChartSetup@1001 : Record "Cash Flow Chart Setup";
    BEGIN
      CashFlowChartSetup.INIT;
      CashFlowChartSetup."User ID" := UserName;
      CashFlowChartSetup.Show := CashFlowChartSetup.Show::Combined;
      CashFlowChartSetup."Start Date" := CashFlowChartSetup."Start Date"::"Working Date";
      CashFlowChartSetup."Period Length" := CashFlowChartSetup."Period Length"::Month;
      CashFlowChartSetup."Group By" := CashFlowChartSetup."Group By"::"Source Type";
      CashFlowChartSetup.INSERT;
    END;

    LOCAL PROCEDURE CreateCashFlowReportSelection@51();
    VAR
      CashFlowReportSelection@1000 : Record "Cash Flow Report Selection";
    BEGIN
      CashFlowReportSelection.NewRecord;
      CashFlowReportSelection.VALIDATE("Report ID",846);
      CashFlowReportSelection.INSERT;
    END;

    [External]
    PROCEDURE UpdateCashFlowForecast@50(CortanaIntelligenceEnabled@1006 : Boolean);
    VAR
      CashFlowForecast@1003 : Record "Cash Flow Forecast";
      CashFlowSetup@1004 : Record "Cash Flow Setup";
      SuggestWorksheetLines@1000 : Report "Suggest Worksheet Lines";
      Window@1005 : Dialog;
      Sources@1001 : ARRAY [16] OF Boolean;
      Index@1002 : Integer;
      SourceType@1007 : ',Receivables,Payables,"Liquid Funds","Cash Flow Manual Expense","Cash Flow Manual Revenue","Sales Order","Purchase Order","Budgeted Fixed Asset","Sale of Fixed Asset","Service Orders","G/L Budget",,,Job,Tax,"Cortana Intelligence"';
    BEGIN
      Window.OPEN(UpdatingMsg);

      if not CashFlowSetup.GET then
        exit;

      if not CashFlowForecast.GET(CashFlowSetup."CF No. on Chart in Role Center") then
        exit;

      UpdateCashFlowForecastManualPaymentHorizon(CashFlowForecast);

      for Index := 1 to ARRAYLEN(Sources) do
        Sources[Index] := true;

      Sources[SourceType::"Cortana Intelligence"] := CortanaIntelligenceEnabled;
      SuggestWorksheetLines.InitializeRequest(
        Sources,CashFlowSetup."CF No. on Chart in Role Center",CashFlowForecast."Default G/L Budget Name",true);
      SuggestWorksheetLines.USEREQUESTPAGE := false;
      SuggestWorksheetLines.RUN;
      CODEUNIT.RUN(CODEUNIT::"Cash Flow Wksh.-Register Batch");

      Window.CLOSE;
    END;

    LOCAL PROCEDURE UpdateCashFlowForecastManualPaymentHorizon@25(VAR CashFlowForecast@1001 : Record "Cash Flow Forecast");
    BEGIN
      CashFlowForecast.VALIDATE("Manual Payments From",WORKDATE);
      CashFlowForecast.VALIDATE("Manual Payments To",CALCDATE('<+1Y>',WORKDATE));
      CashFlowForecast.MODIFY;
    END;

    LOCAL PROCEDURE UpdateFrequencyToNoOfMinutes@46(UpdateFrequency@1000 : 'Never,Daily,Weekly') : Integer;
    BEGIN
      case UpdateFrequency of
        UpdateFrequency::Never:
          exit(0);
        UpdateFrequency::Daily:
          exit(60 * 24);
        UpdateFrequency::Weekly:
          exit(60 * 24 * 7);
      end;
    END;

    [External]
    PROCEDURE SetViewOnPurchaseHeaderForTaxCalc@34(VAR PurchaseHeader@1000 : Record "Purchase Header";TaxPaymentDueDate@1001 : Date);
    VAR
      CashFlowSetup@1002 : Record "Cash Flow Setup";
      StartDate@1004 : Date;
      EndDate@1003 : Date;
    BEGIN
      PurchaseHeader.SETRANGE("Document Type",PurchaseHeader."Document Type"::Order);
      PurchaseHeader.SETFILTER("Document Date",'<>%1',DummyDate);
      if TaxPaymentDueDate <> DummyDate then begin
        CashFlowSetup.GetTaxPeriodStartEndDates(TaxPaymentDueDate,StartDate,EndDate);
        PurchaseHeader.SETFILTER("Document Date",STRSUBSTNO('%1..%2',StartDate,EndDate));
      end;
      PurchaseHeader.SETCURRENTKEY("Document Date");
      PurchaseHeader.SETASCENDING("Document Date",true);
    END;

    [External]
    PROCEDURE SetViewOnSalesHeaderForTaxCalc@38(VAR SalesHeader@1000 : Record "Sales Header";TaxPaymentDueDate@1001 : Date);
    VAR
      CashFlowSetup@1002 : Record "Cash Flow Setup";
      StartDate@1004 : Date;
      EndDate@1003 : Date;
    BEGIN
      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.SETFILTER("Document Date",'<>%1',DummyDate);
      if TaxPaymentDueDate <> DummyDate then begin
        CashFlowSetup.GetTaxPeriodStartEndDates(TaxPaymentDueDate,StartDate,EndDate);
        SalesHeader.SETFILTER("Document Date",STRSUBSTNO('%1..%2',StartDate,EndDate));
      end;
      SalesHeader.SETCURRENTKEY("Document Date");
      SalesHeader.SETASCENDING("Document Date",true);
    END;

    [External]
    PROCEDURE SetViewOnVATEntryForTaxCalc@39(VAR VATEntry@1000 : Record "VAT Entry";TaxPaymentDueDate@1001 : Date);
    VAR
      CashFlowSetup@1003 : Record "Cash Flow Setup";
      StartDate@1002 : Date;
      EndDate@1004 : Date;
    BEGIN
      VATEntry.SETFILTER(Type,STRSUBSTNO('%1|%2',VATEntry.Type::Purchase,VATEntry.Type::Sale));
      VATEntry.SETRANGE(Closed,false);
      VATEntry.SETFILTER(Amount,'<>%1',0);
      VATEntry.SETFILTER("Document Date",'<>%1',DummyDate);
      if TaxPaymentDueDate <> DummyDate then begin
        CashFlowSetup.GetTaxPeriodStartEndDates(TaxPaymentDueDate,StartDate,EndDate);
        VATEntry.SETFILTER("Document Date",STRSUBSTNO('%1..%2',StartDate,EndDate));
      end;
      VATEntry.SETCURRENTKEY("Document Date");
      VATEntry.SETASCENDING("Document Date",true);
    END;

    [Internal]
    PROCEDURE GetTaxAmountFromSalesOrder@29(SalesHeader@1000 : Record "Sales Header") : Decimal;
    VAR
      NewSalesLine@1009 : Record "Sales Line";
      NewSalesLineLCY@1008 : Record "Sales Line";
      SalesPost@1001 : Codeunit "Sales-Post";
      QtyType@1007 : 'General,Invoicing,Shipping';
      VATAmount@1006 : Decimal;
      VATAmountText@1005 : Text[30];
      ProfitLCY@1004 : Decimal;
      ProfitPct@1003 : Decimal;
      TotalAdjCostLCY@1002 : Decimal;
    BEGIN
      SalesPost.SumSalesLines(SalesHeader,QtyType::Invoicing,NewSalesLine,NewSalesLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
      exit(-1 * VATAmount);
    END;

    [Internal]
    PROCEDURE GetTaxAmountFromPurchaseOrder@30(PurchaseHeader@1000 : Record "Purchase Header") : Decimal;
    VAR
      NewPurchLine@1006 : Record "Purchase Line";
      NewPurchLineLCY@1005 : Record "Purchase Line";
      PurchPost@1004 : Codeunit "Purch.-Post";
      QtyType@1003 : 'General,Invoicing,Shipping';
      VATAmount@1002 : Decimal;
      VATAmountText@1001 : Text[30];
    BEGIN
      PurchPost.SumPurchLines(PurchaseHeader,QtyType::Invoicing,NewPurchLine,NewPurchLineLCY,
        VATAmount,VATAmountText);
      exit(VATAmount);
    END;

    [External]
    PROCEDURE GetTotalAmountFromSalesOrder@43(SalesHeader@1000 : Record "Sales Header") : Decimal;
    BEGIN
      SalesHeader.CALCFIELDS("Amount Including VAT");
      exit(SalesHeader."Amount Including VAT");
    END;

    [External]
    PROCEDURE GetTotalAmountFromPurchaseOrder@42(PurchaseHeader@1000 : Record "Purchase Header") : Decimal;
    BEGIN
      PurchaseHeader.CALCFIELDS("Amount Including VAT");
      exit(PurchaseHeader."Amount Including VAT");
    END;

    BEGIN
    END.
  }
}

