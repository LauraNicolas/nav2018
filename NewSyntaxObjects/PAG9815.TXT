OBJECT Page 9815 Std. Password Dialog
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Set Password;
    PageType=StandardDialog;
    OnInit=BEGIN
             ValidatePassword := true;
             RequiresPasswordConfirmation := true;
           END;

    OnOpenPage=BEGIN
                 ValidPassword := false;
               END;

    OnQueryClosePage=BEGIN
                       ValidPassword := false;
                       if CloseAction = ACTION::OK then begin
                         if RequiresPasswordConfirmation and (SetPassword <> ConfirmPassword) then
                           ERROR(PasswordMismatchErr);
                         if EnableBlankPasswordState and (SetPassword = '') then begin
                           if not CONFIRM(ConfirmBlankPasswordQst) then
                             ERROR(PasswordTooSimpleErr);
                         end else begin
                           if SetPassword = '' then
                             ERROR(PasswordBlankIsNotAllowedErr);
                           if ValidatePassword and not IdentityManagement.ValidatePasswordStrength(SetPassword) then
                             ERROR(PasswordTooSimpleErr);
                         end;
                         ValidPassword := true;
                       end
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=SetPassword;
                ExtendedDatatype=Masked;
                CaptionML=ENU=Password;
                ToolTipML=ENU=Specifies the password for this task. The password must consist of 8 or more characters, at least one uppercase letter, one lowercase letter, and one number.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=SetPassword;
                OnValidate=BEGIN
                             if ValidatePassword and not IdentityManagement.ValidatePasswordStrength(SetPassword) then
                               ERROR(PasswordTooSimpleErr);
                           END;
                            }

    { 3   ;1   ;Field     ;
                Name=ConfirmPassword;
                ExtendedDatatype=Masked;
                CaptionML=ENU=Confirm Password;
                ToolTipML=ENU=Specifies the password repeated.;
                ApplicationArea=#All;
                SourceExpr=ConfirmPassword;
                Visible=RequiresPasswordConfirmation;
                OnValidate=BEGIN
                             if RequiresPasswordConfirmation and (SetPassword <> ConfirmPassword) then
                               ERROR(PasswordMismatchErr);
                           END;
                            }

  }
  CODE
  {
    VAR
      PasswordMismatchErr@1003 : TextConst 'ENU=The specified passwords are not the same.';
      PasswordTooSimpleErr@1004 : TextConst 'ENU=The specified password does not meet the requirements. It must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one number.';
      PasswordNotValidatedErr@1007 : TextConst 'ENU=The password did not validate correctly, or it was not accepted.';
      PasswordBlankIsNotAllowedErr@1012 : TextConst 'ENU=You must enter a password.';
      ConfirmBlankPasswordQst@1008 : TextConst 'ENU=Do you want to exit without entering a password?';
      IdentityManagement@1002 : Codeunit "Identity Management";
      SetPassword@1000 : Text[250] INDATASET;
      ConfirmPassword@1001 : Text[250] INDATASET;
      ValidPassword@1005 : Boolean;
      EnableBlankPasswordState@1006 : Boolean;
      ValidatePassword@1009 : Boolean;
      GetPasswordCaptionTxt@1010 : TextConst 'ENU=Enter Password';
      RequiresPasswordConfirmation@1011 : Boolean;

    [External]
    PROCEDURE GetPasswordValue@1() : Text;
    BEGIN
      if ValidPassword = true then
        exit(SetPassword);

      ERROR(PasswordNotValidatedErr);
    END;

    [External]
    PROCEDURE EnableBlankPassword@2(enable@1000 : Boolean);
    BEGIN
      EnableBlankPasswordState := enable;
    END;

    [External]
    PROCEDURE EnableGetPasswordMode@3(NewValidatePassword@1000 : Boolean);
    BEGIN
      ValidatePassword := NewValidatePassword;
      CurrPage.CAPTION := GetPasswordCaptionTxt;
    END;

    [External]
    PROCEDURE DisablePasswordConfirmation@5();
    BEGIN
      RequiresPasswordConfirmation := false;
    END;

    BEGIN
    END.
  }
}

