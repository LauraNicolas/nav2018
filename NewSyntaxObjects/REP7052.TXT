OBJECT Report 7052 Suggest Sales Price on Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Suggest Sales Price on Wksh.;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  case ToSalesType of
                    ToSalesType::Customer:
                      begin
                        ToCust."No." := ToSalesCode;
                        if ToCust."No." <> '' then
                          ToCust.FIND
                        else begin
                          if not ToCust.FIND then
                            ToCust.INIT;
                          ToSalesCode := ToCust."No.";
                        end;
                      end;
                    ToSalesType::"Customer Price Group":
                      begin
                        ToCustPriceGr.Code := ToSalesCode;
                        if ToCustPriceGr.Code <> '' then
                          ToCustPriceGr.FIND
                        else begin
                          if not ToCustPriceGr.FIND then
                            ToCustPriceGr.INIT;
                          ToSalesCode := ToCustPriceGr.Code;
                        end;
                      end;
                    ToSalesType::Campaign:
                      begin
                        ToCampaign."No." := ToSalesCode;
                        if ToCampaign."No." <> '' then
                          ToCampaign.FIND
                        else begin
                          if not ToCampaign.FIND then
                            ToCampaign.INIT;
                          ToSalesCode := ToCampaign."No.";
                        end;
                        ToStartDate := ToCampaign."Starting Date";
                        ToEndDate := ToCampaign."Ending Date";
                      end;
                  end;

                  ReplaceUnitOfMeasure := ToUnitOfMeasure.Code <> '';
                  ReplaceCurrency := ToCurrency.Code <> '';
                  ReplaceStartingDate := ToStartDate <> 0D;
                  ReplaceEndingDate := ToEndDate <> 0D;

                  if ReplaceUnitOfMeasure and (ToUnitOfMeasure.Code <> '') then
                    ToUnitOfMeasure.FIND;

                  RoundingMethod.SETRANGE(Code,RoundingMethod.Code);
                END;

  }
  DATASET
  {
    { 7331;    ;DataItem;Sales Price         ;
               DataItemTable="Sales Price";
               DataItemTableView=SORTING("Item No.");
               OnPreDataItem=BEGIN
                               Window.OPEN(Text001);
                             END;

               OnAfterGetRecord=BEGIN
                                  if Item."No." <> "Item No." then begin
                                    Item.GET("Item No.");
                                    Window.UPDATE(1,"Item No.");
                                  end;

                                  ReplaceSalesCode := not (("Sales Type" = ToSalesType) and ("Sales Code" = ToSalesCode));

                                  if (ToSalesCode = '') and (ToSalesType <> ToSalesType::"All Customers") then
                                    ERROR(Text002,"Sales Type");

                                  CLEAR(SalesPriceWksh);

                                  SalesPriceWksh.VALIDATE("Sales Type",ToSalesType);
                                  if not ReplaceSalesCode then
                                    SalesPriceWksh.VALIDATE("Sales Code","Sales Code")
                                  else
                                    SalesPriceWksh.VALIDATE("Sales Code",ToSalesCode);

                                  SalesPriceWksh.VALIDATE("Item No.","Item No.");
                                  SalesPriceWksh."New Unit Price" := "Unit Price";
                                  SalesPriceWksh."Minimum Quantity" := "Minimum Quantity";

                                  if not ReplaceUnitOfMeasure then
                                    SalesPriceWksh."Unit of Measure Code" := "Unit of Measure Code"
                                  else begin
                                    SalesPriceWksh."Unit of Measure Code" := ToUnitOfMeasure.Code;
                                    if not (SalesPriceWksh."Unit of Measure Code" in ['',Item."Base Unit of Measure"]) then
                                      if not ItemUnitOfMeasure.GET("Item No.",SalesPriceWksh."Unit of Measure Code") then
                                        CurrReport.SKIP;
                                    SalesPriceWksh."New Unit Price" :=
                                      SalesPriceWksh."New Unit Price" *
                                      UOMMgt.GetQtyPerUnitOfMeasure(Item,SalesPriceWksh."Unit of Measure Code") /
                                      UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                  end;
                                  SalesPriceWksh.VALIDATE("Unit of Measure Code");
                                  SalesPriceWksh.VALIDATE("Variant Code","Variant Code");

                                  if not ReplaceCurrency then
                                    SalesPriceWksh."Currency Code" := "Currency Code"
                                  else
                                    SalesPriceWksh."Currency Code" := ToCurrency.Code;

                                  if not ReplaceStartingDate then begin
                                    if not ReplaceEndingDate then
                                      SalesPriceWksh.VALIDATE("Starting Date","Starting Date")
                                  end else
                                    SalesPriceWksh.VALIDATE("Starting Date",ToStartDate);

                                  if not ReplaceEndingDate then begin
                                    if not ReplaceStartingDate then
                                      SalesPriceWksh.VALIDATE("Ending Date","Ending Date")
                                  end else
                                    SalesPriceWksh.VALIDATE("Ending Date",ToEndDate);

                                  if "Currency Code" <> SalesPriceWksh."Currency Code" then begin
                                    if "Currency Code" <> '' then begin
                                      FromCurrency.GET("Currency Code");
                                      FromCurrency.TESTFIELD(Code);
                                      SalesPriceWksh."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtFCYToLCY(
                                          WORKDATE,"Currency Code",SalesPriceWksh."New Unit Price",
                                          CurrExchRate.ExchangeRate(
                                            WORKDATE,"Currency Code"));
                                    end;
                                    if SalesPriceWksh."Currency Code" <> '' then
                                      SalesPriceWksh."New Unit Price" :=
                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                          WORKDATE,SalesPriceWksh."Currency Code",
                                          SalesPriceWksh."New Unit Price",CurrExchRate.ExchangeRate(
                                            WORKDATE,SalesPriceWksh."Currency Code"));
                                  end;

                                  if SalesPriceWksh."Currency Code" = '' then
                                    Currency2.InitRoundingPrecision
                                  else begin
                                    Currency2.GET(SalesPriceWksh."Currency Code");
                                    Currency2.TESTFIELD("Unit-Amount Rounding Precision");
                                  end;
                                  SalesPriceWksh."New Unit Price" :=
                                    ROUND(SalesPriceWksh."New Unit Price",Currency2."Unit-Amount Rounding Precision");

                                  if SalesPriceWksh."New Unit Price" > PriceLowerLimit then
                                    SalesPriceWksh."New Unit Price" := SalesPriceWksh."New Unit Price" * UnitPriceFactor;
                                  if RoundingMethod.Code <> '' then begin
                                    RoundingMethod."Minimum Amount" := SalesPriceWksh."New Unit Price";
                                    if RoundingMethod.FIND('=<') then begin
                                      SalesPriceWksh."New Unit Price" :=
                                        SalesPriceWksh."New Unit Price" + RoundingMethod."Amount Added Before";
                                      if RoundingMethod.Precision > 0 then
                                        SalesPriceWksh."New Unit Price" :=
                                          ROUND(
                                            SalesPriceWksh."New Unit Price",
                                            RoundingMethod.Precision,COPYSTR('=><',RoundingMethod.Type + 1,1));
                                      SalesPriceWksh."New Unit Price" := SalesPriceWksh."New Unit Price" +
                                        RoundingMethod."Amount Added After";
                                    end;
                                  end;

                                  SalesPriceWksh."Price Includes VAT" := "Price Includes VAT";
                                  SalesPriceWksh."VAT Bus. Posting Gr. (Price)" := "VAT Bus. Posting Gr. (Price)";
                                  SalesPriceWksh."Allow Invoice Disc." := "Allow Invoice Disc.";
                                  SalesPriceWksh."Allow Line Disc." := "Allow Line Disc.";
                                  SalesPriceWksh.CalcCurrentPrice(PriceAlreadyExists);

                                  if PriceAlreadyExists or CreateNewPrices then begin
                                    SalesPriceWksh2 := SalesPriceWksh;
                                    if SalesPriceWksh2.FIND('=') then
                                      SalesPriceWksh.MODIFY(true)
                                    else
                                      SalesPriceWksh.INSERT(true);
                                  end;
                                END;

               ReqFilterFields="Sales Type","Sales Code","Item No.","Currency Code","Starting Date" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=BEGIN
               ToEndDateCtrlEnable := true;
               ToStartDateCtrlEnable := true;
               SalesCodeCtrlEnable := true;
             END;

      OnOpenPage=BEGIN
                   if UnitPriceFactor = 0 then begin
                     UnitPriceFactor := 1;
                     ToCustPriceGr.Code := '';
                     ToUnitOfMeasure.Code := '';
                     ToCurrency.Code := '';
                   end;

                   SalesCodeCtrlEnable := true;
                   if ToSalesType = ToSalesType::"All Customers" then
                     SalesCodeCtrlEnable := false;

                   SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                   ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                   ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 21  ;2   ;Group     ;
                  Name=Copy to Sales Price Worksheet...;
                  CaptionML=ENU=Copy to Sales Price Worksheet... }

      { 8   ;3   ;Field     ;
                  Name=SalesType;
                  CaptionML=ENU=Sales Type;
                  ToolTipML=ENU=Specifies the sales type that the sales price agreement will be copied to. To see the existing sales types, click the field.;
                  OptionCaptionML=ENU=Customer,Customer Price Group,All Customers,Campaign;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToSalesType;
                  OnValidate=BEGIN
                               SalesCodeCtrlEnable := ToSalesType <> ToSalesType::"All Customers";
                               ToStartDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;
                               ToEndDateCtrlEnable := ToSalesType <> ToSalesType::Campaign;

                               ToSalesCode := '';
                               ToStartDate := 0D;
                               ToEndDate := 0D;
                             END;
                              }

      { 1   ;3   ;Field     ;
                  Name=SalesCodeCtrl;
                  CaptionML=ENU=Sales Code;
                  ToolTipML=ENU=Specifies the code for the sales type that the sales prices will be copied to. To see the existing sales codes, click the field.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToSalesCode;
                  Enabled=SalesCodeCtrlEnable;
                  OnValidate=VAR
                               Customer@1001 : Record Customer;
                               CustomerPriceGroup@1003 : Record "Customer Price Group";
                               Campaign@1002 : Record Campaign;
                             BEGIN
                               if ToSalesType = ToSalesType::"All Customers" then
                                 exit;

                               case ToSalesType of
                                 ToSalesType::Customer:
                                   Customer.GET(ToSalesCode);
                                 ToSalesType::"Customer Price Group":
                                   CustomerPriceGroup.GET(ToSalesCode);
                                 ToSalesType::Campaign:
                                   begin
                                     Campaign.GET(ToSalesCode);
                                     ToStartDate := Campaign."Starting Date";
                                     ToEndDate := Campaign."Ending Date";
                                   end;
                               end;
                             END;

                  OnLookup=VAR
                             CustList@1003 : Page "Customer List";
                             CustPriceGrList@1002 : Page "Customer Price Groups";
                             CampaignList@1004 : Page "Campaign List";
                           BEGIN
                             case ToSalesType of
                               ToSalesType::Customer:
                                 begin
                                   CustList.LOOKUPMODE := true;
                                   CustList.SETRECORD(ToCust);
                                   if CustList.RUNMODAL = ACTION::LookupOK then begin
                                     CustList.GETRECORD(ToCust);
                                     ToSalesCode := ToCust."No.";
                                   end;
                                 end;
                               ToSalesType::"Customer Price Group":
                                 begin
                                   CustPriceGrList.LOOKUPMODE := true;
                                   CustPriceGrList.SETRECORD(ToCustPriceGr);
                                   if CustPriceGrList.RUNMODAL = ACTION::LookupOK then begin
                                     CustPriceGrList.GETRECORD(ToCustPriceGr);
                                     ToSalesCode := ToCustPriceGr.Code;
                                   end;
                                 end;
                               ToSalesType::Campaign:
                                 begin
                                   CampaignList.LOOKUPMODE := true;
                                   CampaignList.SETRECORD(ToCampaign);
                                   if CampaignList.RUNMODAL = ACTION::LookupOK then begin
                                     CampaignList.GETRECORD(ToCampaign);
                                     ToSalesCode := ToCampaign."No.";
                                     ToStartDate := ToCampaign."Starting Date";
                                     ToEndDate := ToCampaign."Ending Date";
                                   end;
                                 end;
                             end;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  Name=UnitOfMeasureCode;
                  CaptionML=ENU=Unit of Measure Code;
                  ToolTipML=ENU=Specifies the unit of measure that the item is shown in.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToUnitOfMeasure.Code;
                  TableRelation="Unit of Measure";
                  OnValidate=BEGIN
                               if ToUnitOfMeasure.Code <> '' then
                                 ToUnitOfMeasure.FIND;
                             END;
                              }

      { 2   ;3   ;Field     ;
                  Name=CurrencyCode;
                  CaptionML=ENU=Currency Code;
                  ToolTipML=ENU=Specifies the code for the currency that amounts are shown in.;
                  ApplicationArea=#Advanced;
                  SourceExpr=ToCurrency.Code;
                  TableRelation=Currency;
                  OnValidate=BEGIN
                               if ToCurrency.Code <> '' then
                                 ToCurrency.FIND;
                             END;
                              }

      { 3   ;3   ;Field     ;
                  Name=ToStartDateCtrl;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date when the price changes will take effect.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToStartDate;
                  Enabled=ToStartDateCtrlEnable }

      { 10  ;3   ;Field     ;
                  Name=ToEndDateCtrl;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the price changes are valid.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ToEndDate;
                  Enabled=ToEndDateCtrlEnable }

      { 4   ;2   ;Field     ;
                  Name=OnlyPricesAbove;
                  CaptionML=ENU=Only Prices Above;
                  ToolTipML=ENU=Specifies the code for the sales type that the sales prices will be copied to. To see the existing sales codes, click the field.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=2:5;
                  SourceExpr=PriceLowerLimit }

      { 5   ;2   ;Field     ;
                  Name=AdjustmentFactor;
                  CaptionML=ENU=Adjustment Factor;
                  ToolTipML=ENU=Specifies an adjustment factor to multiply the sales price that you want suggested. By entering an adjustment factor, you can increase or decrease the amounts that are suggested.;
                  ApplicationArea=#Basic,#Suite;
                  DecimalPlaces=0:5;
                  SourceExpr=UnitPriceFactor;
                  MinValue=0 }

      { 6   ;2   ;Field     ;
                  Name=RoundingMethodCtrl;
                  CaptionML=ENU=Rounding Method;
                  ToolTipML=ENU=Specifies a code for the rounding method that you want applied to prices.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

      { 7   ;2   ;Field     ;
                  Name=CreateNewPrices;
                  CaptionML=ENU=Create New Prices;
                  ToolTipML=ENU=Specifies if you want the batch job to create new price suggestions (for example, a new combination of currency, sales code and time). Don't insert a check mark if you only want to adjust existing sales prices.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CreateNewPrices }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Processing items  #1##########';
      SalesPriceWksh2@1037 : Record "Sales Price Worksheet";
      SalesPriceWksh@1005 : Record "Sales Price Worksheet";
      ToCust@1036 : Record Customer;
      ToCustPriceGr@1035 : Record "Customer Price Group";
      ToCampaign@1020 : Record Campaign;
      ToUnitOfMeasure@1006 : Record "Unit of Measure";
      ItemUnitOfMeasure@1007 : Record "Item Unit of Measure";
      ToCurrency@1008 : Record Currency;
      FromCurrency@1009 : Record Currency;
      Currency2@1010 : Record Currency;
      CurrExchRate@1011 : Record "Currency Exchange Rate";
      RoundingMethod@1012 : Record "Rounding Method";
      Item@1003 : Record Item;
      UOMMgt@1014 : Codeunit "Unit of Measure Management";
      Window@1015 : Dialog;
      PriceAlreadyExists@1016 : Boolean;
      CreateNewPrices@1017 : Boolean;
      UnitPriceFactor@1018 : Decimal;
      PriceLowerLimit@1019 : Decimal;
      ToSalesType@1033 : 'Customer,"Customer Price Group","All Customers",Campaign';
      ToSalesCode@1032 : Code[20];
      ToStartDate@1031 : Date;
      ToEndDate@1030 : Date;
      ReplaceSalesCode@1022 : Boolean;
      ReplaceUnitOfMeasure@1023 : Boolean;
      ReplaceCurrency@1024 : Boolean;
      ReplaceStartingDate@1025 : Boolean;
      ReplaceEndingDate@1002 : Boolean;
      Text002@1004 : TextConst 'ENU=Sales Code must be specified when copying from %1 to All Customers.';
      SalesCodeCtrlEnable@19004995 : Boolean INDATASET;
      ToStartDateCtrlEnable@19060085 : Boolean INDATASET;
      ToEndDateCtrlEnable@19023823 : Boolean INDATASET;

    PROCEDURE InitializeRequest@3(NewToSalesType@1005 : 'Customer,"Customer Price Group",Campaign,"All CUstomers"';NewToSalesCode@1004 : Code[20];NewToStartDate@1002 : Date;NewToEndDate@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10];NewCreateNewPrices@1006 : Boolean);
    BEGIN
      ToSalesType := NewToSalesType;
      ToSalesCode := NewToSalesCode;
      ToStartDate := NewToStartDate;
      ToEndDate := NewToEndDate;
      ToCurrency.Code := NewToCurrCode;
      ToUnitOfMeasure.Code := NewToUOMCode;
      CreateNewPrices := NewCreateNewPrices;
    END;

    PROCEDURE InitializeRequest2@1(NewToSalesType@1005 : 'Customer,"Customer Price Group",Campaign,"All CUstomers"';NewToSalesCode@1004 : Code[20];NewToStartDate@1002 : Date;NewToEndDate@1000 : Date;NewToCurrCode@1001 : Code[10];NewToUOMCode@1003 : Code[10];NewCreateNewPrices@1006 : Boolean;NewPriceLowerLimit@1007 : Decimal;NewUnitPriceFactor@1008 : Decimal;NewRoundingMethodCode@1009 : Code[10]);
    BEGIN
      InitializeRequest(NewToSalesType,NewToSalesCode,NewToStartDate,NewToEndDate,NewToCurrCode,NewToUOMCode,NewCreateNewPrices);
      PriceLowerLimit := NewPriceLowerLimit;
      UnitPriceFactor := NewUnitPriceFactor;
      RoundingMethod.Code := NewRoundingMethodCode;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

