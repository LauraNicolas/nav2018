OBJECT Codeunit 1218 Map Incoming Doc to Purch Doc
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Data Exch.";
    Permissions=TableData "Data Exch. Field"=d;
    OnRun=VAR
            ErrorMessage@1000 : Record "Error Message";
            IncomingDocument@1001 : Record "Incoming Document";
          BEGIN
            IncomingDocument.GET("Incoming Entry No.");

            ErrorMessage.SetContext(IncomingDocument);
            if ErrorMessage.HasErrors(false) then
              exit;

            if IncomingDocument."Document Type" = IncomingDocument."Document Type"::Journal then
              CODEUNIT.RUN(CODEUNIT::"Map Incoming Doc to Gen. Line",IncomingDocument)
            else
              ProcessIntermediateData(Rec);

            DeleteIntermediateData(Rec);
          END;

  }
  CODE
  {
    VAR
      TempProcessedHdrFldId@1001 : TEMPORARY Record Integer;
      TempProcessedLineFldId@1002 : TEMPORARY Record Integer;
      NotFoundErr@1003 : TextConst '@@@=%1 - field caption, %2 - table caption, %3 - table caption;ENU=Cannot find a value for field %1 of table %2 in table %3.';
      TotalsMismatchErr@1000 : TextConst '@@@=%1 total amount, %2 expected total amount;ENU=The total amount %1 on the created document is different than the total amount %2 in the incoming document.';
      TotalsMismatchWithHintErr@1004 : TextConst '@@@=%1 total amount, %2 expected total amount,%3 total charge amount,%4 prepaid amount;ENU=The total amount %1 on the created document is different than the expected value %2. The incoming document has a prepaid amount of %3. You must handle prepayments manually.';
      TempNameValueBufferPurchHdr@1005 : TEMPORARY Record "Name/Value Buffer";
      TotalsMismatchDocNotCreatedErr@1007 : TextConst '@@@=%1 total amount, %2 expected total amount;ENU=The total amount %1 on the created document is different than the total amount %2 in the incoming document. To retry the document creation manually, open the Incoming Document window and choose the action Create Document.';
      InvoiceChargeHasNoReasonErr@1006 : TextConst 'ENU=Invoice charge on the incoming document has no reason code.';
      VATMismatchErr@1008 : TextConst '@@@=" %1 is type value, %2 is the No.,  %3 is the line no , %4 field caption VAT%, %5 VAT pct on the line,%6 is the VAT pct in the incoming doc";ENU=%1 %2 on line number %3  has %4 %5, which is different than %4 %6 in the incoming document.';
      TempNameValueBufferPurchLine@1009 : TEMPORARY Record "Name/Value Buffer";
      UnableToApplyDiscountErr@1010 : TextConst '@@@=%1 - a decimal number;ENU=The invoice discount of %1 cannot be applied. Invoice discount must be allowed on at least one invoice line and invoice total must not be 0.';

    [Internal]
    PROCEDURE ProcessIntermediateData@1(DataExch@1001 : Record "Data Exch.");
    BEGIN
      ProcessHeaders(DataExch);
      ApplyInvoiceDiscounts(DataExch);
      ApplyInvoiceCharges(DataExch);
      VerifyTotals(DataExch);
    END;

    LOCAL PROCEDURE ProcessHeaders@2(DataExch@1007 : Record "Data Exch.");
    VAR
      PurchaseHeader@1003 : Record "Purchase Header";
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      RecRef@1004 : RecordRef;
      CurrRecordNo@1001 : Integer;
    BEGIN
      CurrRecordNo := -1;

      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Purchase Header");
        SETRANGE("Parent Record No.",0);
        SETCURRENTKEY("Record No.");

        if not FINDSET then
          exit;

        repeat
          if CurrRecordNo <> "Record No." then begin // new record
            if CurrRecordNo <> -1 then begin// if not start of loop then add lines - for current record
              RecRef.MODIFY(true);
              ProcessLines(PurchaseHeader,DataExch,CurrRecordNo);
              RecRef.CLOSE;
            end;

            CurrRecordNo := "Record No.";
            RecRef.OPEN(DATABASE::"Purchase Header");
            CreateNewPurchHdr(RecRef,DataExch,CurrRecordNo);
            RecRef.SETTABLE(PurchaseHeader);
          end;

          if not "Validate Only" then
            if not IsFieldProcessed(TempProcessedHdrFldId,"Field ID") then
              if Value <> '' then
                ProcessField(TempProcessedHdrFldId,RecRef,"Field ID",Value);
        until NEXT = 0;

        // process the last rec in DB
        if CurrRecordNo <> -1 then begin
          RecRef.MODIFY(true);
          ProcessLines(PurchaseHeader,DataExch,CurrRecordNo);
          RecRef.CLOSE;
        end;
      end;
    END;

    LOCAL PROCEDURE ProcessLines@3(PurchaseHeader@1003 : Record "Purchase Header";DataExch@1000 : Record "Data Exch.";ParentRecordNo@1001 : Integer);
    VAR
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      RecRef@1006 : RecordRef;
      CurrRecordNo@1005 : Integer;
    BEGIN
      CurrRecordNo := -1;

      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Parent Record No.",ParentRecordNo);
        SETCURRENTKEY("Record No.");

        if not FINDSET then
          exit;

        repeat
          if CurrRecordNo <> "Record No." then begin // new record
            if CurrRecordNo <> -1 then // if not start of loop then save current rec
              RecRef.MODIFY(true);

            CurrRecordNo := "Record No.";
            CreateNewPurchLine(PurchaseHeader,RecRef,DataExch."Entry No.",ParentRecordNo,CurrRecordNo);
          end;

          if not "Validate Only" then
            if not IsFieldProcessed(TempProcessedLineFldId,"Field ID") then
              if Value <> '' then
                ProcessField(TempProcessedLineFldId,RecRef,"Field ID",Value);
        until NEXT = 0;

        // Save the last rec
        if CurrRecordNo <> -1 then
          RecRef.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE ApplyInvoiceDiscounts@12(DataExch@1007 : Record "Data Exch.");
    VAR
      PurchaseHeader@1003 : Record "Purchase Header";
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      PurchLine@1000 : Record "Purchase Line";
      TempVATAmountLine@1001 : TEMPORARY Record "VAT Amount Line";
      ErrorMessage@1008 : Record "Error Message";
      PurchCalcDiscByType@1004 : Codeunit "Purch - Calc Disc. By Type";
      InvoiceDiscountAmount@1005 : Decimal;
      InvDiscBaseAmount@1006 : Decimal;
    BEGIN
      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Purchase Header");
        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Invoice Discount Value"));
        SETRANGE("Parent Record No.",0);
        SETFILTER(Value,'<>%1','');

        if not FINDSET then
          exit;

        repeat
          EVALUATE(InvoiceDiscountAmount,Value,9);

          if InvoiceDiscountAmount > 0 then begin
            GetRelatedPurchaseHeader(PurchaseHeader,"Record No.");
            PurchLine.SETRANGE("Document No.",PurchaseHeader."No.");
            PurchLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
            PurchLine.CalcVATAmountLines(0,PurchaseHeader,PurchLine,TempVATAmountLine);
            InvDiscBaseAmount := TempVATAmountLine.GetTotalInvDiscBaseAmount(false,PurchaseHeader."Currency Code");

            if PurchCalcDiscByType.InvoiceDiscIsAllowed(PurchaseHeader."Invoice Disc. Code") and (InvDiscBaseAmount <> 0) then
              PurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader)
            else
              LogMessage(DataExch."Entry No.",PurchaseHeader,PurchaseHeader.FIELDNO("No."),
                ErrorMessage."Message Type"::Warning,STRSUBSTNO(UnableToApplyDiscountErr,InvoiceDiscountAmount));
          end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE ApplyInvoiceCharges@19(DataExch@1007 : Record "Data Exch.");
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      ItemChargeAssignmentPurch@1003 : Record "Item Charge Assignment (Purch)";
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      InvoiceChargeAmount@1005 : Decimal;
      InvoiceChargeReason@1001 : Text[50];
    BEGIN
      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Item Charge Assignment (Purch)");
        SETRANGE("Field ID",ItemChargeAssignmentPurch.FIELDNO("Amount to Assign"));
        SETRANGE("Parent Record No.",0);
        SETFILTER(Value,'<>%1','');

        if not FINDSET then
          exit;

        repeat
          EVALUATE(InvoiceChargeAmount,Value,9);
          InvoiceChargeReason := GetInvoiceChargeReason(IntermediateDataImport);
          GetRelatedPurchaseHeader(PurchaseHeader,"Record No.");
          CreateInvoiceChargePurchaseLine(DataExch."Entry No.","Record No.",PurchaseHeader,InvoiceChargeReason,InvoiceChargeAmount);
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE VerifyTotals@14(DataExch@1007 : Record "Data Exch.");
    VAR
      PurchaseHeader@1003 : Record "Purchase Header";
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      TempTotalPurchaseLine@1008 : TEMPORARY Record "Purchase Line";
      CurrentPurchaseLine@1009 : Record "Purchase Line";
      ErrorMessage@1013 : Record "Error Message";
      IncomingDocument@1000 : Record "Incoming Document";
      DocumentTotals@1004 : Codeunit "Document Totals";
      AmountIncludingVATFromFile@1005 : Decimal;
      VATAmount@1006 : Decimal;
      PrepaidAmount@1011 : Decimal;
      ProcessingMsg@1012 : Text[250];
    BEGIN
      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Purchase Header");
        SETRANGE("Field ID",PurchaseHeader.FIELDNO("Amount Including VAT"));
        SETRANGE("Parent Record No.",0);
        SETFILTER(Value,'<>%1','');

        if not FINDSET then
          exit;

        repeat
          PrepaidAmount := GetPrepaidAmount(DataExch,"Record No.");
          EVALUATE(AmountIncludingVATFromFile,Value,9);
          GetRelatedPurchaseHeader(PurchaseHeader,"Record No.");

          VerifyLineVATs(DataExch,PurchaseHeader,"Record No.");

          // prepare variables needed for calculation of totals
          VATAmount := 0;
          TempTotalPurchaseLine.INIT;
          CurrentPurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
          CurrentPurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");

          // calculate totals and compare them with values from the incoming document
          IncomingDocument.GET(DataExch."Incoming Entry No.");
          if CurrentPurchaseLine.FINDFIRST then begin
            DocumentTotals.PurchaseCalculateTotalsWithInvoiceRounding(CurrentPurchaseLine,VATAmount,TempTotalPurchaseLine);

            if AmountIncludingVATFromFile <> TempTotalPurchaseLine."Amount Including VAT" then begin
              ProcessingMsg := STRSUBSTNO(TotalsMismatchErr,TempTotalPurchaseLine."Amount Including VAT",AmountIncludingVATFromFile);
              if PrepaidAmount <> 0 then
                ProcessingMsg :=
                  STRSUBSTNO(TotalsMismatchWithHintErr,TempTotalPurchaseLine."Amount Including VAT",
                    AmountIncludingVATFromFile,PrepaidAmount);
              if IncomingDocument."Created Doc. Error Msg. Type" = IncomingDocument."Created Doc. Error Msg. Type"::Error then begin
                ProcessingMsg :=
                  STRSUBSTNO(TotalsMismatchDocNotCreatedErr,TempTotalPurchaseLine."Amount Including VAT",AmountIncludingVATFromFile);
                LogMessage(DataExch."Entry No.",IncomingDocument,IncomingDocument.FIELDNO("Entry No."),
                  ErrorMessage."Message Type"::Error,ProcessingMsg);
              end else
                LogMessage(DataExch."Entry No.",PurchaseHeader,PurchaseHeader.FIELDNO("No."),
                  ErrorMessage."Message Type"::Warning,ProcessingMsg);
            end;
          end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE VerifyLineVATs@21(DataExch@1007 : Record "Data Exch.";PurchaseHeader@1010 : Record "Purchase Header";ParentRecordNo@1000 : Integer);
    VAR
      PurchaseLine@1001 : Record "Purchase Line";
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      ErrorMessage@1003 : Record "Error Message";
      VATPctFromFile@1005 : Decimal;
    BEGIN
      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Field ID",PurchaseLine.FIELDNO("VAT %"));
        SETRANGE("Parent Record No.",ParentRecordNo);
        SETFILTER(Value,'<>%1','');
        SETCURRENTKEY("Record No.");

        if not FINDSET then
          exit;

        repeat
          EVALUATE(VATPctFromFile,Value,9);
          GetRelatedPurchaseLine(PurchaseLine,ComposeKeyForCreatedPurchLine(ParentRecordNo,"Record No."));
          if VATPctFromFile <> PurchaseLine."VAT %" then
            LogMessage(DataExch."Entry No.",PurchaseHeader,PurchaseHeader.FIELDNO("No."),ErrorMessage."Message Type"::Warning,
              STRSUBSTNO(VATMismatchErr,PurchaseLine.Type,PurchaseLine."No.",PurchaseLine."Line No.",
                PurchaseLine.FIELDCAPTION("VAT %"),PurchaseLine."VAT %",VATPctFromFile));
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE SetFieldValue@7(VAR FieldRef@1000 : FieldRef;Value@1001 : Text[250]);
    VAR
      ConfigValidateManagement@1004 : Codeunit "Config. Validate Management";
      ErrorText@1002 : Text;
    BEGIN
      TruncateValueToFieldLength(FieldRef,Value);
      ErrorText := ConfigValidateManagement.EvaluateValueWithValidate(FieldRef,Value,true);
      if ErrorText <> '' then
        ERROR(ErrorText);
    END;

    LOCAL PROCEDURE TruncateValueToFieldLength@32(FieldRef@1001 : FieldRef;VAR Value@1000 : Text[250]);
    VAR
      Field@1002 : Record Field;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FieldRef.TYPE));
      if Field.Type in [Field.Type::Code,Field.Type::Text] then
        Value := COPYSTR(Value,1,FieldRef.LENGTH);
    END;

    LOCAL PROCEDURE CreateNewPurchHdr@11(VAR RecRef@1002 : RecordRef;DataExch@1006 : Record "Data Exch.";RecordNo@1003 : Integer);
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      IntermediateDataImport@1001 : Record "Intermediate Data Import";
      FldNo@1005 : Integer;
    BEGIN
      TempProcessedHdrFldId.RESET;
      TempProcessedHdrFldId.DELETEALL;

      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Purchase Header");
        SETRANGE("Record No.",RecordNo);

        // Set PK and insert
        FldNo := PurchaseHeader.FIELDNO("Document Type");
        ProcessField(TempProcessedHdrFldId,RecRef,FldNo,
          GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Document Type")));
        RecRef.INSERT(true);

        // Vendor No.
        FldNo := PurchaseHeader.FIELDNO("Buy-from Vendor No.");
        ProcessField(TempProcessedHdrFldId,RecRef,FldNo,
          GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Buy-from Vendor No.")));

        // Buy-from Vendor Name
        FldNo := PurchaseHeader.FIELDNO("Buy-from Vendor Name");
        if TryGetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Buy-from Vendor Name"),Value) then
          ProcessFieldNoValidate(TempProcessedHdrFldId,RecRef,FldNo,
            GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Buy-from Vendor Name")));

        RecRef.MODIFY(true);
        SetHeaderConfirmGeneratorFields(IntermediateDataImport,RecRef);

        // Pay-to Name
        FldNo := PurchaseHeader.FIELDNO("Pay-to Name");
        if TryGetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Pay-to Name"),Value) then
          if not IsFieldProcessed(TempProcessedHdrFldId,FldNo) then
            ProcessFieldNoValidate(TempProcessedHdrFldId,RecRef,FldNo,
              GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Pay-to Name")));

        // Currency
        FldNo := PurchaseHeader.FIELDNO("Currency Code");
        ProcessField(TempProcessedHdrFldId,RecRef,FldNo,
          GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Currency Code")));

        // Incoming Doc Entry No
        FldNo := PurchaseHeader.FIELDNO("Incoming Document Entry No.");
        ProcessField(TempProcessedHdrFldId,RecRef,FldNo,FORMAT(DataExch."Incoming Entry No."));

        RecRef.MODIFY(true);

        CorrelateCreatedDocumentWithRecordNo(RecRef,RecordNo);
      end;
    END;

    LOCAL PROCEDURE SetHeaderConfirmGeneratorFields@24(VAR IntermediateDataImport@1003 : Record "Intermediate Data Import";VAR RecRef@1004 : RecordRef);
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      FldNo@1001 : Integer;
      Value@1002 : Text[250];
      DecimalValue@1005 : Decimal;
    BEGIN
      RecRef.SETTABLE(PurchaseHeader);
      PurchaseHeader.SetHideValidationDialog(true);

      // Pay-to Vendor
      FldNo := PurchaseHeader.FIELDNO("Pay-to Vendor No.");
      if TryGetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Pay-to Vendor No."),Value) then begin
        PurchaseHeader.VALIDATE("Pay-to Vendor No.",COPYSTR(Value,1,MAXSTRLEN(PurchaseHeader."Pay-to Vendor No.")));
        SetFieldProcessed(TempProcessedHdrFldId,FldNo);
        SetFieldProcessed(TempProcessedHdrFldId,PurchaseHeader.FIELDNO("Pay-to Name"));
      end;

      // Buy-from Contact No.
      FldNo := PurchaseHeader.FIELDNO("Buy-from Contact No.");
      if TryGetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Buy-from Contact No."),Value) then begin
        PurchaseHeader.VALIDATE("Buy-from Contact No.",COPYSTR(Value,1,MAXSTRLEN(PurchaseHeader."Buy-from Contact No.")));
        SetFieldProcessed(TempProcessedHdrFldId,FldNo);
      end;

      // Pay-to Contact No.
      FldNo := PurchaseHeader.FIELDNO("Pay-to Contact No.");
      if TryGetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("Pay-to Contact No."),Value) then begin
        PurchaseHeader.VALIDATE("Pay-to Contact No.",COPYSTR(Value,1,MAXSTRLEN(PurchaseHeader."Pay-to Contact No.")));
        SetFieldProcessed(TempProcessedHdrFldId,FldNo);
      end;

      // VAT Base Discount %
      FldNo := PurchaseHeader.FIELDNO("VAT Base Discount %");
      if TryGetValue(IntermediateDataImport,RecRef,FldNo,PurchaseHeader.FIELDCAPTION("VAT Base Discount %"),Value) then begin
        EVALUATE(DecimalValue,Value,9);
        PurchaseHeader.VALIDATE("VAT Base Discount %",DecimalValue);
        SetFieldProcessed(TempProcessedHdrFldId,FldNo);
      end;

      PurchaseHeader.MODIFY(true);
      RecRef.GETTABLE(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateNewPurchLine@10(PurchaseHeader@1001 : Record "Purchase Header";VAR RecRef@1006 : RecordRef;DataExchNo@1004 : Integer;ParentRecNo@1005 : Integer;RecordNo@1002 : Integer);
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
    BEGIN
      TempProcessedLineFldId.RESET;
      TempProcessedLineFldId.DELETEALL;

      InsertEmptyPurchaseLine(PurchaseHeader,PurchaseLine);
      RecRef.GETTABLE(PurchaseLine);

      SetLineMandatoryFields(RecRef,DataExchNo,ParentRecNo,RecordNo);

      CorrelateCreatedPurchLineWithRecordNo(RecRef,ComposeKeyForCreatedPurchLine(ParentRecNo,RecordNo));
    END;

    LOCAL PROCEDURE CreateInvoiceChargePurchaseLine@27(EntryNo@1006 : Integer;RecordNo@1005 : Integer;VAR PurchaseHeader@1000 : Record "Purchase Header";InvoiceChargeReason@1001 : Text[50];InvoiceChargeAmount@1002 : Decimal);
    VAR
      PurchaseLine@1004 : Record "Purchase Line";
      PreMapIncomingPurchDoc@1003 : Codeunit "Pre-map Incoming Purch. Doc";
      GLAccountNo@1007 : Code[20];
    BEGIN
      GLAccountNo :=
        PreMapIncomingPurchDoc.FindAppropriateGLAccount(
          EntryNo,RecordNo,InvoiceChargeReason,InvoiceChargeAmount,PurchaseHeader."Buy-from Vendor No.");
      InsertEmptyPurchaseLine(PurchaseHeader,PurchaseLine);

      PurchaseLine.VALIDATE(Type,PurchaseLine.Type::"G/L Account");
      PurchaseLine.VALIDATE("No.",GLAccountNo);
      PurchaseLine.VALIDATE(Description,InvoiceChargeReason);
      PurchaseLine.VALIDATE("Description 2",InvoiceChargeReason);
      PurchaseLine.VALIDATE(Quantity,1);
      PurchaseLine.VALIDATE("Direct Unit Cost",InvoiceChargeAmount);
      PurchaseLine.MODIFY(true);
    END;

    LOCAL PROCEDURE SetLineMandatoryFields@17(VAR RecRef@1000 : RecordRef;DataExchNo@1004 : Integer;ParentRecNo@1002 : Integer;RecordNo@1003 : Integer);
    VAR
      IntermediateDataImport@1001 : Record "Intermediate Data Import";
      PurchaseLine@1007 : Record "Purchase Line";
      FldNo@1005 : Integer;
      Type@1006 : Option;
    BEGIN
      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExchNo);
        SETRANGE("Table ID",DATABASE::"Purchase Line");
        SETRANGE("Parent Record No.",ParentRecNo);
        SETRANGE("Record No.",RecordNo);

        // Type
        FldNo := PurchaseLine.FIELDNO(Type);
        EVALUATE(Type,GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseLine.FIELDCAPTION(Type)));
        ProcessField(TempProcessedLineFldId,RecRef,FldNo,FORMAT(Type));

        if Type <> PurchaseLine.Type::" " then begin
          // No.
          FldNo := PurchaseLine.FIELDNO("No.");
          ProcessField(TempProcessedLineFldId,RecRef,FldNo,
            GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseLine.FIELDCAPTION("No.")));

          // Quantity
          FldNo := PurchaseLine.FIELDNO(Quantity);
          ProcessField(TempProcessedLineFldId,RecRef,FldNo,
            GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseLine.FIELDCAPTION(Quantity)));

          // UOM
          FldNo := PurchaseLine.FIELDNO("Unit of Measure Code");
          if TryGetValue(IntermediateDataImport,RecRef,FldNo,PurchaseLine.FIELDCAPTION("Unit of Measure Code"),Value) then
            ProcessField(TempProcessedLineFldId,RecRef,FldNo,Value);

          // Direct Unit Cost
          FldNo := PurchaseLine.FIELDNO("Direct Unit Cost");
          ProcessField(TempProcessedLineFldId,RecRef,FldNo,
            GetValue(IntermediateDataImport,RecRef,FldNo,PurchaseLine.FIELDCAPTION("Direct Unit Cost")));
        end;

        RecRef.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE GetValue@16(VAR IntermediateDataImport@1000 : Record "Intermediate Data Import";RecRef@1003 : RecordRef;FieldID@1001 : Integer;FieldName@1002 : Text) : Text[250];
    VAR
      Value@1004 : Text[250];
    BEGIN
      TryGetValue(IntermediateDataImport,RecRef,FieldID,FieldName,Value);

      exit(Value);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryGetValue@20(VAR IntermediateDataImport@1000 : Record "Intermediate Data Import";RecRef@1003 : RecordRef;FieldID@1001 : Integer;FieldName@1002 : Text;VAR Value@1004 : Text[250]);
    BEGIN
      Value := '';
      IntermediateDataImport.SETRANGE("Field ID",FieldID);

      if not IntermediateDataImport.FINDFIRST then
        ERROR(NotFoundErr,FieldName,RecRef.CAPTION,IntermediateDataImport.TABLECAPTION);

      Value := IntermediateDataImport.Value;
    END;

    LOCAL PROCEDURE ProcessField@58(VAR TempInt@1003 : Record Integer;RecRef@1000 : RecordRef;FieldNo@1004 : Integer;Value@1002 : Text[250]);
    VAR
      FieldRef@1001 : FieldRef;
    BEGIN
      FieldRef := RecRef.FIELD(FieldNo);
      SetFieldValue(FieldRef,Value);
      SetFieldProcessed(TempInt,FieldNo);
    END;

    LOCAL PROCEDURE ProcessFieldNoValidate@15(VAR TempInt@1003 : Record Integer;RecRef@1000 : RecordRef;FieldNo@1004 : Integer;Value@1002 : Text[250]);
    VAR
      FieldRef@1001 : FieldRef;
    BEGIN
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.VALUE(Value);
      SetFieldProcessed(TempInt,FieldNo);
    END;

    LOCAL PROCEDURE SetFieldProcessed@5(VAR TempInt@1000 : Record Integer;FieldID@1001 : Integer);
    BEGIN
      CLEAR(TempInt);
      TempInt.Number := FieldID;
      TempInt.INSERT;
    END;

    LOCAL PROCEDURE IsFieldProcessed@28(VAR TempInt@1000 : Record Integer;FieldID@1001 : Integer) : Boolean;
    BEGIN
      TempInt.RESET;
      TempInt.SETRANGE(Number,FieldID);

      exit(TempInt.FINDFIRST);
    END;

    LOCAL PROCEDURE CorrelateCreatedDocumentWithRecordNo@6(RecRef@1000 : RecordRef;RecordNo@1001 : Integer);
    BEGIN
      TempNameValueBufferPurchHdr.INIT;
      TempNameValueBufferPurchHdr.ID := RecordNo;
      TempNameValueBufferPurchHdr.Name := FORMAT(RecordNo);
      TempNameValueBufferPurchHdr.Value := FORMAT(RecRef.RECORDID);
      TempNameValueBufferPurchHdr.INSERT;
    END;

    LOCAL PROCEDURE GetRelatedPurchaseHeader@4(VAR PurchaseHeader@1002 : Record "Purchase Header";RecordNo@1001 : Integer);
    VAR
      RecId@1003 : RecordID;
    BEGIN
      TempNameValueBufferPurchHdr.GET(RecordNo);
      EVALUATE(RecId,FORMAT(TempNameValueBufferPurchHdr.Value));
      PurchaseHeader.GET(RecId);
    END;

    LOCAL PROCEDURE CorrelateCreatedPurchLineWithRecordNo@25(RecRef@1000 : RecordRef;Key@1001 : Text[250]);
    VAR
      ID@1002 : Integer;
    BEGIN
      CLEAR(TempNameValueBufferPurchLine);

      ID := 1;
      if TempNameValueBufferPurchLine.FINDLAST then
        ID := TempNameValueBufferPurchLine.ID + 1;

      TempNameValueBufferPurchLine.INIT;
      TempNameValueBufferPurchLine.ID := ID;
      TempNameValueBufferPurchLine.Name := Key;
      TempNameValueBufferPurchLine.Value := FORMAT(RecRef.RECORDID);
      TempNameValueBufferPurchLine.INSERT;
    END;

    LOCAL PROCEDURE GetRelatedPurchaseLine@23(VAR PurchaseLine@1002 : Record "Purchase Line";Key@1001 : Text[250]);
    VAR
      RecId@1003 : RecordID;
    BEGIN
      TempNameValueBufferPurchLine.RESET;
      TempNameValueBufferPurchLine.SETRANGE(Name,Key);
      TempNameValueBufferPurchLine.FINDFIRST;
      EVALUATE(RecId,FORMAT(TempNameValueBufferPurchLine.Value));
      PurchaseLine.GET(RecId);
    END;

    LOCAL PROCEDURE ComposeKeyForCreatedPurchLine@31(ParentRecNo@1000 : Integer;RecNo@1001 : Integer) : Text[250];
    BEGIN
      exit(FORMAT(ParentRecNo) + '_' + FORMAT(RecNo));
    END;

    LOCAL PROCEDURE GetPrepaidAmount@18(DataExch@1000 : Record "Data Exch.";RecordNo@1001 : Integer) : Decimal;
    VAR
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
      PrepaymentInvLineBuffer@1003 : Record "Prepayment Inv. Line Buffer";
      Amount@1004 : Decimal;
    BEGIN
      Amount := 0;
      with IntermediateDataImport do begin
        SETRANGE("Data Exch. No.",DataExch."Entry No.");
        SETRANGE("Table ID",DATABASE::"Prepayment Inv. Line Buffer");
        SETRANGE("Field ID",PrepaymentInvLineBuffer.FIELDNO(Amount));
        SETRANGE("Record No.",RecordNo);

        if FINDFIRST then
          EVALUATE(Amount,Value,9);
      end;
      exit(Amount);
    END;

    LOCAL PROCEDURE GetInvoiceChargeReason@22(IntermediateDataImport@1000 : Record "Intermediate Data Import") : Text[50];
    VAR
      IntermediateDataImport2@1001 : Record "Intermediate Data Import";
      ItemCharge@1002 : Record "Item Charge";
      PlaceholderPurchaseLine@1003 : Record "Purchase Line";
      ErrorMessage@1004 : Record "Error Message";
    BEGIN
      with IntermediateDataImport2 do begin
        SETRANGE("Data Exch. No.",IntermediateDataImport."Data Exch. No.");
        SETRANGE("Table ID",DATABASE::"Item Charge");
        SETRANGE("Field ID",ItemCharge.FIELDNO(Description));
        SETRANGE("Record No.",IntermediateDataImport."Record No.");
        SETRANGE("Parent Record No.",0);
        SETFILTER(Value,'<>%1','');

        if FINDFIRST then
          exit(COPYSTR(Value,1,MAXSTRLEN(PlaceholderPurchaseLine.Description)));
        LogMessage(
          IntermediateDataImport."Data Exch. No.",
          PlaceholderPurchaseLine,
          PlaceholderPurchaseLine.FIELDNO(Description),
          ErrorMessage."Message Type"::Error,
          InvoiceChargeHasNoReasonErr);
      end;
    END;

    LOCAL PROCEDURE LogMessage@9(EntryNo@1000 : Integer;RelatedRec@1007 : Variant;FieldNo@1006 : Integer;MessageType@1002 : Option;ProcessingMessage@1001 : Text);
    VAR
      DataExch@1005 : Record "Data Exch.";
      ErrorMessage@1003 : Record "Error Message";
      IncomingDocument@1004 : Record "Incoming Document";
    BEGIN
      DataExch.GET(EntryNo);
      IncomingDocument.GET(DataExch."Incoming Entry No.");

      if IncomingDocument."Created Doc. Error Msg. Type" = IncomingDocument."Created Doc. Error Msg. Type"::Error then
        MessageType := ErrorMessage."Message Type"::Error;

      ErrorMessage.SetContext(IncomingDocument);
      ErrorMessage.LogMessage(RelatedRec,FieldNo,
        MessageType,COPYSTR(ProcessingMessage,1,MAXSTRLEN(ErrorMessage.Description)));
    END;

    LOCAL PROCEDURE DeleteIntermediateData@13(DataExch@1000 : Record "Data Exch.");
    VAR
      DataExchField@1001 : Record "Data Exch. Field";
      IntermediateDataImport@1002 : Record "Intermediate Data Import";
    BEGIN
      DataExchField.SETRANGE("Data Exch. No.",DataExch."Entry No.");
      DataExchField.DELETEALL;
      IntermediateDataImport.SETRANGE("Data Exch. No.",DataExch."Entry No.");
      IntermediateDataImport.DELETEALL;
    END;

    LOCAL PROCEDURE InsertEmptyPurchaseLine@8(PurchaseHeader@1000 : Record "Purchase Header";VAR PurchaseLine@1001 : Record "Purchase Line");
    VAR
      LineNo@1002 : Integer;
    BEGIN
      CLEAR(PurchaseLine);
      PurchaseLine.VALIDATE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.VALIDATE("Document No.",PurchaseHeader."No.");

      LineNo := 10000;
      PurchaseLine.SETRECFILTER;
      PurchaseLine.SETRANGE("Line No.");
      if PurchaseLine.FINDLAST then
        LineNo := LineNo + PurchaseLine."Line No.";
      PurchaseLine.VALIDATE("Line No.",LineNo);

      PurchaseLine.INSERT(true);
    END;

    BEGIN
    END.
  }
}

