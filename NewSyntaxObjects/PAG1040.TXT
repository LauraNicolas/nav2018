OBJECT Page 1040 Copy Job
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Job;
    PageType=StandardDialog;
    OnOpenPage=BEGIN
                 PlanningLineType := PlanningLineType::"Budget+Billable";
                 LedgerEntryType := LedgerEntryType::"Usage+Sale";
                 ValidateSource;
               END;

    OnQueryClosePage=BEGIN
                       if CloseAction in [ACTION::OK,ACTION::LookupOK] then begin
                         ValidateUserInput;
                         CopyJob.SetCopyOptions(CopyJobPrices,CopyQuantity,CopyDimensions,Source,PlanningLineType,LedgerEntryType);
                         CopyJob.SetJobTaskRange(FromJobTaskNo,ToJobTaskNo);
                         CopyJob.SetJobTaskDateRange(FromDate,ToDate);
                         CopyJob.CopyJob(SourceJob,TargetJobNo,TargetJobDescription,TargetBillToCustomerNo);
                         MESSAGE(Text001);
                       end
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 15  ;1   ;Group     ;
                Name=Copy from;
                CaptionML=ENU=Copy from }

    { 11  ;2   ;Field     ;
                Name=SourceJobNo;
                CaptionML=ENU=Job No.;
                ToolTipML=ENU=Specifies the job number.;
                ApplicationArea=#Jobs;
                SourceExpr=SourceJobNo;
                TableRelation=Job;
                OnValidate=BEGIN
                             if (SourceJobNo <> '') and not SourceJob.GET(SourceJobNo) then
                               ERROR(Text003,SourceJob.TABLECAPTION,SourceJobNo);
                             TargetJobDescription := SourceJob.Description;
                             TargetBillToCustomerNo := SourceJob."Bill-to Customer No.";

                             FromJobTaskNo := '';
                             ToJobTaskNo := '';
                           END;
                            }

    { 9   ;2   ;Field     ;
                Name=FromJobTaskNo;
                CaptionML=ENU=Job Task No. from;
                ToolTipML=ENU=Specifies the first job task number to be copied from. Only planning lines with a job task number equal to or higher than the number specified in this field will be included.;
                ApplicationArea=#Jobs;
                SourceExpr=FromJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record "Job Task";
                           BEGIN
                             if (FromJobTaskNo <> '') and not JobTask.GET(SourceJob."No.",FromJobTaskNo) then
                               ERROR(Text003,JobTask.TABLECAPTION,FromJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record "Job Task";
                         BEGIN
                           if SourceJob."No." <> '' then begin
                             JobTask.SETRANGE("Job No.",SourceJob."No.");
                             if PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK then
                               FromJobTaskNo := JobTask."Job Task No.";
                           end;
                         END;
                          }

    { 18  ;2   ;Field     ;
                Name=ToJobTaskNo;
                CaptionML=ENU=Job Task No. to;
                ToolTipML=ENU=Specifies the last job task number to be copied from. Only planning lines with a job task number equal to or lower than the number specified in this field will be included.;
                ApplicationArea=#Jobs;
                SourceExpr=ToJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record "Job Task";
                           BEGIN
                             if (ToJobTaskNo <> '') and not JobTask.GET(SourceJobNo,ToJobTaskNo) then
                               ERROR(Text003,JobTask.TABLECAPTION,ToJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record "Job Task";
                         BEGIN
                           if SourceJobNo <> '' then begin
                             JobTask.SETRANGE("Job No.",SourceJobNo);
                             if PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK then
                               ToJobTaskNo := JobTask."Job Task No.";
                           end;
                         END;
                          }

    { 13  ;2   ;Field     ;
                Name=From Source;
                CaptionML=ENU=Source;
                ToolTipML=ENU=Specifies the basis on which you want the planning lines to be copied. If, for example, you want the planning lines to reflect actual usage and invoicing of items, resources, and general ledger expenses on the job you copy from, then select Job Ledger Entries in this field.;
                OptionCaptionML=ENU=Job Planning Lines,Job Ledger Entries,None;
                ApplicationArea=#Jobs;
                SourceExpr=Source;
                OnValidate=BEGIN
                             ValidateSource;
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=Planning Line Type;
                CaptionML=ENU=Incl. Planning Line Type;
                ToolTipML=ENU=Specifies how copy planning lines. Budget+Billable: All planning lines are copied. Budget: Only lines of type Budget or type Both Budget and Billable are copied. Billable: Only lines of type Billable or type Both Budget and Billable are copied.;
                OptionCaptionML=ENU=Budget+Billable,Budget,Billable;
                ApplicationArea=#Jobs;
                SourceExpr=PlanningLineType;
                Enabled=PlanningLineTypeEnable }

    { 25  ;2   ;Field     ;
                Name=Ledger Entry Line Type;
                CaptionML=ENU=Incl. Ledger Entry Line Type;
                ToolTipML=ENU=Specifies how to copy job ledger entries. Usage+Sale: All job ledger entries are copied. Entries of type Usage are copied to new planning lines of type Budget. Entries of type Sale are copied to new planning lines of type Billable. Usage: All job ledger entries of type Usage are copied to new planning lines of type Budget. Sale: All job ledger entries of type Sale are copied to new planning lines of type Billable.;
                OptionCaptionML=ENU=Usage+Sale,Usage,Sale;
                ApplicationArea=#Jobs;
                SourceExpr=LedgerEntryType;
                Enabled=LedgerEntryLineTypeEnable }

    { 7   ;2   ;Field     ;
                Name=FromDate;
                CaptionML=ENU=Starting Date;
                ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                ApplicationArea=#Jobs;
                SourceExpr=FromDate }

    { 20  ;2   ;Field     ;
                Name=ToDate;
                CaptionML=ENU=Ending Date;
                ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                ApplicationArea=#Jobs;
                SourceExpr=ToDate }

    { 5   ;1   ;Group     ;
                Name=Copy to;
                CaptionML=ENU=Copy to }

    { 3   ;2   ;Field     ;
                Name=TargetJobNo;
                CaptionML=ENU=Job No.;
                ToolTipML=ENU=Specifies the job number.;
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobNo }

    { 31  ;2   ;Field     ;
                Name=TargetJobDescription;
                CaptionML=ENU=Job Description;
                ToolTipML=ENU=Specifies a description of the job.;
                ApplicationArea=#Jobs;
                SourceExpr=TargetJobDescription }

    { 33  ;2   ;Field     ;
                Name=TargetBillToCustomerNo;
                CaptionML=ENU=Bill-To Customer No.;
                ToolTipML=ENU=Specifies the number of an alternate customer that the job is billed to instead of the main customer.;
                ApplicationArea=#Jobs;
                SourceExpr=TargetBillToCustomerNo;
                TableRelation=Customer }

    { 6   ;1   ;Group     ;
                Name=Apply;
                CaptionML=ENU=Apply }

    { 16  ;2   ;Field     ;
                Name=CopyJobPrices;
                CaptionML=ENU=Copy Job Prices;
                ToolTipML=ENU=Specifies that item prices, resource prices, and G/L prices will be copied from the job that you specified on the Copy From FastTab.;
                ApplicationArea=#Jobs;
                SourceExpr=CopyJobPrices }

    { 26  ;2   ;Field     ;
                Name=CopyQuantity;
                CaptionML=ENU=Copy Quantity;
                ToolTipML=ENU=Specifies that the quantities will be copied to the new job.;
                ApplicationArea=#Jobs;
                SourceExpr=CopyQuantity }

    { 28  ;2   ;Field     ;
                Name=CopyDimensions;
                CaptionML=ENU=Copy Dimensions;
                ToolTipML=ENU=Specifies that the dimensions will be copied to the new job.;
                ApplicationArea=#Jobs;
                SourceExpr=CopyDimensions }

  }
  CODE
  {
    VAR
      SourceJob@1010 : Record Job;
      CopyJob@1013 : Codeunit "Copy Job";
      SourceJobNo@1017 : Code[20];
      FromJobTaskNo@1009 : Code[20];
      ToJobTaskNo@1004 : Code[20];
      TargetJobNo@1008 : Code[20];
      TargetJobDescription@1007 : Text[50];
      TargetBillToCustomerNo@1014 : Code[20];
      FromDate@1006 : Date;
      ToDate@1005 : Date;
      Source@1003 : '"Job Planning Lines","Job Ledger Entries",None';
      PlanningLineType@1002 : '"Budget+Billable",Budget,Billable';
      LedgerEntryType@1001 : '"Usage+Sale",Usage,Sale';
      Text001@1016 : TextConst 'ENU=The job was successfully copied.';
      Text002@1019 : TextConst 'ENU=Job No. %1 will be assigned to the new Job. Do you want to continue?';
      Text003@1018 : TextConst '@@@=Job Task 1000 does not exist.;ENU=%1 %2 does not exist.';
      CopyJobPrices@1012 : Boolean;
      CopyQuantity@1011 : Boolean;
      CopyDimensions@1000 : Boolean;
      PlanningLineTypeEnable@1020 : Boolean INDATASET;
      LedgerEntryLineTypeEnable@1021 : Boolean INDATASET;
      Text004@1015 : TextConst 'ENU=Provide a valid source %1.';

    LOCAL PROCEDURE ValidateUserInput@1();
    VAR
      JobsSetup@1001 : Record "Jobs Setup";
      NoSeriesManagement@1000 : Codeunit NoSeriesManagement;
    BEGIN
      if (SourceJobNo = '') or not SourceJob.GET(SourceJob."No.") then
        ERROR(Text004,SourceJob.TABLECAPTION);

      JobsSetup.GET;
      JobsSetup.TESTFIELD("Job Nos.");
      if TargetJobNo = '' then begin
        TargetJobNo := NoSeriesManagement.GetNextNo(JobsSetup."Job Nos.",0D,true);
        if not CONFIRM(Text002,true,TargetJobNo) then begin
          TargetJobNo := '';
          ERROR('');
        end;
      end else
        NoSeriesManagement.TestManual(JobsSetup."Job Nos.");
    END;

    LOCAL PROCEDURE ValidateSource@2();
    BEGIN
      case true of
        Source = Source::"Job Planning Lines":
          begin
            PlanningLineTypeEnable := true;
            LedgerEntryLineTypeEnable := false;
          end;
        Source = Source::"Job Ledger Entries":
          begin
            PlanningLineTypeEnable := false;
            LedgerEntryLineTypeEnable := true;
          end;
        Source = Source::None:
          begin
            PlanningLineTypeEnable := false;
            LedgerEntryLineTypeEnable := false;
          end;
      end;
    END;

    [External]
    PROCEDURE SetFromJob@3(SourceJob2@1000 : Record Job);
    BEGIN
      SourceJob := SourceJob2;
      SourceJobNo := SourceJob."No.";
      TargetJobDescription := SourceJob.Description;
      TargetBillToCustomerNo := SourceJob."Bill-to Customer No.";
    END;

    BEGIN
    END.
  }
}

