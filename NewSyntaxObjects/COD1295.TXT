OBJECT Codeunit 1295 Get Bank Stmt. Line Candidates
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Payment Application Proposal";
    OnRun=VAR
            BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";
          BEGIN
            BankAccReconLine.GET("Statement Type","Bank Account No.","Statement No.","Statement Line No.");

            TransferExistingAppliedPmtEntries(Rec,BankAccReconLine);

            TransferCandidatestoAppliedPmtEntries(Rec,BankAccReconLine);
          END;

  }
  CODE
  {

    LOCAL PROCEDURE CreatePaymentApplicationProposalFromAppliedPmtEntry@3(VAR AppliedPmtEntry@1000 : Record "Applied Payment Entry";VAR PaymentApplicationProposal@1001 : Record "Payment Application Proposal");
    BEGIN
      if AppliedPmtEntry.FINDSET then
        repeat
          PaymentApplicationProposal.CreateFromAppliedPaymentEntry(AppliedPmtEntry);
        until AppliedPmtEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetCandidateRanking@1(BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";VAR TempBankStmtMatchingBuffer@1000 : TEMPORARY Record "Bank Statement Matching Buffer");
    VAR
      MatchBankPayments@1002 : Codeunit "Match Bank Payments";
    BEGIN
      BankAccReconLine.SETRECFILTER;
      MatchBankPayments.SetApplyEntries(false);
      MatchBankPayments.RUN(BankAccReconLine);
      MatchBankPayments.GetBankStatementMatchingBuffer(TempBankStmtMatchingBuffer);
    END;

    LOCAL PROCEDURE TransferExistingAppliedPmtEntries@5(VAR PaymentApplicationProposal@1000 : Record "Payment Application Proposal";BankAccReconLine@1002 : Record "Bank Acc. Reconciliation Line");
    VAR
      ExistingAppliedPmtEntry@1001 : Record "Applied Payment Entry";
    BEGIN
      ExistingAppliedPmtEntry.FilterAppliedPmtEntry(BankAccReconLine);
      CreatePaymentApplicationProposalFromAppliedPmtEntry(ExistingAppliedPmtEntry,PaymentApplicationProposal);
    END;

    LOCAL PROCEDURE TransferCandidatestoAppliedPmtEntries@6(VAR PaymentApplicationProposal@1000 : Record "Payment Application Proposal";BankAccReconLine@1003 : Record "Bank Acc. Reconciliation Line");
    VAR
      BankPmtApplRule@1002 : Record "Bank Pmt. Appl. Rule";
      TempBankStmtMatchingBuffer@1001 : TEMPORARY Record "Bank Statement Matching Buffer";
      BankAccount@1004 : Record "Bank Account";
      Handled@1213 : Boolean;
    BEGIN
      OnBeforeTransferCandidatestoAppliedPmtEntries(BankAccReconLine,TempBankStmtMatchingBuffer,Handled);
      if not Handled then
        GetCandidateRanking(BankAccReconLine,TempBankStmtMatchingBuffer);
      BankAccount.GET(BankAccReconLine."Bank Account No.");

      PaymentApplicationProposal.RESET;
      TempBankStmtMatchingBuffer.RESET;
      TempBankStmtMatchingBuffer.SETRANGE("One to Many Match",false);
      if TempBankStmtMatchingBuffer.FINDSET then
        repeat
          PaymentApplicationProposal.CreateFromBankStmtMacthingBuffer(TempBankStmtMatchingBuffer,BankAccReconLine,BankAccount);
          if not PaymentApplicationProposal.INSERT(true) then begin
            PaymentApplicationProposal.FIND;
            PaymentApplicationProposal."Match Confidence" := BankPmtApplRule.GetMatchConfidence(PaymentApplicationProposal.Quality);
            PaymentApplicationProposal.MODIFY(true);
          end;
        until TempBankStmtMatchingBuffer.NEXT = 0;
    END;

    [Integration]
    PROCEDURE OnBeforeTransferCandidatestoAppliedPmtEntries@1213(BankAccReconLine@1214 : Record "Bank Acc. Reconciliation Line";VAR TempBankStmtMatchingBuffer@1213 : TEMPORARY Record "Bank Statement Matching Buffer";VAR IsInvoked@1215 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

