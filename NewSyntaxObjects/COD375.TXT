OBJECT Codeunit 375 Bank Acc. Entry Set Recon.-No.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Bank Account Ledger Entry"=rm,
                TableData "Check Ledger Entry"=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CheckLedgEntry@1000 : Record "Check Ledger Entry";

    [External]
    PROCEDURE ApplyEntries@1(VAR BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";VAR BankAccLedgEntry@1001 : Record "Bank Account Ledger Entry";Relation@1002 : '"One-to-One","One-to-Many"') : Boolean;
    BEGIN
      BankAccLedgEntry.LOCKTABLE;
      CheckLedgEntry.LOCKTABLE;
      BankAccReconLine.LOCKTABLE;
      BankAccReconLine.FIND;

      if BankAccLedgEntry.IsApplied then
        exit(false);

      if (Relation = Relation::"One-to-One") and (BankAccReconLine."Applied Entries" > 0) then
        exit(false);

      BankAccReconLine.TESTFIELD(Type,BankAccReconLine.Type::"Bank Account Ledger Entry");
      BankAccReconLine."Ready for Application" := true;
      SetReconNo(BankAccLedgEntry,BankAccReconLine);
      BankAccReconLine."Applied Amount" += BankAccLedgEntry."Remaining Amount";
      BankAccReconLine."Applied Entries" := BankAccReconLine."Applied Entries" + 1;
      BankAccReconLine.VALIDATE("Statement Amount");
      BankAccReconLine.MODIFY;
      exit(true);
    END;

    [External]
    PROCEDURE RemoveApplication@4(VAR BankAccLedgEntry@1001 : Record "Bank Account Ledger Entry");
    VAR
      BankAccReconLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      BankAccLedgEntry.LOCKTABLE;
      CheckLedgEntry.LOCKTABLE;
      BankAccReconLine.LOCKTABLE;

      if not BankAccReconLine.GET(
           BankAccReconLine."Statement Type"::"Bank Reconciliation",
           BankAccLedgEntry."Bank Account No.",
           BankAccLedgEntry."Statement No.",BankAccLedgEntry."Statement Line No.")
      then
        exit;

      BankAccReconLine.TESTFIELD("Statement Type",BankAccReconLine."Statement Type"::"Bank Reconciliation");
      BankAccReconLine.TESTFIELD(Type,BankAccReconLine.Type::"Bank Account Ledger Entry");
      RemoveReconNo(BankAccLedgEntry,BankAccReconLine,true);

      BankAccReconLine."Applied Amount" -= BankAccLedgEntry."Remaining Amount";
      BankAccReconLine."Applied Entries" := BankAccReconLine."Applied Entries" - 1;
      BankAccReconLine.VALIDATE("Statement Amount");
      BankAccReconLine.MODIFY;
    END;

    [External]
    PROCEDURE SetReconNo@2(VAR BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";VAR BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line");
    BEGIN
      BankAccLedgEntry.TESTFIELD(Open,true);
      BankAccLedgEntry.TESTFIELD("Statement Status",BankAccLedgEntry."Statement Status"::Open);
      BankAccLedgEntry.TESTFIELD("Statement No.",'');
      BankAccLedgEntry.TESTFIELD("Statement Line No.",0);
      BankAccLedgEntry.TESTFIELD("Bank Account No.",BankAccReconLine."Bank Account No.");
      BankAccLedgEntry."Statement Status" :=
        BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied";
      BankAccLedgEntry."Statement No." := BankAccReconLine."Statement No.";
      BankAccLedgEntry."Statement Line No." := BankAccReconLine."Statement Line No.";
      BankAccLedgEntry.MODIFY;

      CheckLedgEntry.RESET;
      CheckLedgEntry.SETCURRENTKEY("Bank Account Ledger Entry No.");
      CheckLedgEntry.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
      CheckLedgEntry.SETRANGE(Open,true);
      if CheckLedgEntry.FIND('-') then
        repeat
          CheckLedgEntry.TESTFIELD("Statement Status",CheckLedgEntry."Statement Status"::Open);
          CheckLedgEntry.TESTFIELD("Statement No.",'');
          CheckLedgEntry.TESTFIELD("Statement Line No.",0);
          CheckLedgEntry."Statement Status" :=
            CheckLedgEntry."Statement Status"::"Bank Acc. Entry Applied";
          CheckLedgEntry."Statement No." := '';
          CheckLedgEntry."Statement Line No." := 0;
          CheckLedgEntry.MODIFY;
        until CheckLedgEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE RemoveReconNo@3(VAR BankAccLedgEntry@1000 : Record "Bank Account Ledger Entry";VAR BankAccReconLine@1001 : Record "Bank Acc. Reconciliation Line";Test@1002 : Boolean);
    BEGIN
      BankAccLedgEntry.TESTFIELD(Open,true);
      if Test then begin
        BankAccLedgEntry.TESTFIELD(
          "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
        BankAccLedgEntry.TESTFIELD("Statement No.",BankAccReconLine."Statement No.");
        BankAccLedgEntry.TESTFIELD("Statement Line No.",BankAccReconLine."Statement Line No.");
      end;
      BankAccLedgEntry.TESTFIELD("Bank Account No.",BankAccReconLine."Bank Account No.");
      BankAccLedgEntry."Statement Status" := BankAccLedgEntry."Statement Status"::Open;
      BankAccLedgEntry."Statement No." := '';
      BankAccLedgEntry."Statement Line No." := 0;
      BankAccLedgEntry.MODIFY;

      CheckLedgEntry.RESET;
      CheckLedgEntry.SETCURRENTKEY("Bank Account Ledger Entry No.");
      CheckLedgEntry.SETRANGE("Bank Account Ledger Entry No.",BankAccLedgEntry."Entry No.");
      CheckLedgEntry.SETRANGE(Open,true);
      if CheckLedgEntry.FIND('-') then
        repeat
          if Test then begin
            CheckLedgEntry.TESTFIELD(
              "Statement Status",CheckLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
            CheckLedgEntry.TESTFIELD("Statement No.",'');
            CheckLedgEntry.TESTFIELD("Statement Line No.",0);
          end;
          CheckLedgEntry."Statement Status" := CheckLedgEntry."Statement Status"::Open;
          CheckLedgEntry."Statement No." := '';
          CheckLedgEntry."Statement Line No." := 0;
          CheckLedgEntry.MODIFY;
        until CheckLedgEntry.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

