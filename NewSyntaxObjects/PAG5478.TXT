OBJECT Page 5478 Journal Lines Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=journalLines];
    SourceTable="Gen. Journal Line";
    DelayedInsert=true;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 GraphMgtJournalLines.SetJournalLineFilters(Rec);
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  CheckFilters;

                  ClearCalculatedFields;

                  "Document Type" := "Document Type"::" ";
                  "Account Type" := "Account Type"::"G/L Account";
                END;

    OnInsertRecord=VAR
                     TempGenJournalLine@1002 : TEMPORARY Record "Gen. Journal Line";
                   BEGIN
                     TempGenJournalLine.RESET;
                     TempGenJournalLine.COPY(Rec);

                     CLEAR(Rec);
                     GraphMgtJournalLines.SetJournalLineTemplateAndBatch(
                       Rec,LibraryAPIGeneralJournal.GetBatchNameFromId(TempGenJournalLine.GETFILTER("Journal Batch Id")));
                     LibraryAPIGeneralJournal.InitializeLine(
                       Rec,TempGenJournalLine."Line No.",TempGenJournalLine."Document No.",TempGenJournalLine."External Document No.");

                     GraphMgtJournalLines.SetJournalLineValues(Rec,TempGenJournalLine);

                     UpdateDimensions(false);
                     SetCalculatedFields;
                   END;

    OnModifyRecord=VAR
                     GenJournalLine@1000 : Record "Gen. Journal Line";
                   BEGIN
                     GenJournalLine.SETRANGE(Id,Id);
                     GenJournalLine.FINDFIRST;

                     if "Line No." = GenJournalLine."Line No." then
                       MODIFY(true)
                     else begin
                       GenJournalLine.TRANSFERFIELDS(Rec,false);
                       GenJournalLine.RENAME("Journal Template Name","Journal Batch Name","Line No.");
                       TRANSFERFIELDS(GenJournalLine,true);
                     end;

                     UpdateDimensions(true);
                     SetCalculatedFields;

                     exit(false);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           if not FiltersChecked then begin
                             CheckFilters;
                             FiltersChecked := true;
                           end;
                         END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=<Control1>;
                CaptionML=ENU=<Control1>;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group2;
                GroupType=Repeater }

    { 8   ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE;
                ImplicitType=GUID }

    { 14  ;2   ;Field     ;
                Name=journalDisplayName;
                CaptionML=[@@@={Locked};
                           ENU=JournalDisplayName];
                ToolTipML=ENU=Specifies the Journal Batch Name of the Journal Line;
                ApplicationArea=#All;
                SourceExpr=GlobalJournalDisplayNameTxt;
                OnValidate=BEGIN
                             ERROR(CannotEditBatchNameErr);
                           END;

                ImplicitType=Code10 }

    { 11  ;2   ;Field     ;
                Name=lineNumber;
                CaptionML=[@@@={Locked};
                           ENU=LineNumber];
                ApplicationArea=#All;
                SourceExpr="Line No.";
                ImplicitType=Integer }

    { 10  ;2   ;Field     ;
                Name=accountId;
                CaptionML=[@@@={Locked};
                           ENU=AccountId];
                ApplicationArea=#All;
                SourceExpr="Account Id";
                OnValidate=BEGIN
                             if "Account Id" = BlankGUID then begin
                               "Account No." := '';
                               exit;
                             end;

                             GLAccount.SETRANGE(Id,"Account Id");
                             if not GLAccount.FINDFIRST then
                               ERROR(AccountIdDoesNotMatchAnAccountErr);

                             "Account No." := GLAccount."No.";
                           END;

                ImplicitType=GUID }

    { 3   ;2   ;Field     ;
                Name=accountNumber;
                CaptionML=[@@@={Locked};
                           ENU=AccountNumber];
                ApplicationArea=#All;
                SourceExpr="Account No.";
                OnValidate=BEGIN
                             if GLAccount."No." <> '' then begin
                               if GLAccount."No." <> "Account No." then
                                 ERROR(AccountValuesDontMatchErr);
                               exit;
                             end;

                             if "Account No." = '' then begin
                               "Account Id" := BlankGUID;
                               exit;
                             end;

                             if not GLAccount.GET("Account No.") then
                               ERROR(AccountNumberDoesNotMatchAnAccountErr);

                             "Account Id" := GLAccount.Id;
                           END;

                ImplicitType=Code20 }

    { 12  ;2   ;Field     ;
                Name=postingDate;
                CaptionML=[@@@={Locked};
                           ENU=PostingDate];
                ApplicationArea=#All;
                SourceExpr="Posting Date";
                ImplicitType=Date }

    { 6   ;2   ;Field     ;
                Name=documentNumber;
                CaptionML=[@@@={Locked};
                           ENU=DocumentNumber];
                ApplicationArea=#All;
                SourceExpr="Document No.";
                ImplicitType=Code20 }

    { 4   ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=ExternalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                ImplicitType=Code35 }

    { 5   ;2   ;Field     ;
                Name=amount;
                CaptionML=[@@@={Locked};
                           ENU=Amount];
                ApplicationArea=#All;
                SourceExpr=Amount;
                ImplicitType=Decimal }

    { 7   ;2   ;Field     ;
                Name=description;
                CaptionML=[@@@={Locked};
                           ENU=Description];
                ApplicationArea=#All;
                SourceExpr=Description;
                ImplicitType=Text50 }

    { 13  ;2   ;Field     ;
                Name=comment;
                CaptionML=[@@@={Locked};
                           ENU=Comment];
                ApplicationArea=#All;
                SourceExpr=Comment;
                ImplicitType=Text250 }

    { 16  ;2   ;Field     ;
                Name=dimensions;
                CaptionML=[@@@={Locked};
                           ENU=Dimensions];
                ToolTipML=ENU=Specifies Journal Line Dimensions.;
                ApplicationArea=#All;
                SourceExpr=DimensionsJSON;
                OnValidate=BEGIN
                             DimensionsSet := PreviousDimensionsJSON <> DimensionsJSON;
                           END;

                ODataEDMType=Collection(DIMENSION);
                ImplicitType=Text }

    { 9   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified DateTime";
                Editable=FALSE;
                ImplicitType=DateTime }

  }
  CODE
  {
    VAR
      GLAccount@1002 : Record "G/L Account";
      GraphMgtJournalLines@1000 : Codeunit "Graph Mgt - Journal Lines";
      LibraryAPIGeneralJournal@1001 : Codeunit "Library API - General Journal";
      FiltersNotSpecifiedErr@1007 : TextConst '@@@={Locked};ENU=You must specify a journal batch ID or a journal ID to get a journal line.';
      CannotEditBatchNameErr@1009 : TextConst '@@@={Locked};ENU=The Journal Batch Display Name isn''t editable.';
      AccountValuesDontMatchErr@1005 : TextConst '@@@={Locked};ENU=The account values do not match to a specific Account.';
      AccountIdDoesNotMatchAnAccountErr@1004 : TextConst '@@@={Locked};ENU=The "accountId" does not match to an Account.';
      AccountNumberDoesNotMatchAnAccountErr@1003 : TextConst '@@@={Locked};ENU=The "accountNumber" does not match to an Account.';
      DimensionsJSON@1011 : Text;
      PreviousDimensionsJSON@1013 : Text;
      GlobalJournalDisplayNameTxt@1006 : Code[10];
      FiltersChecked@1008 : Boolean;
      DimensionsSet@1012 : Boolean;
      BlankGUID@1010 : GUID;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtComplexTypes@1000 : Codeunit "Graph Mgt - Complex Types";
    BEGIN
      GlobalJournalDisplayNameTxt := "Journal Batch Name";
      DimensionsJSON := GraphMgtComplexTypes.GetDimensionsJSON("Dimension Set ID");
      PreviousDimensionsJSON := DimensionsJSON;
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(GlobalJournalDisplayNameTxt);
      CLEAR(DimensionsJSON);
      CLEAR(PreviousDimensionsJSON);
      CLEAR(DimensionsSet);
    END;

    LOCAL PROCEDURE CheckFilters@3();
    BEGIN
      if (GETFILTER("Journal Batch Id") = '') and
         (GETFILTER(Id) = '')
      then
        ERROR(FiltersNotSpecifiedErr);
    END;

    LOCAL PROCEDURE UpdateDimensions@14(LineExists@1001 : Boolean);
    VAR
      GraphMgtComplexTypes@1000 : Codeunit "Graph Mgt - Complex Types";
      DimensionManagement@1003 : Codeunit DimensionManagement;
      NewDimensionSetId@1002 : Integer;
    BEGIN
      if not DimensionsSet then
        exit;

      GraphMgtComplexTypes.GetDimensionSetFromJSON(DimensionsJSON,"Dimension Set ID",NewDimensionSetId);
      if "Dimension Set ID" <> NewDimensionSetId then begin
        "Dimension Set ID" := NewDimensionSetId;
        DimensionManagement.UpdateGlobalDimFromDimSetID(NewDimensionSetId,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        if LineExists then
          MODIFY;
      end;
    END;

    BEGIN
    END.
  }
}

