OBJECT Page 1661 Payroll Import Transactions
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Import Payroll Transactions;
    InsertAllowed=false;
    SourceTable="Import G/L Transaction";
    PageType=NavigatePage;
    SourceTableTemporary=true;
    OnInit=VAR
             CompanyInformation@1000 : Record "Company Information";
           BEGIN
             CompanyInformation.GET;
             IsDemoCompany := CompanyInformation."Demo Company";
             LoadTopBanners;
           END;

    OnOpenPage=BEGIN
                 Step := Step::Start;
                 EnableControls;
                 SETCURRENTKEY("Entry No.");
               END;

    OnQueryClosePage=BEGIN
                       if CloseAction = ACTION::OK then
                         if AssistedSetup.Status = AssistedSetup.Status::"Not Completed" then
                           if not CONFIRM(NAVNotSetUpQst,false) then
                             ERROR('');
                     END;

    ActionList=ACTIONS
    {
      { 10      ;    ;ActionContainer;
                      Name=ActionContainer10;
                      ActionContainerType=ActionItems }
      { 15      ;1   ;Action    ;
                      Name=ActionBack;
                      CaptionML=ENU=Back;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=BackActionEnabled;
                      InFooterBar=true;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 NextStep(true);
                                 if Step = 0 then
                                   DELETEALL;
                               END;
                                }
      { 14      ;1   ;Action    ;
                      Name=ActionNext;
                      CaptionML=ENU=Next;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=NextActionEnabled;
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 case Step of
                                   0:
                                     begin
                                       OnImportPayrollTransactions(TempServiceConnection,TempImportGLTransaction);
                                       if TempImportGLTransaction.FINDSET then
                                         repeat
                                           Rec := TempImportGLTransaction;
                                           INSERT;
                                         until TempImportGLTransaction.NEXT = 0;
                                       if FINDFIRST then begin
                                         SETCURRENTKEY("Entry No.");
                                         NextStep(false);
                                       end;
                                     end;
                                   else
                                     NextStep(false);
                                 end;
                               END;
                                }
      { 16      ;1   ;Action    ;
                      Name=ActionCreateSampleFile;
                      CaptionML=ENU=Get Sample File;
                      ApplicationArea=#Basic,#Suite;
                      Visible=ShowGetSampleFile;
                      InFooterBar=true;
                      Image=Import;
                      OnAction=BEGIN
                                 OnCreateSampleFile(TempServiceConnection);
                               END;
                                }
      { 30      ;1   ;Action    ;
                      Name=ActionResetLinkto;
                      CaptionML=ENU=Remove Mapping;
                      ApplicationArea=#Basic,#Suite;
                      Visible=ShowResetLinks;
                      InFooterBar=true;
                      Image=Reuse;
                      OnAction=BEGIN
                                 ResetLinks
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=ActionFinish;
                      CaptionML=ENU=Finish;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=FinishActionEnabled;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=BEGIN
                                 FinishAction;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 96  ;1   ;Group     ;
                Name=Group96;
                Visible=TopBannerVisible AND NOT FinalStepVisible;
                Editable=FALSE;
                GroupType=Group }

    { 97  ;2   ;Field     ;
                Name=MediaResourcesStandard;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 98  ;1   ;Group     ;
                Name=Group98;
                Editable=FALSE;
                GroupType=Group }

    { 99  ;2   ;Field     ;
                Name=MediaResourcesDone;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesDone."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 20  ;1   ;Group     ;
                Name=Group20;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 13  ;2   ;Group     ;
                Name=Welcome to Import Payroll Transactions;
                CaptionML=ENU=Welcome to Import Payroll Transactions;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 18  ;3   ;Group     ;
                Name=Group18;
                GroupType=Group;
                InstructionalTextML=ENU=To import payroll transactions, you first select the file from the payroll provider and then you map external accounts in the file to the relevant G/L accounts. }

    { 21  ;2   ;Group     ;
                Name=Let's go!;
                CaptionML=ENU=Let's go!;
                Visible=FirstStepVisible;
                GroupType=Group }

    { 22  ;3   ;Group     ;
                Name=Group22;
                Visible=FirstStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next to start importing payroll transactions. }

    { 2   ;1   ;Group     ;
                Name=Group2;
                Visible=ProviderStepVisible;
                GroupType=Group;
                InstructionalTextML=ENU=Map the external accounts to the relevant G/L accounts. }

    { 7   ;2   ;Group     ;
                Name=Group7;
                GroupType=Repeater }

    { 5   ;3   ;Field     ;
                Name=Entry No.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Entry No.";
                Visible=False;
                ImplicitType=Integer }

    { 3   ;3   ;Field     ;
                Name=External Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="External Account";
                Editable=False;
                ImplicitType=Code50 }

    { 28  ;3   ;Field     ;
                Name=G/L Account;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="G/L Account";
                OnValidate=VAR
                             TempImportGLTransaction@1000 : TEMPORARY Record "Import G/L Transaction";
                             ImportGLTransaction@1001 : Record "Import G/L Transaction";
                           BEGIN
                             if "G/L Account" <> '' then begin
                               ImportGLTransaction.SETRANGE("App ID","App ID");
                               ImportGLTransaction.SETRANGE("External Account","External Account");
                               ImportGLTransaction.SETRANGE("G/L Account","G/L Account");
                               if ImportGLTransaction.ISEMPTY then begin
                                 ImportGLTransaction."App ID" := "App ID";
                                 ImportGLTransaction."G/L Account" := "G/L Account";
                                 ImportGLTransaction."External Account" := "External Account";
                                 ImportGLTransaction.INSERT;
                               end
                             end else
                               if xRec."G/L Account" <> '' then begin
                                 ImportGLTransaction.SETRANGE("App ID","App ID");
                                 ImportGLTransaction.SETRANGE("External Account","External Account");
                                 ImportGLTransaction.SETRANGE("G/L Account",xRec."G/L Account");
                                 ImportGLTransaction.DELETEALL;
                               end;
                             TempImportGLTransaction := Rec;
                             SETRANGE("External Account","External Account");
                             MODIFYALL("G/L Account","G/L Account");
                             SETRANGE("External Account");
                             Rec := TempImportGLTransaction;
                             FIND;
                           END;

                ImplicitType=Code20 }

    { 29  ;3   ;Field     ;
                Name=G/L Account Name;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="G/L Account Name";
                ImplicitType=Text30 }

    { 8   ;3   ;Field     ;
                Name=Transaction Date;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Transaction Date";
                Editable=False;
                ImplicitType=Date }

    { 9   ;3   ;Field     ;
                Name=Amount;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Amount;
                Editable=False;
                ImplicitType=Decimal }

    { 19  ;3   ;Field     ;
                Name=Description;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                Editable=False;
                ImplicitType=Text50 }

    { 4   ;3   ;Field     ;
                Name=Map to;
                CaptionML=ENU=Map to;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=LinktoLbl;
                Visible=False;
                Editable=false;
                ImplicitType=TextConst }

    { 12  ;1   ;Group     ;
                Name=Group12;
                Visible=SettingsStepVisible;
                GroupType=Group }

    { 17  ;1   ;Group     ;
                Name=Group17;
                Visible=FinalStepVisible;
                GroupType=Group }

    { 24  ;2   ;Group     ;
                Name=That's it!;
                CaptionML=ENU=That's it!;
                GroupType=Group }

    { 25  ;3   ;Group     ;
                Name=Group25;
                GroupType=Group;
                InstructionalTextML=ENU=To finalize the import of payroll transactions, choose Finish. }

  }
  CODE
  {
    VAR
      TempServiceConnection@1016 : TEMPORARY Record "Service Connection";
      GenJournalLine@1022 : Record "Gen. Journal Line";
      TempImportGLTransaction@1021 : TEMPORARY Record "Import G/L Transaction";
      AssistedSetup@1005 : Record "Assisted Setup";
      MediaRepositoryStandard@1040 : Record "Media Repository";
      MediaRepositoryDone@1041 : Record "Media Repository";
      MediaResourcesStandard@1018 : Record "Media Resources";
      MediaResourcesDone@1003 : Record "Media Resources";
      Step@1012 : 'Start,LinkAccounts,Finish';
      TopBannerVisible@1042 : Boolean;
      FirstStepVisible@1000 : Boolean;
      ProviderStepVisible@1010 : Boolean;
      SettingsStepVisible@1011 : Boolean;
      FinalStepVisible@1015 : Boolean;
      FinishActionEnabled@1009 : Boolean;
      BackActionEnabled@1013 : Boolean;
      NextActionEnabled@1014 : Boolean;
      NAVNotSetUpQst@1004 : TextConst 'ENU=No payroll transactions have been imported.\\Are you sure you want to exit?';
      LinktoLbl@1007 : TextConst 'ENU=Map to';
      PayrollImportedMsg@1002 : TextConst 'ENU=The payroll transactions are imported.';
      ShowGetSampleFile@1006 : Boolean;
      ShowResetLinks@1008 : Boolean;
      ResetLinksQst@1017 : TextConst 'ENU=Do you want to reset all existing mapping suggestions?';
      IsDemoCompany@1001 : Boolean;

    LOCAL PROCEDURE EnableControls@2();
    BEGIN
      ResetControls;

      case Step of
        Step::Start:
          ShowStartStep;
        Step::LinkAccounts:
          ShowProviderStep;
        Step::Finish:
          ShowFinishStep;
      end;
    END;

    LOCAL PROCEDURE FinishAction@12();
    VAR
      NewGenJournalLine@1001 : Record "Gen. Journal Line";
      NextLinieNo@1000 : Integer;
    BEGIN
      NextLinieNo := 0;
      NewGenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
      NewGenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
      if NewGenJournalLine.FINDLAST then
        NextLinieNo := NewGenJournalLine."Line No.";

      if FINDSET then begin
        repeat
          NewGenJournalLine.INIT;
          NewGenJournalLine."Journal Template Name" := GenJournalLine."Journal Template Name";
          NewGenJournalLine."Journal Batch Name" := GenJournalLine."Journal Batch Name";
          NextLinieNo += 10000;
          NewGenJournalLine."Line No." := NextLinieNo;
          NewGenJournalLine.INSERT;
          NewGenJournalLine.SetUpNewLine(GenJournalLine,0,false);
          NewGenJournalLine.VALIDATE("Account Type" ,NewGenJournalLine."Account Type"::"G/L Account");
          NewGenJournalLine.VALIDATE("Account No.","G/L Account");
          NewGenJournalLine.VALIDATE("Posting Date","Transaction Date");
          NewGenJournalLine.VALIDATE(Amount,Amount);
          NewGenJournalLine.VALIDATE(Description,Description);
          NewGenJournalLine.MODIFY;
        until NEXT = 0;

        GenJournalLine := NewGenJournalLine;
        AssistedSetup.Status := AssistedSetup.Status::Completed;

        MESSAGE(PayrollImportedMsg);
      end;

      CurrPage.CLOSE;
    END;

    LOCAL PROCEDURE NextStep@41(Backwards@1000 : Boolean);
    BEGIN
      if Backwards then
        Step := Step - 1
      else
        Step := Step + 1;

      EnableControls;
    END;

    LOCAL PROCEDURE ShowStartStep@24();
    BEGIN
      FirstStepVisible := true;
      FinishActionEnabled := true;
      BackActionEnabled := false;
      ShowGetSampleFile := IsDemoCompany and FirstStepVisible;
    END;

    LOCAL PROCEDURE ShowProviderStep@33();
    BEGIN
      ProviderStepVisible := true;
      ShowResetLinks := true;
    END;

    LOCAL PROCEDURE ShowFinishStep@35();
    BEGIN
      FinalStepVisible := true;
      NextActionEnabled := false;
    END;

    LOCAL PROCEDURE ResetControls@1();
    BEGIN
      BackActionEnabled := true;
      NextActionEnabled := true;

      FirstStepVisible := false;
      ProviderStepVisible := false;
      SettingsStepVisible := false;
      FinalStepVisible := false;
      ShowGetSampleFile := false;
      ShowResetLinks := false;
    END;

    LOCAL PROCEDURE LoadTopBanners@40();
    BEGIN
      if MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) and
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      then
        if MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") and
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        then
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnImportPayrollTransactions@4(VAR TempServiceConnection@1001 : TEMPORARY Record "Service Connection";VAR TempImportGLTransaction@1000 : TEMPORARY Record "Import G/L Transaction");
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnCreateSampleFile@3(TempServiceConnection@1000 : TEMPORARY Record "Service Connection");
    BEGIN
    END;

    [External]
    PROCEDURE Set@5(VAR SetServiceConnection@1000 : Record "Service Connection";SetGenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
      TempServiceConnection := SetServiceConnection;
      GenJournalLine := SetGenJournalLine;
    END;

    LOCAL PROCEDURE ResetLinks@6();
    VAR
      ImportGLTransaction@1000 : Record "Import G/L Transaction";
      TempImportGLTransaction@1001 : TEMPORARY Record "Import G/L Transaction";
    BEGIN
      ImportGLTransaction.SETRANGE("App ID","App ID");
      if ImportGLTransaction.FINDFIRST then
        if CONFIRM(ResetLinksQst) then begin
          ImportGLTransaction.DELETEALL;
          TempImportGLTransaction := Rec;
          if FINDSET then
            repeat
              "G/L Account" := '';
              MODIFY;
            until NEXT = 0;
          Rec := TempImportGLTransaction;
          CurrPage.UPDATE;
        end;
    END;

    BEGIN
    END.
  }
}

