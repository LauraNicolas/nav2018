OBJECT Codeunit 8614 Config. XML Exchange
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      FileManagement@1003 : Codeunit "File Management";
      ConfigPackageMgt@1000 : Codeunit "Config. Package Management";
      ConfigProgressBar@1004 : Codeunit "Config. Progress Bar";
      ConfigValidateMgt@1021 : Codeunit "Config. Validate Management";
      ConfigMgt@1014 : Codeunit "Config. Management";
      ConfigPckgCompressionMgt@1016 : Codeunit "Config. Pckg. Compression Mgt.";
      XMLDOMMgt@1012 : Codeunit "XML DOM Management";
      ErrorTypeEnum@1027 : 'General,TableRelation';
      Advanced@1001 : Boolean;
      CalledFromCode@1002 : Boolean;
      PackageAllreadyContainsDataQst@1006 : TextConst '@@@=%1 - Package name;ENU=Package %1 already contains data that will be overwritten by the import. Do you want to continue?';
      TableContainsRecordsQst@1013 : TextConst 'ENU=Table %1 in package %2 contains %3 records that will be overwritten by the import. Do you want to continue?';
      MissingInExcelFileErr@1011 : TextConst 'ENU=%1 is missing in the Excel file.';
      Text014@1020 : TextConst 'ENU=Exporting package';
      Text017@1017 : TextConst 'ENU=Importing package';
      PackageFileNameTxt@1010 : TextConst '@@@={Locked};ENU=Package%1.rapidstart';
      Text027@1009 : TextConst 'ENU=Download';
      Text028@1008 : TextConst 'ENU=Import File';
      FileDialogFilterTxt@1007 : TextConst '@@@="Only translate ''RapidStart Files'' {Split=r""[\|\(]\*\.[^ |)]*[|) ]?""}";ENU=RapidStart file (*.rapidstart)|*.rapidstart|All Files (*.*)|*.*';
      ExcelMode@1028 : Boolean;
      HideDialog@1005 : Boolean;
      Text031@1025 : TextConst '@@@={Locked};ENU=DataList';
      TableDoesNotExistErr@1015 : TextConst 'ENU=An error occurred while importing the %1 table. The table does not exist in the database.';
      WrongFileTypeErr@1018 : TextConst 'ENU=The specified file could not be imported because it is not a valid RapidStart package file.';
      ExportFromWksht@1019 : Boolean;
      RecordProgressTxt@1022 : TextConst 'ENU=Import %1 records';
      AddPrefixMode@1033 : Boolean;
      WorkingFolder@1023 : Text;

    LOCAL PROCEDURE AddXMLComment@35(VAR PackageXML@1102 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR Node@1100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";Comment@1001 : Text[250]);
    VAR
      CommentNode@1101 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      CommentNode := PackageXML.CreateComment(Comment);
      Node.AppendChild(CommentNode);
    END;

    LOCAL PROCEDURE AddTableAttributes@5(ConfigPackageTable@1000 : Record "Config. Package Table";VAR PackageXML@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR TableNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      FieldNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      with ConfigPackageTable do begin
        if "Page ID" > 0 then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Page ID")));
          FieldNode.InnerText := FORMAT("Page ID");
          TableNode.AppendChild(FieldNode);
        end;
        if "Package Processing Order" > 0 then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Package Processing Order")));
          FieldNode.InnerText := FORMAT("Package Processing Order");
          TableNode.AppendChild(FieldNode);
        end;
        if "Processing Order" > 0 then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Processing Order")));
          FieldNode.InnerText := FORMAT("Processing Order");
          TableNode.AppendChild(FieldNode);
        end;
        if "Data Template" <> '' then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Data Template")));
          FieldNode.InnerText := FORMAT("Data Template");
          TableNode.AppendChild(FieldNode);
        end;
        if Comments <> '' then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME(Comments)));
          FieldNode.InnerText := FORMAT(Comments);
          TableNode.AppendChild(FieldNode);
        end;
        if "Created by User ID" <> '' then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Created by User ID")));
          FieldNode.InnerText := FORMAT("Created by User ID");
          TableNode.AppendChild(FieldNode);
        end;
        if "Skip Table Triggers" then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Skip Table Triggers")));
          FieldNode.InnerText := '1';
          TableNode.AppendChild(FieldNode);
        end;
        if "Parent Table ID" > 0 then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Parent Table ID")));
          FieldNode.InnerText := FORMAT("Parent Table ID");
          TableNode.AppendChild(FieldNode);
        end;
        if "Delete Recs Before Processing" then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Delete Recs Before Processing")));
          FieldNode.InnerText := '1';
          TableNode.AppendChild(FieldNode);
        end;
        if "Dimensions as Columns" then begin
          FieldNode := PackageXML.CreateElement(GetElementName(FIELDNAME("Dimensions as Columns")));
          FieldNode.InnerText := '1';
          TableNode.AppendChild(FieldNode);
        end;
      end;
    END;

    LOCAL PROCEDURE AddFieldAttributes@14(ConfigPackageField@1000 : Record "Config. Package Field";VAR FieldNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      if ConfigPackageField."Primary Key" then
        XMLDOMMgt.AddAttribute(FieldNode,GetElementName(ConfigPackageField.FIELDNAME("Primary Key")),'1');
      if ConfigPackageField."Validate Field" then
        XMLDOMMgt.AddAttribute(FieldNode,GetElementName(ConfigPackageField.FIELDNAME("Validate Field")),'1');
      if ConfigPackageField."Create Missing Codes" then
        XMLDOMMgt.AddAttribute(FieldNode,GetElementName(ConfigPackageField.FIELDNAME("Create Missing Codes")),'1');
      if ConfigPackageField."Processing Order" <> 0 then
        XMLDOMMgt.AddAttribute(
          FieldNode,GetElementName(ConfigPackageField.FIELDNAME("Processing Order")),FORMAT(ConfigPackageField."Processing Order"));
    END;

    LOCAL PROCEDURE AddDimensionFields@16(VAR ConfigPackageField@1000 : Record "Config. Package Field";VAR RecRef@1006 : RecordRef;VAR PackageXML@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR RecordNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR FieldNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";ExportValue@1001 : Boolean);
    VAR
      DimCode@1005 : Code[20];
    BEGIN
      ConfigPackageField.SETRANGE(Dimension,true);
      if ConfigPackageField.FINDSET then
        repeat
          FieldNode :=
            PackageXML.CreateElement(
              GetElementName(ConfigValidateMgt.CheckName(ConfigPackageField."Field Name")));
          if ExportValue then begin
            DimCode := COPYSTR(ConfigPackageField."Field Name",1,20);
            FieldNode.InnerText := GetDimValueFromTable(RecRef,DimCode);
            RecordNode.AppendChild(FieldNode);
          end else begin
            FieldNode.InnerText := '';
            RecordNode.AppendChild(FieldNode);
          end;
        until ConfigPackageField.NEXT = 0;
    END;

    LOCAL PROCEDURE ApplyPackageFilter@7(ConfigPackageTable@1001 : Record "Config. Package Table";VAR RecRef@1000 : RecordRef);
    VAR
      ConfigPackageFilter@1002 : Record "Config. Package Filter";
      FieldRef@1003 : FieldRef;
    BEGIN
      ConfigPackageFilter.SETRANGE("Package Code",ConfigPackageTable."Package Code");
      ConfigPackageFilter.SETRANGE("Table ID",ConfigPackageTable."Table ID");
      ConfigPackageFilter.SETRANGE("Processing Rule No.",0);
      if ConfigPackageFilter.FINDSET then
        repeat
          if ConfigPackageFilter."Field Filter" <> '' then begin
            FieldRef := RecRef.FIELD(ConfigPackageFilter."Field ID");
            FieldRef.SETFILTER(STRSUBSTNO('%1',ConfigPackageFilter."Field Filter"));
          end;
        until ConfigPackageFilter.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateRecordNodes@11(VAR PackageXML@1100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument" RUNONCLIENT;ConfigPackageTable@1000 : Record "Config. Package Table");
    VAR
      Field@1005 : Record Field;
      ConfigPackageField@1007 : Record "Config. Package Field";
      ConfigPackage@1001 : Record "Config. Package";
      DocumentElement@1101 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FieldNode@1102 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RecordNode@1103 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableNode@1104 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableIDNode@1105 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PackageCodeNode@1106 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      RecRef@1003 : RecordRef;
      FieldRef@1002 : FieldRef;
      ExportMetadata@1004 : Boolean;
    BEGIN
      ConfigPackageTable.TESTFIELD("Package Code");
      ConfigPackageTable.TESTFIELD("Table ID");
      ConfigPackage.GET(ConfigPackageTable."Package Code");
      DocumentElement := PackageXML.DocumentElement;
      TableNode := PackageXML.CreateElement(GetElementName(ConfigPackageTable."Table Name" + 'List'));
      DocumentElement.AppendChild(TableNode);

      TableIDNode := PackageXML.CreateElement(GetElementName(ConfigPackageTable.FIELDNAME("Table ID")));
      TableIDNode.InnerText := FORMAT(ConfigPackageTable."Table ID");
      TableNode.AppendChild(TableIDNode);

      if ExcelMode then begin
        PackageCodeNode := PackageXML.CreateElement(GetElementName(ConfigPackageTable.FIELDNAME("Package Code")));
        PackageCodeNode.InnerText := FORMAT(ConfigPackageTable."Package Code");
        TableNode.AppendChild(PackageCodeNode);
      end else
        AddTableAttributes(ConfigPackageTable,PackageXML,TableNode);

      ExportMetadata := true;
      RecRef.OPEN(ConfigPackageTable."Table ID");
      ApplyPackageFilter(ConfigPackageTable,RecRef);
      if RecRef.FINDSET then
        repeat
          RecordNode := PackageXML.CreateElement(GetTableElementName(ConfigPackageTable."Table Name"));
          TableNode.AppendChild(RecordNode);

          ConfigPackageField.SETRANGE("Package Code",ConfigPackageTable."Package Code");
          ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
          ConfigPackageField.SETRANGE("Include Field",true);
          ConfigPackageField.SETRANGE(Dimension,false);
          ConfigPackageField.SETCURRENTKEY("Package Code","Table ID","Processing Order");
          if ConfigPackageField.FINDSET then
            repeat
              FieldRef := RecRef.FIELD(ConfigPackageField."Field ID");
              if Field.GET(RecRef.NUMBER,FieldRef.NUMBER) then begin
                FieldNode :=
                  PackageXML.CreateElement(GetFieldElementName(ConfigValidateMgt.CheckName(FieldRef.NAME)));
                FieldNode.InnerText := FormatFieldValue(FieldRef,ConfigPackage);
                if Advanced and ConfigPackageField."Localize Field" then
                  AddXMLComment(PackageXML,FieldNode,'_locComment_text="{MaxLength=' + FORMAT(Field.Len) + '}"');
                RecordNode.AppendChild(FieldNode); // must be after AddXMLComment and before AddAttribute.
                if not ExcelMode and ExportMetadata then
                  AddFieldAttributes(ConfigPackageField,FieldNode);
                if Advanced then
                  if ConfigPackageField."Localize Field" then
                    XMLDOMMgt.AddAttribute(FieldNode,'_loc','locData')
                  else
                    XMLDOMMgt.AddAttribute(FieldNode,'_loc','locNone');
              end;
            until ConfigPackageField.NEXT = 0;

          if ConfigPackageTable."Dimensions as Columns" and ExcelMode and ExportFromWksht then
            AddDimensionFields(ConfigPackageField,RecRef,PackageXML,RecordNode,FieldNode,true);
          ExportMetadata := false;
        until RecRef.NEXT = 0
      else begin
        RecordNode := PackageXML.CreateElement(GetTableElementName(ConfigPackageTable."Table Name"));
        TableNode.AppendChild(RecordNode);

        ConfigPackageField.SETRANGE("Package Code",ConfigPackageTable."Package Code");
        ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
        ConfigPackageField.SETRANGE("Include Field",true);
        ConfigPackageField.SETRANGE(Dimension,false);
        if ConfigPackageField.FINDSET then
          repeat
            FieldRef := RecRef.FIELD(ConfigPackageField."Field ID");
            FieldNode :=
              PackageXML.CreateElement(GetFieldElementName(ConfigValidateMgt.CheckName(FieldRef.NAME)));
            FieldNode.InnerText := '';
            RecordNode.AppendChild(FieldNode);
            if not ExcelMode then
              AddFieldAttributes(ConfigPackageField,FieldNode);
          until ConfigPackageField.NEXT = 0;

        if ConfigPackageTable."Dimensions as Columns" and ExcelMode and ExportFromWksht then
          AddDimensionFields(ConfigPackageField,RecRef,PackageXML,RecordNode,FieldNode,false);
      end;
    END;

    [Internal]
    PROCEDURE ExportPackage@4(ConfigPackage@1000 : Record "Config. Package");
    VAR
      ConfigPackageTable@1001 : Record "Config. Package Table";
    BEGIN
      with ConfigPackage do begin
        TESTFIELD(Code);
        TESTFIELD("Package Name");
        ConfigPackageTable.SETRANGE("Package Code",Code);
        ExportPackageXML(ConfigPackageTable,'');
      end;
    END;

    [Internal]
    PROCEDURE ExportPackageXML@10(VAR ConfigPackageTable@1004 : Record "Config. Package Table";XMLDataFile@1000 : Text) : Boolean;
    VAR
      ConfigPackage@1001 : Record "Config. Package";
      PackageXML@1101 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      FileFilter@1002 : Text;
      ToFile@1003 : Text[50];
      CompressedFileName@1005 : Text;
    BEGIN
      ConfigPackageTable.FINDFIRST;
      ConfigPackage.GET(ConfigPackageTable."Package Code");
      ConfigPackage.TESTFIELD(Code);
      ConfigPackage.TESTFIELD("Package Name");
      if not ConfigPackage."Exclude Config. Tables" and not ExcelMode then
        ConfigPackageMgt.AddConfigTables(ConfigPackage.Code);

      if not CalledFromCode then
        XMLDataFile := FileManagement.ServerTempFileName('');
      FileFilter := GetFileDialogFilter;
      if ToFile = '' then
        ToFile := STRSUBSTNO(PackageFileNameTxt,ConfigPackage.Code);

      SetWorkingFolder(FileManagement.GetDirectoryName(XMLDataFile));
      PackageXML := PackageXML.XmlDocument;
      ExportPackageXMLDocument(PackageXML,ConfigPackageTable,ConfigPackage,Advanced);

      PackageXML.Save(XMLDataFile);

      if not CalledFromCode then begin
        CompressedFileName := FileManagement.ServerTempFileName('');
        ConfigPckgCompressionMgt.ServersideCompress(XMLDataFile,CompressedFileName);

        FileManagement.DownloadHandler(CompressedFileName,Text027,'',FileFilter,ToFile);
      end;

      exit(true);
    END;

    [Internal]
    PROCEDURE ExportPackageXMLDocument@1100(VAR PackageXML@1100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR ConfigPackageTable@1101 : Record "Config. Package Table";ConfigPackage@1001 : Record "Config. Package";Advanced@1102 : Boolean);
    VAR
      DocumentElement@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      LocXML@1103 : Text[1024];
    BEGIN
      ConfigPackage.TESTFIELD(Code);
      ConfigPackage.TESTFIELD("Package Name");

      if Advanced then
        LocXML := '<_locDefinition><_locDefault _loc="locNone"/></_locDefinition>';
      XMLDOMMgt.LoadXMLDocumentFromText(
        STRSUBSTNO(
          '<?xml version="1.0" encoding="UTF-16" standalone="yes"?><%1>%2</%1>',
          GetPackageTag,
          LocXML),
        PackageXML);

      CleanUpConfigPackageData(ConfigPackage);

      if not ExcelMode then begin
        InitializeMediaTempFolder;
        DocumentElement := PackageXML.DocumentElement;
        if ConfigPackage."Exclude Config. Tables" then
          XMLDOMMgt.AddAttribute(DocumentElement,GetElementName(ConfigPackage.FIELDNAME("Exclude Config. Tables")),'1');
        if ConfigPackage."Processing Order" > 0 then
          XMLDOMMgt.AddAttribute(
            DocumentElement,GetElementName(ConfigPackage.FIELDNAME("Processing Order")),FORMAT(ConfigPackage."Processing Order"));
        if ConfigPackage."Language ID" > 0 then
          XMLDOMMgt.AddAttribute(
            DocumentElement,GetElementName(ConfigPackage.FIELDNAME("Language ID")),FORMAT(ConfigPackage."Language ID"));
        XMLDOMMgt.AddAttribute(
          DocumentElement,GetElementName(ConfigPackage.FIELDNAME("Product Version")),ConfigPackage."Product Version");
        XMLDOMMgt.AddAttribute(DocumentElement,GetElementName(ConfigPackage.FIELDNAME("Package Name")),ConfigPackage."Package Name");
        XMLDOMMgt.AddAttribute(DocumentElement,GetElementName(ConfigPackage.FIELDNAME(Code)),ConfigPackage.Code);
      end;

      if not HideDialog then
        ConfigProgressBar.Init(ConfigPackageTable.COUNT,1,Text014);
      ConfigPackageTable.SETAUTOCALCFIELDS("Table Name");
      if ConfigPackageTable.FINDSET then
        repeat
          if not HideDialog then
            ConfigProgressBar.Update(ConfigPackageTable."Table Name");

          ExportConfigTableToXML(ConfigPackageTable,PackageXML);
        until ConfigPackageTable.NEXT = 0;

      if not ExcelMode then begin
        UpdateConfigPackageMediaSet(ConfigPackage);
        ExportConfigPackageMediaSetToXML(PackageXML,ConfigPackage);
      end;

      if not HideDialog then
        ConfigProgressBar.Close;
    END;

    LOCAL PROCEDURE ExportConfigTableToXML@46(VAR ConfigPackageTable@1000 : Record "Config. Package Table";VAR PackageXML@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    BEGIN
      CreateRecordNodes(PackageXML,ConfigPackageTable);
      ConfigPackageTable."Exported Date and Time" := CREATEDATETIME(TODAY,TIME);
      ConfigPackageTable.MODIFY;
    END;

    [Internal]
    PROCEDURE ImportPackageXMLFromClient@1024() : Boolean;
    VAR
      ServerFileName@1000 : Text;
      DecompressedFileName@1001 : Text;
    BEGIN
      ServerFileName := FileManagement.ServerTempFileName('.xml');
      if UploadXMLPackage(ServerFileName) then begin
        DecompressedFileName := DecompressPackage(ServerFileName);

        exit(ImportPackageXML(DecompressedFileName));
      end;

      exit(false);
    END;

    [Internal]
    PROCEDURE ImportPackageXML@12(XMLDataFile@1000 : Text) : Boolean;
    VAR
      PackageXML@1100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDOMMgt.LoadXMLDocumentFromFile(XMLDataFile,PackageXML);

      exit(ImportPackageXMLDocument(PackageXML));
    END;

    [Internal]
    PROCEDURE ImportPackageXMLFromStream@19(InStream@1000 : InStream) : Boolean;
    VAR
      PackageXML@1100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      XMLDOMMgt.LoadXMLDocumentFromInStream(InStream,PackageXML);

      exit(ImportPackageXMLDocument(PackageXML));
    END;

    [Internal]
    PROCEDURE ImportPackageXMLDocument@1104(PackageXML@1107 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      ConfigPackage@1004 : Record "Config. Package";
      ConfigPackageRecord@1008 : Record "Config. Package Record";
      ConfigPackageData@1010 : Record "Config. Package Data";
      ConfigPackageTable@1007 : Record "Config. Package Table";
      DocumentElement@1101 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
      TableNodes@1102 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TableNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      PackageCode@1001 : Code[20];
      Value@1005 : Text;
      TableID@1003 : Integer;
      NodeCount@1000 : Integer;
      Confirmed@1006 : Boolean;
    BEGIN
      DocumentElement := PackageXML.DocumentElement;

      if not ExcelMode then begin
        PackageCode := GetPackageCode(PackageXML);
        if ConfigPackage.GET(PackageCode) then begin
          ConfigPackage.CALCFIELDS("No. of Records");
          Confirmed := true;
          if not HideDialog then
            if ConfigPackage."No. of Records" > 0 then
              if not CONFIRM(PackageAllreadyContainsDataQst,true,PackageCode) then
                Confirmed := false;
          if not Confirmed then
            exit(false);
          ConfigPackage.DELETE(true);
          COMMIT;
        end;

        ConfigPackage.INIT;
        ConfigPackage.Code := PackageCode;
        ConfigPackage."Package Name" :=
          COPYSTR(
            GetAttribute(GetElementName(ConfigPackage.FIELDNAME("Package Name")),DocumentElement),1,
            MAXSTRLEN(ConfigPackage."Package Name"));
        Value := GetAttribute(GetElementName(ConfigPackage.FIELDNAME("Language ID")),DocumentElement);
        if Value <> '' then
          EVALUATE(ConfigPackage."Language ID",Value);
        ConfigPackage."Product Version" :=
          COPYSTR(
            GetAttribute(GetElementName(ConfigPackage.FIELDNAME("Product Version")),DocumentElement),1,
            MAXSTRLEN(ConfigPackage."Product Version"));
        Value := GetAttribute(GetElementName(ConfigPackage.FIELDNAME("Processing Order")),DocumentElement);
        if Value <> '' then
          EVALUATE(ConfigPackage."Processing Order",Value);
        Value := GetAttribute(GetElementName(ConfigPackage.FIELDNAME("Exclude Config. Tables")),DocumentElement);
        if Value <> '' then
          EVALUATE(ConfigPackage."Exclude Config. Tables",Value);
        if not ConfigPackage.MODIFY then
          ConfigPackage.INSERT;
      end;

      TableNodes := DocumentElement.ChildNodes;
      if not HideDialog then
        ConfigProgressBar.Init(TableNodes.Count,1,Text017);
      for NodeCount := 0 to (TableNodes.Count - 1) do begin
        TableNode := TableNodes.Item(NodeCount);
        if EVALUATE(TableID,FORMAT(TableNode.FirstChild.InnerText)) then begin
          FillPackageMetadataFromXML(PackageCode,TableID,TableNode);
          if not TableObjectExists(TableID) then begin
            ConfigPackageMgt.InsertPackageTableWithoutValidation(ConfigPackageTable,PackageCode,TableID);
            ConfigPackageMgt.InitPackageRecord(ConfigPackageRecord,PackageCode,TableID);
            ConfigPackageMgt.RecordError(ConfigPackageRecord,0,COPYSTR(STRSUBSTNO(TableDoesNotExistErr,TableID),1,250));
          end else
            if PackageDataExistsInXML(PackageCode,TableID,TableNode) then
              FillPackageDataFromXML(PackageCode,TableID,TableNode);
        end;
        if ExcelMode then
          case true of // Dimensions
            ConfigMgt.IsDefaultDimTable(TableID):
              begin
                ConfigPackageRecord.SETRANGE("Package Code",PackageCode);
                ConfigPackageRecord.SETRANGE("Table ID",TableID);
                if ConfigPackageRecord.FINDSET then
                  repeat
                    ConfigPackageData.GET(
                      ConfigPackageRecord."Package Code",ConfigPackageRecord."Table ID",ConfigPackageRecord."No.",1);
                    ConfigPackageMgt.UpdateDefaultDimValues(ConfigPackageRecord,COPYSTR(ConfigPackageData.Value,1,20));
                  until ConfigPackageRecord.NEXT = 0;
              end;
            ConfigMgt.IsDimSetIDTable(TableID):
              begin
                ConfigPackageRecord.SETRANGE("Package Code",PackageCode);
                ConfigPackageRecord.SETRANGE("Table ID",TableID);
                if ConfigPackageRecord.FINDSET then
                  repeat
                    ConfigPackageMgt.HandlePackageDataDimSetIDForRecord(ConfigPackageRecord);
                  until ConfigPackageRecord.NEXT = 0;
              end;
          end;
      end;
      if not HideDialog then
        ConfigProgressBar.Close;

      ConfigPackageMgt.UpdateConfigLinePackageData(ConfigPackage.Code);

      // autoapply configuration lines
      ConfigPackageMgt.ApplyConfigTables(ConfigPackage);

      exit(true);
    END;

    LOCAL PROCEDURE PackageDataExistsInXML@52(PackageCode@1001 : Code[20];TableID@1000 : Integer;VAR TableNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      ConfigPackageTable@1002 : Record "Config. Package Table";
      ConfigPackageField@1010 : Record "Config. Package Field";
      RecRef@1004 : RecordRef;
      RecordNodes@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      RecordNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      I@1003 : Integer;
    BEGIN
      if not ConfigPackageTable.GET(PackageCode,TableID) then
        exit(false);

      ConfigPackageTable.CALCFIELDS("Table Name");
      RecordNodes := TableNode.SelectNodes(GetElementName(ConfigPackageTable."Table Name"));

      if RecordNodes.Count = 0 then
        exit(false);

      for I := 0 to RecordNodes.Count - 1 do begin
        RecordNode := RecordNodes.Item(I);
        if RecordNode.HasChildNodes then begin
          RecRef.OPEN(ConfigPackageTable."Table ID");
          ConfigPackageField.SETRANGE("Package Code",ConfigPackageTable."Package Code");
          ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
          if ConfigPackageField.FINDSET then
            repeat
              if ConfigPackageField."Include Field" and FieldNodeExists(RecordNode,GetElementName(ConfigPackageField."Field Name")) then
                if GetNodeValue(RecordNode,GetElementName(ConfigPackageField."Field Name")) <> '' then
                  exit(true);
            until ConfigPackageField.NEXT = 0;
          RecRef.CLOSE;
        end;
      end;

      exit(false);
    END;

    LOCAL PROCEDURE FillPackageMetadataFromXML@57(VAR PackageCode@1005 : Code[20];TableID@1001 : Integer;VAR TableNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ConfigPackageTable@1004 : Record "Config. Package Table";
      ConfigPackageField@1003 : Record "Config. Package Field";
      Field@1002 : Record Field;
      ConfigMgt@1013 : Codeunit "Config. Management";
      RecordNodes@1010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      RecordNode@1009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      FieldNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      Value@1006 : Text;
    BEGIN
      if (TableID > 0) and (not ConfigPackageTable.GET(PackageCode,TableID)) then begin
        if not ExcelMode then begin
          ConfigPackageTable.INIT;
          ConfigPackageTable."Package Code" := PackageCode;
          ConfigPackageTable."Table ID" := TableID;
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Page ID")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Page ID",Value);
          if ConfigPackageTable."Page ID" = 0 then
            ConfigPackageTable."Page ID" := ConfigMgt.FindPage(TableID);
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Package Processing Order")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Package Processing Order",Value);
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Processing Order")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Processing Order",Value);
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Dimensions as Columns")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Dimensions as Columns",Value);
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Skip Table Triggers")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Skip Table Triggers",Value);
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Parent Table ID")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Parent Table ID",Value);
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Delete Recs Before Processing")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Delete Recs Before Processing",Value);
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Created by User ID")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Created by User ID",COPYSTR(Value,1,50));
          ConfigPackageTable."Data Template" :=
            COPYSTR(
              GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Data Template"))),1,
              MAXSTRLEN(ConfigPackageTable."Data Template"));
          ConfigPackageTable.Comments :=
            COPYSTR(
              GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME(Comments))),
              1,MAXSTRLEN(ConfigPackageTable.Comments));
          ConfigPackageTable."Imported Date and Time" := CREATEDATETIME(TODAY,TIME);
          ConfigPackageTable."Imported by User ID" := USERID;
          ConfigPackageTable.INSERT(true);
          ConfigPackageField.SETRANGE("Package Code",ConfigPackageTable."Package Code");
          ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
          ConfigPackageMgt.SelectAllPackageFields(ConfigPackageField,false);
        end else begin // Excel import
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Package Code")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Package Code",COPYSTR(Value,1,MAXSTRLEN(ConfigPackageTable."Package Code")))
          else
            ERROR(MissingInExcelFileErr,ConfigPackageTable.FIELDCAPTION("Package Code"));
          Value := GetNodeValue(TableNode,GetElementName(ConfigPackageTable.FIELDNAME("Table ID")));
          if Value <> '' then
            EVALUATE(ConfigPackageTable."Table ID",Value)
          else
            ERROR(MissingInExcelFileErr,ConfigPackageTable.FIELDCAPTION("Table ID"));
          ConfigPackageTable.GET(ConfigPackageTable."Package Code",ConfigPackageTable."Table ID");
          PackageCode := ConfigPackageTable."Package Code";
        end;

        ConfigPackageTable.CALCFIELDS("Table Name");
        if ConfigPackageTable."Table Name" <> '' then begin
          RecordNodes := TableNode.SelectNodes(GetElementName(ConfigPackageTable."Table Name"));
          if RecordNodes.Count > 0 then begin
            RecordNode := RecordNodes.Item(0);
            if RecordNode.HasChildNodes then begin
              ConfigPackageMgt.SetFieldFilter(Field,TableID,0);
              if Field.FINDSET then
                repeat
                  if FieldNodeExists(RecordNode,GetElementName(Field.FieldName)) then begin
                    ConfigPackageField.GET(PackageCode,TableID,Field."No.");
                    ConfigPackageField."Primary Key" := ConfigValidateMgt.IsKeyField(TableID,Field."No.");
                    ConfigPackageField."Include Field" := true;
                    FieldNode := RecordNode.SelectSingleNode(GetElementName(Field.FieldName));
                    if not ISNULL(FieldNode) and not ExcelMode then begin
                      Value := GetAttribute(GetElementName(ConfigPackageField.FIELDNAME("Primary Key")),FieldNode);
                      ConfigPackageField."Primary Key" := Value = '1';
                      Value := GetAttribute(GetElementName(ConfigPackageField.FIELDNAME("Validate Field")),FieldNode);
                      ConfigPackageField."Validate Field" := (Value = '1') and
                        not ConfigPackageMgt.ValidateException(TableID,Field."No.");
                      Value := GetAttribute(GetElementName(ConfigPackageField.FIELDNAME("Create Missing Codes")),FieldNode);
                      ConfigPackageField."Create Missing Codes" := (Value = '1') and
                        not ConfigPackageMgt.ValidateException(TableID,Field."No.");
                      Value := GetAttribute(GetElementName(ConfigPackageField.FIELDNAME("Processing Order")),FieldNode);
                      if Value <> '' then
                        EVALUATE(ConfigPackageField."Processing Order",Value);
                    end;
                    ConfigPackageField.MODIFY;
                  end;
                until Field.NEXT = 0;
            end;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE FillPackageDataFromXML@54(PackageCode@1012 : Code[20];TableID@1000 : Integer;VAR TableNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      ConfigPackageTable@1002 : Record "Config. Package Table";
      ConfigPackageData@1001 : Record "Config. Package Data";
      ConfigPackageRecord@1009 : Record "Config. Package Record";
      ConfigPackageField@1010 : Record "Config. Package Field";
      ConfigProgressBarRecord@1013 : Codeunit "Config. Progress Bar";
      RecRef@1004 : RecordRef;
      FieldRef@1003 : FieldRef;
      RecordNodes@1006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      RecordNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeCount@1008 : Integer;
      RecordCount@1014 : Integer;
      StepCount@1015 : Integer;
      ErrorText@1011 : Text[250];
    BEGIN
      if ConfigPackageTable.GET(PackageCode,TableID) then begin
        if ExcelMode then begin
          ConfigPackageTable.CALCFIELDS("No. of Package Records");
          if ConfigPackageTable."No. of Package Records" > 0 then
            if CONFIRM(TableContainsRecordsQst,true,TableID,PackageCode,ConfigPackageTable."No. of Package Records") then
              ConfigPackageTable.DeletePackageData
            else
              exit;
        end;
        ConfigPackageTable.CALCFIELDS("Table Name");
        if not HideDialog then
          ConfigProgressBar.Update(ConfigPackageTable."Table Name");
        RecordNodes := TableNode.SelectNodes(GetElementName(ConfigPackageTable."Table Name"));
        RecordCount := RecordNodes.Count;

        if not HideDialog and (RecordCount > 1000) then begin
          StepCount := ROUND(RecordCount / 100,1);
          ConfigProgressBarRecord.Init(RecordCount,StepCount,
            STRSUBSTNO(RecordProgressTxt,ConfigPackageTable."Table Name"));
        end;
        for NodeCount := 0 to RecordCount - 1 do begin
          RecordNode := RecordNodes.Item(NodeCount);
          if RecordNode.HasChildNodes then begin
            ConfigPackageMgt.InitPackageRecord(ConfigPackageRecord,PackageCode,ConfigPackageTable."Table ID");

            RecRef.CLOSE;
            RecRef.OPEN(ConfigPackageTable."Table ID");
            ConfigPackageField.SETRANGE("Package Code",ConfigPackageTable."Package Code");
            ConfigPackageField.SETRANGE("Table ID",ConfigPackageTable."Table ID");
            ConfigPackageField.SETRANGE("Include Field",true);
            if ConfigPackageField.FINDSET then
              repeat
                ConfigPackageData.INIT;
                ConfigPackageData."Package Code" := ConfigPackageField."Package Code";
                ConfigPackageData."Table ID" := ConfigPackageField."Table ID";
                ConfigPackageData."Field ID" := ConfigPackageField."Field ID";
                ConfigPackageData."No." := ConfigPackageRecord."No.";
                if FieldNodeExists(RecordNode,GetElementName(ConfigPackageField."Field Name")) or ConfigPackageField.Dimension then
                  GetConfigPackageDataValue(ConfigPackageData,RecordNode,GetElementName(ConfigPackageField."Field Name"));
                ConfigPackageData.INSERT;

                if not ConfigPackageField.Dimension then begin
                  FieldRef := RecRef.FIELD(ConfigPackageData."Field ID");
                  if ConfigPackageData.Value <> '' then begin
                    ErrorText := ConfigValidateMgt.EvaluateValue(FieldRef,ConfigPackageData.Value,not ExcelMode);
                    if ErrorText <> '' then
                      ConfigPackageMgt.FieldError(ConfigPackageData,ErrorText,ErrorTypeEnum::General)
                    else
                      ConfigPackageData.Value := FORMAT(FieldRef.VALUE);

                    ConfigPackageData.MODIFY;
                  end;
                end;
              until ConfigPackageField.NEXT = 0;
            ConfigPackageTable."Imported Date and Time" := CURRENTDATETIME;
            ConfigPackageTable."Imported by User ID" := USERID;
            ConfigPackageTable.MODIFY;
            if not HideDialog and (RecordCount > 1000) then
              ConfigProgressBarRecord.Update(
                STRSUBSTNO('Records: %1 of %2',ConfigPackageRecord."No.",RecordCount));
          end;
        end;
        if not HideDialog and (RecordCount > 1000) then
          ConfigProgressBarRecord.Close;
      end;
    END;

    LOCAL PROCEDURE FieldNodeExists@36(VAR RecordNode@1100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FieldNodeName@1001 : Text[250]) : Boolean;
    VAR
      FieldNode@1101 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FieldNode := RecordNode.SelectSingleNode(FieldNodeName);

      if not ISNULL(FieldNode) then
        exit(true);
    END;

    LOCAL PROCEDURE FormatFieldValue@9(VAR FieldRef@1001 : FieldRef;ConfigPackage@1000 : Record "Config. Package") InnerText : Text;
    VAR
      TypeHelper@1002 : Codeunit "Type Helper";
      Date@1003 : Date;
    BEGIN
      if not (((FORMAT(FieldRef.TYPE) = 'Integer') or (FORMAT(FieldRef.TYPE) = 'BLOB')) and
              (FieldRef.RELATION <> 0) and (FORMAT(FieldRef.VALUE) = '0'))
      then
        InnerText := FORMAT(FieldRef.VALUE,0,ConfigValidateMgt.XMLFormat);

      if not ExcelMode then begin
        if (FORMAT(FieldRef.TYPE) = 'Boolean') or (FORMAT(FieldRef.TYPE) = 'Option') then
          InnerText := FORMAT(FieldRef.VALUE,0,2);
        if (FORMAT(FieldRef.TYPE) = 'DateFormula') and (FORMAT(FieldRef.VALUE) <> '') then
          InnerText := '<' + FORMAT(FieldRef.VALUE,0,ConfigValidateMgt.XMLFormat) + '>';
        if FORMAT(FieldRef.TYPE) = 'BLOB' then
          InnerText := ConvertBLOBToBase64String(FieldRef);
        if FORMAT(FieldRef.TYPE) = 'MediaSet' then
          InnerText := ExportMediaSet(FieldRef);
        if FORMAT(FieldRef.TYPE) = 'Media' then
          InnerText := ExportMedia(FieldRef,ConfigPackage);
      end else begin
        if FORMAT(FieldRef.TYPE) = 'Option' then
          InnerText := FORMAT(FieldRef.VALUE);
        if (FORMAT(FieldRef.TYPE) = 'Date') and (ConfigPackage."Language ID" <> 0) and (InnerText <> '') then begin
          EVALUATE(Date,FORMAT(FieldRef.VALUE));
          InnerText := TypeHelper.FormatDate(Date,ConfigPackage."Language ID");
        end;
      end;

      exit(InnerText);
    END;

    [External]
    PROCEDURE GetAttribute@2(AttributeName@1001 : Text[1024];VAR XMLNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Text[1000];
    VAR
      XMLAttributes@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLAttributeNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      XMLAttributes := XMLNode.Attributes;
      XMLAttributeNode := XMLAttributes.GetNamedItem(AttributeName);
      if ISNULL(XMLAttributeNode) then
        exit('');
      exit(FORMAT(XMLAttributeNode.InnerText));
    END;

    LOCAL PROCEDURE GetDimValueFromTable@13(VAR RecRef@1000 : RecordRef;DimCode@1001 : Code[20]) : Code[20];
    VAR
      DimSetEntry@1002 : Record "Dimension Set Entry";
      DefaultDim@1003 : Record "Default Dimension";
      ConfigMgt@1007 : Codeunit "Config. Management";
      FieldRef@1004 : FieldRef;
      DimSetID@1005 : Integer;
      MasterNo@1006 : Code[20];
    BEGIN
      if RecRef.FIELDEXIST(480) then begin // Dimension Set ID
        FieldRef := RecRef.FIELD(480);
        DimSetID := FieldRef.VALUE;
        if DimSetID > 0 then begin
          DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
          DimSetEntry.SETRANGE("Dimension Code",DimCode);
          if DimSetEntry.FINDFIRST then
            exit(DimSetEntry."Dimension Value Code");
        end;
      end else
        if ConfigMgt.IsDefaultDimTable(RecRef.NUMBER) then begin // Default Dimensions
          FieldRef := RecRef.FIELD(1);
          DefaultDim.SETRANGE("Table ID",RecRef.NUMBER);
          MasterNo := FORMAT(FieldRef.VALUE);
          DefaultDim.SETRANGE("No.",MasterNo);
          DefaultDim.SETRANGE("Dimension Code",DimCode);
          if DefaultDim.FINDFIRST then
            exit(DefaultDim."Dimension Value Code");
        end;
    END;

    [External]
    PROCEDURE GetElementName@22(NameIn@1000 : Text[250]) : Text[250];
    VAR
      XMLDOMManagement@1001 : Codeunit "XML DOM Management";
    BEGIN
      if not XMLDOMManagement.IsValidXMLNameStartCharacter(NameIn[1]) then
        NameIn := '_' + NameIn;
      NameIn := COPYSTR(XMLDOMManagement.ReplaceXMLInvalidCharacters(NameIn,' '),1,MAXSTRLEN(NameIn));
      NameIn := DELCHR(NameIn,'=','?''`');
      NameIn := DELCHR(CONVERTSTR(NameIn,'<>,./\+-&()%:','             '),'=',' ');
      NameIn := DELCHR(NameIn,'=',' ');
      exit(NameIn);
    END;

    [External]
    PROCEDURE GetFieldElementName@120(NameIn@1000 : Text[250]) : Text[250];
    BEGIN
      if AddPrefixMode then
        NameIn := COPYSTR('Field_' + NameIn,1,MAXSTRLEN(NameIn));

      exit(GetElementName(NameIn));
    END;

    [External]
    PROCEDURE GetTableElementName@124(NameIn@1000 : Text[250]) : Text[250];
    BEGIN
      if AddPrefixMode then
        NameIn := COPYSTR('Table_' + NameIn,1,MAXSTRLEN(NameIn));

      exit(GetElementName(NameIn));
    END;

    LOCAL PROCEDURE GetNodeValue@26(VAR RecordNode@1100 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FieldNodeName@1001 : Text[250]) : Text;
    VAR
      FieldNode@1101 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      FieldNode := RecordNode.SelectSingleNode(FieldNodeName);
      if not ISNULL(FieldNode) then
        exit(FieldNode.InnerText);
    END;

    LOCAL PROCEDURE GetPackageTag@8() : Text;
    BEGIN
      exit(Text031);
    END;

    [External]
    PROCEDURE GetPackageCode@20(PackageXML@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Code[20];
    VAR
      ConfigPackage@1002 : Record "Config. Package";
      DocumentElement@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";
    BEGIN
      DocumentElement := PackageXML.DocumentElement;
      exit(COPYSTR(GetAttribute(GetElementName(ConfigPackage.FIELDNAME(Code)),DocumentElement),1,MAXSTRLEN(ConfigPackage.Code)));
    END;

    LOCAL PROCEDURE InitializeMediaTempFolder@30();
    VAR
      MediaFolder@1000 : Text;
    BEGIN
      if ExcelMode then
        exit;

      if WorkingFolder = '' then
        exit;

      MediaFolder := GetCurrentMediaFolderPath;
      if FileManagement.ServerDirectoryExists(MediaFolder) then
        FileManagement.ServerRemoveDirectory(MediaFolder,true);

      FileManagement.ServerCreateDirectory(MediaFolder);
    END;

    LOCAL PROCEDURE GetCurrentMediaFolderPath@49() : Text;
    BEGIN
      exit(FileManagement.CombinePath(WorkingFolder,GetMediaFolderName));
    END;

    [Internal]
    PROCEDURE GetMediaFolder@37(VAR MediaFolderPath@1000 : Text;SourcePath@1001 : Text) : Boolean;
    VAR
      SourceDirectory@1002 : Text;
    BEGIN
      if FileManagement.ServerFileExists(SourcePath) then
        SourceDirectory := FileManagement.GetDirectoryName(SourcePath)
      else
        if FileManagement.ServerDirectoryExists(SourcePath) then
          SourceDirectory := SourcePath;

      if SourceDirectory = '' then
        exit(false);

      MediaFolderPath := FileManagement.CombinePath(SourceDirectory,GetMediaFolderName);
      exit(FileManagement.ServerDirectoryExists(MediaFolderPath));
    END;

    [External]
    PROCEDURE GetMediaFolderName@31() : Text;
    BEGIN
      exit('Media');
    END;

    [External]
    PROCEDURE GetXSDType@3(TableID@1000 : Integer;FieldID@1001 : Integer) : Text[30];
    VAR
      Field@1002 : Record Field;
    BEGIN
      if Field.GET(TableID,FieldID) then
        case Field.Type of
          Field.Type::Integer:
            exit('xsd:integer');
          Field.Type::Date:
            exit('xsd:date');
          Field.Type::Time:
            exit('xsd:time');
          Field.Type::Boolean:
            exit('xsd:boolean');
          Field.Type::DateTime:
            exit('xsd:dateTime');
          else
            exit('xsd:string');
        end;

      exit('xsd:string');
    END;

    [External]
    PROCEDURE SetAdvanced@34(NewAdvanced@1000 : Boolean);
    BEGIN
      Advanced := NewAdvanced;
    END;

    [External]
    PROCEDURE SetCalledFromCode@1013(NewCalledFromCode@1000 : Boolean);
    BEGIN
      CalledFromCode := NewCalledFromCode;
    END;

    LOCAL PROCEDURE SetWorkingFolder@44(NewWorkingFolder@1000 : Text);
    BEGIN
      WorkingFolder := NewWorkingFolder;
    END;

    [External]
    PROCEDURE SetExcelMode@21(NewExcelMode@1000 : Boolean);
    BEGIN
      ExcelMode := NewExcelMode;
    END;

    [External]
    PROCEDURE SetHideDialog@1(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    [External]
    PROCEDURE SetExportFromWksht@17(NewExportFromWksht@1000 : Boolean);
    BEGIN
      ExportFromWksht := NewExportFromWksht;
    END;

    [External]
    PROCEDURE SetPrefixMode@125(PrefixMode@1000 : Boolean);
    BEGIN
      AddPrefixMode := PrefixMode;
    END;

    [External]
    PROCEDURE TableObjectExists@18(TableId@1000 : Integer) : Boolean;
    VAR
      AllObj@1001 : Record AllObj;
    BEGIN
      exit(AllObj.GET(AllObj."Object Type"::Table,TableId));
    END;

    [Internal]
    PROCEDURE DecompressPackage@6(ServerFileName@1000 : Text) DecompressedFileName : Text;
    BEGIN
      DecompressedFileName := FileManagement.ServerTempFileName('');
      if not ConfigPckgCompressionMgt.ServersideDecompress(ServerFileName,DecompressedFileName) then
        ERROR(WrongFileTypeErr);
    END;

    LOCAL PROCEDURE UploadXMLPackage@23(ServerFileName@1000 : Text) : Boolean;
    BEGIN
      exit(UPLOAD(Text028,'',GetFileDialogFilter,'',ServerFileName));
    END;

    [External]
    PROCEDURE GetFileDialogFilter@15() : Text;
    BEGIN
      exit(FileDialogFilterTxt);
    END;

    LOCAL PROCEDURE ConvertBLOBToBase64String@25(VAR FieldRef@1000 : FieldRef) : Text;
    VAR
      TempBlob@1001 : Record TempBlob;
    BEGIN
      FieldRef.CALCFIELD;
      TempBlob.Blob := FieldRef.VALUE;
      exit(TempBlob.ToBase64String);
    END;

    LOCAL PROCEDURE ExportMediaSet@29(VAR FieldRef@1000 : FieldRef) : Text;
    VAR
      TempConfigMediaBuffer@1004 : TEMPORARY Record "Config. Media Buffer";
      FilesExported@1003 : Integer;
      ItemPrefixPath@1002 : Text;
      MediaFolder@1001 : Text;
    BEGIN
      if ExcelMode then
        exit;

      if not GetMediaFolder(MediaFolder,WorkingFolder) then
        exit('');

      TempConfigMediaBuffer.INIT;
      TempConfigMediaBuffer."Media Set" := FieldRef.VALUE;
      TempConfigMediaBuffer.INSERT;
      if TempConfigMediaBuffer."Media Set".COUNT = 0 then
        exit;

      ItemPrefixPath := MediaFolder + '\' + FORMAT(TempConfigMediaBuffer."Media Set");
      FilesExported := TempConfigMediaBuffer."Media Set".EXPORTFILE(ItemPrefixPath);
      if FilesExported <= 0 then
        exit('');

      exit(FORMAT(FieldRef.VALUE));
    END;

    LOCAL PROCEDURE ExportMedia@27(VAR FieldRef@1000 : FieldRef;ConfigPackage@1002 : Record "Config. Package") : Text;
    VAR
      ConfigMediaBuffer@1001 : Record "Config. Media Buffer";
      TempConfigMediaBuffer@1003 : TEMPORARY Record "Config. Media Buffer";
      MediaOutStream@1004 : OutStream;
      MediaIDGuidText@1005 : Text;
      BlankGuid@1006 : GUID;
    BEGIN
      if ExcelMode then
        exit;

      MediaIDGuidText := FORMAT(FieldRef.VALUE);
      if (MediaIDGuidText = '') or (MediaIDGuidText = FORMAT(BlankGuid)) then
        exit;

      ConfigMediaBuffer.INIT;
      ConfigMediaBuffer."Package Code" := ConfigPackage.Code;
      ConfigMediaBuffer."No." := ConfigMediaBuffer.GetNextNo;
      ConfigMediaBuffer."Media ID" := MediaIDGuidText;
      ConfigMediaBuffer.INSERT;

      ConfigMediaBuffer."Media Blob".CREATEOUTSTREAM(MediaOutStream);

      TempConfigMediaBuffer.INIT;
      TempConfigMediaBuffer.Media := FieldRef.VALUE;
      TempConfigMediaBuffer.INSERT;
      TempConfigMediaBuffer.Media.EXPORTSTREAM(MediaOutStream);

      ConfigMediaBuffer.MODIFY;

      exit(MediaIDGuidText);
    END;

    LOCAL PROCEDURE GetConfigPackageDataValue@28(VAR ConfigPackageData@1002 : Record "Config. Package Data";VAR RecordNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";FieldNodeName@1000 : Text[250]);
    VAR
      TempBlob@1003 : Record TempBlob;
    BEGIN
      if ConfigPackageMgt.IsBLOBField(ConfigPackageData."Table ID",ConfigPackageData."Field ID") and not ExcelMode then begin
        TempBlob.FromBase64String(GetNodeValue(RecordNode,FieldNodeName));
        ConfigPackageData."BLOB Value" := TempBlob.Blob;
      end else
        ConfigPackageData.Value := COPYSTR(GetNodeValue(RecordNode,FieldNodeName),1,MAXSTRLEN(ConfigPackageData.Value));
    END;

    LOCAL PROCEDURE UpdateConfigPackageMediaSet@40(ConfigPackage@1001 : Record "Config. Package");
    VAR
      TempNameValueBuffer@1007 : TEMPORARY Record "Name/Value Buffer";
      FileManagement@1006 : Codeunit "File Management";
      MediaFolder@1002 : Text;
    BEGIN
      if not GetMediaFolder(MediaFolder,WorkingFolder) then
        exit;

      FileManagement.GetServerDirectoryFilesList(TempNameValueBuffer,MediaFolder);
      if not TempNameValueBuffer.FINDSET then
        exit;

      repeat
        ImportMediaSetFromFile(ConfigPackage,TempNameValueBuffer.Name);
      until TempNameValueBuffer.NEXT = 0;

      FileManagement.ServerRemoveDirectory(MediaFolder,true);
    END;

    LOCAL PROCEDURE ExportConfigPackageMediaSetToXML@51(VAR PackageXML@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ConfigPackage@1002 : Record "Config. Package");
    VAR
      ConfigMediaBuffer@1000 : Record "Config. Media Buffer";
      ConfigPackageTable@1003 : Record "Config. Package Table";
      ConfigPackageManagement@1001 : Codeunit "Config. Package Management";
    BEGIN
      if ConfigMediaBuffer.ISEMPTY then
        exit;

      ConfigPackageManagement.InsertPackageTable(ConfigPackageTable,ConfigPackage.Code,DATABASE::"Config. Media Buffer");
      ConfigPackageTable.CALCFIELDS("Table Name");
      ExportConfigTableToXML(ConfigPackageTable,PackageXML);
    END;

    LOCAL PROCEDURE ImportMediaSetFromFile@67(ConfigPackage@1005 : Record "Config. Package";FileName@1000 : Text);
    VAR
      TempBlob@1002 : TEMPORARY Record TempBlob;
      ConfigMediaBuffer@1004 : Record "Config. Media Buffer";
      FileManagement@1001 : Codeunit "File Management";
      DummyGuid@1003 : GUID;
    BEGIN
      ConfigMediaBuffer.INIT;
      FileManagement.BLOBImportFromServerFile(TempBlob,FileName);
      ConfigMediaBuffer."Media Blob" := TempBlob.Blob;
      ConfigMediaBuffer."Package Code" := ConfigPackage.Code;
      ConfigMediaBuffer."Media Set ID" := COPYSTR(FileManagement.GetFileNameWithoutExtension(FileName),1,STRLEN(FORMAT(DummyGuid)));
      ConfigMediaBuffer."No." := ConfigMediaBuffer.GetNextNo;
      ConfigMediaBuffer.INSERT;
    END;

    LOCAL PROCEDURE CleanUpConfigPackageData@39(ConfigPackage@1000 : Record "Config. Package");
    VAR
      ConfigMediaBuffer@1001 : Record "Config. Media Buffer";
    BEGIN
      ConfigMediaBuffer.SETRANGE("Package Code",ConfigPackage.Code);
      ConfigMediaBuffer.DELETEALL;
    END;

    BEGIN
    END.
  }
}

