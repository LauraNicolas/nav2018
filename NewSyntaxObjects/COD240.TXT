OBJECT Codeunit 240 ItemJnlManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Item Journal Template"=imd,
                TableData "Item Journal Batch"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 journal';
      Text001@1001 : TextConst 'ENU=RECURRING';
      Text002@1002 : TextConst 'ENU=Recurring Item Journal';
      Text003@1003 : TextConst 'ENU=DEFAULT';
      Text004@1004 : TextConst 'ENU=Default Journal';
      OldItemNo@1005 : Code[20];
      OldCapNo@1007 : Code[20];
      OldCapType@1006 : '"Work Center","Machine Center"';
      OldProdOrderNo@1009 : Code[20];
      OldOperationNo@1008 : Code[20];
      Text005@1010 : TextConst 'ENU=REC-';
      Text006@1011 : TextConst 'ENU="Recurring "';
      OpenFromBatch@1012 : Boolean;

    [External]
    PROCEDURE TemplateSelection@1(PageID@1005 : Integer;PageTemplate@1000 : 'Item,Transfer,"Phys. Inventory",Revaluation,Consumption,Output,Capacity,"Prod. Order"';RecurringJnl@1001 : Boolean;VAR ItemJnlLine@1004 : Record "Item Journal Line";VAR JnlSelected@1003 : Boolean);
    VAR
      ItemJnlTemplate@1002 : Record "Item Journal Template";
    BEGIN
      JnlSelected := true;

      ItemJnlTemplate.RESET;
      ItemJnlTemplate.SETRANGE("Page ID",PageID);
      ItemJnlTemplate.SETRANGE(Recurring,RecurringJnl);
      ItemJnlTemplate.SETRANGE(Type,PageTemplate);

      case ItemJnlTemplate.COUNT of
        0:
          begin
            ItemJnlTemplate.INIT;
            ItemJnlTemplate.Recurring := RecurringJnl;
            ItemJnlTemplate.VALIDATE(Type,PageTemplate);
            ItemJnlTemplate.VALIDATE("Page ID");
            if not RecurringJnl then begin
              ItemJnlTemplate.Name := FORMAT(ItemJnlTemplate.Type,MAXSTRLEN(ItemJnlTemplate.Name));
              ItemJnlTemplate.Description := STRSUBSTNO(Text000,ItemJnlTemplate.Type);
            end else
              if ItemJnlTemplate.Type = ItemJnlTemplate.Type::Item then begin
                ItemJnlTemplate.Name := Text001;
                ItemJnlTemplate.Description := Text002;
              end else begin
                ItemJnlTemplate.Name :=
                  Text005 + FORMAT(ItemJnlTemplate.Type,MAXSTRLEN(ItemJnlTemplate.Name) - STRLEN(Text005));
                ItemJnlTemplate.Description := Text006 + STRSUBSTNO(Text000,ItemJnlTemplate.Type);
              end;
            ItemJnlTemplate.INSERT;
            COMMIT;
          end;
        1:
          ItemJnlTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,ItemJnlTemplate) = ACTION::LookupOK;
      end;
      if JnlSelected then begin
        ItemJnlLine.FILTERGROUP := 2;
        ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlTemplate.Name);
        ItemJnlLine.FILTERGROUP := 0;
        if OpenFromBatch then begin
          ItemJnlLine."Journal Template Name" := '';
          PAGE.RUN(ItemJnlTemplate."Page ID",ItemJnlLine);
        end;
      end;
    END;

    [External]
    PROCEDURE TemplateSelectionFromBatch@10(VAR ItemJnlBatch@1000 : Record "Item Journal Batch");
    VAR
      ItemJnlLine@1002 : Record "Item Journal Line";
      ItemJnlTemplate@1003 : Record "Item Journal Template";
    BEGIN
      OpenFromBatch := true;
      ItemJnlTemplate.GET(ItemJnlBatch."Journal Template Name");
      ItemJnlTemplate.TESTFIELD("Page ID");
      ItemJnlBatch.TESTFIELD(Name);

      ItemJnlLine.FILTERGROUP := 2;
      ItemJnlLine.SETRANGE("Journal Template Name",ItemJnlTemplate.Name);
      ItemJnlLine.FILTERGROUP := 0;

      ItemJnlLine."Journal Template Name" := '';
      ItemJnlLine."Journal Batch Name" := ItemJnlBatch.Name;
      PAGE.RUN(ItemJnlTemplate."Page ID",ItemJnlLine);
    END;

    [External]
    PROCEDURE OpenJnl@2(VAR CurrentJnlBatchName@1000 : Code[10];VAR ItemJnlLine@1001 : Record "Item Journal Line");
    BEGIN
      CheckTemplateName(ItemJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
      ItemJnlLine.FILTERGROUP := 2;
      ItemJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      ItemJnlLine.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE OpenJnlBatch@12(VAR ItemJnlBatch@1000 : Record "Item Journal Batch");
    VAR
      ItemJnlTemplate@1002 : Record "Item Journal Template";
      ItemJnlLine@1003 : Record "Item Journal Line";
      JnlSelected@1004 : Boolean;
    BEGIN
      if ItemJnlBatch.GETFILTER("Journal Template Name") <> '' then
        exit;
      ItemJnlBatch.FILTERGROUP(2);
      if ItemJnlBatch.GETFILTER("Journal Template Name") <> '' then begin
        ItemJnlBatch.FILTERGROUP(0);
        exit;
      end;
      ItemJnlBatch.FILTERGROUP(0);

      if not ItemJnlBatch.FIND('-') then
        for ItemJnlTemplate.Type := ItemJnlTemplate.Type::Item to ItemJnlTemplate.Type::"Prod. Order" do begin
          ItemJnlTemplate.SETRANGE(Type,ItemJnlTemplate.Type);
          if not ItemJnlTemplate.FINDFIRST then
            TemplateSelection(0,ItemJnlTemplate.Type,false,ItemJnlLine,JnlSelected);
          if ItemJnlTemplate.FINDFIRST then
            CheckTemplateName(ItemJnlTemplate.Name,ItemJnlBatch.Name);
          if ItemJnlTemplate.Type in [ItemJnlTemplate.Type::Item,
                                      ItemJnlTemplate.Type::Consumption,
                                      ItemJnlTemplate.Type::Output,
                                      ItemJnlTemplate.Type::Capacity]
          then begin
            ItemJnlTemplate.SETRANGE(Recurring,true);
            if not ItemJnlTemplate.FINDFIRST then
              TemplateSelection(0,ItemJnlTemplate.Type,true,ItemJnlLine,JnlSelected);
            if ItemJnlTemplate.FINDFIRST then
              CheckTemplateName(ItemJnlTemplate.Name,ItemJnlBatch.Name);
            ItemJnlTemplate.SETRANGE(Recurring);
          end;
        end;

      ItemJnlBatch.FIND('-');
      JnlSelected := true;
      ItemJnlBatch.CALCFIELDS("Template Type",Recurring);
      ItemJnlTemplate.SETRANGE(Recurring,ItemJnlBatch.Recurring);
      if not ItemJnlBatch.Recurring then
        ItemJnlTemplate.SETRANGE(Type,ItemJnlBatch."Template Type");
      if ItemJnlBatch.GETFILTER("Journal Template Name") <> '' then
        ItemJnlTemplate.SETRANGE(Name,ItemJnlBatch.GETFILTER("Journal Template Name"));
      case ItemJnlTemplate.COUNT of
        1:
          ItemJnlTemplate.FINDFIRST;
        else
          JnlSelected := PAGE.RUNMODAL(0,ItemJnlTemplate) = ACTION::LookupOK;
      end;
      if not JnlSelected then
        ERROR('');

      ItemJnlBatch.FILTERGROUP(2);
      ItemJnlBatch.SETRANGE("Journal Template Name",ItemJnlTemplate.Name);
      ItemJnlBatch.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE CheckTemplateName@3(CurrentJnlTemplateName@1000 : Code[10];VAR CurrentJnlBatchName@1001 : Code[10]);
    VAR
      ItemJnlBatch@1002 : Record "Item Journal Batch";
    BEGIN
      ItemJnlBatch.SETRANGE("Journal Template Name",CurrentJnlTemplateName);
      if not ItemJnlBatch.GET(CurrentJnlTemplateName,CurrentJnlBatchName) then begin
        if not ItemJnlBatch.FINDFIRST then begin
          ItemJnlBatch.INIT;
          ItemJnlBatch."Journal Template Name" := CurrentJnlTemplateName;
          ItemJnlBatch.SetupNewBatch;
          ItemJnlBatch.Name := Text003;
          ItemJnlBatch.Description := Text004;
          ItemJnlBatch.INSERT(true);
          COMMIT;
        end;
        CurrentJnlBatchName := ItemJnlBatch.Name
      end;
    END;

    [External]
    PROCEDURE CheckName@4(CurrentJnlBatchName@1000 : Code[10];VAR ItemJnlLine@1001 : Record "Item Journal Line");
    VAR
      ItemJnlBatch@1002 : Record "Item Journal Batch";
    BEGIN
      ItemJnlBatch.GET(ItemJnlLine.GETRANGEMAX("Journal Template Name"),CurrentJnlBatchName);
    END;

    [External]
    PROCEDURE SetName@5(CurrentJnlBatchName@1000 : Code[10];VAR ItemJnlLine@1001 : Record "Item Journal Line");
    BEGIN
      ItemJnlLine.FILTERGROUP := 2;
      ItemJnlLine.SETRANGE("Journal Batch Name",CurrentJnlBatchName);
      ItemJnlLine.FILTERGROUP := 0;
      if ItemJnlLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupName@6(VAR CurrentJnlBatchName@1000 : Code[10];VAR ItemJnlLine@1001 : Record "Item Journal Line");
    VAR
      ItemJnlBatch@1002 : Record "Item Journal Batch";
    BEGIN
      COMMIT;
      ItemJnlBatch."Journal Template Name" := ItemJnlLine.GETRANGEMAX("Journal Template Name");
      ItemJnlBatch.Name := ItemJnlLine.GETRANGEMAX("Journal Batch Name");
      ItemJnlBatch.FILTERGROUP(2);
      ItemJnlBatch.SETRANGE("Journal Template Name",ItemJnlBatch."Journal Template Name");
      ItemJnlBatch.FILTERGROUP(0);
      if PAGE.RUNMODAL(0,ItemJnlBatch) = ACTION::LookupOK then begin
        CurrentJnlBatchName := ItemJnlBatch.Name;
        SetName(CurrentJnlBatchName,ItemJnlLine);
      end;
    END;

    [External]
    PROCEDURE GetItem@7(ItemNo@1000 : Code[20];VAR ItemDescription@1001 : Text[50]);
    VAR
      Item@1002 : Record Item;
    BEGIN
      if ItemNo <> OldItemNo then begin
        ItemDescription := '';
        if ItemNo <> '' then
          if Item.GET(ItemNo) then
            ItemDescription := Item.Description;
        OldItemNo := ItemNo;
      end;
    END;

    [External]
    PROCEDURE GetConsump@13(VAR ItemJnlLine@1000 : Record "Item Journal Line";VAR ProdOrderDescription@1001 : Text[50]);
    VAR
      ProdOrder@1002 : Record "Production Order";
    BEGIN
      if (ItemJnlLine."Order Type" = ItemJnlLine."Order Type"::Production) and (ItemJnlLine."Order No." <> OldProdOrderNo) then begin
        ProdOrderDescription := '';
        if ProdOrder.GET(ProdOrder.Status::Released,ItemJnlLine."Order No.") then
          ProdOrderDescription := ProdOrder.Description;
        OldProdOrderNo := ProdOrder."No.";
      end;
    END;

    [External]
    PROCEDURE GetOutput@11(VAR ItemJnlLine@1000 : Record "Item Journal Line";VAR ProdOrderDescription@1001 : Text[50];VAR OperationDescription@1002 : Text[50]);
    VAR
      ProdOrder@1003 : Record "Production Order";
      ProdOrderRtngLine@1004 : Record "Prod. Order Routing Line";
    BEGIN
      if (ItemJnlLine."Operation No." <> OldOperationNo) or
         ((ItemJnlLine."Order Type" = ItemJnlLine."Order Type"::Production) and (ItemJnlLine."Order No." <> OldProdOrderNo))
      then begin
        OperationDescription := '';
        if ProdOrderRtngLine.GET(
             ProdOrder.Status::Released,
             ItemJnlLine."Order No.",
             ItemJnlLine."Routing Reference No.",
             ItemJnlLine."Routing No.",
             ItemJnlLine."Operation No.")
        then
          OperationDescription := ProdOrderRtngLine.Description;
        OldOperationNo := ProdOrderRtngLine."Operation No.";
      end;

      if (ItemJnlLine."Order Type" = ItemJnlLine."Order Type"::Production) and (ItemJnlLine."Order No." <> OldProdOrderNo) then begin
        ProdOrderDescription := '';
        if ProdOrder.GET(ProdOrder.Status::Released,ItemJnlLine."Order No.") then
          ProdOrderDescription := ProdOrder.Description;
        OldProdOrderNo := ProdOrder."No.";
      end;
    END;

    [External]
    PROCEDURE GetCapacity@9(CapType@1002 : '"Work Center","Machine Center"';CapNo@1001 : Code[20];VAR CapDescription@1000 : Text[50]);
    VAR
      WorkCenter@1004 : Record "Work Center";
      MachineCenter@1003 : Record "Machine Center";
    BEGIN
      if (CapNo <> OldCapNo) or (CapType <> OldCapType) then begin
        CapDescription := '';
        if CapNo <> '' then
          case CapType of
            CapType::"Work Center":
              if WorkCenter.GET(CapNo) then
                CapDescription := WorkCenter.Name;
            CapType::"Machine Center":
              if MachineCenter.GET(CapNo) then
                CapDescription := MachineCenter.Name;
          end;
        OldCapNo := CapNo;
        OldCapType := CapType;
      end;
    END;

    BEGIN
    END.
  }
}

