OBJECT Table 1670 Option Lookup Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Option Lookup Buffer;
    LookupPageID="Option Lookup List";
  }
  FIELDS
  {
    { 1   ;   ;ID                  ;Integer       ;CaptionML=ENU=ID;
                                                   Editable=false }
    { 2   ;   ;Option Caption      ;Text30        ;CaptionML=ENU=Option Caption;
                                                   Editable=false }
    { 3   ;   ;Lookup Type         ;Option        ;CaptionML=ENU=Lookup Type;
                                                   OptionCaptionML=ENU=Sales,Purchases;
                                                   OptionString=Sales,Purchases;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Option Caption"                        ;Clustered=true }
    {    ;ID                                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      UnsupportedTypeErr@1001 : TextConst 'ENU=Unsupported Lookup Type.';
      InvalidTypeErr@1000 : TextConst '@@@="%1 = Type caption. Fx. Item";ENU=''%1'' is not a valid type for this document.';

    PROCEDURE FillBuffer@1(LookupType@1007 : Option);
    VAR
      SalesLine@1000 : Record "Sales Line";
      PurchaseLine@1003 : Record "Purchase Line";
    BEGIN
      case LookupType of
        "Lookup Type"::Sales:
          FillBufferInternal(DATABASE::"Sales Line",SalesLine.FIELDNO(Type),SalesLine.FIELDNO("No."),LookupType);
        "Lookup Type"::Purchases:
          FillBufferInternal(DATABASE::"Purchase Line",PurchaseLine.FIELDNO(Type),PurchaseLine.FIELDNO("No."),LookupType);
        else
          ERROR(UnsupportedTypeErr);
      end;
    END;

    PROCEDURE AutoCompleteOption@2(VAR Option@1000 : Text[30];LookupType@1001 : Option) : Boolean;
    VAR
      SalesLine@1002 : Record "Sales Line";
      PurchaseLine@1003 : Record "Purchase Line";
    BEGIN
      Option := DELCHR(Option,'<>');
      if Option = '' then
        case LookupType of
          "Lookup Type"::Sales:
            Option := SalesLine.FormatType;
          "Lookup Type"::Purchases:
            Option := PurchaseLine.FormatType;
          else
            exit(false);
        end;

      SETRANGE("Option Caption");
      if ISEMPTY then
        FillBuffer(LookupType);

      SETRANGE("Option Caption",Option);
      if FINDFIRST then
        exit(true);

      SETFILTER("Option Caption",'%1','@' + Option + '*');
      if FINDFIRST then begin
        Option := "Option Caption";
        exit(true);
      end;

      SETFILTER("Option Caption",'%1','@*' + Option + '*');
      if not FINDFIRST then
        exit(false);

      Option := "Option Caption";
      exit(true);
    END;

    PROCEDURE ValidateOption@4(Option@1000 : Text[30]);
    BEGIN
      SETRANGE("Option Caption",Option);
      if ISEMPTY then
        ERROR(InvalidTypeErr,Option);

      SETRANGE("Option Caption");
    END;

    PROCEDURE FormatOption@17(FieldRef@1000 : FieldRef) : Text[30];
    VAR
      SalesLine@1001 : Record "Sales Line";
      PurchaseLine@1002 : Record "Purchase Line";
      Option@1003 : Option;
    BEGIN
      Option := FieldRef.VALUE;
      case FieldRef.RECORD.NUMBER of
        DATABASE::"Sales Line", DATABASE::"Standard Sales Line":
          if Option = SalesLine.Type::" " then
            exit(SalesLine.FormatType);
        DATABASE::"Purchase Line", DATABASE::"Standard Purchase Line":
          if Option = PurchaseLine.Type::" " then
            exit(PurchaseLine.FormatType);
      end;

      exit(FORMAT(FieldRef));
    END;

    LOCAL PROCEDURE CreateNew@6(OptionID@1000 : Integer;OptionText@1002 : Text[30];LookupType@1003 : Option);
    BEGIN
      INIT;
      ID := OptionID;
      "Option Caption" := OptionText;
      "Lookup Type" := LookupType;
      INSERT;
    END;

    LOCAL PROCEDURE FillBufferInternal@3(TableNo@1010 : Integer;FieldNo@1006 : Integer;RelationFieldNo@1007 : Integer;LookupType@1009 : Option);
    VAR
      TypeHelper@1005 : Codeunit "Type Helper";
      RecRef@1004 : RecordRef;
      RelatedRecRef@1003 : RecordRef;
      FieldRef@1002 : FieldRef;
      FieldRefRelation@1008 : FieldRef;
      OptionIndex@1001 : Integer;
      RelatedTableNo@1000 : Integer;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      for OptionIndex := 0 to TypeHelper.GetNumberOfOptions(FieldRef.OPTIONSTRING) do begin
        FieldRef.VALUE(OptionIndex);
        if IncludeOption(LookupType,OptionIndex) then begin
          FieldRefRelation := RecRef.FIELD(RelationFieldNo);
          RelatedTableNo := FieldRefRelation.RELATION;
          if RelatedTableNo = 0 then
            CreateNew(OptionIndex,FormatOption(FieldRef),LookupType)
          else begin
            RelatedRecRef.OPEN(RelatedTableNo);
            if RelatedRecRef.READPERMISSION then
              CreateNew(OptionIndex,FormatOption(FieldRef),LookupType);
            RelatedRecRef.CLOSE;
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE IncludeOption@7(LookupType@1000 : Option;Option@1001 : Integer) : Boolean;
    VAR
      SalesLine@1002 : Record "Sales Line";
      PurchaseLine@1003 : Record "Purchase Line";
      ApplicationAreaSetup@1004 : Record "Application Area Setup";
    BEGIN
      case LookupType of
        "Lookup Type"::Sales:
          case Option of
            SalesLine.Type::" ",SalesLine.Type::"G/L Account",SalesLine.Type::Item:
              exit(true);
            SalesLine.Type::"Charge (Item)":
              if ApplicationAreaSetup.IsItemChargesEnabled then
                exit(true);
          end;
        "Lookup Type"::Purchases:
          case Option of
            PurchaseLine.Type::" ",PurchaseLine.Type::"G/L Account",PurchaseLine.Type::Item:
              exit(true);
            PurchaseLine.Type::"Charge (Item)":
              if ApplicationAreaSetup.IsItemChargesEnabled then
                exit(true);
          end;
      end;
    END;

    BEGIN
    END.
  }
}

