OBJECT Codeunit 8617 Config. Validate Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1010 : TextConst 'ENU=Field %2 in table %1 can only contain %3 characters (%4).';
      Text002@1009 : TextConst 'ENU=%1 is not a supported data type.';
      Text003@1008 : TextConst 'ENU=%1 is not a valid %2.';
      Text004@1011 : TextConst 'ENU=%1 is not a valid option.\Valid options are %2.';

    [External]
    PROCEDURE ValidateFieldValue@16(VAR RecRef@1015 : RecordRef;VAR FieldRef@1000 : FieldRef;Value@1001 : Text;SkipValidation@1003 : Boolean;LanguageID@1006 : Integer);
    VAR
      Field@1014 : Record Field;
      OldValue@1004 : Variant;
      NewValue@1005 : Variant;
      OptionAsInteger@1002 : Integer;
      MainLanguageID@1007 : Integer;
    BEGIN
      MainLanguageID := GLOBALLANGUAGE;

      if (LanguageID <> 0) and (LanguageID <> GLOBALLANGUAGE) then
        GLOBALLANGUAGE(LanguageID);

      Field.GET(RecRef.NUMBER,FieldRef.NUMBER);

      if Field.Class <> Field.Class::Normal then
        exit;

      if not SkipValidation then
        OldValue := FieldRef.VALUE;

      if Field.Type <> Field.Type::Option then begin
        if Value <> '' then
          EVALUATE(FieldRef,Value)
      end else begin
        OptionAsInteger := GetOptionNo(Value,FieldRef.OPTIONCAPTION);
        if OptionAsInteger <> -1 then
          FieldRef.VALUE := OptionAsInteger;
      end;

      if not SkipValidation then begin
        NewValue := FieldRef.VALUE;
        FieldRef.VALUE := OldValue;
        FieldRef.VALIDATE(NewValue);
      end;

      if MainLanguageID <> GLOBALLANGUAGE then
        GLOBALLANGUAGE(MainLanguageID);
    END;

    LOCAL PROCEDURE GetOptionsNumber@11(OptionString@1000 : Text) : Integer;
    VAR
      TypeHelper@1001 : Codeunit "Type Helper";
    BEGIN
      exit(TypeHelper.GetNumberOfOptions(OptionString));
    END;

    [External]
    PROCEDURE OptionNoExists@7(VAR FieldRef@1000 : FieldRef;OptionValue@1006 : Text) : Boolean;
    VAR
      OptionNo@1004 : Integer;
    BEGIN
      if EVALUATE(OptionNo,OptionValue) then
        if OptionNo >= 0 then
          exit(OptionNo <= GetOptionsNumber(FieldRef.OPTIONCAPTION));
      exit(false);
    END;

    [External]
    PROCEDURE GetOptionNo@20(Value@1007 : Text;OptionString@1006 : Text) : Integer;
    VAR
      TypeHelper@1000 : Codeunit "Type Helper";
    BEGIN
      exit(TypeHelper.GetOptionNo(Value,OptionString));
    END;

    [Internal]
    PROCEDURE GetRelationInfoByIDs@45(TableNo@1010 : Integer;FieldNo@1009 : Integer;VAR RelationTableNo@1000 : Integer;VAR RelationFieldNo@1001 : Integer) : Boolean;
    VAR
      Field@1008 : Record Field;
      RecRef@1003 : RecordRef;
      RecRef2@1006 : RecordRef;
      FieldRef2@1005 : FieldRef;
      FieldRef@1002 : FieldRef;
      KeyRef2@1007 : KeyRef;
    BEGIN
      Field.GET(TableNo,FieldNo);
      if Field.RelationTableNo = 0 then
        exit(false);

      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);

      RecRef2.OPEN(Field.RelationTableNo);

      if Field.RelationFieldNo <> 0 then
        FieldRef2 := RecRef2.FIELD(Field.RelationFieldNo)
      else begin
        KeyRef2 := RecRef2.KEYINDEX(1);
        if KeyRef2.FIELDCOUNT > 1 then
          exit(false);
        FieldRef2 := KeyRef2.FIELDINDEX(1);
      end;

      if (FieldRef2.TYPE <> FieldRef.TYPE) or (FieldRef2.LENGTH <> FieldRef.LENGTH) then
        exit(false);

      RelationTableNo := Field.RelationTableNo;
      RelationFieldNo := FieldRef2.NUMBER;
      exit(true);
    END;

    [Internal]
    PROCEDURE GetRelationTableID@1(TableID@1001 : Integer;FieldID@1003 : Integer) : Integer;
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1000 : FieldRef;
    BEGIN
      RecRef.OPEN(TableID);
      if RecRef.FIELDEXIST(FieldID) then begin
        FieldRef := RecRef.FIELD(FieldID);
        exit(FieldRef.RELATION);
      end;
    END;

    [Internal]
    PROCEDURE IsRelationInKeyFields@2(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Boolean;
    VAR
      RecRef@1004 : RecordRef;
      FieldRef@1003 : FieldRef;
      KeyRef@1002 : KeyRef;
      I@1005 : Integer;
    BEGIN
      RecRef.OPEN(TableNo);
      KeyRef := RecRef.KEYINDEX(1);

      for I := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := KeyRef.FIELDINDEX(I);
        if FieldRef.NUMBER = FieldNo then
          exit(true);
      end;
    END;

    [Internal]
    PROCEDURE ValidateFieldRefRelationAgainstCompanyData@44(FieldRef@1009 : FieldRef;VAR ConfigPackageFieldOrder@1001 : Record "Config. Package Field") : Text[250];
    VAR
      ConfigTryValidate@1005 : Codeunit "Config. Try Validate";
      RecRef@1000 : RecordRef;
      RecRef2@1003 : RecordRef;
      FieldRef2@1004 : FieldRef;
    BEGIN
      RecRef := FieldRef.RECORD;

      RecRef2.OPEN(RecRef.NUMBER,true);
      CopyRecRefFields(RecRef2,RecRef,FieldRef,ConfigPackageFieldOrder);
      RecRef2.INSERT;

      FieldRef2 := RecRef2.FIELD(FieldRef.NUMBER);

      ConfigTryValidate.SetValidateParameters(FieldRef2,FieldRef.VALUE);

      COMMIT;
      if not ConfigTryValidate.RUN then
        exit(COPYSTR(GETLASTERRORTEXT,1,250));

      exit('');
    END;

    LOCAL PROCEDURE CopyRecRefFields@55(RecRef@1000 : RecordRef;SourceRecRef@1001 : RecordRef;FieldRefToExclude@1005 : FieldRef;VAR ConfigPackageFieldOrder@1006 : Record "Config. Package Field");
    VAR
      FieldRef@1003 : FieldRef;
      SourceFieldRef@1004 : FieldRef;
    BEGIN
      ConfigPackageFieldOrder.RESET;
      ConfigPackageFieldOrder.SETCURRENTKEY("Package Code","Table ID","Processing Order");
      if ConfigPackageFieldOrder.FINDSET then
        repeat
          SourceFieldRef := SourceRecRef.FIELD(ConfigPackageFieldOrder."Field ID");
          if FieldRefToExclude.NAME = SourceFieldRef.NAME then
            exit;
          FieldRef := RecRef.FIELD(ConfigPackageFieldOrder."Field ID");
          FieldRef.VALUE := SourceFieldRef.VALUE;
        until ConfigPackageFieldOrder.NEXT = 0;
    END;

    [Internal]
    PROCEDURE EvaluateValue@5(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];XMLValue@1015 : Boolean) : Text[250];
    BEGIN
      exit(EvaluateValueBase(FieldRef,Value,XMLValue,false));
    END;

    [Internal]
    PROCEDURE EvaluateValueWithValidate@15(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];XMLValue@1015 : Boolean) : Text[250];
    BEGIN
      exit(EvaluateValueBase(FieldRef,Value,XMLValue,true));
    END;

    LOCAL PROCEDURE EvaluateValueBase@8(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];XMLValue@1015 : Boolean;Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FieldRef.TYPE));

      if (Value <> '') and not IsNormalField(FieldRef) then
        exit(Text002);

      case Field.Type of
        Field.Type::Text:
          exit(EvaluateValueToText(FieldRef,Value,Validate));
        Field.Type::Code:
          exit(EvaluateValueToCode(FieldRef,Value,Validate));
        Field.Type::Option:
          exit(EvaluateValueToOption(FieldRef,Value,XMLValue,Validate));
        Field.Type::Date:
          exit(EvaluateValueToDate(FieldRef,Value,Validate));
        Field.Type::DateFormula:
          exit(EvaluateValueToDateFormula(FieldRef,Value,Validate));
        Field.Type::DateTime:
          exit(EvaluateValueToDateTime(FieldRef,Value,Validate));
        Field.Type::Time:
          exit(EvaluateValueToTime(FieldRef,Value,Validate));
        Field.Type::Duration:
          exit(EvaluateValueToDuration(FieldRef,Value,Validate));
        Field.Type::Integer:
          exit(EvaluateValueToInteger(FieldRef,Value,Validate));
        Field.Type::BigInteger:
          exit(EvaluateValueToBigInteger(FieldRef,Value,Validate));
        Field.Type::Decimal:
          exit(EvaluateValueToDecimal(FieldRef,Value,Validate));
        Field.Type::Boolean:
          exit(EvaluateValueToBoolean(FieldRef,Value,Validate));
        Field.Type::GUID,
        Field.Type::MediaSet,
        Field.Type::Media:
          exit(EvaluateValueToGuid(FieldRef,Value,Validate));
        Field.Type::TableFilter:
          exit(EvaluateValueToTableFilter(FieldRef,Value));
      end;
    END;

    LOCAL PROCEDURE EvaluateValueToText@9(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      RecordRef@1003 : RecordRef;
    BEGIN
      RecordRef := FieldRef.RECORD;
      Field.GET(RecordRef.NUMBER,FieldRef.NUMBER);

      if STRLEN(Value) > Field.Len then
        exit(STRSUBSTNO(Text001,FieldRef.RECORD.CAPTION,FieldRef.CAPTION,Field.Len,Value));

      if Validate then
        FieldRef.VALIDATE(Value)
      else
        FieldRef.VALUE := Value;
    END;

    LOCAL PROCEDURE EvaluateValueToCode@29(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      RecordRef@1003 : RecordRef;
      Code@1004 : Code[250];
    BEGIN
      Code := Value;
      RecordRef := FieldRef.RECORD;
      Field.GET(RecordRef.NUMBER,FieldRef.NUMBER);

      if STRLEN(Value) > Field.Len then
        exit(STRSUBSTNO(Text001,FieldRef.RECORD.CAPTION,FieldRef.CAPTION,Field.Len,Value));

      if Validate then
        FieldRef.VALIDATE(Code)
      else
        FieldRef.VALUE := Code;
    END;

    LOCAL PROCEDURE EvaluateValueToOption@39(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];XMLValue@1015 : Boolean;Validate@1017 : Boolean) : Text[250];
    VAR
      Integer@1010 : Integer;
    BEGIN
      Integer := -1;
      if XMLValue then begin
        if OptionNoExists(FieldRef,Value) then
          EVALUATE(Integer,Value);
      end else
        Integer := GetOptionNo(Value,FieldRef.OPTIONCAPTION);

      if Integer = -1 then
        exit(COPYSTR(STRSUBSTNO(Text004,Value,FieldRef.OPTIONCAPTION),1,250));

      if Validate then
        FieldRef.VALIDATE(Integer)
      else
        FieldRef.VALUE := Integer;
    END;

    LOCAL PROCEDURE EvaluateValueToDate@42(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      Date@1012 : Date;
      Decimal@1003 : Decimal;
    BEGIN
      if not EVALUATE(Date,Value) and not EVALUATE(Date,Value,XMLFormat) then
        if not EVALUATE(Decimal,Value) or not EVALUATE(Date,FORMAT(DT2DATE(OADateToDateTime(Decimal)))) then
          exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::Date)));

      if Validate then
        FieldRef.VALIDATE(Date)
      else
        FieldRef.VALUE := Date;
    END;

    LOCAL PROCEDURE EvaluateValueToDateFormula@47(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      DateFormula@1007 : DateFormula;
    BEGIN
      if not EVALUATE(DateFormula,Value) and not EVALUATE(DateFormula,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::DateFormula)));

      if Validate then
        FieldRef.VALIDATE(DateFormula)
      else
        FieldRef.VALUE := DateFormula;
    END;

    LOCAL PROCEDURE EvaluateValueToDateTime@50(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      DateTime@1003 : DateTime;
    BEGIN
      if not EVALUATE(DateTime,Value) and not EVALUATE(DateTime,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::DateTime)));

      if Validate then
        FieldRef.VALIDATE(DateTime)
      else
        FieldRef.VALUE := DateTime;
    END;

    LOCAL PROCEDURE EvaluateValueToTime@58(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      Time@1014 : Time;
      Decimal@1003 : Decimal;
    BEGIN
      if not EVALUATE(Time,Value) and not EVALUATE(Time,Value,XMLFormat) then
        if not EVALUATE(Decimal,Value) or not EVALUATE(Time,FORMAT(DT2TIME(OADateToDateTime(Decimal)))) then
          exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::Time)));

      if Validate then
        FieldRef.VALIDATE(Time)
      else
        FieldRef.VALUE := Time;
    END;

    LOCAL PROCEDURE EvaluateValueToDuration@64(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      Duration@1008 : Duration;
    BEGIN
      if not EVALUATE(Duration,Value) and not EVALUATE(Duration,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::Duration)));

      if Validate then
        FieldRef.VALIDATE(Duration)
      else
        FieldRef.VALUE := Duration;
    END;

    LOCAL PROCEDURE EvaluateValueToInteger@68(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      Integer@1010 : Integer;
    BEGIN
      if not EVALUATE(Integer,Value) and not EVALUATE(Integer,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::Integer)));

      if Validate then
        FieldRef.VALIDATE(Integer)
      else
        FieldRef.VALUE := Integer;
    END;

    LOCAL PROCEDURE EvaluateValueToBigInteger@72(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      BigInteger@1009 : BigInteger;
    BEGIN
      if not EVALUATE(BigInteger,Value) and not EVALUATE(BigInteger,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::BigInteger)));

      if Validate then
        FieldRef.VALIDATE(BigInteger)
      else
        FieldRef.VALUE := BigInteger;
    END;

    LOCAL PROCEDURE EvaluateValueToDecimal@76(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      Decimal@1006 : Decimal;
    BEGIN
      if not EVALUATE(Decimal,Value) and not EVALUATE(Decimal,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::Decimal)));

      if Validate then
        FieldRef.VALIDATE(Decimal)
      else
        FieldRef.VALUE := Decimal;
    END;

    LOCAL PROCEDURE EvaluateValueToBoolean@80(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      Boolean@1004 : Boolean;
    BEGIN
      if not EVALUATE(Boolean,Value) and not EVALUATE(Boolean,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::Boolean)));

      if Validate then
        FieldRef.VALIDATE(Boolean)
      else
        FieldRef.VALUE := Boolean;
    END;

    LOCAL PROCEDURE EvaluateValueToGuid@84(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250];Validate@1017 : Boolean) : Text[250];
    VAR
      Field@1001 : Record Field;
      Guid@1013 : GUID;
    BEGIN
      if not EVALUATE(Guid,Value) and not EVALUATE(Guid,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::GUID)));

      if Validate then
        FieldRef.VALIDATE(Guid)
      else
        FieldRef.VALUE := Guid;
    END;

    LOCAL PROCEDURE EvaluateValueToTableFilter@87(VAR FieldRef@1000 : FieldRef;Value@1002 : Text[250]) : Text[250];
    VAR
      Field@1001 : Record Field;
      TableFilter@1016 : Text;
    BEGIN
      if not EVALUATE(TableFilter,Value) and not EVALUATE(TableFilter,Value,XMLFormat) then
        exit(STRSUBSTNO(Text003,Value,FORMAT(Field.Type::TableFilter)));

      EVALUATE(FieldRef,TableFilter);
    END;

    LOCAL PROCEDURE IsNormalField@4(FieldRef@1000 : FieldRef) : Boolean;
    VAR
      Field@1001 : Record Field;
    BEGIN
      EVALUATE(Field.Type,FORMAT(FieldRef.TYPE));

      exit(UPPERCASE(FORMAT(FieldRef.CLASS)) = 'NORMAL');
    END;

    [External]
    PROCEDURE XMLFormat@6() : Integer;
    BEGIN
      exit(9);
    END;

    [Internal]
    PROCEDURE IsKeyField@30(TableID@1005 : Integer;FieldID@1006 : Integer) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
      KeyRef@1002 : KeyRef;
      FieldRef@1001 : FieldRef;
      KeyFieldCount@1000 : Integer;
    BEGIN
      RecRef.OPEN(TableID);
      KeyRef := RecRef.KEYINDEX(1);
      for KeyFieldCount := 1 to KeyRef.FIELDCOUNT do begin
        FieldRef := KeyRef.FIELDINDEX(KeyFieldCount);
        if FieldRef.NUMBER = FieldID then
          exit(true);
      end;

      exit(false);
    END;

    [External]
    PROCEDURE EvaluateTextToFieldRef@28(InputText@1001 : Text[250];VAR FieldRef@1000 : FieldRef;ToValidate@1002 : Boolean) : Boolean;
    BEGIN
      if (FORMAT(FieldRef.CLASS) = 'FlowField') or (FORMAT(FieldRef.CLASS) = 'FlowFilter') then
        exit(true);

      case FORMAT(FieldRef.TYPE) of
        'Option':
          exit(EvaluateTextToFieldRefOption(InputText,FieldRef,ToValidate));
        'Integer':
          exit(EvaluateTextToFieldRefInteger(InputText,FieldRef,ToValidate));
        'Decimal':
          exit(EvaluateTextToFieldRefDecimal(InputText,FieldRef,ToValidate));
        'Date':
          exit(EvaluateTextToFieldRefDate(InputText,FieldRef,ToValidate));
        'Time':
          exit(EvaluateTextToFieldRefTime(InputText,FieldRef,ToValidate));
        'DateTime':
          exit(EvaluateTextToFieldRefDateTime(InputText,FieldRef,ToValidate));
        'Boolean':
          exit(EvaluateTextToFieldRefBoolean(InputText,FieldRef,ToValidate));
        'Duration':
          exit(EvaluateTextToFieldRefDuration(InputText,FieldRef,ToValidate));
        'BigInteger':
          exit(EvaluateTextToFieldRefBigInteger(InputText,FieldRef,ToValidate));
        'GUID':
          exit(EvaluateTextToFieldRefGUID(InputText,FieldRef,ToValidate));
        'Code':
          exit(EvaluateTextToFieldRefCodeText(InputText,FieldRef,ToValidate));
        'Text':
          exit(EvaluateTextToFieldRefCodeText(InputText,FieldRef,ToValidate));
        'DateFormula':
          exit(EvaluateTextToFieldRefDateFormula(InputText,FieldRef,ToValidate));
        'TableFilter':
          exit(EvaluateTextToFieldRefTableFilter(InputText,FieldRef));
        else
          exit(false);
      end;

      exit(true);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefOption@10(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      IntVar@1004 : Integer;
      IntVar1@1003 : Integer;
    BEGIN
      IntVar := GetOptionNo(InputText,FieldRef.OPTIONCAPTION);
      if IntVar = -1 then
        exit(false);

      if ToValidate then begin
        IntVar1 := FieldRef.VALUE;
        if IntVar1 <> IntVar then
          FieldRef.VALIDATE(IntVar);
      end else
        FieldRef.VALUE := IntVar;

      exit(true);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefInteger@13(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      IntVar@1004 : Integer;
      IntVar1@1003 : Integer;
    BEGIN
      if EVALUATE(IntVar,InputText) then begin
        if ToValidate then begin
          IntVar1 := FieldRef.VALUE;
          if IntVar1 <> IntVar then
            FieldRef.VALIDATE(IntVar);
        end else
          FieldRef.VALUE := IntVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefDecimal@22(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      DecimalVar@1004 : Decimal;
      DecimalVar1@1003 : Decimal;
    BEGIN
      if EVALUATE(DecimalVar,InputText) then begin
        if ToValidate then begin
          DecimalVar1 := FieldRef.VALUE;
          if DecimalVar1 <> DecimalVar then
            FieldRef.VALIDATE(DecimalVar);
        end else
          FieldRef.VALUE := DecimalVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefDate@23(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      DateVar@1004 : Date;
      DateVar1@1003 : Date;
    BEGIN
      if EVALUATE(DateVar,InputText) then begin
        if ToValidate then begin
          DateVar1 := FieldRef.VALUE;
          if DateVar1 <> DateVar then
            FieldRef.VALIDATE(DateVar);
        end else
          FieldRef.VALUE := DateVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefTime@26(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      TimeVar@1004 : Time;
      TimeVar1@1003 : Time;
    BEGIN
      if EVALUATE(TimeVar,InputText) then begin
        if ToValidate then begin
          TimeVar1 := FieldRef.VALUE;
          if TimeVar1 <> TimeVar then
            FieldRef.VALIDATE(TimeVar);
        end else
          FieldRef.VALUE := TimeVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefDateTime@31(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      DateTimeVar@1004 : DateTime;
      DateTimeVar1@1003 : DateTime;
    BEGIN
      if EVALUATE(DateTimeVar,InputText) then begin
        if ToValidate then begin
          DateTimeVar1 := FieldRef.VALUE;
          if DateTimeVar1 <> DateTimeVar then
            FieldRef.VALIDATE(DateTimeVar);
        end else
          FieldRef.VALUE := DateTimeVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefBoolean@34(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      BoolVar@1004 : Boolean;
      BoolVar1@1003 : Boolean;
    BEGIN
      if EVALUATE(BoolVar,InputText) then begin
        if ToValidate then begin
          BoolVar1 := FieldRef.VALUE;
          if BoolVar1 <> BoolVar then
            FieldRef.VALIDATE(BoolVar);
        end else
          FieldRef.VALUE := BoolVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefDuration@35(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      DurationVar@1004 : Duration;
      DurationVar1@1003 : Duration;
    BEGIN
      if EVALUATE(DurationVar,InputText) then begin
        if ToValidate then begin
          DurationVar1 := FieldRef.VALUE;
          if DurationVar1 <> DurationVar then
            FieldRef.VALIDATE(DurationVar);
        end else
          FieldRef.VALUE := DurationVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefBigInteger@37(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      BigIntVar@1004 : BigInteger;
      BigIntVar1@1003 : BigInteger;
    BEGIN
      if EVALUATE(BigIntVar,InputText) then begin
        if ToValidate then begin
          BigIntVar1 := FieldRef.VALUE;
          if BigIntVar1 <> BigIntVar then
            FieldRef.VALIDATE(BigIntVar);
        end else
          FieldRef.VALUE := BigIntVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefGUID@51(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      GUIDVar@1004 : GUID;
      GUIDVar1@1003 : GUID;
    BEGIN
      if EVALUATE(GUIDVar,InputText) then begin
        if ToValidate then begin
          GUIDVar1 := FieldRef.VALUE;
          if GUIDVar1 <> GUIDVar then
            FieldRef.VALIDATE(GUIDVar);
        end else
          FieldRef.VALUE := GUIDVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefCodeText@52(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      TextVar@1004 : Text[1024];
      TextVar1@1003 : Text[1024];
    BEGIN
      if STRLEN(InputText) > FieldRef.LENGTH then begin
        if ToValidate then begin
          TextVar := FieldRef.VALUE;
          TextVar1 := PADSTR(InputText,FieldRef.LENGTH);
          if TextVar <> TextVar1 then
            FieldRef.VALIDATE(TextVar1);
        end else
          FieldRef.VALUE := PADSTR(InputText,FieldRef.LENGTH);
      end else begin
        if ToValidate then begin
          TextVar := FieldRef.VALUE;
          if TextVar <> InputText then
            FieldRef.VALIDATE(InputText);
        end else
          FieldRef.VALUE := InputText;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefDateFormula@56(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef;ToValidate@1000 : Boolean) : Boolean;
    VAR
      DateFormulaVar@1004 : DateFormula;
      DateFormulaVar1@1003 : DateFormula;
    BEGIN
      if EVALUATE(DateFormulaVar,InputText) then begin
        if ToValidate then begin
          DateFormulaVar1 := FieldRef.VALUE;
          if DateFormulaVar1 <> DateFormulaVar then
            FieldRef.VALIDATE(DateFormulaVar);
        end else
          FieldRef.VALUE := DateFormulaVar;
        exit(true);
      end;

      exit(false);
    END;

    LOCAL PROCEDURE EvaluateTextToFieldRefTableFilter@12(InputText@1002 : Text[250];VAR FieldRef@1001 : FieldRef) : Boolean;
    BEGIN
      EVALUATE(FieldRef,InputText);
      exit(true);
    END;

    [External]
    PROCEDURE CheckName@38(FieldName@1000 : Text[250]) : Text[250];
    VAR
      FirstChar@1002 : Text[1];
    BEGIN
      FirstChar := PADSTR(FieldName,1);

      case FirstChar of
        '0','1','2','3','4','5','6','7','8','9':
          exit('_' + FieldName);
        else
          exit(FieldName);
      end;
    END;

    [External]
    PROCEDURE AddComment@3(VAR FieldRef@1006 : FieldRef) RowComment : Text;
    VAR
      FieldBuffer@1000 : ARRAY [250] OF Text[250];
      Text10@1004 : Text[1];
      Char10@1005 : Char;
      StartPos@1003 : Integer;
      FieldNo@1002 : Integer;
      i@1001 : Integer;
    BEGIN
      StartPos := 1;
      FieldNo := 1;
      Char10 := 10;
      Text10 := FORMAT(Char10);

      RowComment := FORMAT(FieldRef.TYPE) ;
      case FORMAT(FieldRef.TYPE) of
        'Text','Code':
          RowComment := RowComment + FORMAT(FieldRef.LENGTH);
      end;

      if FORMAT(FieldRef.TYPE) <> 'Option' then
        exit(RowComment);

      CLEAR(FieldBuffer);

      while not (StartPos = STRLEN(FieldRef.OPTIONCAPTION) + 1) do begin
        if COPYSTR(FieldRef.OPTIONCAPTION,StartPos,1) <> ',' then
          FieldBuffer[FieldNo] := FieldBuffer[FieldNo] + COPYSTR(FieldRef.OPTIONCAPTION,StartPos,1)
        else
          FieldNo := FieldNo + 1;
        StartPos := StartPos + 1;
      end;

      for i := 1 to FieldNo do
        RowComment := RowComment + Text10 + FORMAT(i - 1) + ': ' + FieldBuffer[i];
    END;

    LOCAL PROCEDURE LookupObject@21(ObjectType@1002 : Integer;VAR ObjectID@1003 : Integer);
    VAR
      AllObjWithCaption@1000 : Record AllObjWithCaption;
      Objects@1001 : Page Objects;
    BEGIN
      CLEAR(Objects);
      AllObjWithCaption.FILTERGROUP(2);
      AllObjWithCaption.SETRANGE("Object Type",ObjectType);
      AllObjWithCaption.SETFILTER("Object ID",'..%1|%2|%3',1999999999,DATABASE::"Permission Set",DATABASE::Permission);
      AllObjWithCaption.FILTERGROUP(0);
      Objects.SETTABLEVIEW(AllObjWithCaption);
      Objects.LOOKUPMODE := true;
      if Objects.RUNMODAL = ACTION::LookupOK then begin
        Objects.GETRECORD(AllObjWithCaption);
        ObjectID := AllObjWithCaption."Object ID";
      end;
    END;

    [External]
    PROCEDURE LookupTable@62(VAR ObjectID@1000 : Integer);
    VAR
      Object@1001 : Record Object;
    BEGIN
      LookupObject(Object.Type::Table,ObjectID);
    END;

    [External]
    PROCEDURE LookupPage@63(VAR ObjectID@1000 : Integer);
    VAR
      Object@1001 : Record Object;
    BEGIN
      LookupObject(Object.Type::Page,ObjectID);
    END;

    [External]
    PROCEDURE TransferRecordDefaultValues@101(DataTemplateCode@1001 : Code[10];VAR RecRef@1004 : RecordRef;CurFieldNo@1007 : Integer;CurDefaultValue@1002 : Text);
    VAR
      ConfigTemplateLine@1005 : Record "Config. Template Line";
      FieldRef@1003 : FieldRef;
      DefaultValue@1006 : Text;
    BEGIN
      with ConfigTemplateLine do begin
        SETRANGE("Data Template Code",DataTemplateCode);
        SETRANGE("Table ID",RecRef.NUMBER);
        SETFILTER("Field ID",'<>%1',0);
        if FINDSET then
          repeat
            FieldRef := RecRef.FIELD("Field ID");
            if "Field ID" = CurFieldNo then
              DefaultValue := CurDefaultValue
            else
              DefaultValue := "Default Value";
            ValidateFieldValue(RecRef,FieldRef,DefaultValue,true,"Language ID");
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE OADateToDateTime@14(DateTimeDecimal@1000 : Decimal) : DateTime;
    VAR
      DotNetDateTime@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DotNetDateTimeKind@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTimeKind";
    BEGIN
      DotNetDateTime := DotNetDateTime.FromOADate(DateTimeDecimal);
      exit(
        DotNetDateTime.DateTime(DotNetDateTime.Ticks,DotNetDateTimeKind.Local));
    END;

    BEGIN
    END.
  }
}

