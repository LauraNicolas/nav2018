OBJECT Table 133 Incoming Document Attachment
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Incoming Document Entry No.");
               "Created Date-Time" := ROUNDDATETIME(CURRENTDATETIME,1000);
               "Created By User Name" := USERID;

               SetFirstAttachmentAsDefault;
               SetFirstAttachmentAsMain;

               CheckDefault;
               CheckMainAttachment;
             END;

    OnModify=BEGIN
               CheckDefault;
               CheckMainAttachment;
             END;

    OnDelete=VAR
               IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
             BEGIN
               IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Incoming Document Entry No.");
               IncomingDocumentAttachment.SETFILTER("Line No.",'<>%1',"Line No.");

               if Default then begin
                 if not IncomingDocumentAttachment.ISEMPTY then
                   ERROR(DefaultAttachErr);
               end;

               if "Main Attachment" then begin
                 if not IncomingDocumentAttachment.ISEMPTY then
                   ERROR(MainAttachErr);
               end;
             END;

    CaptionML=ENU=Incoming Document Attachment;
  }
  FIELDS
  {
    { 1   ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Created Date-Time   ;DateTime      ;CaptionML=ENU=Created Date-Time }
    { 4   ;   ;Created By User Name;Code50        ;CaptionML=ENU=Created By User Name }
    { 5   ;   ;Name                ;Text250       ;CaptionML=ENU=Name }
    { 6   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Image,PDF,Word,Excel,PowerPoint,Email,XML,Other";
                                                   OptionString=" ",Image,PDF,Word,Excel,PowerPoint,Email,XML,Other }
    { 7   ;   ;File Extension      ;Text30        ;OnValidate=BEGIN
                                                                case LOWERCASE("File Extension") of
                                                                  'jpg','jpeg','bmp','png','tiff','tif','gif':
                                                                    Type := Type::Image;
                                                                  'pdf':
                                                                    Type := Type::PDF;
                                                                  'docx','doc':
                                                                    Type := Type::Word;
                                                                  'xlsx','xls':
                                                                    Type := Type::Excel;
                                                                  'pptx','ppt':
                                                                    Type := Type::PowerPoint;
                                                                  'msg':
                                                                    Type := Type::Email;
                                                                  'xml':
                                                                    Type := Type::XML;
                                                                  else
                                                                    Type := Type::Other;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=File Extension }
    { 8   ;   ;Content             ;BLOB          ;CaptionML=ENU=Content;
                                                   SubType=Bitmap }
    { 9   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 10  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 11  ;   ;Document Table No. Filter;Integer  ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Document Table No. Filter }
    { 12  ;   ;Document Type Filter;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Document Type Filter;
                                                   OptionCaptionML=ENU=Quote,Order,Invoice,Credit Memo,Blanket Order,Return Order;
                                                   OptionString=Quote,Order,Invoice,"Credit Memo","Blanket Order","Return Order" }
    { 13  ;   ;Document No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Document No. Filter }
    { 14  ;   ;Journal Template Name Filter;Code20;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Journal Template Name Filter }
    { 15  ;   ;Journal Batch Name Filter;Code20   ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Journal Batch Name Filter }
    { 16  ;   ;Journal Line No. Filter;Integer    ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Journal Line No. Filter }
    { 17  ;   ;Default             ;Boolean       ;OnValidate=BEGIN
                                                                if Default and (not xRec.Default) then begin
                                                                  ClearDefaultAttachmentsFromIncomingDocument;
                                                                  FindDataExchType;
                                                                  UpdateIncomingDocumentHeaderFields;
                                                                end else
                                                                  CheckDefault;
                                                              END;

                                                   CaptionML=ENU=Default }
    { 18  ;   ;Use for OCR         ;Boolean       ;OnValidate=BEGIN
                                                                if "Use for OCR" then
                                                                  if not (Type in [Type::PDF,Type::Image]) then
                                                                    ERROR(MustBePdfOrPictureErr,Type::PDF,Type::Image);
                                                              END;

                                                   CaptionML=ENU=Use for OCR }
    { 19  ;   ;External Document Reference;Text50 ;CaptionML=ENU=External Document Reference }
    { 20  ;   ;OCR Service Document Reference;Text50;
                                                   CaptionML=ENU=OCR Service Document Reference }
    { 21  ;   ;Generated from OCR  ;Boolean       ;CaptionML=ENU=Generated from OCR;
                                                   Editable=false }
    { 22  ;   ;Main Attachment     ;Boolean       ;OnValidate=BEGIN
                                                                CheckMainAttachment;
                                                              END;

                                                   CaptionML=ENU=Main Attachment }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
  }
  KEYS
  {
    {    ;"Incoming Document Entry No.","Line No.";Clustered=true }
    {    ;"Document No.","Posting Date"            }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;"Created Date-Time",Name,"File Extension",Type }
  }
  CODE
  {
    VAR
      DeleteQst@1004 : TextConst 'ENU=Do you want to delete the attachment?';
      DefaultAttachErr@1005 : TextConst 'ENU=There can only be one default attachment.';
      MainAttachErr@1000 : TextConst 'ENU=There can only be one main attachment.';
      MustBePdfOrPictureErr@1007 : TextConst '@@@=%1 and %2 are file types: PDF and Picture;ENU=Only files of type %1 and %2 can be used for OCR.';

    [External]
    PROCEDURE NewAttachment@1();
    BEGIN
      if not CODEUNIT.RUN(CODEUNIT::"Import Attachment - Inc. Doc.",Rec) then
        ERROR('');
    END;

    [External]
    PROCEDURE NewAttachmentFromGenJnlLine@8(GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
      if GenJournalLine."Line No." = 0 then
        exit;
      SETRANGE("Incoming Document Entry No.",GenJournalLine."Incoming Document Entry No.");
      SETRANGE("Journal Template Name Filter",GenJournalLine."Journal Template Name");
      SETRANGE("Journal Batch Name Filter",GenJournalLine."Journal Batch Name");
      SETRANGE("Journal Line No. Filter",GenJournalLine."Line No.");

      NewAttachment;
    END;

    [External]
    PROCEDURE NewAttachmentFromSalesDocument@15(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      NewAttachmentFromDocument(
        SalesHeader."Incoming Document Entry No.",
        DATABASE::"Sales Header",
        SalesHeader."Document Type",
        SalesHeader."No.");
    END;

    [External]
    PROCEDURE NewAttachmentFromPurchaseDocument@9(PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      NewAttachmentFromDocument(
        PurchaseHeader."Incoming Document Entry No.",
        DATABASE::"Purchase Header",
        PurchaseHeader."Document Type",
        PurchaseHeader."No.");
    END;

    [External]
    PROCEDURE NewAttachmentFromDocument@10(EntryNo@1003 : Integer;TableID@1002 : Integer;DocumentType@1001 : Option;DocumentNo@1000 : Code[20]);
    BEGIN
      SETRANGE("Incoming Document Entry No.",EntryNo);
      SETRANGE("Document Table No. Filter",TableID);
      SETRANGE("Document Type Filter",DocumentType);
      SETRANGE("Document No. Filter",DocumentNo);
      NewAttachment;
    END;

    [External]
    PROCEDURE NewAttachmentFromPostedDocument@13(DocumentNo@1000 : Code[20];PostingDate@1001 : Date);
    BEGIN
      SETRANGE("Document No.",DocumentNo);
      SETRANGE("Posting Date",PostingDate);
      NewAttachment;
    END;

    [External]
    PROCEDURE Import@6() : Boolean;
    BEGIN
      exit(CODEUNIT.RUN(CODEUNIT::"Import Attachment - Inc. Doc.",Rec));
    END;

    [Internal]
    PROCEDURE Export@3(DefaultFileName@1003 : Text;ShowFileDialog@1002 : Boolean) : Text;
    VAR
      TempBlob@1001 : Record TempBlob;
      FileMgt@1000 : Codeunit "File Management";
    BEGIN
      if "Incoming Document Entry No." = 0 then
        exit;
      CALCFIELDS(Content);
      if not Content.HASVALUE then
        exit;

      if DefaultFileName = '' then
        DefaultFileName := Name + '.' + "File Extension";

      OnGetBinaryContent(TempBlob);
      if not TempBlob.Blob.HASVALUE then
        TempBlob.Blob := Content;
      exit(FileMgt.BLOBExport(TempBlob,DefaultFileName,ShowFileDialog));
    END;

    [External]
    PROCEDURE DeleteAttachment@2();
    VAR
      IncomingDocument@1000 : Record "Incoming Document";
    BEGIN
      TESTFIELD("Incoming Document Entry No.");
      TESTFIELD("Line No.");

      if Default then
        ERROR(DefaultAttachErr);

      IncomingDocument.GET("Incoming Document Entry No.");
      IncomingDocument.TESTFIELD(Posted,false);
      if CONFIRM(DeleteQst,false) then
        DELETE;
    END;

    LOCAL PROCEDURE CheckDefault@12();
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Incoming Document Entry No.");
      IncomingDocumentAttachment.SETFILTER("Line No.",'<>%1',"Line No.");
      IncomingDocumentAttachment.SETRANGE(Default,true);
      if IncomingDocumentAttachment.ISEMPTY then begin
        if not Default then
          ERROR(DefaultAttachErr);
      end else
        if Default then
          ERROR(DefaultAttachErr);
    END;

    LOCAL PROCEDURE ClearDefaultAttachmentsFromIncomingDocument@17();
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Incoming Document Entry No.");
      IncomingDocumentAttachment.SETFILTER("Line No.",'<>%1',"Line No.");
      IncomingDocumentAttachment.MODIFYALL(Default,false);
    END;

    [Internal]
    PROCEDURE SendToOCR@14();
    VAR
      IncomingDocument@1000 : Record "Incoming Document";
      TempBlob@1001 : Record TempBlob;
      OCRServiceMgt@1002 : Codeunit "OCR Service Mgt.";
    BEGIN
      CALCFIELDS(Content);
      TempBlob.INIT;
      TempBlob."Primary Key" := "Incoming Document Entry No.";
      OnGetBinaryContent(TempBlob);
      if not TempBlob.Blob.HASVALUE then
        TempBlob.Blob := Content;

      if "External Document Reference" = '' then
        "External Document Reference" := LOWERCASE(DELCHR(FORMAT(CREATEGUID),'=','{}-'));
      MODIFY;
      IncomingDocument.GET("Incoming Document Entry No.");
      OCRServiceMgt.UploadAttachment(
        TempBlob,
        STRSUBSTNO('%1.%2',Name,"File Extension"),
        "External Document Reference",
        IncomingDocument."OCR Service Doc. Template Code",
        IncomingDocument.RECORDID);
    END;

    [External]
    PROCEDURE GetFullName@4() : Text;
    BEGIN
      exit(STRSUBSTNO('%1.%2',Name,"File Extension"));
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnAttachBinaryFile@16();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    LOCAL PROCEDURE OnGetBinaryContent@22(VAR TempBlob@1000 : Record TempBlob);
    BEGIN
    END;

    LOCAL PROCEDURE FindDataExchType@7();
    BEGIN
      if Type <> Type::XML then
        exit;
      COMMIT;
      if CODEUNIT.RUN(CODEUNIT::"Data Exch. Type Selector",Rec) then;
    END;

    LOCAL PROCEDURE UpdateIncomingDocumentHeaderFields@11();
    VAR
      TempBlob@1003 : Record TempBlob;
      IncomingDocument@1004 : Record "Incoming Document";
      XMLDOMManagement@1002 : Codeunit "XML DOM Management";
      XMLRootNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      InStream@1001 : InStream;
    BEGIN
      if Type <> Type::XML then
        exit;
      TempBlob.INIT;
      OnGetBinaryContent(TempBlob);
      if not TempBlob.Blob.HASVALUE then
        TempBlob.Blob := Content;
      TempBlob.Blob.CREATEINSTREAM(InStream);
      if not XMLDOMManagement.LoadXMLNodeFromInStream(InStream,XMLRootNode) then
        exit;
      if not IncomingDocument.GET("Incoming Document Entry No.") then
        exit;
      ExtractHeaderFields(XMLRootNode,IncomingDocument);
    END;

    [Internal]
    PROCEDURE ExtractHeaderFields@5(VAR XMLRootNode@1008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR IncomingDocument@1003 : Record "Incoming Document");
    VAR
      TempFieldBuffer@1001 : TEMPORARY Record "Field Buffer";
    BEGIN
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Id"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Name"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Invoice No."));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Order No."));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Document Date"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Due Date"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Amount Excl. VAT"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Amount Incl. VAT"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("VAT Amount"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Currency Code"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor VAT Registration No."));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor IBAN"));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Branch No."));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Bank Account No."));
      AddFieldToFieldBuffer(TempFieldBuffer,IncomingDocument.FIELDNO("Vendor Phone No."));

      OnBeforeExtractHeaderFields(TempFieldBuffer,IncomingDocument);

      TempFieldBuffer.RESET;
      TempFieldBuffer.FINDSET;
      repeat
        ExtractHeaderField(XMLRootNode,IncomingDocument,TempFieldBuffer."Field ID");
      until TempFieldBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE ExtractHeaderField@27(VAR XMLRootNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR IncomingDocument@1007 : Record "Incoming Document";FieldNo@1006 : Integer);
    VAR
      Field@1001 : Record Field;
      XMLDOMManagement@1004 : Codeunit "XML DOM Management";
      OCRServiceMgt@1002 : Codeunit "OCR Service Mgt.";
      ImportXMLFileToDataExch@1005 : Codeunit "Import XML File to Data Exch.";
      RecRef@1009 : RecordRef;
      FieldRef@1010 : FieldRef;
      XmlNamespaceManager@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      DateVar@1011 : Date;
      DecimalVar@1012 : Decimal;
      IntegerVar@1013 : Integer;
      GuidVar@1015 : GUID;
      XmlValue@1014 : Text;
      XPath@1008 : Text;
    BEGIN
      IncomingDocument.FIND;
      XPath := IncomingDocument.GetDataExchangePath(FieldNo);
      if XPath = '' then
        exit;
      XPath := ImportXMLFileToDataExch.EscapeMissingNamespacePrefix(XPath);
      RecRef.GETTABLE(IncomingDocument);
      FieldRef := RecRef.FIELD(FieldNo);
      Field.INIT;
      XMLDOMManagement.AddNamespaces(XmlNamespaceManager,XMLRootNode.OwnerDocument);
      XmlValue := XMLDOMManagement.FindNodeTextNs(XMLRootNode,XPath,XmlNamespaceManager);

      case FORMAT(FieldRef.TYPE) of
        FORMAT(Field.Type::Text),FORMAT(Field.Type::Code):
          FieldRef.VALUE := COPYSTR(XmlValue,1,FieldRef.LENGTH);
        FORMAT(Field.Type::Date):
          if EVALUATE(DateVar,XmlValue,9) then
            FieldRef.VALUE := DateVar
          else
            if EVALUATE(DateVar,OCRServiceMgt.DateConvertYYYYMMDD2XML(XmlValue),9) then
              FieldRef.VALUE := DateVar;
        FORMAT(Field.Type::Integer):
          if EVALUATE(IntegerVar,XmlValue,9) then
            FieldRef.VALUE := IntegerVar;
        FORMAT(Field.Type::Decimal):
          if EVALUATE(DecimalVar,XmlValue,9) then
            FieldRef.VALUE := DecimalVar;
        FORMAT(Field.Type::GUID):
          if EVALUATE(GuidVar,XmlValue,9) then
            FieldRef.VALUE := GuidVar;
      end;
      RecRef.SETTABLE(IncomingDocument);
      IncomingDocument.MODIFY;
    END;

    LOCAL PROCEDURE CheckMainAttachment@20();
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
      MoreThanOneMainAttachmentExist@1001 : Boolean;
      NoMainAttachmentExist@1002 : Boolean;
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Incoming Document Entry No.");
      IncomingDocumentAttachment.SETFILTER("Line No.",'<>%1',"Line No.");
      IncomingDocumentAttachment.SETRANGE("Main Attachment",true);

      MoreThanOneMainAttachmentExist := "Main Attachment" and (not IncomingDocumentAttachment.ISEMPTY);
      NoMainAttachmentExist := (not "Main Attachment") and IncomingDocumentAttachment.ISEMPTY;

      if MoreThanOneMainAttachmentExist or NoMainAttachmentExist then
        ERROR(MainAttachErr);
    END;

    LOCAL PROCEDURE SetFirstAttachmentAsDefault@18();
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      if not Default then begin
        IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Incoming Document Entry No.");
        IncomingDocumentAttachment.SETRANGE(Default,true);
        if IncomingDocumentAttachment.ISEMPTY then
          VALIDATE(Default,true);
      end;
    END;

    LOCAL PROCEDURE SetFirstAttachmentAsMain@19();
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      if not "Main Attachment" then begin
        IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Incoming Document Entry No.");
        IncomingDocumentAttachment.SETRANGE("Main Attachment",true);
        if IncomingDocumentAttachment.ISEMPTY then
          VALIDATE("Main Attachment",true);
      end;
    END;

    [External]
    PROCEDURE SetFiltersFromMainRecord@21(VAR MainRecordRef@1009 : RecordRef;VAR IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment");
    VAR
      SalesHeader@1001 : Record "Sales Header";
      PurchaseHeader@1002 : Record "Purchase Header";
      GenJournalLine@1003 : Record "Gen. Journal Line";
      PurchInvHeader@1008 : Record "Purch. Inv. Header";
      DataTypeManagement@1005 : Codeunit "Data Type Management";
      DocumentNoFieldRef@1004 : FieldRef;
      PostingDateFieldRef@1006 : FieldRef;
      LineNoFieldRef@1011 : FieldRef;
      PostingDate@1007 : Date;
    BEGIN
      case MainRecordRef.NUMBER of
        DATABASE::"Incoming Document":
          exit;
        DATABASE::"Sales Header":
          begin
            MainRecordRef.SETTABLE(SalesHeader);
            IncomingDocumentAttachment.SETRANGE("Document Table No. Filter",MainRecordRef.NUMBER);
            IncomingDocumentAttachment.SETRANGE("Document Type Filter",SalesHeader."Document Type");
            IncomingDocumentAttachment.SETRANGE("Document No. Filter",SalesHeader."No.");
          end;
        DATABASE::"Purchase Header":
          begin
            MainRecordRef.SETTABLE(PurchaseHeader);
            IncomingDocumentAttachment.SETRANGE("Document Table No. Filter",MainRecordRef.NUMBER);
            IncomingDocumentAttachment.SETRANGE("Document Type Filter",PurchaseHeader."Document Type");
            IncomingDocumentAttachment.SETRANGE("Document No. Filter",PurchaseHeader."No.");
          end;
        DATABASE::"Gen. Journal Line":
          begin
            MainRecordRef.SETTABLE(GenJournalLine);
            if not MainRecordRef.GET(MainRecordRef.RECORDID) then
              if DataTypeManagement.FindFieldByName(
                   MainRecordRef,LineNoFieldRef,IncomingDocumentAttachment.FIELDNAME("Line No."))
              then begin
                LineNoFieldRef.VALIDATE(GetGenJnlLineNextLineNo(GenJournalLine));
                MainRecordRef.INSERT(true);
                COMMIT;
                MainRecordRef.SETTABLE(GenJournalLine);
              end;
            IncomingDocumentAttachment.SETRANGE("Document Table No. Filter",MainRecordRef.NUMBER);
            IncomingDocumentAttachment.SETRANGE("Journal Template Name Filter",GenJournalLine."Journal Template Name");
            IncomingDocumentAttachment.SETRANGE("Journal Batch Name Filter",GenJournalLine."Journal Batch Name");
            IncomingDocumentAttachment.SETRANGE("Journal Line No. Filter",GenJournalLine."Line No.");
          end;
        else begin
          if not DataTypeManagement.FindFieldByName(MainRecordRef,DocumentNoFieldRef,GenJournalLine.FIELDNAME("Document No.")) then
            if not DataTypeManagement.FindFieldByName(MainRecordRef,DocumentNoFieldRef,PurchInvHeader.FIELDNAME("No.")) then
              exit;
          if not DataTypeManagement.FindFieldByName(MainRecordRef,PostingDateFieldRef,GenJournalLine.FIELDNAME("Posting Date")) then
            exit;
          IncomingDocumentAttachment.SETRANGE("Document No.",FORMAT(DocumentNoFieldRef.VALUE));
          EVALUATE(PostingDate,FORMAT(PostingDateFieldRef.VALUE));
          IncomingDocumentAttachment.SETRANGE("Posting Date",PostingDate);
        end;
      end;
    END;

    LOCAL PROCEDURE GetGenJnlLineNextLineNo@24(GenJournalLine@1000 : Record "Gen. Journal Line") : Integer;
    VAR
      LastGenJournalLine@1001 : Record "Gen. Journal Line";
    BEGIN
      LastGenJournalLine.SETFILTER("Journal Template Name",GenJournalLine."Journal Template Name");
      LastGenJournalLine.SETFILTER("Journal Batch Name",GenJournalLine."Journal Batch Name");
      if LastGenJournalLine.FINDLAST then
        exit(LastGenJournalLine."Line No." + LineIncrement);
      exit(LineIncrement);
    END;

    LOCAL PROCEDURE LineIncrement@23() : Integer;
    BEGIN
      exit(10000);
    END;

    [External]
    PROCEDURE AddFieldToFieldBuffer@28(VAR TempFieldBuffer@1000 : TEMPORARY Record "Field Buffer";FieldID@1001 : Integer);
    BEGIN
      TempFieldBuffer.INIT;
      TempFieldBuffer.Order += 1;
      TempFieldBuffer."Table ID" := DATABASE::"Incoming Document";
      TempFieldBuffer."Field ID" := FieldID;
      TempFieldBuffer.INSERT;
    END;

    [Integration]
    PROCEDURE OnBeforeExtractHeaderFields@30(VAR TempFieldBuffer@1000 : TEMPORARY Record "Field Buffer";VAR IncomingDocument@1001 : Record "Incoming Document");
    BEGIN
    END;

    BEGIN
    END.
  }
}

