OBJECT Codeunit 1224 Map Incoming Doc to Gen. Line
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    TableNo="Incoming Document";
    OnRun=BEGIN
            IncomingDocument := Rec;
            ErrorMessage.SetContext(IncomingDocument);
            CreateGeneralJournalLineFromIncomingDocument;
          END;

  }
  CODE
  {
    VAR
      NoBalanceAccountMappingErr@1003 : TextConst '@@@=%1 - vendor name;ENU=Could not fill the Bal. Account No. field for vendor ''''%1''''. Choose the Map Text to Account button to map ''''%1'''' to the relevant G/L account.';
      NoDebitAccountMappingErr@1002 : TextConst '@@@=%1 - Debit Acc. No. or Credit Acc. No. field caption, %2 - vendor name;ENU=Could not fill the %1 field for vendor ''''%2''''. Choose the Map Text to Account button to map ''''%2'''' to the relevant G/L account.';
      VatAmountMismatchErr@1001 : TextConst '@@@=%1 - General Journal Line VAT amount, %2 - Incoming Document VAT  amount;ENU=VAT amount %1 on the general journal line does not match VAT amount %2 in the incoming document.';
      TemplateBatchNameMissingErr@1000 : TextConst 'ENU="You must fill the General Journal Template Name and General Journal Batch Name fields in the Incoming Document Setup window. "';
      IncomingDocument@1004 : Record "Incoming Document";
      ErrorMessage@1005 : Record "Error Message";
      CurrencyDoesNotExistErr@1006 : TextConst '@@@=%1 referee to a concrete currency;ENU=The currency %1 does not exist. You must add the currency in the Currencies window.';
      CurrencyExchangeDoesNotExistErr@1007 : TextConst '@@@=%1 reference to a concrete currency,%2 to the date for the transaction;ENU=No exchange rate exists for %1 on %2. You must add the exchange rate in the Currencies window.';

    LOCAL PROCEDURE CreateGeneralJournalLineFromIncomingDocument@83();
    VAR
      GenJournalLine@1006 : Record "Gen. Journal Line";
      IncomingDocumentsSetup@1005 : Record "Incoming Documents Setup";
      LastGenJournalLine@1004 : Record "Gen. Journal Line";
      TextToAccountMapping@1002 : Record "Text-to-Account Mapping";
      GenJournalTemplate@1003 : Record "Gen. Journal Template";
      GenJournalBatch@1007 : Record "Gen. Journal Batch";
      GeneralLedgerSetup@1009 : Record "General Ledger Setup";
      TextToAccountMappingFound@1000 : Boolean;
    BEGIN
      IncomingDocumentsSetup.GET;
      if (IncomingDocumentsSetup."General Journal Template Name" = '') or
         (IncomingDocumentsSetup."General Journal Batch Name" = '')
      then
        ErrorMessage.LogMessage(
          IncomingDocumentsSetup,IncomingDocumentsSetup.FIELDNO("General Journal Template Name"),
          ErrorMessage."Message Type"::Error,TemplateBatchNameMissingErr)
      else begin
        GenJournalTemplate.GET(IncomingDocumentsSetup."General Journal Template Name");
        GenJournalBatch.GET(
          IncomingDocumentsSetup."General Journal Template Name",IncomingDocumentsSetup."General Journal Batch Name");
        LastGenJournalLine.SETRANGE("Journal Template Name",IncomingDocumentsSetup."General Journal Template Name");
        LastGenJournalLine.SETRANGE("Journal Batch Name",IncomingDocumentsSetup."General Journal Batch Name");
        if not LastGenJournalLine.FINDLAST then begin
          LastGenJournalLine.VALIDATE("Journal Template Name",IncomingDocumentsSetup."General Journal Template Name");
          LastGenJournalLine.VALIDATE("Journal Batch Name",IncomingDocumentsSetup."General Journal Batch Name");
          LastGenJournalLine."Line No." := LastGenJournalLine."Line No." + 10000;
          LastGenJournalLine.INSERT;
        end;

        // Create the gen jnl line out of the inc doc and text-to-account mapping
        GenJournalLine.INIT;
        GenJournalLine.VALIDATE("Journal Template Name",IncomingDocumentsSetup."General Journal Template Name");
        GenJournalLine.VALIDATE("Journal Batch Name",IncomingDocumentsSetup."General Journal Batch Name");
        GenJournalLine."Line No." := LastGenJournalLine."Line No." + 10000;
        GenJournalLine.SetUpNewLine(LastGenJournalLine,LastGenJournalLine.Amount,true);

        GenJournalLine."Document Type" := GetAttachedDocumentType;

        TextToAccountMapping.SETFILTER("Mapping Text",STRSUBSTNO('@%1',IncomingDocument."Vendor Name"));
        TextToAccountMappingFound := TextToAccountMapping.FINDFIRST;

        case GenJournalLine."Document Type" of
          GenJournalLine."Document Type"::Invoice:
            if TextToAccountMappingFound then begin
              GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
              if IncomingDocument."Amount Incl. VAT" >= 0 then
                GenJournalLine.VALIDATE("Account No.",TextToAccountMapping."Debit Acc. No.")
              else
                GenJournalLine.VALIDATE("Account No.",TextToAccountMapping."Credit Acc. No.");
            end else
              UseDefaultGLAccount(GenJournalLine,GenJournalLine.FIELDCAPTION("Account No."),IncomingDocument."Vendor Name");
          GenJournalLine."Document Type"::"Credit Memo":
            if TextToAccountMappingFound then begin
              GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
              if IncomingDocument."Amount Incl. VAT" >= 0 then
                GenJournalLine.VALIDATE("Account No.",TextToAccountMapping."Credit Acc. No.")
              else
                GenJournalLine.VALIDATE("Account No.",TextToAccountMapping."Debit Acc. No.");
            end else
              UseDefaultGLAccount(GenJournalLine,GenJournalLine.FIELDCAPTION("Account No."),IncomingDocument."Vendor Name");
        end;

        if IncomingDocument."Vendor No." <> '' then begin
          GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::Vendor);
          GenJournalLine.VALIDATE("Bal. Account No.",IncomingDocument."Vendor No.");
        end else
          if TextToAccountMapping."Bal. Source No." <> '' then begin
            GenJournalLine.VALIDATE("Bal. Account Type",TextToAccountMapping."Bal. Source Type");
            GenJournalLine.VALIDATE("Bal. Account No.",TextToAccountMapping."Bal. Source No.");
          end else
            if GenJournalBatch."Bal. Account No." <> '' then begin
              GenJournalLine.VALIDATE("Bal. Account Type",GenJournalBatch."Bal. Account Type");
              GenJournalLine.VALIDATE("Bal. Account No.",GenJournalBatch."Bal. Account No.");
            end else
              ErrorMessage.LogMessage(
                TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
                ErrorMessage."Message Type"::Error,STRSUBSTNO(NoBalanceAccountMappingErr,IncomingDocument."Vendor Name"));

        GenJournalLine.VALIDATE("Due Date",IncomingDocument."Due Date");
        GenJournalLine.VALIDATE("Posting Date",IncomingDocument."Document Date");
        GenJournalLine.VALIDATE("Document Date",IncomingDocument."Document Date");
        GenJournalLine.VALIDATE("External Document No.",IncomingDocument."Vendor Invoice No.");
        GeneralLedgerSetup.GET;
        if IncomingDocument."Currency Code" <> GeneralLedgerSetup."LCY Code" then
          if VerifyCurrency(IncomingDocument."Currency Code",IncomingDocument."Document Date") then
            GenJournalLine.VALIDATE("Currency Code",IncomingDocument."Currency Code");
        GenJournalLine.VALIDATE(Amount,IncomingDocument."Amount Incl. VAT");
        GenJournalLine.VALIDATE("Incoming Document Entry No.",IncomingDocument."Entry No.");
        GenJournalLine.VALIDATE(Description,IncomingDocument."Vendor Name");

        if not ErrorMessage.HasErrors(false) then
          GenJournalLine.INSERT(true);

        if IncomingDocument."Amount Incl. VAT" - IncomingDocument."Amount Excl. VAT" <> GenJournalLine."VAT Amount" then
          ErrorMessage.LogMessage(GenJournalLine,GenJournalLine.FIELDNO("Account No."),
            ErrorMessage."Message Type"::Warning,
            STRSUBSTNO(VatAmountMismatchErr,GenJournalLine."VAT Amount",
              IncomingDocument."Amount Incl. VAT" - IncomingDocument."Amount Excl. VAT"));
      end;
    END;

    LOCAL PROCEDURE GetAttachedDocumentType@46() : Integer;
    VAR
      DataExch@1002 : Record "Data Exch.";
      IntermediateDataImport@1001 : Record "Intermediate Data Import";
      PurchaseHeader@1000 : Record "Purchase Header";
      GenJournalLine@1005 : Record "Gen. Journal Line";
      PreMapIncomingPurchDoc@1004 : Codeunit "Pre-map Incoming Purch. Doc";
      Value@1003 : Text;
      DocumentType@1007 : Integer;
    BEGIN
      DataExch.SETRANGE("Incoming Entry No.",IncomingDocument."Entry No.");
      if not DataExch.FINDLAST then
        ErrorMessage.LogMessage(GenJournalLine,GenJournalLine.FIELDNO("Document Type"),
          ErrorMessage."Message Type"::Error,PreMapIncomingPurchDoc.ConstructDocumenttypeUnknownErr);
      Value :=
        IntermediateDataImport.GetEntryValue(
          DataExch."Entry No.",DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Type"),0,1);
      EVALUATE(DocumentType,Value);
      case DocumentType of
        PurchaseHeader."Document Type"::Invoice:
          exit(GenJournalLine."Document Type"::Invoice);
        PurchaseHeader."Document Type"::"Credit Memo":
          exit(GenJournalLine."Document Type"::"Credit Memo");
        else
          ErrorMessage.LogMessage(GenJournalLine,GenJournalLine.FIELDNO("Document Type"),
            ErrorMessage."Message Type"::Error,PreMapIncomingPurchDoc.ConstructDocumenttypeUnknownErr);
      end;
      exit(0);
    END;

    LOCAL PROCEDURE UseDefaultGLAccount@47(VAR GenJournalLine@1000 : Record "Gen. Journal Line";FieldName@1001 : Text;VendorName@1002 : Text);
    VAR
      PurchasesPayablesSetup@1003 : Record "Purchases & Payables Setup";
      TextToAccountMapping@1005 : Record "Text-to-Account Mapping";
      DefaultGLAccount@1006 : Code[20];
    BEGIN
      PurchasesPayablesSetup.GET;

      if GenJournalLine."Document Type" = GenJournalLine."Document Type"::Invoice then
        DefaultGLAccount := PurchasesPayablesSetup."Debit Acc. for Non-Item Lines";
      if GenJournalLine."Document Type" = GenJournalLine."Document Type"::"Credit Memo" then
        DefaultGLAccount := PurchasesPayablesSetup."Credit Acc. for Non-Item Lines";

      if DefaultGLAccount = '' then
        ErrorMessage.LogMessage(TextToAccountMapping,TextToAccountMapping.FIELDNO("Mapping Text"),
          ErrorMessage."Message Type"::Error,
          STRSUBSTNO(NoDebitAccountMappingErr,FieldName,VendorName))
      else begin
        GenJournalLine.VALIDATE("Account Type",GenJournalLine."Account Type"::"G/L Account");
        GenJournalLine.VALIDATE("Account No.",DefaultGLAccount);
      end;
    END;

    LOCAL PROCEDURE VerifyCurrency@1(CurrencyCode@1002 : Code[10];PostingDate@1003 : Date) : Boolean;
    VAR
      Currency@1000 : Record Currency;
      CurrencyExchangeRate@1001 : Record "Currency Exchange Rate";
    BEGIN
      if not Currency.GET(CurrencyCode) then begin
        ErrorMessage.LogMessage(
          Currency,Currency.FIELDNO(Code),
          ErrorMessage."Message Type"::Error,STRSUBSTNO(CurrencyDoesNotExistErr,IncomingDocument."Currency Code"));
        exit(false)
      end;
      if not CurrencyExchangeRate.CurrencyExchangeRateExist(IncomingDocument."Currency Code",IncomingDocument."Document Date") then begin
        ErrorMessage.LogMessage(
          Currency,CurrencyExchangeRate.FIELDNO("Exchange Rate Amount"),
          ErrorMessage."Message Type"::Error,STRSUBSTNO(CurrencyExchangeDoesNotExistErr,CurrencyCode,PostingDate));
        exit(false);
      end;
      exit(true);
    END;

    BEGIN
    END.
  }
}

