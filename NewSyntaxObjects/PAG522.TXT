OBJECT Page 522 View Applied Entries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Item Application Entry"=rimd;
    CaptionML=ENU=View Applied Entries;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=true;
    SourceTable="Item Ledger Entry";
    DataCaptionExpr=CaptionExpr;
    PageType=Worksheet;
    SourceTableTemporary=true;
    OnInit=BEGIN
             RemoveAppButtonVisible := true;
           END;

    OnOpenPage=BEGIN
                 CurrPage.LOOKUPMODE := not ShowApplied;
                 RemoveAppButtonVisible := ShowApplied;
                 Show;
               END;

    OnFindRecord=BEGIN
                   exit(FIND(Which));
                 END;

    OnAfterGetRecord=BEGIN
                       GetApplQty;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 36      ;1   ;ActionGroup;
                      Name=Ent&ry;
                      CaptionML=ENU=Ent&ry;
                      Image=Entry }
      { 37      ;2   ;Action    ;
                      Name=Dimensions;
                      AccessByPermission=TableData Dimension=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#Dimensions;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Name=&Value Entries;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=ENU=&Value Entries;
                      ToolTipML=ENU=View the history of posted amounts that affect the value of the item. Value entries are created for every transaction with the item.;
                      ApplicationArea=#Advanced;
                      RunObject=Page "Value Entries";
                      RunPageView=SORTING("Item Ledger Entry No.");
                      RunPageLink="Item Ledger Entry No."=FIELD("Entry No.");
                      Image=ValueLedger }
      { 38      ;2   ;Action    ;
                      Name=Reservation Entries;
                      AccessByPermission=TableData Item=R;
                      CaptionML=ENU=Reservation Entries;
                      ToolTipML=ENU=View the entries for every reservation that is made, either manually or automatically.;
                      ApplicationArea=#Advanced;
                      Image=ReservationLedger;
                      OnAction=BEGIN
                                 ShowReservationEntries(true);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;Action    ;
                      Name=RemoveAppButton;
                      CaptionML=ENU=Re&move Application;
                      ToolTipML=ENU=Remove item applications.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      Visible=RemoveAppButtonVisible;
                      Image=Cancel;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UnapplyRec;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group2;
                Editable=FALSE;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=Posting Date;
                ToolTipML=ENU=Specifies the entry's posting date.;
                ApplicationArea=#Advanced;
                SourceExpr="Posting Date";
                ImplicitType=Date }

    { 5   ;2   ;Field     ;
                Name=Entry Type;
                ToolTipML=ENU=Specifies which type of transaction that the entry is created from.;
                ApplicationArea=#Advanced;
                SourceExpr="Entry Type";
                ImplicitType=Option }

    { 7   ;2   ;Field     ;
                Name=Document Type;
                ToolTipML=ENU=Specifies what type of document was posted to create the item ledger entry.;
                ApplicationArea=#Advanced;
                SourceExpr="Document Type";
                ImplicitType=Option }

    { 9   ;2   ;Field     ;
                Name=Document No.;
                ToolTipML=ENU=Specifies the document number on the entry. The document is the voucher that the entry was based on, for example, a receipt.;
                ApplicationArea=#Advanced;
                SourceExpr="Document No.";
                ImplicitType=Code20 }

    { 11  ;2   ;Field     ;
                Name=Document Line No.;
                ToolTipML=ENU=Specifies the number of the line on the posted document that corresponds to the item ledger entry.;
                ApplicationArea=#Advanced;
                SourceExpr="Document Line No.";
                Visible=FALSE;
                ImplicitType=Integer }

    { 16  ;2   ;Field     ;
                Name=Item No.;
                ToolTipML=ENU=Specifies the number of the item in the entry.;
                ApplicationArea=#Advanced;
                SourceExpr="Item No.";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 19  ;2   ;Field     ;
                Name=Variant Code;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Variant Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 21  ;2   ;Field     ;
                Name=Serial No.;
                ToolTipML=ENU=Specifies a serial number if the posted item carries such a number.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Serial No.";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 23  ;2   ;Field     ;
                Name=Lot No.;
                ToolTipML=ENU=Specifies a lot number if the posted item carries such a number.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Lot No.";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 25  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the entry.;
                ApplicationArea=#Advanced;
                SourceExpr=Description;
                Visible=FALSE;
                ImplicitType=Text50 }

    { 27  ;2   ;Field     ;
                Name=Global Dimension 1 Code;
                ToolTipML=ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                ApplicationArea=#Dimensions;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 29  ;2   ;Field     ;
                Name=Global Dimension 2 Code;
                ToolTipML=ENU=Specifies the code for the global dimension that is linked to the record or entry for analysis purposes. Two global dimensions, typically for the company's most important activities, are available on all cards, documents, reports, and lists.;
                ApplicationArea=#Dimensions;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 31  ;2   ;Field     ;
                Name=Location Code;
                ToolTipML=ENU=Specifies the code for the location that the entry is linked to.;
                ApplicationArea=#Advanced;
                SourceExpr="Location Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 33  ;2   ;Field     ;
                Name=ApplQty;
                CaptionML=ENU=Applied Quantity;
                ToolTipML=ENU=Specifies the quantity of the item ledger entry linked to an inventory decrease, or increase, as appropriate.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=ApplQty;
                ImplicitType=Decimal }

    { 35  ;2   ;Field     ;
                Name=Qty;
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies the quantity of the item ledger entry.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=Qty;
                ImplicitType=Decimal }

    { 40  ;2   ;Field     ;
                Name=Cost Amount (Actual);
                ToolTipML=ENU=Specifies the adjusted cost, in LCY, of the quantity posting.;
                ApplicationArea=#Advanced;
                SourceExpr="Cost Amount (Actual)";
                ImplicitType=Decimal }

    { 42  ;2   ;Field     ;
                Name=Unit Cost(LCY);
                CaptionML=ENU=Unit Cost(LCY);
                ToolTipML=ENU=Specifies the unit cost of the item in the item ledger entry.;
                ApplicationArea=#Advanced;
                SourceExpr=GetUnitCostLCY;
                Visible=FALSE;
                ImplicitType=Decimal }

    { 44  ;2   ;Field     ;
                Name=Invoiced Quantity;
                ToolTipML=ENU=Specifies how many units of the item on the line have been invoiced.;
                ApplicationArea=#Advanced;
                SourceExpr="Invoiced Quantity";
                Visible=TRUE;
                ImplicitType=Decimal }

    { 46  ;2   ;Field     ;
                Name=Reserved Quantity;
                ToolTipML=ENU=Specifies how many units of the item on the line have been reserved.;
                ApplicationArea=#Advanced;
                SourceExpr="Reserved Quantity";
                ImplicitType=Decimal }

    { 49  ;2   ;Field     ;
                Name=Remaining Quantity;
                ToolTipML=ENU=Specifies the quantity in the Quantity field that remains to be processed.;
                ApplicationArea=#Advanced;
                SourceExpr="Remaining Quantity";
                Visible=TRUE;
                ImplicitType=Decimal }

    { 1102601000;2;Field  ;
                Name=Quantity Available for Cost Applications;
                CaptionML=ENU=Quantity Available for Cost Applications;
                ToolTipML=ENU=Specifies the quantity of the item ledger entry that can be cost applied.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=CostAvailable(Rec) }

    { 51  ;2   ;Field     ;
                Name=Available for Quantity Application;
                CaptionML=ENU=Available for Quantity Application;
                ToolTipML=ENU=Specifies the quantity of the item ledger entry that can be applied.;
                ApplicationArea=#Advanced;
                DecimalPlaces=0:5;
                SourceExpr=QuantityAvailable(Rec) }

    { 53  ;2   ;Field     ;
                Name=Shipped Qty. Not Returned;
                ToolTipML=ENU=Specifies the quantity for this item ledger entry that was shipped and has not yet been returned.;
                ApplicationArea=#Advanced;
                SourceExpr="Shipped Qty. Not Returned";
                ImplicitType=Decimal }

    { 55  ;2   ;Field     ;
                Name=Open;
                ToolTipML=ENU=Specifies whether the entry has been fully applied to.;
                ApplicationArea=#Advanced;
                SourceExpr=Open;
                ImplicitType=Boolean }

    { 57  ;2   ;Field     ;
                Name=Qty. per Unit of Measure;
                ToolTipML=ENU=Specifies the quantity per item unit of measure.;
                ApplicationArea=#Advanced;
                SourceExpr="Qty. per Unit of Measure";
                Visible=FALSE;
                ImplicitType=Decimal }

    { 59  ;2   ;Field     ;
                Name=Drop Shipment;
                ToolTipML=ENU=Specifies if your vendor ships the items directly to your customer.;
                ApplicationArea=#Advanced;
                SourceExpr="Drop Shipment";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 61  ;2   ;Field     ;
                Name=Applies-to Entry;
                ToolTipML=ENU=Specifies the item entry number that was applied to when the entry was posted, if an already-posted document was designated to be applied.;
                ApplicationArea=#Advanced;
                SourceExpr="Applies-to Entry";
                Visible=FALSE;
                ImplicitType=Integer }

    { 63  ;2   ;Field     ;
                Name=Applied Entry to Adjust;
                ToolTipML=ENU=Specifies whether there is one or more applied entries, which need to be adjusted.;
                ApplicationArea=#Advanced;
                SourceExpr="Applied Entry to Adjust";
                Visible=FALSE;
                ImplicitType=Boolean }

    { 4   ;2   ;Field     ;
                Name=Order Type;
                ToolTipML=ENU=Specifies which type of order that the entry was created in.;
                ApplicationArea=#Advanced;
                SourceExpr="Order Type";
                ImplicitType=Option }

    { 65  ;2   ;Field     ;
                Name=Order No.;
                ToolTipML=ENU=Specifies the number of the order that created the entry.;
                ApplicationArea=#Advanced;
                SourceExpr="Order No.";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 67  ;2   ;Field     ;
                Name=Entry No.;
                ToolTipML=ENU=Specifies the entry number for the entry.;
                ApplicationArea=#Advanced;
                SourceExpr="Entry No.";
                ImplicitType=Integer }

  }
  CODE
  {
    VAR
      RecordToShow@1008 : Record "Item Ledger Entry";
      TempItemLedgEntry@1001 : TEMPORARY Record "Item Ledger Entry";
      Apply@1003 : Codeunit "Item Jnl.-Post Line";
      ShowApplied@1002 : Boolean;
      ShowQuantity@1007 : Boolean;
      MaxToApply@1004 : Decimal;
      ApplQty@1005 : Decimal;
      Qty@1006 : Decimal;
      TotalApplied@1015 : Decimal;
      Text001@1000 : TextConst 'ENU=Applied Entries';
      Text002@1009 : TextConst 'ENU=Unapplied Entries';
      RemoveAppButtonVisible@19026324 : Boolean INDATASET;

    [External]
    PROCEDURE SetRecordToShow@7(VAR RecordToSet@1000 : Record "Item Ledger Entry";VAR ApplyCodeunit@1001 : Codeunit "Item Jnl.-Post Line";newShowApplied@1002 : Boolean);
    BEGIN
      RecordToShow.COPY(RecordToSet);
      Apply := ApplyCodeunit;
      ShowApplied := newShowApplied;
    END;

    LOCAL PROCEDURE Show@8();
    VAR
      ItemLedgEntry@1000 : Record "Item Ledger Entry";
      Apprec@1102601000 : Record "Item Application Entry";
    BEGIN
      with ItemLedgEntry do begin
        GET(RecordToShow."Entry No.");
        ShowQuantity := not (("Entry Type" in ["Entry Type"::Sale,"Entry Type"::Consumption,"Entry Type"::Output]) and Positive);

        MaxToApply := 0;
        if not ShowQuantity then
          MaxToApply := Quantity + Apprec.Returned("Entry No.");
      end;
      SetMyView(RecordToShow,ShowApplied,ShowQuantity,MaxToApply);
    END;

    LOCAL PROCEDURE SetMyView@22(ItemLedgEntry@1000 : Record "Item Ledger Entry";ShowApplied@1002 : Boolean;ShowQuantity@1004 : Boolean;MaxToApply@1005 : Decimal);
    BEGIN
      InitView;
      case ShowQuantity of
        true:
          case ShowApplied of
            true:
              ShowQuantityApplied(ItemLedgEntry);
            false:
              begin
                ShowQuantityOpen(ItemLedgEntry);
                ShowCostOpen(ItemLedgEntry,MaxToApply);
              end;
          end;
        false:
          case ShowApplied of
            true:
              ShowCostApplied(ItemLedgEntry);
            false:
              ShowCostOpen(ItemLedgEntry,MaxToApply);
          end;
      end;

      if TempItemLedgEntry.FINDSET then
        repeat
          Rec := TempItemLedgEntry;
          INSERT;
        until TempItemLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE InitView@23();
    BEGIN
      DELETEALL;
      TempItemLedgEntry.RESET;
      TempItemLedgEntry.DELETEALL;
    END;

    LOCAL PROCEDURE ShowQuantityApplied@20(ItemLedgEntry@1000 : Record "Item Ledger Entry");
    VAR
      ItemApplnEntry@1002 : Record "Item Application Entry";
    BEGIN
      InitApplied;
      with ItemLedgEntry do
        if Positive then begin
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1&<>%2',"Entry No.",0);
          if ItemApplnEntry.FIND('-') then
            repeat
              InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity,true);
            until ItemApplnEntry.NEXT = 0;
        end else begin
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
          if ItemApplnEntry.FIND('-') then
            repeat
              InsertTempEntry(ItemApplnEntry."Inbound Item Entry No.",-ItemApplnEntry.Quantity,true);
            until ItemApplnEntry.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE ShowQuantityOpen@19(ItemLedgEntry@1000 : Record "Item Ledger Entry");
    VAR
      ItemApplnEntry@1002 : Record "Item Application Entry";
      ItemLedgEntry2@1001 : Record "Item Ledger Entry";
    BEGIN
      with ItemLedgEntry do
        if "Remaining Quantity" <> 0 then begin
          ItemLedgEntry2.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
          ItemLedgEntry2.SETRANGE("Item No.","Item No.");
          ItemLedgEntry2.SETRANGE("Location Code" ,"Location Code");
          ItemLedgEntry2.SETRANGE(Positive,not Positive);
          ItemLedgEntry2.SETRANGE(Open,true);
          if ItemLedgEntry2.FIND('-') then
            repeat
              if (QuantityAvailable(ItemLedgEntry2) <> 0) and
                 not ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.")
              then
                InsertTempEntry(ItemLedgEntry2."Entry No.",0,true);
            until ItemLedgEntry2.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE ShowCostApplied@18(ItemLedgEntry@1000 : Record "Item Ledger Entry");
    VAR
      ItemApplnEntry@1002 : Record "Item Application Entry";
    BEGIN
      InitApplied;
      with ItemLedgEntry do
        if Positive then begin
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',"Entry No.");
          ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1',0);
          ItemApplnEntry.SETRANGE("Cost Application",true); // we want to show even average cost application
          if ItemApplnEntry.FIND('-') then
            repeat
              InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity,false);
            until ItemApplnEntry.NEXT = 0;
        end else begin
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',"Entry No.");
          ItemApplnEntry.SETRANGE("Cost Application",true); // we want to show even average cost application
          if ItemApplnEntry.FIND('-') then
            repeat
              InsertTempEntry(ItemApplnEntry."Inbound Item Entry No.",-ItemApplnEntry.Quantity,false);
            until ItemApplnEntry.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE ShowCostOpen@17(ItemLedgEntry@1000 : Record "Item Ledger Entry";MaxToApply@1003 : Decimal);
    VAR
      ItemApplnEntry@1002 : Record "Item Application Entry";
      ItemLedgEntry2@1001 : Record "Item Ledger Entry";
    BEGIN
      with ItemLedgEntry do begin
        ItemLedgEntry2.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
        ItemLedgEntry2.SETRANGE("Item No.","Item No.");
        ItemLedgEntry2.SETRANGE("Location Code","Location Code");
        ItemLedgEntry2.SETRANGE(Positive,not Positive);
        ItemLedgEntry2.SETFILTER("Shipped Qty. Not Returned",'<%1&>=%2',0,-MaxToApply);
        if (MaxToApply <> 0) and Positive then
          ItemLedgEntry2.SETFILTER("Shipped Qty. Not Returned",'<=%1',-MaxToApply);
        if ItemLedgEntry2.FIND('-') then
          repeat
            if (CostAvailable(ItemLedgEntry2) <> 0) and
               not ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.")
            then
              InsertTempEntry(ItemLedgEntry2."Entry No.",0,true);
          until ItemLedgEntry2.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertTempEntry@21(EntryNo@1000 : Integer;AppliedQty@1001 : Decimal;ShowQuantity@1003 : Boolean);
    VAR
      ItemLedgEntry@1002 : Record "Item Ledger Entry";
    BEGIN
      ItemLedgEntry.GET(EntryNo);

      if ShowQuantity then
        if AppliedQty * ItemLedgEntry.Quantity < 0 then
          exit;

      if not TempItemLedgEntry.GET(EntryNo) then begin
        TempItemLedgEntry.RESET;
        TempItemLedgEntry := ItemLedgEntry;
        TempItemLedgEntry.CALCFIELDS("Reserved Quantity");
        TempItemLedgEntry.Quantity := AppliedQty;
        TempItemLedgEntry.INSERT;
      end else begin
        TempItemLedgEntry.Quantity := TempItemLedgEntry.Quantity + AppliedQty;
        TempItemLedgEntry.MODIFY;
      end;

      TotalApplied := TotalApplied + AppliedQty;
    END;

    LOCAL PROCEDURE InitApplied@13();
    BEGIN
      CLEAR(TotalApplied);
    END;

    LOCAL PROCEDURE RemoveApplications@1(Inbound@1000 : Integer;OutBound@1001 : Integer);
    VAR
      Application@1003 : Record "Item Application Entry";
    BEGIN
      Application.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.");
      Application.SETRANGE("Inbound Item Entry No.",Inbound);
      Application.SETRANGE("Outbound Item Entry No.",OutBound);
      if Application.FINDSET then
        repeat
          Apply.UnApply(Application);
          Apply.LogUnapply(Application);
        until Application.NEXT = 0;
    END;

    LOCAL PROCEDURE UnapplyRec@3();
    VAR
      Applyrec@1001 : Record "Item Ledger Entry";
      AppliedItemLedgEntry@1002 : Record "Item Ledger Entry";
    BEGIN
      Applyrec.GET(RecordToShow."Entry No.");
      CurrPage.SETSELECTIONFILTER(TempItemLedgEntry);
      if TempItemLedgEntry.FINDSET then
        repeat
          AppliedItemLedgEntry.GET(TempItemLedgEntry."Entry No.");
          if AppliedItemLedgEntry."Entry No." <> 0 then begin
            if Applyrec.Positive then
              RemoveApplications(Applyrec."Entry No.",AppliedItemLedgEntry."Entry No.")
            else
              RemoveApplications(AppliedItemLedgEntry."Entry No.",Applyrec."Entry No.");
          end;
        until TempItemLedgEntry.NEXT = 0;

      BlockItem(Applyrec."Item No.");
      Show;
    END;

    [Internal]
    PROCEDURE ApplyRec@5();
    VAR
      Applyrec@1000 : Record "Item Ledger Entry";
      AppliedItemLedgEntry@1002 : Record "Item Ledger Entry";
    BEGIN
      Applyrec.GET(RecordToShow."Entry No.");
      CurrPage.SETSELECTIONFILTER(TempItemLedgEntry);
      if TempItemLedgEntry.FINDSET then
        repeat
          AppliedItemLedgEntry.GET(TempItemLedgEntry."Entry No.");
          if AppliedItemLedgEntry."Entry No." <> 0 then begin
            Apply.ReApply(Applyrec,AppliedItemLedgEntry."Entry No.");
            Apply.LogApply(Applyrec,AppliedItemLedgEntry);
          end;
        until TempItemLedgEntry.NEXT = 0;

      if Applyrec.Positive then
        RemoveDuplicateApplication(Applyrec."Entry No.");

      Show;
    END;

    LOCAL PROCEDURE RemoveDuplicateApplication@4(ItemLedgerEntryNo@1000 : Integer);
    VAR
      ItemApplicationEntry@1001 : Record "Item Application Entry";
    BEGIN
      with ItemApplicationEntry do begin
        SETCURRENTKEY("Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application");
        SETRANGE("Inbound Item Entry No.",ItemLedgerEntryNo);
        SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
        SETFILTER("Outbound Item Entry No.",'<>0');
        if not ISEMPTY then begin
          SETRANGE("Outbound Item Entry No.",0);
          DELETEALL;
        end
      end;
    END;

    LOCAL PROCEDURE BlockItem@9(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record Item;
    BEGIN
      Item.GET(ItemNo);
      if Item."Application Wksh. User ID" <> UPPERCASE(USERID) then
        Item.CheckBlockedByApplWorksheet;

      Item."Application Wksh. User ID" := USERID;
      Item.MODIFY(true);
    END;

    LOCAL PROCEDURE GetApplQty@10();
    VAR
      ItemLedgEntry@1000 : Record "Item Ledger Entry";
    BEGIN
      ItemLedgEntry.GET("Entry No.");
      ApplQty := Quantity;
      Qty := ItemLedgEntry.Quantity;
    END;

    LOCAL PROCEDURE QuantityAvailable@11(ILE@1000 : Record "Item Ledger Entry") : Decimal;
    BEGIN
      with ILE do begin
        CALCFIELDS("Reserved Quantity");
        exit("Remaining Quantity" - "Reserved Quantity");
      end;
    END;

    LOCAL PROCEDURE CostAvailable@1102601000(ILE@1000 : Record "Item Ledger Entry") : Decimal;
    VAR
      Apprec@1102601000 : Record "Item Application Entry";
    BEGIN
      with ILE do begin
        if "Shipped Qty. Not Returned" <> 0 then
          exit(-"Shipped Qty. Not Returned");

        exit("Remaining Quantity" + Apprec.Returned("Entry No."));
      end;
    END;

    LOCAL PROCEDURE CaptionExpr@2() : Text[250];
    BEGIN
      if ShowApplied then
        exit(Text001);

      exit(Text002);
    END;

    BEGIN
    END.
  }
}

