OBJECT Table 5050 Contact
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Header"=rm,
                TableData "Contact Alt. Address"=rd,
                TableData "Contact Alt. Addr. Date Range"=rd,
                TableData "Contact Business Relation"=rd,
                TableData "Contact Mailing Group"=rd,
                TableData "Contact Industry Group"=rd,
                TableData "Contact Web Source"=rd,
                TableData "Rlshp. Mgt. Comment Line"=rd,
                TableData "Interaction Log Entry"=rm,
                TableData "Contact Job Responsibility"=rd,
                TableData "To-do"=rm,
                TableData "Contact Profile Answer"=rd,
                TableData Opportunity=rm,
                TableData "Opportunity Entry"=rm;
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               RMSetup.GET;

               if "No." = '' then begin
                 RMSetup.TESTFIELD("Contact Nos.");
                 NoSeriesMgt.InitSeries(RMSetup."Contact Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;

               if not SkipDefaults then begin
                 if "Salesperson Code" = '' then begin
                   "Salesperson Code" := RMSetup."Default Salesperson Code";
                   SetDefaultSalesperson;
                 end;
                 if "Territory Code" = '' then
                   "Territory Code" := RMSetup."Default Territory Code";
                 if "Country/Region Code" = '' then
                   "Country/Region Code" := RMSetup."Default Country/Region Code";
                 if "Language Code" = '' then
                   "Language Code" := RMSetup."Default Language Code";
                 if "Correspondence Type" = "Correspondence Type"::" " then
                   "Correspondence Type" := RMSetup."Default Correspondence Type";
                 if "Salutation Code" = '' then
                   if Type = Type::Company then
                     "Salutation Code" := RMSetup."Def. Company Salutation Code"
                   else
                     "Salutation Code" := RMSetup."Default Person Salutation Code";
               end;

               TypeChange;
               SetLastDateTimeModified;
             END;

    OnModify=BEGIN
               // If the modify is called from code, Rec and xRec are the same,
               // so find the xRec
               if FORMAT(xRec) = FORMAT(Rec) then
                 xRec.FIND;
               OnModify(xRec);
             END;

    OnDelete=VAR
               Task@1000 : Record "To-do";
               SegLine@1001 : Record "Segment Line";
               ContIndustGrp@1002 : Record "Contact Industry Group";
               ContactWebSource@1003 : Record "Contact Web Source";
               ContJobResp@1004 : Record "Contact Job Responsibility";
               ContMailingGrp@1005 : Record "Contact Mailing Group";
               ContProfileAnswer@1006 : Record "Contact Profile Answer";
               RMCommentLine@1007 : Record "Rlshp. Mgt. Comment Line";
               ContAltAddr@1008 : Record "Contact Alt. Address";
               ContAltAddrDateRange@1009 : Record "Contact Alt. Addr. Date Range";
               InteractLogEntry@1010 : Record "Interaction Log Entry";
               Opp@1011 : Record Opportunity;
               Cont@1015 : Record Contact;
               ContBusRel@1014 : Record "Contact Business Relation";
               CampaignTargetGrMgt@1016 : Codeunit "Campaign Target Group Mgt";
               VATRegistrationLogMgt@1012 : Codeunit "VAT Registration Log Mgt.";
             BEGIN
               Task.SETCURRENTKEY("Contact Company No.","Contact No.",Closed,Date);
               Task.SETRANGE("Contact Company No.","Company No.");
               Task.SETRANGE("Contact No.","No.");
               Task.SETRANGE(Closed,false);
               if Task.FIND('-') then
                 ERROR(CannotDeleteWithOpenTasksErr,"No.");

               SegLine.SETRANGE("Contact No.","No.");
               if not SegLine.ISEMPTY then
                 ERROR(Text001,TABLECAPTION,"No.");

               Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
               Opp.SETRANGE("Contact Company No.","Company No.");
               Opp.SETRANGE("Contact No.","No.");
               Opp.SETRANGE(Status,Opp.Status::"Not Started",Opp.Status::"In Progress");
               if Opp.FIND('-') then
                 ERROR(Text002,TABLECAPTION,"No.");

               ContBusRel.SETRANGE("Contact No.","No.");
               ContBusRel.DELETEALL;
               case Type of
                 Type::Company:
                   begin
                     ContIndustGrp.SETRANGE("Contact No.","No.");
                     ContIndustGrp.DELETEALL;
                     ContactWebSource.SETRANGE("Contact No.","No.");
                     ContactWebSource.DELETEALL;
                     DuplMgt.RemoveContIndex(Rec,false);
                     InteractLogEntry.SETCURRENTKEY("Contact Company No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","No.");
                     if InteractLogEntry.FIND('-') then
                       repeat
                         CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
                         CLEAR(InteractLogEntry."Contact Company No.");
                         CLEAR(InteractLogEntry."Contact No.");
                         InteractLogEntry.MODIFY;
                       until InteractLogEntry.NEXT = 0;

                     Cont.RESET;
                     Cont.SETCURRENTKEY("Company No.");
                     Cont.SETRANGE("Company No.","No.");
                     Cont.SETRANGE(Type,Type::Person);
                     if Cont.FIND('-') then
                       repeat
                         Cont.DELETE(true);
                       until Cont.NEXT = 0;

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     if Opp.FIND('-') then
                       repeat
                         CLEAR(Opp."Contact No.");
                         CLEAR(Opp."Contact Company No.");
                         Opp.MODIFY;
                       until Opp.NEXT = 0;

                     Task.RESET;
                     Task.SETCURRENTKEY("Contact Company No.");
                     Task.SETRANGE("Contact Company No.","Company No.");
                     if Task.FIND('-') then
                       repeat
                         CLEAR(Task."Contact No.");
                         CLEAR(Task."Contact Company No.");
                         Task.MODIFY;
                       until Task.NEXT = 0;
                   end;
                 Type::Person:
                   begin
                     ContJobResp.SETRANGE("Contact No.","No.");
                     ContJobResp.DELETEALL;

                     InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                     InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
                     InteractLogEntry.SETRANGE("Contact No.","No.");
                     InteractLogEntry.MODIFYALL("Contact No.","Company No.");

                     Opp.RESET;
                     Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Opp.SETRANGE("Contact Company No.","Company No.");
                     Opp.SETRANGE("Contact No.","No.");
                     Opp.MODIFYALL("Contact No.","Company No.");

                     Task.RESET;
                     Task.SETCURRENTKEY("Contact Company No.","Contact No.");
                     Task.SETRANGE("Contact Company No.","Company No.");
                     Task.SETRANGE("Contact No.","No.");
                     Task.MODIFYALL("Contact No.","Company No.");
                   end;
               end;

               ContMailingGrp.SETRANGE("Contact No.","No.");
               ContMailingGrp.DELETEALL;

               ContProfileAnswer.SETRANGE("Contact No.","No.");
               ContProfileAnswer.DELETEALL;

               RMCommentLine.SETRANGE("Table Name",RMCommentLine."Table Name"::Contact);
               RMCommentLine.SETRANGE("No.","No.");
               RMCommentLine.SETRANGE("Sub No.",0);
               RMCommentLine.DELETEALL;

               ContAltAddr.SETRANGE("Contact No.","No.");
               ContAltAddr.DELETEALL;

               ContAltAddrDateRange.SETRANGE("Contact No.","No.");
               ContAltAddrDateRange.DELETEALL;

               VATRegistrationLogMgt.DeleteContactLog(Rec);
             END;

    OnRename=BEGIN
               VALIDATE("Lookup Contact No.");
             END;

    CaptionML=ENU=Contact;
    LookupPageID="Contact List";
    DrillDownPageID="Contact List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  RMSetup.GET;
                                                                  NoSeriesMgt.TestManual(RMSetup."Contact Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                NameBreakdown;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=VAR
                                                                PostCode@1000 : Record "Post Code";
                                                              BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Currency Code }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 29  ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   CaptionML=ENU=Salesperson Code }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   OnValidate=VAR
                                                                PostCode@1000 : Record "Post Code";
                                                              BEGIN
                                                                PostCode.ValidateCountryCode(City,"Post Code",County,"Country/Region Code");
                                                                if "Country/Region Code" <> xRec."Country/Region Code" then
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Rlshp. Mgt. Comment Line" WHERE ("Table Name"=CONST(Contact),
                                                                                                       "No."=FIELD("No."),
                                                                                                       "Sub No."=CONST(0)));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 86  ;   ;VAT Registration No.;Text20        ;OnValidate=BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                if "VAT Registration No." <> xRec."VAT Registration No." then
                                                                  VATRegistrationValidation;
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=VAR
                                                                PostCode@1000 : Record "Post Code";
                                                              BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit "Mail Management";
                                                              BEGIN
                                                                if ("Search E-Mail" = UPPERCASE(xRec."E-Mail")) or ("Search E-Mail" = '') then
                                                                  "Search E-Mail" := "E-Mail";
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=ENU=Image }
    { 5050;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                if (CurrFieldNo <> 0) and ("No." <> '') then begin
                                                                  TypeChange;
                                                                  MODIFY;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Company,Person;
                                                   OptionString=Company,Person }
    { 5051;   ;Company No.         ;Code20        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   OnValidate=VAR
                                                                Opp@1000 : Record Opportunity;
                                                                OppEntry@1001 : Record "Opportunity Entry";
                                                                Task@1002 : Record "To-do";
                                                                InteractLogEntry@1003 : Record "Interaction Log Entry";
                                                                SegLine@1005 : Record "Segment Line";
                                                                SalesHeader@1004 : Record "Sales Header";
                                                                Cont@1008 : Record Contact;
                                                                ContBusRel@1007 : Record "Contact Business Relation";
                                                              BEGIN
                                                                if Cont.GET("Company No.") then
                                                                  InheritCompanyToPersonData(Cont)
                                                                else
                                                                  CLEAR("Company Name");

                                                                if "Company No." = xRec."Company No." then
                                                                  exit;

                                                                TESTFIELD(Type,Type::Person);

                                                                SegLine.SETRANGE("Contact No.","No.");
                                                                if not SegLine.ISEMPTY then
                                                                  ERROR(Text012,FIELDCAPTION("Company No."));

                                                                if Cont.GET("No.") then begin
                                                                  if xRec."Company No." <> '' then begin
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    Task.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Task.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    Task.SETRANGE("Contact No.","No.");
                                                                    Task.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",xRec."Company No.");
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact No.",xRec."Company No.");
                                                                    ContBusRel.RESET;
                                                                    ContBusRel.SETCURRENTKEY("Link to Table","No.");
                                                                    ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
                                                                    ContBusRel.SETRANGE("Contact No.",xRec."Company No.");
                                                                    SalesHeader.SETCURRENTKEY("Sell-to Customer No.","External Document No.");
                                                                    SalesHeader.SETRANGE("Sell-to Contact No.","No.");
                                                                    if ContBusRel.FINDFIRST then
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",ContBusRel."No.")
                                                                    else
                                                                      SalesHeader.SETRANGE("Sell-to Customer No.",'');
                                                                    if SalesHeader.FIND('-') then
                                                                      repeat
                                                                        SalesHeader."Sell-to Contact No." := xRec."Company No.";
                                                                        if SalesHeader."Sell-to Contact No." = SalesHeader."Bill-to Contact No." then
                                                                          SalesHeader."Bill-to Contact No." := xRec."Company No.";
                                                                        SalesHeader.MODIFY;
                                                                      until SalesHeader.NEXT = 0;
                                                                    SalesHeader.RESET;
                                                                    SalesHeader.SETCURRENTKEY("Bill-to Contact No.");
                                                                    SalesHeader.SETRANGE("Bill-to Contact No.","No.");
                                                                    SalesHeader.MODIFYALL("Bill-to Contact No.",xRec."Company No.");
                                                                  end else begin
                                                                    Opp.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Opp.SETRANGE("Contact Company No.",'');
                                                                    Opp.SETRANGE("Contact No.","No.");
                                                                    Opp.MODIFYALL("Contact Company No.","Company No.");
                                                                    OppEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    OppEntry.SETRANGE("Contact Company No.",'');
                                                                    OppEntry.SETRANGE("Contact No.","No.");
                                                                    OppEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                    Task.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    Task.SETRANGE("Contact Company No.",'');
                                                                    Task.SETRANGE("Contact No.","No.");
                                                                    Task.MODIFYALL("Contact Company No.","Company No.");
                                                                    InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
                                                                    InteractLogEntry.SETRANGE("Contact Company No.",'');
                                                                    InteractLogEntry.SETRANGE("Contact No.","No.");
                                                                    InteractLogEntry.MODIFYALL("Contact Company No.","Company No.");
                                                                  end;

                                                                  if CurrFieldNo <> 0 then
                                                                    MODIFY;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Company No. }
    { 5052;   ;Company Name        ;Text50        ;TableRelation=Contact WHERE (Type=CONST(Company));
                                                   OnValidate=BEGIN
                                                                VALIDATE("Company No.",GetCompNo("Company Name"));
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Company Name }
    { 5053;   ;Lookup Contact No.  ;Code20        ;TableRelation=Contact;
                                                   OnValidate=BEGIN
                                                                if Type = Type::Company then
                                                                  "Lookup Contact No." := ''
                                                                else
                                                                  "Lookup Contact No." := "No.";
                                                              END;

                                                   CaptionML=ENU=Lookup Contact No.;
                                                   Editable=false }
    { 5054;   ;First Name          ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=First Name }
    { 5055;   ;Middle Name         ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Middle Name }
    { 5056;   ;Surname             ;Text30        ;OnValidate=BEGIN
                                                                Name := CalculatedName;
                                                                ProcessNameChange;
                                                              END;

                                                   CaptionML=ENU=Surname }
    { 5058;   ;Job Title           ;Text30        ;CaptionML=ENU=Job Title }
    { 5059;   ;Initials            ;Text30        ;CaptionML=ENU=Initials }
    { 5060;   ;Extension No.       ;Text30        ;CaptionML=ENU=Extension No. }
    { 5061;   ;Mobile Phone No.    ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Mobile Phone No. }
    { 5062;   ;Pager               ;Text30        ;CaptionML=ENU=Pager }
    { 5063;   ;Organizational Level Code;Code10   ;TableRelation="Organizational Level";
                                                   CaptionML=ENU=Organizational Level Code }
    { 5064;   ;Exclude from Segment;Boolean       ;CaptionML=ENU=Exclude from Segment }
    { 5065;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 5066;   ;Next Task Date      ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Min("To-do".Date WHERE ("Contact Company No."=FIELD("Company No."),
                                                                                       "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                       Closed=CONST(false),
                                                                                       "System To-do Type"=CONST("Contact Attendee")));
                                                   CaptionML=ENU=Next Task Date;
                                                   Editable=false }
    { 5067;   ;Last Date Attempted ;Date          ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE ("Contact Company No."=FIELD("Company No."),
                                                                                                       "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                       "Initiated By"=CONST(Us),
                                                                                                       Postponed=CONST(false)));
                                                   CaptionML=ENU=Last Date Attempted;
                                                   Editable=false }
    { 5068;   ;Date of Last Interaction;Date      ;FieldClass=FlowField;
                                                   CalcFormula=Max("Interaction Log Entry".Date WHERE ("Contact Company No."=FIELD("Company No."),
                                                                                                       "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                       "Attempt Failed"=CONST(false),
                                                                                                       Postponed=CONST(false)));
                                                   CaptionML=ENU=Date of Last Interaction;
                                                   Editable=false }
    { 5069;   ;No. of Job Responsibilities;Integer;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Job Responsibility" WHERE ("Contact No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Job Responsibilities;
                                                   Editable=false }
    { 5070;   ;No. of Industry Groups;Integer     ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Industry Group" WHERE ("Contact No."=FIELD("Company No.")));
                                                   CaptionML=ENU=No. of Industry Groups;
                                                   Editable=false }
    { 5071;   ;No. of Business Relations;Integer  ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Business Relation" WHERE ("Contact No."=FIELD("Company No.")));
                                                   CaptionML=ENU=No. of Business Relations;
                                                   Editable=false }
    { 5072;   ;No. of Mailing Groups;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Contact Mailing Group" WHERE ("Contact No."=FIELD("No.")));
                                                   CaptionML=ENU=No. of Mailing Groups;
                                                   Editable=false }
    { 5073;   ;External ID         ;Code20        ;CaptionML=ENU=External ID }
    { 5074;   ;No. of Interactions ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Interaction Log Entry" WHERE ("Contact Company No."=FIELD(FILTER("Company No.")),
                                                                                                    Canceled=CONST(false),
                                                                                                    "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                    Date=FIELD("Date Filter"),
                                                                                                    Postponed=CONST(false)));
                                                   CaptionML=ENU=No. of Interactions;
                                                   Editable=false }
    { 5076;   ;Cost (LCY)          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Cost (LCY)" WHERE ("Contact Company No."=FIELD("Company No."),
                                                                                                               Canceled=CONST(false),
                                                                                                               "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                               Date=FIELD("Date Filter"),
                                                                                                               Postponed=CONST(false)));
                                                   CaptionML=ENU=Cost (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5077;   ;Duration (Min.)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Interaction Log Entry"."Duration (Min.)" WHERE ("Contact Company No."=FIELD("Company No."),
                                                                                                                    Canceled=CONST(false),
                                                                                                                    "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                                    Date=FIELD("Date Filter"),
                                                                                                                    Postponed=CONST(false)));
                                                   CaptionML=ENU=Duration (Min.);
                                                   DecimalPlaces=0:0;
                                                   Editable=false }
    { 5078;   ;No. of Opportunities;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Opportunity Entry" WHERE (Active=CONST(true),
                                                                                                "Contact Company No."=FIELD("Company No."),
                                                                                                "Estimated Close Date"=FIELD("Date Filter"),
                                                                                                "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                "Action Taken"=FIELD("Action Taken Filter")));
                                                   CaptionML=ENU=No. of Opportunities;
                                                   Editable=false }
    { 5079;   ;Estimated Value (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Estimated Value (LCY)" WHERE (Active=CONST(true),
                                                                                                                      "Contact Company No."=FIELD("Company No."),
                                                                                                                      "Estimated Close Date"=FIELD("Date Filter"),
                                                                                                                      "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                                      "Action Taken"=FIELD("Action Taken Filter")));
                                                   CaptionML=ENU=Estimated Value (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5080;   ;Calcd. Current Value (LCY);Decimal ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Opportunity Entry"."Calcd. Current Value (LCY)" WHERE (Active=CONST(true),
                                                                                                                           "Contact Company No."=FIELD("Company No."),
                                                                                                                           "Estimated Close Date"=FIELD("Date Filter"),
                                                                                                                           "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                                           "Action Taken"=FIELD("Action Taken Filter")));
                                                   CaptionML=ENU=Calcd. Current Value (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 5082;   ;Opportunity Entry Exists;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Opportunity Entry" WHERE (Active=CONST(true),
                                                                                                "Contact Company No."=FIELD("Company No."),
                                                                                                "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                                "Sales Cycle Code"=FIELD("Sales Cycle Filter"),
                                                                                                "Sales Cycle Stage"=FIELD("Sales Cycle Stage Filter"),
                                                                                                "Salesperson Code"=FIELD("Salesperson Filter"),
                                                                                                "Campaign No."=FIELD("Campaign Filter"),
                                                                                                "Action Taken"=FIELD("Action Taken Filter"),
                                                                                                "Estimated Value (LCY)"=FIELD("Estimated Value Filter"),
                                                                                                "Calcd. Current Value (LCY)"=FIELD("Calcd. Current Value Filter"),
                                                                                                "Completed %"=FIELD("Completed % Filter"),
                                                                                                "Chances of Success %"=FIELD("Chances of Success % Filter"),
                                                                                                "Probability %"=FIELD("Probability % Filter"),
                                                                                                "Estimated Close Date"=FIELD("Date Filter"),
                                                                                                "Close Opportunity Code"=FIELD("Close Opportunity Filter")));
                                                   CaptionML=ENU=Opportunity Entry Exists;
                                                   Editable=false }
    { 5083;   ;Task Entry Exists   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("To-do" WHERE ("Contact Company No."=FIELD("Company No."),
                                                                                    "Contact No."=FIELD(FILTER("Lookup Contact No.")),
                                                                                    "Team Code"=FIELD("Team Filter"),
                                                                                    "Salesperson Code"=FIELD("Salesperson Filter"),
                                                                                    "Campaign No."=FIELD("Campaign Filter"),
                                                                                    Date=FIELD("Date Filter"),
                                                                                    Status=FIELD("Task Status Filter"),
                                                                                    Priority=FIELD("Priority Filter"),
                                                                                    Closed=FIELD("Task Closed Filter")));
                                                   CaptionML=ENU=Task Entry Exists;
                                                   Editable=false }
    { 5084;   ;Salesperson Filter  ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Salesperson/Purchaser";
                                                   CaptionML=ENU=Salesperson Filter }
    { 5085;   ;Campaign Filter     ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=Campaign;
                                                   CaptionML=ENU=Campaign Filter }
    { 5087;   ;Action Taken Filter ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Action Taken Filter;
                                                   OptionCaptionML=ENU=" ,Next,Previous,Updated,Jumped,Won,Lost";
                                                   OptionString=" ",Next,Previous,Updated,Jumped,Won,Lost }
    { 5088;   ;Sales Cycle Filter  ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle";
                                                   CaptionML=ENU=Sales Cycle Filter }
    { 5089;   ;Sales Cycle Stage Filter;Integer   ;FieldClass=FlowFilter;
                                                   TableRelation="Sales Cycle Stage".Stage WHERE ("Sales Cycle Code"=FIELD("Sales Cycle Filter"));
                                                   CaptionML=ENU=Sales Cycle Stage Filter }
    { 5090;   ;Probability % Filter;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Probability % Filter;
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5091;   ;Completed % Filter  ;Decimal       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Completed % Filter;
                                                   DecimalPlaces=1:1;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5092;   ;Estimated Value Filter;Decimal     ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Estimated Value Filter;
                                                   AutoFormatType=1 }
    { 5093;   ;Calcd. Current Value Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Calcd. Current Value Filter;
                                                   AutoFormatType=1 }
    { 5094;   ;Chances of Success % Filter;Decimal;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Chances of Success % Filter;
                                                   DecimalPlaces=0:0;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5095;   ;Task Status Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Task Status Filter;
                                                   OptionCaptionML=ENU=Not Started,In Progress,Completed,Waiting,Postponed;
                                                   OptionString="Not Started","In Progress",Completed,Waiting,Postponed }
    { 5096;   ;Task Closed Filter  ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Task Closed Filter }
    { 5097;   ;Priority Filter     ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Priority Filter;
                                                   OptionCaptionML=ENU=Low,Normal,High;
                                                   OptionString=Low,Normal,High }
    { 5098;   ;Team Filter         ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation=Team;
                                                   CaptionML=ENU=Team Filter }
    { 5099;   ;Close Opportunity Filter;Code10    ;FieldClass=FlowFilter;
                                                   TableRelation="Close Opportunity Code";
                                                   CaptionML=ENU=Close Opportunity Filter }
    { 5100;   ;Correspondence Type ;Option        ;CaptionML=ENU=Correspondence Type;
                                                   OptionCaptionML=ENU=" ,Hard Copy,Email,Fax";
                                                   OptionString=" ","Hard Copy",Email,Fax }
    { 5101;   ;Salutation Code     ;Code10        ;TableRelation=Salutation;
                                                   CaptionML=ENU=Salutation Code }
    { 5102;   ;Search E-Mail       ;Code80        ;CaptionML=ENU=Search Email }
    { 5104;   ;Last Time Modified  ;Time          ;CaptionML=ENU=Last Time Modified }
    { 5105;   ;E-Mail 2            ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit "Mail Management";
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail 2");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email 2 }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Search Name"                            }
    {    ;"Company Name","Company No.",Type,Name   }
    {    ;"Company No."                            }
    {    ;"Territory Code"                         }
    {    ;"Salesperson Code"                       }
    {    ;"VAT Registration No."                   }
    {    ;"Search E-Mail"                          }
    {    ;Name                                     }
    {    ;City                                     }
    {    ;"Post Code"                              }
    {    ;"Phone No."                              }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.",Name,Type,City,"Post Code","Phone No." }
    { 2   ;Brick               ;"No.",Name,Type,City,"Phone No.",Image   }
  }
  CODE
  {
    VAR
      CannotDeleteWithOpenTasksErr@1000 : TextConst '@@@="%1 = Contact No.";ENU=You cannot delete contact %1 because there are one or more tasks open.';
      Text001@1001 : TextConst 'ENU=You cannot delete the %2 record of the %1 because the contact is assigned one or more unlogged segments.';
      Text002@1002 : TextConst 'ENU=You cannot delete the %2 record of the %1 because one or more opportunities are in not started or progress.';
      Text003@1003 : TextConst 'ENU=%1 cannot be changed because one or more interaction log entries are linked to the contact.';
      CannotChangeWithOpenTasksErr@1005 : TextConst '@@@="%1 = Contact No.";ENU=%1 cannot be changed because one or more tasks are linked to the contact.';
      Text006@1006 : TextConst 'ENU=%1 cannot be changed because one or more opportunities are linked to the contact.';
      Text007@1007 : TextConst 'ENU=%1 cannot be changed because there are one or more related people linked to the contact.';
      RelatedRecordIsCreatedMsg@1009 : TextConst '@@@=The Customer record has been created.;ENU=The %1 record has been created.';
      Text010@1010 : TextConst 'ENU=The %2 record of the %1 is not linked with any other table.';
      RMSetup@1012 : Record "Marketing Setup";
      DuplMgt@1015 : Codeunit DuplicateManagement;
      NoSeriesMgt@1016 : Codeunit NoSeriesManagement;
      UpdateCustVendBank@1017 : Codeunit "CustVendBank-Update";
      CampaignMgt@1050 : Codeunit "Campaign Target Group Mgt";
      ContChanged@1018 : Boolean;
      SkipDefaults@1019 : Boolean;
      Text012@1020 : TextConst 'ENU=You cannot change %1 because one or more unlogged segments are assigned to the contact.';
      Text019@1022 : TextConst 'ENU=The %2 record of the %1 already has the %3 with %4 %5.';
      CreateCustomerFromContactQst@1021 : TextConst 'ENU=Do you want to create a contact as a customer using a customer template?';
      Text021@1023 : TextConst 'ENU=You have to set up formal and informal salutation formulas in %1  language for the %2 contact.';
      Text022@1034 : TextConst 'ENU=The creation of the customer has been aborted.';
      Text033@1008 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      SelectContactErr@1004 : TextConst 'ENU=You must select an existing contact.';
      AlreadyExistErr@1024 : TextConst '@@@="%1=Contact table caption;%2=Contact number;%3=Contact Business Relation table caption;%4=Contact Business Relation Link to Table value;%5=Contact Business Relation number";ENU=%1 %2 already has a %3 with %4 %5.';
      HideValidationDialog@1025 : Boolean;

    [External]
    PROCEDURE OnModify@4(xRec@1005 : Record Contact);
    VAR
      OldCont@1001 : Record Contact;
      Cont@1003 : Record Contact;
    BEGIN
      SetLastDateTimeModified;

      if "No." <> '' then
        if (Name <> xRec.Name) or
           ("Search Name" <> xRec."Search Name") or
           ("Name 2" <> xRec."Name 2") or
           (Address <> xRec.Address) or
           ("Address 2" <> xRec."Address 2") or
           (City <> xRec.City) or
           ("Phone No." <> xRec."Phone No.") or
           ("Telex No." <> xRec."Telex No.") or
           ("Territory Code" <> xRec."Territory Code") or
           ("Currency Code" <> xRec."Currency Code") or
           ("Language Code" <> xRec."Language Code") or
           ("Salesperson Code" <> xRec."Salesperson Code") or
           ("Country/Region Code" <> xRec."Country/Region Code") or
           ("Fax No." <> xRec."Fax No.") or
           ("Telex Answer Back" <> xRec."Telex Answer Back") or
           ("VAT Registration No." <> xRec."VAT Registration No.") or
           ("Post Code" <> xRec."Post Code") or
           (County <> xRec.County) or
           ("E-Mail" <> xRec."E-Mail") or
           ("Home Page" <> xRec."Home Page") or
           (Type <> xRec.Type)
        then
          UpdateCustVendBank.RUN(Rec);

      if Type = Type::Company then begin
        RMSetup.GET;
        Cont.RESET;
        Cont.SETCURRENTKEY("Company No.");
        Cont.SETRANGE("Company No.","No.");
        Cont.SETRANGE(Type,Type::Person);
        Cont.SETFILTER("No.",'<>%1',"No.");
        if Cont.FIND('-') then
          repeat
            ContChanged := false;
            OldCont := Cont;
            if Name <> xRec.Name then begin
              Cont."Company Name" := Name;
              ContChanged := true;
            end;
            if RMSetup."Inherit Salesperson Code" and
               (xRec."Salesperson Code" <> "Salesperson Code") and
               (xRec."Salesperson Code" = Cont."Salesperson Code")
            then begin
              Cont."Salesperson Code" := "Salesperson Code";
              ContChanged := true;
            end;
            if RMSetup."Inherit Territory Code" and
               (xRec."Territory Code" <> "Territory Code") and
               (xRec."Territory Code" = Cont."Territory Code")
            then begin
              Cont."Territory Code" := "Territory Code";
              ContChanged := true;
            end;
            if RMSetup."Inherit Country/Region Code" and
               (xRec."Country/Region Code" <> "Country/Region Code") and
               (xRec."Country/Region Code" = Cont."Country/Region Code")
            then begin
              Cont."Country/Region Code" := "Country/Region Code";
              ContChanged := true;
            end;
            if RMSetup."Inherit Language Code" and
               (xRec."Language Code" <> "Language Code") and
               (xRec."Language Code" = Cont."Language Code")
            then begin
              Cont."Language Code" := "Language Code";
              ContChanged := true;
            end;
            if RMSetup."Inherit Address Details" then
              if xRec.IdenticalAddress(Cont) then begin
                if xRec.Address <> Address then begin
                  Cont.Address := Address;
                  ContChanged := true;
                end;
                if xRec."Address 2" <> "Address 2" then begin
                  Cont."Address 2" := "Address 2";
                  ContChanged := true;
                end;
                if xRec."Post Code" <> "Post Code" then begin
                  Cont."Post Code" := "Post Code";
                  ContChanged := true;
                end;
                if xRec.City <> City then begin
                  Cont.City := City;
                  ContChanged := true;
                end;
                if xRec.County <> County then begin
                  Cont.County := County;
                  ContChanged := true;
                end;
              end;
            if RMSetup."Inherit Communication Details" then begin
              if (xRec."Phone No." <> "Phone No.") and (xRec."Phone No." = Cont."Phone No.") then begin
                Cont."Phone No." := "Phone No.";
                ContChanged := true;
              end;
              if (xRec."Telex No." <> "Telex No.") and (xRec."Telex No." = Cont."Telex No.") then begin
                Cont."Telex No." := "Telex No.";
                ContChanged := true;
              end;
              if (xRec."Fax No." <> "Fax No.") and (xRec."Fax No." = Cont."Fax No.") then begin
                Cont."Fax No." := "Fax No.";
                ContChanged := true;
              end;
              if (xRec."Telex Answer Back" <> "Telex Answer Back") and (xRec."Telex Answer Back" = Cont."Telex Answer Back") then begin
                Cont."Telex Answer Back" := "Telex Answer Back";
                ContChanged := true;
              end;
              if (xRec."E-Mail" <> "E-Mail") and (xRec."E-Mail" = Cont."E-Mail") then begin
                Cont.VALIDATE("E-Mail","E-Mail");
                ContChanged := true;
              end;
              if (xRec."Home Page" <> "Home Page") and (xRec."Home Page" = Cont."Home Page") then begin
                Cont."Home Page" := "Home Page";
                ContChanged := true;
              end;
              if (xRec."Extension No." <> "Extension No.") and (xRec."Extension No." = Cont."Extension No.") then begin
                Cont."Extension No." := "Extension No.";
                ContChanged := true;
              end;
              if (xRec."Mobile Phone No." <> "Mobile Phone No.") and (xRec."Mobile Phone No." = Cont."Mobile Phone No.") then begin
                Cont."Mobile Phone No." := "Mobile Phone No.";
                ContChanged := true;
              end;
              if (xRec.Pager <> Pager) and (xRec.Pager = Cont.Pager) then begin
                Cont.Pager := Pager;
                ContChanged := true;
              end;
            end;
            if ContChanged then begin
              Cont.OnModify(OldCont);
              Cont.MODIFY;
            end;
          until Cont.NEXT = 0;

        if (Name <> xRec.Name) or
           ("Name 2" <> xRec."Name 2") or
           (Address <> xRec.Address) or
           ("Address 2" <> xRec."Address 2") or
           (City <> xRec.City) or
           ("Post Code" <> xRec."Post Code") or
           ("VAT Registration No." <> xRec."VAT Registration No.") or
           ("Phone No." <> xRec."Phone No.")
        then
          CheckDupl;
      end;
    END;

    [External]
    PROCEDURE TypeChange@1();
    VAR
      InteractLogEntry@1000 : Record "Interaction Log Entry";
      Opp@1001 : Record Opportunity;
      Task@1002 : Record "To-do";
      Cont@1006 : Record Contact;
      CampaignTargetGrMgt@1003 : Codeunit "Campaign Target Group Mgt";
    BEGIN
      RMSetup.GET;

      if Type <> xRec.Type then begin
        InteractLogEntry.LOCKTABLE;
        Cont.LOCKTABLE;
        InteractLogEntry.SETCURRENTKEY("Contact Company No.","Contact No.");
        InteractLogEntry.SETRANGE("Contact Company No.","Company No.");
        InteractLogEntry.SETRANGE("Contact No.","No.");
        if InteractLogEntry.FINDFIRST then
          ERROR(Text003,FIELDCAPTION(Type));
        Task.SETRANGE("Contact Company No.","Company No.");
        Task.SETRANGE("Contact No.","No.");
        if not Task.ISEMPTY then
          ERROR(CannotChangeWithOpenTasksErr,FIELDCAPTION(Type));
        Opp.SETRANGE("Contact Company No.","Company No.");
        Opp.SETRANGE("Contact No.","No.");
        if not Opp.ISEMPTY then
          ERROR(Text006,FIELDCAPTION(Type));
      end;

      case Type of
        Type::Company:
          begin
            if Type <> xRec.Type then begin
              TESTFIELD("Organizational Level Code",'');
              TESTFIELD("No. of Job Responsibilities",0);
            end;
            "First Name" := '';
            "Middle Name" := '';
            Surname := '';
            "Job Title" := '';
            "Company No." := "No.";
            "Company Name" := Name;
            "Salutation Code" := RMSetup."Def. Company Salutation Code";
          end;
        Type::Person:
          begin
            CampaignTargetGrMgt.DeleteContfromTargetGr(InteractLogEntry);
            Cont.RESET;
            Cont.SETCURRENTKEY("Company No.");
            Cont.SETRANGE("Company No.","No.");
            Cont.SETRANGE(Type,Type::Person);
            if Cont.FINDFIRST then
              ERROR(Text007,FIELDCAPTION(Type));
            if Type <> xRec.Type then begin
              TESTFIELD("No. of Business Relations",0);
              TESTFIELD("No. of Industry Groups",0);
              TESTFIELD("Currency Code",'');
              TESTFIELD("VAT Registration No.",'');
            end;
            if "Company No." = "No." then begin
              "Company No." := '';
              "Company Name" := '';
              "Salutation Code" := RMSetup."Default Person Salutation Code";
              NameBreakdown;
            end;
          end;
      end;
      VALIDATE("Lookup Contact No.");

      if Cont.GET("No.") then begin
        if Type = Type::Company then
          CheckDupl
        else
          DuplMgt.RemoveContIndex(Rec,false);
      end;
    END;

    [External]
    PROCEDURE AssistEdit@2(OldCont@1000 : Record Contact) : Boolean;
    VAR
      Cont@1003 : Record Contact;
    BEGIN
      with Cont do begin
        Cont := Rec;
        RMSetup.GET;
        RMSetup.TESTFIELD("Contact Nos.");
        if NoSeriesMgt.SelectSeries(RMSetup."Contact Nos.",OldCont."No. Series","No. Series") then begin
          RMSetup.GET;
          RMSetup.TESTFIELD("Contact Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Cont;
          exit(true);
        end;
      end;
    END;

    [External]
    PROCEDURE CreateCustomer@3(CustomerTemplate@1006 : Code[10]);
    VAR
      Cust@1000 : Record Customer;
      CustTemplate@1003 : Record "Customer Template";
      DefaultDim@1005 : Record "Default Dimension";
      DefaultDim2@1004 : Record "Default Dimension";
      ContBusRel@1008 : Record "Contact Business Relation";
      OfficeMgt@1002 : Codeunit "Office Management";
    BEGIN
      CheckForExistingRelationships(ContBusRel."Link to Table"::Customer);
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");

      if CustomerTemplate <> '' then
        if CustTemplate.GET(CustomerTemplate) then;

      CLEAR(Cust);
      Cust.SetInsertFromContact(true);
      Cust."Contact Type" := Type;
      OnBeforeCustomerInsert(Cust);
      Cust.INSERT(true);
      Cust.SetInsertFromContact(false);

      ContBusRel."Contact No." := "No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Customers";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Customer;
      ContBusRel."No." := Cust."No.";
      ContBusRel.INSERT(true);

      UpdateCustVendBank.UpdateCustomer(Rec,ContBusRel);

      Cust.GET(ContBusRel."No.");
      if Type = Type::Company then begin
        Cust.VALIDATE(Name,"Company Name");
        Cust.VALIDATE("Country/Region Code","Country/Region Code");
      end;
      Cust.MODIFY;

      if CustTemplate.Code <> '' then begin
        if "Territory Code" = '' then
          Cust."Territory Code" := CustTemplate."Territory Code"
        else
          Cust."Territory Code" := "Territory Code";
        if "Currency Code" = '' then
          Cust."Currency Code" := CustTemplate."Currency Code"
        else
          Cust."Currency Code" := "Currency Code";
        if "Country/Region Code" = '' then
          Cust."Country/Region Code" := CustTemplate."Country/Region Code"
        else
          Cust."Country/Region Code" := "Country/Region Code";
        Cust."Customer Posting Group" := CustTemplate."Customer Posting Group";
        Cust."Customer Price Group" := CustTemplate."Customer Price Group";
        if CustTemplate."Invoice Disc. Code" <> '' then
          Cust."Invoice Disc. Code" := CustTemplate."Invoice Disc. Code";
        Cust."Customer Disc. Group" := CustTemplate."Customer Disc. Group";
        Cust."Allow Line Disc." := CustTemplate."Allow Line Disc.";
        Cust."Gen. Bus. Posting Group" := CustTemplate."Gen. Bus. Posting Group";
        Cust."VAT Bus. Posting Group" := CustTemplate."VAT Bus. Posting Group";
        Cust."Payment Terms Code" := CustTemplate."Payment Terms Code";
        Cust."Payment Method Code" := CustTemplate."Payment Method Code";
        Cust."Prices Including VAT" := CustTemplate."Prices Including VAT";
        Cust."Shipment Method Code" := CustTemplate."Shipment Method Code";
        Cust.MODIFY;

        DefaultDim.SETRANGE("Table ID",DATABASE::"Customer Template");
        DefaultDim.SETRANGE("No.",CustTemplate.Code);
        if DefaultDim.FIND('-') then
          repeat
            CLEAR(DefaultDim2);
            DefaultDim2.INIT;
            DefaultDim2.VALIDATE("Table ID",DATABASE::Customer);
            DefaultDim2."No." := Cust."No.";
            DefaultDim2.VALIDATE("Dimension Code",DefaultDim."Dimension Code");
            DefaultDim2.VALIDATE("Dimension Value Code",DefaultDim."Dimension Value Code");
            DefaultDim2."Value Posting" := DefaultDim."Value Posting";
            DefaultDim2.INSERT(true);
          until DefaultDim.NEXT = 0;
      end;

      UpdateQuotes(Cust);
      CampaignMgt.ConverttoCustomer(Rec,Cust);
      if OfficeMgt.IsAvailable then
        PAGE.RUN(PAGE::"Customer Card",Cust)
      else
        if not HideValidationDialog then
          MESSAGE(RelatedRecordIsCreatedMsg,Cust.TABLECAPTION);
    END;

    [External]
    PROCEDURE CreateVendor@7();
    VAR
      ContBusRel@1004 : Record "Contact Business Relation";
      Vend@1000 : Record Vendor;
      ContComp@1001 : Record Contact;
      OfficeMgt@1002 : Codeunit "Office Management";
    BEGIN
      CheckForExistingRelationships(ContBusRel."Link to Table"::Vendor);
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");

      CLEAR(Vend);
      Vend.SetInsertFromContact(true);
      OnBeforeVendorInsert(Vend);
      Vend.INSERT(true);
      Vend.SetInsertFromContact(false);

      if Type = Type::Company then
        ContComp := Rec
      else
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Vendors";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::Vendor;
      ContBusRel."No." := Vend."No.";
      ContBusRel.INSERT(true);

      UpdateCustVendBank.UpdateVendor(ContComp,ContBusRel);

      if OfficeMgt.IsAvailable then
        PAGE.RUN(PAGE::"Vendor Card",Vend)
      else
        if not HideValidationDialog then
          MESSAGE(RelatedRecordIsCreatedMsg,Vend.TABLECAPTION);
    END;

    PROCEDURE CreateVendor2@40();
    BEGIN
      CreateVendor;
    END;

    [External]
    PROCEDURE CreateBankAccount@8();
    VAR
      BankAcc@1000 : Record "Bank Account";
      ContComp@1001 : Record Contact;
      ContBusRel@1003 : Record "Contact Business Relation";
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");

      CLEAR(BankAcc);
      BankAcc.SetInsertFromContact(true);
      BankAcc.INSERT(true);
      BankAcc.SetInsertFromContact(false);

      if Type = Type::Company then
        ContComp := Rec
      else
        ContComp.GET("Company No.");

      ContBusRel."Contact No." := ContComp."No.";
      ContBusRel."Business Relation Code" := RMSetup."Bus. Rel. Code for Bank Accs.";
      ContBusRel."Link to Table" := ContBusRel."Link to Table"::"Bank Account";
      ContBusRel."No." := BankAcc."No.";
      ContBusRel.INSERT(true);

      UpdateCustVendBank.UpdateBankAccount(ContComp,ContBusRel);

      if not HideValidationDialog then
        MESSAGE(RelatedRecordIsCreatedMsg,BankAcc.TABLECAPTION);
    END;

    [External]
    PROCEDURE CreateCustomerLink@5();
    VAR
      Cust@1001 : Record Customer;
      ContBusRel@1000 : Record "Contact Business Relation";
    BEGIN
      CheckForExistingRelationships(ContBusRel."Link to Table"::Customer);
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Customers");
      CreateLink(
        PAGE::"Customer Link",
        RMSetup."Bus. Rel. Code for Customers",
        ContBusRel."Link to Table"::Customer);

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("Contact No.","Company No.");
      if ContBusRel.FINDFIRST then
        if Cust.GET(ContBusRel."No.") then
          UpdateQuotes(Cust);
    END;

    [External]
    PROCEDURE CreateVendorLink@6();
    VAR
      ContBusRel@1001 : Record "Contact Business Relation";
    BEGIN
      CheckForExistingRelationships(ContBusRel."Link to Table"::Vendor);
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Vendors");
      CreateLink(
        PAGE::"Vendor Link",
        RMSetup."Bus. Rel. Code for Vendors",
        ContBusRel."Link to Table"::Vendor);
    END;

    [External]
    PROCEDURE CreateBankAccountLink@9();
    VAR
      ContBusRel@1001 : Record "Contact Business Relation";
    BEGIN
      TESTFIELD("Company No.");
      RMSetup.GET;
      RMSetup.TESTFIELD("Bus. Rel. Code for Bank Accs.");
      CreateLink(
        PAGE::"Bank Account Link",
        RMSetup."Bus. Rel. Code for Bank Accs.",
        ContBusRel."Link to Table"::"Bank Account");
    END;

    LOCAL PROCEDURE CreateLink@11(CreateForm@1000 : Integer;BusRelCode@1001 : Code[10];Table@1002 : '" ",Customer,Vendor,"Bank Account"');
    VAR
      TempContBusRel@1003 : TEMPORARY Record "Contact Business Relation";
    BEGIN
      TempContBusRel."Contact No." := "No.";
      TempContBusRel."Business Relation Code" := BusRelCode;
      TempContBusRel."Link to Table" := Table;
      TempContBusRel.INSERT;
      if PAGE.RUNMODAL(CreateForm,TempContBusRel) = ACTION::LookupOK then; // enforce look up mode dialog
      TempContBusRel.DELETEALL;
    END;

    [External]
    PROCEDURE CreateInteraction@10();
    VAR
      TempSegmentLine@1000 : TEMPORARY Record "Segment Line";
    BEGIN
      TempSegmentLine.CreateInteractionFromContact(Rec);
    END;

    [External]
    PROCEDURE GetDefaultPhoneNo@31() : Text[30];
    VAR
      ClientTypeManagement@1000 : Codeunit ClientTypeManagement;
    BEGIN
      if ClientTypeManagement.IsClientType(CLIENTTYPE::Phone) then begin
        if "Mobile Phone No." = '' then
          exit("Phone No.");
        exit("Mobile Phone No.");
      end;
      if "Phone No." = '' then
        exit("Mobile Phone No.");
      exit("Phone No.");
    END;

    PROCEDURE ShowCustVendBank@12();
    VAR
      ContBusRel@1000 : Record "Contact Business Relation";
      Cust@1002 : Record Customer;
      Vend@1003 : Record Vendor;
      BankAcc@1004 : Record "Bank Account";
      FormSelected@1001 : Boolean;
    BEGIN
      FormSelected := true;

      ContBusRel.RESET;

      if "Company No." <> '' then
        ContBusRel.SETFILTER("Contact No.",'%1|%2',"No.","Company No.")
      else
        ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETFILTER("No.",'<>''''');

      case ContBusRel.COUNT of
        0:
          ERROR(Text010,TABLECAPTION,"No.");
        1:
          ContBusRel.FINDFIRST;
        else
          FormSelected := PAGE.RUNMODAL(PAGE::"Contact Business Relations",ContBusRel) = ACTION::LookupOK;
      end;

      if FormSelected then
        case ContBusRel."Link to Table" of
          ContBusRel."Link to Table"::Customer:
            begin
              Cust.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Customer Card",Cust);
            end;
          ContBusRel."Link to Table"::Vendor:
            begin
              Vend.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Vendor Card",Vend);
            end;
          ContBusRel."Link to Table"::"Bank Account":
            begin
              BankAcc.GET(ContBusRel."No.");
              PAGE.RUN(PAGE::"Bank Account Card",BankAcc);
            end;
        end;
    END;

    LOCAL PROCEDURE NameBreakdown@13();
    VAR
      NamePart@1000 : ARRAY [30] OF Text[250];
      TempName@1001 : Text[250];
      FirstName250@1004 : Text[250];
      i@1002 : Integer;
      NoOfParts@1003 : Integer;
    BEGIN
      if Type = Type::Company then
        exit;

      TempName := Name;
      while STRPOS(TempName,' ') > 0 do begin
        if STRPOS(TempName,' ') > 1 then begin
          i := i + 1;
          NamePart[i] := COPYSTR(TempName,1,STRPOS(TempName,' ') - 1);
        end;
        TempName := COPYSTR(TempName,STRPOS(TempName,' ') + 1);
      end;
      i := i + 1;
      NamePart[i] := TempName;
      NoOfParts := i;

      "First Name" := '';
      "Middle Name" := '';
      Surname := '';
      for i := 1 to NoOfParts do
        if (i = NoOfParts) and (NoOfParts > 1) then
          Surname := COPYSTR(NamePart[i],1,MAXSTRLEN(Surname))
        else
          if (i = NoOfParts - 1) and (NoOfParts > 2) then
            "Middle Name" := COPYSTR(NamePart[i],1,MAXSTRLEN("Middle Name"))
          else begin
            FirstName250 := DELCHR("First Name" + ' ' + NamePart[i],'<',' ');
            "First Name" := COPYSTR(FirstName250,1,MAXSTRLEN("First Name"));
          end;
    END;

    [External]
    PROCEDURE SetSkipDefault@15();
    BEGIN
      SkipDefaults := true;
    END;

    [External]
    PROCEDURE IdenticalAddress@16(VAR Cont@1000 : Record Contact) : Boolean;
    BEGIN
      exit(
        (Address = Cont.Address) and
        ("Address 2" = Cont."Address 2") and
        ("Post Code" = Cont."Post Code") and
        (City = Cont.City))
    END;

    [External]
    PROCEDURE ActiveAltAddress@17(ActiveDate@1000 : Date) : Code[10];
    VAR
      ContAltAddrDateRange@1001 : Record "Contact Alt. Addr. Date Range";
    BEGIN
      ContAltAddrDateRange.SETCURRENTKEY("Contact No.","Starting Date");
      ContAltAddrDateRange.SETRANGE("Contact No.","No.");
      ContAltAddrDateRange.SETRANGE("Starting Date",0D,ActiveDate);
      ContAltAddrDateRange.SETFILTER("Ending Date",'>=%1|%2',ActiveDate,0D);
      if ContAltAddrDateRange.FINDLAST then
        exit(ContAltAddrDateRange."Contact Alt. Address Code");

      exit('');
    END;

    LOCAL PROCEDURE CalculatedName@14() NewName@1000 : Text[50];
    VAR
      NewName92@1001 : Text[92];
    BEGIN
      if "First Name" <> '' then
        NewName92 := "First Name";
      if "Middle Name" <> '' then
        NewName92 := NewName92 + ' ' + "Middle Name";
      if Surname <> '' then
        NewName92 := NewName92 + ' ' + Surname;

      NewName92 := DELCHR(NewName92,'<',' ');
      NewName := COPYSTR(NewName92,1,MAXSTRLEN(NewName));
    END;

    LOCAL PROCEDURE UpdateSearchName@22();
    BEGIN
      if ("Search Name" = UPPERCASE(xRec.Name)) or ("Search Name" = '') then
        "Search Name" := Name;
    END;

    LOCAL PROCEDURE CheckDupl@21();
    BEGIN
      if RMSetup."Maintain Dupl. Search Strings" then
        DuplMgt.MakeContIndex(Rec);
      if GUIALLOWED then
        if DuplMgt.DuplicateExist(Rec) then begin
          MODIFY;
          COMMIT;
          DuplMgt.LaunchDuplicateForm(Rec);
        end;
    END;

    [External]
    PROCEDURE FindCustomerTemplate@23() : Code[10];
    VAR
      CustTemplate@1003 : Record "Customer Template";
      ContCompany@1002 : Record Contact;
    BEGIN
      CustTemplate.RESET;
      CustTemplate.SETRANGE("Territory Code","Territory Code");
      CustTemplate.SETRANGE("Country/Region Code","Country/Region Code");
      CustTemplate.SETRANGE("Contact Type",Type);
      if ContCompany.GET("Company No.") then
        CustTemplate.SETRANGE("Currency Code",ContCompany."Currency Code");

      if CustTemplate.COUNT = 1 then begin
        CustTemplate.FINDFIRST;
        exit(CustTemplate.Code);
      end;
    END;

    [External]
    PROCEDURE ChooseCustomerTemplate@27() : Code[10];
    VAR
      CustTemplate@1000 : Record "Customer Template";
      ContBusRel@1002 : Record "Contact Business Relation";
    BEGIN
      CheckForExistingRelationships(ContBusRel."Link to Table"::Customer);
      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      if ContBusRel.FINDFIRST then
        ERROR(
          Text019,
          TABLECAPTION,"No.",ContBusRel.TABLECAPTION,ContBusRel."Link to Table",ContBusRel."No.");

      if CONFIRM(CreateCustomerFromContactQst,true) then begin
        CustTemplate.SETRANGE("Contact Type",Type);
        if PAGE.RUNMODAL(0,CustTemplate) = ACTION::LookupOK then
          exit(CustTemplate.Code);

        ERROR(Text022);
      end;
    END;

    LOCAL PROCEDURE UpdateQuotes@29(Customer@1000 : Record Customer);
    VAR
      SalesHeader@1003 : Record "Sales Header";
      SalesHeader2@1005 : Record "Sales Header";
      Cont@1004 : Record Contact;
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      if "Company No." <> '' then
        Cont.SETRANGE("Company No.","Company No.")
      else
        Cont.SETRANGE("No.","No.");

      if Cont.FINDSET then
        repeat
          SalesHeader.RESET;
          SalesHeader.SETRANGE("Sell-to Customer No.",'');
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Sell-to Contact No.",Cont."No.");
          if SalesHeader.FINDSET then
            repeat
              SalesHeader2.GET(SalesHeader."Document Type",SalesHeader."No.");
              SalesHeader2."Sell-to Customer No." := Customer."No.";
              SalesHeader2."Sell-to Customer Template Code" := '';
              if SalesHeader2."Sell-to Contact No." = SalesHeader2."Bill-to Contact No." then begin
                SalesHeader2."Bill-to Customer No." := Customer."No.";
                SalesHeader2."Bill-to Customer Template Code" := '';
                SalesHeader2."Salesperson Code" := Customer."Salesperson Code";
              end;
              SalesHeader2.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader2."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader2."No.");
              SalesLine.MODIFYALL("Sell-to Customer No.",SalesHeader2."Sell-to Customer No.");
              if SalesHeader2."Sell-to Contact No." = SalesHeader2."Bill-to Contact No." then
                SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader2."Bill-to Customer No.");
            until SalesHeader.NEXT = 0;

          SalesHeader.RESET;
          SalesHeader.SETRANGE("Bill-to Customer No.",'');
          SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Quote);
          SalesHeader.SETRANGE("Bill-to Contact No.",Cont."No.");
          if SalesHeader.FINDSET then
            repeat
              SalesHeader2.GET(SalesHeader."Document Type",SalesHeader."No.");
              SalesHeader2."Bill-to Customer No." := Customer."No.";
              SalesHeader2."Bill-to Customer Template Code" := '';
              SalesHeader2."Salesperson Code" := Customer."Salesperson Code";
              SalesHeader2.MODIFY;
              SalesLine.SETRANGE("Document Type",SalesHeader2."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader2."No.");
              SalesLine.MODIFYALL("Bill-to Customer No.",SalesHeader2."Bill-to Customer No.");
            until SalesHeader.NEXT = 0;
        until Cont.NEXT = 0;
    END;

    [External]
    PROCEDURE GetSalutation@18(SalutationType@1001 : 'Formal,Informal';LanguageCode@1000 : Code[10]) : Text[260];
    VAR
      SalutationFormula@1005 : Record "Salutation Formula";
      NamePart@1004 : ARRAY [5] OF Text[50];
      SubStr@1003 : Text[30];
      i@1002 : Integer;
    BEGIN
      if not SalutationFormula.GET("Salutation Code",LanguageCode,SalutationType) then
        ERROR(Text021,LanguageCode,"No.");
      SalutationFormula.TESTFIELD(Salutation);

      case SalutationFormula."Name 1" of
        SalutationFormula."Name 1"::"Job Title":
          NamePart[1] := "Job Title";
        SalutationFormula."Name 1"::"First Name":
          NamePart[1] := "First Name";
        SalutationFormula."Name 1"::"Middle Name":
          NamePart[1] := "Middle Name";
        SalutationFormula."Name 1"::Surname:
          NamePart[1] := Surname;
        SalutationFormula."Name 1"::Initials:
          NamePart[1] := Initials;
        SalutationFormula."Name 1"::"Company Name":
          NamePart[1] := "Company Name";
      end;

      case SalutationFormula."Name 2" of
        SalutationFormula."Name 2"::"Job Title":
          NamePart[2] := "Job Title";
        SalutationFormula."Name 2"::"First Name":
          NamePart[2] := "First Name";
        SalutationFormula."Name 2"::"Middle Name":
          NamePart[2] := "Middle Name";
        SalutationFormula."Name 2"::Surname:
          NamePart[2] := Surname;
        SalutationFormula."Name 2"::Initials:
          NamePart[2] := Initials;
        SalutationFormula."Name 2"::"Company Name":
          NamePart[2] := "Company Name";
      end;

      case SalutationFormula."Name 3" of
        SalutationFormula."Name 3"::"Job Title":
          NamePart[3] := "Job Title";
        SalutationFormula."Name 3"::"First Name":
          NamePart[3] := "First Name";
        SalutationFormula."Name 3"::"Middle Name":
          NamePart[3] := "Middle Name";
        SalutationFormula."Name 3"::Surname:
          NamePart[3] := Surname;
        SalutationFormula."Name 3"::Initials:
          NamePart[3] := Initials;
        SalutationFormula."Name 3"::"Company Name":
          NamePart[3] := "Company Name";
      end;

      case SalutationFormula."Name 4" of
        SalutationFormula."Name 4"::"Job Title":
          NamePart[4] := "Job Title";
        SalutationFormula."Name 4"::"First Name":
          NamePart[4] := "First Name";
        SalutationFormula."Name 4"::"Middle Name":
          NamePart[4] := "Middle Name";
        SalutationFormula."Name 4"::Surname:
          NamePart[4] := Surname;
        SalutationFormula."Name 4"::Initials:
          NamePart[4] := Initials;
        SalutationFormula."Name 4"::"Company Name":
          NamePart[4] := "Company Name";
      end;

      case SalutationFormula."Name 5" of
        SalutationFormula."Name 5"::"Job Title":
          NamePart[5] := "Job Title";
        SalutationFormula."Name 5"::"First Name":
          NamePart[5] := "First Name";
        SalutationFormula."Name 5"::"Middle Name":
          NamePart[5] := "Middle Name";
        SalutationFormula."Name 5"::Surname:
          NamePart[5] := Surname;
        SalutationFormula."Name 5"::Initials:
          NamePart[5] := Initials;
        SalutationFormula."Name 5"::"Company Name":
          NamePart[5] := "Company Name";
      end;

      for i := 1 to 5 do
        if NamePart[i] = '' then begin
          SubStr := '%' + FORMAT(i) + ' ';
          if STRPOS(SalutationFormula.Salutation,SubStr) > 0 then
            SalutationFormula.Salutation :=
              DELSTR(SalutationFormula.Salutation,STRPOS(SalutationFormula.Salutation,SubStr),3);
        end;

      exit(STRSUBSTNO(SalutationFormula.Salutation,NamePart[1],NamePart[2],NamePart[3],NamePart[4],NamePart[5]))
    END;

    [Internal]
    PROCEDURE InheritCompanyToPersonData@24(NewCompanyContact@1000 : Record Contact);
    BEGIN
      "Company Name" := NewCompanyContact.Name;

      RMSetup.GET;
      if RMSetup."Inherit Salesperson Code" then
        "Salesperson Code" := NewCompanyContact."Salesperson Code";
      if RMSetup."Inherit Territory Code" then
        "Territory Code" := NewCompanyContact."Territory Code";
      if RMSetup."Inherit Country/Region Code" then
        "Country/Region Code" := NewCompanyContact."Country/Region Code";
      if RMSetup."Inherit Language Code" then
        "Language Code" := NewCompanyContact."Language Code";
      if RMSetup."Inherit Address Details" and StaleAddress then begin
        Address := NewCompanyContact.Address;
        "Address 2" := NewCompanyContact."Address 2";
        "Post Code" := NewCompanyContact."Post Code";
        City := NewCompanyContact.City;
        County := NewCompanyContact.County;
      end;
      if RMSetup."Inherit Communication Details" then begin
        UpdateFieldForNewCompany(FIELDNO("Phone No."));
        UpdateFieldForNewCompany(FIELDNO("Telex No."));
        UpdateFieldForNewCompany(FIELDNO("Fax No."));
        UpdateFieldForNewCompany(FIELDNO("Telex Answer Back"));
        UpdateFieldForNewCompany(FIELDNO("E-Mail"));
        UpdateFieldForNewCompany(FIELDNO("Home Page"));
        UpdateFieldForNewCompany(FIELDNO("Extension No."));
        UpdateFieldForNewCompany(FIELDNO("Mobile Phone No."));
        UpdateFieldForNewCompany(FIELDNO(Pager));
        UpdateFieldForNewCompany(FIELDNO("Correspondence Type"));
      end;
      CALCFIELDS("No. of Industry Groups","No. of Business Relations");
    END;

    LOCAL PROCEDURE StaleAddress@33() Stale : Boolean;
    VAR
      OldCompanyContact@1000 : Record Contact;
      DummyContact@1001 : Record Contact;
    BEGIN
      if OldCompanyContact.GET(xRec."Company No.") then
        Stale := IdenticalAddress(OldCompanyContact);
      Stale := Stale or IdenticalAddress(DummyContact);
    END;

    LOCAL PROCEDURE UpdateFieldForNewCompany@34(FieldNo@1001 : Integer);
    VAR
      OldCompanyContact@1000 : Record Contact;
      NewCompanyContact@1005 : Record Contact;
      OldCompanyRecRef@1002 : RecordRef;
      NewCompanyRecRef@1007 : RecordRef;
      ContactRecRef@1003 : RecordRef;
      ContactFieldRef@1008 : FieldRef;
      OldCompanyFieldValue@1004 : Text;
      ContactFieldValue@1006 : Text;
      Stale@1009 : Boolean;
    BEGIN
      ContactRecRef.GETTABLE(Rec);
      ContactFieldRef := ContactRecRef.FIELD(FieldNo);
      ContactFieldValue := FORMAT(ContactFieldRef.VALUE);

      if NewCompanyContact.GET("Company No.") then begin
        NewCompanyRecRef.GETTABLE(NewCompanyContact);
        if OldCompanyContact.GET(xRec."Company No.") then begin
          OldCompanyRecRef.GETTABLE(OldCompanyContact);
          OldCompanyFieldValue := FORMAT(OldCompanyRecRef.FIELD(FieldNo).VALUE);
          Stale := ContactFieldValue = OldCompanyFieldValue;
        end;
        if Stale or (ContactFieldValue = '') then begin
          ContactFieldRef.VALIDATE(NewCompanyRecRef.FIELD(FieldNo).VALUE);
          ContactRecRef.SETTABLE(Rec);
        end;
      end;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@26(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [Internal]
    PROCEDURE DisplayMap@36();
    VAR
      MapPoint@1001 : Record "Online Map Setup";
      MapMgt@1000 : Codeunit "Online Map Management";
    BEGIN
      if MapPoint.FINDFIRST then
        MapMgt.MakeSelection(DATABASE::Contact,GETPOSITION)
      else
        MESSAGE(Text033);
    END;

    LOCAL PROCEDURE ProcessNameChange@37();
    VAR
      ContBusRel@1000 : Record "Contact Business Relation";
      Cust@1001 : Record Customer;
      Vend@1002 : Record Vendor;
    BEGIN
      UpdateSearchName;

      if Type = Type::Company then
        "Company Name" := Name;

      if Type = Type::Person then begin
        ContBusRel.RESET;
        ContBusRel.SETCURRENTKEY("Link to Table","Contact No.");
        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
        ContBusRel.SETRANGE("Contact No.","Company No.");
        if ContBusRel.FINDFIRST then
          if Cust.GET(ContBusRel."No.") then
            if Cust."Primary Contact No." = "No." then begin
              Cust.Contact := Name;
              Cust.MODIFY;
            end;

        ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Vendor);
        if ContBusRel.FINDFIRST then
          if Vend.GET(ContBusRel."No.") then
            if Vend."Primary Contact No." = "No." then begin
              Vend.Contact := Name;
              Vend.MODIFY;
            end;
      end;
    END;

    LOCAL PROCEDURE GetCompNo@19(ContactText@1000 : Text) : Text;
    VAR
      Contact@1001 : Record Contact;
      ContactWithoutQuote@1002 : Text;
      ContactFilterFromStart@1003 : Text;
      ContactFilterContains@1004 : Text;
      ContactNo@1005 : Code[20];
    BEGIN
      if ContactText = '' then
        exit('');

      if STRLEN(ContactText) <= MAXSTRLEN(Contact."Company No.") then
        if Contact.GET(COPYSTR(ContactText,1,MAXSTRLEN(Contact."Company No."))) then
          exit(Contact."No.");

      ContactWithoutQuote := CONVERTSTR(ContactText,'''','?');

      Contact.SETRANGE(Type,Contact.Type::Company);

      Contact.SETFILTER(Name,'''@' + ContactWithoutQuote + '''');
      if Contact.FINDFIRST then
        exit(Contact."No.");
      Contact.SETRANGE(Name);
      ContactFilterFromStart := '''@' + ContactWithoutQuote + '*''';
      Contact.FILTERGROUP := -1;
      Contact.SETFILTER("No.",ContactFilterFromStart);
      Contact.SETFILTER(Name,ContactFilterFromStart);
      if Contact.FINDFIRST then
        exit(Contact."No.");
      ContactFilterContains := '''@*' + ContactWithoutQuote + '*''';
      Contact.SETFILTER("No.",ContactFilterContains);
      Contact.SETFILTER(Name,ContactFilterContains);
      Contact.SETFILTER(City,ContactFilterContains);
      Contact.SETFILTER("Phone No.",ContactFilterContains);
      Contact.SETFILTER("Post Code",ContactFilterContains);
      case Contact.COUNT of
        1:
          begin
            Contact.FINDFIRST;
            exit(Contact."No.");
          end;
        else begin
          if not GUIALLOWED then
            ERROR(SelectContactErr);
          ContactNo := SelectContact(Contact);
          if ContactNo <> '' then
            exit(ContactNo);
        end;
      end;
      ERROR(SelectContactErr);
    END;

    LOCAL PROCEDURE SelectContact@51(VAR Contact@1000 : Record Contact) : Code[20];
    VAR
      ContactList@1001 : Page "Contact List";
    BEGIN
      if Contact.FINDSET then
        repeat
          Contact.MARK(true);
        until Contact.NEXT = 0;
      if Contact.FINDFIRST then;
      Contact.MARKEDONLY := true;

      ContactList.SETTABLEVIEW(Contact);
      ContactList.SETRECORD(Contact);
      ContactList.LOOKUPMODE := true;
      if ContactList.RUNMODAL = ACTION::LookupOK then
        ContactList.GETRECORD(Contact)
      else
        CLEAR(Contact);

      exit(Contact."No.");
    END;

    [External]
    PROCEDURE LookupCompany@25();
    VAR
      Contact@1001 : Record Contact;
      CompanyDetails@1000 : Page "Company Details";
    BEGIN
      Contact.SETRANGE("No.","Company No.");
      CompanyDetails.SETTABLEVIEW(Contact);
      CompanyDetails.SETRECORD(Contact);
      if Type = Type::Person then
        CompanyDetails.EDITABLE := false;
      CompanyDetails.RUNMODAL;
    END;

    LOCAL PROCEDURE CheckForExistingRelationships@20(LinkToTable@1000 : '" ",Customer,Vendor,"Bank Account"');
    VAR
      Contact@1001 : Record Contact;
      ContBusRel@1003 : Record "Contact Business Relation";
    BEGIN
      Contact := Rec;

      if "No." <> '' then begin
        if ContBusRel.FindByContact(LinkToTable,Contact."No.") then
          ERROR(
            AlreadyExistErr,
            Contact.TABLECAPTION,"No.",ContBusRel.TABLECAPTION,LinkToTable,ContBusRel."No.");

        if ContBusRel.FindByRelation(LinkToTable,"No.") then
          ERROR(
            AlreadyExistErr,
            LinkToTable,"No.",ContBusRel.TABLECAPTION,Contact.TABLECAPTION,ContBusRel."Contact No.");
      end;
    END;

    [External]
    PROCEDURE SetLastDateTimeModified@28();
    VAR
      DateFilterCalc@1000 : Codeunit "DateFilter-Calc";
      UtcNow@1001 : DateTime;
    BEGIN
      UtcNow := DateFilterCalc.ConvertToUtcDateTime(CURRENTDATETIME);
      "Last Date Modified" := DT2DATE(UtcNow);
      "Last Time Modified" := DT2TIME(UtcNow);
    END;

    [External]
    PROCEDURE SetLastDateTimeFilter@30(DateFilter@1001 : DateTime);
    VAR
      DateFilterCalc@1004 : Codeunit "DateFilter-Calc";
      SyncDateTimeUtc@1002 : DateTime;
      CurrentFilterGroup@1003 : Integer;
    BEGIN
      SyncDateTimeUtc := DateFilterCalc.ConvertToUtcDateTime(DateFilter);
      CurrentFilterGroup := FILTERGROUP;
      SETFILTER("Last Date Modified",'>=%1',DT2DATE(SyncDateTimeUtc));
      FILTERGROUP(-1);
      SETFILTER("Last Date Modified",'>%1',DT2DATE(SyncDateTimeUtc));
      SETFILTER("Last Time Modified",'>%1',DT2TIME(SyncDateTimeUtc));
      FILTERGROUP(CurrentFilterGroup);
    END;

    PROCEDURE TouchContact@32(ContactNo@1000 : Code[20]);
    VAR
      Cont@1001 : Record Contact;
    BEGIN
      Cont.LOCKTABLE;
      if Cont.GET(ContactNo) then begin
        Cont.SetLastDateTimeModified;
        Cont.MODIFY;
      end;
    END;

    PROCEDURE CountNoOfBusinessRelations@35() : Integer;
    VAR
      ContactBusinessRelation@1000 : Record "Contact Business Relation";
    BEGIN
      if "Company No." <> '' then
        ContactBusinessRelation.SETFILTER("Contact No.",'%1|%2',"No.","Company No.")
      else
        ContactBusinessRelation.SETRANGE("Contact No.","No.");
      exit(ContactBusinessRelation.COUNT);
    END;

    PROCEDURE CreateSalesQuoteFromContact@38();
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::Quote);
      SalesHeader.INSERT(true);
      SalesHeader.VALIDATE("Document Date",WORKDATE);
      SalesHeader.VALIDATE("Sell-to Contact No.","No.");
      SalesHeader.MODIFY;
      COMMIT;
      PAGE.RUNMODAL(PAGE::"Sales Quote",SalesHeader);
    END;

    PROCEDURE ContactToCustBusinessRelationExist@44() : Boolean;
    VAR
      ContBusRel@1000 : Record "Contact Business Relation";
    BEGIN
      ContBusRel.RESET;
      ContBusRel.SETRANGE("Contact No.","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      exit(ContBusRel.FINDFIRST);
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnBeforeVendorInsert@43(VAR Vend@1000 : Record Vendor);
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnBeforeCustomerInsert@42(VAR Cust@1000 : Record Customer);
    BEGIN
    END;

    LOCAL PROCEDURE SetDefaultSalesperson@39();
    VAR
      UserSetup@1000 : Record "User Setup";
    BEGIN
      if UserSetup.GET(USERID) and (UserSetup."Salespers./Purch. Code" <> '') then
        "Salesperson Code" := UserSetup."Salespers./Purch. Code";
    END;

    LOCAL PROCEDURE VATRegistrationValidation@41();
    VAR
      VATRegistrationNoFormat@1005 : Record "VAT Registration No. Format";
      VATRegistrationLog@1004 : Record "VAT Registration Log";
      VATRegNoSrvConfig@1003 : Record "VAT Reg. No. Srv Config";
      VATRegistrationLogMgt@1002 : Codeunit "VAT Registration Log Mgt.";
      ResultRecordRef@1001 : RecordRef;
      ApplicableCountryCode@1000 : Code[10];
    BEGIN
      if not VATRegistrationNoFormat.Test("VAT Registration No.","Country/Region Code","No.",DATABASE::Contact) then
        exit;

      VATRegistrationLogMgt.LogContact(Rec);

      if ("Country/Region Code" = '') and (VATRegistrationNoFormat."Country/Region Code" = '') then
        exit;
      ApplicableCountryCode := "Country/Region Code";
      if ApplicableCountryCode = '' then
        ApplicableCountryCode := VATRegistrationNoFormat."Country/Region Code";

      if VATRegNoSrvConfig.VATRegNoSrvIsEnabled then begin
        VATRegistrationLogMgt.ValidateVATRegNoWithVIES(ResultRecordRef,Rec,"No.",
          VATRegistrationLog."Account Type"::Contact,ApplicableCountryCode);
        ResultRecordRef.SETTABLE(Rec);
      end;
    END;

    BEGIN
    END.
  }
}

