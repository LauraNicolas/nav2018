OBJECT Codeunit 444 Purchase-Post Prepayments
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Purchase Line"=imd,
                TableData "G/L Register"=rimd,
                TableData "Invoice Post. Buffer"=imd,
                TableData "Vendor Posting Group"=imd,
                TableData "Inventory Posting Group"=imd,
                TableData "Purch. Inv. Header"=imd,
                TableData "Purch. Inv. Line"=imd,
                TableData "Purch. Cr. Memo Hdr."=imd,
                TableData "Purch. Cr. Memo Line"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=is not within your range of allowed posting dates';
      Text001@1001 : TextConst 'ENU=There is nothing to post.';
      Text002@1008 : TextConst 'ENU=Posting Prepayment Lines   #2######\';
      Text003@1010 : TextConst 'ENU=%1 %2 -> Invoice %3';
      Text004@1007 : TextConst 'ENU=Posting purchases and VAT  #3######\';
      Text005@1006 : TextConst 'ENU=Posting to vendors         #4######\';
      Text006@1021 : TextConst 'ENU=Posting to bal. account    #5######';
      Text007@1003 : TextConst 'ENU=The combination of dimensions that is used in the document of type %1 with the number %2 is blocked. %3.';
      Text008@1002 : TextConst 'ENU=The combination of dimensions that is used in the document of type %1 with the number %2, line no. %3 is blocked. %4.';
      Text009@1005 : TextConst 'ENU=The dimensions that are used in the document of type %1 with the number %2 are not valid. %3.';
      Text010@1004 : TextConst 'ENU=The dimensions that are used in the document of type %1 with the number %2, line no. %3 are not valid. %4.';
      Text011@1011 : TextConst 'ENU=%1 %2 -> Credit Memo %3';
      Text012@1009 : TextConst 'ENU=Prepayment %1, %2 %3.';
      GLSetup@1013 : Record "General Ledger Setup";
      GenPostingSetup@1012 : Record "General Posting Setup";
      TempGlobalPrepmtInvLineBuf@1025 : TEMPORARY Record "Prepayment Inv. Line Buffer";
      GenJnlPostLine@1014 : Codeunit "Gen. Jnl.-Post Line";
      Text013@1016 : TextConst 'ENU=It is not possible to assign a prepayment amount of %1 to the purchase lines.';
      Text014@1018 : TextConst 'ENU=VAT Amount';
      Text015@1017 : TextConst 'ENU=%1% VAT';
      Text016@1019 : TextConst 'ENU=The new prepayment amount must be between %1 and %2.';
      Text017@1020 : TextConst 'ENU=At least one line must have %1 > 0 to distribute prepayment amount.';
      text019@1015 : TextConst 'ENU=Invoice,Credit Memo';

    [Internal]
    PROCEDURE Invoice@1(VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      Code(PurchHeader,0);
    END;

    [Internal]
    PROCEDURE CreditMemo@2(VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      Code(PurchHeader,1);
    END;

    LOCAL PROCEDURE Code@3(VAR PurchHeader2@1001 : Record "Purchase Header";DocumentType@1000 : 'Invoice,"Credit Memo"');
    VAR
      PurchSetup@1011 : Record "Purchases & Payables Setup";
      SourceCodeSetup@1008 : Record "Source Code Setup";
      Vend@1004 : Record Vendor;
      PurchHeader@1031 : Record "Purchase Header";
      PurchLine@1021 : Record "Purchase Line";
      PurchInvHeader@1015 : Record "Purch. Inv. Header";
      PurchCrMemoHeader@1014 : Record "Purch. Cr. Memo Hdr.";
      TempPrepmtInvLineBuffer@1023 : TEMPORARY Record "Prepayment Inv. Line Buffer";
      TotalPrepmtInvLineBuffer@1029 : Record "Prepayment Inv. Line Buffer";
      TotalPrepmtInvLineBufferLCY@1028 : Record "Prepayment Inv. Line Buffer";
      GenJnlLine@1017 : Record "Gen. Journal Line";
      TempVATAmountLine@1022 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLineDeduct@1037 : TEMPORARY Record "VAT Amount Line";
      VendLedgEntry@1034 : Record "Vendor Ledger Entry";
      TempPurchLines@1039 : TEMPORARY Record "Purchase Line";
      GenJnlCheckLine@1002 : Codeunit "Gen. Jnl.-Check Line";
      Window@1007 : Dialog;
      GenJnlLineDocNo@1006 : Code[20];
      GenJnlLineExtDocNo@1020 : Code[35];
      SrcCode@1009 : Code[10];
      PostingNoSeriesCode@1003 : Code[20];
      CalcPmtDiscOnCrMemos@1019 : Boolean;
      PostingDescription@1010 : Text[50];
      GenJnlLineDocType@1016 : Integer;
      PrevLineNo@1026 : Integer;
      LineCount@1024 : Integer;
      PostedDocTabNo@1018 : Integer;
      LineNo@1025 : Integer;
    BEGIN
      PurchHeader := PurchHeader2;
      GLSetup.GET;
      PurchSetup.GET;
      with PurchHeader do begin
        TESTFIELD("Document Type","Document Type"::Order);
        TESTFIELD("Buy-from Vendor No.");
        TESTFIELD("Pay-to Vendor No.");
        TESTFIELD("Posting Date");
        TESTFIELD("Document Date");
        if GenJnlCheckLine.DateNotAllowed("Posting Date") then
          FIELDERROR("Posting Date",Text000);

        if not CheckOpenPrepaymentLines(PurchHeader,DocumentType) then
          ERROR(Text001);
        CheckDim(PurchHeader);
        OnCheckPurchasePostRestrictions;
        Vend.GET("Buy-from Vendor No.");
        Vend.CheckBlockedVendOnDocs(Vend,true);
        if "Pay-to Vendor No." <> "Buy-from Vendor No." then begin
          Vend.GET("Pay-to Vendor No.");
          Vend.CheckBlockedVendOnDocs(Vend,true);
        end;

        UpdateDocNos(PurchHeader,DocumentType,GenJnlLineDocNo,PostingNoSeriesCode);

        Window.OPEN(
          '#1#################################\\' +
          Text002 +
          Text004 +
          Text005 +
          Text006);
        Window.UPDATE(1,STRSUBSTNO('%1 %2',SELECTSTR(1 + DocumentType,text019),"No."));

        SourceCodeSetup.GET;
        SrcCode := SourceCodeSetup.Purchases;
        if "Prepmt. Posting Description" <> '' then
          PostingDescription := "Prepmt. Posting Description"
        else
          PostingDescription :=
            COPYSTR(
              STRSUBSTNO(Text012,SELECTSTR(1 + DocumentType,text019),"Document Type","No."),
              1,MAXSTRLEN("Posting Description"));

        // Create posted header
        if PurchSetup."Ext. Doc. No. Mandatory" then
          TESTFIELD("Vendor Invoice No.");
        case DocumentType of
          DocumentType::Invoice:
            begin
              InsertPurchInvHeader(PurchInvHeader,PurchHeader,PostingDescription,GenJnlLineDocNo,SrcCode,PostingNoSeriesCode);
              GenJnlLineDocType := GenJnlLine."Document Type"::Invoice;
              PostedDocTabNo := DATABASE::"Purch. Inv. Header";
              GenJnlLineExtDocNo := PurchInvHeader."Vendor Invoice No.";
              Window.UPDATE(1,STRSUBSTNO(Text003,"Document Type","No.",PurchInvHeader."No."));
            end;
          DocumentType::"Credit Memo":
            begin
              if PurchSetup."Ext. Doc. No. Mandatory" then
                TESTFIELD("Vendor Cr. Memo No.");
              CalcPmtDiscOnCrMemos := GetCalcPmtDiscOnCrMemos("Prepmt. Payment Terms Code");
              InsertPurchCrMemoHeader(
                PurchCrMemoHeader,PurchHeader,PostingDescription,GenJnlLineDocNo,SrcCode,PostingNoSeriesCode,
                CalcPmtDiscOnCrMemos);
              GenJnlLineDocType := GenJnlLine."Document Type"::"Credit Memo";
              PostedDocTabNo := DATABASE::"Purch. Cr. Memo Hdr.";
              GenJnlLineExtDocNo := PurchCrMemoHeader."Vendor Cr. Memo No.";
              Window.UPDATE(1,STRSUBSTNO(Text011,"Document Type","No.",PurchCrMemoHeader."No."));
            end;
        end;
        if PurchSetup."Copy Comments Order to Invoice" then
          CopyCommentLines("No.",PostedDocTabNo,GenJnlLineDocNo);
        // Reverse old lines
        if DocumentType = DocumentType::Invoice then begin
          GetPurchLinesToDeduct(PurchHeader,TempPurchLines);
          if not TempPurchLines.ISEMPTY then
            CalcVATAmountLines(PurchHeader,TempPurchLines,TempVATAmountLineDeduct,DocumentType::"Credit Memo");
        end;

        // Create Lines
        TempPrepmtInvLineBuffer.DELETEALL;
        CalcVATAmountLines(PurchHeader,PurchLine,TempVATAmountLine,DocumentType);
        TempVATAmountLine.DeductVATAmountLine(TempVATAmountLineDeduct);
        UpdateVATOnLines(PurchHeader,PurchLine,TempVATAmountLine,DocumentType);
        BuildInvLineBuffer(PurchHeader,PurchLine,DocumentType,TempPrepmtInvLineBuffer,true);
        TempPrepmtInvLineBuffer.FIND('-');
        repeat
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          if TempPrepmtInvLineBuffer."Line No." <> 0 then
            LineNo := PrevLineNo + TempPrepmtInvLineBuffer."Line No."
          else
            LineNo := PrevLineNo + 10000;
          case DocumentType of
            DocumentType::Invoice:
              begin
                InsertPurchInvLine(PurchInvHeader,LineNo,TempPrepmtInvLineBuffer);
                PostedDocTabNo := DATABASE::"Purch. Inv. Line";
              end;
            DocumentType::"Credit Memo":
              begin
                InsertPurchCrMemoLine(PurchCrMemoHeader,LineNo,TempPrepmtInvLineBuffer);
                PostedDocTabNo := DATABASE::"Purch. Cr. Memo Line";
              end;
          end;
          PrevLineNo := LineNo;
          InsertExtendedText(
            PostedDocTabNo,GenJnlLineDocNo,TempPrepmtInvLineBuffer."G/L Account No.","Document Date","Language Code",PrevLineNo);
        until TempPrepmtInvLineBuffer.NEXT = 0;

        // G/L Posting
        LineCount := 0;
        if not "Compress Prepayment" then
          TempPrepmtInvLineBuffer.CompressBuffer;
        TempPrepmtInvLineBuffer.SETRANGE(Adjustment,false);
        TempPrepmtInvLineBuffer.FINDSET(true);
        repeat
          if DocumentType = DocumentType::"Credit Memo" then
            TempPrepmtInvLineBuffer.ReverseAmounts;
          RoundAmounts(PurchHeader,TempPrepmtInvLineBuffer,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY);
          if "Currency Code" = '' then begin
            AdjustInvLineBuffers(PurchHeader,TempPrepmtInvLineBuffer,TotalPrepmtInvLineBuffer,DocumentType);
            TotalPrepmtInvLineBufferLCY := TotalPrepmtInvLineBuffer;
          end else
            AdjustInvLineBuffers(PurchHeader,TempPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,DocumentType);
          TempPrepmtInvLineBuffer.MODIFY;
        until TempPrepmtInvLineBuffer.NEXT = 0;

        TempPrepmtInvLineBuffer.RESET;
        TempPrepmtInvLineBuffer.SETCURRENTKEY(Adjustment);
        TempPrepmtInvLineBuffer.FIND('+');
        repeat
          LineCount := LineCount + 1;
          Window.UPDATE(3,LineCount);

          if TempPrepmtInvLineBuffer."VAT Calculation Type" =
             TempPrepmtInvLineBuffer."VAT Calculation Type"::"Reverse Charge VAT"
          then
            TempPrepmtInvLineBuffer.UpdateVATAmounts;

          PostPrepmtInvLineBuffer(
            PurchHeader,TempPrepmtInvLineBuffer,DocumentType,PostingDescription,
            GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PostingNoSeriesCode);
        until TempPrepmtInvLineBuffer.NEXT(-1) = 0;

        // Post vendor entry
        Window.UPDATE(4,1);
        PostVendorEntry(
          PurchHeader,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,DocumentType,PostingDescription,
          GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PostingNoSeriesCode,CalcPmtDiscOnCrMemos);

        UpdatePostedPurchaseDocument(DocumentType,GenJnlLineDocNo);

        // Balancing account
        if "Bal. Account No." <> '' then begin
          Window.UPDATE(5,1);
          VendLedgEntry.FINDLAST;
          PostBalancingEntry(
            PurchHeader,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferLCY,VendLedgEntry,DocumentType,
            GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo,SrcCode,PostingNoSeriesCode);
        end;

        // Update lines & header
        UpdatePurchaseDocument(PurchHeader,PurchLine,DocumentType,GenJnlLineDocNo);
        if Status <> Status::"Pending Prepayment" then
          Status := Status::"Pending Prepayment";
        MODIFY;
      end;

      PurchHeader2 := PurchHeader;
      PurchHeader2.TriggerOnAfterPostPurchaseDoc(GenJnlPostLine,'','',PurchInvHeader."No.",PurchCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE UpdateDocNos@24(VAR PurchHeader@1001 : Record "Purchase Header";DocumentType@1000 : 'Invoice,"Credit Memo"';VAR DocNo@1003 : Code[20];VAR NoSeriesCode@1004 : Code[20]);
    VAR
      NoSeriesMgt@1002 : Codeunit NoSeriesManagement;
    BEGIN
      with PurchHeader do
        case DocumentType of
          DocumentType::Invoice:
            begin
              TESTFIELD("Prepayment Due Date");
              TESTFIELD("Prepmt. Cr. Memo No.",'');
              if "Prepayment No." = '' then begin
                TESTFIELD("Prepayment No. Series");
                "Prepayment No." :=
                  NoSeriesMgt.GetNextNo("Prepayment No. Series","Posting Date",true);
                MODIFY;
                COMMIT;
              end;
              DocNo := "Prepayment No.";
              NoSeriesCode := "Prepayment No. Series";
            end;
          DocumentType::"Credit Memo":
            begin
              TESTFIELD("Prepayment No.",'');
              if "Prepmt. Cr. Memo No." = '' then begin
                TESTFIELD("Prepmt. Cr. Memo No. Series");
                "Prepmt. Cr. Memo No." :=
                  NoSeriesMgt.GetNextNo("Prepmt. Cr. Memo No. Series","Posting Date",true);
                MODIFY;
                COMMIT;
              end;
              DocNo := "Prepmt. Cr. Memo No.";
              NoSeriesCode := "Prepmt. Cr. Memo No. Series";
            end;
        end;
    END;

    [External]
    PROCEDURE CheckOpenPrepaymentLines@7(PurchHeader@1000 : Record "Purchase Header";DocumentType@1003 : Option) Found : Boolean;
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      with PurchLine do begin
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        if FIND('-') then
          repeat
            if not Found then
              Found := PrepmtAmount(PurchLine,DocumentType) <> 0;
            if ("Prepayment VAT Identifier" = '') and ("Prepmt. Amt. Inv." = 0) then begin
              UpdatePrepmtSetupFields;
              MODIFY;
            end;
          until NEXT = 0;
      end;
      exit(Found);
    END;

    LOCAL PROCEDURE RoundAmounts@5(PurchHeader@1001 : Record "Purchase Header";VAR PrepmtInvLineBuf@1000 : Record "Prepayment Inv. Line Buffer";VAR TotalPrepmtInvLineBuf@1002 : Record "Prepayment Inv. Line Buffer";VAR TotalPrepmtInvLineBufLCY@1003 : Record "Prepayment Inv. Line Buffer");
    VAR
      VAT@1004 : Boolean;
    BEGIN
      TotalPrepmtInvLineBuf.IncrAmounts(PrepmtInvLineBuf);

      if PurchHeader."Currency Code" <> '' then begin
        VAT := PrepmtInvLineBuf.Amount <> PrepmtInvLineBuf."Amount Incl. VAT";

        PrepmtInvLineBuf."Amount Incl. VAT" :=
          AmountToLCY(
            PurchHeader,TotalPrepmtInvLineBuf."Amount Incl. VAT",TotalPrepmtInvLineBufLCY."Amount Incl. VAT");
        if VAT then
          PrepmtInvLineBuf.Amount :=
            AmountToLCY(
              PurchHeader,TotalPrepmtInvLineBuf.Amount,TotalPrepmtInvLineBufLCY.Amount)
        else
          PrepmtInvLineBuf.Amount := PrepmtInvLineBuf."Amount Incl. VAT";
        PrepmtInvLineBuf."VAT Amount" := PrepmtInvLineBuf."Amount Incl. VAT" - PrepmtInvLineBuf.Amount;
        if PrepmtInvLineBuf."VAT Base Amount" <> 0 then
          PrepmtInvLineBuf."VAT Base Amount" := PrepmtInvLineBuf.Amount;
      end;

      TotalPrepmtInvLineBufLCY.IncrAmounts(PrepmtInvLineBuf);
    END;

    LOCAL PROCEDURE AmountToLCY@6(PurchHeader@1001 : Record "Purchase Header";TotalAmt@1000 : Decimal;PrevTotalAmt@1002 : Decimal) : Decimal;
    VAR
      CurrExchRate@1003 : Record "Currency Exchange Rate";
    BEGIN
      CurrExchRate.INIT;
      with PurchHeader do
        exit(
          ROUND(
            CurrExchRate.ExchangeAmtFCYToLCY("Posting Date","Currency Code",TotalAmt,"Currency Factor")) -
          PrevTotalAmt);
    END;

    LOCAL PROCEDURE AdjustInvLineBuffers@41(PurchHeader@1003 : Record "Purchase Header";VAR PrepmtInvLineBuf@1002 : Record "Prepayment Inv. Line Buffer";VAR TotalPrepmtInvLineBuf@1001 : Record "Prepayment Inv. Line Buffer";DocumentType@1000 : 'Invoice,"Credit Memo"');
    VAR
      VATAdjustment@1004 : ARRAY [2] OF Decimal;
      VAT@1005 : ',Base,Amount';
    BEGIN
      CalcPrepmtAmtInvLCYInLines(PurchHeader,PrepmtInvLineBuf,DocumentType,VATAdjustment);
      if ABS(VATAdjustment[VAT::Base]) > GLSetup."Amount Rounding Precision" then
        InsertCorrInvLineBuffer(PrepmtInvLineBuf,PurchHeader,VATAdjustment[VAT::Base])
      else
        if (VATAdjustment[VAT::Base] <> 0) or (VATAdjustment[VAT::Amount] <> 0) then begin
          PrepmtInvLineBuf.AdjustVATBase(VATAdjustment);
          TotalPrepmtInvLineBuf.AdjustVATBase(VATAdjustment);
        end;
    END;

    LOCAL PROCEDURE CalcPrepmtAmtInvLCYInLines@42(PurchHeader@1002 : Record "Purchase Header";VAR PrepmtInvLineBuf@1003 : Record "Prepayment Inv. Line Buffer";DocumentType@1001 : 'Invoice,"Credit Memo"';VAR VATAdjustment@1006 : ARRAY [2] OF Decimal);
    VAR
      PurchLine@1000 : Record "Purchase Line";
      PrepmtInvBufAmount@1004 : ARRAY [2] OF Decimal;
      TotalAmount@1005 : ARRAY [2] OF Decimal;
      LineAmount@1007 : ARRAY [2] OF Decimal;
      Ratio@1010 : ARRAY [2] OF Decimal;
      PrepmtAmtReminder@1008 : ARRAY [2] OF Decimal;
      PrepmtAmountRnded@1009 : ARRAY [2] OF Decimal;
      VAT@1011 : ',Base,Amount';
    BEGIN
      PrepmtInvLineBuf.AmountsToArray(PrepmtInvBufAmount);
      if DocumentType = DocumentType::"Credit Memo" then
        ReverseDecArray(PrepmtInvBufAmount);

      TempGlobalPrepmtInvLineBuf.SetFilterOnPKey(PrepmtInvLineBuf);
      TempGlobalPrepmtInvLineBuf.CALCSUMS(Amount,"Amount Incl. VAT");
      TempGlobalPrepmtInvLineBuf.AmountsToArray(TotalAmount);
      for VAT := VAT::Base to VAT::Amount do
        if TotalAmount[VAT] = 0 then
          Ratio[VAT] := 0
        else
          Ratio[VAT] := PrepmtInvBufAmount[VAT] / TotalAmount[VAT];
      if TempGlobalPrepmtInvLineBuf.FINDSET then
        repeat
          TempGlobalPrepmtInvLineBuf.AmountsToArray(LineAmount);
          PrepmtAmountRnded[VAT::Base] :=
            CalcRoundedAmount(LineAmount[VAT::Base],Ratio[VAT::Base],PrepmtAmtReminder[VAT::Base]);
          PrepmtAmountRnded[VAT::Amount] :=
            CalcRoundedAmount(LineAmount[VAT::Amount],Ratio[VAT::Amount],PrepmtAmtReminder[VAT::Amount]);

          PurchLine.GET(PurchHeader."Document Type",PurchHeader."No.",TempGlobalPrepmtInvLineBuf."Line No.");
          if DocumentType = DocumentType::"Credit Memo" then begin
            VATAdjustment[VAT::Base] += PurchLine."Prepmt. Amount Inv. (LCY)" - PrepmtAmountRnded[VAT::Base];
            PurchLine."Prepmt. Amount Inv. (LCY)" := 0;
            VATAdjustment[VAT::Amount] += PurchLine."Prepmt. VAT Amount Inv. (LCY)" - PrepmtAmountRnded[VAT::Amount];
            PurchLine."Prepmt. VAT Amount Inv. (LCY)" := 0;
          end else begin
            PurchLine."Prepmt. Amount Inv. (LCY)" += PrepmtAmountRnded[VAT::Base];
            PurchLine."Prepmt. VAT Amount Inv. (LCY)" += PrepmtAmountRnded[VAT::Amount];
          end;
          PurchLine.MODIFY;
        until TempGlobalPrepmtInvLineBuf.NEXT = 0;
      TempGlobalPrepmtInvLineBuf.DELETEALL;
      ReverseDecArray(VATAdjustment);
    END;

    LOCAL PROCEDURE CalcRoundedAmount@51(LineAmount@1000 : Decimal;Ratio@1001 : Decimal;VAR Reminder@1002 : Decimal) RoundedAmount : Decimal;
    VAR
      Amount@1003 : Decimal;
    BEGIN
      Amount := Reminder + LineAmount * Ratio;
      RoundedAmount := ROUND(Amount);
      Reminder := Amount - RoundedAmount;
    END;

    LOCAL PROCEDURE ReverseDecArray@53(VAR DecArray@1000 : ARRAY [2] OF Decimal);
    VAR
      Idx@1001 : Integer;
    BEGIN
      for Idx := 1 to ARRAYLEN(DecArray) do
        DecArray[Idx] := -DecArray[Idx];
    END;

    LOCAL PROCEDURE InsertCorrInvLineBuffer@43(VAR PrepmtInvLineBuf@1001 : Record "Prepayment Inv. Line Buffer";PurchHeader@1002 : Record "Purchase Header";VATBaseAdjustment@1003 : Decimal);
    VAR
      NewPrepmtInvLineBuf@1000 : Record "Prepayment Inv. Line Buffer";
      SavedPrepmtInvLineBuf@1004 : Record "Prepayment Inv. Line Buffer";
      AdjmtAmountACY@1005 : Decimal;
    BEGIN
      SavedPrepmtInvLineBuf := PrepmtInvLineBuf;

      if PurchHeader."Currency Code" = '' then
        AdjmtAmountACY := VATBaseAdjustment
      else
        AdjmtAmountACY := 0;

      NewPrepmtInvLineBuf.FillAdjInvLineBuffer(
        PrepmtInvLineBuf,
        GetPrepmtAccNo(PrepmtInvLineBuf."Gen. Bus. Posting Group",PrepmtInvLineBuf."Gen. Prod. Posting Group"),
        VATBaseAdjustment,AdjmtAmountACY);
      PrepmtInvLineBuf.InsertInvLineBuffer(NewPrepmtInvLineBuf);

      NewPrepmtInvLineBuf.FillAdjInvLineBuffer(
        PrepmtInvLineBuf,
        GetCorrBalAccNo(PurchHeader,VATBaseAdjustment > 0),
        -VATBaseAdjustment,-AdjmtAmountACY);
      PrepmtInvLineBuf.InsertInvLineBuffer(NewPrepmtInvLineBuf);

      PrepmtInvLineBuf := SavedPrepmtInvLineBuf;
    END;

    LOCAL PROCEDURE GetPrepmtAccNo@47(GenBusPostingGroup@1000 : Code[20];GenProdPostingGroup@1001 : Code[20]) : Code[20];
    BEGIN
      if (GenBusPostingGroup <> GenPostingSetup."Gen. Bus. Posting Group") or
         (GenProdPostingGroup <> GenPostingSetup."Gen. Prod. Posting Group")
      then
        GenPostingSetup.GET(GenBusPostingGroup,GenProdPostingGroup);
      exit(GenPostingSetup.GetPurchPrepmtAccount);
    END;

    [External]
    PROCEDURE GetCorrBalAccNo@48(PurchHeader@1000 : Record "Purchase Header";PositiveAmount@1001 : Boolean) : Code[20];
    VAR
      BalAccNo@1002 : Code[20];
    BEGIN
      if PurchHeader."Currency Code" = '' then
        BalAccNo := GetInvRoundingAccNo(PurchHeader."Vendor Posting Group")
      else
        BalAccNo := GetGainLossGLAcc(PurchHeader."Currency Code",PositiveAmount);
      exit(BalAccNo);
    END;

    [External]
    PROCEDURE GetInvRoundingAccNo@49(VendorPostingGroup@1000 : Code[20]) : Code[20];
    VAR
      VendPostingGr@1002 : Record "Vendor Posting Group";
      GLAcc@1001 : Record "G/L Account";
    BEGIN
      VendPostingGr.GET(VendorPostingGroup);
      GLAcc.GET(VendPostingGr.GetInvRoundingAccount);
      exit(VendPostingGr."Invoice Rounding Account");
    END;

    LOCAL PROCEDURE GetGainLossGLAcc@50(CurrencyCode@1000 : Code[10];PositiveAmount@1002 : Boolean) : Code[20];
    VAR
      Currency@1001 : Record Currency;
    BEGIN
      Currency.GET(CurrencyCode);
      if PositiveAmount then
        exit(Currency.GetRealizedGainsAccount);
      exit(Currency.GetRealizedLossesAccount);
    END;

    LOCAL PROCEDURE GetCurrencyAmountRoundingPrecision@8(CurrencyCode@1000 : Code[10]) : Decimal;
    VAR
      Currency@1001 : Record Currency;
    BEGIN
      Currency.Initialize(CurrencyCode);
      Currency.TESTFIELD("Amount Rounding Precision");
      exit(Currency."Amount Rounding Precision");
    END;

    [External]
    PROCEDURE UpdateVATOnLines@36(PurchHeader@1001 : Record "Purchase Header";VAR PurchLine@1011 : Record "Purchase Line";VAR VATAmountLine@1003 : Record "VAT Amount Line";DocumentType@1000 : 'Invoice,"Credit Memo",Statistic');
    VAR
      TempVATAmountLineRemainder@1004 : TEMPORARY Record "VAT Amount Line";
      Currency@1005 : Record Currency;
      PrepmtAmt@1002 : Decimal;
      NewAmount@1006 : Decimal;
      NewAmountIncludingVAT@1007 : Decimal;
      NewVATBaseAmount@1008 : Decimal;
      VATAmount@1009 : Decimal;
      VATDifference@1012 : Decimal;
      PrepmtAmtToInvTotal@1013 : Decimal;
    BEGIN
      Currency.Initialize(PurchHeader."Currency Code");

      with PurchLine do begin
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        LOCKTABLE;
        CALCSUMS("Prepmt. Line Amount","Prepmt. Amt. Inv.");
        PrepmtAmtToInvTotal := "Prepmt. Line Amount" - "Prepmt. Amt. Inv.";
        if FIND('-') then
          repeat
            PrepmtAmt := PrepmtAmount(PurchLine,DocumentType);
            if PrepmtAmt <> 0 then begin
              VATAmountLine.GET(
                "Prepayment VAT Identifier",
                "Prepmt. VAT Calc. Type",
                "Prepayment Tax Group Code",
                false,
                PrepmtAmt >= 0);
              if VATAmountLine.Modified then begin
                if not TempVATAmountLineRemainder.GET(
                     "Prepayment VAT Identifier",
                     "Prepmt. VAT Calc. Type",
                     "Prepayment Tax Group Code",
                     false,
                     PrepmtAmt >= 0)
                then begin
                  TempVATAmountLineRemainder := VATAmountLine;
                  TempVATAmountLineRemainder.INIT;
                  TempVATAmountLineRemainder.INSERT;
                end;

                if PurchHeader."Prices Including VAT" then begin
                  if PrepmtAmt = 0 then begin
                    VATAmount := 0;
                    NewAmountIncludingVAT := 0;
                  end else begin
                    VATAmount :=
                      TempVATAmountLineRemainder."VAT Amount" +
                      VATAmountLine."VAT Amount" * PrepmtAmt / VATAmountLine."Line Amount";
                    NewAmountIncludingVAT :=
                      TempVATAmountLineRemainder."Amount Including VAT" +
                      VATAmountLine."Amount Including VAT" * PrepmtAmt / VATAmountLine."Line Amount";
                  end;
                  NewAmount :=
                    ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision") -
                    ROUND(VATAmount,Currency."Amount Rounding Precision");
                  NewVATBaseAmount :=
                    ROUND(
                      NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                      Currency."Amount Rounding Precision");
                end else begin
                  if "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" then begin
                    VATAmount := PrepmtAmt;
                    NewAmount := 0;
                    NewVATBaseAmount := 0;
                  end else begin
                    NewAmount := PrepmtAmt;
                    NewVATBaseAmount :=
                      ROUND(
                        NewAmount * (1 - PurchHeader."VAT Base Discount %" / 100),
                        Currency."Amount Rounding Precision");
                    if VATAmountLine."VAT Base" = 0 then
                      VATAmount := 0
                    else
                      VATAmount :=
                        TempVATAmountLineRemainder."VAT Amount" +
                        VATAmountLine."VAT Amount" * NewAmount / VATAmountLine."VAT Base";
                  end;
                  NewAmountIncludingVAT := NewAmount + ROUND(VATAmount,Currency."Amount Rounding Precision");
                end;

                "Prepayment Amount" := NewAmount;
                "Prepmt. Amt. Incl. VAT" :=
                  ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                "Prepmt. VAT Base Amt." := NewVATBaseAmount;

                if (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount") = 0 then
                  VATDifference := 0
                else
                  if PrepmtAmtToInvTotal = 0 then
                    VATDifference :=
                      VATAmountLine."VAT Difference" * ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.") /
                      (VATAmountLine."Line Amount" - VATAmountLine."Invoice Discount Amount")
                  else
                    VATDifference :=
                      VATAmountLine."VAT Difference" * ("Prepmt. Line Amount" - "Prepmt. Amt. Inv.") /
                      PrepmtAmtToInvTotal;
                "Prepayment VAT Difference" := ROUND(VATDifference,Currency."Amount Rounding Precision");

                MODIFY;

                TempVATAmountLineRemainder."Amount Including VAT" :=
                  NewAmountIncludingVAT - ROUND(NewAmountIncludingVAT,Currency."Amount Rounding Precision");
                TempVATAmountLineRemainder."VAT Amount" := VATAmount - NewAmountIncludingVAT + NewAmount;
                TempVATAmountLineRemainder."VAT Difference" := VATDifference - "Prepayment VAT Difference";
                TempVATAmountLineRemainder.MODIFY;
              end;
            end;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CalcVATAmountLines@35(VAR PurchHeader@1001 : Record "Purchase Header";VAR PurchLine@1009 : Record "Purchase Line";VAR VATAmountLine@1003 : Record "VAT Amount Line";DocumentType@1008 : 'Invoice,"Credit Memo",Statistic');
    VAR
      Currency@1000 : Record Currency;
      NewAmount@1002 : Decimal;
      NewPrepmtVATDiffAmt@1010 : Decimal;
    BEGIN
      Currency.Initialize(PurchHeader."Currency Code");

      VATAmountLine.DELETEALL;

      with PurchLine do begin
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        if FIND('-') then
          repeat
            NewAmount := PrepmtAmount(PurchLine,DocumentType);
            if NewAmount <> 0 then begin
              if DocumentType = DocumentType::Invoice then
                NewAmount := "Prepmt. Line Amount";
              if "Prepmt. VAT Calc. Type" in
                 ["VAT Calculation Type"::"Reverse Charge VAT","VAT Calculation Type"::"Sales Tax"]
              then
                "VAT %" := 0;
              if not VATAmountLine.GET(
                   "Prepayment VAT Identifier","Prepmt. VAT Calc. Type","Prepayment Tax Group Code",false,NewAmount >= 0)
              then
                VATAmountLine.InsertNewLine(
                  "Prepayment VAT Identifier","Prepmt. VAT Calc. Type","Prepayment Tax Group Code",false,
                  "Prepayment VAT %",NewAmount >= 0,true);

              VATAmountLine."Line Amount" := VATAmountLine."Line Amount" + NewAmount;
              NewPrepmtVATDiffAmt := PrepmtVATDiffAmount(PurchLine,DocumentType);
              if DocumentType = DocumentType::Invoice then
                NewPrepmtVATDiffAmt := "Prepayment VAT Difference" + "Prepmt VAT Diff. to Deduct" +
                  "Prepmt VAT Diff. Deducted";
              VATAmountLine."VAT Difference" := VATAmountLine."VAT Difference" + NewPrepmtVATDiffAmt;
              VATAmountLine.MODIFY;
            end;
          until NEXT = 0;
      end;

      VATAmountLine.UpdateLines(
        NewAmount,Currency,PurchHeader."Currency Factor",PurchHeader."Prices Including VAT",
        PurchHeader."VAT Base Discount %",PurchHeader."Tax Area Code",PurchHeader."Tax Liable",PurchHeader."Posting Date");
    END;

    [Internal]
    PROCEDURE SumPrepmt@15(PurchHeader@1000 : Record "Purchase Header";VAR PurchLine@1011 : Record "Purchase Line";VAR VATAmountLine@1003 : Record "VAT Amount Line";VAR TotalAmount@1001 : Decimal;VAR TotalVATAmount@1002 : Decimal;VAR VATAmountText@1004 : Text[30]);
    VAR
      PrepmtInvBuf@1005 : TEMPORARY Record "Prepayment Inv. Line Buffer";
      TotalPrepmtBuf@1007 : Record "Prepayment Inv. Line Buffer";
      TotalPrepmtBufLCY@1008 : Record "Prepayment Inv. Line Buffer";
      DifVATPct@1009 : Boolean;
      PrevVATPct@1010 : Decimal;
    BEGIN
      CalcVATAmountLines(PurchHeader,PurchLine,VATAmountLine,2);
      UpdateVATOnLines(PurchHeader,PurchLine,VATAmountLine,2);
      BuildInvLineBuffer(PurchHeader,PurchLine,2,PrepmtInvBuf,false);
      if PrepmtInvBuf.FIND('-') then begin
        PrevVATPct := PrepmtInvBuf."VAT %";
        repeat
          RoundAmounts(PurchHeader,PrepmtInvBuf,TotalPrepmtBuf,TotalPrepmtBufLCY);
          if PrepmtInvBuf."VAT %" <> PrevVATPct then
            DifVATPct := true;
        until PrepmtInvBuf.NEXT = 0;
      end;
      TotalAmount := TotalPrepmtBuf.Amount;
      TotalVATAmount := TotalPrepmtBuf."VAT Amount";
      if DifVATPct or (PrepmtInvBuf."VAT %" = 0) then
        VATAmountText := Text014
      else
        VATAmountText := STRSUBSTNO(Text015,PrevVATPct);
    END;

    [External]
    PROCEDURE GetPurchLines@16(PurchHeader@1000 : Record "Purchase Header";DocumentType@1003 : 'Invoice,"Credit Memo",Statistic';VAR ToPurchLine@1001 : Record "Purchase Line");
    VAR
      PurchSetup@1004 : Record "Purchases & Payables Setup";
      FromPurchLine@1002 : Record "Purchase Line";
      InvRoundingPurchLine@1008 : Record "Purchase Line";
      TempVATAmountLine@1005 : TEMPORARY Record "VAT Amount Line";
      TotalAmt@1007 : Decimal;
      NextLineNo@1006 : Integer;
    BEGIN
      ApplyFilter(PurchHeader,DocumentType,FromPurchLine);
      if FromPurchLine.FIND('-') then begin
        repeat
          ToPurchLine := FromPurchLine;
          ToPurchLine.INSERT;
        until FromPurchLine.NEXT = 0;

        PurchSetup.GET;
        if PurchSetup."Invoice Rounding" then begin
          CalcVATAmountLines(PurchHeader,ToPurchLine,TempVATAmountLine,2);
          UpdateVATOnLines(PurchHeader,ToPurchLine,TempVATAmountLine,2);
          ToPurchLine.CALCSUMS("Prepmt. Amt. Incl. VAT");
          TotalAmt := ToPurchLine."Prepmt. Amt. Incl. VAT";
          ToPurchLine.FINDLAST;
          if InitInvoiceRoundingLine(PurchHeader,TotalAmt,InvRoundingPurchLine) then
            with ToPurchLine do begin
              NextLineNo := "Line No." + 1;
              ToPurchLine := InvRoundingPurchLine;
              "Line No." := NextLineNo;

              if DocumentType <> DocumentType::"Credit Memo" then
                "Prepmt. Line Amount" := "Line Amount"
              else
                "Prepmt. Amt. Inv." := "Line Amount";
              "Prepmt. VAT Calc. Type" := "VAT Calculation Type";
              "Prepayment VAT Identifier" := "VAT Identifier";
              "Prepayment Tax Group Code" := "Tax Group Code";
              "Prepayment VAT Identifier" := "VAT Identifier";
              "Prepayment Tax Group Code" := "Tax Group Code";
              "Prepayment VAT %" := "VAT %";
              INSERT;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE BuildInvLineBuffer@31(PurchHeader@1000 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line";DocumentType@1005 : Option;VAR PrepmtInvBuf@1002 : Record "Prepayment Inv. Line Buffer";UpdateLines@1010 : Boolean);
    VAR
      PrepmtInvBuf2@1003 : Record "Prepayment Inv. Line Buffer";
      TotalPrepmtInvLineBuffer@1009 : Record "Prepayment Inv. Line Buffer";
      TotalPrepmtInvLineBufferDummy@1008 : Record "Prepayment Inv. Line Buffer";
      PurchSetup@1011 : Record "Purchases & Payables Setup";
    BEGIN
      with PurchHeader do begin
        TempGlobalPrepmtInvLineBuf.RESET;
        TempGlobalPrepmtInvLineBuf.DELETEALL;
        PurchSetup.GET;
        ApplyFilter(PurchHeader,DocumentType,PurchLine);
        PurchLine.SETRANGE("System-Created Entry",false);
        if PurchLine.FIND('-') then
          repeat
            if PrepmtAmount(PurchLine,DocumentType) <> 0 then begin
              FillInvLineBuffer(PurchHeader,PurchLine,PrepmtInvBuf2);
              if UpdateLines then
                TempGlobalPrepmtInvLineBuf.CopyWithLineNo(PrepmtInvBuf2,PurchLine."Line No.");
              PrepmtInvBuf.InsertInvLineBuffer(PrepmtInvBuf2);
              if PurchSetup."Invoice Rounding" then
                RoundAmounts(
                  PurchHeader,PrepmtInvBuf2,TotalPrepmtInvLineBuffer,TotalPrepmtInvLineBufferDummy);
            end;
          until PurchLine.NEXT = 0;
        if PurchSetup."Invoice Rounding" then
          if InsertInvoiceRounding(
               PurchHeader,PrepmtInvBuf2,TotalPrepmtInvLineBuffer,PurchLine."Line No.")
          then
            PrepmtInvBuf.InsertInvLineBuffer(PrepmtInvBuf2);
      end;
    END;

    [External]
    PROCEDURE BuildInvLineBuffer2@9(PurchHeader@1000 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line";DocumentType@1005 : 'Invoice,"Credit Memo",Statistic';VAR PrepmtInvBuf@1002 : Record "Prepayment Inv. Line Buffer");
    BEGIN
      BuildInvLineBuffer(
        PurchHeader,PurchLine,DocumentType,PrepmtInvBuf,false);
    END;

    [External]
    PROCEDURE FillInvLineBuffer@4(PurchHeader@1001 : Record "Purchase Header";PurchLine@1002 : Record "Purchase Line";VAR PrepmtInvBuf@1000 : Record "Prepayment Inv. Line Buffer");
    BEGIN
      with PrepmtInvBuf do begin
        INIT;
        "G/L Account No." := GetPrepmtAccNo(PurchLine."Gen. Bus. Posting Group",PurchLine."Gen. Prod. Posting Group");

        if not PurchHeader."Compress Prepayment" then begin
          "Line No." := PurchLine."Line No.";
          Description := PurchLine.Description;
        end;

        CopyFromPurchLine(PurchLine);
        FillFromGLAcc(PurchHeader."Compress Prepayment");

        SetAmounts(
          PurchLine."Prepayment Amount",PurchLine."Prepmt. Amt. Incl. VAT",PurchLine."Prepayment Amount",
          PurchLine."Prepayment Amount",PurchLine."Prepayment Amount",PurchLine."Prepayment VAT Difference");

        "VAT Amount" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
        "VAT Amount (ACY)" := PurchLine."Prepmt. Amt. Incl. VAT" - PurchLine."Prepayment Amount";
      end;
    END;

    LOCAL PROCEDURE InsertInvoiceRounding@25(PurchHeader@1002 : Record "Purchase Header";VAR PrepmtInvBuf@1000 : Record "Prepayment Inv. Line Buffer";TotalPrepmtInvBuf@1001 : Record "Prepayment Inv. Line Buffer";PrevLineNo@1008 : Integer) : Boolean;
    VAR
      PurchLine@1007 : Record "Purchase Line";
    BEGIN
      if InitInvoiceRoundingLine(PurchHeader,TotalPrepmtInvBuf."Amount Incl. VAT",PurchLine) then begin
        CreateDimensions(PurchLine);
        with PrepmtInvBuf do begin
          INIT;
          "Line No." := PrevLineNo + 10000;
          "Invoice Rounding" := true;
          "G/L Account No." := PurchLine."No.";

          CopyFromPurchLine(PurchLine);

          SetAmounts(
            PurchLine."Line Amount",PurchLine."Amount Including VAT",PurchLine."Line Amount",
            PurchLine."Prepayment Amount",PurchLine."Line Amount",0);

          "VAT Amount" := PurchLine."Amount Including VAT" - PurchLine."Line Amount";
          "VAT Amount (ACY)" := PurchLine."Amount Including VAT" - PurchLine."Line Amount";
        end;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE InitInvoiceRoundingLine@29(PurchHeader@1000 : Record "Purchase Header";TotalAmount@1004 : Decimal;VAR PurchLine@1001 : Record "Purchase Line") : Boolean;
    VAR
      Currency@1007 : Record Currency;
      InvoiceRoundingAmount@1002 : Decimal;
    BEGIN
      Currency.Initialize(PurchHeader."Currency Code");
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalAmount -
          ROUND(
            TotalAmount,
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");

      if InvoiceRoundingAmount = 0 then
        exit(false);

      with PurchLine do begin
        "Document Type" := PurchHeader."Document Type";
        "Document No." := PurchHeader."No.";
        "System-Created Entry" := true;
        Type := Type::"G/L Account";
        VALIDATE("No.",GetInvRoundingAccNo(PurchHeader."Vendor Posting Group"));
        VALIDATE(Quantity,1);
        if PurchHeader."Prices Including VAT" then
          VALIDATE("Direct Unit Cost",InvoiceRoundingAmount)
        else
          VALIDATE(
            "Direct Unit Cost",
            ROUND(
              InvoiceRoundingAmount /
              (1 + (1 - PurchHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
              Currency."Amount Rounding Precision"));
        "Prepayment Amount" := "Direct Unit Cost";
        VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE ApplyFilter@20(PurchHeader@1000 : Record "Purchase Header";DocumentType@1001 : 'Invoice,"Credit Memo",Statistic';VAR PurchLine@1002 : Record "Purchase Line");
    BEGIN
      with PurchLine do begin
        RESET;
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        if DocumentType in [DocumentType::Invoice,DocumentType::Statistic] then
          SETFILTER("Prepmt. Line Amount",'<>0')
        else
          SETFILTER("Prepmt. Amt. Inv.",'<>0');
      end;
    END;

    [External]
    PROCEDURE PrepmtAmount@12(PurchLine@1000 : Record "Purchase Line";DocumentType@1001 : 'Invoice,"Credit Memo",Statistic') : Decimal;
    BEGIN
      with PurchLine do
        case DocumentType of
          DocumentType::Statistic:
            exit("Prepmt. Line Amount");
          DocumentType::Invoice:
            exit("Prepmt. Line Amount" - "Prepmt. Amt. Inv.");
          else
            exit("Prepmt. Amt. Inv." - "Prepmt Amt Deducted");
        end;
    END;

    LOCAL PROCEDURE CheckDim@34(PurchHeader@1001 : Record "Purchase Header");
    VAR
      PurchLine@1003 : Record "Purchase Line";
    BEGIN
      PurchLine."Line No." := 0;
      CheckDimComb(PurchHeader,PurchLine);
      CheckDimValuePosting(PurchHeader,PurchLine);

      PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
      PurchLine.SETRANGE("Document No.",PurchHeader."No.");
      PurchLine.SETFILTER(Type,'<>%1',PurchLine.Type::" ");
      if PurchLine.FIND('-') then
        repeat
          CheckDimComb(PurchHeader,PurchLine);
          CheckDimValuePosting(PurchHeader,PurchLine);
        until PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimComb@30(PurchHeader@1001 : Record "Purchase Header";PurchLine@1000 : Record "Purchase Line");
    VAR
      DimMgt@1002 : Codeunit DimensionManagement;
    BEGIN
      if PurchLine."Line No." = 0 then
        if not DimMgt.CheckDimIDComb(PurchHeader."Dimension Set ID") then
          ERROR(Text007,PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimCombErr);
      if PurchLine."Line No." <> 0 then
        if not DimMgt.CheckDimIDComb(PurchLine."Dimension Set ID") then
          ERROR(Text008,PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(PurchHeader@1004 : Record "Purchase Header";VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      DimMgt@1005 : Codeunit DimensionManagement;
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      if PurchLine."Line No." = 0 then begin
        TableIDArr[1] := DATABASE::Vendor;
        NumberArr[1] := PurchHeader."Pay-to Vendor No.";
        TableIDArr[2] := DATABASE::Job;
        // NumberArr[2] := PurchHeader."Job No.";
        TableIDArr[3] := DATABASE::"Salesperson/Purchaser";
        NumberArr[3] := PurchHeader."Purchaser Code";
        TableIDArr[4] := DATABASE::Campaign;
        NumberArr[4] := PurchHeader."Campaign No.";
        TableIDArr[5] := DATABASE::"Responsibility Center";
        NumberArr[5] := PurchHeader."Responsibility Center";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchHeader."Dimension Set ID") then
          ERROR(
            Text009,
            PurchHeader."Document Type",PurchHeader."No.",DimMgt.GetDimValuePostingErr);
      end else begin
        TableIDArr[1] := DimMgt.TypeToTableID3(PurchLine.Type);
        NumberArr[1] := PurchLine."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := PurchLine."Job No.";
        TableIDArr[3] := DATABASE::"Work Center";
        NumberArr[3] := PurchLine."Work Center No.";
        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,PurchLine."Dimension Set ID") then
          ERROR(
            Text010,
            PurchHeader."Document Type",PurchHeader."No.",PurchLine."Line No.",DimMgt.GetDimValuePostingErr);
      end;
    END;

    LOCAL PROCEDURE CopyCommentLines@22(FromNumber@1002 : Code[20];ToDocType@1000 : Integer;ToNumber@1003 : Code[20]);
    VAR
      PurchCommentLine@1004 : Record "Purch. Comment Line";
    BEGIN
      with PurchCommentLine do
        case ToDocType of
          DATABASE::"Purch. Inv. Header":
            CopyComments("Document Type"::Order,"Document Type"::"Posted Invoice",FromNumber,ToNumber);
          DATABASE::"Purch. Cr. Memo Hdr.":
            CopyComments("Document Type"::Order,"Document Type"::"Posted Credit Memo",FromNumber,ToNumber);
        end;
    END;

    LOCAL PROCEDURE InsertExtendedText@17(TabNo@1000 : Integer;DocNo@1003 : Code[20];GLAccNo@1006 : Code[20];DocDate@1001 : Date;LanguageCode@1009 : Code[10];VAR PrevLineNo@1002 : Integer);
    VAR
      TempExtTextLine@1005 : TEMPORARY Record "Extended Text Line";
      PurchInvLine@1007 : Record "Purch. Inv. Line";
      PurchCrMemoLine@1008 : Record "Purch. Cr. Memo Line";
      TransferExtText@1004 : Codeunit "Transfer Extended Text";
      NextLineNo@1010 : Integer;
    BEGIN
      TransferExtText.PrepmtGetAnyExtText(GLAccNo,TabNo,DocDate,LanguageCode,TempExtTextLine);
      if TempExtTextLine.FIND('-') then begin
        NextLineNo := PrevLineNo + 10000;
        repeat
          case TabNo of
            DATABASE::"Purch. Inv. Line":
              begin
                PurchInvLine.INIT;
                PurchInvLine."Document No." := DocNo;
                PurchInvLine."Line No." := NextLineNo;
                PurchInvLine.Description := TempExtTextLine.Text;
                PurchInvLine.INSERT;
              end;
            DATABASE::"Purch. Cr. Memo Line":
              begin
                PurchCrMemoLine.INIT;
                PurchCrMemoLine."Document No." := DocNo;
                PurchCrMemoLine."Line No." := NextLineNo;
                PurchCrMemoLine.Description := TempExtTextLine.Text;
                PurchCrMemoLine.INSERT;
              end;
          end;
          PrevLineNo := NextLineNo;
          NextLineNo := NextLineNo + 10000;
        until TempExtTextLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PostPrepmtInvLineBuffer@37(PurchHeader@1000 : Record "Purchase Header";PrepmtInvLineBuffer@1010 : Record "Prepayment Inv. Line Buffer";DocumentType@1008 : 'Invoice,"Credit Memo"';PostingDescription@1007 : Text[50];DocType@1006 : Option;DocNo@1005 : Code[20];ExtDocNo@1004 : Text[35];SrcCode@1003 : Code[10];PostingNoSeriesCode@1002 : Code[20]);
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        InitNewLine(
          PurchHeader."Posting Date",PurchHeader."Document Date",PostingDescription,
          PrepmtInvLineBuffer."Global Dimension 1 Code",PrepmtInvLineBuffer."Global Dimension 2 Code",
          PrepmtInvLineBuffer."Dimension Set ID",PurchHeader."Reason Code");

        CopyDocumentFields(DocType,DocNo,ExtDocNo,SrcCode,PostingNoSeriesCode);
        CopyFromPurchHeaderPrepmt(PurchHeader);
        CopyFromPrepmtInvoiceBuffer(PrepmtInvLineBuffer);

        Correction := (DocumentType = DocumentType::"Credit Memo") and GLSetup."Mark Cr. Memos as Corrections";
        if not PrepmtInvLineBuffer.Adjustment then
          "Gen. Posting Type" := "Gen. Posting Type"::Purchase;

        RunGenJnlPostLine(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE PostVendorEntry@32(PurchHeader@1000 : Record "Purchase Header";TotalPrepmtInvLineBuffer@1002 : Record "Prepayment Inv. Line Buffer";TotalPrepmtInvLineBufferLCY@1003 : Record "Prepayment Inv. Line Buffer";DocumentType@1004 : 'Invoice,"Credit Memo"';PostingDescription@1010 : Text[50];DocType@1009 : Option;DocNo@1008 : Code[20];ExtDocNo@1007 : Text[35];SrcCode@1006 : Code[10];PostingNoSeriesCode@1005 : Code[20];CalcPmtDisc@1011 : Boolean);
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        InitNewLine(
          PurchHeader."Posting Date",PurchHeader."Document Date",PostingDescription,
          PurchHeader."Shortcut Dimension 1 Code",PurchHeader."Shortcut Dimension 2 Code",
          PurchHeader."Dimension Set ID",PurchHeader."Reason Code");

        CopyDocumentFields(DocType,DocNo,ExtDocNo,SrcCode,PostingNoSeriesCode);

        CopyFromPurchHeaderPrepmtPost(PurchHeader,(DocumentType = DocumentType::Invoice) or CalcPmtDisc);

        Amount := -TotalPrepmtInvLineBuffer."Amount Incl. VAT";
        "Source Currency Amount" := -TotalPrepmtInvLineBuffer."Amount Incl. VAT";
        "Amount (LCY)" := -TotalPrepmtInvLineBufferLCY."Amount Incl. VAT";
        "Sales/Purch. (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;
        "Profit (LCY)" := -TotalPrepmtInvLineBufferLCY.Amount;

        Correction := (DocumentType = DocumentType::"Credit Memo") and GLSetup."Mark Cr. Memos as Corrections";

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE PostBalancingEntry@33(PurchHeader@1011 : Record "Purchase Header";TotalPrepmtInvLineBuffer@1010 : Record "Prepayment Inv. Line Buffer";TotalPrepmtInvLineBufferLCY@1009 : Record "Prepayment Inv. Line Buffer";VAR VendLedgEntry@1012 : Record "Vendor Ledger Entry";DocumentType@1008 : 'Invoice,"Credit Memo"';DocType@1006 : Option;DocNo@1005 : Code[20];ExtDocNo@1004 : Text[35];SrcCode@1003 : Code[10];PostingNoSeriesCode@1002 : Code[20]);
    VAR
      GenJnlLine@1000 : Record "Gen. Journal Line";
    BEGIN
      with GenJnlLine do begin
        InitNewLine(
          PurchHeader."Posting Date",PurchHeader."Document Date",PurchHeader."Posting Description",
          PurchHeader."Shortcut Dimension 1 Code",PurchHeader."Shortcut Dimension 2 Code",
          PurchHeader."Dimension Set ID",PurchHeader."Reason Code");

        if DocType = "Document Type"::"Credit Memo" then
          CopyDocumentFields("Document Type"::Refund,DocNo,ExtDocNo,SrcCode,PostingNoSeriesCode)
        else
          CopyDocumentFields("Document Type"::Payment,DocNo,ExtDocNo,SrcCode,PostingNoSeriesCode);

        CopyFromPurchHeaderPrepmtPost(PurchHeader,false);
        if PurchHeader."Bal. Account Type" = PurchHeader."Bal. Account Type"::"Bank Account" then
          "Bal. Account Type" := "Bal. Account Type"::"Bank Account";
        "Bal. Account No." := PurchHeader."Bal. Account No.";

        Amount := TotalPrepmtInvLineBuffer."Amount Incl. VAT" + VendLedgEntry."Remaining Pmt. Disc. Possible";
        "Source Currency Amount" := Amount;
        VendLedgEntry.CALCFIELDS(Amount);
        if VendLedgEntry.Amount = 0 then
          "Amount (LCY)" := TotalPrepmtInvLineBufferLCY."Amount Incl. VAT"
        else
          "Amount (LCY)" :=
            TotalPrepmtInvLineBufferLCY."Amount Incl. VAT" +
            ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible" / VendLedgEntry."Adjusted Currency Factor");

        Correction := (DocumentType = DocumentType::"Credit Memo") and GLSetup."Mark Cr. Memos as Corrections";

        "Applies-to Doc. Type" := DocType;
        "Applies-to Doc. No." := DocNo;

        GenJnlPostLine.RunWithCheck(GenJnlLine);
      end;
    END;

    LOCAL PROCEDURE RunGenJnlPostLine@23(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      GenJnlPostLine.RunWithCheck(GenJnlLine);
    END;

    [External]
    PROCEDURE UpdatePrepmtAmountOnPurchLines@13(PurchHeader@1001 : Record "Purchase Header";NewTotalPrepmtAmount@1000 : Decimal);
    VAR
      Currency@1004 : Record Currency;
      PurchLine@1002 : Record "Purchase Line";
      TotalLineAmount@1003 : Decimal;
      TotalPrepmtAmount@1008 : Decimal;
      TotalPrepmtAmtInv@1010 : Decimal;
      LastLineNo@1009 : Integer;
    BEGIN
      Currency.Initialize(PurchHeader."Currency Code");

      with PurchLine do begin
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        SETFILTER(Type,'<>%1',Type::" ");
        SETFILTER("Line Amount",'<>0');
        SETFILTER("Prepayment %",'<>0');
        LOCKTABLE;
        if FIND('-') then
          repeat
            TotalLineAmount := TotalLineAmount + "Line Amount";
            TotalPrepmtAmtInv := TotalPrepmtAmtInv + "Prepmt. Amt. Inv.";
            LastLineNo := "Line No.";
          until NEXT = 0
        else
          ERROR(Text017,FIELDCAPTION("Prepayment %"));
        if TotalLineAmount = 0 then
          ERROR(Text013,NewTotalPrepmtAmount);
        if not (NewTotalPrepmtAmount in [TotalPrepmtAmtInv ..TotalLineAmount]) then
          ERROR(Text016,TotalPrepmtAmtInv,TotalLineAmount);
        if FIND('-') then
          repeat
            if "Line No." <> LastLineNo then
              VALIDATE(
                "Prepmt. Line Amount",
                ROUND(
                  NewTotalPrepmtAmount * "Line Amount" / TotalLineAmount,
                  Currency."Amount Rounding Precision"))
            else
              VALIDATE("Prepmt. Line Amount",NewTotalPrepmtAmount - TotalPrepmtAmount);
            TotalPrepmtAmount := TotalPrepmtAmount + "Prepmt. Line Amount";
            MODIFY;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE CreateDimensions@26(VAR PurchLine@1009 : Record "Purchase Line");
    VAR
      SourceCodeSetup@1006 : Record "Source Code Setup";
      DimMgt@1010 : Codeunit DimensionManagement;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := DATABASE::"Work Center";
      No[1] := PurchLine."Work Center No.";
      TableID[2] := DATABASE::"G/L Account";
      No[2] := PurchLine."No.";
      TableID[3] := DATABASE::Job;
      No[3] := PurchLine."Job No.";
      TableID[4] := DATABASE::"Responsibility Center";
      No[4] := PurchLine."Responsibility Center";
      PurchLine."Shortcut Dimension 1 Code" := '';
      PurchLine."Shortcut Dimension 2 Code" := '';
      PurchLine."Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          PurchLine,0,TableID,No,SourceCodeSetup.Purchases,
          PurchLine."Shortcut Dimension 1 Code",PurchLine."Shortcut Dimension 2 Code",PurchLine."Dimension Set ID",DATABASE::Vendor);
    END;

    [External]
    PROCEDURE GetPurchLinesToDeduct@10(PurchHeader@1000 : Record "Purchase Header";VAR PurchLines@1002 : Record "Purchase Line");
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      ApplyFilter(PurchHeader,1,PurchLine);
      if PurchLine.FINDSET then
        repeat
          if (PrepmtAmount(PurchLine,0) <> 0) and (PrepmtAmount(PurchLine,1) <> 0) then begin
            PurchLines := PurchLine;
            PurchLines.INSERT;
          end;
        until PurchLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PrepmtVATDiffAmount@21(PurchLine@1000 : Record "Purchase Line";DocumentType@1001 : 'Invoice,"Credit Memo",Statistic') : Decimal;
    BEGIN
      with PurchLine do
        case DocumentType of
          DocumentType::Statistic:
            exit("Prepayment VAT Difference");
          DocumentType::Invoice:
            exit("Prepayment VAT Difference");
          else
            exit("Prepmt VAT Diff. to Deduct");
        end;
    END;

    LOCAL PROCEDURE UpdatePurchaseDocument@11(VAR PurchaseHeader@1000 : Record "Purchase Header";VAR PurchLine@1001 : Record "Purchase Line";DocumentType@1002 : 'Invoice,"Credit Memo"';GenJnlLineDocNo@1003 : Code[20]);
    BEGIN
      with PurchaseHeader do begin
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type","Document Type");
        PurchLine.SETRANGE("Document No.","No.");
        if DocumentType = DocumentType::Invoice then begin
          "Last Prepayment No." := GenJnlLineDocNo;
          "Prepayment No." := '';
          PurchLine.SETFILTER("Prepmt. Line Amount",'<>0');
          if PurchLine.FINDSET(true) then
            repeat
              if PurchLine."Prepmt. Line Amount" <> PurchLine."Prepmt. Amt. Inv." then begin
                PurchLine."Prepmt. Amt. Inv." := PurchLine."Prepmt. Line Amount";
                PurchLine."Prepmt. Amount Inv. Incl. VAT" := PurchLine."Prepmt. Amt. Incl. VAT";
                PurchLine.CalcPrepaymentToDeduct;
                PurchLine."Prepmt VAT Diff. to Deduct" :=
                  PurchLine."Prepmt VAT Diff. to Deduct" + PurchLine."Prepayment VAT Difference";
                PurchLine."Prepayment VAT Difference" := 0;
                PurchLine.MODIFY;
              end;
            until PurchLine.NEXT = 0;
        end else begin
          "Last Prepmt. Cr. Memo No." := GenJnlLineDocNo;
          "Prepmt. Cr. Memo No." := '';
          PurchLine.SETFILTER("Prepmt. Amt. Inv.",'<>0');
          if PurchLine.FINDSET(true) then
            repeat
              PurchLine."Prepmt. Amt. Inv." := PurchLine."Prepmt Amt Deducted";
              if "Prices Including VAT" then
                PurchLine."Prepmt. Amount Inv. Incl. VAT" := PurchLine."Prepmt. Amt. Inv."
              else
                PurchLine."Prepmt. Amount Inv. Incl. VAT" :=
                  ROUND(
                    PurchLine."Prepmt. Amt. Inv." * (100 + PurchLine."Prepayment VAT %") / 100,
                    GetCurrencyAmountRoundingPrecision(PurchLine."Currency Code"));
              PurchLine."Prepmt. Amt. Incl. VAT" := PurchLine."Prepmt. Amount Inv. Incl. VAT";
              PurchLine."Prepayment Amount" := PurchLine."Prepmt. Amt. Inv.";
              PurchLine."Prepmt Amt to Deduct" := 0;
              PurchLine."Prepmt VAT Diff. to Deduct" := 0;
              PurchLine."Prepayment VAT Difference" := 0;
              PurchLine.MODIFY;
            until PurchLine.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE UpdatePostedPurchaseDocument@102(DocumentType@1002 : 'Invoice,"Credit Memo"';DocumentNo@1004 : Code[20]);
    VAR
      VendorLedgerEntry@1000 : Record "Vendor Ledger Entry";
      PurchInvHeader@1001 : Record "Purch. Inv. Header";
      PurchCrMemoHdr@1003 : Record "Purch. Cr. Memo Hdr.";
    BEGIN
      case DocumentType of
        DocumentType::Invoice:
          begin
            VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::Invoice);
            VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
            VendorLedgerEntry.FINDFIRST;
            PurchInvHeader.GET(DocumentNo);
            PurchInvHeader."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchInvHeader.MODIFY;
          end;
        DocumentType::"Credit Memo":
          begin
            VendorLedgerEntry.SETRANGE("Document Type",VendorLedgerEntry."Document Type"::"Credit Memo");
            VendorLedgerEntry.SETRANGE("Document No.",DocumentNo);
            VendorLedgerEntry.FINDFIRST;
            PurchCrMemoHdr.GET(DocumentNo);
            PurchCrMemoHdr."Vendor Ledger Entry No." := VendorLedgerEntry."Entry No.";
            PurchCrMemoHdr.MODIFY;
          end;
      end;
    END;

    LOCAL PROCEDURE InsertPurchInvHeader@14(VAR PurchInvHeader@1001 : Record "Purch. Inv. Header";PurchHeader@1002 : Record "Purchase Header";PostingDescription@1003 : Text[50];GenJnlLineDocNo@1004 : Code[20];SrcCode@1005 : Code[10];PostingNoSeriesCode@1000 : Code[20]);
    BEGIN
      with PurchHeader do begin
        PurchInvHeader.INIT;
        PurchInvHeader.TRANSFERFIELDS(PurchHeader);
        PurchInvHeader."Posting Description" := PostingDescription;
        PurchInvHeader."Payment Terms Code" := "Prepmt. Payment Terms Code";
        PurchInvHeader."Due Date" := "Prepayment Due Date";
        PurchInvHeader."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
        PurchInvHeader."Payment Discount %" := "Prepmt. Payment Discount %";
        PurchInvHeader."No." := GenJnlLineDocNo;
        PurchInvHeader."Pre-Assigned No. Series" := '';
        PurchInvHeader."Source Code" := SrcCode;
        PurchInvHeader."User ID" := USERID;
        PurchInvHeader."No. Printed" := 0;
        PurchInvHeader."Prepayment Invoice" := true;
        PurchInvHeader."Prepayment Order No." := "No.";
        PurchInvHeader."No. Series" := PostingNoSeriesCode;
        PurchInvHeader.INSERT;
      end;
    END;

    LOCAL PROCEDURE InsertPurchCrMemoHeader@27(VAR PurchCrMemoHdr@1001 : Record "Purch. Cr. Memo Hdr.";PurchHeader@1002 : Record "Purchase Header";PostingDescription@1003 : Text[50];GenJnlLineDocNo@1004 : Code[20];SrcCode@1005 : Code[10];PostingNoSeriesCode@1000 : Code[20];CalcPmtDiscOnCrMemos@1006 : Boolean);
    BEGIN
      with PurchHeader do begin
        PurchCrMemoHdr.INIT;
        PurchCrMemoHdr.TRANSFERFIELDS(PurchHeader);
        PurchCrMemoHdr."Payment Terms Code" := "Prepmt. Payment Terms Code";
        PurchCrMemoHdr."Pmt. Discount Date" := "Prepmt. Pmt. Discount Date";
        PurchCrMemoHdr."Payment Discount %" := "Prepmt. Payment Discount %";
        if ("Prepmt. Payment Terms Code" <> '') and not CalcPmtDiscOnCrMemos then begin
          PurchCrMemoHdr."Payment Discount %" := 0;
          PurchCrMemoHdr."Pmt. Discount Date" := 0D;
        end;
        PurchCrMemoHdr."Posting Description" := PostingDescription;
        PurchCrMemoHdr."Due Date" := "Prepayment Due Date";
        PurchCrMemoHdr."No." := GenJnlLineDocNo;
        PurchCrMemoHdr."Pre-Assigned No. Series" := '';
        PurchCrMemoHdr."Source Code" := SrcCode;
        PurchCrMemoHdr."User ID" := USERID;
        PurchCrMemoHdr."No. Printed" := 0;
        PurchCrMemoHdr."Prepayment Credit Memo" := true;
        PurchCrMemoHdr."Prepayment Order No." := "No.";
        PurchCrMemoHdr.Correction := GLSetup."Mark Cr. Memos as Corrections";
        PurchCrMemoHdr."No. Series" := PostingNoSeriesCode;
        PurchCrMemoHdr.INSERT;
      end;
    END;

    LOCAL PROCEDURE GetCalcPmtDiscOnCrMemos@18(PrepmtPmtTermsCode@1000 : Code[10]) : Boolean;
    VAR
      PaymentTerms@1001 : Record "Payment Terms";
    BEGIN
      if PrepmtPmtTermsCode = '' then
        exit(false);
      PaymentTerms.GET(PrepmtPmtTermsCode);
      exit(PaymentTerms."Calc. Pmt. Disc. on Cr. Memos");
    END;

    LOCAL PROCEDURE InsertPurchInvLine@19(PurchInvHeader@1001 : Record "Purch. Inv. Header";LineNo@1002 : Integer;PrepmtInvLineBuffer@1004 : Record "Prepayment Inv. Line Buffer");
    VAR
      PurchInvLine@1000 : Record "Purch. Inv. Line";
    BEGIN
      with PrepmtInvLineBuffer do begin
        PurchInvLine.INIT;
        PurchInvLine."Document No." := PurchInvHeader."No.";
        PurchInvLine."Line No." := LineNo;
        PurchInvLine."Buy-from Vendor No." := PurchInvHeader."Buy-from Vendor No.";
        PurchInvLine."Pay-to Vendor No." := PurchInvHeader."Pay-to Vendor No.";
        PurchInvLine.Type := PurchInvLine.Type::"G/L Account";
        PurchInvLine."No." := "G/L Account No.";
        PurchInvLine."Posting Date" := PurchInvHeader."Posting Date";
        PurchInvLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
        PurchInvLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
        PurchInvLine."Dimension Set ID" := "Dimension Set ID";
        PurchInvLine.Description := Description;
        PurchInvLine.Quantity := 1;
        if PurchInvHeader."Prices Including VAT" then begin
          PurchInvLine."Direct Unit Cost" := "Amount Incl. VAT";
          PurchInvLine."Line Amount" := "Amount Incl. VAT";
        end else begin
          PurchInvLine."Direct Unit Cost" := Amount;
          PurchInvLine."Line Amount" := Amount;
        end;
        PurchInvLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        PurchInvLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        PurchInvLine."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
        PurchInvLine."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
        PurchInvLine."VAT %" := "VAT %";
        PurchInvLine.Amount := Amount;
        PurchInvLine."VAT Difference" := "VAT Difference";
        PurchInvLine."Amount Including VAT" := "Amount Incl. VAT";
        PurchInvLine."VAT Calculation Type" := "VAT Calculation Type";
        PurchInvLine."VAT Base Amount" := "VAT Base Amount";
        PurchInvLine."VAT Identifier" := "VAT Identifier";
        PurchInvLine."Job No." := "Job No.";
        PurchInvLine."Job Task No." := "Job Task No.";
        PurchInvLine.INSERT;
      end;
    END;

    LOCAL PROCEDURE InsertPurchCrMemoLine@39(PurchCrMemoHdr@1001 : Record "Purch. Cr. Memo Hdr.";LineNo@1002 : Integer;PrepmtInvLineBuffer@1004 : Record "Prepayment Inv. Line Buffer");
    VAR
      PurchCrMemoLine@1000 : Record "Purch. Cr. Memo Line";
    BEGIN
      with PrepmtInvLineBuffer do begin
        PurchCrMemoLine.INIT;
        PurchCrMemoLine."Document No." := PurchCrMemoHdr."No.";
        PurchCrMemoLine."Line No." := LineNo;
        PurchCrMemoLine."Buy-from Vendor No." := PurchCrMemoHdr."Buy-from Vendor No.";
        PurchCrMemoLine."Pay-to Vendor No." := PurchCrMemoHdr."Pay-to Vendor No.";
        PurchCrMemoLine.Type := PurchCrMemoLine.Type::"G/L Account";
        PurchCrMemoLine."No." := "G/L Account No.";
        PurchCrMemoLine."Posting Date" := PurchCrMemoHdr."Posting Date";
        PurchCrMemoLine."Shortcut Dimension 1 Code" := "Global Dimension 1 Code";
        PurchCrMemoLine."Shortcut Dimension 2 Code" := "Global Dimension 2 Code";
        PurchCrMemoLine."Dimension Set ID" := "Dimension Set ID";
        PurchCrMemoLine.Description := Description;
        PurchCrMemoLine.Quantity := 1;
        if PurchCrMemoHdr."Prices Including VAT" then begin
          PurchCrMemoLine."Direct Unit Cost" := "Amount Incl. VAT";
          PurchCrMemoLine."Line Amount" := "Amount Incl. VAT";
        end else begin
          PurchCrMemoLine."Direct Unit Cost" := Amount;
          PurchCrMemoLine."Line Amount" := Amount;
        end;
        PurchCrMemoLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        PurchCrMemoLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        PurchCrMemoLine."VAT Bus. Posting Group" := "VAT Bus. Posting Group";
        PurchCrMemoLine."VAT Prod. Posting Group" := "VAT Prod. Posting Group";
        PurchCrMemoLine."VAT %" := "VAT %";
        PurchCrMemoLine.Amount := Amount;
        PurchCrMemoLine."VAT Difference" := "VAT Difference";
        PurchCrMemoLine."Amount Including VAT" := "Amount Incl. VAT";
        PurchCrMemoLine."VAT Calculation Type" := "VAT Calculation Type";
        PurchCrMemoLine."VAT Base Amount" := "VAT Base Amount";
        PurchCrMemoLine."VAT Identifier" := "VAT Identifier";
        PurchCrMemoLine."Job No." := "Job No.";
        PurchCrMemoLine."Job Task No." := "Job Task No.";
        PurchCrMemoLine.INSERT;
      end;
    END;

    BEGIN
    END.
  }
}

