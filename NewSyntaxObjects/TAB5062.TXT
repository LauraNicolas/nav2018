OBJECT Table 5062 Attachment
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=VAR
               Attachment2@1000 : Record Attachment;
               NextAttachmentNo@1001 : Integer;
             BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;

               Attachment2.LOCKTABLE;
               if Attachment2.FINDLAST then
                 NextAttachmentNo := Attachment2."No." + 1
               else
                 NextAttachmentNo := 1;

               "No." := NextAttachmentNo;

               RMSetup.GET;
               "Storage Type" := RMSetup."Attachment Storage Type";
               if "Storage Type" = "Storage Type"::"Disk File" then begin
                 RMSetup.TESTFIELD("Attachment Storage Location");
                 "Storage Pointer" := RMSetup."Attachment Storage Location";
               end;
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
               "Last Time Modified" := TIME;
             END;

    CaptionML=ENU=Attachment;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Integer       ;CaptionML=ENU=No.;
                                                   NotBlank=true }
    { 2   ;   ;Attachment File     ;BLOB          ;CaptionML=ENU=Attachment File }
    { 3   ;   ;Storage Type        ;Option        ;CaptionML=ENU=Storage Type;
                                                   OptionCaptionML=ENU=Embedded,Disk File,Exchange Storage;
                                                   OptionString=Embedded,"Disk File","Exchange Storage" }
    { 4   ;   ;Storage Pointer     ;Text250       ;CaptionML=ENU=Storage Pointer }
    { 5   ;   ;File Extension      ;Text250       ;CaptionML=ENU=File Extension }
    { 6   ;   ;Read Only           ;Boolean       ;CaptionML=ENU=Read Only }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified }
    { 8   ;   ;Last Time Modified  ;Time          ;CaptionML=ENU=Last Time Modified }
    { 13  ;   ;Merge Source        ;BLOB          ;CaptionML=ENU=Merge Source }
    { 14  ;   ;Email Message ID    ;BLOB          ;CaptionML=ENU=Email Message ID }
    { 15  ;   ;Email Entry ID      ;BLOB          ;CaptionML=ENU=Email Entry ID }
    { 16  ;   ;Email Message Checksum;Integer     ;CaptionML=ENU=Email Message Checksum }
    { 17  ;   ;Email Message Url   ;BLOB          ;CaptionML=ENU=Email Message Url }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Email Message Checksum"                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text002@1002 : TextConst 'ENU=The attachment is empty.';
      Text003@1003 : TextConst 'ENU=Attachment is already in use on this machine.';
      Text004@1012 : TextConst 'ENU=The attachment file must be saved to disk before you can import it.\\Do you want to save the file?';
      Text005@1005 : TextConst 'ENU=Export Attachment';
      Text006@1006 : TextConst 'ENU=Import Attachment';
      Text007@1007 : TextConst 'ENU=All Files (*.*)|*.*';
      Text008@1008 : TextConst 'ENU=Error during copying file: %1.';
      Text009@1009 : TextConst 'ENU=Do you want to remove %1?';
      Text010@1010 : TextConst 'ENU=External file could not be removed.';
      Text013@1013 : TextConst 'ENU=You can only print Microsoft Word documents.';
      Text014@1014 : TextConst 'ENU=You can only fax Microsoft Word documents.';
      Text015@1001 : TextConst 'ENU=The email cannot be displayed or has been deleted.';
      Text016@1011 : TextConst 'ENU=When you have finished working with a document, you should delete the associated temporary file. Please note that this will not delete the document.\\Do you want to delete the temporary file?';
      Text020@1022 : TextConst 'ENU=An Outlook dialog box is open. Close it and try again.';
      CouldNotActivateOutlookErr@1023 : TextConst '@@@=%1 - product name;ENU=Cannot connect to Microsoft Outlook. If Microsoft Outlook is already running, make sure that you are not running either %1 or Microsoft Outlook as administrator. Close all instances of Microsoft Outlook and try again.';
      UnspecifiedOutlookErr@1024 : TextConst 'ENU=" Microsoft Outlook cannot display the message. Make sure that Microsoft Outlook is configured with access to the message that you are trying to open."';
      TempBlob@1020 : Record TempBlob;
      RMSetup@1015 : Record "Marketing Setup";
      FileMgt@1000 : Codeunit "File Management";
      AttachmentMgt@1021 : Codeunit AttachmentManagement;
      AttachmentImportQst@1004 : TextConst 'ENU=Do you want to import attachment?';
      AttachmentExportQst@1016 : TextConst 'ENU=Do you want to export attachment to view or edit it externaly?';

    [Internal]
    PROCEDURE OpenAttachment@1(Caption@1000 : Text[260];IsTemporary@1001 : Boolean;LanguageCode@1100 : Code[10]);
    VAR
      SegmentLine@1003 : Record "Segment Line";
      WordManagement@1002 : Codeunit WordManagement;
      FileName@1004 : Text;
    BEGIN
      if IsHTML then begin
        SegmentLine.INIT;
        SegmentLine."Language Code" := LanguageCode;
        SegmentLine.Date := WORKDATE;
        PreviewHTMLContent(SegmentLine);
        exit;
      end;

      if "Storage Type" = "Storage Type"::Embedded then begin
        CALCFIELDS("Attachment File");
        if not "Attachment File".HASVALUE then
          ERROR(Text002);
      end;

      if CURRENTCLIENTTYPE in [CLIENTTYPE::Web,CLIENTTYPE::Tablet,CLIENTTYPE::Phone] then
        ProcessWebAttachment(Caption + '.' + "File Extension")
      else begin
        FileName := ConstFilename;
        if not DeleteFile(FileName) then
          ERROR(Text003);
        ExportAttachmentToClientFile(FileName);
        if WordManagement.IsWordDocumentExtension("File Extension") then
          WordManagement.OpenWordAttachment(Rec,FileName,Caption,IsTemporary,LanguageCode)
        else begin
          HYPERLINK(FileName);
          if not "Read Only" then begin
            if CONFIRM(Text004,true) then
              ImportAttachmentFromClientFile(FileName,IsTemporary,false);
            DeleteFile(FileName);
          end else
            if CONFIRM(Text016,true) then
              DeleteFile(FileName);
        end;
      end;
    END;

    [Internal]
    PROCEDURE ShowAttachment@6(VAR SegLine@1000 : Record "Segment Line";WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean;Handler@1003 : Boolean);
    BEGIN
      RunAttachment(SegLine,WordCaption,IsTemporary,true,Handler);
    END;

    [Internal]
    PROCEDURE RunAttachment@26(VAR SegLine@1000 : Record "Segment Line";WordCaption@1001 : Text[260];IsTemporary@1002 : Boolean;IsVisible@1004 : Boolean;Handler@1006 : Boolean);
    VAR
      WordManagement@1003 : Codeunit WordManagement;
      FileName@1005 : Text;
    BEGIN
      if IsHTML then begin
        PreviewHTMLContent(SegLine);
        exit;
      end;

      if "Storage Type" = "Storage Type"::Embedded then
        CALCFIELDS("Attachment File");

      if CURRENTCLIENTTYPE in [CLIENTTYPE::Web,CLIENTTYPE::Tablet,CLIENTTYPE::Phone] then
        ProcessWebAttachment(WordCaption + '.' + "File Extension")
      else
        if WordManagement.IsWordDocumentExtension("File Extension") then
          WordManagement.RunMergedDocument(SegLine,Rec,WordCaption,IsTemporary,IsVisible,Handler)
        else begin
          FileName := ConstFilename;
          ExportAttachmentToClientFile(FileName);
          HYPERLINK(FileName);
          if not "Read Only" then begin
            if CONFIRM(Text004,true) then
              ImportAttachmentFromClientFile(FileName,IsTemporary,false);
            DeleteFile(FileName);
          end else
            if CONFIRM(Text016,true) then
              DeleteFile(FileName);
        end;
    END;

    LOCAL PROCEDURE PreviewHTMLContent@30(SegmentLine@1000 : Record "Segment Line");
    VAR
      ContentPreview@1002 : Page "Content Preview";
    BEGIN
      ContentPreview.SetContent(AttachmentMgt.LoadHTMLContent(Rec,SegmentLine));
      ContentPreview.RUNMODAL;
    END;

    [Internal]
    PROCEDURE ExportAttachmentToClientFile@2(VAR ExportToFile@1000 : Text) : Boolean;
    VAR
      FileFilter@1003 : Text;
      ServerFileName@1001 : Text;
      Path@1002 : Text;
      Success@1004 : Boolean;
    BEGIN
      RMSetup.GET;
      if RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" then
        RMSetup.TESTFIELD("Attachment Storage Location");

      ServerFileName := FileMgt.ServerTempFileName("File Extension");
      ExportAttachmentToServerFile(ServerFileName);

      Path := FileMgt.Magicpath;
      if ExportToFile = '' then begin
        ExportToFile := FileMgt.GetFileName(FileMgt.ClientTempFileName("File Extension"));
        Path := '';
      end;

      FileFilter := UPPERCASE("File Extension") + ' (*.' + "File Extension" + ')|*.' + "File Extension";
      Success := DOWNLOAD(ServerFileName,Text005,Path,FileFilter,ExportToFile);
      FileMgt.DeleteServerFile(ServerFileName);
      exit(Success);
    END;

    [Internal]
    PROCEDURE ImportAttachmentFromClientFile@5(ImportFromFile@1000 : Text;IsTemporary@1001 : Boolean;IsInherited@1002 : Boolean) : Boolean;
    VAR
      FileName@1005 : Text;
      ServerFileName@1010 : Text;
      NewAttachmentNo@1003 : Integer;
    BEGIN
      CLEARLASTERROR;
      if IsTemporary then
        exit(ImportTemporaryAttachmentFromClientFile(ImportFromFile));

      TESTFIELD("Read Only",false);
      RMSetup.GET;
      if RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" then
        RMSetup.TESTFIELD("Attachment Storage Location");

      if IsInherited then begin
        NewAttachmentNo := AttachmentMgt.InsertAttachment("No.");
        GET(NewAttachmentNo);
      end else
        if "No." = 0 then
          NewAttachmentNo := AttachmentMgt.InsertAttachment(0)
        else
          NewAttachmentNo := "No.";
      GET(NewAttachmentNo);

      // passing to UPLOAD function when only server path is specified, not ALSO the file name,
      // then function updates the server file path with the actual client name
      ServerFileName := TEMPORARYPATH;
      FileName := ImportFromFile;
      if not UPLOAD(Text006,'',Text007,FileName,ServerFileName) then begin
        if GETLASTERRORTEXT <> '' then
          ERROR(Text008,GETLASTERRORTEXT);
        exit(false);
      end;

      exit(ImportAttachmentFromServerFile(ServerFileName,false,true));
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromClientFile@21(ImportFromFile@1000 : Text) : Boolean;
    VAR
      FileName@1001 : Text;
    BEGIN
      FileName := FileMgt.BLOBImport(TempBlob,ImportFromFile);

      if FileName <> '' then begin
        "Attachment File" := TempBlob.Blob;
        "Storage Type" := "Storage Type"::Embedded;
        "Storage Pointer" := '';
        "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(FileName)),1,250);
        exit(true);
      end;

      exit(false);
    END;

    [Internal]
    PROCEDURE ExportAttachmentToServerFile@20(VAR ExportToFile@1000 : Text) : Boolean;
    BEGIN
      // This function assumes that CALCFIELDS on the attachment field has been called before
      RMSetup.GET;
      if RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" then
        RMSetup.TESTFIELD("Attachment Storage Location");

      case "Storage Type" of
        "Storage Type"::Embedded:
          begin
            if "Attachment File".HASVALUE then begin
              TempBlob.Blob := "Attachment File";
              if ExportToFile = '' then
                ExportToFile := FileMgt.ServerTempFileName("File Extension");
              FileMgt.BLOBExportToServerFile(TempBlob,ExportToFile); // export BLOB to file on server (UNC location also)
              exit(true);
            end;
            exit(false);
          end;
        "Storage Type"::"Disk File":
          begin
            if ExportToFile = '' then
              ExportToFile := TEMPORARYPATH + FileMgt.GetFileName(ConstDiskFileName);
            FileMgt.CopyServerFile(GetServerFileName(ConstDiskFileName),ExportToFile,false); // Copy from server location to another location (UNC location also)
            exit(true);
          end;
      end;

      exit(false);
    END;

    [Internal]
    PROCEDURE ImportAttachmentFromServerFile@19(ImportFromFile@1000 : Text;IsTemporary@1002 : Boolean;Overwrite@1001 : Boolean) : Boolean;
    VAR
      FileExt@1003 : Text[250];
    BEGIN
      if IsTemporary then begin
        ImportTemporaryAttachmentFromServerFile(ImportFromFile);
        exit(true);
      end;

      if not Overwrite then
        TESTFIELD("Read Only",false);

      RMSetup.GET;
      if RMSetup."Attachment Storage Type" = RMSetup."Attachment Storage Type"::"Disk File" then
        RMSetup.TESTFIELD("Attachment Storage Location");

      case RMSetup."Attachment Storage Type" of
        RMSetup."Attachment Storage Type"::Embedded:
          begin
            CLEAR(TempBlob);
            FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile); // Copy from file on server (UNC location also)

            "Attachment File" := TempBlob.Blob;
            "Storage Type" := "Storage Type"::Embedded;
            "Storage Pointer" := '';
            FileExt := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            if FileExt <> '' then
              "File Extension" := FileExt;
            MODIFY(true);
            exit(true);
          end;
        "Storage Type"::"Disk File":
          begin
            "Storage Type" := "Storage Type"::"Disk File";
            "Storage Pointer" := RMSetup."Attachment Storage Location";
            FileExt := COPYSTR(FileMgt.GetExtension(ImportFromFile),1,250);
            if FileExt <> '' then
              "File Extension" := FileExt;
            FileMgt.CopyServerFile(ImportFromFile,ConstDiskFileName,Overwrite); // Copy from UNC location to another UNC location
            MODIFY(true);
            exit(true);
          end;
      end;

      exit(false);
    END;

    LOCAL PROCEDURE ImportTemporaryAttachmentFromServerFile@22(ImportFromFile@1000 : Text);
    BEGIN
      FileMgt.BLOBImportFromServerFile(TempBlob,ImportFromFile);
      "Attachment File" := TempBlob.Blob;
      "Storage Type" := "Storage Type"::Embedded;
      "Storage Pointer" := '';
      "File Extension" := COPYSTR(UPPERCASE(FileMgt.GetExtension(ImportFromFile)),1,250);
    END;

    [Internal]
    PROCEDURE RemoveAttachment@7(Prompt@1001 : Boolean) DeleteOK@1000 : Boolean;
    VAR
      DeleteYesNo@1002 : Boolean;
    BEGIN
      DeleteOK := false;
      DeleteYesNo := true;
      if Prompt then
        if not CONFIRM(
             Text009,false,TABLECAPTION)
        then
          DeleteYesNo := false;

      if DeleteYesNo then begin
        if "Storage Type" = "Storage Type"::"Disk File" then
          if not FileMgt.DeleteServerFile(ConstDiskFileName) then
            MESSAGE(Text010);
        DELETE(true);
        DeleteOK := true;
      end;
    END;

    [Internal]
    PROCEDURE WizEmbeddAttachment@4(FromAttachment@1000 : Record Attachment);
    BEGIN
      Rec := FromAttachment;
      "No." := 0;
      "Storage Type" := "Storage Type"::Embedded;
      FromAttachment.TESTFIELD("No.");
      case FromAttachment."Storage Type" of
        FromAttachment."Storage Type"::"Disk File":
          ImportAttachmentFromServerFile(FromAttachment.ConstDiskFileName,true,false);
        FromAttachment."Storage Type"::Embedded:
          begin
            FromAttachment.CALCFIELDS("Attachment File");
            if FromAttachment."Attachment File".HASVALUE then
              "Attachment File" := FromAttachment."Attachment File";
          end;
      end;
    END;

    [External]
    PROCEDURE WizSaveAttachment@8();
    VAR
      Attachment2@1000 : Record Attachment;
    BEGIN
      with RMSetup do begin
        GET;
        if "Attachment Storage Type" = "Attachment Storage Type"::Embedded then begin
          "Storage Pointer" := '';
          exit;
        end;
      end;

      "Storage Pointer" := RMSetup."Attachment Storage Location";

      with Attachment2 do begin
        "No." := Rec."No.";
        "Storage Type" := "Storage Type"::"Disk File";
        "Storage Pointer" := RMSetup."Attachment Storage Location";
        "File Extension" := Rec."File Extension";
        "Read Only" := Rec."Read Only";
        "Last Date Modified" := Rec."Last Date Modified";
        "Last Time Modified" := Rec."Last Time Modified";
      end;
      CLEAR(Rec);
      Rec := Attachment2;
    END;

    LOCAL PROCEDURE DeleteFile@10(FileName@1001 : Text) : Boolean;
    VAR
      I@1002 : Integer;
    BEGIN
      if FileName = '' then
        exit(false);

      if not FileMgt.ClientFileExists(FileName) then
        exit(true);

      repeat
        SLEEP(250);
        I := I + 1;
      until FileMgt.DeleteClientFile(FileName) or (I = 25);
      exit(not FileMgt.ClientFileExists(FileName));
    END;

    [Internal]
    PROCEDURE ConstFilename@9() FileName@1000 : Text;
    BEGIN
      FileName := FileMgt.ClientTempFileName("File Extension");
    END;

    [External]
    PROCEDURE ConstDiskFileName@3() DiskFileName@1000 : Text;
    BEGIN
      DiskFileName := "Storage Pointer" + '\' + FORMAT("No.") + '.' + "File Extension";
    END;

    [External]
    PROCEDURE CheckCorrespondenceType@11(CorrespondenceType@1001 : '" ","Hard Copy",Email,Fax') : Text[80];
    BEGIN
      case CorrespondenceType of
        CorrespondenceType::"Hard Copy":
          if (UPPERCASE("File Extension") <> 'DOC') and (UPPERCASE("File Extension") <> 'DOCX') then
            exit(Text013);
        CorrespondenceType::Fax:
          if (UPPERCASE("File Extension") <> 'DOC') and (UPPERCASE("File Extension") <> 'DOCX') then
            exit(Text014);
      end;
    END;

    [External]
    PROCEDURE LinkToMessage@12(MessageID@1006 : Text;EntryID@1000 : Text;RunTrigger@1001 : Boolean);
    BEGIN
      "Storage Type" := "Storage Type"::"Exchange Storage";
      "Read Only" := true;

      SetMessageID(MessageID);
      SetEntryID(EntryID);

      MODIFY(RunTrigger);
    END;

    [Internal]
    PROCEDURE DisplayInOutlook@13();
    VAR
      OutlookHelper@1000 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookHelper" RUNONCLIENT;
      Status@1002 : DotNet "'Microsoft.Dynamics.Nav.Integration.Office, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Integration.Office.Outlook.OutlookStatusCode" RUNONCLIENT;
    BEGIN
      Status := OutlookHelper.DisplayMailFromPublicFolder(GetEntryID);

      if Status.Equals(Status.CouldNotActivateOutlook) then
        ERROR(CouldNotActivateOutlookErr,PRODUCTNAME.FULL);

      if Status.Equals(Status.ModalDialogOpened) then
        ERROR(Text020);

      if Status.Equals(Status.ItemNotFound) then
        ERROR(Text015);

      // If the Exchange Entry Id requires patching to be used in Outlook
      // then we update the entry id.
      if Status.Equals(Status.OkAfterExchange2013Patch) then begin
        SetMessageID(OutlookHelper.PatchExchange2013WebServicesPublicFolderItemEntryId(GetEntryID));
        MODIFY(true);
      end else
        if not Status.Equals(Status.Ok) then
          ERROR(UnspecifiedOutlookErr);
    END;

    [External]
    PROCEDURE Checksum@14(MessageID@1000 : Text) ChecksumValue : Integer;
    VAR
      CharNo@1002 : Integer;
      DecValue@1003 : Decimal;
      MaxInteger@1004 : Integer;
    BEGIN
      RANDOMIZE(1);
      MaxInteger := 2147483647;

      for CharNo := 1 to STRLEN(MessageID) do
        DecValue := (DecValue + (((MessageID[CharNo] mod 43) + 1) * RANDOM((MaxInteger div 44)))) mod MaxInteger;
      ChecksumValue := DecValue;
    END;

    [External]
    PROCEDURE GetMessageID@15() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Message ID");
      "Email Message ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    [External]
    PROCEDURE SetMessageID@16(MessageID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Message ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(MessageID);
      "Email Message Checksum" := Checksum(MessageID);
    END;

    LOCAL PROCEDURE GetEntryID@17() Return : Text;
    VAR
      Stream@1000 : InStream;
    BEGIN
      CALCFIELDS("Email Entry ID");
      "Email Entry ID".CREATEINSTREAM(Stream);
      Stream.READTEXT(Return);
    END;

    [External]
    PROCEDURE SetEntryID@18(EntryID@1000 : Text);
    VAR
      Stream@1001 : OutStream;
    BEGIN
      "Email Entry ID".CREATEOUTSTREAM(Stream);
      Stream.WRITETEXT(EntryID);
    END;

    [External]
    PROCEDURE Read@28() Result : Text;
    VAR
      DataStream@1000 : InStream;
    BEGIN
      Result := '';
      CALCFIELDS("Attachment File");
      if not "Attachment File".HASVALUE then
        exit;

      "Attachment File".CREATEINSTREAM(DataStream,TEXTENCODING::UTF8);
      DataStream.READ(Result);
    END;

    [External]
    PROCEDURE Write@29(SourceText@1000 : Text);
    VAR
      DataStream@1001 : OutStream;
    BEGIN
      "Attachment File".CREATEOUTSTREAM(DataStream,TEXTENCODING::UTF8);
      DataStream.WRITE(SourceText);
    END;

    [External]
    PROCEDURE ReadHTMLCustomLayoutAttachment@37(VAR ContentBodyText@1002 : Text;VAR CustomLayoutCode@1003 : Code[20]) : Boolean;
    VAR
      DataText@1001 : Text;
    BEGIN
      DataText := Read;
      exit(ParseHTMLCustomLayoutAttachment(DataText,ContentBodyText,CustomLayoutCode));
    END;

    [External]
    PROCEDURE WriteHTMLCustomLayoutAttachment@32(ContentBodyText@1001 : Text;CustomLayoutCode@1000 : Code[20]);
    VAR
      DataText@1002 : Text;
    BEGIN
      DataText := PADSTR('',GetCustomLayoutCodeLength - STRLEN(CustomLayoutCode),'0') + CustomLayoutCode;
      DataText += ContentBodyText;
      Write(DataText);
      MODIFY;
    END;

    LOCAL PROCEDURE ParseHTMLCustomLayoutAttachment@31(DataText@1000 : Text;VAR ContentBodyText@1002 : Text;VAR CustomLayoutCode@1001 : Code[20]) : Boolean;
    VAR
      TotalLength@1003 : Integer;
      LayoutIDLength@1004 : Integer;
    BEGIN
      LayoutIDLength := GetCustomLayoutCodeLength;
      TotalLength := STRLEN(DataText);
      if TotalLength < LayoutIDLength then
        exit(false);

      if DataText = '' then
        exit;

      CustomLayoutCode := DELCHR(COPYSTR(DataText,1,LayoutIDLength),'<','0');
      if CustomLayoutCode = '' then
        exit;

      if TotalLength = LayoutIDLength then
        ContentBodyText := ''
      else
        ContentBodyText := COPYSTR(DataText,LayoutIDLength + 1,TotalLength - LayoutIDLength);

      exit(true);
    END;

    [External]
    PROCEDURE IsHTML@23() : Boolean;
    BEGIN
      exit(LOWERCASE("File Extension") = 'html');
    END;

    [External]
    PROCEDURE IsHTMLReady@25() : Boolean;
    VAR
      DataText@1000 : Text;
      DataLength@1002 : Integer;
      HTMLMask@1001 : Text;
      HTMLMaskLength@1003 : Integer;
    BEGIN
      if not IsHTML then
        exit(false);

      HTMLMask := '<html>';
      HTMLMaskLength := STRLEN(HTMLMask);
      DataText := Read;
      DataLength := STRLEN(DataText);

      if DataLength < HTMLMaskLength then
        exit(false);

      exit(LOWERCASE(COPYSTR(DataText,1,HTMLMaskLength)) = HTMLMask);
    END;

    [External]
    PROCEDURE IsHTMLCustomLayout@24() : Boolean;
    VAR
      DataText@1002 : Text;
      DataLength@1001 : Integer;
      CustomLayoutIDLength@1000 : Integer;
      CustomLayoutCode@1003 : Code[20];
    BEGIN
      CustomLayoutIDLength := GetCustomLayoutCodeLength;
      if not IsHTML then
        exit(false);

      DataText := Read;
      DataLength := STRLEN(DataText);

      if DataLength < CustomLayoutIDLength then
        exit(false);

      CustomLayoutCode := DELCHR(DataText,'<','0');
      exit(CustomLayoutCode <> '');
    END;

    LOCAL PROCEDURE GetCustomLayoutCodeLength@42() : Integer;
    VAR
      DummyCustomReportLayout@1000 : Record "Custom Report Layout";
    BEGIN
      exit(MAXSTRLEN(DummyCustomReportLayout.Code));
    END;

    LOCAL PROCEDURE ProcessWebAttachment@27(FileName@1000 : Text);
    BEGIN
      if CONFIRM(AttachmentExportQst,true) then begin
        TempBlob.Blob := "Attachment File";
        FileMgt.BLOBExport(TempBlob,FileName,true);
        if not "Read Only" then
          if CONFIRM(AttachmentImportQst,true) then
            ImportAttachmentFromClientFile('',ISTEMPORARY,false);
      end
    END;

    PROCEDURE GetServerFileName@33(DiskFileName@1000 : Text) : Text;
    BEGIN
      if not EXISTS(DiskFileName) then
        DiskFileName := DELCHR(DiskFileName,'>','.' + "File Extension");
      exit(DiskFileName);
    END;

    BEGIN
    END.
  }
}

