OBJECT Codeunit 703 Find Record Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE FindNoFromTypedValue@112(Type@1007 : '" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)"';Value@1000 : Code[20];UseDefaultTableRelationFilters@1001 : Boolean) : Code[20];
    VAR
      Item@1005 : Record Item;
      GLAccount@1004 : Record "G/L Account";
      ResultValue@1002 : Text;
      RecordView@1003 : Text;
    BEGIN
      if Type = Type::Item then
        exit(Item.GetItemNo(Value));

      if UseDefaultTableRelationFilters and (Type = Type::"G/L Account") then
        RecordView := GetGLAccountTableRelationView;

      if FindRecordByDescriptionAndView(ResultValue,Type,Value,RecordView) = 1 then
        exit(COPYSTR(ResultValue,1,MAXSTRLEN(GLAccount."No.")));

      exit(Value);
    END;

    [External]
    PROCEDURE FindRecordByDescription@30(VAR Result@1001 : Text;Type@1004 : '" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)"';SearchText@1000 : Text) : Integer;
    BEGIN
      exit(FindRecordByDescriptionAndView(Result,Type,SearchText,''));
    END;

    LOCAL PROCEDURE FindRecordByDescriptionAndView@32(VAR Result@1001 : Text;Type@1004 : '" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)"';SearchText@1000 : Text;RecordView@1013 : Text) : Integer;
    VAR
      RecRef@1014 : RecordRef;
      SearchFieldRef@1010 : ARRAY [3] OF FieldRef;
      SearchFieldNo@1011 : ARRAY [3] OF Integer;
      KeyNoMaxStrLen@1005 : Integer;
      RecWithoutQuote@1008 : Text;
      RecFilterFromStart@1007 : Text;
      RecFilterContains@1006 : Text;
    BEGIN
      // Try to find a record by SearchText looking into "No." OR "Description" fields
      // SearchFieldNo[1] - "No."
      // SearchFieldNo[2] - "Description"/"Name"
      // SearchFieldNo[3] - "Base Unit of Measure" (used for items)
      Result := '';
      if SearchText = '' then
        exit(0);

      GetRecRefAndFieldsNoByType(RecRef,Type,SearchFieldNo);
      RecRef.SETVIEW(RecordView);

      SearchFieldRef[1] := RecRef.FIELD(SearchFieldNo[1]);
      SearchFieldRef[2] := RecRef.FIELD(SearchFieldNo[2]);
      if SearchFieldNo[3] <> 0 then
        SearchFieldRef[3] := RecRef.FIELD(SearchFieldNo[3]);

      // Try GET(SearchText)
      KeyNoMaxStrLen := SearchFieldRef[1].LENGTH;
      if not StringHasLogicalFilterChars(SearchText) and (STRLEN(SearchText) <= KeyNoMaxStrLen) then begin
        SearchFieldRef[1].SETFILTER(COPYSTR(SearchText,1,KeyNoMaxStrLen));
        if RecRef.FINDFIRST then begin
          Result := SearchFieldRef[1].VALUE;
          exit(1);
        end;
      end;
      SearchFieldRef[1].SETRANGE;

      // Example of SearchText = "Search string ''";
      // Try FINDFIRST "Description" by mask "@Search string ?"
      RecWithoutQuote := CONVERTSTR(SearchText,'''','?');
      SearchFieldRef[2].SETFILTER('''@' + RecWithoutQuote + '''');
      if RecRef.FINDFIRST then begin
        Result := SearchFieldRef[1].VALUE;
        exit(1);
      end;
      SearchFieldRef[2].SETRANGE;

      // Try FINDFIRST "No." OR "Description" by mask "@Search string ?*"
      RecRef.FILTERGROUP := -1;
      RecFilterFromStart := '''@' + RecWithoutQuote + '*''';
      SearchFieldRef[1].SETFILTER(RecFilterFromStart);
      SearchFieldRef[2].SETFILTER(RecFilterFromStart);
      if RecRef.FINDFIRST then begin
        Result := SearchFieldRef[1].VALUE;
        exit(1);
      end;

      // Try FINDFIRST "No." OR "Description" OR additional field by mask "@*Search string ?*"
      RecFilterContains := '''@*' + RecWithoutQuote + '*''';
      SearchFieldRef[1].SETFILTER(RecFilterContains);
      SearchFieldRef[2].SETFILTER(RecFilterContains);
      if SearchFieldNo[3] <> 0 then
        SearchFieldRef[3].SETFILTER(RecFilterContains);

      if RecRef.FINDFIRST then begin
        Result := SearchFieldRef[1].VALUE;
        exit(RecRef.COUNT);
      end;

      // Try FINDLAST record with similar "Description"
      if FindRecordWithSimilarName(RecRef,SearchText,SearchFieldNo[2]) then begin
        Result := SearchFieldRef[1].VALUE;
        exit(1);
      end;

      // Not found
      exit(0);
    END;

    LOCAL PROCEDURE FindRecordWithSimilarName@29(RecRef@1001 : RecordRef;SearchText@1000 : Text;DescriptionFieldNo@1006 : Integer) : Boolean;
    VAR
      TypeHelper@1007 : Codeunit "Type Helper";
      Description@1002 : Text;
      RecCount@1003 : Integer;
      TextLength@1004 : Integer;
      Treshold@1005 : Integer;
    BEGIN
      if SearchText = '' then
        exit(false);

      TextLength := STRLEN(SearchText);
      if TextLength > RecRef.FIELD(DescriptionFieldNo).LENGTH then
        exit(false);

      Treshold := TextLength div 5;
      if Treshold = 0 then
        exit(false);

      RecRef.RESET;
      RecRef.ASCENDING(false); // most likely to search for newest records
      if RecRef.FINDSET then
        repeat
          RecCount += 1;
          Description := RecRef.FIELD(DescriptionFieldNo).VALUE;
          if ABS(TextLength - STRLEN(Description)) <= Treshold then
            if TypeHelper.TextDistance(UPPERCASE(SearchText),UPPERCASE(Description)) <= Treshold then
              exit(true);
        until (RecRef.NEXT = 0) or (RecCount > 1000);

      exit(false);
    END;

    LOCAL PROCEDURE GetRecRefAndFieldsNoByType@33(RecRef@1004 : RecordRef;Type@1002 : '" ","G/L Account",Item,Resource,"Fixed Asset","Charge (Item)"';VAR SearchFieldNo@1003 : ARRAY [3] OF Integer);
    VAR
      GLAccount@1005 : Record "G/L Account";
      Item@1006 : Record Item;
      FixedAsset@1007 : Record "Fixed Asset";
      Resource@1008 : Record Resource;
      ItemCharge@1009 : Record "Item Charge";
      StandardText@1000 : Record "Standard Text";
    BEGIN
      case Type of
        Type::"G/L Account":
          begin
            RecRef.OPEN(DATABASE::"G/L Account");
            SearchFieldNo[1] := GLAccount.FIELDNO("No.");
            SearchFieldNo[2] := GLAccount.FIELDNO(Name);
            SearchFieldNo[3] := 0;
          end;
        Type::Item:
          begin
            RecRef.OPEN(DATABASE::Item);
            SearchFieldNo[1] := Item.FIELDNO("No.");
            SearchFieldNo[2] := Item.FIELDNO(Description);
            SearchFieldNo[3] := Item.FIELDNO("Base Unit of Measure");
          end;
        Type::Resource:
          begin
            RecRef.OPEN(DATABASE::Resource);
            SearchFieldNo[1] := Resource.FIELDNO("No.");
            SearchFieldNo[2] := Resource.FIELDNO(Name);
            SearchFieldNo[3] := 0;
          end;
        Type::"Fixed Asset":
          begin
            RecRef.OPEN(DATABASE::"Fixed Asset");
            SearchFieldNo[1] := FixedAsset.FIELDNO("No.");
            SearchFieldNo[2] := FixedAsset.FIELDNO(Description);
            SearchFieldNo[3] := 0;
          end;
        Type::"Charge (Item)":
          begin
            RecRef.OPEN(DATABASE::"Item Charge");
            SearchFieldNo[1] := ItemCharge.FIELDNO("No.");
            SearchFieldNo[2] := ItemCharge.FIELDNO(Description);
            SearchFieldNo[3] := 0;
          end;
        Type::" ":
          begin
            RecRef.OPEN(DATABASE::"Standard Text");
            SearchFieldNo[1] := StandardText.FIELDNO(Code);
            SearchFieldNo[2] := StandardText.FIELDNO(Description);
            SearchFieldNo[3] := 0;
          end;
      end;
    END;

    LOCAL PROCEDURE GetGLAccountTableRelationView@36() : Text;
    VAR
      GLAccount@1000 : Record "G/L Account";
    BEGIN
      GLAccount.SETRANGE("Direct Posting",true);
      GLAccount.SETRANGE("Account Type",GLAccount."Account Type"::Posting);
      GLAccount.SETRANGE(Blocked,false);
      exit(GLAccount.GETVIEW);
    END;

    LOCAL PROCEDURE StringHasLogicalFilterChars@35(String@1000 : Text) : Boolean;
    BEGIN
      if STRPOS(String,'&') <> 0 then
        exit(true);

      if STRPOS(String,'|') <> 0 then
        exit(true);

      exit(false);
    END;

    BEGIN
    END.
  }
}

