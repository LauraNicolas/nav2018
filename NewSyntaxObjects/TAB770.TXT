OBJECT Table 770 Analysis Report Chart Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               DeleteLines;
             END;

    CaptionML=ENU=Analysis Report Chart Setup;
    LookupPageID="Analysis Report Chart List";
  }
  FIELDS
  {
    { 1   ;   ;User ID             ;Text132       ;CaptionML=ENU=User ID;
                                                   Editable=false }
    { 2   ;   ;Name                ;Text30        ;CaptionML=ENU=Name }
    { 10  ;   ;Analysis Area       ;Option        ;CaptionML=ENU=Analysis Area;
                                                   OptionCaptionML=ENU=Sales,Purchase,Inventory;
                                                   OptionString=Sales,Purchase,Inventory;
                                                   Editable=false }
    { 20  ;   ;Analysis Report Name;Code10        ;TableRelation="Analysis Report Name".Name WHERE ("Analysis Area"=FIELD("Analysis Area"));
                                                   OnValidate=VAR
                                                                AnalysisReportName@1001 : Record "Analysis Report Name";
                                                                AnalysisReportChartMgt@1000 : Codeunit "Analysis Report Chart Mgt.";
                                                              BEGIN
                                                                AnalysisReportName.GET("Analysis Area","Analysis Report Name");
                                                                "Analysis Line Template Name" := AnalysisReportName."Analysis Line Template Name";
                                                                "Analysis Column Template Name" := AnalysisReportName."Analysis Column Template Name";
                                                                AnalysisReportChartMgt.CheckDuplicateAnalysisLineDescription("Analysis Area","Analysis Line Template Name");
                                                                AnalysisReportChartMgt.CheckDuplicateAnalysisColumnHeader("Analysis Area","Analysis Column Template Name");

                                                                RefreshLines(false);
                                                              END;

                                                   CaptionML=ENU=Analysis Report Name }
    { 21  ;   ;Analysis Line Template Name;Code10 ;TableRelation="Analysis Report Name"."Analysis Line Template Name" WHERE ("Analysis Area"=FIELD("Analysis Area"),
                                                                                                                             Name=FIELD("Analysis Report Name"));
                                                   OnLookup=VAR
                                                              AnalysisLineTemplate@1000 : Record "Analysis Line Template";
                                                              AnalysisLineTemplate2@1001 : Record "Analysis Line Template";
                                                            BEGIN
                                                              AnalysisLineTemplate.SETRANGE("Analysis Area","Analysis Area");
                                                              AnalysisLineTemplate2.GET("Analysis Area","Analysis Line Template Name");
                                                              AnalysisLineTemplate := AnalysisLineTemplate2;
                                                              PAGE.RUNMODAL(0,AnalysisLineTemplate);
                                                            END;

                                                   CaptionML=ENU=Analysis Line Template Name;
                                                   Editable=false }
    { 22  ;   ;Analysis Column Template Name;Code10;
                                                   TableRelation="Analysis Report Name"."Analysis Column Template Name" WHERE ("Analysis Area"=FIELD("Analysis Area"),
                                                                                                                               Name=FIELD("Analysis Report Name"));
                                                   OnLookup=VAR
                                                              AnalysisColumnTemplate@1000 : Record "Analysis Column Template";
                                                              AnalysisColumnTemplate2@1001 : Record "Analysis Column Template";
                                                            BEGIN
                                                              AnalysisColumnTemplate.SETRANGE("Analysis Area","Analysis Area");
                                                              AnalysisColumnTemplate2.GET("Analysis Area","Analysis Column Template Name");
                                                              AnalysisColumnTemplate := AnalysisColumnTemplate2;
                                                              PAGE.RUNMODAL(0,AnalysisColumnTemplate);
                                                            END;

                                                   CaptionML=ENU=Analysis Column Template Name;
                                                   Editable=false }
    { 30  ;   ;Base X-Axis on      ;Option        ;OnValidate=BEGIN
                                                                RefreshLines(false);
                                                                if "End Date" = 0D then
                                                                  "End Date" := "Start Date";
                                                              END;

                                                   CaptionML=ENU=Base X-Axis on;
                                                   OptionCaptionML=ENU=Period,Line,Column;
                                                   OptionString=Period,Line,Column }
    { 31  ;   ;Start Date          ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("Start Date");
                                                              END;

                                                   CaptionML=ENU=Start Date }
    { 32  ;   ;End Date            ;Date          ;OnValidate=BEGIN
                                                                TESTFIELD("End Date");
                                                              END;

                                                   CaptionML=ENU=End Date }
    { 41  ;   ;Period Length       ;Option        ;CaptionML=ENU=Period Length;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year;
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 42  ;   ;No. of Periods      ;Integer       ;InitValue=12;
                                                   OnValidate=BEGIN
                                                                if "No. of Periods" < 1 then
                                                                  ERROR(Text002,FIELDCAPTION("No. of Periods"),"No. of Periods");
                                                              END;

                                                   CaptionML=ENU=No. of Periods }
    { 50  ;   ;Last Viewed         ;Boolean       ;OnValidate=VAR
                                                                AnalysisReportChartSetup@1000 : Record "Analysis Report Chart Setup";
                                                              BEGIN
                                                                if (not "Last Viewed") or ("Last Viewed" = xRec."Last Viewed") then
                                                                  exit;

                                                                AnalysisReportChartSetup.SETRANGE("User ID","User ID");
                                                                AnalysisReportChartSetup.SETRANGE("Analysis Area","Analysis Area");
                                                                AnalysisReportChartSetup.SETFILTER(Name,'<>%1',Name);
                                                                AnalysisReportChartSetup.SETRANGE("Last Viewed",true);
                                                                AnalysisReportChartSetup.MODIFYALL("Last Viewed",false);
                                                              END;

                                                   CaptionML=ENU=Last Viewed;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"User ID","Analysis Area",Name          ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@="%1=Analysis Line_Description %2=Analysis Column_Coulmn Header";ENU=%1 %2';
      Text002@1001 : TextConst 'ENU=You cannot set %1 to %2.';

    [External]
    PROCEDURE SetAnalysisReportName@11(ReportName@1000 : Code[10]);
    BEGIN
      VALIDATE("Analysis Report Name",ReportName);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetShowPer@12(ShowPer@1000 : Option);
    BEGIN
      VALIDATE("Base X-Axis on",ShowPer);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetPeriodLength@7(PeriodLength@1000 : Option);
    BEGIN
      "Period Length" := PeriodLength;
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetLastViewed@17();
    BEGIN
      VALIDATE("Last Viewed",true);
      MODIFY(true);
    END;

    [External]
    PROCEDURE SetLinkToLines@5(VAR AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line");
    BEGIN
      AnalysisReportChartLine.SETRANGE("User ID","User ID");
      AnalysisReportChartLine.SETRANGE("Analysis Area","Analysis Area");
      AnalysisReportChartLine.SETRANGE(Name,Name);
    END;

    [External]
    PROCEDURE SetLinkToMeasureLines@3(VAR AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line");
    BEGIN
      SetLinkToLines(AnalysisReportChartLine);
      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          ;
        "Base X-Axis on"::Line:
          AnalysisReportChartLine.SETRANGE("Analysis Line Line No.",0);
        "Base X-Axis on"::Column:
          AnalysisReportChartLine.SETRANGE("Analysis Column Line No.",0);
      end;
    END;

    [External]
    PROCEDURE SetLinkToDimensionLines@14(VAR AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line");
    BEGIN
      SetLinkToLines(AnalysisReportChartLine);
      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          begin
            AnalysisReportChartLine.SETRANGE("Analysis Line Line No.",0);
            AnalysisReportChartLine.SETRANGE("Analysis Column Line No.",0);
          end;
        "Base X-Axis on"::Line:
          AnalysisReportChartLine.SETRANGE("Analysis Column Line No.",0);
        "Base X-Axis on"::Column:
          AnalysisReportChartLine.SETRANGE("Analysis Line Line No.",0);
      end;
    END;

    [External]
    PROCEDURE RefreshLines@1(Force@1002 : Boolean);
    VAR
      AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line";
      TempAnalysisReportChartLine@1001 : TEMPORARY Record "Analysis Report Chart Line";
    BEGIN
      if not Force then
        if ("Analysis Report Name" = xRec."Analysis Report Name") and
           ("Base X-Axis on" = xRec."Base X-Axis on")
        then
          exit;

      GetMeasuresInTemp(TempAnalysisReportChartLine);

      SetLinkToLines(AnalysisReportChartLine);
      AnalysisReportChartLine.DELETEALL;

      AnalysisReportChartLine.RESET;
      if TempAnalysisReportChartLine.FINDSET then
        repeat
          AnalysisReportChartLine := TempAnalysisReportChartLine;
          AnalysisReportChartLine.INSERT;
        until TempAnalysisReportChartLine.NEXT = 0;
    END;

    [External]
    PROCEDURE FilterAnalysisLine@6(VAR AnalysisLine@1000 : Record "Analysis Line");
    BEGIN
      AnalysisLine.SETRANGE("Analysis Area","Analysis Area");
      AnalysisLine.SETRANGE("Analysis Line Template Name","Analysis Line Template Name");
      AnalysisLine.SETFILTER(Description,'<>%1','');
    END;

    [External]
    PROCEDURE FilterAnalysisColumn@8(VAR AnalysisColumn@1000 : Record "Analysis Column");
    BEGIN
      AnalysisColumn.SETRANGE("Analysis Area","Analysis Area");
      AnalysisColumn.SETRANGE("Analysis Column Template","Analysis Column Template Name");
      AnalysisColumn.SETFILTER("Column Header",'<>%1','');
    END;

    LOCAL PROCEDURE GetMeasuresInTemp@4(VAR TempAnalysisReportChartLine@1002 : TEMPORARY Record "Analysis Report Chart Line");
    VAR
      AnalysisLine@1000 : Record "Analysis Line";
      AnalysisColumn@1001 : Record "Analysis Column";
    BEGIN
      FilterAnalysisLine(AnalysisLine);
      FilterAnalysisColumn(AnalysisColumn);

      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          begin
            if AnalysisColumn.FINDSET then
              repeat
                if AnalysisLine.FINDSET then
                  repeat
                    InsertLineIntoTemp(TempAnalysisReportChartLine,AnalysisLine,AnalysisColumn);
                  until AnalysisLine.NEXT = 0;
              until AnalysisColumn.NEXT = 0;
          end;
        "Base X-Axis on"::Line,
        "Base X-Axis on"::Column:
          begin
            if AnalysisLine.FINDSET then
              repeat
                InsertLineIntoTemp(TempAnalysisReportChartLine,AnalysisLine,AnalysisColumn);
              until AnalysisLine.NEXT = 0;
            CLEAR(AnalysisLine);
            if AnalysisColumn.FINDSET then
              repeat
                InsertLineIntoTemp(TempAnalysisReportChartLine,AnalysisLine,AnalysisColumn);
              until AnalysisColumn.NEXT = 0;
          end;
      end;

      SetChartTypesToDefault(TempAnalysisReportChartLine);
    END;

    LOCAL PROCEDURE InsertLineIntoTemp@9(VAR TempAnalysisReportChartLine@1000 : TEMPORARY Record "Analysis Report Chart Line";AnalysisLine@1002 : Record "Analysis Line";AnalysisColumn@1001 : Record "Analysis Column");
    VAR
      AnalysisReportChartLine@1003 : Record "Analysis Report Chart Line";
    BEGIN
      TempAnalysisReportChartLine.INIT;
      TempAnalysisReportChartLine."User ID" := "User ID";
      TempAnalysisReportChartLine."Analysis Area" := "Analysis Area";
      TempAnalysisReportChartLine.Name := Name;
      TempAnalysisReportChartLine."Analysis Line Line No." := AnalysisLine."Line No.";
      TempAnalysisReportChartLine."Analysis Column Line No." := AnalysisColumn."Line No.";
      TempAnalysisReportChartLine."Analysis Line Template Name" := "Analysis Line Template Name";
      TempAnalysisReportChartLine."Analysis Column Template Name" := "Analysis Column Template Name";

      case "Base X-Axis on" of
        "Base X-Axis on"::Period:
          begin
            TempAnalysisReportChartLine."Original Measure Name" :=
              STRSUBSTNO(Text001,AnalysisLine.Description,AnalysisColumn."Column Header");
            TempAnalysisReportChartLine."Measure Value" := STRSUBSTNO(Text001,AnalysisLine."Line No.",AnalysisColumn."Line No.");
          end;
        "Base X-Axis on"::Line,
        "Base X-Axis on"::Column:
          case true of
            AnalysisLine."Line No." = 0:
              begin
                TempAnalysisReportChartLine."Original Measure Name" := AnalysisColumn."Column Header";
                TempAnalysisReportChartLine."Measure Value" := FORMAT(AnalysisColumn."Line No.");
              end;
            AnalysisColumn."Line No." = 0:
              begin
                TempAnalysisReportChartLine."Original Measure Name" := AnalysisLine.Description;
                TempAnalysisReportChartLine."Measure Value" := FORMAT(AnalysisLine."Line No.");
              end;
          end;
      end;
      TempAnalysisReportChartLine."Measure Name" := TempAnalysisReportChartLine."Original Measure Name";

      if AnalysisReportChartLine.GET(TempAnalysisReportChartLine."User ID",
           TempAnalysisReportChartLine."Analysis Area",
           TempAnalysisReportChartLine.Name,
           TempAnalysisReportChartLine."Analysis Line Line No.",
           TempAnalysisReportChartLine."Analysis Column Line No.")
      then
        TempAnalysisReportChartLine."Chart Type" := AnalysisReportChartLine."Chart Type";

      TempAnalysisReportChartLine.INSERT;
    END;

    LOCAL PROCEDURE SetChartTypesToDefault@13(VAR TempAnalysisReportChartLine@1000 : TEMPORARY Record "Analysis Report Chart Line");
    VAR
      TempAnalysisReportChartLine2@1004 : TEMPORARY Record "Analysis Report Chart Line";
    BEGIN
      TempAnalysisReportChartLine2.COPY(TempAnalysisReportChartLine,true);

      SetMeasureChartTypesToDefault(TempAnalysisReportChartLine2);

      TempAnalysisReportChartLine2.RESET;
      SetLinkToDimensionLines(TempAnalysisReportChartLine2);
      TempAnalysisReportChartLine2.SETFILTER("Chart Type",'<>%1',TempAnalysisReportChartLine2."Chart Type"::" ");
      if TempAnalysisReportChartLine2.ISEMPTY then
        SetDimensionChartTypesToDefault(TempAnalysisReportChartLine2);
    END;

    [External]
    PROCEDURE SetMeasureChartTypesToDefault@15(VAR AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line");
    VAR
      BusinessChartBuffer@1003 : Record "Business Chart Buffer";
      MaxNumMeasures@1002 : Integer;
      NumOfMeasuresToBeSet@1001 : Integer;
    BEGIN
      AnalysisReportChartLine.RESET;
      SetLinkToMeasureLines(AnalysisReportChartLine);
      AnalysisReportChartLine.SETFILTER("Chart Type",'<>%1',AnalysisReportChartLine."Chart Type"::" ");
      MaxNumMeasures := BusinessChartBuffer.GetMaxNumberOfMeasures;
      NumOfMeasuresToBeSet := MaxNumMeasures - AnalysisReportChartLine.COUNT;
      if NumOfMeasuresToBeSet > 0 then begin
        AnalysisReportChartLine.SETRANGE("Chart Type",AnalysisReportChartLine."Chart Type"::" ");
        if AnalysisReportChartLine.FINDSET then
          repeat
            AnalysisReportChartLine."Chart Type" := AnalysisReportChartLine.GetDefaultChartType;
            AnalysisReportChartLine.MODIFY;
            NumOfMeasuresToBeSet -= 1;
          until (NumOfMeasuresToBeSet = 0) or (AnalysisReportChartLine.NEXT = 0);
      end;
    END;

    [External]
    PROCEDURE SetDimensionChartTypesToDefault@16(VAR AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line");
    BEGIN
      AnalysisReportChartLine.RESET;
      SetLinkToDimensionLines(AnalysisReportChartLine);
      AnalysisReportChartLine.SETRANGE("Chart Type",AnalysisReportChartLine."Chart Type"::" ");
      AnalysisReportChartLine.MODIFYALL("Chart Type",AnalysisReportChartLine.GetDefaultChartType);
    END;

    LOCAL PROCEDURE DeleteLines@2();
    VAR
      AnalysisReportChartLine@1000 : Record "Analysis Report Chart Line";
    BEGIN
      AnalysisReportChartLine.SETRANGE("User ID","User ID");
      AnalysisReportChartLine.SETRANGE("Analysis Area","Analysis Area");
      AnalysisReportChartLine.SETRANGE(Name,Name);
      AnalysisReportChartLine.DELETEALL;
    END;

    BEGIN
    END.
  }
}

