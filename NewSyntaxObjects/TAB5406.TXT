OBJECT Table 5406 Prod. Order Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Prod. Order No.";
    OnInsert=BEGIN
               if Status = Status::Finished then
                 ERROR(Text000,Status,TABLECAPTION);

               ReserveProdOrderLine.VerifyQuantity(Rec,xRec);
               if "Routing Reference No." < 0 then
                 "Routing Reference No." := "Line No.";
             END;

    OnModify=BEGIN
               if Status = Status::Finished then
                 ERROR(Text000,Status,TABLECAPTION);

               ReserveProdOrderLine.VerifyChange(Rec,xRec);
             END;

    OnDelete=VAR
               ItemLedgEntry@1000 : Record "Item Ledger Entry";
               CapLedgEntry@1001 : Record "Capacity Ledger Entry";
               PurchLine@1002 : Record "Purchase Line";
             BEGIN
               if Status = Status::Finished then
                 ERROR(Text000,Status,TABLECAPTION);

               if Status = Status::Released then begin
                 ItemLedgEntry.SETRANGE("Order Type",ItemLedgEntry."Order Type"::Production);
                 ItemLedgEntry.SETRANGE("Order No.","Prod. Order No.");
                 ItemLedgEntry.SETRANGE("Order Line No.","Line No.");
                 if not ItemLedgEntry.ISEMPTY then
                   ERROR(
                     Text99000000,
                     TABLECAPTION,"Line No.",ItemLedgEntry.TABLECAPTION);

                 if CheckCapLedgEntry then
                   ERROR(
                     Text99000000,
                     TABLECAPTION,"Line No.",CapLedgEntry.TABLECAPTION);

                 if CheckSubcontractPurchOrder then
                   ERROR(
                     Text99000000,
                     TABLECAPTION,"Line No.",PurchLine.TABLECAPTION);
               end;

               ReserveProdOrderLine.DeleteLine(Rec);

               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);
               WhseValidateSourceLine.ProdOrderLineDelete(Rec);

               DeleteRelations;
             END;

    OnRename=BEGIN
               ERROR(Text99000001,TABLECAPTION);
             END;

    CaptionML=ENU=Prod. Order Line;
    LookupPageID="Prod. Order Line List";
    DrillDownPageID="Prod. Order Line List";
  }
  FIELDS
  {
    { 1   ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                   OptionString=Simulated,Planned,"Firm Planned",Released,Finished }
    { 2   ;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order"."No." WHERE (Status=FIELD(Status));
                                                   CaptionML=ENU=Prod. Order No. }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                ReserveProdOrderLine.VerifyChange(Rec,xRec);
                                                                TESTFIELD("Finished Quantity",0);
                                                                CALCFIELDS("Reserved Quantity");
                                                                TESTFIELD("Reserved Quantity",0);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);
                                                                if "Item No." <> xRec."Item No." then begin
                                                                  DeleteRelations;
                                                                  "Variant Code" := '';
                                                                end;
                                                                if "Item No." = '' then
                                                                  INIT
                                                                else begin
                                                                  ProdOrder.GET(Status,"Prod. Order No.");
                                                                  "Starting Date" := ProdOrder."Starting Date";
                                                                  "Starting Time" := ProdOrder."Starting Time";
                                                                  "Ending Date" := ProdOrder."Ending Date";
                                                                  "Ending Time" := ProdOrder."Ending Time";
                                                                  "Due Date" := ProdOrder."Due Date";
                                                                  "Location Code" := ProdOrder."Location Code";
                                                                  "Bin Code" := ProdOrder."Bin Code";
                                                                  if "Bin Code" = '' then
                                                                    GetDefaultBin;

                                                                  GetItem;
                                                                  Item.TESTFIELD("Inventory Posting Group");
                                                                  "Inventory Posting Group" := Item."Inventory Posting Group";

                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Production BOM No." := Item."Production BOM No.";
                                                                  "Routing No." := Item."Routing No.";

                                                                  "Scrap %" := Item."Scrap %";
                                                                  "Unit Cost" := Item."Unit Cost";
                                                                  "Indirect Cost %" := Item."Indirect Cost %";
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  if "Item No." <> xRec."Item No." then begin
                                                                    VALIDATE("Production BOM No.",Item."Production BOM No.");
                                                                    VALIDATE("Routing No.",Item."Routing No.");
                                                                    VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                  end;
                                                                  if ProdOrder."Source Type" = ProdOrder."Source Type"::Family then
                                                                    "Routing Reference No." := 0
                                                                  else
                                                                    if "Line No." = 0 then
                                                                      "Routing Reference No." := -10000
                                                                    else
                                                                      "Routing Reference No." := "Line No.";
                                                                end;
                                                                if "Item No." <> xRec."Item No." then
                                                                  VALIDATE(Quantity);
                                                                GetUpdateFromSKU;

                                                                CreateDim(DATABASE::Item,"Item No.");
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."),
                                                                                            Code=FIELD("Variant Code"));
                                                   OnValidate=BEGIN
                                                                ReserveProdOrderLine.VerifyChange(Rec,xRec);
                                                                TESTFIELD("Finished Quantity",0);
                                                                CALCFIELDS("Reserved Quantity");
                                                                TESTFIELD("Reserved Quantity",0);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);

                                                                if "Variant Code" = '' then begin
                                                                  VALIDATE("Item No.");
                                                                  exit;
                                                                end;
                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";
                                                                GetUpdateFromSKU;
                                                                GetDefaultBin;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 13  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 14  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                ReserveProdOrderLine.VerifyChange(Rec,xRec);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);
                                                                GetUpdateFromSKU;
                                                                GetDefaultBin;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 21  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 22  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 23  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                          "Item No."=FIELD("Item No."),
                                                                                                                          "Variant Code"=FIELD("Variant Code"))
                                                                                                                          ELSE Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit "WMS Management";
                                                                WhseIntegrationMgt@1001 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                if "Bin Code" <> '' then begin
                                                                  if Quantity < 0 then
                                                                    WMSManagement.FindBinContent("Location Code","Bin Code","Item No.","Variant Code",'')
                                                                  else
                                                                    WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                  WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Prod. Order Line",
                                                                    FIELDCAPTION("Bin Code"),
                                                                    "Location Code",
                                                                    "Bin Code",0);
                                                                  CheckBin;
                                                                end;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit "WMS Management";
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              if Quantity < 0 then
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","Item No.","Variant Code",'',"Bin Code")
                                                              else
                                                                BinCode := WMSManagement.BinLookUp("Location Code","Item No.","Variant Code",'');

                                                              if BinCode <> '' then
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Quantity (Base)" := Quantity * "Qty. per Unit of Measure";
                                                                "Remaining Quantity" := Quantity - "Finished Quantity";
                                                                if "Remaining Quantity" < 0 then
                                                                  "Remaining Quantity" := 0;
                                                                "Remaining Qty. (Base)" := "Remaining Quantity" * "Qty. per Unit of Measure";
                                                                ReserveProdOrderLine.VerifyQuantity(Rec,xRec);
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);

                                                                UpdateProdOrderComp(xRec."Qty. per Unit of Measure");

                                                                if CurrFieldNo <> 0 then
                                                                  VALIDATE("Ending Time");
                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Finished Quantity   ;Decimal       ;CaptionML=ENU=Finished Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 42  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=ENU=Remaining Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 45  ;   ;Scrap %             ;Decimal       ;CaptionML=ENU=Scrap %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 47  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                CheckEndingDate(CurrFieldNo <> 0);
                                                              END;

                                                   CaptionML=ENU=Due Date;
                                                   Editable=false }
    { 48  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                if "Ending Date" < "Starting Date" then
                                                                  "Ending Date" := "Starting Date";

                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 49  ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                if ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") then begin
                                                                  MODIFY;

                                                                  CalcProdOrder.Recalculate(Rec,0,true);

                                                                  GET(Status,"Prod. Order No.","Line No.");
                                                                end;
                                                                if CurrFieldNo <> 0 then
                                                                  VALIDATE("Due Date");

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 50  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 51  ;   ;Ending Time         ;Time          ;OnValidate=BEGIN
                                                                if ProdOrderLine.GET(Status,"Prod. Order No.","Line No.") then begin
                                                                  MODIFY;

                                                                  CalcProdOrder.Recalculate(Rec,1,true);

                                                                  GET(Status,"Prod. Order No.","Line No.");
                                                                end;
                                                                if CurrFieldNo <> 0 then
                                                                  VALIDATE("Due Date");

                                                                UpdateDatetime;
                                                              END;

                                                   CaptionML=ENU=Ending Time }
    { 52  ;   ;Planning Level Code ;Integer       ;CaptionML=ENU=Planning Level Code;
                                                   Editable=false }
    { 53  ;   ;Priority            ;Integer       ;CaptionML=ENU=Priority }
    { 60  ;   ;Production BOM No.  ;Code20        ;TableRelation="Production BOM Header"."No.";
                                                   OnValidate=BEGIN
                                                                "Production BOM Version Code" := '';
                                                                if "Production BOM No." = '' then
                                                                  exit;

                                                                VALIDATE("Production BOM Version Code",VersionMgt.GetBOMVersion("Production BOM No.","Due Date",true));
                                                                if "Production BOM Version Code" = '' then begin
                                                                  ProdBOMHeader.GET("Production BOM No.");
                                                                  ProdBOMHeader.TESTFIELD(Status,ProdBOMHeader.Status::Certified);
                                                                  VALIDATE("Unit of Measure Code",ProdBOMHeader."Unit of Measure Code");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Production BOM No. }
    { 61  ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header"."No.";
                                                   OnValidate=VAR
                                                                CapLedgEntry@1001 : Record "Capacity Ledger Entry";
                                                                PurchLine@1000 : Record "Purchase Line";
                                                              BEGIN
                                                                "Routing Version Code" := '';

                                                                if "Routing No." <> xRec."Routing No." then begin
                                                                  if Status = Status::Released then begin
                                                                    if CheckCapLedgEntry then
                                                                      ERROR(
                                                                        Text99000004Err,
                                                                        FIELDCAPTION("Routing No."),xRec."Routing No.",CapLedgEntry.TABLECAPTION);

                                                                    if CheckSubcontractPurchOrder then
                                                                      ERROR(
                                                                        Text99000004Err,
                                                                        FIELDCAPTION("Routing No."),xRec."Routing No.",PurchLine.TABLECAPTION);
                                                                  end;

                                                                  ProdOrderRtngLine.SETRANGE(Status,Status);
                                                                  ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
                                                                  ProdOrderRtngLine.SETRANGE("Routing No.",xRec."Routing No.");
                                                                  ProdOrderRtngLine.SETRANGE("Routing Reference No.","Line No.");
                                                                  ProdOrderRtngLine.DELETEALL(true);
                                                                end;
                                                                if "Routing No." = '' then
                                                                  exit;

                                                                VALIDATE("Routing Version Code",VersionMgt.GetRtngVersion("Routing No.","Due Date",true));
                                                                if "Routing Version Code" = '' then begin
                                                                  RtngHeader.GET("Routing No.");
                                                                  RtngHeader.TESTFIELD(Status,RtngHeader.Status::Certified);
                                                                  "Routing Type" := RtngHeader.Type;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Routing No. }
    { 62  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group }
    { 63  ;   ;Routing Reference No.;Integer      ;CaptionML=ENU=Routing Reference No.;
                                                   Editable=false }
    { 65  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Item No.");
                                                                GetItem;
                                                                Item.TESTFIELD("Inventory Value Zero",false);
                                                                if Item."Costing Method" = Item."Costing Method"::Standard then begin
                                                                  if CurrFieldNo = FIELDNO("Unit Cost") then
                                                                    ERROR(
                                                                      Text99000002,
                                                                      FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");

                                                                  if GetSKU then
                                                                    "Unit Cost" := SKU."Unit Cost" * "Qty. per Unit of Measure"
                                                                  else
                                                                    "Unit Cost" := Item."Unit Cost" * "Qty. per Unit of Measure";
                                                                end;

                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2 }
    { 67  ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 68  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE ("Source ID"=FIELD("Prod. Order No."),
                                                                                                       "Source Ref. No."=CONST(0),
                                                                                                       "Source Type"=CONST(5406),
                                                                                                       "Source Subtype"=FIELD(Status),
                                                                                                       "Source Batch Name"=CONST(''),
                                                                                                       "Source Prod. Order Line"=FIELD("Line No."),
                                                                                                       "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 70  ;   ;Capacity Type Filter;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Capacity Type Filter;
                                                   OptionCaptionML=ENU=Work Center,Machine Center;
                                                   OptionString="Work Center","Machine Center" }
    { 71  ;   ;Capacity No. Filter ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation=IF ("Capacity Type Filter"=CONST("Work Center")) "Work Center"
                                                                 ELSE IF ("Capacity Type Filter"=CONST("Machine Center")) "Machine Center";
                                                   CaptionML=ENU=Capacity No. Filter }
    { 72  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 80  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                GetItem;
                                                                GetGLSetup;
                                                                WhseValidateSourceLine.ProdOrderLineVerifyChange(Rec,xRec);
                                                                "Unit Cost" := Item."Unit Cost";

                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");

                                                                "Unit Cost" :=
                                                                  ROUND(Item."Unit Cost" * "Qty. per Unit of Measure",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                                "Overhead Rate" :=
                                                                  ROUND(
                                                                    Item."Overhead Rate" * "Qty. per Unit of Measure",
                                                                    GLSetup."Unit-Amount Rounding Precision");

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 81  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                                "Remaining Quantity" := Quantity - "Finished Quantity";

                                                                VALIDATE("Ending Time");

                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 82  ;   ;Finished Qty. (Base);Decimal       ;CaptionML=ENU=Finished Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 83  ;   ;Remaining Qty. (Base);Decimal      ;CaptionML=ENU=Remaining Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 84  ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE ("Source ID"=FIELD("Prod. Order No."),
                                                                                                                "Source Ref. No."=CONST(0),
                                                                                                                "Source Type"=CONST(5406),
                                                                                                                "Source Subtype"=FIELD(Status),
                                                                                                                "Source Batch Name"=CONST(''),
                                                                                                                "Source Prod. Order Line"=FIELD("Line No."),
                                                                                                                "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 90  ;   ;Expected Operation Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE (Status=FIELD(Status),
                                                                                                                                    "Prod. Order No."=FIELD("Prod. Order No."),
                                                                                                                                    "Routing No."=FIELD("Routing No."),
                                                                                                                                    "Routing Reference No."=FIELD("Routing Reference No.")));
                                                   CaptionML=ENU=Expected Operation Cost Amt.;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 91  ;   ;Total Exp. Oper. Output (Qty.);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Line".Quantity WHERE (Status=FIELD(Status),
                                                                                                      "Prod. Order No."=FIELD("Prod. Order No."),
                                                                                                      "Routing No."=FIELD("Routing No."),
                                                                                                      "Routing Reference No."=FIELD("Routing Reference No."),
                                                                                                      "Ending Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Total Exp. Oper. Output (Qty.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 94  ;   ;Expected Component Cost Amt.;Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Component"."Cost Amount" WHERE (Status=FIELD(Status),
                                                                                                                "Prod. Order No."=FIELD("Prod. Order No."),
                                                                                                                "Prod. Order Line No."=FIELD("Line No."),
                                                                                                                "Due Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Expected Component Cost Amt.;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 198 ;   ;Starting Date-Time  ;DateTime      ;OnValidate=BEGIN
                                                                "Starting Date" := DT2DATE("Starting Date-Time");
                                                                "Starting Time" := DT2TIME("Starting Date-Time");
                                                                VALIDATE("Starting Time");
                                                              END;

                                                   CaptionML=ENU=Starting Date-Time }
    { 199 ;   ;Ending Date-Time    ;DateTime      ;OnValidate=BEGIN
                                                                "Ending Date" := DT2DATE("Ending Date-Time");
                                                                "Ending Time" := DT2TIME("Ending Date-Time");
                                                                VALIDATE("Ending Time");
                                                              END;

                                                   CaptionML=ENU=Ending Date-Time }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 5831;   ;Cost Amount (ACY)   ;Decimal       ;CaptionML=ENU=Cost Amount (ACY);
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5832;   ;Unit Cost (ACY)     ;Decimal       ;CaptionML=ENU=Unit Cost (ACY);
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 99000750;;Production BOM Version Code;Code20;TableRelation="Production BOM Version"."Version Code" WHERE ("Production BOM No."=FIELD("Production BOM No."));
                                                   OnValidate=BEGIN
                                                                if "Production BOM Version Code" = '' then
                                                                  exit;

                                                                ProdBOMVersion.GET("Production BOM No.","Production BOM Version Code");
                                                                ProdBOMVersion.TESTFIELD(Status,ProdBOMVersion.Status::Certified);
                                                                VALIDATE("Unit of Measure Code",ProdBOMVersion."Unit of Measure Code");
                                                              END;

                                                   CaptionML=ENU=Production BOM Version Code }
    { 99000751;;Routing Version Code;Code20       ;TableRelation="Routing Version"."Version Code" WHERE ("Routing No."=FIELD("Routing No."));
                                                   OnValidate=BEGIN
                                                                if "Routing Version Code" = '' then
                                                                  exit;

                                                                RtngVersion.GET("Routing No.","Routing Version Code");
                                                                RtngVersion.TESTFIELD(Status,RtngVersion.Status::Certified);
                                                                "Routing Type" := RtngVersion.Type;
                                                              END;

                                                   CaptionML=ENU=Routing Version Code }
    { 99000752;;Routing Type       ;Option        ;CaptionML=ENU=Routing Type;
                                                   OptionCaptionML=ENU=Serial,Parallel;
                                                   OptionString=Serial,Parallel }
    { 99000753;;Qty. per Unit of Measure;Decimal  ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 99000754;;MPS Order          ;Boolean       ;CaptionML=ENU=MPS Order }
    { 99000755;;Planning Flexibility;Option       ;OnValidate=BEGIN
                                                                if "Planning Flexibility" <> xRec."Planning Flexibility" then
                                                                  ReserveProdOrderLine.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=ENU=Planning Flexibility;
                                                   OptionCaptionML=ENU=Unlimited,None;
                                                   OptionString=Unlimited,None }
    { 99000764;;Indirect Cost %    ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5 }
    { 99000765;;Overhead Rate      ;Decimal       ;CaptionML=ENU=Overhead Rate;
                                                   AutoFormatType=2 }
  }
  KEYS
  {
    {    ;Status,"Prod. Order No.","Line No."     ;Clustered=true }
    {    ;"Prod. Order No.","Line No.",Status      }
    {    ;Status,"Item No.","Variant Code","Location Code","Ending Date";
                                                   SumIndexFields="Remaining Qty. (Base)","Cost Amount" }
    {    ;Status,"Item No.","Variant Code","Location Code","Starting Date";
                                                   SumIndexFields="Remaining Qty. (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;Status,"Item No.","Variant Code","Location Code","Due Date";
                                                   SumIndexFields="Remaining Qty. (Base)";
                                                   MaintainSIFTIndex=false }
    { false;Status,"Item No.","Variant Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code","Location Code","Due Date";
                                                   SumIndexFields="Remaining Qty. (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;Status,"Prod. Order No.","Item No."      }
    {    ;Status,"Prod. Order No.","Routing No.","Routing Reference No.";
                                                   SumIndexFields=Quantity,"Finished Quantity";
                                                   MaintainSIFTIndex=false }
    {    ;Status,"Prod. Order No.","Planning Level Code" }
    { false;"Planning Level Code",Priority         }
    {    ;"Item No.","Variant Code","Location Code",Status,"Ending Date";
                                                   SumIndexFields="Remaining Qty. (Base)";
                                                   MaintainSIFTIndex=false }
    {    ;"Item No.","Variant Code","Location Code",Status,"Due Date";
                                                   SumIndexFields="Remaining Qty. (Base)";
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1034 : TextConst 'ENU=A %1 %2 cannot be inserted, modified, or deleted.';
      Text99000000@1000 : TextConst '@@@="%1 = Table Caption; %2 = Field Value; %3 = Table Caption";ENU=You cannot delete %1 %2 because there is at least one %3 associated with it.';
      Text99000001@1001 : TextConst 'ENU=You cannot rename a %1.';
      Text99000002@1002 : TextConst 'ENU=You cannot change %1 when %2 is %3.';
      Text99000004Err@1003 : TextConst '@@@="%1 = Field Caption; %2 = Field Value; %3 = Table Caption";ENU=You cannot modify %1 %2 because there is at least one %3 associated with it.';
      Item@1004 : Record Item;
      SKU@1021 : Record "Stockkeeping Unit";
      ItemVariant@1005 : Record "Item Variant";
      ReservEntry@1006 : Record "Reservation Entry";
      ProdBOMHeader@1007 : Record "Production BOM Header";
      ProdBOMVersion@1008 : Record "Production BOM Version";
      RtngHeader@1009 : Record "Routing Header";
      RtngVersion@1010 : Record "Routing Version";
      ProdOrder@1011 : Record "Production Order";
      ProdOrderLine@1012 : Record "Prod. Order Line";
      ProdOrderComp@1013 : Record "Prod. Order Component";
      ProdOrderRtngLine@1014 : Record "Prod. Order Routing Line";
      GLSetup@1031 : Record "General Ledger Setup";
      Location@1022 : Record Location;
      ReservEngineMgt@1016 : Codeunit "Reservation Engine Mgt.";
      ReserveProdOrderLine@1017 : Codeunit "Prod. Order Line-Reserve";
      WhseValidateSourceLine@1030 : Codeunit "Whse. Validate Source Line";
      UOMMgt@1018 : Codeunit "Unit of Measure Management";
      VersionMgt@1019 : Codeunit VersionManagement;
      CalcProdOrder@1020 : Codeunit "Calculate Prod. Order";
      DimMgt@1023 : Codeunit DimensionManagement;
      Reservation@1026 : Page Reservation;
      Blocked@1032 : Boolean;
      GLSetupRead@1033 : Boolean;
      IgnoreErrors@1015 : Boolean;
      ErrorOccured@1024 : Boolean;
      CalledFromComponent@1025 : Boolean;

    [External]
    PROCEDURE DeleteRelations@1();
    VAR
      WhseOutputProdRelease@1000 : Codeunit "Whse.-Output Prod. Release";
    BEGIN
      ProdOrderLine.SETRANGE(Status,Status);
      ProdOrderLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderLine.SETRANGE("Routing No.","Routing No.");
      ProdOrderLine.SETFILTER("Line No.",'<>%1',"Line No.");
      ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      if not ProdOrderLine.FINDFIRST then begin
        ProdOrderRtngLine.SETRANGE(Status,Status);
        ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
        ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");
        ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
        if ProdOrderRtngLine.FINDSET(true) then
          repeat
            ProdOrderRtngLine.SetSkipUpdateOfCompBinCodes(true);
            ProdOrderRtngLine.DELETE(true);
          until ProdOrderRtngLine.NEXT = 0;
      end;

      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
      ProdOrderComp.DELETEALL(true);

      if not CalledFromComponent then begin
        ProdOrderComp.SETRANGE("Prod. Order Line No.");
        ProdOrderComp.SETRANGE("Supplied-by Line No.","Line No.");
        if ProdOrderComp.FIND('-') then
          repeat
            ProdOrderComp."Supplied-by Line No." := 0;
            ProdOrderComp."Planning Level Code" -= 1;
            ProdOrderComp.MODIFY;
          until ProdOrderComp.NEXT = 0;
      end;

      WhseOutputProdRelease.DeleteLine(Rec);
    END;

    [External]
    PROCEDURE ShowReservation@8();
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      Reservation.SetProdOrderLine(Rec);
      Reservation.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    BEGIN
      TESTFIELD("Item No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,true);
      ReserveProdOrderLine.FilterReservFor(ReservEntry,Rec);
      if Modal then
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      else
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    [External]
    PROCEDURE CheckEndingDate@4(ShowWarning@1000 : Boolean);
    VAR
      CheckDateConflict@1001 : Codeunit "Reservation-Check Date Confl.";
    BEGIN
      if not Blocked then begin
        CheckDateConflict.ProdOrderLineCheck(Rec,ShowWarning);
        ReserveProdOrderLine.AssignForPlanning(Rec);
      end;
    END;

    [External]
    PROCEDURE BlockDynamicTracking@17(SetBlock@1000 : Boolean);
    BEGIN
      Blocked := SetBlock;
      ReserveProdOrderLine.Block(Blocked);
      CalcProdOrder.BlockDynamicTracking(Blocked);
    END;

    LOCAL PROCEDURE CreateDim@6(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,'',
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",ProdOrder."Dimension Set ID",DATABASE::Item);
    END;

    [External]
    PROCEDURE IsInbound@15() : Boolean;
    BEGIN
      exit("Quantity (Base)" > 0);
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    BEGIN
      ReserveProdOrderLine.CallItemTracking(Rec);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@7(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      OldDimSetID@1002 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        if ProdOrderCompExist then
          UpdateProdOrderCompDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@9(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@10(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    LOCAL PROCEDURE GetItem@5();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      if (SKU."Location Code" = "Location Code") and
         (SKU."Item No." = "Item No.") and
         (SKU."Variant Code" = "Variant Code")
      then
        exit(true);
      exit(SKU.GET("Location Code","Item No.","Variant Code"));
    END;

    LOCAL PROCEDURE GetUpdateFromSKU@12();
    BEGIN
      GetItem;
      if GetSKU then
        "Unit Cost" := SKU."Unit Cost"
      else
        "Unit Cost" := Item."Unit Cost";
    END;

    [External]
    PROCEDURE UpdateDatetime@11();
    BEGIN
      if ("Starting Date" <> 0D) and ("Starting Time" <> 000000T) then
        "Starting Date-Time" := CREATEDATETIME("Starting Date","Starting Time")
      else
        "Starting Date-Time" := 0DT;

      if ("Ending Date" <> 0D) and ("Ending Time" <> 000000T) then
        "Ending Date-Time" := CREATEDATETIME("Ending Date","Ending Time")
      else
        "Ending Date-Time" := 0DT;
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    VAR
      OldDimSetID@1000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',Status,"Prod. Order No.","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      if OldDimSetID <> "Dimension Set ID" then begin
        MODIFY;
        if ProdOrderCompExist then
          UpdateProdOrderCompDim("Dimension Set ID",OldDimSetID);
      end;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE GetCurrencyCode@13() : Code[10];
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
      end;
      exit(GLSetup."Additional Reporting Currency");
    END;

    [External]
    PROCEDURE RowID1@44() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
    BEGIN
      exit(
        ItemTrackingMgt.ComposeRowID(DATABASE::"Prod. Order Line",Status,
          "Prod. Order No.",'',"Line No.",0));
    END;

    LOCAL PROCEDURE GetLocation@7300(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetDefaultBin@50();
    VAR
      WMSManagement@1000 : Codeunit "WMS Management";
    BEGIN
      if (Quantity * xRec.Quantity > 0) and
         ("Item No." = xRec."Item No.") and
         ("Location Code" = xRec."Location Code") and
         ("Variant Code" = xRec."Variant Code")
      then
        exit;

      "Bin Code" := '';
      if ("Location Code" <> '') and ("Item No." <> '') then begin
        "Bin Code" := WMSManagement.GetLastOperationFromBinCode("Routing No.","Routing Version Code","Location Code",false,0);
        GetLocation("Location Code");
        if "Bin Code" = '' then
          "Bin Code" := Location."From-Production Bin Code";
        if ("Bin Code" = '') and Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
          WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
      end;
      VALIDATE("Bin Code");
    END;

    LOCAL PROCEDURE CheckBin@3();
    VAR
      BinContent@1000 : Record "Bin Content";
      Bin@1001 : Record Bin;
    BEGIN
      if "Bin Code" <> '' then begin
        GetLocation("Location Code");
        if not Location."Directed Put-away and Pick" then
          exit;

        if BinContent.GET(
             "Location Code","Bin Code",
             "Item No.","Variant Code","Unit of Measure Code")
        then begin
          if not BinContent.CheckWhseClass(IgnoreErrors) then
            ErrorOccured := true;
        end else begin
          Bin.GET("Location Code","Bin Code");
          if not Bin.CheckWhseClass("Item No.",IgnoreErrors) then
            ErrorOccured := true;
        end;
      end;
      if ErrorOccured then
        "Bin Code" := '';
    END;

    [External]
    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record Item;IncludeFirmPlanned@1001 : Boolean);
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.","Variant Code","Location Code",Status,"Due Date");
      if IncludeFirmPlanned then
        SETRANGE(Status,Status::Planned,Status::Released)
      else
        SETFILTER(Status,'%1|%2',Status::Planned,Status::Released);
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Remaining Qty. (Base)",'<>0');
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record Item;IncludeFirmPlanned@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IncludeFirmPlanned);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record Item;IncludeFirmPlanned@1001 : Boolean) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,IncludeFirmPlanned);
      exit(not ISEMPTY);
    END;

    [External]
    PROCEDURE SetIgnoreErrors@16();
    BEGIN
      IgnoreErrors := true;
    END;

    [External]
    PROCEDURE SetCalledFromComponent@2(NewCalledFromComponent@1000 : Boolean);
    BEGIN
      CalledFromComponent := NewCalledFromComponent;
    END;

    [External]
    PROCEDURE HasErrorOccured@18() : Boolean;
    BEGIN
      exit(ErrorOccured);
    END;

    [External]
    PROCEDURE UpdateProdOrderComp@19(QtyPerUnitOfMeasure@1000 : Decimal);
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
    BEGIN
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
      if ProdOrderComp.FIND('-') then
        repeat
          if QtyPerUnitOfMeasure <> 0 then
            ProdOrderComp.VALIDATE(
              "Quantity per",
              ProdOrderComp."Quantity per" * "Qty. per Unit of Measure" /
              QtyPerUnitOfMeasure)
          else
            ProdOrderComp.VALIDATE("Quantity per","Qty. per Unit of Measure" );
          ProdOrderComp.MODIFY;
        until ProdOrderComp.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckCapLedgEntry@1002() : Boolean;
    VAR
      CapLedgEntry@1001 : Record "Capacity Ledger Entry";
    BEGIN
      CapLedgEntry.SETCURRENTKEY("Order Type","Order No.","Order Line No.");
      CapLedgEntry.SETRANGE("Order Type",CapLedgEntry."Order Type"::Production);
      CapLedgEntry.SETRANGE("Order No.","Prod. Order No.");
      CapLedgEntry.SETRANGE("Order Line No.","Line No.");

      exit(not CapLedgEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE CheckSubcontractPurchOrder@1003() : Boolean;
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      PurchLine.SETCURRENTKEY(
        "Document Type",Type,"Prod. Order No.","Prod. Order Line No.","Routing No.","Operation No.");
      PurchLine.SETRANGE("Document Type",PurchLine."Document Type"::Order);
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      PurchLine.SETRANGE("Prod. Order Line No.","Line No.");

      exit(not PurchLine.ISEMPTY);
    END;

    LOCAL PROCEDURE ProdOrderCompExist@22() : Boolean;
    VAR
      ProdOrderComp@1000 : Record "Prod. Order Component";
    BEGIN
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
      exit(not ProdOrderComp.ISEMPTY);
    END;

    [External]
    PROCEDURE UpdateProdOrderCompDim@26(NewDimSetID@1000 : Integer;OldDimSetID@1001 : Integer);
    VAR
      NewCompDimSetID@1002 : Integer;
    BEGIN
      if NewDimSetID = OldDimSetID then
        exit;

      ProdOrderComp.RESET;
      ProdOrderComp.SETRANGE(Status,Status);
      ProdOrderComp.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderComp.SETRANGE("Prod. Order Line No.","Line No.");
      ProdOrderComp.LOCKTABLE;
      if ProdOrderComp.FINDSET then
        repeat
          NewCompDimSetID := DimMgt.GetDeltaDimSetID(ProdOrderComp."Dimension Set ID",NewDimSetID,OldDimSetID);
          if ProdOrderComp."Dimension Set ID" <> NewCompDimSetID then begin
            ProdOrderComp."Dimension Set ID" := NewCompDimSetID;
            DimMgt.UpdateGlobalDimFromDimSetID(
              ProdOrderComp."Dimension Set ID",ProdOrderComp."Shortcut Dimension 1 Code",ProdOrderComp."Shortcut Dimension 2 Code");
            ProdOrderComp.MODIFY;
          end;
        until ProdOrderComp.NEXT = 0;
    END;

    [External]
    PROCEDURE ShowRouting@20();
    VAR
      ProdOrderRtngLine@1000 : Record "Prod. Order Routing Line";
    BEGIN
      ProdOrderRtngLine.SETRANGE(Status,Status);
      ProdOrderRtngLine.SETRANGE("Prod. Order No.","Prod. Order No.");
      ProdOrderRtngLine.SETRANGE("Routing Reference No.","Routing Reference No.");
      ProdOrderRtngLine.SETRANGE("Routing No.","Routing No.");

      PAGE.RUNMODAL(PAGE::"Prod. Order Routing",ProdOrderRtngLine);
      CalcProdOrder.FindAndSetProdOrderLineBinCodeFromProdRtngLines(Status,"Prod. Order No.","Line No.");
    END;

    [External]
    PROCEDURE SetFilterByReleasedOrderNo@27(OrderNo@1000 : Code[20]);
    BEGIN
      RESET;
      SETCURRENTKEY(Status,"Prod. Order No.","Line No.","Item No.");
      SETRANGE(Status,Status::Released);
      SETRANGE("Prod. Order No.",OrderNo);
    END;

    [External]
    PROCEDURE TestItemFields@61(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      TESTFIELD("Item No.",ItemNo);
      TESTFIELD("Variant Code",VariantCode);
      TESTFIELD("Location Code",LocationCode);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR ProdOrderLine@1000 : Record "Prod. Order Line";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

