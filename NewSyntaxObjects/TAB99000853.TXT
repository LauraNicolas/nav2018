OBJECT Table 99000853 Inventory Profile
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Inventory Profile;
  }
  FIELDS
  {
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 4   ;   ;Attribute Priority  ;Integer       ;CaptionML=ENU=Attribute Priority }
    { 5   ;   ;Order Priority      ;Integer       ;CaptionML=ENU=Order Priority }
    { 11  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."),
                                                                                            Code=FIELD("Variant Code"));
                                                   CaptionML=ENU=Variant Code }
    { 13  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 14  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   CaptionML=ENU=Bin Code }
    { 15  ;   ;IsSupply            ;Boolean       ;CaptionML=ENU=IsSupply }
    { 16  ;   ;Order Relation      ;Option        ;CaptionML=ENU=Order Relation;
                                                   OptionCaptionML=ENU=Normal,Safety Stock,Reorder Point;
                                                   OptionString=Normal,"Safety Stock","Reorder Point" }
    { 21  ;   ;Source Type         ;Integer       ;CaptionML=ENU=Source Type }
    { 22  ;   ;Source Order Status ;Integer       ;CaptionML=ENU=Source Order Status }
    { 23  ;   ;Source ID           ;Code20        ;CaptionML=ENU=Source ID }
    { 24  ;   ;Source Batch Name   ;Code10        ;CaptionML=ENU=Source Batch Name }
    { 25  ;   ;Source Ref. No.     ;Integer       ;CaptionML=ENU=Source Ref. No. }
    { 26  ;   ;Source Prod. Order Line;Integer    ;CaptionML=ENU=Source Prod. Order Line }
    { 27  ;   ;Primary Order Status;Integer       ;CaptionML=ENU=Primary Order Status }
    { 28  ;   ;Primary Order No.   ;Code20        ;CaptionML=ENU=Primary Order No. }
    { 29  ;   ;Primary Order Line  ;Integer       ;CaptionML=ENU=Primary Order Line }
    { 30  ;   ;Primary Order Type  ;Integer       ;CaptionML=ENU=Primary Order Type }
    { 31  ;   ;Original Quantity   ;Decimal       ;CaptionML=ENU=Original Quantity;
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Remaining Quantity (Base);Decimal  ;CaptionML=ENU=Remaining Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 33  ;   ;Untracked Quantity  ;Decimal       ;CaptionML=ENU=Untracked Quantity;
                                                   DecimalPlaces=0:5 }
    { 34  ;   ;Original Due Date   ;Date          ;CaptionML=ENU=Original Due Date }
    { 35  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 36  ;   ;Planning Flexibility;Option        ;CaptionML=ENU=Planning Flexibility;
                                                   OptionCaptionML=ENU=Unlimited,None,Reduce Only;
                                                   OptionString=Unlimited,None,"Reduce Only" }
    { 37  ;   ;Fixed Date          ;Date          ;CaptionML=ENU=Fixed Date }
    { 38  ;   ;Action Message      ;Option        ;CaptionML=ENU=Action Message;
                                                   OptionCaptionML=ENU=" ,New,Change Qty.,Reschedule,Resched.& Chg. Qty.,Cancel";
                                                   OptionString=" ",New,"Change Qty.",Reschedule,"Resched.& Chg. Qty.",Cancel }
    { 39  ;   ;Binding             ;Option        ;CaptionML=ENU=Binding;
                                                   OptionCaptionML=ENU=" ,Order-to-Order";
                                                   OptionString=" ","Order-to-Order";
                                                   Editable=false }
    { 40  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 41  ;   ;Min. Quantity       ;Decimal       ;CaptionML=ENU=Min. Quantity;
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Starting Date       ;Date          ;CaptionML=ENU=Starting Date }
    { 43  ;   ;Planning Line No.   ;Integer       ;CaptionML=ENU=Planning Line No. }
    { 44  ;   ;Unit of Measure Code;Code10        ;CaptionML=ENU=Unit of Measure Code }
    { 45  ;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5 }
    { 46  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 47  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=ENU=Remaining Quantity;
                                                   DecimalPlaces=0:5 }
    { 48  ;   ;Finished Quantity   ;Decimal       ;CaptionML=ENU=Finished Quantity;
                                                   DecimalPlaces=0:5 }
    { 50  ;   ;Planning Level Code ;Integer       ;CaptionML=ENU=Planning Level Code;
                                                   Editable=false }
    { 51  ;   ;Planning Line Phase ;Option        ;CaptionML=ENU=Planning Line Phase;
                                                   OptionCaptionML=ENU=" ,Line Created,Routing Created,Exploded";
                                                   OptionString=" ","Line Created","Routing Created",Exploded }
    { 52  ;   ;Due Time            ;Time          ;CaptionML=ENU=Due Time }
    { 53  ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=ENU=Sell-to Customer No. }
    { 54  ;   ;Drop Shipment       ;Boolean       ;AccessByPermission=TableData "Drop Shpt. Post. Buffer"=R;
                                                   CaptionML=ENU=Drop Shipment }
    { 55  ;   ;Special Order       ;Boolean       ;CaptionML=ENU=Special Order }
    { 56  ;   ;Ref. Order No.      ;Code20        ;CaptionML=ENU=Ref. Order No.;
                                                   Editable=false }
    { 57  ;   ;Ref. Line No.       ;Integer       ;CaptionML=ENU=Ref. Line No.;
                                                   BlankZero=true;
                                                   Editable=false }
    { 58  ;   ;Derived from Blanket Order;Boolean ;CaptionML=ENU=Derived from Blanket Order }
    { 59  ;   ;Ref. Blanket Order No.;Code20      ;CaptionML=ENU=Ref. Blanket Order No. }
    { 60  ;   ;Tracking Reference  ;Integer       ;CaptionML=ENU=Tracking Reference }
    { 61  ;   ;Lot No.             ;Code20        ;CaptionML=ENU=Lot No. }
    { 62  ;   ;Serial No.          ;Code20        ;CaptionML=ENU=Serial No. }
    { 63  ;   ;Max. Quantity       ;Decimal       ;CaptionML=ENU=Max. Quantity;
                                                   DecimalPlaces=0:5 }
    { 64  ;   ;Safety Stock Quantity;Decimal      ;CaptionML=ENU=Safety Stock Quantity;
                                                   DecimalPlaces=0:5 }
    { 65  ;   ;Is Exception Order  ;Boolean       ;CaptionML=ENU=Is Exception Order }
    { 66  ;   ;Transfer Location Not Planned;Boolean;
                                                   CaptionML=ENU=Transfer Location Not Planned }
    { 67  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date;
                                                   Editable=false }
    { 68  ;   ;Ref. Order Type     ;Option        ;CaptionML=ENU=Ref. Order Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Prod. Order,Transfer,Assembly";
                                                   OptionString=" ",Purchase,"Prod. Order",Transfer,Assembly;
                                                   Editable=false }
    { 69  ;   ;Disallow Cancellation;Boolean      ;CaptionML=ENU=Disallow Cancellation }
    { 70  ;   ;MPS Order           ;Boolean       ;CaptionML=ENU=MPS Order }
  }
  KEYS
  {
    {    ;"Line No."                              ;Clustered=true }
    {    ;"Item No.","Variant Code","Location Code","Due Date","Attribute Priority","Order Priority" }
    {    ;"Item No.","Variant Code","Location Code",IsSupply,"Primary Order Status","Primary Order No.","Due Date","Order Priority" }
    {    ;"Source Type","Source Order Status","Source ID","Source Batch Name","Source Ref. No.","Source Prod. Order Line",IsSupply,"Due Date" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Tab99000853, TransferToTrackingEntry: Illegal Source Type: %1.';

    [External]
    PROCEDURE TransferFromItemLedgerEntry@1(VAR ItemLedgerEntry@1000 : Record "Item Ledger Entry";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReserveItemLedgerEntry@1002 : Codeunit "Item Ledger Entry-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      "Source Type" := DATABASE::"Item Ledger Entry";
      "Source Ref. No." := ItemLedgerEntry."Entry No.";
      "Item No." := ItemLedgerEntry."Item No.";
      "Variant Code" := ItemLedgerEntry."Variant Code";
      "Location Code" := ItemLedgerEntry."Location Code";
      Quantity := ItemLedgerEntry.Quantity;
      "Remaining Quantity" := ItemLedgerEntry."Remaining Quantity";
      "Finished Quantity" := Quantity - "Remaining Quantity";
      "Quantity (Base)" := ItemLedgerEntry.Quantity;
      "Remaining Quantity (Base)" := ItemLedgerEntry."Remaining Quantity";
      ItemLedgerEntry.CALCFIELDS("Reserved Quantity");
      ReserveItemLedgerEntry.FilterReservFor(ReservEntry,ItemLedgerEntry);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" := ItemLedgerEntry."Remaining Quantity" - ItemLedgerEntry."Reserved Quantity" + AutoReservedQty;
      "Unit of Measure Code" := ItemLedgerEntry."Unit of Measure Code";
      "Qty. per Unit of Measure" := 1;
      IsSupply := ItemLedgerEntry.Positive;
      "Due Date" := ItemLedgerEntry."Posting Date";
      "Lot No." := ItemLedgerEntry."Lot No.";
      "Serial No." := ItemLedgerEntry."Serial No.";
      if TrackingExists then
        "Tracking Reference" := "Line No.";
      "Planning Flexibility" := "Planning Flexibility"::None;
    END;

    [External]
    PROCEDURE TransferFromSalesLine@2(VAR SalesLine@1000 : Record "Sales Line";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReserveSalesLine@1002 : Codeunit "Sales Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
      SetSource(DATABASE::"Sales Line",SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.",'',0);
      "Item No." := SalesLine."No.";
      "Variant Code" := SalesLine."Variant Code";
      "Location Code" := SalesLine."Location Code";
      "Bin Code" := SalesLine."Bin Code";
      SalesLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveSalesLine.FilterReservFor(ReservEntry,SalesLine);
      AutoReservedQty := -TransferBindings(ReservEntry,TrackingEntry);
      if SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" then begin
        SalesLine."Reserved Qty. (Base)" := -SalesLine."Reserved Qty. (Base)";
        AutoReservedQty := -AutoReservedQty;
      end;
      "Untracked Quantity" := SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)" + AutoReservedQty;
      Quantity := SalesLine.Quantity;
      "Remaining Quantity" := SalesLine."Outstanding Quantity";
      "Finished Quantity" := SalesLine."Quantity Shipped";
      "Quantity (Base)" := SalesLine."Quantity (Base)";
      "Remaining Quantity (Base)" := SalesLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := SalesLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := SalesLine."Qty. per Unit of Measure";
      if SalesLine."Document Type" = SalesLine."Document Type"::"Return Order" then
        ChangeSign;
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := SalesLine."Shipment Date";
      "Planning Flexibility" := "Planning Flexibility"::None;
      if SalesLine."Blanket Order No." <> '' then begin
        "Sell-to Customer No." := SalesLine."Sell-to Customer No.";
        "Derived from Blanket Order" := true;
        "Ref. Blanket Order No." := SalesLine."Blanket Order No.";
      end;
      "Drop Shipment" := SalesLine."Drop Shipment";
      "Special Order" := SalesLine."Special Order";
    END;

    [External]
    PROCEDURE TransferFromComponent@7(VAR ProdOrderComp@1000 : Record "Prod. Order Component";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReserveProdOrderComp@1002 : Codeunit "Prod. Order Comp.-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      SetSource(
        DATABASE::"Prod. Order Component",ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",
        ProdOrderComp."Line No.",'',ProdOrderComp."Prod. Order Line No.");
      "Ref. Order Type" := "Ref. Order Type"::"Prod. Order";
      "Ref. Order No." := ProdOrderComp."Prod. Order No.";
      "Ref. Line No." := ProdOrderComp."Prod. Order Line No.";
      "Item No." := ProdOrderComp."Item No.";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Location Code" := ProdOrderComp."Location Code";
      "Bin Code" := ProdOrderComp."Bin Code";
      "Due Date" := ProdOrderComp."Due Date";
      "Due Time" := ProdOrderComp."Due Time";
      "Planning Flexibility" := "Planning Flexibility"::None;
      "Planning Level Code" := ProdOrderComp."Planning Level Code";
      ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
      if ProdOrderComp.Status in [ProdOrderComp.Status::Released,ProdOrderComp.Status::Finished] then
        ProdOrderComp.CALCFIELDS("Act. Consumption (Qty)");
      ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
      AutoReservedQty := -TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" := ProdOrderComp."Remaining Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)" + AutoReservedQty;
      Quantity := ProdOrderComp."Expected Quantity";
      "Remaining Quantity" := ProdOrderComp."Remaining Quantity";
      "Finished Quantity" := ProdOrderComp."Act. Consumption (Qty)";
      "Quantity (Base)" := ProdOrderComp."Expected Qty. (Base)";
      "Remaining Quantity (Base)" := ProdOrderComp."Remaining Qty. (Base)";
      "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
      "Qty. per Unit of Measure" := ProdOrderComp."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
    END;

    [External]
    PROCEDURE TransferFromPlanComponent@8(VAR PlanComponent@1000 : Record "Planning Component";VAR TrackingEntry@1008 : Record "Reservation Entry");
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
      AsmLine@1009 : Record "Assembly Line";
      ReservEntry@1002 : Record "Reservation Entry";
      ReservePlanningComponent@1003 : Codeunit "Plng. Component-Reserve";
      ReserveProdOrderComp@1004 : Codeunit "Prod. Order Comp.-Reserve";
      AsmLineReserve@1007 : Codeunit "Assembly Line-Reserve";
      ReservedQty@1005 : Decimal;
      AutoReservedQty@1006 : Decimal;
    BEGIN
      SetSource(
        DATABASE::"Planning Component",0,PlanComponent."Worksheet Template Name",PlanComponent."Line No.",
        PlanComponent."Worksheet Batch Name",PlanComponent."Worksheet Line No.");
      "Ref. Order Type" := PlanComponent."Ref. Order Type";
      "Ref. Order No." := PlanComponent."Ref. Order No.";
      "Ref. Line No." := PlanComponent."Ref. Order Line No.";
      "Item No." := PlanComponent."Item No.";
      "Variant Code" := PlanComponent."Variant Code";
      "Location Code" := PlanComponent."Location Code";
      "Bin Code" := PlanComponent."Bin Code";
      "Due Date" := PlanComponent."Due Date";
      "Due Time" := PlanComponent."Due Time";
      "Planning Flexibility" := "Planning Flexibility"::None;
      "Planning Level Code" := PlanComponent."Planning Level Code";
      ReservePlanningComponent.FilterReservFor(ReservEntry,PlanComponent);
      AutoReservedQty := -TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" := PlanComponent."Expected Quantity (Base)" - PlanComponent."Reserved Qty. (Base)" + AutoReservedQty;
      case PlanComponent."Ref. Order Type" of
        PlanComponent."Ref. Order Type"::"Prod. Order":
          if ProdOrderComp.GET(
               PlanComponent."Ref. Order Status",
               PlanComponent."Ref. Order No.",
               PlanComponent."Ref. Order Line No.",
               PlanComponent."Line No.")
          then begin
            "Original Quantity" := ProdOrderComp."Expected Quantity";
            ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
            if ProdOrderComp."Reserved Qty. (Base)" > 0 then begin
              ReservedQty := ProdOrderComp."Reserved Qty. (Base)";
              ReserveProdOrderComp.FilterReservFor(ReservEntry,ProdOrderComp);
              CalcReservedQty(ReservEntry,ReservedQty);
              if ReservedQty > "Untracked Quantity" then
                "Untracked Quantity" := 0
              else
                "Untracked Quantity" := "Untracked Quantity" - ReservedQty;
            end;
          end else begin
            "Primary Order Type" := DATABASE::"Planning Component";
            "Primary Order Status" := PlanComponent."Ref. Order Status";
            "Primary Order No." := PlanComponent."Ref. Order No.";
          end;
        PlanComponent."Ref. Order Type"::Assembly:
          if AsmLine.GET(
               PlanComponent."Ref. Order Status",
               PlanComponent."Ref. Order No.",
               PlanComponent."Ref. Order Line No.")
          then begin
            "Original Quantity" := AsmLine.Quantity;
            AsmLine.CALCFIELDS("Reserved Qty. (Base)");
            if AsmLine."Reserved Qty. (Base)" > 0 then begin
              ReservedQty := AsmLine."Reserved Qty. (Base)";
              AsmLineReserve.FilterReservFor(ReservEntry,AsmLine);
              CalcReservedQty(ReservEntry,ReservedQty);
              if ReservedQty > "Untracked Quantity" then
                "Untracked Quantity" := 0
              else
                "Untracked Quantity" := "Untracked Quantity" - ReservedQty;
            end;
          end else begin
            "Primary Order Type" := DATABASE::"Planning Component";
            "Primary Order Status" := PlanComponent."Ref. Order Status";
            "Primary Order No." := PlanComponent."Ref. Order No.";
          end;
      end;
      Quantity := PlanComponent."Expected Quantity";
      "Remaining Quantity" := PlanComponent."Expected Quantity";
      "Finished Quantity" := 0;
      "Quantity (Base)" := PlanComponent."Expected Quantity (Base)";
      "Remaining Quantity (Base)" := PlanComponent."Expected Quantity (Base)";
      "Unit of Measure Code" := PlanComponent."Unit of Measure Code";
      "Qty. per Unit of Measure" := PlanComponent."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
    END;

    LOCAL PROCEDURE CalcReservedQty@20(VAR ReservEntry@1000 : Record "Reservation Entry";VAR ReservedQty@1002 : Decimal);
    VAR
      OppositeReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line",
        "Reservation Status");
      ReservEntry.SETRANGE("Reservation Status",ReservEntry."Reservation Status"::Reservation);
      ReservEntry.SETRANGE(Binding,ReservEntry.Binding::"Order-to-Order");
      if ReservEntry.FIND('-') then begin
        // Retrieving information about primary order:
        if ReservEntry.Positive then
          OppositeReservEntry.GET(ReservEntry."Entry No.",not ReservEntry.Positive)
        else
          OppositeReservEntry := ReservEntry;
        if "Primary Order No." = '' then begin
          "Primary Order Type" := OppositeReservEntry."Source Type";
          "Primary Order Status" := OppositeReservEntry."Source Subtype";
          "Primary Order No." := OppositeReservEntry."Source ID";
        end;

        Binding := ReservEntry.Binding;
        repeat
          ReservedQty := ReservedQty + ReservEntry."Quantity (Base)";
        until ReservEntry.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE TransferFromPurchaseLine@3(VAR PurchaseLine@1000 : Record "Purchase Line";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReservePurchLine@1002 : Codeunit "Purch. Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      PurchaseLine.TESTFIELD(Type,PurchaseLine.Type::Item);
      SetSource(DATABASE::"Purchase Line",PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.",'',0);
      "Item No." := PurchaseLine."No.";
      "Variant Code" := PurchaseLine."Variant Code";
      "Location Code" := PurchaseLine."Location Code";
      "Bin Code" := PurchaseLine."Bin Code";
      ReservePurchLine.FilterReservFor(ReservEntry,PurchaseLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      PurchaseLine.CALCFIELDS("Reserved Qty. (Base)");
      if PurchaseLine."Document Type" = PurchaseLine."Document Type"::"Return Order" then begin
        AutoReservedQty := -AutoReservedQty;
        PurchaseLine."Reserved Qty. (Base)" := -PurchaseLine."Reserved Qty. (Base)";
      end;
      "Untracked Quantity" := PurchaseLine."Outstanding Qty. (Base)" - PurchaseLine."Reserved Qty. (Base)" + AutoReservedQty;
      "Min. Quantity" := PurchaseLine."Reserved Qty. (Base)" - AutoReservedQty;
      Quantity := PurchaseLine.Quantity;
      "Remaining Quantity" := PurchaseLine."Outstanding Quantity";
      "Finished Quantity" := PurchaseLine."Quantity Received";
      "Quantity (Base)" := PurchaseLine."Quantity (Base)";
      "Remaining Quantity (Base)" := PurchaseLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := PurchaseLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := PurchaseLine."Qty. per Unit of Measure";
      if PurchaseLine."Document Type" = PurchaseLine."Document Type"::"Return Order" then begin
        ChangeSign;
        "Planning Flexibility" := "Planning Flexibility"::None;
      end else
        "Planning Flexibility" := PurchaseLine."Planning Flexibility";
      IsSupply := "Untracked Quantity" >= 0;
      "Due Date" := PurchaseLine."Expected Receipt Date";
      "Drop Shipment" := PurchaseLine."Drop Shipment";
      "Special Order" := PurchaseLine."Special Order";
    END;

    [External]
    PROCEDURE TransferFromProdOrderLine@4(VAR ProdOrderLine@1000 : Record "Prod. Order Line";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReserveProdOrderLine@1002 : Codeunit "Prod. Order Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      SetSource(DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",0,'',ProdOrderLine."Line No.");
      "Item No." := ProdOrderLine."Item No.";
      "Variant Code" := ProdOrderLine."Variant Code";
      "Location Code" := ProdOrderLine."Location Code";
      "Bin Code" := ProdOrderLine."Bin Code";
      "Due Date" := ProdOrderLine."Due Date";
      "Starting Date" := ProdOrderLine."Starting Date";
      "Planning Flexibility" := ProdOrderLine."Planning Flexibility";
      "Planning Level Code" := ProdOrderLine."Planning Level Code";
      ProdOrderLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveProdOrderLine.FilterReservFor(ReservEntry,ProdOrderLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" := ProdOrderLine."Remaining Qty. (Base)" - ProdOrderLine."Reserved Qty. (Base)" + AutoReservedQty;
      "Min. Quantity" := ProdOrderLine."Reserved Qty. (Base)" - AutoReservedQty;
      Quantity := ProdOrderLine.Quantity;
      "Remaining Quantity" := ProdOrderLine."Remaining Quantity";
      "Finished Quantity" := ProdOrderLine."Finished Quantity";
      "Quantity (Base)" := ProdOrderLine."Quantity (Base)";
      "Remaining Quantity (Base)" := ProdOrderLine."Remaining Qty. (Base)";
      "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := ProdOrderLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" >= 0;
    END;

    [External]
    PROCEDURE TransferFromAsmLine@12(VAR AsmLine@1000 : Record "Assembly Line";VAR TrackingReservEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      AsmLineReserve@1002 : Codeunit "Assembly Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      AsmLine.TESTFIELD(Type,AsmLine.Type::Item);
      SetSource(DATABASE::"Assembly Line",AsmLine."Document Type",AsmLine."Document No.",AsmLine."Line No.",'',0);
      "Ref. Order Type" := "Ref. Order Type"::Assembly;
      "Ref. Order No." := AsmLine."Document No.";
      "Ref. Line No." := AsmLine."Line No.";
      "Item No." := AsmLine."No.";
      "Variant Code" := AsmLine."Variant Code";
      "Location Code" := AsmLine."Location Code";
      "Bin Code" := AsmLine."Bin Code";
      AsmLine.CALCFIELDS("Reserved Qty. (Base)");
      AsmLineReserve.FilterReservFor(ReservEntry,AsmLine);
      AutoReservedQty := -TransferBindings(ReservEntry,TrackingReservEntry);
      "Untracked Quantity" := AsmLine."Remaining Quantity (Base)" - AsmLine."Reserved Qty. (Base)" + AutoReservedQty;
      Quantity := AsmLine.Quantity;
      "Remaining Quantity" := AsmLine."Remaining Quantity";
      "Finished Quantity" := AsmLine."Consumed Quantity";
      "Quantity (Base)" := AsmLine."Quantity (Base)";
      "Remaining Quantity (Base)" := AsmLine."Remaining Quantity (Base)";
      "Unit of Measure Code" := AsmLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := AsmLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := AsmLine."Due Date";
      "Planning Flexibility" := "Planning Flexibility"::None;
    END;

    [External]
    PROCEDURE TransferFromAsmHeader@13(VAR AsmHeader@1000 : Record "Assembly Header";VAR TrackingReservEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      AsmHeaderReserve@1002 : Codeunit "Assembly Header-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      SetSource(DATABASE::"Assembly Header",AsmHeader."Document Type",AsmHeader."No.",0,'',0);
      "Item No." := AsmHeader."Item No.";
      "Variant Code" := AsmHeader."Variant Code";
      "Location Code" := AsmHeader."Location Code";
      "Bin Code" := AsmHeader."Bin Code";
      AsmHeaderReserve.FilterReservFor(ReservEntry,AsmHeader);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingReservEntry);
      AsmHeader.CALCFIELDS("Reserved Qty. (Base)");
      "Untracked Quantity" := AsmHeader."Remaining Quantity (Base)" - AsmHeader."Reserved Qty. (Base)" + AutoReservedQty;
      "Min. Quantity" := AsmHeader."Reserved Qty. (Base)" - AutoReservedQty;
      Quantity := AsmHeader.Quantity;
      "Remaining Quantity" := AsmHeader."Remaining Quantity";
      "Finished Quantity" := AsmHeader."Assembled Quantity";
      "Quantity (Base)" := AsmHeader."Quantity (Base)";
      "Remaining Quantity (Base)" := AsmHeader."Remaining Quantity (Base)";
      "Unit of Measure Code" := AsmHeader."Unit of Measure Code";
      "Qty. per Unit of Measure" := AsmHeader."Qty. per Unit of Measure";
      "Planning Flexibility" := AsmHeader."Planning Flexibility";
      IsSupply := "Untracked Quantity" >= 0;
      "Due Date" := AsmHeader."Due Date";
    END;

    [External]
    PROCEDURE TransferFromRequisitionLine@5(VAR RequisitionLine@1000 : Record "Requisition Line";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReserveReqLine@1002 : Codeunit "Req. Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      RequisitionLine.TESTFIELD(Type,RequisitionLine.Type::Item);
      SetSource(
        DATABASE::"Requisition Line",0,RequisitionLine."Worksheet Template Name",RequisitionLine."Line No.",
        RequisitionLine."Journal Batch Name",0);
      "Item No." := RequisitionLine."No.";
      "Variant Code" := RequisitionLine."Variant Code";
      "Location Code" := RequisitionLine."Location Code";
      "Bin Code" := RequisitionLine."Bin Code";
      RequisitionLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveReqLine.FilterReservFor(ReservEntry,RequisitionLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" := RequisitionLine."Quantity (Base)" - RequisitionLine."Reserved Qty. (Base)" + AutoReservedQty;
      "Min. Quantity" := RequisitionLine."Reserved Qty. (Base)" - AutoReservedQty;
      Quantity := RequisitionLine.Quantity;
      "Finished Quantity" := 0;
      "Remaining Quantity" := RequisitionLine.Quantity;
      "Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Remaining Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Unit of Measure Code" := RequisitionLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" >= 0;
      "Due Date" := RequisitionLine."Due Date";
      "Planning Flexibility" := RequisitionLine."Planning Flexibility";
    END;

    [External]
    PROCEDURE TransferFromOutboundTransfPlan@16(VAR RequisitionLine@1000 : Record "Requisition Line";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReserveReqLine@1002 : Codeunit "Req. Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      RequisitionLine.TESTFIELD(Type,RequisitionLine.Type::Item);
      SetSource(
        DATABASE::"Requisition Line",1,RequisitionLine."Worksheet Template Name",RequisitionLine."Line No.",
        RequisitionLine."Journal Batch Name",0);
      "Item No." := RequisitionLine."No.";
      "Variant Code" := RequisitionLine."Variant Code";
      "Location Code" := RequisitionLine."Transfer-from Code";
      "Bin Code" := RequisitionLine."Bin Code";
      RequisitionLine.CALCFIELDS("Reserved Qty. (Base)");
      ReserveReqLine.FilterReservFor(ReservEntry,RequisitionLine);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      "Untracked Quantity" := RequisitionLine."Quantity (Base)" - RequisitionLine."Reserved Qty. (Base)" + AutoReservedQty;
      "Min. Quantity" := RequisitionLine."Reserved Qty. (Base)" - AutoReservedQty;
      Quantity := RequisitionLine.Quantity;
      "Finished Quantity" := 0;
      "Remaining Quantity" := RequisitionLine.Quantity;
      "Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Remaining Quantity (Base)" := RequisitionLine."Quantity (Base)";
      "Unit of Measure Code" := RequisitionLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := RequisitionLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" <= 0;
      "Due Date" := RequisitionLine."Transfer Shipment Date";
    END;

    [External]
    PROCEDURE TransferFromOutboundTransfer@14(VAR TransLine@1000 : Record "Transfer Line";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      DummyTempTrackingEntry@1007 : TEMPORARY Record "Reservation Entry";
      CrntInvProfile@1008 : Record "Inventory Profile";
      ReserveTransLine@1002 : Codeunit "Transfer Line-Reserve";
      AutoReservedQty@1003 : Decimal;
      MinQtyInbnd@1005 : Decimal;
      MinQtyOutbnd@1006 : Decimal;
    BEGIN
      SetSource(DATABASE::"Transfer Line",0,TransLine."Document No.",TransLine."Line No.",'',0);
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-from Code";

      TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)","Reserved Qty. Inbnd. (Base)");
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,0);
      AutoReservedQty := -TransferBindings(ReservEntry,TrackingEntry);
      MinQtyOutbnd := TransLine."Reserved Qty. Outbnd. (Base)" - AutoReservedQty;

      CrntInvProfile := Rec;
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,1);
      AutoReservedQty := TransferBindings(ReservEntry,DummyTempTrackingEntry);
      MinQtyInbnd := TransLine."Reserved Qty. Inbnd. (Base)" - AutoReservedQty;
      Rec := CrntInvProfile;

      if MinQtyInbnd > MinQtyOutbnd then
        "Min. Quantity" := MinQtyInbnd
      else
        "Min. Quantity" := MinQtyOutbnd;

      "Untracked Quantity" := TransLine."Outstanding Qty. (Base)" - MinQtyOutbnd;
      Quantity := TransLine.Quantity;
      "Remaining Quantity" := TransLine."Outstanding Quantity";
      "Finished Quantity" := TransLine."Quantity Shipped";
      "Quantity (Base)" := TransLine."Quantity (Base)";
      "Remaining Quantity (Base)" := TransLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := TransLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := TransLine."Shipment Date";
      "Planning Flexibility" := TransLine."Planning Flexibility";
    END;

    [External]
    PROCEDURE TransferFromInboundTransfer@15(VAR TransLine@1000 : Record "Transfer Line";VAR TrackingEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      DummyTempTrackingEntry@1007 : TEMPORARY Record "Reservation Entry";
      CrntInvProfile@1008 : Record "Inventory Profile";
      ReserveTransLine@1002 : Codeunit "Transfer Line-Reserve";
      AutoReservedQty@1003 : Decimal;
      MinQtyInbnd@1006 : Decimal;
      MinQtyOutbnd@1005 : Decimal;
    BEGIN
      SetSource(DATABASE::"Transfer Line",1,TransLine."Document No.",TransLine."Line No.",'',TransLine."Derived From Line No.");
      "Item No." := TransLine."Item No.";
      "Variant Code" := TransLine."Variant Code";
      "Location Code" := TransLine."Transfer-to Code";

      TransLine.CALCFIELDS("Reserved Qty. Outbnd. (Base)","Reserved Qty. Inbnd. (Base)");
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,1);
      AutoReservedQty := TransferBindings(ReservEntry,TrackingEntry);
      MinQtyInbnd := TransLine."Reserved Qty. Inbnd. (Base)" - AutoReservedQty;

      CrntInvProfile := Rec;
      ReserveTransLine.FilterReservFor(ReservEntry,TransLine,0);
      AutoReservedQty := -TransferBindings(ReservEntry,DummyTempTrackingEntry);
      MinQtyOutbnd := TransLine."Reserved Qty. Outbnd. (Base)" - AutoReservedQty;
      Rec := CrntInvProfile;

      if MinQtyInbnd > MinQtyOutbnd then
        "Min. Quantity" := MinQtyInbnd
      else
        "Min. Quantity" := MinQtyOutbnd;

      "Untracked Quantity" := TransLine."Outstanding Qty. (Base)" - MinQtyInbnd;
      Quantity := TransLine.Quantity;
      "Remaining Quantity" := TransLine."Outstanding Quantity";
      "Finished Quantity" := TransLine."Quantity Received";
      "Quantity (Base)" := TransLine."Quantity (Base)";
      "Remaining Quantity (Base)" := TransLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := TransLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := TransLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" >= 0;
      "Starting Date" := TransLine."Shipment Date";
      "Due Date" := TransLine."Receipt Date";
      "Planning Flexibility" := TransLine."Planning Flexibility";
    END;

    [External]
    PROCEDURE TransferFromServLine@17(VAR ServLine@1000 : Record "Service Line";VAR TrackingReservEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ServLineReserve@1002 : Codeunit "Service Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      ServLine.TESTFIELD(Type,ServLine.Type::Item);
      SetSource(DATABASE::"Service Line",ServLine."Document Type",ServLine."Document No.",ServLine."Line No.",'',0);
      "Item No." := ServLine."No.";
      "Variant Code" := ServLine."Variant Code";
      "Location Code" := ServLine."Location Code";
      ServLine.CALCFIELDS("Reserved Qty. (Base)");
      ServLineReserve.FilterReservFor(ReservEntry,ServLine);
      AutoReservedQty := -TransferBindings(ReservEntry,TrackingReservEntry);
      "Untracked Quantity" := ServLine."Outstanding Qty. (Base)" - ServLine."Reserved Qty. (Base)" + AutoReservedQty;
      Quantity := ServLine.Quantity;
      "Remaining Quantity" := ServLine."Outstanding Quantity";
      "Finished Quantity" := ServLine."Quantity Shipped";
      "Quantity (Base)" := ServLine."Quantity (Base)";
      "Remaining Quantity (Base)" := ServLine."Outstanding Qty. (Base)";
      "Unit of Measure Code" := ServLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := ServLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := ServLine."Needed by Date";
      "Planning Flexibility" := "Planning Flexibility"::None;
    END;

    [External]
    PROCEDURE TransferFromJobPlanningLine@11(VAR JobPlanningLine@1000 : Record "Job Planning Line";VAR TrackingReservEntry@1004 : Record "Reservation Entry");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      JobPlanningLineReserve@1002 : Codeunit "Job Planning Line-Reserve";
      AutoReservedQty@1003 : Decimal;
    BEGIN
      JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
      SetSource(
        DATABASE::"Job Planning Line",JobPlanningLine.Status,JobPlanningLine."Job No.",JobPlanningLine."Job Contract Entry No.",'',0);
      "Item No." := JobPlanningLine."No.";
      "Variant Code" := JobPlanningLine."Variant Code";
      "Location Code" := JobPlanningLine."Location Code";
      JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
      JobPlanningLineReserve.FilterReservFor(ReservEntry,JobPlanningLine);
      AutoReservedQty := -TransferBindings(ReservEntry,TrackingReservEntry);
      "Untracked Quantity" := JobPlanningLine."Remaining Qty. (Base)" - JobPlanningLine."Reserved Qty. (Base)" + AutoReservedQty;
      Quantity := JobPlanningLine.Quantity;
      "Remaining Quantity" := JobPlanningLine."Remaining Qty.";
      "Finished Quantity" := JobPlanningLine."Qty. Posted";
      "Quantity (Base)" := JobPlanningLine."Quantity (Base)";
      "Remaining Quantity (Base)" := JobPlanningLine."Remaining Qty. (Base)";
      "Unit of Measure Code" := JobPlanningLine."Unit of Measure Code";
      "Qty. per Unit of Measure" := JobPlanningLine."Qty. per Unit of Measure";
      IsSupply := "Untracked Quantity" < 0;
      "Due Date" := JobPlanningLine."Planning Date";
      "Planning Flexibility" := "Planning Flexibility"::None;
    END;

    LOCAL PROCEDURE TransferBindings@10(VAR ReservEntry@1000 : Record "Reservation Entry";VAR TrackingEntry@1004 : Record "Reservation Entry") : Decimal;
    VAR
      OppositeReservEntry@1001 : Record "Reservation Entry";
      AutoReservedQty@1002 : Decimal;
      Found@1003 : Boolean;
      InsertTracking@1005 : Boolean;
    BEGIN
      ReservEntry.SETCURRENTKEY(
        "Source ID","Source Ref. No.","Source Type","Source Subtype","Source Batch Name","Source Prod. Order Line",
        "Reservation Status");
      if ReservEntry.FINDSET then
        repeat
          InsertTracking := not
            ((ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation) and
             (ReservEntry.Binding = ReservEntry.Binding::" "));
          if InsertTracking and ReservEntry.TrackingExists and
             (ReservEntry."Source Type" <> DATABASE::"Item Ledger Entry")
          then begin
            TrackingEntry := ReservEntry;
            TrackingEntry.INSERT;
          end;
          if ReservEntry."Reservation Status" < ReservEntry."Reservation Status"::Surplus
          then
            if (ReservEntry.Binding = ReservEntry.Binding::"Order-to-Order")
            then begin
              if ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation then
                AutoReservedQty := AutoReservedQty + ReservEntry."Quantity (Base)";
              if not Found then begin
                if ReservEntry.Positive then
                  OppositeReservEntry.GET(ReservEntry."Entry No.",not ReservEntry.Positive)
                else
                  OppositeReservEntry := ReservEntry;
                if "Primary Order No." = '' then begin
                  "Primary Order Type" := OppositeReservEntry."Source Type";
                  "Primary Order Status" := OppositeReservEntry."Source Subtype";
                  "Primary Order No." := OppositeReservEntry."Source ID";
                  if OppositeReservEntry."Source Type" <> DATABASE::"Prod. Order Component" then
                    "Primary Order Line" := OppositeReservEntry."Source Ref. No.";
                end;
                Binding := ReservEntry.Binding;
                "Disallow Cancellation" := ReservEntry."Disallow Cancellation";
                Found := true;
              end;
            end else
              if (ReservEntry."Reservation Status" = ReservEntry."Reservation Status"::Reservation) and
                 (("Fixed Date" = 0D) or ("Fixed Date" > ReservEntry."Shipment Date"))
              then
                "Fixed Date" := ReservEntry."Shipment Date";
        until ReservEntry.NEXT = 0;
      exit(AutoReservedQty);
    END;

    [External]
    PROCEDURE TransferQtyFromItemTrgkEntry@18(VAR ItemTrackingEntry@1000 : Record "Reservation Entry");
    BEGIN
      "Original Quantity" := 0;
      Quantity := ItemTrackingEntry.Quantity;
      "Quantity (Base)" := ItemTrackingEntry."Quantity (Base)";
      "Finished Quantity" := 0;
      "Min. Quantity" := 0;
      "Remaining Quantity" := ItemTrackingEntry.Quantity;
      "Remaining Quantity (Base)" := ItemTrackingEntry."Quantity (Base)";
      "Untracked Quantity" := ItemTrackingEntry."Quantity (Base)";
      if not IsSupply then
        ChangeSign;
    END;

    [External]
    PROCEDURE ReduceQtyByItemTracking@19(VAR NewInvProfile@1000 : Record "Inventory Profile");
    BEGIN
      "Original Quantity" -= NewInvProfile."Original Quantity";
      Quantity -= NewInvProfile.Quantity;
      "Quantity (Base)" -= NewInvProfile."Quantity (Base)";
      "Finished Quantity" -= NewInvProfile."Finished Quantity";
      "Remaining Quantity" -= NewInvProfile."Remaining Quantity";
      "Remaining Quantity (Base)" -= NewInvProfile."Remaining Quantity (Base)";
      "Untracked Quantity" -= NewInvProfile."Untracked Quantity";
    END;

    [External]
    PROCEDURE ChangeSign@6();
    BEGIN
      "Original Quantity" := -"Original Quantity";
      "Remaining Quantity (Base)" := -"Remaining Quantity (Base)";
      "Untracked Quantity" := -"Untracked Quantity";
      "Quantity (Base)" := -"Quantity (Base)";
      Quantity := -Quantity;
      "Remaining Quantity" := -"Remaining Quantity";
      "Finished Quantity" := -"Finished Quantity";
    END;

    [External]
    PROCEDURE TransferToTrackingEntry@9(VAR TrkgReservEntry@1000 : Record "Reservation Entry";UseSecondaryFields@1001 : Boolean);
    VAR
      ReqLine@1002 : Record "Requisition Line";
    BEGIN
      case "Source Type" of
        0:
          begin
            // Surplus, Reorder Point
            TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Surplus;
            TrkgReservEntry."Suppressed Action Msg." := true;
            exit;
          end;
        DATABASE::"Production Forecast Entry":
          begin
            // Will be marked as Surplus
            TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Surplus;
            TrkgReservEntry.SetSource(DATABASE::"Production Forecast Entry",0,"Source ID",0,'',0);
            TrkgReservEntry."Suppressed Action Msg." := true;
          end;
        DATABASE::"Sales Line":
          begin
            if "Source Order Status" = 4 then begin
              // Blanket Order will be marked as Surplus
              TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Surplus;
              TrkgReservEntry."Suppressed Action Msg." := true;
            end;
            TrkgReservEntry.SetSource(DATABASE::"Sales Line","Source Order Status","Source ID","Source Ref. No.",'',0);
          end;
        DATABASE::"Requisition Line":
          TrkgReservEntry.SetSource(
            DATABASE::"Requisition Line","Source Order Status","Source ID","Source Ref. No.","Source Batch Name",0);
        DATABASE::"Purchase Line":
          TrkgReservEntry.SetSource(
            DATABASE::"Purchase Line","Source Order Status","Source ID","Source Ref. No.",'',0);
        DATABASE::"Item Ledger Entry":
          TrkgReservEntry.SetSource(
            DATABASE::"Item Ledger Entry",0,'',"Source Ref. No.",'',0);
        DATABASE::"Prod. Order Line":
          TrkgReservEntry.SetSource(
            DATABASE::"Prod. Order Line","Source Order Status","Source ID",0,'',"Source Prod. Order Line");
        DATABASE::"Prod. Order Component":
          TrkgReservEntry.SetSource(
            DATABASE::"Prod. Order Component","Source Order Status","Source ID","Source Ref. No.",'',"Source Prod. Order Line");
        DATABASE::"Planning Component":
          if UseSecondaryFields then begin
            ReqLine.GET("Source ID","Source Batch Name","Source Prod. Order Line");
            case ReqLine."Ref. Order Type" of
              ReqLine."Ref. Order Type"::"Prod. Order":
                TrkgReservEntry.SetSource(
                  DATABASE::"Prod. Order Component","Source Order Status","Ref. Order No.","Source Ref. No.",'',"Ref. Line No.");
              ReqLine."Ref. Order Type"::Assembly:
                TrkgReservEntry.SetSource(
                  DATABASE::"Assembly Line","Source Order Status","Ref. Order No.","Source Ref. No.",'',"Ref. Line No.");
            end;
          end else
            TrkgReservEntry.SetSource(
              DATABASE::"Planning Component",0,"Source ID","Source Ref. No.","Source Batch Name","Source Prod. Order Line");
        DATABASE::"Assembly Line":
          begin
            if "Source Order Status" = 4 then begin
              // Blanket Order will be marked as Surplus
              TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Surplus;
              TrkgReservEntry."Suppressed Action Msg." := true;
            end;
            TrkgReservEntry.SetSource(DATABASE::"Assembly Line","Source Order Status","Source ID","Source Ref. No.",'',0);
          end;
        DATABASE::"Assembly Header":
          TrkgReservEntry.SetSource(DATABASE::"Assembly Header","Source Order Status","Source ID","Source Ref. No.",'',0);
        DATABASE::"Transfer Line":
          if IsSupply then
            TrkgReservEntry.SetSource(DATABASE::"Transfer Line",1,"Source ID","Source Ref. No.",'',"Source Prod. Order Line")
          else
            TrkgReservEntry.SetSource(DATABASE::"Transfer Line",0,"Source ID","Source Ref. No.",'',0);
        DATABASE::"Service Line":
          TrkgReservEntry.SetSource(DATABASE::"Service Line","Source Order Status","Source ID","Source Ref. No.",'',0);
        DATABASE::"Job Planning Line":
          TrkgReservEntry.SetSource(DATABASE::"Job Planning Line","Source Order Status","Source ID","Source Ref. No.",'',0);
        else
          ERROR(Text000,"Source Type");
      end;

      TrkgReservEntry."Item No." := "Item No.";
      TrkgReservEntry."Location Code" := "Location Code";
      TrkgReservEntry.Description := '';
      TrkgReservEntry."Creation Date" := TODAY;
      TrkgReservEntry."Created By" := USERID;
      TrkgReservEntry."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
      TrkgReservEntry."Variant Code" := "Variant Code";
      TrkgReservEntry.Binding := Binding;
      TrkgReservEntry."Disallow Cancellation" := "Disallow Cancellation";
      TrkgReservEntry."Lot No." := "Lot No.";
      TrkgReservEntry."Serial No." := "Serial No.";
      TrkgReservEntry."Expiration Date" := "Expiration Date";

      if IsSupply then
        TrkgReservEntry."Quantity (Base)" := "Untracked Quantity"
      else
        TrkgReservEntry."Quantity (Base)" := -"Untracked Quantity";

      TrkgReservEntry.Quantity :=
        ROUND(TrkgReservEntry."Quantity (Base)" / TrkgReservEntry."Qty. per Unit of Measure",0.00001);
      TrkgReservEntry.Positive := TrkgReservEntry."Quantity (Base)" > 0;

      if TrkgReservEntry."Reservation Status" <> TrkgReservEntry."Reservation Status"::Surplus then
        if ("Planning Level Code" > 0) or
           (Binding = Binding::"Order-to-Order")
        then
          TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Reservation
        else
          TrkgReservEntry."Reservation Status" := TrkgReservEntry."Reservation Status"::Tracking;

      if TrkgReservEntry."Quantity (Base)" = 0 then begin
        TrkgReservEntry."Expected Receipt Date" := GetExpectedReceiptDate;
        TrkgReservEntry."Shipment Date" := "Due Date";
      end else
        if TrkgReservEntry.Positive then
          TrkgReservEntry."Expected Receipt Date" := GetExpectedReceiptDate
        else
          TrkgReservEntry."Shipment Date" := "Due Date";
    END;

    [External]
    PROCEDURE ActiveInWarehouse@23() : Boolean;
    VAR
      WhseValidateSourceLine@1000 : Codeunit "Whse. Validate Source Line";
    BEGIN
      if "Source Type" = DATABASE::"Transfer Line" then
        exit(WhseValidateSourceLine.WhseLinesExist("Source Type",0,"Source ID","Source Ref. No.",0,Quantity));

      exit(WhseValidateSourceLine.WhseLinesExist("Source Type","Source Order Status","Source ID","Source Ref. No.",0,Quantity));
    END;

    LOCAL PROCEDURE GetExpectedReceiptDate@22() : Date;
    BEGIN
      if "Action Message" in ["Action Message"::Reschedule,"Action Message"::"Resched.& Chg. Qty."] then
        exit("Original Due Date");
      exit("Due Date");
    END;

    [External]
    PROCEDURE SetSource@28(SourceType@1000 : Integer;SourceSubtype@1001 : Integer;SourceID@1002 : Code[20];SourceRefNo@1003 : Integer;SourceBatchName@1004 : Code[10];SourceProdOrderLine@1005 : Integer);
    BEGIN
      "Source Type" := SourceType;
      "Source Order Status" := SourceSubtype;
      "Source ID" := SourceID;
      "Source Ref. No." := SourceRefNo;
      "Source Batch Name" := SourceBatchName;
      "Source Prod. Order Line" := SourceProdOrderLine;
    END;

    [External]
    PROCEDURE SetTrackingFilter@24(InventoryProfile@1001 : Record "Inventory Profile");
    BEGIN
      if InventoryProfile."Serial No." <> '' then
        SETRANGE("Serial No.",InventoryProfile."Serial No.")
      else
        SETRANGE("Serial No.");
      if InventoryProfile."Lot No." <> '' then
        SETRANGE("Lot No.",InventoryProfile."Lot No.")
      else
        SETRANGE("Lot No.");
    END;

    [External]
    PROCEDURE TrackingExists@21() : Boolean;
    BEGIN
      exit(("Lot No." <> '') or ("Serial No." <> ''));
    END;

    BEGIN
    END.
  }
}

