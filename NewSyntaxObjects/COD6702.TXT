OBJECT Codeunit 6702 O365 Contact Sync. Helper
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      O365SyncManagement@1000 : Codeunit "O365 Sync. Management";
      CountryRegionNotFoundErr@1007 : TextConst 'ENU=The Exchange Country/Region cannot be found in your company.';
      CreateExchangeContactTxt@1005 : TextConst 'ENU=Create exchange contact.';
      CreateNavContactTxt@1001 : TextConst '@@@="%1 = The contact";ENU=Create contact. - %1';
      UniqueCompanyNameErr@1006 : TextConst 'ENU=The Exchange Company Name is not unique in your company.';

    [Internal]
    PROCEDURE GetO365Contacts@6(ExchangeSync@1002 : Record "Exchange Sync";VAR TempContact@1003 : TEMPORARY Record Contact);
    VAR
      ExchangeContact@1001 : Record "Exchange Contact";
      Counter@1000 : Integer;
      RecordsFound@1004 : Boolean;
      Success@1005 : Boolean;
    BEGIN
      TempContact.RESET;
      TempContact.DELETEALL;

      ExchangeContact.SETFILTER(EMailAddress1,'<>%1','');
      if TryFindContacts(ExchangeContact,RecordsFound,Success) and RecordsFound then
        repeat
          Counter := Counter + 1;
          CLEAR(TempContact);
          TempContact.INIT;
          TempContact."No." := STRSUBSTNO('%1',Counter);
          TempContact.Type := TempContact.Type::Person;

          TransferExchangeContactToNavContactNoValidate(ExchangeSync,ExchangeContact,TempContact);
          TempContact.INSERT; // Do not run the trigger so we preserve the dates.

        until (ExchangeContact.NEXT = 0)
      else
        if not Success then
          ERROR(GETLASTERRORTEXT);

      CLEAR(ExchangeContact);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryFindContacts@1(VAR ExchangeContact@1000 : Record "Exchange Contact";VAR RecordsFound@1001 : Boolean;VAR Success@1002 : Boolean);
    BEGIN
      RecordsFound := ExchangeContact.FINDSET;
      Success := true;
    END;

    [Internal]
    PROCEDURE TransferExchangeContactToNavContact@13(VAR ExchangeContact@1000 : Record Contact;VAR NavContact@1001 : Record Contact;ExchangeSync@1003 : Record "Exchange Sync");
    BEGIN
      NavContact.Type := NavContact.Type::Person;

      // Map the ExchangeContact.CompanyName to NavContact.CompanyNo if possible
      if not ValidateCompanyName(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Company Name"),ExchangeContact."E-Mail");

      TransferContactNameInfo(ExchangeContact,NavContact,ExchangeSync);

      TransferCommonContactInfo(ExchangeContact,NavContact,ExchangeSync);
    END;

    [Internal]
    PROCEDURE TransferBookingContactToNavContact@2(VAR ExchangeContact@1000 : Record Contact;VAR NavContact@1001 : Record Contact);
    VAR
      ExchangeSync@1004 : Record "Exchange Sync";
    BEGIN
      ExchangeSync.GET(USERID);

      // Map the ExchangeContact.CompanyName to NavContact.CompanyNo if possible
      if ExchangeContact."Company Name" <> '' then begin
        if not ValidateCompanyName(ExchangeContact,NavContact) then
          LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Company Name"),ExchangeContact."E-Mail");
      end else
        TransferContactNameInfo(ExchangeContact,NavContact,ExchangeSync);

      TransferCommonContactInfo(ExchangeContact,NavContact,ExchangeSync);
    END;

    [Internal]
    PROCEDURE ProcessNavContactRecordSet@24(VAR Contact@1000 : Record Contact;VAR TempContact@1005 : TEMPORARY Record Contact;VAR ExchangeSync@1002 : Record "Exchange Sync");
    VAR
      ExchangeContact@1003 : Record "Exchange Contact";
      LocalExchangeContact@1004 : Record "Exchange Contact";
      found@1001 : Boolean;
    BEGIN
      if Contact.FINDSET then begin
        repeat
          found := false;
          TempContact.RESET;
          TempContact.SETRANGE("E-Mail",Contact."E-Mail");
          if TempContact.FINDFIRST then begin
            found := true;
            TempContact.DELETE;
          end;

          CLEAR(ExchangeContact);
          ExchangeContact.INIT;

          if not TransferNavContactToExchangeContact(Contact,ExchangeContact) then
            O365SyncManagement.LogActivityFailed(ExchangeSync.RECORDID,ExchangeSync."User ID",
              CreateExchangeContactTxt,ExchangeContact.EMailAddress1)
          else
            if found then
              ExchangeContact.MODIFY
            else begin
              CLEAR(LocalExchangeContact);
              LocalExchangeContact.INIT;
              LocalExchangeContact.SETFILTER(EMailAddress1,'=%1',Contact."E-Mail");
              if LocalExchangeContact.FINDFIRST then
                O365SyncManagement.LogActivityFailed(ExchangeSync.RECORDID,ExchangeSync."User ID",
                  CreateExchangeContactTxt,ExchangeContact.EMailAddress1)
              else
                ExchangeContact.INSERT
            end;

        until Contact.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE TransferExchangeContactToNavContactNoValidate@17(ExchangeSync@1003 : Record "Exchange Sync";VAR ExchangeContact@1000 : Record "Exchange Contact";VAR NavContact@1001 : Record Contact);
    VAR
      DateFilterCalc@1004 : Codeunit "DateFilter-Calc";
      ExchContDateTimeUtc@1002 : DateTime;
    BEGIN
      if not SetFirstName(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("First Name"),ExchangeContact.EMailAddress1);

      if not SetMiddleName(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Middle Name"),ExchangeContact.EMailAddress1);

      if not SetSurName(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(Surname),ExchangeContact.EMailAddress1);

      if not SetInitials(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(Initials),ExchangeContact.EMailAddress1);

      if not SetPostCode(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Post Code"),ExchangeContact.EMailAddress1);

      if not SetEmail(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("E-Mail"),ExchangeContact.EMailAddress1);

      if not SetEmail2(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("E-Mail 2"),ExchangeContact.EMailAddress1);

      if not SetCompanyName(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Company Name"),ExchangeContact.EMailAddress1);

      if not SetHomePage(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Home Page"),ExchangeContact.EMailAddress1);

      if not SetPhoneNo(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Phone No."),ExchangeContact.EMailAddress1);

      if not SetMobilePhoneNo(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Mobile Phone No."),ExchangeContact.EMailAddress1);

      if not SetFaxNo(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Fax No."),ExchangeContact.EMailAddress1);

      if not SetCity(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(City),ExchangeContact.EMailAddress1);

      if not SetCounty(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(County),ExchangeContact.EMailAddress1);

      if not SetNavContactAddresses(NavContact,ExchangeContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(Address),ExchangeContact.EMailAddress1);

      ExchContDateTimeUtc := DateFilterCalc.ConvertToUtcDateTime(ExchangeContact.LastModifiedTime);
      NavContact."Last Date Modified" := DT2DATE(ExchContDateTimeUtc);
      NavContact."Last Time Modified" := DT2TIME(ExchContDateTimeUtc);

      // NOTE, we are using "Name 2" as the datatype is large enough to accomodate Exchange data type.
      if not SetRegion(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Country/Region Code"),ExchangeContact.EMailAddress1);

      if not SetJobTitle(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Job Title"),ExchangeContact.EMailAddress1);
    END;

    [TryFunction]
    [External]
    PROCEDURE TransferNavContactToExchangeContact@20(VAR NavContact@1000 : Record Contact;VAR ExchangeContact@1001 : Record "Exchange Contact");
    BEGIN
      ExchangeContact.VALIDATE(EMailAddress1,NavContact."E-Mail");
      if NavContact.Type = NavContact.Type::Person then
        ExchangeContact.VALIDATE(GivenName,NavContact."First Name");
      if NavContact.Type = NavContact.Type::Company then
        ExchangeContact.VALIDATE(GivenName,COPYSTR(NavContact."Company Name",1,30));
      ExchangeContact.VALIDATE(MiddleName,NavContact."Middle Name");
      ExchangeContact.VALIDATE(Surname,NavContact.Surname);
      ExchangeContact.VALIDATE(Initials,NavContact.Initials);
      ExchangeContact.VALIDATE(PostalCode,NavContact."Post Code");
      ExchangeContact.VALIDATE(EMailAddress2,NavContact."E-Mail 2");
      ExchangeContact.VALIDATE(CompanyName,NavContact."Company Name");
      ExchangeContact.VALIDATE(BusinessHomePage,NavContact."Home Page");
      ExchangeContact.VALIDATE(BusinessPhone1,NavContact."Phone No.");
      ExchangeContact.VALIDATE(MobilePhone,NavContact."Mobile Phone No.");
      ExchangeContact.VALIDATE(BusinessFax,NavContact."Fax No.");
      ValidateExchangeContactAddress(ExchangeContact,NavContact);
      ExchangeContact.VALIDATE(City,NavContact.City);
      ExchangeContact.VALIDATE(State,NavContact.County);
      ExchangeContact.VALIDATE(Region,NavContact."Country/Region Code");
      ExchangeContact.VALIDATE(JobTitle,NavContact."Job Title");
    END;

    [TryFunction]
    LOCAL PROCEDURE SetNavContactAddresses@26(VAR NavContact@1002 : Record Contact;VAR ExchangeContact@1000 : Record "Exchange Contact");
    VAR
      LineFeed@1001 : Char;
      LocalStreet@1003 : Text;
      LineFeedPos@1004 : Integer;
      CarriageReturn@1005 : Char;
      CarriageReturnPos@1006 : Integer;
    BEGIN
      // Split ExchangeContact.Street into NavContact.Address and Address2.
      LineFeed := 10;
      CarriageReturn := 13;
      LocalStreet := ExchangeContact.Street;
      LineFeedPos := STRPOS(LocalStreet,FORMAT(LineFeed));
      CarriageReturnPos := STRPOS(LocalStreet,FORMAT(CarriageReturn));
      if LineFeedPos > 0 then begin
        if CarriageReturnPos = 0 then
          // Exchange has a bug when editing from OWA where the Carriage Return is ommitted.
          NavContact.Address := COPYSTR(LocalStreet,1,LineFeedPos - 1)
        else
          NavContact.Address := COPYSTR(LocalStreet,1,LineFeedPos - 2);
        LocalStreet := COPYSTR(LocalStreet,LineFeedPos + 1);
        LineFeedPos := STRPOS(LocalStreet,FORMAT(LineFeed));
        CarriageReturnPos := STRPOS(LocalStreet,FORMAT(CarriageReturn));
        if LineFeedPos > 0 then begin
          if CarriageReturnPos = 0 then
            LocalStreet := COPYSTR(LocalStreet,1,LineFeedPos - 1)
          else
            LocalStreet := COPYSTR(LocalStreet,1,LineFeedPos - 2);
          NavContact."Address 2" := COPYSTR(LocalStreet,1,STRLEN(LocalStreet));
        end else
          NavContact."Address 2" := COPYSTR(LocalStreet,1,STRLEN(LocalStreet));
      end else
        NavContact.Address := COPYSTR(LocalStreet,1,50);
    END;

    [TryFunction]
    LOCAL PROCEDURE SetFirstName@34(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."First Name" := ExchangeContact.GivenName;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetMiddleName@28(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Middle Name" := ExchangeContact.MiddleName;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetSurName@40(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact.Surname := ExchangeContact.Surname;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetInitials@42(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact.Initials := ExchangeContact.Initials;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetPostCode@46(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Post Code" := ExchangeContact.PostalCode;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetEmail@37(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."E-Mail" := ExchangeContact.EMailAddress1;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetEmail2@39(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."E-Mail 2" := ExchangeContact.EMailAddress2;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetCompanyName@45(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Company Name" := ExchangeContact.CompanyName;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetHomePage@48(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Home Page" := ExchangeContact.BusinessHomePage;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetPhoneNo@51(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Phone No." := ExchangeContact.BusinessPhone1;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetMobilePhoneNo@52(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Mobile Phone No." := ExchangeContact.MobilePhone;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetFaxNo@55(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Fax No." := ExchangeContact.BusinessFax;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetCity@56(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact.City := ExchangeContact.City;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetCounty@57(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact.County := ExchangeContact.State;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetRegion@33(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Name 2" := ExchangeContact.Region;
    END;

    [TryFunction]
    LOCAL PROCEDURE SetJobTitle@35(VAR ExchangeContact@1001 : Record "Exchange Contact";VAR NavContact@1000 : Record Contact);
    BEGIN
      NavContact."Job Title" := ExchangeContact.JobTitle;
    END;

    [TryFunction]
    LOCAL PROCEDURE ValidateCompanyName@27(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact);
    VAR
      LocalContact@1001 : Record Contact;
    BEGIN
      // Map Exchange.CompanyName to NavContact.Company.No
      if ExchangeContact."Company Name" <> '' then begin
        LocalContact.SETRANGE("Company Name",ExchangeContact."Company Name");
        LocalContact.SETRANGE(Type,LocalContact.Type::Company);
        if LocalContact.COUNT <> 1 then
          ERROR(UniqueCompanyNameErr);

        if LocalContact.FINDFIRST then
          if LocalContact."Company Name" <> NavContact."Company Name" then
            NavContact.VALIDATE("Company No.",LocalContact."No.");
      end;
    END;

    [TryFunction]
    LOCAL PROCEDURE ValidateCountryRegion@25(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact);
    VAR
      LocalCountryRegion@1001 : Record "Country/Region";
    BEGIN
      // Map Exchange.Region to NavContact."Country/Region Code"
      // NOTE, we are using "Name 2" as the datatype is large enough to accomodate Exchange data type.
      if ExchangeContact."Name 2" <> '' then
        if STRLEN(ExchangeContact."Name 2") <= 10 then
          if LocalCountryRegion.GET(ExchangeContact."Name 2") then
            NavContact.VALIDATE("Country/Region Code",COPYSTR(ExchangeContact."Name 2",1,10))
          else
            ValidateCountryRegionByName(ExchangeContact."Name 2",NavContact)
        else
          ValidateCountryRegionByName(ExchangeContact."Name 2",NavContact);
    END;

    LOCAL PROCEDURE ValidateCountryRegionByName@44(Country@1000 : Text[50];VAR NavContact@1002 : Record Contact);
    VAR
      LocalCountryRegion@1001 : Record "Country/Region";
    BEGIN
      LocalCountryRegion.SETRANGE(Name,Country);
      if LocalCountryRegion.FINDFIRST then
        NavContact.VALIDATE("Country/Region Code",LocalCountryRegion.Code)
      else
        ERROR(CountryRegionNotFoundErr);
    END;

    LOCAL PROCEDURE ValidateExchangeContactAddress@30(VAR ExchangeContact@1000 : Record "Exchange Contact";VAR NavContact@1001 : Record Contact);
    VAR
      CrLf@1002 : Text[2];
      LocalStreet@1004 : Text;
    BEGIN
      // Concatenate NavContact.Address & Address2 into ExchangeContact.Street
      CrLf[1] := 13;
      CrLf[2] := 10;
      LocalStreet := NavContact.Address + CrLf + NavContact."Address 2" + CrLf;
      ExchangeContact.VALIDATE(Street,COPYSTR(LocalStreet,1,104));
    END;

    LOCAL PROCEDURE ValidateFirstName@36(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("First Name"),ExchangeContact."First Name") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateMiddleName@47(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Middle Name"),ExchangeContact."Middle Name") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateSurname@49(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO(Surname),ExchangeContact.Surname) then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateInitials@53(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO(Initials),ExchangeContact.Initials) then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateEmail@54(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("E-Mail"),ExchangeContact."E-Mail") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateEmail2@60(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("E-Mail 2"),ExchangeContact."E-Mail 2") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateHomePage@61(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Home Page"),ExchangeContact."Home Page") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidatePhoneNo@64(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Phone No."),ExchangeContact."Phone No.") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateMobilePhoneNo@65(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Mobile Phone No."),ExchangeContact."Mobile Phone No.") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateFaxNo@68(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Fax No."),ExchangeContact."Fax No.") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateAddress@69(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO(Address),ExchangeContact.Address) then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateAddress2@72(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Address 2"),ExchangeContact."Address 2") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateCity@73(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO(City),ExchangeContact.City) then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidatePostCode@77(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Post Code"),ExchangeContact."Post Code") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateCounty@78(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO(County),ExchangeContact.County) then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE ValidateJobTitle@81(ExchangeContact@1000 : Record Contact;VAR NavContact@1002 : Record Contact) : Boolean;
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      NavContact.GET(NavContact."No.");
      RecRef.GETTABLE(NavContact);
      if TryValidateField(RecRef,NavContact.FIELDNO("Job Title"),ExchangeContact."Job Title") then
        exit(RecRef.MODIFY);
      exit(false);
    END;

    LOCAL PROCEDURE TransferContactNameInfo@11(VAR ExchangeContact@1002 : Record Contact;VAR NavContact@1001 : Record Contact;ExchangeSync@1000 : Record "Exchange Sync");
    BEGIN
      if not ValidateFirstName(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("First Name"),ExchangeContact."E-Mail");

      if not ValidateMiddleName(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Middle Name"),ExchangeContact."E-Mail");

      if not ValidateSurname(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(Surname),ExchangeContact."E-Mail");

      if not ValidateInitials(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(Initials),ExchangeContact."E-Mail");
    END;

    LOCAL PROCEDURE TransferCommonContactInfo@5(VAR ExchangeContact@1000 : Record Contact;VAR NavContact@1001 : Record Contact;ExchangeSync@1003 : Record "Exchange Sync");
    BEGIN
      if not ValidateEmail(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("E-Mail"),ExchangeContact."E-Mail");

      if not ValidateEmail2(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("E-Mail 2"),ExchangeContact."E-Mail");

      if not ValidateHomePage(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Home Page"),ExchangeContact."E-Mail");

      if not ValidatePhoneNo(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Phone No."),ExchangeContact."E-Mail");

      if not ValidateMobilePhoneNo(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Mobile Phone No."),ExchangeContact."E-Mail");

      if not ValidateFaxNo(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Fax No."),ExchangeContact."E-Mail");

      if not ValidateAddress(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(Address),ExchangeContact."E-Mail");

      if not ValidateAddress2(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Address 2"),ExchangeContact."E-Mail");

      if not ValidateCity(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(City),ExchangeContact."E-Mail");

      if not ValidatePostCode(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Post Code"),ExchangeContact."E-Mail");

      if not ValidateCounty(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION(County),ExchangeContact."E-Mail");

      NavContact.VALIDATE("Last Date Modified",ExchangeContact."Last Date Modified");
      NavContact.VALIDATE("Last Time Modified",ExchangeContact."Last Time Modified");

      if not ValidateCountryRegion(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Country/Region Code"),ExchangeContact."E-Mail");

      if not ValidateJobTitle(ExchangeContact,NavContact) then
        LogFailure(ExchangeSync,NavContact.FIELDCAPTION("Job Title"),ExchangeContact."E-Mail");
    END;

    LOCAL PROCEDURE LogFailure@7(ExchangeSync@1000 : Record "Exchange Sync";FieldCaption@1001 : Text;Identifier@1002 : Text);
    VAR
      Message@1003 : Text;
    BEGIN
      Message := STRSUBSTNO(CreateNavContactTxt,FieldCaption);
      O365SyncManagement.LogActivityFailed(ExchangeSync.RECORDID,ExchangeSync."User ID",Message,Identifier);
    END;

    LOCAL PROCEDURE TryValidateField@4(VAR RecRef@1000 : RecordRef;FieldNo@1002 : Integer;Value@1003 : Variant) : Boolean;
    VAR
      ConfigTryValidate@1004 : Codeunit "Config. Try Validate";
      FieldRef@1001 : FieldRef;
    BEGIN
      FieldRef := RecRef.FIELD(FieldNo);
      ConfigTryValidate.SetValidateParameters(FieldRef,Value);
      COMMIT;
      exit(ConfigTryValidate.RUN);
    END;

    BEGIN
    END.
  }
}

