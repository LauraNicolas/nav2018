OBJECT Table 99000754 Work Center
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               MfgSetup.GET;
               if "No." = '' then begin
                 MfgSetup.TESTFIELD("Work Center Nos.");
                 NoSeriesMgt.InitSeries(MfgSetup."Work Center Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;
               DimMgt.UpdateDefaultDim(
                 DATABASE::"Work Center","No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=VAR
               ProdOrderRtngLine@1000 : Record "Prod. Order Routing Line";
               StdCostWksh@1001 : Record "Standard Cost Worksheet";
               CapLedgEntry@1002 : Record "Capacity Ledger Entry";
             BEGIN
               CapLedgEntry.SETRANGE("Work Center No.","No.");
               if not CapLedgEntry.ISEMPTY then
                 ERROR(Text010,TABLECAPTION,"No.",CapLedgEntry.TABLECAPTION);

               StdCostWksh.RESET;
               StdCostWksh.SETRANGE(Type,StdCostWksh.Type::"Work Center");
               StdCostWksh.SETRANGE("No.","No.");
               if not StdCostWksh.ISEMPTY then
                 ERROR(Text010,TABLECAPTION,"No.",StdCostWksh.TABLECAPTION);

               CalendarEntry.SETCURRENTKEY("Capacity Type","No.");
               CalendarEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Work Center");
               CalendarEntry.SETRANGE("No.","No.");
               CalendarEntry.DELETEALL;

               CalAbsentEntry.SETCURRENTKEY("Capacity Type","No.");
               CalAbsentEntry.SETRANGE("Capacity Type",CalendarEntry."Capacity Type"::"Work Center");
               CalAbsentEntry.SETRANGE("No.","No.");
               CalAbsentEntry.DELETEALL;

               MfgCommentLine.SETRANGE("Table Name",MfgCommentLine."Table Name"::"Work Center");
               MfgCommentLine.SETRANGE("No.","No.");
               MfgCommentLine.DELETEALL;

               ProdOrderRtngLine.SETRANGE("Work Center No.","No.");
               if not ProdOrderRtngLine.ISEMPTY then
                 ERROR(Text000);

               DimMgt.DeleteDefaultDim(DATABASE::"Work Center","No.");

               VALIDATE("Location Code",''); // to clean up the default bins
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Work Center;
    LookupPageID="Work Center List";
    DrillDownPageID="Work Center List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 4   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 6   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 12  ;   ;Alternate Work Center;Code20       ;TableRelation="Work Center";
                                                   CaptionML=ENU=Alternate Work Center }
    { 14  ;   ;Work Center Group Code;Code10      ;TableRelation="Work Center Group";
                                                   OnValidate=VAR
                                                                ProdOrderRtngLine@1000 : Record "Prod. Order Routing Line";
                                                                ProdOrderCapNeedEntry@1001 : Record "Prod. Order Capacity Need";
                                                                PlanningRtngLine@1002 : Record "Planning Routing Line";
                                                              BEGIN
                                                                if "Work Center Group Code" = xRec."Work Center Group Code" then
                                                                  exit;

                                                                CalendarEntry.SETCURRENTKEY("Work Center No.");
                                                                CalendarEntry.SETRANGE("Work Center No.","No.");
                                                                if not CalendarEntry.FIND('-') then
                                                                  exit;

                                                                if CurrFieldNo <> 0 then
                                                                  if not CONFIRM(Text001,false,FIELDCAPTION("Work Center Group Code"))
                                                                  then begin
                                                                    "Work Center Group Code" := xRec."Work Center Group Code";
                                                                    exit;
                                                                  end;

                                                                Window.OPEN(
                                                                  Text002 +
                                                                  Text003 +
                                                                  Text004 +
                                                                  Text006);

                                                                // Capacity Calendar
                                                                EntryCounter := 0;
                                                                NoOfRecords := CalendarEntry.COUNT;
                                                                if CalendarEntry.FIND('-') then
                                                                  repeat
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(1,EntryCounter);
                                                                    Window.UPDATE(2,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    CalendarEntry."Work Center Group Code" := "Work Center Group Code";
                                                                    CalendarEntry.MODIFY;
                                                                  until CalendarEntry.NEXT = 0;

                                                                // Capacity Absence
                                                                EntryCounter := 0;
                                                                CalAbsentEntry.SETCURRENTKEY("Work Center No.");
                                                                CalAbsentEntry.SETRANGE("Work Center No.","No.");
                                                                NoOfRecords := CalAbsentEntry.COUNT;
                                                                if CalAbsentEntry.FIND('-') then
                                                                  repeat
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(3,EntryCounter);
                                                                    Window.UPDATE(4,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    CalAbsentEntry."Work Center Group Code" := "Work Center Group Code";
                                                                    CalAbsentEntry.MODIFY;
                                                                  until CalAbsentEntry.NEXT = 0;

                                                                EntryCounter := 0;

                                                                ProdOrderCapNeedEntry.SETCURRENTKEY("Work Center No.");
                                                                ProdOrderCapNeedEntry.SETRANGE("Work Center No.","No.");
                                                                NoOfRecords := ProdOrderCapNeedEntry.COUNT;
                                                                if ProdOrderCapNeedEntry.FIND('-') then
                                                                  repeat
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(7,EntryCounter);
                                                                    Window.UPDATE(8,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    ProdOrderCapNeedEntry."Work Center Group Code" := "Work Center Group Code";
                                                                    ProdOrderCapNeedEntry.MODIFY;
                                                                  until ProdOrderCapNeedEntry.NEXT = 0;

                                                                MODIFY;

                                                                RtngLine.SETCURRENTKEY("Work Center No.");
                                                                RtngLine.SETRANGE("Work Center No.","No.");
                                                                RtngLine.MODIFYALL("Work Center Group Code","Work Center Group Code");

                                                                PlanningRtngLine.SETCURRENTKEY("Work Center No.");
                                                                PlanningRtngLine.SETRANGE("Work Center No.","No.");
                                                                PlanningRtngLine.MODIFYALL("Work Center Group Code","Work Center Group Code");

                                                                ProdOrderRtngLine.SETCURRENTKEY("Work Center No.");
                                                                ProdOrderRtngLine.SETRANGE("Work Center No.","No.");
                                                                ProdOrderRtngLine.MODIFYALL("Work Center Group Code","Work Center Group Code");

                                                                Window.CLOSE;
                                                              END;

                                                   CaptionML=ENU=Work Center Group Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Subcontractor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Subcontractor No. }
    { 19  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 20  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Unit Cost" :=
                                                                  ROUND(
                                                                    "Direct Unit Cost" * (1 + "Indirect Cost %" / 100) + "Overhead Rate",
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                GetGLSetup;
                                                                "Direct Unit Cost" :=
                                                                  ROUND(("Unit Cost" - "Overhead Rate") / (1 + "Indirect Cost %" / 100),
                                                                    GLSetup."Unit-Amount Rounding Precision");
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   DecimalPlaces=2:5;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 22  ;   ;Queue Time          ;Decimal       ;CaptionML=ENU=Queue Time;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 23  ;   ;Queue Time Unit of Meas. Code;Code10;
                                                   TableRelation="Capacity Unit of Measure";
                                                   CaptionML=ENU=Queue Time Unit of Meas. Code }
    { 26  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 27  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Manufacturing Comment Line" WHERE ("Table Name"=CONST("Work Center"),
                                                                                                         "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 30  ;   ;Unit of Measure Code;Code10        ;TableRelation="Capacity Unit of Measure";
                                                   OnValidate=BEGIN
                                                                if "Unit of Measure Code" = xRec."Unit of Measure Code" then
                                                                  exit;

                                                                CALCFIELDS("Prod. Order Need (Qty.)");
                                                                if "Prod. Order Need (Qty.)" <> 0 then
                                                                  ERROR(Text007,FIELDCAPTION("Unit of Measure Code"));

                                                                if xRec."Unit of Measure Code" <> '' then
                                                                  if CurrFieldNo <> 0 then
                                                                    if not CONFIRM(Text001,false,FIELDCAPTION("Unit of Measure Code"))
                                                                    then begin
                                                                      "Unit of Measure Code" := xRec."Unit of Measure Code";
                                                                      exit;
                                                                    end;

                                                                Window.OPEN(
                                                                  Text008 +
                                                                  Text009);

                                                                MODIFY;

                                                                // Capacity Calendar
                                                                EntryCounter := 0;
                                                                CalendarEntry.SETCURRENTKEY("Work Center No.");
                                                                CalendarEntry.SETRANGE("Work Center No.","No.");
                                                                NoOfRecords := CalendarEntry.COUNT;
                                                                if CalendarEntry.FIND('-') then
                                                                  repeat
                                                                    EntryCounter := EntryCounter + 1;
                                                                    Window.UPDATE(1,EntryCounter);
                                                                    Window.UPDATE(2,ROUND(EntryCounter / NoOfRecords * 10000,1));
                                                                    CalendarEntry.VALIDATE("Ending Time");
                                                                    CalendarEntry.MODIFY;
                                                                  until CalendarEntry.NEXT = 0;

                                                                Window.CLOSE;
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 31  ;   ;Capacity            ;Decimal       ;InitValue=1;
                                                   CaptionML=ENU=Capacity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 32  ;   ;Efficiency          ;Decimal       ;InitValue=100;
                                                   CaptionML=ENU=Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 33  ;   ;Maximum Efficiency  ;Decimal       ;CaptionML=ENU=Maximum Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 34  ;   ;Minimum Efficiency  ;Decimal       ;CaptionML=ENU=Minimum Efficiency;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 35  ;   ;Calendar Rounding Precision;Decimal;InitValue=0,0001;
                                                   CaptionML=ENU=Calendar Rounding Precision;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0,0001;
                                                   NotBlank=true }
    { 36  ;   ;Simulation Type     ;Option        ;CaptionML=ENU=Simulation Type;
                                                   OptionCaptionML=ENU=Moves,Moves When Necessary,Critical;
                                                   OptionString=Moves,"Moves When Necessary",Critical }
    { 37  ;   ;Shop Calendar Code  ;Code10        ;TableRelation="Shop Calendar";
                                                   CaptionML=ENU=Shop Calendar Code }
    { 38  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 39  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 40  ;   ;Work Shift Filter   ;Code10        ;FieldClass=FlowFilter;
                                                   TableRelation="Work Shift";
                                                   CaptionML=ENU=Work Shift Filter }
    { 41  ;   ;Capacity (Total)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Total)" WHERE ("Capacity Type"=CONST("Work Center"),
                                                                                                              "No."=FIELD("No."),
                                                                                                              "Work Shift Code"=FIELD("Work Shift Filter"),
                                                                                                              Date=FIELD("Date Filter")));
                                                   CaptionML=ENU=Capacity (Total);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 42  ;   ;Capacity (Effective);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Calendar Entry"."Capacity (Effective)" WHERE ("Capacity Type"=CONST("Work Center"),
                                                                                                                  "No."=FIELD("No."),
                                                                                                                  "Work Shift Code"=FIELD("Work Shift Filter"),
                                                                                                                  Date=FIELD("Date Filter")));
                                                   CaptionML=ENU=Capacity (Effective);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 44  ;   ;Prod. Order Need (Qty.);Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Capacity Need"."Allocated Time" WHERE ("Work Center No."=FIELD("No."),
                                                                                                                       Status=FIELD("Prod. Order Status Filter"),
                                                                                                                       Date=FIELD("Date Filter"),
                                                                                                                       "Requested Only"=CONST(false)));
                                                   CaptionML=ENU=Prod. Order Need (Qty.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 45  ;   ;Prod. Order Need Amount;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Prod. Order Routing Line"."Expected Operation Cost Amt." WHERE ("Work Center No."=FIELD("No."),
                                                                                                                                    Status=FIELD("Prod. Order Status Filter")));
                                                   CaptionML=ENU=Prod. Order Need Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 47  ;   ;Prod. Order Status Filter;Option   ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Prod. Order Status Filter;
                                                   OptionCaptionML=ENU=Simulated,Planned,Firm Planned,Released,Finished;
                                                   OptionString=Simulated,Planned,"Firm Planned",Released,Finished }
    { 50  ;   ;Unit Cost Calculation;Option       ;CaptionML=ENU=Unit Cost Calculation;
                                                   OptionCaptionML=ENU=Time,Units;
                                                   OptionString=Time,Units }
    { 51  ;   ;Specific Unit Cost  ;Boolean       ;CaptionML=ENU=Specific Unit Cost }
    { 52  ;   ;Consolidated Calendar;Boolean      ;CaptionML=ENU=Consolidated Calendar }
    { 53  ;   ;Flushing Method     ;Option        ;InitValue=Manual;
                                                   CaptionML=ENU=Flushing Method;
                                                   OptionCaptionML=ENU=Manual,Forward,Backward;
                                                   OptionString=Manual,Forward,Backward }
    { 80  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 81  ;   ;Overhead Rate       ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Overhead Rate;
                                                   AutoFormatType=2 }
    { 82  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 83  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 84  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 7300;   ;Location Code       ;Code10        ;TableRelation=Location.Code WHERE ("Use As In-Transit"=CONST(false),
                                                                                      "Bin Mandatory"=CONST(true));
                                                   OnValidate=VAR
                                                                Location@1000 : Record Location;
                                                                MachineCenter@1001 : Record "Machine Center";
                                                                WhseIntegrationMgt@1002 : Codeunit "Whse. Integration Management";
                                                                AutoUpdate@1003 : Boolean;
                                                              BEGIN
                                                                if "Location Code" <> xRec."Location Code" then begin
                                                                  if "Location Code" <> '' then begin
                                                                    Location.GET("Location Code");
                                                                    WhseIntegrationMgt.CheckLocationCode(Location,DATABASE::"Work Center","No.");
                                                                  end;

                                                                  if "Open Shop Floor Bin Code" <> '' then begin
                                                                    if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                      VALIDATE("Open Shop Floor Bin Code",'')
                                                                    else
                                                                      TESTFIELD("Open Shop Floor Bin Code",'');
                                                                  end;
                                                                  if "To-Production Bin Code" <> '' then begin
                                                                    if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                      VALIDATE("To-Production Bin Code",'')
                                                                    else
                                                                      TESTFIELD("To-Production Bin Code",'');
                                                                  end;
                                                                  if "From-Production Bin Code" <> '' then begin
                                                                    if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                      VALIDATE("From-Production Bin Code",'')
                                                                    else
                                                                      TESTFIELD("From-Production Bin Code",'');
                                                                  end;
                                                                  MachineCenter.SETCURRENTKEY("Work Center No.");
                                                                  MachineCenter.SETRANGE("Work Center No.","No.");
                                                                  if MachineCenter.FINDSET(true) then
                                                                    repeat
                                                                      MachineCenter."Location Code" := "Location Code";
                                                                      if MachineCenter."Open Shop Floor Bin Code" <> '' then begin
                                                                        if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                          MachineCenter.VALIDATE("Open Shop Floor Bin Code",'')
                                                                        else
                                                                          MachineCenter.TESTFIELD("Open Shop Floor Bin Code",'');
                                                                      end;
                                                                      if MachineCenter."To-Production Bin Code" <> '' then begin
                                                                        if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                          MachineCenter.VALIDATE("To-Production Bin Code",'')
                                                                        else
                                                                          MachineCenter.TESTFIELD("To-Production Bin Code",'');
                                                                      end;
                                                                      if MachineCenter."From-Production Bin Code" <> '' then begin
                                                                        if ConfirmAutoRemovalOfBinCode(AutoUpdate) then
                                                                          MachineCenter.VALIDATE("From-Production Bin Code",'')
                                                                        else
                                                                          MachineCenter.TESTFIELD("From-Production Bin Code",'');
                                                                      end;
                                                                      MachineCenter.MODIFY(true);
                                                                    until MachineCenter.NEXT = 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 7301;   ;Open Shop Floor Bin Code;Code20    ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "Open Shop Floor Bin Code",
                                                                  FIELDCAPTION("Open Shop Floor Bin Code"),
                                                                  DATABASE::"Work Center","No.");
                                                              END;

                                                   CaptionML=ENU=Open Shop Floor Bin Code }
    { 7302;   ;To-Production Bin Code;Code20      ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "To-Production Bin Code",
                                                                  FIELDCAPTION("To-Production Bin Code"),
                                                                  DATABASE::"Work Center","No.");
                                                              END;

                                                   CaptionML=ENU=To-Production Bin Code }
    { 7303;   ;From-Production Bin Code;Code20    ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                WhseIntegrationMgt.CheckBinCode("Location Code",
                                                                  "From-Production Bin Code",
                                                                  FIELDCAPTION("From-Production Bin Code"),
                                                                  DATABASE::"Work Center","No.");
                                                              END;

                                                   CaptionML=ENU=From-Production Bin Code }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Search Name"                            }
    {    ;"Work Center Group Code"                 }
    {    ;"Subcontractor No."                      }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=The Work Center is being used on production orders.';
      Text001@1001 : TextConst 'ENU=Do you want to change %1?';
      Text002@1002 : TextConst 'ENU=Work Center Group Code is changed...\\';
      Text003@1003 : TextConst 'ENU=Calendar Entry    #1###### @2@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'ENU=Calendar Absent.  #3###### @4@@@@@@@@@@@@@\';
      Text006@1005 : TextConst 'ENU=Prod. Order Need  #7###### @8@@@@@@@@@@@@@';
      Text007@1006 : TextConst 'ENU=%1 cannot be changed for scheduled work centers.';
      Text008@1007 : TextConst 'ENU=Capacity Unit of Time is corrected on\\';
      Text009@1008 : TextConst 'ENU=Calendar Entry    #1###### @2@@@@@@@@@@@@@';
      PostCode@1024 : Record "Post Code";
      MfgSetup@1009 : Record "Manufacturing Setup";
      WorkCenter@1010 : Record "Work Center";
      CalendarEntry@1011 : Record "Calendar Entry";
      CalAbsentEntry@1012 : Record "Calendar Absence Entry";
      MfgCommentLine@1013 : Record "Manufacturing Comment Line";
      RtngLine@1014 : Record "Routing Line";
      GLSetup@1022 : Record "General Ledger Setup";
      NoSeriesMgt@1015 : Codeunit NoSeriesManagement;
      DimMgt@1020 : Codeunit DimensionManagement;
      Window@1017 : Dialog;
      EntryCounter@1018 : Integer;
      NoOfRecords@1019 : Integer;
      GLSetupRead@1021 : Boolean;
      Text010@1023 : TextConst '@@@="%1 = Table caption; %2 = Field Value; %3 = Table Caption";ENU=You cannot delete %1 %2 because there is at least one %3 associated with it.';
      Text011@1025 : TextConst 'ENU=If you change the %1, then all bin codes on the %2 and related %3 will be removed. Are you sure that you want to continue?';

    [External]
    PROCEDURE AssistEdit@2(OldWorkCenter@1000 : Record "Work Center") : Boolean;
    BEGIN
      with WorkCenter do begin
        WorkCenter := Rec;
        MfgSetup.GET;
        MfgSetup.TESTFIELD("Work Center Nos.");
        if NoSeriesMgt.SelectSeries(MfgSetup."Work Center Nos.",OldWorkCenter."No. Series","No. Series") then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := WorkCenter;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::"Work Center","No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE ConfirmAutoRemovalOfBinCode@1(VAR AutoUpdate@1000 : Boolean) : Boolean;
    VAR
      MachineCenter@1001 : Record "Machine Center";
    BEGIN
      if AutoUpdate then
        exit(true);

      if CONFIRM(Text011,false,FIELDCAPTION("Location Code"),TABLECAPTION,MachineCenter.TABLECAPTION) then
        AutoUpdate := true;

      exit(AutoUpdate);
    END;

    [External]
    PROCEDURE GetBinCode@9(UseFlushingMethod@1000 : Boolean;FlushingMethod@1001 : 'Manual,Forward,Backward,"Pick + Forward","Pick + Backward"') : Code[20];
    BEGIN
      if not UseFlushingMethod then
        exit("From-Production Bin Code");

      case FlushingMethod of
        FlushingMethod::Manual,
        FlushingMethod::"Pick + Forward",
        FlushingMethod::"Pick + Backward":
          exit("To-Production Bin Code");
        FlushingMethod::Forward,
        FlushingMethod::Backward:
          exit("Open Shop Floor Bin Code");
      end;
    END;

    BEGIN
    END.
  }
}

