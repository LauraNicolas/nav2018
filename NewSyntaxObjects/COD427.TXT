OBJECT Codeunit 427 ICInboxOutboxMgt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "General Ledger Setup"=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
      CompanyInfo@1008 : Record "Company Information";
      DimMgt@1002 : Codeunit DimensionManagement;
      GLSetupFound@1001 : Boolean;
      CompanyInfoFound@1009 : Boolean;
      Text000@1003 : TextConst 'ENU=Do you want to re-create the transaction?';
      Text001@1004 : TextConst 'ENU=%1 %2 does not exist as a %3 in %1 %4.';
      Text002@1005 : TextConst 'ENU=You cannot send IC document because %1 %2 has %3 %4.';
      Text004@1006 : TextConst 'ENU=Transaction %1 for %2 %3 already exists in the %4 table.';
      Text005@1007 : TextConst 'ENU=%1 must be %2 or %3 in order to be re-created.';
      NoItemForCommonItemErr@1010 : TextConst '@@@="%1 = Common Item No value";ENU=There is no Item related to Common Item No. %1';

    [External]
    PROCEDURE CreateOutboxJnlTransaction@1(TempGenJnlLine@1000 : TEMPORARY Record "Gen. Journal Line";Rejection@1002 : Boolean) : Integer;
    VAR
      ICPartner@1001 : Record "IC Partner";
      OutboxJnlTransaction@1003 : Record "IC Outbox Transaction";
      ICTransactionNo@1004 : Integer;
    BEGIN
      ICPartner.GET(TempGenJnlLine."IC Partner Code");
      if ICPartner."Inbox Type" = ICPartner."Inbox Type"::"No IC Transfer" then
        exit(0);

      GLSetup.LOCKTABLE;
      GetGLSetup;
      if GLSetup."Last IC Transaction No." < 0 then
        GLSetup."Last IC Transaction No." := 0;
      ICTransactionNo := GLSetup."Last IC Transaction No." + 1;
      GLSetup."Last IC Transaction No." := ICTransactionNo;
      GLSetup.MODIFY;

      with TempGenJnlLine do begin
        OutboxJnlTransaction.INIT;
        OutboxJnlTransaction."Transaction No." := ICTransactionNo;
        OutboxJnlTransaction."IC Partner Code" := "IC Partner Code";
        OutboxJnlTransaction."Source Type" := OutboxJnlTransaction."Source Type"::"Journal Line";
        OutboxJnlTransaction."Document Type" := "Document Type";
        OutboxJnlTransaction."Document No." := "Document No.";
        OutboxJnlTransaction."Posting Date" := "Posting Date";
        OutboxJnlTransaction."Document Date" := "Document Date";
        OutboxJnlTransaction."IC Partner G/L Acc. No." := "IC Partner G/L Acc. No.";
        OutboxJnlTransaction."Source Line No." := "Source Line No.";
        if Rejection then
          OutboxJnlTransaction."Transaction Source" := OutboxJnlTransaction."Transaction Source"::"Rejected by Current Company"
        else
          OutboxJnlTransaction."Transaction Source" := OutboxJnlTransaction."Transaction Source"::"Created by Current Company";
        OutboxJnlTransaction.INSERT;
      end;
      exit(ICTransactionNo);
    END;

    [External]
    PROCEDURE SendSalesDoc@11(VAR SalesHeader@1000 : Record "Sales Header";Post@1003 : Boolean);
    VAR
      ICPartner@1002 : Record "IC Partner";
    BEGIN
      SalesHeader.TESTFIELD("Send IC Document");
      if SalesHeader."Sell-to IC Partner Code" <> '' then
        ICPartner.GET(SalesHeader."Sell-to IC Partner Code")
      else
        ICPartner.GET(SalesHeader."Bill-to IC Partner Code");
      if ICPartner."Inbox Type" = ICPartner."Inbox Type"::"No IC Transfer" then
        if Post then
          exit
        else
          ERROR(Text002,ICPartner.TABLECAPTION,ICPartner.Code,ICPartner.FIELDCAPTION("Inbox Type"),ICPartner."Inbox Type");
      ICPartner.TESTFIELD(Blocked,false);
      if not Post then
        CODEUNIT.RUN(CODEUNIT::"Release Sales Document",SalesHeader);
      if SalesHeader."Sell-to IC Partner Code" <> '' then
        CreateOutboxSalesDocTrans(SalesHeader,false,Post);
    END;

    [External]
    PROCEDURE SendPurchDoc@16(VAR PurchHeader@1002 : Record "Purchase Header";Post@1003 : Boolean);
    VAR
      ICPartner@1004 : Record "IC Partner";
    BEGIN
      PurchHeader.TESTFIELD("Send IC Document");
      ICPartner.GET(PurchHeader."Buy-from IC Partner Code");
      if ICPartner."Inbox Type" = ICPartner."Inbox Type"::"No IC Transfer" then
        if Post then
          exit
        else
          ERROR(Text002,ICPartner.TABLECAPTION,ICPartner.Code,ICPartner.FIELDCAPTION("Inbox Type"),ICPartner."Inbox Type");
      ICPartner.TESTFIELD(Blocked,false);
      if not Post then
        CODEUNIT.RUN(CODEUNIT::"Release Purchase Document",PurchHeader);
      CreateOutboxPurchDocTrans(PurchHeader,false,Post);
    END;

    [External]
    PROCEDURE CreateOutboxSalesDocTrans@9(SalesHeader@1007 : Record "Sales Header";Rejection@1008 : Boolean;Post@1005 : Boolean);
    VAR
      OutboxTransaction@1006 : Record "IC Outbox Transaction";
      Customer@1003 : Record Customer;
      SalesLine@1002 : Record "Sales Line";
      ICOutBoxSalesHeader@1001 : Record "IC Outbox Sales Header";
      ICOutBoxSalesLine@1000 : Record "IC Outbox Sales Line";
      TransactionNo@1004 : Integer;
      LinesCreated@1011 : Boolean;
    BEGIN
      GLSetup.LOCKTABLE;
      GetGLSetup;
      TransactionNo := GLSetup."Last IC Transaction No." + 1;
      GLSetup."Last IC Transaction No." := TransactionNo;
      GLSetup.MODIFY;
      Customer.GET(SalesHeader."Sell-to Customer No.");
      with SalesHeader do begin
        OutboxTransaction.INIT;
        OutboxTransaction."Transaction No." := TransactionNo;
        OutboxTransaction."IC Partner Code" := Customer."IC Partner Code";
        OutboxTransaction."Source Type" := OutboxTransaction."Source Type"::"Sales Document";
        case "Document Type" of
          "Document Type"::Order:
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::Order;
          "Document Type"::Invoice:
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::Invoice;
          "Document Type"::"Credit Memo":
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::"Credit Memo";
          "Document Type"::"Return Order":
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::"Return Order";
        end;
        OutboxTransaction."Document No." := "No.";
        OutboxTransaction."Posting Date" := "Posting Date";
        OutboxTransaction."Document Date" := "Document Date";
        if Rejection then
          OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Rejected by Current Company"
        else
          OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
        OutboxTransaction.INSERT;
      end;
      ICOutBoxSalesHeader.TRANSFERFIELDS(SalesHeader);
      if OutboxTransaction."Document Type" = OutboxTransaction."Document Type"::Order then
        ICOutBoxSalesHeader."Order No." := SalesHeader."No.";
      ICOutBoxSalesHeader."IC Partner Code" := OutboxTransaction."IC Partner Code";
      ICOutBoxSalesHeader."IC Transaction No." := OutboxTransaction."Transaction No.";
      ICOutBoxSalesHeader."Transaction Source" := OutboxTransaction."Transaction Source";
      AssignCurrencyCodeInOutBoxDoc(ICOutBoxSalesHeader."Currency Code",OutboxTransaction."IC Partner Code");
      DimMgt.CopyDocDimtoICDocDim(DATABASE::"IC Outbox Sales Header",ICOutBoxSalesHeader."IC Transaction No.",
        ICOutBoxSalesHeader."IC Partner Code",ICOutBoxSalesHeader."Transaction Source",0,SalesHeader."Dimension Set ID");

      with ICOutBoxSalesLine do begin
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        if SalesLine.FIND('-') then
          repeat
            INIT;
            TRANSFERFIELDS(SalesLine);
            case SalesLine."Document Type" of
              SalesLine."Document Type"::Order:
                "Document Type" := "Document Type"::Order;
              SalesLine."Document Type"::Invoice:
                "Document Type" := "Document Type"::Invoice;
              SalesLine."Document Type"::"Credit Memo":
                "Document Type" := "Document Type"::"Credit Memo";
              SalesLine."Document Type"::"Return Order":
                "Document Type" := "Document Type"::"Return Order";
            end;
            "IC Transaction No." := OutboxTransaction."Transaction No.";
            "IC Partner Code" := OutboxTransaction."IC Partner Code";
            "Transaction Source" := OutboxTransaction."Transaction Source";
            "Currency Code" := ICOutBoxSalesHeader."Currency Code";
            if SalesLine.Type = SalesLine.Type::" " then
              "IC Partner Reference" := '';
            DimMgt.CopyDocDimtoICDocDim(DATABASE::"IC Outbox Sales Line","IC Transaction No.","IC Partner Code","Transaction Source",
              "Line No.",SalesLine."Dimension Set ID");
            UpdateICOutboxSalesLineReceiptShipment(ICOutBoxSalesLine,ICOutBoxSalesHeader);
            if INSERT(true) then
              LinesCreated := true;
          until SalesLine.NEXT = 0;
      end;

      if LinesCreated then begin
        ICOutBoxSalesHeader.INSERT;
        if not Post then begin
          SalesHeader."IC Status" := SalesHeader."IC Status"::Pending;
          SalesHeader.MODIFY;
        end;
      end;
      ICOutboxTransactionCreated(OutboxTransaction);
    END;

    [External]
    PROCEDURE CreateOutboxSalesInvTrans@33(SalesInvHdr@1007 : Record "Sales Invoice Header");
    VAR
      OutboxTransaction@1006 : Record "IC Outbox Transaction";
      Customer@1003 : Record Customer;
      ICPartner@1008 : Record "IC Partner";
      SalesInvLine@1002 : Record "Sales Invoice Line";
      ICOutBoxSalesHeader@1001 : Record "IC Outbox Sales Header";
      ICOutBoxSalesLine@1000 : Record "IC Outbox Sales Line";
      ICDocDim@1005 : Record "IC Document Dimension";
      ItemCrossReference@1010 : Record "Item Cross Reference";
      Item@1014 : Record Item;
      TransactionNo@1004 : Integer;
      RoundingLineNo@1009 : Integer;
    BEGIN
      Customer.GET(SalesInvHdr."Bill-to Customer No.");
      ICPartner.GET(Customer."IC Partner Code");
      if ICPartner."Inbox Type" = ICPartner."Inbox Type"::"No IC Transfer" then
        exit;

      GLSetup.LOCKTABLE;
      GetGLSetup;
      TransactionNo := GLSetup."Last IC Transaction No." + 1;
      GLSetup."Last IC Transaction No." := TransactionNo;
      GLSetup.MODIFY;
      with SalesInvHdr do begin
        OutboxTransaction.INIT;
        OutboxTransaction."Transaction No." := TransactionNo;
        OutboxTransaction."IC Partner Code" := Customer."IC Partner Code";
        OutboxTransaction."Source Type" := OutboxTransaction."Source Type"::"Sales Document";
        OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::Invoice;
        OutboxTransaction."Document No." := "No.";
        OutboxTransaction."Posting Date" := "Posting Date";
        OutboxTransaction."Document Date" := "Document Date";
        OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
        OutboxTransaction.INSERT;
      end;
      ICOutBoxSalesHeader.TRANSFERFIELDS(SalesInvHdr);
      ICOutBoxSalesHeader."Document Type" := ICOutBoxSalesHeader."Document Type"::Invoice;
      ICOutBoxSalesHeader."IC Partner Code" := OutboxTransaction."IC Partner Code";
      ICOutBoxSalesHeader."IC Transaction No." := OutboxTransaction."Transaction No.";
      ICOutBoxSalesHeader."Transaction Source" := OutboxTransaction."Transaction Source";
      AssignCurrencyCodeInOutBoxDoc(ICOutBoxSalesHeader."Currency Code",OutboxTransaction."IC Partner Code");
      ICOutBoxSalesHeader.INSERT;

      ICDocDim.INIT;
      ICDocDim."Transaction No." := OutboxTransaction."Transaction No.";
      ICDocDim."IC Partner Code" := OutboxTransaction."IC Partner Code";
      ICDocDim."Transaction Source" := OutboxTransaction."Transaction Source";

      CreateICDocDimFromPostedDocDim(ICDocDim,SalesInvHdr."Dimension Set ID",DATABASE::"IC Outbox Sales Header");

      RoundingLineNo := FindRoundingSalesInvLine(SalesInvHdr."No.");
      with ICOutBoxSalesLine do begin
        SalesInvLine.RESET;
        SalesInvLine.SETRANGE("Document No.",SalesInvHdr."No.");
        if RoundingLineNo <> 0 then
          SalesInvLine.SETRANGE("Line No.",0,RoundingLineNo - 1);
        if SalesInvLine.FINDSET then
          repeat
            if (SalesInvLine.Type = SalesInvLine.Type::" ") or (SalesInvLine."No." <> '') then begin
              INIT;
              TRANSFERFIELDS(SalesInvLine);
              "Document Type" := "Document Type"::Invoice;
              "IC Transaction No." := OutboxTransaction."Transaction No.";
              "IC Partner Code" := OutboxTransaction."IC Partner Code";
              "Transaction Source" := OutboxTransaction."Transaction Source";
              "Currency Code" := ICOutBoxSalesHeader."Currency Code";
              if SalesInvLine.Type = SalesInvLine.Type::" " then
                "IC Partner Reference" := '';
              if SalesInvLine.Type = SalesInvLine.Type::"G/L Account" then
                "IC Partner Reference" := SalesInvLine."No.";
              if (SalesInvLine."Bill-to Customer No." <> SalesInvLine."Sell-to Customer No.") and
                 (SalesInvLine.Type = SalesInvLine.Type::Item)
              then
                case ICPartner."Outbound Sales Item No. Type" of
                  ICPartner."Outbound Sales Item No. Type"::"Internal No.":
                    begin
                      "IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                      "IC Partner Reference" := SalesInvLine."No.";
                    end;
                  ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
                    begin
                      VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross reference");
                      ItemCrossReference.SETRANGE("Cross-Reference Type",
                        ItemCrossReference."Cross-Reference Type"::Customer);
                      ItemCrossReference.SETRANGE("Cross-Reference Type No.",SalesInvLine."Bill-to Customer No.");
                      ItemCrossReference.SETRANGE("Item No.",SalesInvLine."No.");
                      if ItemCrossReference.FINDFIRST then
                        "IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
                    end;
                  ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
                    begin
                      Item.GET(SalesInvLine."No.");
                      "IC Partner Reference" := Item."Common Item No.";
                    end;
                end;
              UpdateICOutboxSalesLineReceiptShipment(ICOutBoxSalesLine,ICOutBoxSalesHeader);
              INSERT(true);
              ICDocDim."Line No." := SalesInvLine."Line No.";
              CreateICDocDimFromPostedDocDim(ICDocDim,SalesInvLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
            end;
          until SalesInvLine.NEXT = 0;
      end;

      ICOutboxTransactionCreated(OutboxTransaction);
    END;

    [External]
    PROCEDURE CreateOutboxSalesCrMemoTrans@35(SalesCrMemoHdr@1007 : Record "Sales Cr.Memo Header");
    VAR
      OutboxTransaction@1006 : Record "IC Outbox Transaction";
      Customer@1003 : Record Customer;
      ICPartner@1008 : Record "IC Partner";
      SalesCrMemoLine@1002 : Record "Sales Cr.Memo Line";
      ICOutBoxSalesHeader@1001 : Record "IC Outbox Sales Header";
      ICOutBoxSalesLine@1000 : Record "IC Outbox Sales Line";
      ICDocDim@1005 : Record "IC Document Dimension";
      TransactionNo@1004 : Integer;
      RoundingLineNo@1009 : Integer;
    BEGIN
      Customer.GET(SalesCrMemoHdr."Bill-to Customer No.");
      ICPartner.GET(Customer."IC Partner Code");
      if ICPartner."Inbox Type" = ICPartner."Inbox Type"::"No IC Transfer" then
        exit;

      GLSetup.LOCKTABLE;
      GetGLSetup;
      TransactionNo := GLSetup."Last IC Transaction No." + 1;
      GLSetup."Last IC Transaction No." := TransactionNo;
      GLSetup.MODIFY;
      with SalesCrMemoHdr do begin
        OutboxTransaction.INIT;
        OutboxTransaction."Transaction No." := TransactionNo;
        OutboxTransaction."IC Partner Code" := Customer."IC Partner Code";
        OutboxTransaction."Source Type" := OutboxTransaction."Source Type"::"Sales Document";
        OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::"Credit Memo";
        OutboxTransaction."Document No." := "No.";
        OutboxTransaction."Posting Date" := "Posting Date";
        OutboxTransaction."Document Date" := "Document Date";
        OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
        OutboxTransaction.INSERT;
      end;
      ICOutBoxSalesHeader.TRANSFERFIELDS(SalesCrMemoHdr);
      ICOutBoxSalesHeader."Document Type" := ICOutBoxSalesHeader."Document Type"::"Credit Memo";
      ICOutBoxSalesHeader."IC Partner Code" := OutboxTransaction."IC Partner Code";
      ICOutBoxSalesHeader."IC Transaction No." := OutboxTransaction."Transaction No.";
      ICOutBoxSalesHeader."Transaction Source" := OutboxTransaction."Transaction Source";
      AssignCurrencyCodeInOutBoxDoc(ICOutBoxSalesHeader."Currency Code",OutboxTransaction."IC Partner Code");
      ICOutBoxSalesHeader.INSERT;

      ICDocDim.INIT;
      ICDocDim."Transaction No." := OutboxTransaction."Transaction No.";
      ICDocDim."IC Partner Code" := OutboxTransaction."IC Partner Code";
      ICDocDim."Transaction Source" := OutboxTransaction."Transaction Source";

      CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoHdr."Dimension Set ID",DATABASE::"IC Outbox Sales Header");

      RoundingLineNo := FindRoundingSalesCrMemoLine(SalesCrMemoHdr."No.");
      with ICOutBoxSalesLine do begin
        SalesCrMemoLine.RESET;
        SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHdr."No.");
        if RoundingLineNo <> 0 then
          SalesCrMemoLine.SETRANGE("Line No.",0,RoundingLineNo - 1);
        if SalesCrMemoLine.FINDSET then
          repeat
            if (SalesCrMemoLine.Type = SalesCrMemoLine.Type::" ") or (SalesCrMemoLine."No." <> '') then begin
              INIT;
              TRANSFERFIELDS(SalesCrMemoLine);
              "Document Type" := "Document Type"::"Credit Memo";
              "IC Transaction No." := OutboxTransaction."Transaction No.";
              "IC Partner Code" := OutboxTransaction."IC Partner Code";
              "Transaction Source" := OutboxTransaction."Transaction Source";
              "Currency Code" := ICOutBoxSalesHeader."Currency Code";
              if SalesCrMemoLine.Type = SalesCrMemoLine.Type::" " then
                "IC Partner Reference" := '';
              UpdateICOutboxSalesLineReceiptShipment(ICOutBoxSalesLine,ICOutBoxSalesHeader);
              INSERT(true);
              ICDocDim."Line No." := SalesCrMemoLine."Line No.";
              CreateICDocDimFromPostedDocDim(ICDocDim,SalesCrMemoLine."Dimension Set ID",DATABASE::"IC Outbox Sales Line");
            end;
          until SalesCrMemoLine.NEXT = 0;
      end;
      ICOutboxTransactionCreated(OutboxTransaction);
    END;

    [External]
    PROCEDURE CreateOutboxPurchDocTrans@10(PurchHeader@1007 : Record "Purchase Header";Rejection@1008 : Boolean;Post@1012 : Boolean);
    VAR
      OutboxTransaction@1010 : Record "IC Outbox Transaction";
      Vendor@1006 : Record Vendor;
      PurchLine@1005 : Record "Purchase Line";
      ICOutBoxPurchHeader@1004 : Record "IC Outbox Purchase Header";
      ICOutBoxPurchLine@1003 : Record "IC Outbox Purchase Line";
      TransactionNo@1000 : Integer;
      LinesCreated@1011 : Boolean;
    BEGIN
      GLSetup.LOCKTABLE;
      GetGLSetup;
      TransactionNo := GLSetup."Last IC Transaction No." + 1;
      GLSetup."Last IC Transaction No." := TransactionNo;
      GLSetup.MODIFY;
      Vendor.GET(PurchHeader."Buy-from Vendor No.");
      Vendor.CheckBlockedVendOnDocs(Vendor,false);
      with PurchHeader do begin
        OutboxTransaction.INIT;
        OutboxTransaction."Transaction No." := TransactionNo;
        OutboxTransaction."IC Partner Code" := Vendor."IC Partner Code";
        OutboxTransaction."Source Type" := OutboxTransaction."Source Type"::"Purchase Document";
        case "Document Type" of
          "Document Type"::Order:
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::Order;
          "Document Type"::Invoice:
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::Invoice;
          "Document Type"::"Credit Memo":
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::"Credit Memo";
          "Document Type"::"Return Order":
            OutboxTransaction."Document Type" := OutboxTransaction."Document Type"::"Return Order";
        end;
        OutboxTransaction."Document No." := "No.";
        OutboxTransaction."Posting Date" := "Posting Date";
        OutboxTransaction."Document Date" := "Document Date";
        if Rejection then
          OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Rejected by Current Company"
        else
          OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
        OutboxTransaction.INSERT;
      end;
      ICOutBoxPurchHeader.TRANSFERFIELDS(PurchHeader);
      ICOutBoxPurchHeader."IC Transaction No." := OutboxTransaction."Transaction No.";
      ICOutBoxPurchHeader."IC Partner Code" := OutboxTransaction."IC Partner Code";
      ICOutBoxPurchHeader."Transaction Source" := OutboxTransaction."Transaction Source";

      GetCompanyInfo;
      AssignCurrencyCodeInOutBoxDoc(ICOutBoxPurchHeader."Currency Code",OutboxTransaction."IC Partner Code");
      DimMgt.CopyDocDimtoICDocDim(DATABASE::"IC Outbox Purchase Header",ICOutBoxPurchHeader."IC Transaction No.",
        ICOutBoxPurchHeader."IC Partner Code",ICOutBoxPurchHeader."Transaction Source",0,PurchHeader."Dimension Set ID");
      with ICOutBoxPurchLine do begin
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        if PurchLine.FIND('-') then
          repeat
            INIT;
            TRANSFERFIELDS(PurchLine);
            case PurchLine."Document Type" of
              PurchLine."Document Type"::Order:
                "Document Type" := "Document Type"::Order;
              PurchLine."Document Type"::Invoice:
                "Document Type" := "Document Type"::Invoice;
              PurchLine."Document Type"::"Credit Memo":
                "Document Type" := "Document Type"::"Credit Memo";
              PurchLine."Document Type"::"Return Order":
                "Document Type" := "Document Type"::"Return Order";
            end;
            "IC Partner Code" := OutboxTransaction."IC Partner Code";
            "IC Transaction No." := OutboxTransaction."Transaction No.";
            "Transaction Source" := OutboxTransaction."Transaction Source";
            "Currency Code" := ICOutBoxPurchHeader."Currency Code";
            DimMgt.CopyDocDimtoICDocDim(
              DATABASE::"IC Outbox Purchase Line","IC Transaction No.","IC Partner Code","Transaction Source",
              "Line No.",PurchLine."Dimension Set ID");
            if PurchLine.Type = PurchLine.Type::" " then
              "IC Partner Reference" := '';
            if INSERT(true) then
              LinesCreated := true;
          until PurchLine.NEXT = 0;
      end;

      if LinesCreated then begin
        ICOutBoxPurchHeader.INSERT;
        if not Post then begin
          PurchHeader."IC Status" := PurchHeader."IC Status"::Pending;
          PurchHeader.MODIFY;
        end;
      end;
      ICOutboxTransactionCreated(OutboxTransaction);
    END;

    [External]
    PROCEDURE CreateOutboxJnlLine@2(TransactionNo@1000 : Integer;TransactionSource@1006 : '"Rejected by Current Company"," Created by Current Company"';TempGenJnlLine@1001 : TEMPORARY Record "Gen. Journal Line");
    VAR
      OutboxJnlLine@1003 : Record "IC Outbox Jnl. Line";
      ICOutboxTransaction@1002 : Record "IC Outbox Transaction";
      DimMgt@1004 : Codeunit DimensionManagement;
    BEGIN
      GetGLSetup;
      with TempGenJnlLine do begin
        if (("Bal. Account Type" in
             ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"IC Partner"]) and
            ("Bal. Account No." <> '')) or
           (("Account Type" = "Account Type"::"G/L Account") and ("IC Partner G/L Acc. No." <> '')) or
           (("Account Type" = "Account Type"::"Bank Account") and ("IC Partner G/L Acc. No." <> ''))
        then
          CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);
        if ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"]) and
           ("Account No." <> '')
        then begin
          OutboxJnlLine.INIT;
          OutboxJnlLine."Transaction No." := TransactionNo;
          OutboxJnlLine."IC Partner Code" := "IC Partner Code";
          OutboxJnlLine."Line No." := 0;
          OutboxJnlLine."Transaction Source" := TransactionSource;
          case "Account Type" of
            "Account Type"::Customer:
              OutboxJnlLine."Account Type" := OutboxJnlLine."Account Type"::Customer;
            "Account Type"::Vendor:
              OutboxJnlLine."Account Type" := OutboxJnlLine."Account Type"::Vendor;
            "Account Type"::"IC Partner":
              OutboxJnlLine."Account Type" := OutboxJnlLine."Account Type"::"IC Partner";
          end;
          OutboxJnlLine."Account No." := "Account No.";
          OutboxJnlLine.Amount := Amount;
          OutboxJnlLine."VAT Amount" := "VAT Amount";
          OutboxJnlLine.Description := Description;
          OutboxJnlLine."Currency Code" := "Currency Code";
          OutboxJnlLine."Due Date" := "Due Date";
          OutboxJnlLine."Payment Discount %" := "Payment Discount %";
          OutboxJnlLine."Payment Discount Date" := "Pmt. Discount Date";
          OutboxJnlLine.Quantity := Quantity;
          OutboxJnlLine."Document No." := "Document No.";
          DimMgt.CopyJnlLineDimToICJnlDim(
            DATABASE::"IC Outbox Jnl. Line",TransactionNo,"IC Partner Code",
            OutboxJnlLine."Transaction Source",OutboxJnlLine."Line No.","Dimension Set ID");
          OutboxJnlLine.INSERT;
        end;
        if "IC Partner G/L Acc. No." <> '' then begin
          OutboxJnlLine.INIT;
          OutboxJnlLine."Transaction No." := TransactionNo;
          OutboxJnlLine."IC Partner Code" := "IC Partner Code";
          OutboxJnlLine."Line No." := "Line No.";
          OutboxJnlLine."Transaction Source" := TransactionSource;
          OutboxJnlLine."Account Type" := OutboxJnlLine."Account Type"::"G/L Account";
          OutboxJnlLine."Account No." := "IC Partner G/L Acc. No.";
          OutboxJnlLine.Amount := -Amount;
          OutboxJnlLine."VAT Amount" := "Bal. VAT Amount";
          OutboxJnlLine.Description := Description;
          OutboxJnlLine."Currency Code" := "Currency Code";
          OutboxJnlLine.Quantity := Quantity;
          OutboxJnlLine."Document No." := "Document No.";
          DimMgt.CopyJnlLineDimToICJnlDim(
            DATABASE::"IC Outbox Jnl. Line",TransactionNo,"IC Partner Code",
            OutboxJnlLine."Transaction Source","Line No.","Dimension Set ID");
          OutboxJnlLine.INSERT;
        end;
        ICOutboxTransaction.GET(TransactionNo,"IC Partner Code",TransactionSource,"Document Type");
        ICOutboxTransactionCreated(ICOutboxTransaction);
      end
    END;

    [External]
    PROCEDURE TranslateICGLAccount@6(ICAccNo@1000 : Code[30]) : Code[20];
    VAR
      ICGLAcc@1002 : Record "IC G/L Account";
    BEGIN
      ICGLAcc.GET(ICAccNo);
      exit(ICGLAcc."Map-to G/L Acc. No.");
    END;

    [External]
    PROCEDURE TranslateICPartnerToVendor@14(ICPartnerCode@1000 : Code[20]) : Code[20];
    VAR
      ICPartner@1001 : Record "IC Partner";
    BEGIN
      ICPartner.GET(ICPartnerCode);
      exit(ICPartner."Vendor No.");
    END;

    [External]
    PROCEDURE TranslateICPartnerToCustomer@15(ICPartnerCode@1000 : Code[20]) : Code[20];
    VAR
      ICPartner@1001 : Record "IC Partner";
    BEGIN
      ICPartner.GET(ICPartnerCode);
      exit(ICPartner."Customer No.");
    END;

    [External]
    PROCEDURE CreateJournalLines@5(InboxTransaction@1000 : Record "IC Inbox Transaction";InboxJnlLine@1002 : Record "IC Inbox Jnl. Line";VAR TempGenJnlLine@1004 : TEMPORARY Record "Gen. Journal Line";GenJnlTemplate@1009 : Record "Gen. Journal Template");
    VAR
      GenJnlLine2@1001 : Record "Gen. Journal Line";
      InOutBoxJnlLineDim@1005 : Record "IC Inbox/Outbox Jnl. Line Dim.";
      TempInOutBoxJnlLineDim@1006 : TEMPORARY Record "IC Inbox/Outbox Jnl. Line Dim.";
      HandledInboxJnlLine@1003 : Record "Handled IC Inbox Jnl. Line";
      DimMgt@1007 : Codeunit DimensionManagement;
    BEGIN
      GetGLSetup;
      with GenJnlLine2 do
        if InboxTransaction."Transaction Source" = InboxTransaction."Transaction Source"::"Created by Partner" then begin
          INIT;
          "Journal Template Name" := TempGenJnlLine."Journal Template Name";
          "Journal Batch Name" := TempGenJnlLine."Journal Batch Name";
          if TempGenJnlLine."Posting Date" <> 0D then
            "Posting Date" := TempGenJnlLine."Posting Date"
          else
            "Posting Date" := InboxTransaction."Posting Date";
          "Document Type" := InboxTransaction."Document Type";
          "Document No." := TempGenJnlLine."Document No.";
          "Source Code" := GenJnlTemplate."Source Code";
          "Line No." := TempGenJnlLine."Line No." + 10000;
          case InboxJnlLine."Account Type" of
            InboxJnlLine."Account Type"::"G/L Account":
              begin
                "Account Type" := "Account Type"::"G/L Account";
                VALIDATE("Account No.",TranslateICGLAccount(InboxJnlLine."Account No."));
              end;
            InboxJnlLine."Account Type"::Customer:
              begin
                "Account Type" := "Account Type"::Customer;
                VALIDATE("Account No.",TranslateICPartnerToCustomer(InboxJnlLine."IC Partner Code"));
              end;
            InboxJnlLine."Account Type"::Vendor:
              begin
                "Account Type" := "Account Type"::Vendor;
                VALIDATE("Account No.",TranslateICPartnerToVendor(InboxJnlLine."IC Partner Code"));
              end;
            InboxJnlLine."Account Type"::"IC Partner":
              begin
                "Account Type" := "Account Type"::"IC Partner";
                VALIDATE("Account No.",InboxJnlLine."IC Partner Code");
              end;
          end;
          if InboxJnlLine.Description <> '' then
            Description := InboxJnlLine.Description;
          if InboxJnlLine."Currency Code" = GLSetup."LCY Code" then
            InboxJnlLine."Currency Code" := '';
          VALIDATE("Currency Code",InboxJnlLine."Currency Code");
          VALIDATE(Amount,InboxJnlLine.Amount);
          if ("VAT Amount" <> InboxJnlLine."VAT Amount") and
             ("VAT Amount" <> 0) and (InboxJnlLine."VAT Amount" <> 0)
          then
            VALIDATE("VAT Amount",InboxJnlLine."VAT Amount");
          "Due Date" := InboxJnlLine."Due Date";
          VALIDATE("Payment Discount %",InboxJnlLine."Payment Discount %");
          VALIDATE("Pmt. Discount Date",InboxJnlLine."Payment Discount Date");
          Quantity := InboxJnlLine.Quantity;
          "IC Direction" := TempGenJnlLine."IC Direction"::Incoming;
          "IC Partner Transaction No." := InboxJnlLine."Transaction No.";
          "External Document No." := InboxJnlLine."Document No.";
          INSERT;
          InOutBoxJnlLineDim.SETRANGE("Table ID",DATABASE::"IC Inbox Jnl. Line");
          InOutBoxJnlLineDim.SETRANGE("Transaction No.",InboxTransaction."Transaction No.");
          InOutBoxJnlLineDim.SETRANGE("Line No.",InboxJnlLine."Line No.");
          InOutBoxJnlLineDim.SETRANGE("IC Partner Code",InboxTransaction."IC Partner Code");
          TempInOutBoxJnlLineDim.DELETEALL;
          DimMgt.CopyICJnlDimToICJnlDim(InOutBoxJnlLineDim,TempInOutBoxJnlLineDim);
          "Dimension Set ID" := DimMgt.CreateDimSetIDFromICJnlLineDim(TempInOutBoxJnlLineDim);
          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
            "Shortcut Dimension 2 Code");
          MODIFY;
          HandledInboxJnlLine.TRANSFERFIELDS(InboxJnlLine);
          HandledInboxJnlLine.INSERT;
          TempGenJnlLine."Line No." := "Line No.";
        end;
    END;

    [External]
    PROCEDURE CreateSalesDocument@13(ICInboxSalesHeader@1000 : Record "IC Inbox Sales Header";ReplacePostingDate@1011 : Boolean;PostingDate@1010 : Date);
    VAR
      ICInboxSalesLine@1001 : Record "IC Inbox Sales Line";
      SalesHeader@1002 : Record "Sales Header";
      ICDocDim@1004 : Record "IC Document Dimension";
      ICDocDim2@1009 : Record "IC Document Dimension";
      HandledICInboxSalesHeader@1007 : Record "Handled IC Inbox Sales Header";
      HandledICInboxSalesLine@1008 : Record "Handled IC Inbox Sales Line";
    BEGIN
      with ICInboxSalesHeader do begin
        SalesHeader.INIT;
        SalesHeader."No." := '';
        SalesHeader."Document Type" := "Document Type";
        SalesHeader.INSERT(true);
        SalesHeader.VALIDATE("IC Direction",SalesHeader."IC Direction"::Incoming);
        SalesHeader.VALIDATE("Sell-to Customer No.","Sell-to Customer No.");
        if SalesHeader."Bill-to Customer No." <> "Bill-to Customer No." then
          SalesHeader.VALIDATE("Bill-to Customer No.","Bill-to Customer No.");
        SalesHeader."External Document No." := "No.";
        SalesHeader."Ship-to Name" := "Ship-to Name";
        SalesHeader."Ship-to Address" := "Ship-to Address";
        SalesHeader."Ship-to Address 2" := "Ship-to Address 2";
        SalesHeader."Ship-to City" := "Ship-to City";
        SalesHeader."Ship-to Post Code" := "Ship-to Post Code";
        if ReplacePostingDate then
          SalesHeader.VALIDATE("Posting Date",PostingDate)
        else
          SalesHeader.VALIDATE("Posting Date","Posting Date");
        GetCurrency("Currency Code");
        SalesHeader.VALIDATE("Currency Code","Currency Code");
        SalesHeader.VALIDATE("Document Date","Document Date");
        SalesHeader.VALIDATE("Prices Including VAT","Prices Including VAT");
        SalesHeader.MODIFY;
        SalesHeader.VALIDATE("Due Date","Due Date");
        SalesHeader.VALIDATE("Payment Discount %","Payment Discount %");
        SalesHeader.VALIDATE("Pmt. Discount Date","Pmt. Discount Date");
        SalesHeader.VALIDATE("Requested Delivery Date","Requested Delivery Date");
        SalesHeader.VALIDATE("Promised Delivery Date","Promised Delivery Date");
        SalesHeader."Shortcut Dimension 1 Code" := '';
        SalesHeader."Shortcut Dimension 2 Code" := '';

        DimMgt.SetICDocDimFilters(
          ICDocDim,DATABASE::"IC Inbox Sales Header","IC Transaction No.",
          "IC Partner Code","Transaction Source",0);
        SalesHeader."Dimension Set ID" := DimMgt.CreateDimSetIDFromICDocDim(ICDocDim);
        DimMgt.UpdateGlobalDimFromDimSetID(SalesHeader."Dimension Set ID",SalesHeader."Shortcut Dimension 1 Code",
          SalesHeader."Shortcut Dimension 2 Code");
        SalesHeader.MODIFY;

        HandledICInboxSalesHeader.TRANSFERFIELDS(ICInboxSalesHeader);
        HandledICInboxSalesHeader.INSERT;
        if ICDocDim.FIND('-') then
          DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Header","Transaction Source");
      end;

      with ICInboxSalesLine do  begin
        SETRANGE("IC Transaction No.",ICInboxSalesHeader."IC Transaction No.");
        SETRANGE("IC Partner Code",ICInboxSalesHeader."IC Partner Code");
        SETRANGE("Transaction Source",ICInboxSalesHeader."Transaction Source");
        if FIND('-') then
          repeat
            CreateSalesLines(SalesHeader,ICInboxSalesLine);
            HandledICInboxSalesLine.TRANSFERFIELDS(ICInboxSalesLine);
            HandledICInboxSalesLine.INSERT;
            DimMgt.SetICDocDimFilters(
              ICDocDim,DATABASE::"IC Inbox Sales Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
            if ICDocDim.FIND('-') then
              DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Line","Transaction Source");
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CreateSalesLines@19(SalesHeader@1001 : Record "Sales Header";ICInboxSalesLine@1000 : Record "IC Inbox Sales Line");
    VAR
      SalesLine@1002 : Record "Sales Line";
      ICDocDim@1004 : Record "IC Document Dimension";
      ItemCrossReference@1006 : Record "Item Cross Reference";
      Currency@1007 : Record Currency;
      Precision@1008 : Decimal;
      Precision2@1009 : Decimal;
    BEGIN
      with ICInboxSalesLine do begin
        SalesLine.INIT;
        SalesLine.TRANSFERFIELDS(ICInboxSalesLine);
        SalesLine."Document Type" := SalesHeader."Document Type";
        SalesLine."Document No." := SalesHeader."No.";
        SalesLine."Line No." := "Line No.";
        SalesLine.INSERT(true);
        case "IC Partner Ref. Type" of
          "IC Partner Ref. Type"::"Common Item No.":
            begin
              SalesLine.Type := SalesLine.Type::Item;
              SalesLine."No." := GetItemFromCommonItem("IC Partner Reference");
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("No.",SalesLine."No.")
              else
                SalesLine."No." := "IC Partner Reference";
            end;
          "IC Partner Ref. Type"::"Cross reference":
            begin
              SalesLine.VALIDATE(Type,SalesLine.Type::Item);
              SalesLine.VALIDATE("Cross-Reference No.","IC Partner Reference");
            end;
          "IC Partner Ref. Type"::Item,"IC Partner Ref. Type"::"Vendor Item No.":
            begin
              SalesLine.VALIDATE(Type,SalesLine.Type::Item);
              SalesLine."No." :=
                GetItemFromRef(
                  "IC Partner Reference",ItemCrossReference."Cross-Reference Type"::Customer,SalesHeader."Sell-to Customer No.");
              if SalesLine."No." <> '' then
                SalesLine.VALIDATE("No.",SalesLine."No.")
              else
                SalesLine."No." := "IC Partner Reference";
            end;
          "IC Partner Ref. Type"::"G/L Account":
            begin
              SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
              SalesLine.VALIDATE("No.",TranslateICGLAccount("IC Partner Reference"));
            end;
          "IC Partner Ref. Type"::"Charge (Item)":
            begin
              SalesLine.Type := SalesLine.Type::"Charge (Item)";
              SalesLine.VALIDATE("No.","IC Partner Reference");
            end;
        end;
        SalesLine."Currency Code" := SalesHeader."Currency Code";
        SalesLine.Description := Description;
        if (SalesLine.Type <> SalesLine.Type::" ") and (Quantity <> 0) then begin
          if Currency.GET(SalesHeader."Currency Code") then begin
            Precision := Currency."Unit-Amount Rounding Precision";
            Precision2 := Currency."Amount Rounding Precision";
          end else begin
            GLSetup.GET;
            if GLSetup."Unit-Amount Rounding Precision" <> 0 then
              Precision := GLSetup."Unit-Amount Rounding Precision"
            else
              Precision := 0.01;
            if GLSetup."Amount Rounding Precision" <> 0 then
              Precision2 := GLSetup."Amount Rounding Precision"
            else
              Precision2 := 0.01;
          end;
          SalesLine.VALIDATE(Quantity,Quantity);
          SalesLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
          if SalesHeader."Prices Including VAT" then
            SalesLine.VALIDATE("Unit Price",ROUND("Amount Including VAT" / Quantity,Precision))
          else
            SalesLine.VALIDATE("Unit Price",
              ROUND((("Amount Including VAT" / (1 + (SalesLine."VAT %" / 100))) + "Line Discount Amount") / Quantity,Precision));
          SalesLine.VALIDATE("Line Discount Amount","Line Discount Amount");
          SalesLine."Amount Including VAT" := "Amount Including VAT";
          SalesLine."VAT Base Amount" := ROUND("Amount Including VAT" / (1 + (SalesLine."VAT %" / 100)),Precision2);
          if SalesHeader."Prices Including VAT" then
            SalesLine."Line Amount" := "Amount Including VAT"
          else
            SalesLine."Line Amount" := ROUND("Amount Including VAT" / (1 + (SalesLine."VAT %" / 100)),Precision2);
          SalesLine."Line Discount %" := "Line Discount %";
          SalesLine.VALIDATE("Requested Delivery Date","Requested Delivery Date");
          SalesLine.VALIDATE("Promised Delivery Date","Promised Delivery Date");
          UpdateSalesLineICPartnerReference(SalesLine,SalesHeader,ICInboxSalesLine);
        end;
        SalesLine."Shortcut Dimension 1 Code" := '';
        SalesLine."Shortcut Dimension 2 Code" := '';

        DimMgt.SetICDocDimFilters(
          ICDocDim,DATABASE::"IC Inbox Sales Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");

        SalesLine."Dimension Set ID" := DimMgt.CreateDimSetIDFromICDocDim(ICDocDim);
        DimMgt.UpdateGlobalDimFromDimSetID(SalesLine."Dimension Set ID",SalesLine."Shortcut Dimension 1 Code",
          SalesLine."Shortcut Dimension 2 Code");
        SalesLine.MODIFY;
      end;
    END;

    [External]
    PROCEDURE CreatePurchDocument@22(ICInboxPurchHeader@1000 : Record "IC Inbox Purchase Header";ReplacePostingDate@1011 : Boolean;PostingDate@1010 : Date);
    VAR
      ICInboxPurchLine@1005 : Record "IC Inbox Purchase Line";
      PurchHeader@1004 : Record "Purchase Header";
      ICDocDim@1002 : Record "IC Document Dimension";
      ICDocDim2@1009 : Record "IC Document Dimension";
      HandledICInboxPurchHeader@1008 : Record "Handled IC Inbox Purch. Header";
      HandledICInboxPurchLine@1007 : Record "Handled IC Inbox Purch. Line";
    BEGIN
      with ICInboxPurchHeader do begin
        PurchHeader.INIT;
        PurchHeader."No." := '';
        PurchHeader."Document Type" := "Document Type";
        PurchHeader.INSERT(true);
        PurchHeader.VALIDATE("IC Direction",PurchHeader."IC Direction"::Incoming);
        PurchHeader.VALIDATE("Buy-from Vendor No.","Buy-from Vendor No.");
        if "Pay-to Vendor No." <> PurchHeader."Pay-to Vendor No." then
          PurchHeader.VALIDATE("Pay-to Vendor No.","Pay-to Vendor No.");
        case "Document Type" of
          "Document Type"::Order,"Document Type"::"Return Order":
            PurchHeader."Vendor Order No." := "No.";
          "Document Type"::Invoice:
            PurchHeader."Vendor Invoice No." := "No.";
          "Document Type"::"Credit Memo":
            PurchHeader."Vendor Cr. Memo No." := "No.";
        end;
        PurchHeader."Your Reference" := "Your Reference";
        PurchHeader."Ship-to Name" := "Ship-to Name";
        PurchHeader."Ship-to Address" := "Ship-to Address";
        PurchHeader."Ship-to Address 2" := "Ship-to Address 2";
        PurchHeader."Ship-to City" := "Ship-to City";
        PurchHeader."Ship-to Post Code" := "Ship-to Post Code";
        PurchHeader."Vendor Order No." := "Vendor Order No.";
        if ReplacePostingDate then
          PurchHeader.VALIDATE("Posting Date",PostingDate)
        else
          PurchHeader.VALIDATE("Posting Date","Posting Date");
        GetCurrency("Currency Code");
        PurchHeader.VALIDATE("Currency Code","Currency Code");
        PurchHeader.VALIDATE("Document Date","Document Date");
        PurchHeader.VALIDATE("Requested Receipt Date","Requested Receipt Date");
        PurchHeader.VALIDATE("Promised Receipt Date","Promised Receipt Date");
        PurchHeader.VALIDATE("Prices Including VAT","Prices Including VAT");
        PurchHeader.VALIDATE("Due Date","Due Date");
        PurchHeader.VALIDATE("Payment Discount %","Payment Discount %");
        PurchHeader.VALIDATE("Pmt. Discount Date","Pmt. Discount Date");
        PurchHeader."Shortcut Dimension 1 Code" := '';
        PurchHeader."Shortcut Dimension 2 Code" := '';
        PurchHeader.MODIFY;

        DimMgt.SetICDocDimFilters(
          ICDocDim,DATABASE::"IC Inbox Purchase Header","IC Transaction No.","IC Partner Code","Transaction Source",0);
        GLSetup.GET;

        PurchHeader."Dimension Set ID" := DimMgt.CreateDimSetIDFromICDocDim(ICDocDim);
        DimMgt.UpdateGlobalDimFromDimSetID(PurchHeader."Dimension Set ID",PurchHeader."Shortcut Dimension 1 Code",
          PurchHeader."Shortcut Dimension 2 Code");
        PurchHeader.MODIFY;

        HandledICInboxPurchHeader.TRANSFERFIELDS(ICInboxPurchHeader);
        HandledICInboxPurchHeader.INSERT;
        if ICDocDim.FIND('-') then
          DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Header","Transaction Source");
      end;

      with ICInboxPurchLine do  begin
        SETRANGE("IC Transaction No.",ICInboxPurchHeader."IC Transaction No.");
        SETRANGE("IC Partner Code",ICInboxPurchHeader."IC Partner Code");
        SETRANGE("Transaction Source",ICInboxPurchHeader."Transaction Source");
        if FIND('-') then
          repeat
            CreatePurchLines(PurchHeader,ICInboxPurchLine);
            HandledICInboxPurchLine.TRANSFERFIELDS(ICInboxPurchLine);
            HandledICInboxPurchLine.INSERT;
            DimMgt.SetICDocDimFilters(
              ICDocDim,DATABASE::"IC Inbox Purchase Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
            if ICDocDim.FIND('-') then
              DimMgt.MoveICDocDimtoICDocDim(ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Line","Transaction Source");
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CreatePurchLines@21(PurchHeader@1001 : Record "Purchase Header";ICInboxPurchLine@1000 : Record "IC Inbox Purchase Line");
    VAR
      PurchLine@1004 : Record "Purchase Line";
      ICDocDim@1003 : Record "IC Document Dimension";
      ItemCrossReference@1010 : Record "Item Cross Reference";
      Currency@1012 : Record Currency;
      Precision@1011 : Decimal;
      Precision2@1013 : Decimal;
    BEGIN
      with ICInboxPurchLine do begin
        PurchLine.INIT;
        PurchLine.TRANSFERFIELDS(ICInboxPurchLine);
        PurchLine."Document Type" := PurchHeader."Document Type";
        PurchLine."Document No." := PurchHeader."No.";
        PurchLine."Line No." := "Line No.";
        PurchLine."Receipt No." := '';
        PurchLine."Return Shipment No." := '';
        case "IC Partner Ref. Type" of
          "IC Partner Ref. Type"::"Common Item No.":
            begin
              PurchLine.Type := PurchLine.Type::Item;
              PurchLine."No." := GetItemFromCommonItem("IC Partner Reference");
              if PurchLine."No." <> '' then
                PurchLine.VALIDATE("No.",PurchLine."No.")
              else
                PurchLine."No." := "IC Partner Reference";
            end;
          "IC Partner Ref. Type"::Item:
            begin
              PurchLine.VALIDATE(Type,PurchLine.Type::Item);
              PurchLine."No." :=
                GetItemFromRef(
                  "IC Partner Reference",ItemCrossReference."Cross-Reference Type"::Vendor,PurchHeader."Buy-from Vendor No.");
              if PurchLine."No." <> '' then
                PurchLine.VALIDATE("No.",PurchLine."No.")
              else
                PurchLine."No." := "IC Partner Reference";
            end;
          "IC Partner Ref. Type"::"G/L Account":
            begin
              PurchLine.VALIDATE(Type,PurchLine.Type::"G/L Account");
              PurchLine.VALIDATE("No.",TranslateICGLAccount("IC Partner Reference"));
            end;
          "IC Partner Ref. Type"::"Charge (Item)":
            begin
              PurchLine.Type := PurchLine.Type::"Charge (Item)";
              PurchLine.VALIDATE("No.","IC Partner Reference");
            end;
          "IC Partner Ref. Type"::"Cross reference":
            begin
              PurchLine.VALIDATE(Type,PurchLine.Type::Item);
              PurchLine.VALIDATE("Cross-Reference No.","IC Partner Reference");
            end;
        end;
        PurchLine."Currency Code" := PurchHeader."Currency Code";
        PurchLine.Description := Description;
        if (PurchLine.Type <> PurchLine.Type::" ") and (Quantity <> 0) then begin
          if Currency.GET(PurchHeader."Currency Code") then begin
            Precision := Currency."Unit-Amount Rounding Precision";
            Precision2 := Currency."Amount Rounding Precision"
          end else begin
            GLSetup.GET;
            if GLSetup."Unit-Amount Rounding Precision" <> 0 then
              Precision := GLSetup."Unit-Amount Rounding Precision"
            else
              Precision := 0.01;
            if GLSetup."Amount Rounding Precision" <> 0 then
              Precision2 := GLSetup."Amount Rounding Precision"
            else
              Precision2 := 0.01;
          end;
          PurchLine.VALIDATE(Quantity,Quantity);
          PurchLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
          if PurchHeader."Prices Including VAT" then
            PurchLine.VALIDATE("Direct Unit Cost",ROUND("Amount Including VAT" / Quantity,Precision))
          else
            PurchLine.VALIDATE("Direct Unit Cost","Direct Unit Cost");
          PurchLine.VALIDATE("Line Discount Amount","Line Discount Amount");
          PurchLine."Amount Including VAT" := "Amount Including VAT";
          PurchLine."VAT Base Amount" := ROUND("Amount Including VAT" / (1 + (PurchLine."VAT %" / 100)),Precision2);
          if PurchHeader."Prices Including VAT" then
            PurchLine."Line Amount" := "Amount Including VAT"
          else
            PurchLine."Line Amount" := ROUND("Amount Including VAT" / (1 + (PurchLine."VAT %" / 100)),Precision2);
          PurchLine.VALIDATE("Requested Receipt Date","Requested Receipt Date");
          PurchLine.VALIDATE("Promised Receipt Date","Promised Receipt Date");
          PurchLine."Line Discount %" := "Line Discount %";
          PurchLine."Receipt No." := "Receipt No.";
          PurchLine."Receipt Line No." := "Receipt Line No.";
          PurchLine."Return Shipment No." := "Return Shipment No.";
          PurchLine."Return Shipment Line No." := "Return Shipment Line No.";
          UpdatePurchLineICPartnerReference(PurchLine,PurchHeader,ICInboxPurchLine);
          UpdatePurchLineReceiptShipment(PurchLine);
        end;
        PurchLine."Shortcut Dimension 1 Code" := '';
        PurchLine."Shortcut Dimension 2 Code" := '';
        PurchLine.INSERT(true);

        DimMgt.SetICDocDimFilters(
          ICDocDim,DATABASE::"IC Inbox Purchase Line","IC Transaction No.","IC Partner Code","Transaction Source","Line No.");
        PurchLine."Dimension Set ID" := DimMgt.CreateDimSetIDFromICDocDim(ICDocDim);
        DimMgt.UpdateGlobalDimFromDimSetID(PurchLine."Dimension Set ID",PurchLine."Shortcut Dimension 1 Code",
          PurchLine."Shortcut Dimension 2 Code");
        PurchLine.MODIFY;
      end;
    END;

    [External]
    PROCEDURE CreateHandledInbox@4(InboxTransaction@1000 : Record "IC Inbox Transaction");
    VAR
      HandledInboxTransaction@1001 : Record "Handled IC Inbox Trans.";
    BEGIN
      HandledInboxTransaction.INIT;
      HandledInboxTransaction."Transaction No." := InboxTransaction."Transaction No.";
      HandledInboxTransaction."IC Partner Code" := InboxTransaction."IC Partner Code";
      HandledInboxTransaction."Source Type" := InboxTransaction."Source Type";
      HandledInboxTransaction."Document Type" := InboxTransaction."Document Type";
      HandledInboxTransaction."Document No." := InboxTransaction."Document No.";
      HandledInboxTransaction."Posting Date" := InboxTransaction."Posting Date";
      HandledInboxTransaction."Transaction Source" := InboxTransaction."Transaction Source";
      HandledInboxTransaction."Document Date" := InboxTransaction."Document Date";

      case InboxTransaction."Line Action" of
        InboxTransaction."Line Action"::"Return to IC Partner":
          HandledInboxTransaction."Transaction Source" := HandledInboxTransaction."Transaction Source"::"Returned by Partner";
        InboxTransaction."Line Action"::Accept:
          if InboxTransaction."Transaction Source" = InboxTransaction."Transaction Source"::"Created by Partner" then
            HandledInboxTransaction."Transaction Source" := HandledInboxTransaction."Transaction Source"::"Created by Partner"
          else
            HandledInboxTransaction."Transaction Source" := HandledInboxTransaction."Transaction Source"::"Returned by Partner";
      end;
      HandledInboxTransaction.INSERT;
    END;

    [External]
    PROCEDURE RecreateInboxTransaction@7(VAR HandledInboxTransaction@1000 : Record "Handled IC Inbox Trans.");
    VAR
      HandledInboxTransaction2@1004 : Record "Handled IC Inbox Trans.";
      HandledInboxJnlLine@1002 : Record "Handled IC Inbox Jnl. Line";
      InboxTransaction@1001 : Record "IC Inbox Transaction";
      InboxJnlLine@1003 : Record "IC Inbox Jnl. Line";
      ICCommentLine@1005 : Record "IC Comment Line";
      HandledInboxSalesHdr@1006 : Record "Handled IC Inbox Sales Header";
      InboxSalesHdr@1007 : Record "IC Inbox Sales Header";
      HandledInboxSalesLine@1008 : Record "Handled IC Inbox Sales Line";
      InboxSalesLine@1009 : Record "IC Inbox Sales Line";
      ICDocDim@1010 : Record "IC Document Dimension";
      ICDocDim2@1011 : Record "IC Document Dimension";
      HandledInboxPurchHdr@1015 : Record "Handled IC Inbox Purch. Header";
      InboxPurchHdr@1014 : Record "IC Inbox Purchase Header";
      HandledInboxPurchLine@1013 : Record "Handled IC Inbox Purch. Line";
      InboxPurchLine@1012 : Record "IC Inbox Purchase Line";
      ICIOMgt@1016 : Codeunit ICInboxOutboxMgt;
    BEGIN
      with HandledInboxTransaction do
        if not (Status in [Status::Accepted,Status::Cancelled]) then
          ERROR(Text005,FIELDCAPTION(Status),Status::Accepted,Status::Cancelled);

      if CONFIRM(Text000,true) then begin
        HandledInboxTransaction2 := HandledInboxTransaction;
        HandledInboxTransaction2.LOCKTABLE;
        InboxTransaction.LOCKTABLE;
        InboxTransaction.INIT;
        InboxTransaction."Transaction No." := HandledInboxTransaction2."Transaction No.";
        InboxTransaction."IC Partner Code" := HandledInboxTransaction2."IC Partner Code";
        InboxTransaction."Source Type" := HandledInboxTransaction2."Source Type";
        InboxTransaction."Document Type" := HandledInboxTransaction2."Document Type";
        InboxTransaction."Document No." := HandledInboxTransaction2."Document No.";
        InboxTransaction."Posting Date" := HandledInboxTransaction2."Posting Date";
        InboxTransaction."Transaction Source" := InboxTransaction."Transaction Source"::"Created by Partner";
        InboxTransaction."Transaction Source" := HandledInboxTransaction2."Transaction Source";
        InboxTransaction."Document Date" := HandledInboxTransaction2."Document Date";
        InboxTransaction."IC Partner G/L Acc. No." := HandledInboxTransaction2."IC Partner G/L Acc. No.";
        InboxTransaction."Source Line No." := HandledInboxTransaction2."Source Line No.";
        InboxTransaction.INSERT;
        case InboxTransaction."Source Type" of
          InboxTransaction."Source Type"::Journal:
            begin
              HandledInboxJnlLine.LOCKTABLE;
              InboxJnlLine.LOCKTABLE;
              HandledInboxJnlLine.SETRANGE("Transaction No.",HandledInboxTransaction2."Transaction No.");
              HandledInboxJnlLine.SETRANGE("IC Partner Code",HandledInboxTransaction2."IC Partner Code");
              if HandledInboxJnlLine.FIND('-') then
                repeat
                  InboxJnlLine.INIT;
                  InboxJnlLine.TRANSFERFIELDS(HandledInboxJnlLine);
                  InboxJnlLine.INSERT;
                  ICIOMgt.MoveICJnlDimToHandled(DATABASE::"Handled IC Inbox Jnl. Line",DATABASE::"IC Inbox Jnl. Line",
                    HandledInboxTransaction."Transaction No.",HandledInboxTransaction."IC Partner Code",
                    false,0);
                until HandledInboxJnlLine.NEXT = 0;
              HandleICComments(ICCommentLine."Table Name"::"Handled IC Inbox Transaction",
                ICCommentLine."Table Name"::"IC Inbox Transaction",HandledInboxTransaction2."Transaction No.",
                HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source");
              HandledInboxTransaction.DELETE(true);
              COMMIT;
            end;
          InboxTransaction."Source Type"::"Sales Document":
            begin
              if HandledInboxSalesHdr.GET(HandledInboxTransaction2."Transaction No.",
                   HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source")
              then begin
                InboxSalesHdr.TRANSFERFIELDS(HandledInboxSalesHdr);
                InboxSalesHdr.INSERT;
                ICDocDim.RESET;
                DimMgt.SetICDocDimFilters(
                  ICDocDim,DATABASE::"Handled IC Inbox Sales Header",HandledInboxTransaction2."Transaction No.",
                  HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source",0);
                if ICDocDim.FIND('-') then
                  DimMgt.MoveICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"IC Inbox Sales Header",InboxSalesHdr."Transaction Source");
                HandledInboxSalesLine.SETRANGE("IC Transaction No.",HandledInboxTransaction2."Transaction No.");
                HandledInboxSalesLine.SETRANGE("IC Partner Code",HandledInboxTransaction2."IC Partner Code");
                HandledInboxSalesLine.SETRANGE("Transaction Source",HandledInboxTransaction2."Transaction Source");
                if HandledInboxSalesLine.FIND('-') then
                  repeat
                    InboxSalesLine.TRANSFERFIELDS(HandledInboxSalesLine);
                    InboxSalesLine.INSERT;
                    ICDocDim.RESET;
                    DimMgt.SetICDocDimFilters(
                      ICDocDim,DATABASE::"Handled IC Inbox Sales Line",HandledInboxTransaction2."Transaction No.",
                      HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source",
                      HandledInboxSalesLine."Line No.");
                    if ICDocDim.FIND('-') then
                      DimMgt.MoveICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"IC Inbox Sales Line",InboxSalesLine."Transaction Source");
                    HandledInboxSalesLine.DELETE(true);
                  until HandledInboxSalesLine.NEXT = 0;
              end;
              HandleICComments(ICCommentLine."Table Name"::"Handled IC Inbox Transaction",
                ICCommentLine."Table Name"::"IC Inbox Transaction",HandledInboxTransaction2."Transaction No.",
                HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source");
              HandledInboxSalesHdr.DELETE(true);
              HandledInboxTransaction.DELETE(true);
              COMMIT;
            end;
          InboxTransaction."Source Type"::"Purchase Document":
            begin
              if HandledInboxPurchHdr.GET(HandledInboxTransaction2."Transaction No.",
                   HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source")
              then begin
                InboxPurchHdr.TRANSFERFIELDS(HandledInboxPurchHdr);
                InboxPurchHdr.INSERT;
                ICDocDim.RESET;
                DimMgt.SetICDocDimFilters(
                  ICDocDim,DATABASE::"Handled IC Inbox Purch. Header",HandledInboxTransaction2."Transaction No.",
                  HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source",0);
                if ICDocDim.FIND('-') then
                  DimMgt.MoveICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"IC Inbox Purchase Header",InboxPurchHdr."Transaction Source");
                HandledInboxPurchLine.SETRANGE("IC Transaction No.",HandledInboxTransaction2."Transaction No.");
                HandledInboxPurchLine.SETRANGE("IC Partner Code",HandledInboxTransaction2."IC Partner Code");
                HandledInboxPurchLine.SETRANGE("Transaction Source",HandledInboxTransaction2."Transaction Source");
                if HandledInboxPurchLine.FIND('-') then
                  repeat
                    InboxPurchLine.TRANSFERFIELDS(HandledInboxPurchLine);
                    InboxPurchLine.INSERT;
                    ICDocDim.RESET;
                    DimMgt.SetICDocDimFilters(
                      ICDocDim,DATABASE::"Handled IC Inbox Purch. Line",HandledInboxTransaction2."Transaction No.",
                      HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source",
                      HandledInboxPurchLine."Line No.");
                    if ICDocDim.FIND('-') then
                      DimMgt.MoveICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"IC Inbox Purchase Line",InboxPurchLine."Transaction Source");
                    HandledInboxPurchLine.DELETE(true);
                  until HandledInboxPurchLine.NEXT = 0;
              end;
              HandleICComments(ICCommentLine."Table Name"::"Handled IC Inbox Transaction",
                ICCommentLine."Table Name"::"IC Inbox Transaction",HandledInboxTransaction2."Transaction No.",
                HandledInboxTransaction2."IC Partner Code",HandledInboxTransaction2."Transaction Source");
              HandledInboxPurchHdr.DELETE(true);
              HandledInboxTransaction.DELETE(true);
            end;
        end;
      end
    END;

    [External]
    PROCEDURE RecreateOutboxTransaction@38(VAR HandledOutboxTransaction@1000 : Record "Handled IC Outbox Trans.");
    VAR
      HandledOutboxTransaction2@1004 : Record "Handled IC Outbox Trans.";
      HandledOutboxJnlLine@1002 : Record "Handled IC Outbox Jnl. Line";
      OutboxTransaction@1001 : Record "IC Outbox Transaction";
      OutboxJnlLine@1003 : Record "IC Outbox Jnl. Line";
      ICCommentLine@1005 : Record "IC Comment Line";
      HandledOutboxSalesHdr@1006 : Record "Handled IC Outbox Sales Header";
      OutboxSalesHdr@1007 : Record "IC Outbox Sales Header";
      HandledOutboxSalesLine@1008 : Record "Handled IC Outbox Sales Line";
      OutboxSalesLine@1009 : Record "IC Outbox Sales Line";
      ICDocDim@1010 : Record "IC Document Dimension";
      ICDocDim2@1011 : Record "IC Document Dimension";
      HandledOutboxPurchHdr@1015 : Record "Handled IC Outbox Purch. Hdr";
      OutboxPurchHdr@1014 : Record "IC Outbox Purchase Header";
      HandledOutboxPurchLine@1013 : Record "Handled IC Outbox Purch. Line";
      OutboxPurchLine@1012 : Record "IC Outbox Purchase Line";
      ICIOMgt@1016 : Codeunit ICInboxOutboxMgt;
    BEGIN
      with HandledOutboxTransaction do
        if not (Status in [Status::"Sent to IC Partner",Status::Cancelled]) then
          ERROR(Text005,FIELDCAPTION(Status),Status::"Sent to IC Partner",Status::Cancelled);

      if CONFIRM(Text000,true) then begin
        HandledOutboxTransaction2 := HandledOutboxTransaction;
        HandledOutboxTransaction2.LOCKTABLE;
        OutboxTransaction.LOCKTABLE;
        OutboxTransaction.INIT;
        OutboxTransaction."Transaction No." := HandledOutboxTransaction2."Transaction No.";
        OutboxTransaction."IC Partner Code" := HandledOutboxTransaction2."IC Partner Code";
        OutboxTransaction."Source Type" := HandledOutboxTransaction2."Source Type";
        OutboxTransaction."Document Type" := HandledOutboxTransaction2."Document Type";
        OutboxTransaction."Document No." := HandledOutboxTransaction2."Document No.";
        OutboxTransaction."Posting Date" := HandledOutboxTransaction2."Posting Date";
        OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Created by Current Company";
        OutboxTransaction."Transaction Source" := HandledOutboxTransaction2."Transaction Source";
        OutboxTransaction."Document Date" := HandledOutboxTransaction2."Document Date";
        OutboxTransaction."IC Partner G/L Acc. No." := HandledOutboxTransaction2."IC Partner G/L Acc. No.";
        OutboxTransaction."Source Line No." := HandledOutboxTransaction2."Source Line No.";
        OutboxTransaction.INSERT;
        case OutboxTransaction."Source Type" of
          OutboxTransaction."Source Type"::"Journal Line":
            begin
              HandledOutboxJnlLine.LOCKTABLE;
              OutboxJnlLine.LOCKTABLE;
              HandledOutboxJnlLine.SETRANGE("Transaction No.",HandledOutboxTransaction2."Transaction No.");
              HandledOutboxJnlLine.SETRANGE("IC Partner Code",HandledOutboxTransaction2."IC Partner Code");
              if HandledOutboxJnlLine.FIND('-') then
                repeat
                  OutboxJnlLine.INIT;
                  OutboxJnlLine.TRANSFERFIELDS(HandledOutboxJnlLine);
                  OutboxJnlLine.INSERT;
                  ICIOMgt.MoveICJnlDimToHandled(DATABASE::"Handled IC Outbox Jnl. Line",DATABASE::"IC Outbox Jnl. Line",
                    HandledOutboxTransaction."Transaction No.",HandledOutboxTransaction."IC Partner Code",
                    false,0);
                until HandledOutboxJnlLine.NEXT = 0;
              HandleICComments(ICCommentLine."Table Name"::"Handled IC Outbox Transaction",
                ICCommentLine."Table Name"::"IC Outbox Transaction",HandledOutboxTransaction2."Transaction No.",
                HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source");
              HandledOutboxTransaction.DELETE(true);
              COMMIT;
            end;
          OutboxTransaction."Source Type"::"Sales Document":
            begin
              if HandledOutboxSalesHdr.GET(HandledOutboxTransaction2."Transaction No.",
                   HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source")
              then begin
                OutboxSalesHdr.TRANSFERFIELDS(HandledOutboxSalesHdr);
                OutboxSalesHdr.INSERT;
                ICDocDim.RESET;
                DimMgt.SetICDocDimFilters(
                  ICDocDim,DATABASE::"Handled IC Outbox Sales Header",HandledOutboxTransaction2."Transaction No.",
                  HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source",0);
                if ICDocDim.FIND('-') then
                  DimMgt.MoveICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"IC Outbox Sales Header",OutboxSalesHdr."Transaction Source");
                HandledOutboxSalesLine.SETRANGE("IC Transaction No.",HandledOutboxTransaction2."Transaction No.");
                HandledOutboxSalesLine.SETRANGE("IC Partner Code",HandledOutboxTransaction2."IC Partner Code");
                HandledOutboxSalesLine.SETRANGE("Transaction Source",HandledOutboxTransaction2."Transaction Source");
                if HandledOutboxSalesLine.FIND('-') then
                  repeat
                    OutboxSalesLine.TRANSFERFIELDS(HandledOutboxSalesLine);
                    OutboxSalesLine.INSERT;
                    ICDocDim.RESET;
                    DimMgt.SetICDocDimFilters(
                      ICDocDim,DATABASE::"Handled IC Outbox Sales Line",HandledOutboxTransaction2."Transaction No.",
                      HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source",
                      HandledOutboxSalesLine."Line No.");
                    if ICDocDim.FIND('-') then
                      DimMgt.MoveICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"IC Outbox Sales Line",OutboxSalesLine."Transaction Source");
                    HandledOutboxSalesLine.DELETE(true);
                  until HandledOutboxSalesLine.NEXT = 0;
              end;
              HandleICComments(ICCommentLine."Table Name"::"Handled IC Outbox Transaction",
                ICCommentLine."Table Name"::"IC Outbox Transaction",HandledOutboxTransaction2."Transaction No.",
                HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source");
              HandledOutboxSalesHdr.DELETE(true);
              HandledOutboxTransaction.DELETE(true);
            end;
          OutboxTransaction."Source Type"::"Purchase Document":
            begin
              if HandledOutboxPurchHdr.GET(HandledOutboxTransaction2."Transaction No.",
                   HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source")
              then begin
                OutboxPurchHdr.TRANSFERFIELDS(HandledOutboxPurchHdr);
                OutboxPurchHdr.INSERT;
                ICDocDim.RESET;
                DimMgt.SetICDocDimFilters(
                  ICDocDim,DATABASE::"Handled IC Outbox Purch. Hdr",HandledOutboxTransaction2."Transaction No.",
                  HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source",0);
                if ICDocDim.FIND('-') then
                  DimMgt.MoveICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"IC Outbox Purchase Header",OutboxPurchHdr."Transaction Source");
                HandledOutboxPurchLine.SETRANGE("IC Transaction No.",HandledOutboxTransaction2."Transaction No.");
                HandledOutboxPurchLine.SETRANGE("IC Partner Code",HandledOutboxTransaction2."IC Partner Code");
                HandledOutboxPurchLine.SETRANGE("Transaction Source",HandledOutboxTransaction2."Transaction Source");
                if HandledOutboxPurchLine.FIND('-') then
                  repeat
                    OutboxPurchLine.TRANSFERFIELDS(HandledOutboxPurchLine);
                    OutboxPurchLine.INSERT;
                    ICDocDim.RESET;
                    DimMgt.SetICDocDimFilters(
                      ICDocDim,DATABASE::"Handled IC Outbox Purch. Line",HandledOutboxTransaction2."Transaction No.",
                      HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source",
                      HandledOutboxPurchLine."Line No.");
                    if ICDocDim.FIND('-') then
                      DimMgt.MoveICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"IC Outbox Purchase Line",OutboxPurchLine."Transaction Source");
                    HandledOutboxPurchLine.DELETE(true);
                  until HandledOutboxPurchLine.NEXT = 0;
              end;
              HandleICComments(ICCommentLine."Table Name"::"Handled IC Outbox Transaction",
                ICCommentLine."Table Name"::"IC Outbox Transaction",HandledOutboxTransaction2."Transaction No.",
                HandledOutboxTransaction2."IC Partner Code",HandledOutboxTransaction2."Transaction Source");
              HandledOutboxPurchHdr.DELETE(true);
              HandledOutboxTransaction.DELETE(true);
            end;
        end;
      end
    END;

    [External]
    PROCEDURE ForwardToOutBox@3(InboxTransaction@1000 : Record "IC Inbox Transaction");
    VAR
      OutboxTransaction@1001 : Record "IC Outbox Transaction";
      OutboxJnlLine@1019 : Record "IC Outbox Jnl. Line";
      InboxJnlLine@1020 : Record "IC Inbox Jnl. Line";
      OutboxSalesHdr@1003 : Record "IC Outbox Sales Header";
      OutboxSalesLine@1004 : Record "IC Outbox Sales Line";
      InboxSalesHdr@1005 : Record "IC Inbox Sales Header";
      InboxSalesLine@1006 : Record "IC Inbox Sales Line";
      OutboxPurchHdr@1010 : Record "IC Outbox Purchase Header";
      OutboxPurchLine@1009 : Record "IC Outbox Purchase Line";
      InboxPurchHdr@1008 : Record "IC Inbox Purchase Header";
      InboxPurchLine@1007 : Record "IC Inbox Purchase Line";
      ICCommentLine@1002 : Record "IC Comment Line";
      ICCommentLine2@1023 : Record "IC Comment Line";
      ICDocDim@1011 : Record "IC Document Dimension";
      ICDocDim2@1012 : Record "IC Document Dimension";
      HndlInboxJnlLine@1018 : Record "Handled IC Inbox Jnl. Line";
      HndlInboxSalesHdr@1016 : Record "Handled IC Inbox Sales Header";
      HndlInboxSalesLine@1015 : Record "Handled IC Inbox Sales Line";
      HndlInboxPurchHdr@1014 : Record "Handled IC Inbox Purch. Header";
      HndlInboxPurchLine@1013 : Record "Handled IC Inbox Purch. Line";
      ICJnlLineDim@1017 : Record "IC Inbox/Outbox Jnl. Line Dim.";
      ICJnlLineDim2@1021 : Record "IC Inbox/Outbox Jnl. Line Dim.";
    BEGIN
      with InboxTransaction do begin
        OutboxTransaction.INIT;
        OutboxTransaction."Transaction No." := "Transaction No.";
        OutboxTransaction."IC Partner Code" := "IC Partner Code";
        OutboxTransaction."Source Type" := "Source Type";
        OutboxTransaction."Document Type" := "Document Type";
        OutboxTransaction."Document No." := "Document No.";
        OutboxTransaction."Posting Date" := "Posting Date";
        OutboxTransaction."Transaction Source" := OutboxTransaction."Transaction Source"::"Rejected by Current Company";
        OutboxTransaction."Document Date" := "Document Date";
        OutboxTransaction.INSERT;
        case "Source Type" of
          "Source Type"::Journal:
            begin
              InboxJnlLine.SETRANGE("Transaction No.","Transaction No.");
              InboxJnlLine.SETRANGE("IC Partner Code","IC Partner Code");
              InboxJnlLine.SETRANGE("Transaction Source","Transaction Source");
              if InboxJnlLine.FIND('-') then
                repeat
                  OutboxJnlLine.TRANSFERFIELDS(InboxJnlLine);
                  OutboxJnlLine."Transaction Source" := OutboxTransaction."Transaction Source";
                  OutboxJnlLine.INSERT;
                  HndlInboxJnlLine.TRANSFERFIELDS(InboxJnlLine);
                  HndlInboxJnlLine.INSERT;

                  ICJnlLineDim.SETRANGE("Table ID",DATABASE::"IC Inbox Jnl. Line");
                  ICJnlLineDim.SETRANGE("Transaction No.",InboxJnlLine."Transaction No.");
                  ICJnlLineDim.SETRANGE("IC Partner Code",InboxJnlLine."IC Partner Code");
                  ICJnlLineDim.SETRANGE("Line No.",InboxJnlLine."Line No.");
                  if ICJnlLineDim.FIND('-') then
                    repeat
                      ICJnlLineDim2 := ICJnlLineDim;
                      ICJnlLineDim2."Table ID" := DATABASE::"IC Outbox Jnl. Line";
                      ICJnlLineDim2."Transaction Source" := OutboxJnlLine."Transaction Source";
                      ICJnlLineDim2.INSERT;
                    until ICJnlLineDim.NEXT = 0;

                until InboxJnlLine.NEXT = 0;
            end;
          "Source Type"::"Sales Document":
            begin
              if InboxSalesHdr.GET("Transaction No.","IC Partner Code","Transaction Source") then begin
                OutboxSalesHdr.TRANSFERFIELDS(InboxSalesHdr);
                OutboxSalesHdr."Transaction Source" := OutboxTransaction."Transaction Source";
                OutboxSalesHdr.INSERT;
                ICDocDim.RESET;
                DimMgt.SetICDocDimFilters(
                  ICDocDim,DATABASE::"IC Inbox Sales Header","Transaction No.","IC Partner Code","Transaction Source",0);
                if ICDocDim.FIND('-') then
                  DimMgt.CopyICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"IC Outbox Sales Header",OutboxSalesHdr."Transaction Source");
                HndlInboxSalesHdr.TRANSFERFIELDS(InboxSalesHdr);
                HndlInboxSalesHdr.INSERT;
                if ICDocDim.FIND('-') then
                  DimMgt.MoveICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Header",InboxSalesHdr."Transaction Source");
                InboxSalesLine.SETRANGE("IC Transaction No.","Transaction No.");
                InboxSalesLine.SETRANGE("IC Partner Code","IC Partner Code");
                InboxSalesLine.SETRANGE("Transaction Source","Transaction Source");
                if InboxSalesLine.FIND('-') then
                  repeat
                    OutboxSalesLine.TRANSFERFIELDS(InboxSalesLine);
                    OutboxSalesLine."Transaction Source" := OutboxTransaction."Transaction Source";
                    OutboxSalesLine.INSERT;
                    ICDocDim.RESET;
                    DimMgt.SetICDocDimFilters(
                      ICDocDim,DATABASE::"IC Inbox Sales Line","Transaction No.","IC Partner Code","Transaction Source",
                      OutboxSalesLine."Line No.");
                    if ICDocDim.FIND('-') then
                      DimMgt.CopyICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"IC Outbox Sales Line",OutboxSalesLine."Transaction Source");
                    HndlInboxSalesLine.TRANSFERFIELDS(InboxSalesLine);
                    HndlInboxSalesLine.INSERT;
                    if ICDocDim.FIND('-') then
                      DimMgt.MoveICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Sales Line",InboxSalesLine."Transaction Source");
                  until InboxSalesLine.NEXT = 0;
              end;
            end;
          "Source Type"::"Purchase Document":
            begin
              if InboxPurchHdr.GET("Transaction No.","IC Partner Code","Transaction Source") then begin
                OutboxPurchHdr.TRANSFERFIELDS(InboxPurchHdr);
                OutboxPurchHdr."Transaction Source" := OutboxTransaction."Transaction Source";
                OutboxPurchHdr.INSERT;
                ICDocDim.RESET;
                DimMgt.SetICDocDimFilters(
                  ICDocDim,DATABASE::"IC Inbox Purchase Header","Transaction No.","IC Partner Code","Transaction Source",0);
                if ICDocDim.FIND('-') then
                  DimMgt.CopyICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"IC Outbox Purchase Header",OutboxPurchHdr."Transaction Source");
                HndlInboxPurchHdr.TRANSFERFIELDS(InboxPurchHdr);
                HndlInboxPurchHdr.INSERT;
                if ICDocDim.FIND('-') then
                  DimMgt.MoveICDocDimtoICDocDim(
                    ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Header",InboxPurchHdr."Transaction Source");
                InboxPurchLine.SETRANGE("IC Transaction No.","Transaction No.");
                InboxPurchLine.SETRANGE("IC Partner Code","IC Partner Code");
                InboxPurchLine.SETRANGE("Transaction Source","Transaction Source");
                if InboxPurchLine.FIND('-') then
                  repeat
                    OutboxPurchLine.TRANSFERFIELDS(InboxPurchLine);
                    OutboxPurchLine."Transaction Source" := OutboxTransaction."Transaction Source";
                    OutboxPurchLine.INSERT;
                    ICDocDim.RESET;
                    DimMgt.SetICDocDimFilters(
                      ICDocDim,DATABASE::"IC Inbox Purchase Line","Transaction No.","IC Partner Code","Transaction Source",
                      OutboxPurchLine."Line No.");
                    if ICDocDim.FIND('-') then
                      DimMgt.CopyICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"IC Outbox Purchase Line",OutboxPurchLine."Transaction Source");
                    HndlInboxPurchLine.TRANSFERFIELDS(InboxPurchLine);
                    HndlInboxPurchLine.INSERT;
                    if ICDocDim.FIND('-') then
                      DimMgt.MoveICDocDimtoICDocDim(
                        ICDocDim,ICDocDim2,DATABASE::"Handled IC Inbox Purch. Line",InboxPurchLine."Transaction Source");
                  until InboxPurchLine.NEXT = 0;
              end;
            end;
        end;
        ICCommentLine.SETRANGE("Table Name",ICCommentLine."Table Name"::"Handled IC Inbox Transaction");
        ICCommentLine.SETRANGE("Transaction No.","Transaction No.");
        ICCommentLine.SETRANGE("IC Partner Code","IC Partner Code");
        if ICCommentLine.FIND('-') then
          repeat
            ICCommentLine2 := ICCommentLine;
            ICCommentLine2."Table Name" := ICCommentLine."Table Name"::"IC Outbox Transaction";
            ICCommentLine2."Transaction Source" := ICCommentLine."Transaction Source"::Rejected;
            ICCommentLine2.INSERT;
          until ICCommentLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE GetCompanyInfo@39();
    BEGIN
      if not CompanyInfoFound then
        CompanyInfo.GET;
      CompanyInfoFound := true;
    END;

    [External]
    PROCEDURE GetGLSetup@18();
    BEGIN
      if not GLSetupFound then
        GLSetup.GET;
      GLSetupFound := true;
    END;

    [External]
    PROCEDURE GetCurrency@17(VAR CurrencyCode@1000 : Code[20]);
    BEGIN
      GetGLSetup;
      if CurrencyCode = GLSetup."LCY Code" then
        CurrencyCode := '';
    END;

    [External]
    PROCEDURE GetItemFromCommonItem@20(CommonItemNo@1000 : Code[20]) : Code[20];
    VAR
      Item@1001 : Record Item;
    BEGIN
      Item.SETCURRENTKEY("Common Item No.");
      Item.SETRANGE("Common Item No.",CommonItemNo);
      if not Item.FINDFIRST then
        ERROR(STRSUBSTNO(NoItemForCommonItemErr,CommonItemNo));
      exit(Item."No.");
    END;

    [External]
    PROCEDURE GetItemFromRef@23(Code@1000 : Code[20];CrossRefType@1004 : Option;CrossRefTypeNo@1005 : Code[20]) : Code[20];
    VAR
      Item@1001 : Record Item;
      CrossRef@1002 : Record "Item Cross Reference";
      ItemVendor@1003 : Record "Item Vendor";
    BEGIN
      if Item.GET(Code) then
        exit(Item."No.");
      CrossRef.SETCURRENTKEY("Cross-Reference No.","Cross-Reference Type","Cross-Reference Type No.");
      CrossRef.SETRANGE("Cross-Reference Type",CrossRefType);
      CrossRef.SETRANGE("Cross-Reference Type No.",CrossRefTypeNo);
      CrossRef.SETRANGE("Cross-Reference No.",Code);
      if CrossRef.FINDFIRST then
        exit(CrossRef."Item No.");

      if CrossRefType = CrossRef."Cross-Reference Type"::Vendor then begin
        ItemVendor.SETCURRENTKEY("Vendor No.","Vendor Item No.");
        ItemVendor.SETRANGE("Vendor No.",CrossRefTypeNo);
        ItemVendor.SETRANGE("Vendor Item No.",Code);
        if ItemVendor.FINDFIRST then
          exit(ItemVendor."Item No.")
      end;
      exit('');
    END;

    LOCAL PROCEDURE GetCustInvRndgAccNo@49(CustomerNo@1002 : Code[20]) : Code[20];
    VAR
      Customer@1001 : Record Customer;
      CustomerPostingGroup@1000 : Record "Customer Posting Group";
    BEGIN
      Customer.GET(CustomerNo);
      CustomerPostingGroup.GET(Customer."Customer Posting Group");
      exit(CustomerPostingGroup."Invoice Rounding Account");
    END;

    [External]
    PROCEDURE HandleICComments@24(TableName@1003 : Option;NewTableName@1002 : Option;TransactionNo@1001 : Integer;ICPartner@1000 : Code[20];TransactionSource@1006 : Option);
    VAR
      ICCommentLine@1005 : Record "IC Comment Line";
      TempICCommentLine@1004 : TEMPORARY Record "IC Comment Line";
    BEGIN
      ICCommentLine.SETRANGE("Table Name",TableName);
      ICCommentLine.SETRANGE("Transaction No.",TransactionNo);
      ICCommentLine.SETRANGE("IC Partner Code",ICPartner);
      if ICCommentLine.FIND('-') then begin
        repeat
          TempICCommentLine := ICCommentLine;
          ICCommentLine.DELETE;
          TempICCommentLine."Table Name" := NewTableName;
          TempICCommentLine."Transaction Source" := TransactionSource;
          TempICCommentLine.INSERT;
        until ICCommentLine.NEXT = 0;
        if TempICCommentLine.FIND('-') then
          repeat
            ICCommentLine := TempICCommentLine;
            ICCommentLine.INSERT;
          until TempICCommentLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE OutboxTransToInbox@32(VAR ICOutboxTrans@1000 : Record "IC Outbox Transaction";VAR ICInboxTrans@1001 : Record "IC Inbox Transaction";FromICPartnerCode@1002 : Code[20]);
    VAR
      PartnerICInboxTransaction@1005 : Record "IC Inbox Transaction";
      PartnerHandledICInboxTrans@1003 : Record "Handled IC Inbox Trans.";
      ICPartner@1004 : Record "IC Partner";
    BEGIN
      ICInboxTrans."Transaction No." := ICOutboxTrans."Transaction No.";
      ICInboxTrans."IC Partner Code" := FromICPartnerCode;
      ICInboxTrans."Transaction Source" := ICOutboxTrans."Transaction Source";
      ICInboxTrans."Document Type" := ICOutboxTrans."Document Type";
      case ICOutboxTrans."Source Type" of
        ICOutboxTrans."Source Type"::"Journal Line":
          ICInboxTrans."Source Type" := ICInboxTrans."Source Type"::Journal;
        ICOutboxTrans."Source Type"::"Sales Document":
          ICInboxTrans."Source Type" := ICInboxTrans."Source Type"::"Purchase Document";
        ICOutboxTrans."Source Type"::"Purchase Document":
          ICInboxTrans."Source Type" := ICInboxTrans."Source Type"::"Sales Document";
      end;
      ICInboxTrans."Document No." := ICOutboxTrans."Document No.";
      ICInboxTrans."Original Document No." := ICOutboxTrans."Document No.";
      ICInboxTrans."Posting Date" := ICOutboxTrans."Posting Date";
      ICInboxTrans."Document Date" := ICOutboxTrans."Document Date";
      ICInboxTrans."Line Action" := ICInboxTrans."Line Action"::"No Action";
      ICInboxTrans."IC Partner G/L Acc. No." := ICOutboxTrans."IC Partner G/L Acc. No.";
      ICInboxTrans."Source Line No." := ICOutboxTrans."Source Line No.";

      GetCompanyInfo;
      if CompanyInfo."IC Partner Code" = ICInboxTrans."IC Partner Code" then
        ICPartner.GET(ICOutboxTrans."IC Partner Code")
      else
        ICPartner.GET(ICInboxTrans."IC Partner Code");

      if ICPartner."Inbox Type" = ICPartner."Inbox Type"::Database then
        PartnerICInboxTransaction.CHANGECOMPANY(ICPartner."Inbox Details");
      if PartnerICInboxTransaction.GET(
           ICInboxTrans."Transaction No.",ICInboxTrans."IC Partner Code",
           ICInboxTrans."Transaction Source",ICInboxTrans."Document Type")
      then
        ERROR(
          Text004,ICInboxTrans."Transaction No.",ICInboxTrans.FIELDCAPTION("IC Partner Code"),
          ICInboxTrans."IC Partner Code",PartnerICInboxTransaction.TABLECAPTION);

      if ICPartner."Inbox Type" = ICPartner."Inbox Type"::Database then
        PartnerHandledICInboxTrans.CHANGECOMPANY(ICPartner."Inbox Details");
      if PartnerHandledICInboxTrans.GET(
           ICInboxTrans."Transaction No.",ICInboxTrans."IC Partner Code",
           ICInboxTrans."Transaction Source",ICInboxTrans."Document Type")
      then
        ERROR(
          Text004,ICInboxTrans."Transaction No.",ICInboxTrans.FIELDCAPTION("IC Partner Code"),
          ICInboxTrans."IC Partner Code",PartnerHandledICInboxTrans.TABLECAPTION);

      ICInboxTrans.INSERT;
    END;

    [External]
    PROCEDURE OutboxJnlLineToInbox@31(VAR ICInboxTrans@1002 : Record "IC Inbox Transaction";VAR ICOutboxJnlLine@1000 : Record "IC Outbox Jnl. Line";VAR ICInboxJnlLine@1001 : Record "IC Inbox Jnl. Line");
    VAR
      LocalICPartner@1004 : Record "IC Partner";
      PartnerICPartner@1003 : Record "IC Partner";
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      ICInboxJnlLine."Transaction No." := ICInboxTrans."Transaction No.";
      ICInboxJnlLine."IC Partner Code" := ICInboxTrans."IC Partner Code";
      ICInboxJnlLine."Transaction Source" := ICInboxTrans."Transaction Source";
      ICInboxJnlLine."Line No." := ICOutboxJnlLine."Line No.";

      if ICOutboxJnlLine."IC Partner Code" = CompanyInfo."IC Partner Code" then
        LocalICPartner.GET(ICInboxTrans."IC Partner Code")
      else
        LocalICPartner.GET(ICOutboxJnlLine."IC Partner Code");

      if ICOutboxJnlLine."IC Partner Code" = CompanyInfo."IC Partner Code" then
        PartnerICPartner.GET(ICInboxTrans."IC Partner Code")
      else begin
        LocalICPartner.TESTFIELD("Inbox Type",LocalICPartner."Inbox Type"::Database);
        PartnerICPartner.CHANGECOMPANY(LocalICPartner."Inbox Details");
        PartnerICPartner.GET(ICInboxJnlLine."IC Partner Code");
      end;

      case ICOutboxJnlLine."Account Type" of
        ICOutboxJnlLine."Account Type"::"G/L Account":
          begin
            ICInboxJnlLine."Account Type" := ICInboxJnlLine."Account Type"::"G/L Account";
            ICInboxJnlLine."Account No." := ICOutboxJnlLine."Account No.";
          end;
        ICOutboxJnlLine."Account Type"::Vendor:
          begin
            ICInboxJnlLine."Account Type" := ICInboxJnlLine."Account Type"::Customer;
            PartnerICPartner.TESTFIELD("Customer No.");
            ICInboxJnlLine."Account No." := PartnerICPartner."Customer No.";
          end;
        ICOutboxJnlLine."Account Type"::Customer:
          begin
            ICInboxJnlLine."Account Type" := ICInboxJnlLine."Account Type"::Vendor;
            PartnerICPartner.TESTFIELD("Vendor No.");
            ICInboxJnlLine."Account No." := PartnerICPartner."Vendor No.";
          end;
        ICOutboxJnlLine."Account Type"::"IC Partner":
          begin
            ICInboxJnlLine."Account Type" := ICInboxJnlLine."Account Type"::"IC Partner";
            ICInboxJnlLine."Account No." := ICInboxJnlLine."IC Partner Code";
          end;
      end;
      ICInboxJnlLine.Amount := -ICOutboxJnlLine.Amount;
      ICInboxJnlLine.Description := ICOutboxJnlLine.Description;
      ICInboxJnlLine."VAT Amount" := -ICOutboxJnlLine."VAT Amount";
      if ICOutboxJnlLine."Currency Code" = GLSetup."LCY Code" then
        ICInboxJnlLine."Currency Code" := ''
      else
        ICInboxJnlLine."Currency Code" := ICOutboxJnlLine."Currency Code";
      ICInboxJnlLine."Due Date" := ICOutboxJnlLine."Due Date";
      ICInboxJnlLine."Payment Discount %" := ICOutboxJnlLine."Payment Discount %";
      ICInboxJnlLine."Payment Discount Date" := ICOutboxJnlLine."Payment Discount Date";
      ICInboxJnlLine.Quantity := -ICOutboxJnlLine.Quantity;
      ICInboxJnlLine."Document No." := ICOutboxJnlLine."Document No.";
      ICInboxJnlLine.INSERT;
    END;

    [External]
    PROCEDURE OutboxSalesHdrToInbox@30(VAR ICInboxTrans@1002 : Record "IC Inbox Transaction";VAR ICOutboxSalesHdr@1000 : Record "IC Outbox Sales Header";VAR ICInboxPurchHdr@1001 : Record "IC Inbox Purchase Header");
    VAR
      ICPartner@1003 : Record "IC Partner";
      Vendor@1004 : Record Vendor;
    BEGIN
      GetCompanyInfo;
      if ICOutboxSalesHdr."IC Partner Code" = CompanyInfo."IC Partner Code" then
        ICPartner.GET(ICInboxTrans."IC Partner Code")
      else begin
        ICPartner.GET(ICOutboxSalesHdr."IC Partner Code");
        ICPartner.TESTFIELD("Inbox Type",ICPartner."Inbox Type"::Database);
        ICPartner.TESTFIELD("Inbox Details");
        ICPartner.CHANGECOMPANY(ICPartner."Inbox Details");
        ICPartner.GET(ICInboxTrans."IC Partner Code");
      end;
      if ICPartner."Vendor No." = '' then
        ERROR(Text001,ICPartner.TABLECAPTION,ICPartner.Code,Vendor.TABLECAPTION,ICOutboxSalesHdr."IC Partner Code");
      ICInboxPurchHdr."IC Transaction No." := ICInboxTrans."Transaction No.";
      ICInboxPurchHdr."IC Partner Code" := ICInboxTrans."IC Partner Code";
      ICInboxPurchHdr."Transaction Source" := ICInboxTrans."Transaction Source";
      ICInboxPurchHdr."Document Type" := ICOutboxSalesHdr."Document Type";
      ICInboxPurchHdr."No." := ICOutboxSalesHdr."No.";
      ICInboxPurchHdr."Ship-to Name" := ICOutboxSalesHdr."Ship-to Name";
      ICInboxPurchHdr."Ship-to Address" := ICOutboxSalesHdr."Ship-to Address";
      ICInboxPurchHdr."Ship-to Address 2" := ICOutboxSalesHdr."Ship-to Address 2";
      ICInboxPurchHdr."Ship-to City" := ICOutboxSalesHdr."Ship-to City";
      ICInboxPurchHdr."Ship-to Post Code" := ICOutboxSalesHdr."Ship-to Post Code";
      ICInboxPurchHdr."Posting Date" := ICOutboxSalesHdr."Posting Date";
      ICInboxPurchHdr."Due Date" := ICOutboxSalesHdr."Due Date";
      ICInboxPurchHdr."Payment Discount %" := ICOutboxSalesHdr."Payment Discount %";
      ICInboxPurchHdr."Pmt. Discount Date" := ICOutboxSalesHdr."Pmt. Discount Date";
      ICInboxPurchHdr."Currency Code" := ICOutboxSalesHdr."Currency Code";
      ICInboxPurchHdr."Document Date" := ICOutboxSalesHdr."Document Date";
      ICInboxPurchHdr."Buy-from Vendor No." := ICPartner."Vendor No.";
      ICInboxPurchHdr."Pay-to Vendor No." := ICPartner."Vendor No.";
      ICInboxPurchHdr."Vendor Invoice No." := ICOutboxSalesHdr."No.";
      ICInboxPurchHdr."Vendor Order No." := ICOutboxSalesHdr."Order No.";
      ICInboxPurchHdr."Vendor Cr. Memo No." := ICOutboxSalesHdr."No.";
      ICInboxPurchHdr."Your Reference" := ICOutboxSalesHdr."External Document No.";
      ICInboxPurchHdr."Sell-to Customer No." := ICOutboxSalesHdr."Sell-to Customer No.";
      ICInboxPurchHdr."Expected Receipt Date" := ICOutboxSalesHdr."Requested Delivery Date";
      ICInboxPurchHdr."Requested Receipt Date" := ICOutboxSalesHdr."Requested Delivery Date";
      ICInboxPurchHdr."Promised Receipt Date" := ICOutboxSalesHdr."Promised Delivery Date";
      ICInboxPurchHdr."Prices Including VAT" := ICOutboxSalesHdr."Prices Including VAT";
      ICInboxPurchHdr.INSERT;
    END;

    [External]
    PROCEDURE OutboxSalesLineToInbox@29(VAR ICInboxTrans@1002 : Record "IC Inbox Transaction";VAR ICOutboxSalesLine@1000 : Record "IC Outbox Sales Line";VAR ICInboxPurchLine@1001 : Record "IC Inbox Purchase Line");
    BEGIN
      ICInboxPurchLine."IC Transaction No." := ICInboxTrans."Transaction No.";
      ICInboxPurchLine."IC Partner Code" := ICInboxTrans."IC Partner Code";
      ICInboxPurchLine."Transaction Source" := ICInboxTrans."Transaction Source";
      ICInboxPurchLine."Line No." := ICOutboxSalesLine."Line No.";
      ICInboxPurchLine."Document Type" := ICOutboxSalesLine."Document Type";
      ICInboxPurchLine."Document No." := ICOutboxSalesLine."Document No.";
      ICInboxPurchLine."IC Partner Ref. Type" := ICOutboxSalesLine."IC Partner Ref. Type";
      ICInboxPurchLine."IC Partner Reference" := ICOutboxSalesLine."IC Partner Reference";
      ICInboxPurchLine.Description := ICOutboxSalesLine.Description;
      ICInboxPurchLine.Quantity := ICOutboxSalesLine.Quantity;
      ICInboxPurchLine."Direct Unit Cost" := ICOutboxSalesLine."Unit Price";
      ICInboxPurchLine."Line Discount Amount" := ICOutboxSalesLine."Line Discount Amount";
      ICInboxPurchLine."Amount Including VAT" := ICOutboxSalesLine."Amount Including VAT";
      ICInboxPurchLine."Job No." := ICOutboxSalesLine."Job No.";
      ICInboxPurchLine."VAT Base Amount" := ICOutboxSalesLine."VAT Base Amount";
      ICInboxPurchLine."Unit Cost" := ICOutboxSalesLine."Unit Price";
      ICInboxPurchLine."Line Amount" := ICOutboxSalesLine."Line Amount";
      ICInboxPurchLine."Line Discount %" := ICOutboxSalesLine."Line Discount %";
      ICInboxPurchLine."Unit of Measure Code" := ICOutboxSalesLine."Unit of Measure Code";
      ICInboxPurchLine."Requested Receipt Date" := ICOutboxSalesLine."Requested Delivery Date";
      ICInboxPurchLine."Promised Receipt Date" := ICOutboxSalesLine."Promised Delivery Date";
      ICInboxPurchLine."Receipt No." := ICOutboxSalesLine."Shipment No.";
      ICInboxPurchLine."Receipt Line No." := ICOutboxSalesLine."Shipment Line No.";
      ICInboxPurchLine."Return Shipment No." := ICOutboxSalesLine."Return Receipt No.";
      ICInboxPurchLine."Return Shipment Line No." := ICOutboxSalesLine."Return Receipt Line No.";
      ICInboxPurchLine.INSERT;
    END;

    [External]
    PROCEDURE OutboxPurchHdrToInbox@28(VAR ICInboxTrans@1002 : Record "IC Inbox Transaction";VAR ICOutboxPurchHdr@1000 : Record "IC Outbox Purchase Header";VAR ICInboxSalesHdr@1001 : Record "IC Inbox Sales Header");
    VAR
      ICPartner@1003 : Record "IC Partner";
      Customer@1004 : Record Customer;
    BEGIN
      GetCompanyInfo;
      if ICOutboxPurchHdr."IC Partner Code" = CompanyInfo."IC Partner Code" then
        ICPartner.GET(ICInboxTrans."IC Partner Code")
      else begin
        ICPartner.GET(ICOutboxPurchHdr."IC Partner Code");
        ICPartner.TESTFIELD("Inbox Type",ICPartner."Inbox Type"::Database);
        ICPartner.TESTFIELD("Inbox Details");
        ICPartner.CHANGECOMPANY(ICPartner."Inbox Details");
        ICPartner.GET(ICInboxTrans."IC Partner Code");
      end;
      if ICPartner."Customer No." = '' then
        ERROR(Text001,ICPartner.TABLECAPTION,ICPartner.Code,Customer.TABLECAPTION);

      ICInboxSalesHdr."IC Transaction No." := ICInboxTrans."Transaction No.";
      ICInboxSalesHdr."IC Partner Code" := ICInboxTrans."IC Partner Code";
      ICInboxSalesHdr."Transaction Source" := ICInboxTrans."Transaction Source";
      ICInboxSalesHdr."Document Type" := ICOutboxPurchHdr."Document Type";
      ICInboxSalesHdr."No." := ICOutboxPurchHdr."No.";
      ICInboxSalesHdr."Ship-to Name" := ICOutboxPurchHdr."Ship-to Name";
      ICInboxSalesHdr."Ship-to Address" := ICOutboxPurchHdr."Ship-to Address";
      ICInboxSalesHdr."Ship-to Address 2" := ICOutboxPurchHdr."Ship-to Address 2";
      ICInboxSalesHdr."Ship-to City" := ICOutboxPurchHdr."Ship-to City";
      ICInboxSalesHdr."Ship-to Post Code" := ICOutboxPurchHdr."Ship-to Post Code";
      ICInboxSalesHdr."Posting Date" := ICOutboxPurchHdr."Posting Date";
      ICInboxSalesHdr."Due Date" := ICOutboxPurchHdr."Due Date";
      ICInboxSalesHdr."Payment Discount %" := ICOutboxPurchHdr."Payment Discount %";
      ICInboxSalesHdr."Pmt. Discount Date" := ICOutboxPurchHdr."Pmt. Discount Date";
      ICInboxSalesHdr."Currency Code" := ICOutboxPurchHdr."Currency Code";
      ICInboxSalesHdr."Document Date" := ICOutboxPurchHdr."Document Date";
      ICInboxSalesHdr."Sell-to Customer No." := ICPartner."Customer No.";
      ICInboxSalesHdr."Bill-to Customer No." := ICPartner."Customer No.";
      ICInboxSalesHdr."Prices Including VAT" := ICOutboxPurchHdr."Prices Including VAT";
      ICInboxSalesHdr."Requested Delivery Date" := ICOutboxPurchHdr."Requested Receipt Date";
      ICInboxSalesHdr."Promised Delivery Date" := ICOutboxPurchHdr."Promised Receipt Date";
      ICInboxSalesHdr.INSERT;
    END;

    [External]
    PROCEDURE OutboxPurchLineToInbox@27(VAR ICInboxTrans@1002 : Record "IC Inbox Transaction";VAR ICOutboxPurchLine@1000 : Record "IC Outbox Purchase Line";VAR ICInboxSalesLine@1001 : Record "IC Inbox Sales Line");
    BEGIN
      ICInboxSalesLine."IC Transaction No." := ICInboxTrans."Transaction No.";
      ICInboxSalesLine."IC Partner Code" := ICInboxTrans."IC Partner Code";
      ICInboxSalesLine."Transaction Source" := ICInboxTrans."Transaction Source";
      ICInboxSalesLine."Line No." := ICOutboxPurchLine."Line No.";
      ICInboxSalesLine."Document Type" := ICOutboxPurchLine."Document Type";
      ICInboxSalesLine."Document No." := ICOutboxPurchLine."Document No.";
      if ICOutboxPurchLine."IC Partner Ref. Type" = ICOutboxPurchLine."IC Partner Ref. Type"::"Vendor Item No." then
        ICInboxSalesLine."IC Partner Ref. Type" := ICInboxSalesLine."IC Partner Ref. Type"::Item
      else
        ICInboxSalesLine."IC Partner Ref. Type" := ICOutboxPurchLine."IC Partner Ref. Type";
      ICInboxSalesLine."IC Partner Reference" := ICOutboxPurchLine."IC Partner Reference";
      ICInboxSalesLine.Description := ICOutboxPurchLine.Description;
      ICInboxSalesLine.Quantity := ICOutboxPurchLine.Quantity;
      ICInboxSalesLine."Line Discount Amount" := ICOutboxPurchLine."Line Discount Amount";
      ICInboxSalesLine."Amount Including VAT" := ICOutboxPurchLine."Amount Including VAT";
      ICInboxSalesLine."Job No." := ICOutboxPurchLine."Job No.";
      ICInboxSalesLine."VAT Base Amount" := ICOutboxPurchLine."VAT Base Amount";
      ICInboxSalesLine."Unit Price" := ICOutboxPurchLine."Direct Unit Cost";
      ICInboxSalesLine."Line Amount" := ICOutboxPurchLine."Line Amount";
      ICInboxSalesLine."Line Discount %" := ICOutboxPurchLine."Line Discount %";
      ICInboxSalesLine."Unit of Measure Code" := ICOutboxPurchLine."Unit of Measure Code";
      ICInboxSalesLine."Requested Delivery Date" := ICOutboxPurchLine."Requested Receipt Date";
      ICInboxSalesLine."Promised Delivery Date" := ICOutboxPurchLine."Promised Receipt Date";
      ICInboxSalesLine.INSERT;
    END;

    [External]
    PROCEDURE OutboxJnlLineDimToInbox@26(VAR ICInboxJnlLine@1000 : Record "IC Inbox Jnl. Line";VAR ICOutboxJnlLineDim@1002 : Record "IC Inbox/Outbox Jnl. Line Dim.";VAR ICInboxJnlLineDim@1001 : Record "IC Inbox/Outbox Jnl. Line Dim.";ICInboxTableID@1003 : Integer);
    BEGIN
      ICInboxJnlLineDim := ICOutboxJnlLineDim;
      ICInboxJnlLineDim."Table ID" := ICInboxTableID;
      ICInboxJnlLineDim."IC Partner Code" := ICInboxJnlLine."IC Partner Code";
      ICInboxJnlLineDim."Transaction Source" := ICInboxJnlLine."Transaction Source";
      ICInboxJnlLineDim.INSERT;
    END;

    [External]
    PROCEDURE OutboxDocDimToInbox@25(VAR ICOutboxDocDim@1000 : Record "IC Document Dimension";VAR ICInboxDocDim@1001 : Record "IC Document Dimension";InboxTableID@1002 : Integer;InboxICPartnerCode@1003 : Code[20];InboxTransSource@1004 : Integer);
    BEGIN
      ICInboxDocDim := ICOutboxDocDim;
      ICInboxDocDim."Table ID" := InboxTableID;
      ICInboxDocDim."IC Partner Code" := InboxICPartnerCode;
      ICInboxDocDim."Transaction Source" := InboxTransSource;
      ICInboxDocDim.INSERT;
    END;

    [External]
    PROCEDURE MoveICJnlDimToHandled@8(TableID@1003 : Integer;NewTableID@1002 : Integer;TransactionNo@1001 : Integer;ICPartner@1000 : Code[20];LineNoFilter@1006 : Boolean;LineNo@1007 : Integer);
    VAR
      InOutboxJnlLineDim@1004 : Record "IC Inbox/Outbox Jnl. Line Dim.";
      TempInOutboxJnlLineDim@1005 : TEMPORARY Record "IC Inbox/Outbox Jnl. Line Dim.";
    BEGIN
      InOutboxJnlLineDim.SETRANGE("Table ID",TableID);
      InOutboxJnlLineDim.SETRANGE("Transaction No.",TransactionNo);
      InOutboxJnlLineDim.SETRANGE("IC Partner Code",ICPartner);
      if LineNoFilter then
        InOutboxJnlLineDim.SETRANGE("Line No.",LineNo);
      if InOutboxJnlLineDim.FIND('-') then begin
        repeat
          TempInOutboxJnlLineDim := InOutboxJnlLineDim;
          InOutboxJnlLineDim.DELETE;
          TempInOutboxJnlLineDim."Table ID" := NewTableID;
          TempInOutboxJnlLineDim.INSERT;
        until InOutboxJnlLineDim.NEXT = 0;
        if TempInOutboxJnlLineDim.FIND('-') then
          repeat
            InOutboxJnlLineDim := TempInOutboxJnlLineDim;
            InOutboxJnlLineDim.INSERT;
          until TempInOutboxJnlLineDim.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE MoveICDocDimToHandled@46(FromTableID@1002 : Integer;ToTableID@1007 : Integer;TransactionNo@1003 : Integer;PartnerCode@1004 : Code[20];TransactionSource@1005 : Option;LineNo@1006 : Integer);
    VAR
      ICDocDim@1000 : Record "IC Document Dimension";
      HandledICDocDim@1001 : Record "IC Document Dimension";
    BEGIN
      ICDocDim.SETRANGE("Table ID",FromTableID);
      ICDocDim.SETRANGE("Transaction No.",TransactionNo);
      ICDocDim.SETRANGE("IC Partner Code",PartnerCode);
      ICDocDim.SETRANGE("Transaction Source",TransactionSource);
      ICDocDim.SETRANGE("Line No.",LineNo);
      if ICDocDim.FIND('-') then
        repeat
          HandledICDocDim.TRANSFERFIELDS(ICDocDim,true);
          HandledICDocDim."Table ID" := ToTableID;
          HandledICDocDim.INSERT;
          ICDocDim.DELETE;
        until ICDocDim.NEXT = 0;
    END;

    [External]
    PROCEDURE MoveOutboxTransToHandledOutbox@37(VAR ICOutboxTrans@1000 : Record "IC Outbox Transaction");
    VAR
      HandledICOutboxTrans@1015 : Record "Handled IC Outbox Trans.";
      ICOutboxJnlLine@1001 : Record "IC Outbox Jnl. Line";
      HandledICOutboxJnlLine@1002 : Record "Handled IC Outbox Jnl. Line";
      ICOutboxSalesHdr@1003 : Record "IC Outbox Sales Header";
      HandledICOutboxSalesHdr@1004 : Record "Handled IC Outbox Sales Header";
      ICOutboxSalesLine@1005 : Record "IC Outbox Sales Line";
      HandledICOutboxSalesLine@1006 : Record "Handled IC Outbox Sales Line";
      ICOutboxPurchHdr@1010 : Record "IC Outbox Purchase Header";
      HandledICOutboxPurchHdr@1009 : Record "Handled IC Outbox Purch. Hdr";
      ICOutboxPurchLine@1008 : Record "IC Outbox Purchase Line";
      HandledICOutboxPurchLine@1007 : Record "Handled IC Outbox Purch. Line";
      ICInOutJnlLineDim@1011 : Record "IC Inbox/Outbox Jnl. Line Dim.";
      HandledICInOutJnlLineDim@1013 : Record "IC Inbox/Outbox Jnl. Line Dim.";
      ICCommentLine@1016 : Record "IC Comment Line";
      HandledICCommentLine@1017 : Record "IC Comment Line";
    BEGIN
      ICOutboxJnlLine.SETRANGE("Transaction No.",ICOutboxTrans."Transaction No.");
      if ICOutboxJnlLine.FIND('-') then
        repeat
          HandledICOutboxJnlLine.TRANSFERFIELDS(ICOutboxJnlLine,true);
          HandledICOutboxJnlLine.INSERT;
          ICInOutJnlLineDim.SETRANGE("Table ID",DATABASE::"IC Outbox Jnl. Line");
          ICInOutJnlLineDim.SETRANGE("Transaction No.",ICOutboxJnlLine."Transaction No.");
          ICInOutJnlLineDim.SETRANGE("IC Partner Code",ICOutboxJnlLine."IC Partner Code");
          ICInOutJnlLineDim.SETRANGE("Transaction Source",ICOutboxJnlLine."Transaction Source");
          ICInOutJnlLineDim.SETRANGE("Line No.",ICOutboxJnlLine."Line No.");
          if ICInOutJnlLineDim.FIND('-') then
            repeat
              HandledICInOutJnlLineDim := ICInOutJnlLineDim;
              HandledICInOutJnlLineDim."Table ID" := DATABASE::"Handled IC Outbox Jnl. Line";
              HandledICInOutJnlLineDim.INSERT;
              ICInOutJnlLineDim.DELETE;
            until ICInOutJnlLineDim.NEXT = 0;
          ICOutboxJnlLine.DELETE;
        until ICOutboxJnlLine.NEXT = 0;

      ICOutboxSalesHdr.SETRANGE("IC Transaction No.",ICOutboxTrans."Transaction No.");
      if ICOutboxSalesHdr.FIND('-') then
        repeat
          HandledICOutboxSalesHdr.TRANSFERFIELDS(ICOutboxSalesHdr,true);
          HandledICOutboxSalesHdr.INSERT;
          MoveICDocDimToHandled(
            DATABASE::"IC Outbox Sales Header",DATABASE::"Handled IC Outbox Sales Header",ICOutboxSalesHdr."IC Transaction No.",
            ICOutboxSalesHdr."IC Partner Code",ICOutboxSalesHdr."Transaction Source",0);

          ICOutboxSalesLine.SETRANGE("IC Transaction No.",ICOutboxSalesHdr."IC Transaction No.");
          ICOutboxSalesLine.SETRANGE("IC Partner Code",ICOutboxSalesHdr."IC Partner Code");
          ICOutboxSalesLine.SETRANGE("Transaction Source",ICOutboxSalesHdr."Transaction Source");
          if ICOutboxSalesLine.FIND('-') then
            repeat
              HandledICOutboxSalesLine.TRANSFERFIELDS(ICOutboxSalesLine,true);
              HandledICOutboxSalesLine.INSERT;
              MoveICDocDimToHandled(
                DATABASE::"IC Outbox Sales Line",DATABASE::"Handled IC Outbox Sales Line",ICOutboxSalesHdr."IC Transaction No.",
                ICOutboxSalesHdr."IC Partner Code",ICOutboxSalesHdr."Transaction Source",ICOutboxSalesLine."Line No.");
              ICOutboxSalesLine.DELETE;
            until ICOutboxSalesLine.NEXT = 0;
          ICOutboxSalesHdr.DELETE;
        until ICOutboxSalesHdr.NEXT = 0;

      ICOutboxPurchHdr.SETRANGE("IC Transaction No.",ICOutboxTrans."Transaction No.");
      if ICOutboxPurchHdr.FIND('-') then
        repeat
          HandledICOutboxPurchHdr.TRANSFERFIELDS(ICOutboxPurchHdr,true);
          HandledICOutboxPurchHdr.INSERT;
          MoveICDocDimToHandled(
            DATABASE::"IC Outbox Purchase Header",DATABASE::"Handled IC Outbox Purch. Hdr",ICOutboxPurchHdr."IC Transaction No.",
            ICOutboxPurchHdr."IC Partner Code",ICOutboxPurchHdr."Transaction Source",0);

          ICOutboxPurchLine.SETRANGE("IC Transaction No.",ICOutboxPurchHdr."IC Transaction No.");
          ICOutboxPurchLine.SETRANGE("IC Partner Code",ICOutboxPurchHdr."IC Partner Code");
          ICOutboxPurchLine.SETRANGE("Transaction Source",ICOutboxPurchHdr."Transaction Source");
          if ICOutboxPurchLine.FIND('-') then
            repeat
              HandledICOutboxPurchLine.TRANSFERFIELDS(ICOutboxPurchLine,true);
              HandledICOutboxPurchLine.INSERT;
              MoveICDocDimToHandled(
                DATABASE::"IC Outbox Purchase Line",DATABASE::"Handled IC Outbox Purch. Line",ICOutboxPurchHdr."IC Transaction No.",
                ICOutboxPurchHdr."IC Partner Code",ICOutboxPurchHdr."Transaction Source",ICOutboxPurchLine."Line No.");
              ICOutboxPurchLine.DELETE;
            until ICOutboxPurchLine.NEXT = 0;
          ICOutboxPurchHdr.DELETE;
        until ICOutboxPurchHdr.NEXT = 0;

      HandledICOutboxTrans.TRANSFERFIELDS(ICOutboxTrans,true);
      case ICOutboxTrans."Line Action" of
        ICOutboxTrans."Line Action"::"Send to IC Partner":
          if ICOutboxTrans."Transaction Source" = ICOutboxTrans."Transaction Source"::"Created by Current Company" then
            HandledICOutboxTrans.Status := HandledICOutboxTrans.Status::"Sent to IC Partner"
          else
            HandledICOutboxTrans.Status := HandledICOutboxTrans.Status::"Rejection Sent to IC Partner";
        ICOutboxTrans."Line Action"::Cancel:
          HandledICOutboxTrans.Status := HandledICOutboxTrans.Status::Cancelled;
      end;
      HandledICOutboxTrans.INSERT;
      ICOutboxTrans.DELETE;

      ICCommentLine.SETRANGE("Table Name",ICCommentLine."Table Name"::"IC Outbox Transaction");
      ICCommentLine.SETRANGE("Transaction No.",ICOutboxTrans."Transaction No.");
      ICCommentLine.SETRANGE("IC Partner Code",ICOutboxTrans."IC Partner Code");
      ICCommentLine.SETRANGE("Transaction Source",ICOutboxTrans."Transaction Source");
      if ICCommentLine.FIND('-') then
        repeat
          HandledICCommentLine := ICCommentLine;
          HandledICCommentLine."Table Name" := HandledICCommentLine."Table Name"::"Handled IC Outbox Transaction";
          HandledICCommentLine.INSERT;
          ICCommentLine.DELETE;
        until ICCommentLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateICDocDimFromPostedDocDim@36(ICDocDim@1000 : Record "IC Document Dimension";DimSetID@1003 : Integer;TableNo@1001 : Integer);
    VAR
      DimSetEntry@1002 : Record "Dimension Set Entry";
    BEGIN
      DimSetEntry.RESET;
      DimSetEntry.SETRANGE("Dimension Set ID",DimSetID);
      if DimSetEntry.FINDSET then
        repeat
          ICDocDim."Table ID" := TableNo;
          ICDocDim."Dimension Code" := DimMgt.ConvertDimtoICDim(DimSetEntry."Dimension Code");
          ICDocDim."Dimension Value Code" :=
            DimMgt.ConvertDimValuetoICDimVal(DimSetEntry."Dimension Code",DimSetEntry."Dimension Value Code");
          if (ICDocDim."Dimension Code" <> '') and (ICDocDim."Dimension Value Code" <> '') then
            ICDocDim.INSERT;
        until DimSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE FindReceiptLine@12(VAR PurchRcptLine@1002 : Record "Purch. Rcpt. Line";PurchaseLineSource@1003 : Record "Purchase Line") : Boolean;
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      PurchaseLine@1001 : Record "Purchase Line";
    BEGIN
      if not PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,PurchaseLineSource."Receipt No.") then
        exit(false);

      with PurchRcptLine do begin
        SETCURRENTKEY("Order No.");
        SETRANGE("Order No.",PurchaseHeader."No.");
        SETRANGE("Order Line No.",PurchaseLineSource."Receipt Line No.");
        SETRANGE(Type,PurchaseLineSource.Type);
        SETRANGE("No.",PurchaseLineSource."No.");
        SETFILTER("Qty. Rcd. Not Invoiced",'<>%1',0);
        if not FINDFIRST then
          exit(false);
      end;

      with PurchaseLine do
        if ABS(PurchRcptLine."Qty. Rcd. Not Invoiced") >= ABS(PurchaseLineSource.Quantity) then begin
          SETCURRENTKEY("Document Type","Receipt No.");
          SETRANGE("Document Type","Document Type"::Invoice);
          SETRANGE("Receipt No.",PurchRcptLine."Document No.");
          SETRANGE("Receipt Line No.",PurchRcptLine."Line No.");
          SETRANGE(Type,PurchaseLineSource.Type);
          SETRANGE("No.",PurchaseLineSource."No.");
          SETFILTER(Quantity,'<>%1',0);
          exit(ISEMPTY);
        end;
    END;

    LOCAL PROCEDURE FindShipmentLine@34(VAR ReturnShptLine@1004 : Record "Return Shipment Line";PurchaseLineSource@1003 : Record "Purchase Line") : Boolean;
    VAR
      PurchaseHeader@1001 : Record "Purchase Header";
      PurchaseLine@1000 : Record "Purchase Line";
    BEGIN
      if not PurchaseHeader.GET(PurchaseHeader."Document Type"::"Return Order",PurchaseLineSource."Return Shipment No.") then
        exit(false);

      with ReturnShptLine do begin
        SETCURRENTKEY("Return Order No.");
        SETRANGE("Return Order No.",PurchaseHeader."No.");
        SETRANGE("Return Order Line No.",PurchaseLineSource."Return Shipment Line No.");
        SETRANGE(Type,PurchaseLineSource.Type);
        SETRANGE("No.",PurchaseLineSource."No.");
        SETFILTER("Return Qty. Shipped Not Invd.",'<>%1',0);
        if not FINDFIRST then
          exit(false);
      end;

      with PurchaseLine do
        if ABS(ReturnShptLine."Return Qty. Shipped Not Invd.") >= ABS(PurchaseLineSource.Quantity) then begin
          SETRANGE("Document Type","Document Type"::"Credit Memo");
          SETRANGE("Return Shipment No.",ReturnShptLine."Document No.");
          SETRANGE("Return Shipment Line No.",ReturnShptLine."Line No.");
          SETRANGE(Type,PurchaseLineSource.Type);
          SETRANGE("No.",PurchaseLineSource."No.");
          SETFILTER(Quantity,'<>%1',0);
          exit(ISEMPTY);
        end;
    END;

    LOCAL PROCEDURE FindRoundingSalesInvLine@42(DocumentNo@1000 : Code[20]) : Integer;
    VAR
      SalesInvoiceLine@1004 : Record "Sales Invoice Line";
    BEGIN
      with SalesInvoiceLine do begin
        SETRANGE("Document No.",DocumentNo);
        if FINDLAST then
          if Type = Type::"G/L Account" then
            if "No." <> '' then
              if "No." = GetCustInvRndgAccNo("Bill-to Customer No.") then
                exit("Line No.");
        exit(0);
      end;
    END;

    LOCAL PROCEDURE FindRoundingSalesCrMemoLine@44(DocumentNo@1000 : Code[20]) : Integer;
    VAR
      SalesCrMemoLine@1004 : Record "Sales Cr.Memo Line";
    BEGIN
      with SalesCrMemoLine do begin
        SETRANGE("Document No.",DocumentNo);
        if FINDLAST then
          if Type = Type::"G/L Account" then
            if "No." <> '' then
              if "No." = GetCustInvRndgAccNo("Bill-to Customer No.") then
                exit("Line No.");
        exit(0);
      end;
    END;

    LOCAL PROCEDURE UpdateSalesLineICPartnerReference@40(VAR SalesLine@1003 : Record "Sales Line";SalesHeader@1002 : Record "Sales Header";ICInboxSalesLine@1000 : Record "IC Inbox Sales Line");
    VAR
      ICPartner@1001 : Record "IC Partner";
      ItemCrossReference@1004 : Record "Item Cross Reference";
    BEGIN
      with ICInboxSalesLine do
        if ("IC Partner Ref. Type" <> "IC Partner Ref. Type"::"G/L Account") and
           ("IC Partner Ref. Type" <> 0) and
           ("IC Partner Ref. Type" <> "IC Partner Ref. Type"::"Charge (Item)") and
           ("IC Partner Ref. Type" <> "IC Partner Ref. Type"::"Cross reference")
        then begin
          ICPartner.GET(SalesHeader."Sell-to IC Partner Code");
          case ICPartner."Outbound Sales Item No. Type" of
            ICPartner."Outbound Sales Item No. Type"::"Common Item No.":
              SalesLine.VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
            ICPartner."Outbound Sales Item No. Type"::"Internal No.":
              begin
                SalesLine."IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                SalesLine."IC Partner Reference" := "IC Partner Reference";
              end;
            ICPartner."Outbound Sales Item No. Type"::"Cross Reference":
              begin
                SalesLine.VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross reference");
                ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Customer);
                ItemCrossReference.SETRANGE("Cross-Reference Type No.",SalesHeader."Sell-to Customer No.");
                ItemCrossReference.SETRANGE("Item No.","IC Partner Reference");
                if ItemCrossReference.FINDFIRST then
                  SalesLine."IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
              end;
          end;
        end else begin
          SalesLine."IC Partner Ref. Type" := "IC Partner Ref. Type";
          if "IC Partner Ref. Type" <> "IC Partner Ref. Type"::"G/L Account" then
            SalesLine."IC Partner Reference" := "IC Partner Reference";
        end;
    END;

    LOCAL PROCEDURE UpdatePurchLineICPartnerReference@43(VAR PurchaseLine@1002 : Record "Purchase Line";PurchaseHeader@1001 : Record "Purchase Header";ICInboxPurchLine@1000 : Record "IC Inbox Purchase Line");
    VAR
      ICPartner@1003 : Record "IC Partner";
      ItemCrossReference@1004 : Record "Item Cross Reference";
    BEGIN
      with ICInboxPurchLine do
        if ("IC Partner Ref. Type" <> "IC Partner Ref. Type"::"G/L Account") and
           ("IC Partner Ref. Type" <> 0) and
           ("IC Partner Ref. Type" <> "IC Partner Ref. Type"::"Charge (Item)") and
           ("IC Partner Ref. Type" <> "IC Partner Ref. Type"::"Cross reference")
        then begin
          ICPartner.GET(PurchaseHeader."Buy-from IC Partner Code");
          case ICPartner."Outbound Purch. Item No. Type" of
            ICPartner."Outbound Purch. Item No. Type"::"Common Item No.":
              PurchaseLine.VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Common Item No.");
            ICPartner."Outbound Purch. Item No. Type"::"Internal No.":
              begin
                PurchaseLine."IC Partner Ref. Type" := "IC Partner Ref. Type"::Item;
                PurchaseLine."IC Partner Reference" := "IC Partner Reference";
              end;
            ICPartner."Outbound Purch. Item No. Type"::"Cross Reference":
              begin
                PurchaseLine.VALIDATE("IC Partner Ref. Type","IC Partner Ref. Type"::"Cross reference");
                ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
                ItemCrossReference.SETRANGE("Cross-Reference Type No.",PurchaseHeader."Buy-from Vendor No.");
                ItemCrossReference.SETRANGE("Item No.","IC Partner Reference");
                if ItemCrossReference.FINDFIRST then
                  PurchaseLine."IC Partner Reference" := ItemCrossReference."Cross-Reference No.";
              end;
            ICPartner."Outbound Purch. Item No. Type"::"Vendor Item No.":
              begin
                PurchaseLine."IC Partner Ref. Type" := "IC Partner Ref. Type"::"Vendor Item No.";
                PurchaseLine."IC Partner Reference" := PurchaseLine."Vendor Item No.";
              end;
          end;
        end else begin
          PurchaseLine."IC Partner Ref. Type" := "IC Partner Ref. Type";
          if "IC Partner Ref. Type" <> "IC Partner Ref. Type"::"G/L Account" then
            PurchaseLine."IC Partner Reference" := "IC Partner Reference";
        end;
    END;

    LOCAL PROCEDURE UpdatePurchLineReceiptShipment@41(VAR PurchaseLine@1002 : Record "Purchase Line");
    VAR
      PurchRcptLine@1000 : Record "Purch. Rcpt. Line";
      ReturnShptLine@1001 : Record "Return Shipment Line";
      PurchaseOrderLine@1004 : Record "Purchase Line";
      ItemTrackingMgt@1005 : Codeunit "Item Tracking Management";
      OrderDocumentNo@1003 : Code[20];
    BEGIN
      if FindReceiptLine(PurchRcptLine,PurchaseLine) then begin
        OrderDocumentNo := PurchaseLine."Receipt No.";
        PurchaseLine."Location Code" := PurchRcptLine."Location Code";
        PurchaseLine."Receipt No." := PurchRcptLine."Document No.";
        PurchaseLine."Receipt Line No." := PurchRcptLine."Line No.";
        if PurchaseOrderLine.GET(PurchaseOrderLine."Document Type"::Order,OrderDocumentNo,PurchaseLine."Receipt Line No.") then
          ItemTrackingMgt.CopyHandledItemTrkgToPurchLineWithLineQty(PurchaseOrderLine,PurchaseLine);
      end else begin
        PurchaseLine."Receipt No." := '';
        PurchaseLine."Receipt Line No." := 0;
      end;

      if FindShipmentLine(ReturnShptLine,PurchaseLine) then begin
        OrderDocumentNo := PurchaseLine."Return Shipment No.";
        PurchaseLine."Location Code" := ReturnShptLine."Location Code";
        PurchaseLine."Return Shipment No." := ReturnShptLine."Document No.";
        PurchaseLine."Return Shipment Line No." := ReturnShptLine."Line No.";
        if PurchaseOrderLine.GET(
             PurchaseOrderLine."Document Type"::"Return Order",OrderDocumentNo,PurchaseLine."Return Shipment Line No.")
        then
          ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchaseOrderLine,PurchaseLine);
      end else begin
        PurchaseLine."Return Shipment No." := '';
        PurchaseLine."Return Shipment Line No." := 0;
      end;
    END;

    LOCAL PROCEDURE UpdateICOutboxSalesLineReceiptShipment@45(VAR ICOutboxSalesLine@1000 : Record "IC Outbox Sales Line";ICOutboxSalesHeader@1001 : Record "IC Outbox Sales Header");
    VAR
      SalesShipmentHeader@1002 : Record "Sales Shipment Header";
      ReturnReceiptHeader@1003 : Record "Return Receipt Header";
    BEGIN
      with ICOutboxSalesLine do
        case "Document Type" of
          "Document Type"::Order,
          "Document Type"::Invoice:
            if "Shipment No." = '' then begin
              "Shipment No." := COPYSTR(ICOutboxSalesHeader."External Document No.",1,MAXSTRLEN("Shipment No."));
              "Shipment Line No." := "Line No.";
            end else
              if SalesShipmentHeader.GET("Shipment No.") then
                "Shipment No." := COPYSTR(SalesShipmentHeader."External Document No.",1,MAXSTRLEN("Shipment No."));
          "Document Type"::"Credit Memo",
          "Document Type"::"Return Order":
            if "Return Receipt No." = '' then begin
              "Return Receipt No." := COPYSTR(ICOutboxSalesHeader."External Document No.",1,MAXSTRLEN("Return Receipt No."));
              "Return Receipt Line No." := "Line No.";
            end else
              if ReturnReceiptHeader.GET("Return Receipt No.") then
                "Return Receipt No." := COPYSTR(ReturnReceiptHeader."External Document No.",1,MAXSTRLEN("Return Receipt No."));
        end;
    END;

    LOCAL PROCEDURE AssignCurrencyCodeInOutBoxDoc@47(VAR CurrencyCode@1000 : Code[10];ICPartnerCode@1002 : Code[20]);
    VAR
      AnotherCompGLSetup@1001 : Record "General Ledger Setup";
      ICPartner@1003 : Record "IC Partner";
    BEGIN
      if CurrencyCode = '' then begin
        ICPartner.GET(ICPartnerCode);
        if ICPartner."Inbox Type" = ICPartner."Inbox Type"::Database then begin
          GetGLSetup;
          AnotherCompGLSetup.CHANGECOMPANY(ICPartner."Inbox Details");
          AnotherCompGLSetup.GET;
          if GLSetup."LCY Code" <> AnotherCompGLSetup."LCY Code" then
            CurrencyCode := GLSetup."LCY Code";
        end;
      end;
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE ICOutboxTransactionCreated@90(VAR ICOutboxTransaction@1000 : Record "IC Outbox Transaction");
    BEGIN
    END;

    BEGIN
    END.
  }
}

