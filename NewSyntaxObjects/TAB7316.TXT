OBJECT Table 7316 Warehouse Receipt Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Warehouse Receipt Line"=rd;
    OnInsert=BEGIN
               WhseSetup.GET;
               if "No." = '' then begin
                 WhseSetup.TESTFIELD("Whse. Receipt Nos.");
                 NoSeriesMgt.InitSeries(WhseSetup."Whse. Receipt Nos.",xRec."No. Series","Posting Date","No.","No. Series");
               end;

               NoSeriesMgt.SetDefaultSeries("Receiving No. Series",WhseSetup."Posted Whse. Receipt Nos.");

               GetLocation("Location Code");
               VALIDATE("Bin Code",Location."Receipt Bin Code");
               VALIDATE("Cross-Dock Bin Code",Location."Cross-Dock Bin Code");
               "Posting Date" := WORKDATE;
             END;

    OnDelete=BEGIN
               DeleteRelatedLines(true);
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Warehouse Receipt Header;
    LookupPageID="Warehouse Receipts";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                WhseSetup.GET;
                                                                if "No." <> xRec."No." then begin
                                                                  NoSeriesMgt.TestManual(WhseSetup."Whse. Receipt Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=VAR
                                                                WhseRcptLine@1000 : Record "Warehouse Receipt Line";
                                                              BEGIN
                                                                if not WmsManagement.LocationIsAllowed("Location Code") then
                                                                  ERROR(Text003,"Location Code");

                                                                if "Location Code" <> xRec."Location Code" then begin
                                                                  "Zone Code" := '';
                                                                  "Bin Code" := '';
                                                                  "Cross-Dock Zone Code" := '';
                                                                  "Cross-Dock Bin Code" := '';
                                                                  WhseRcptLine.SETRANGE("No.","No.");
                                                                  if not WhseRcptLine.ISEMPTY then
                                                                    ERROR(
                                                                      Text001,
                                                                      FIELDCAPTION("Location Code"));
                                                                end;

                                                                GetLocation("Location Code");
                                                                Location.TESTFIELD("Require Receive");
                                                                if Location."Directed Put-away and Pick" or Location."Bin Mandatory" then begin
                                                                  VALIDATE("Bin Code",Location."Receipt Bin Code");
                                                                  VALIDATE("Cross-Dock Bin Code",Location."Cross-Dock Bin Code");
                                                                end;

                                                                if USERID <> '' then begin
                                                                  FILTERGROUP := 2;
                                                                  SETRANGE("Location Code","Location Code");
                                                                  FILTERGROUP := 0;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 3   ;   ;Assigned User ID    ;Code50        ;TableRelation="Warehouse Employee" WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Assigned User ID" <> '' then begin
                                                                  "Assignment Date" := TODAY;
                                                                  "Assignment Time" := TIME;
                                                                end else begin
                                                                  "Assignment Date" := 0D;
                                                                  "Assignment Time" := 000000T;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Assigned User ID }
    { 4   ;   ;Assignment Date     ;Date          ;CaptionML=ENU=Assignment Date;
                                                   Editable=false }
    { 5   ;   ;Assignment Time     ;Time          ;CaptionML=ENU=Assignment Time;
                                                   Editable=false }
    { 6   ;   ;Sorting Method      ;Option        ;OnValidate=BEGIN
                                                                if "Sorting Method" <> xRec."Sorting Method" then
                                                                  SortWhseDoc;
                                                              END;

                                                   CaptionML=ENU=Sorting Method;
                                                   OptionCaptionML=ENU=" ,Item,Document,Shelf or Bin,Due Date,Ship-To";
                                                   OptionString=" ",Item,Document,"Shelf or Bin","Due Date","Ship-To" }
    { 7   ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 8   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if "Zone Code" <> xRec."Zone Code" then begin
                                                                  if "Zone Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  end;
                                                                  "Bin Code" := '';
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Zone Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Zone Code }
    { 9   ;   ;Bin Code            ;Code20        ;TableRelation=IF ("Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                    "Zone Code"=FIELD("Zone Code"));
                                                   OnValidate=VAR
                                                                Bin@1001 : Record Bin;
                                                                WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                if (xRec."Bin Code" <> "Bin Code") or ("Zone Code" = '') then begin
                                                                  if "Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Warehouse Receipt Header",
                                                                      FIELDCAPTION("Bin Code"),
                                                                      "Location Code",
                                                                      "Bin Code",0);
                                                                    if Location."Directed Put-away and Pick" then begin
                                                                      Bin.GET("Location Code","Bin Code");
                                                                      "Zone Code" := Bin."Zone Code";
                                                                    end;
                                                                  end;
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Bin Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 10  ;   ;Document Status     ;Option        ;CaptionML=ENU=Document Status;
                                                   OptionCaptionML=ENU=" ,Partially Received,Completely Received";
                                                   OptionString=" ","Partially Received","Completely Received";
                                                   Editable=false }
    { 11  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Warehouse Comment Line" WHERE ("Table Name"=CONST("Whse. Receipt"),
                                                                                                     Type=CONST(" "),
                                                                                                     "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 12  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 13  ;   ;Vendor Shipment No. ;Code35        ;CaptionML=ENU=Vendor Shipment No. }
    { 16  ;   ;Cross-Dock Zone Code;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                  "Cross-Dock Bin Zone"=CONST(true));
                                                   OnValidate=BEGIN
                                                                if "Cross-Dock Zone Code" <> xRec."Cross-Dock Zone Code" then begin
                                                                  if "Cross-Dock Zone Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Directed Put-away and Pick");
                                                                  end;
                                                                  "Cross-Dock Bin Code" := '';
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Cross-Dock Zone Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Cross-Dock Zone Code }
    { 17  ;   ;Cross-Dock Bin Code ;Code20        ;TableRelation=IF ("Cross-Dock Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                        "Cross-Dock Bin"=CONST(true))
                                                                                                                        ELSE IF ("Cross-Dock Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                                                                                      "Zone Code"=FIELD("Cross-Dock Zone Code"),
                                                                                                                                                                                      "Cross-Dock Bin"=CONST(true));
                                                   OnValidate=VAR
                                                                Bin@1001 : Record Bin;
                                                              BEGIN
                                                                if (xRec."Cross-Dock Bin Code" <> "Cross-Dock Bin Code") or ("Cross-Dock Zone Code" = '') then begin
                                                                  if "Cross-Dock Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    if "Cross-Dock Bin Code" = Location."Adjustment Bin Code" then
                                                                      FIELDERROR(
                                                                        "Cross-Dock Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text005,
                                                                          Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));

                                                                    Bin.GET("Location Code","Cross-Dock Bin Code");
                                                                    Bin.TESTFIELD("Cross-Dock Bin",true);
                                                                    "Cross-Dock Zone Code" := Bin."Zone Code";
                                                                  end;
                                                                  MessageIfRcptLinesExist(FIELDCAPTION("Cross-Dock Bin Code"));
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Cross-Dock Bin Code }
    { 50  ;   ;Create Posted Header;Boolean       ;CaptionML=ENU=Create Posted Header }
    { 51  ;   ;Receiving No.       ;Code20        ;CaptionML=ENU=Receiving No. }
    { 62  ;   ;Last Receiving No.  ;Code20        ;TableRelation="Posted Whse. Receipt Header";
                                                   CaptionML=ENU=Last Receiving No. }
    { 63  ;   ;Receiving No. Series;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                if "Receiving No. Series" <> '' then begin
                                                                  WhseSetup.GET;
                                                                  WhseSetup.TESTFIELD("Posted Whse. Receipt Nos.");
                                                                  NoSeriesMgt.TestSeries(WhseSetup."Posted Whse. Receipt Nos.","Receiving No. Series");
                                                                end;
                                                                TESTFIELD("Receiving No.",'');
                                                              END;

                                                   OnLookup=BEGIN
                                                              with WhseRcptHeader do begin
                                                                WhseRcptHeader := Rec;
                                                                WhseSetup.GET;
                                                                WhseSetup.TESTFIELD("Posted Whse. Receipt Nos.");
                                                                if NoSeriesMgt.LookupSeries(WhseSetup."Posted Whse. Receipt Nos.","Receiving No. Series") then
                                                                  VALIDATE("Receiving No. Series");
                                                                Rec := WhseRcptHeader;
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Receiving No. Series }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Location Code"                          }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Location@1009 : Record Location;
      WhseRcptHeader@1002 : Record "Warehouse Receipt Header";
      WhseSetup@1001 : Record "Warehouse Setup";
      WhseCommentLine@1011 : Record "Warehouse Comment Line";
      NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
      WmsManagement@1004 : Codeunit "WMS Management";
      Text000@1007 : TextConst 'ENU=You cannot rename a %1.';
      Text001@1006 : TextConst 'ENU=You cannot change the %1, because the document has one or more lines.';
      Text002@1005 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.';
      Text003@1008 : TextConst 'ENU=You are not allowed to use location code %1.';
      Text005@1014 : TextConst 'ENU=must not be the %1 of the %2';
      Text006@1013 : TextConst 'ENU=You have changed %1 on the %2, but it has not been changed on the existing Warehouse Receipt Lines.\';
      Text007@1012 : TextConst 'ENU=You must update the existing Warehouse Receipt Lines manually.';
      HideValidationDialog@1015 : Boolean;
      Text008@1010 : TextConst 'ENU=The Whse. Receipt is not completely received.\Do you really want to delete the Whse. Receipt?';
      Text009@1016 : TextConst 'ENU=Cancelled.';

    [External]
    PROCEDURE AssistEdit@8(OldWhseRcptHeader@1000 : Record "Warehouse Receipt Header") : Boolean;
    BEGIN
      WhseSetup.GET;
      with WhseRcptHeader do begin
        WhseRcptHeader := Rec;
        WhseSetup.TESTFIELD("Whse. Receipt Nos.");
        if NoSeriesMgt.SelectSeries(
             WhseSetup."Whse. Receipt Nos.",OldWhseRcptHeader."No. Series","No. Series")
        then begin
          NoSeriesMgt.SetSeries("No.");
          Rec := WhseRcptHeader;
          exit(true);
        end;
      end;
    END;

    [External]
    PROCEDURE SortWhseDoc@3();
    VAR
      WhseRcptLine@1001 : Record "Warehouse Receipt Line";
      SequenceNo@1000 : Integer;
    BEGIN
      WhseRcptLine.SETRANGE("No.","No.");
      GetLocation("Location Code");
      case "Sorting Method" of
        "Sorting Method"::Item:
          WhseRcptLine.SETCURRENTKEY("No.","Item No.");
        "Sorting Method"::Document:
          WhseRcptLine.SETCURRENTKEY("No.","Source Document","Source No.");
        "Sorting Method"::"Shelf or Bin":
          begin
            if Location."Bin Mandatory" then
              WhseRcptLine.SETCURRENTKEY("No.","Bin Code")
            else
              WhseRcptLine.SETCURRENTKEY("No.","Shelf No.");
          end;
        "Sorting Method"::"Due Date":
          WhseRcptLine.SETCURRENTKEY("No.","Due Date");
      end;

      if WhseRcptLine.FIND('-') then begin
        SequenceNo := 10000;
        repeat
          WhseRcptLine."Sorting Sequence No." := SequenceNo;
          WhseRcptLine.MODIFY;
          SequenceNo := SequenceNo + 10000;
        until WhseRcptLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE MessageIfRcptLinesExist@7(ChangedFieldName@1000 : Text[80]);
    VAR
      WhseRcptLine@1001 : Record "Warehouse Receipt Line";
    BEGIN
      WhseRcptLine.SETRANGE("No.","No.");
      if not WhseRcptLine.ISEMPTY then
        if not HideValidationDialog then
          MESSAGE(
            STRSUBSTNO(
              Text006,ChangedFieldName,TABLECAPTION) + Text007);
    END;

    [External]
    PROCEDURE DeleteRelatedLines@11(UseTableTrigger@1001 : Boolean);
    VAR
      CrossDockOpp@1002 : Record "Whse. Cross-Dock Opportunity";
      WhseRcptLine@1003 : Record "Warehouse Receipt Line";
      Confirmed@1000 : Boolean;
    BEGIN
      WhseRcptLine.SETRANGE("No.","No.");
      if UseTableTrigger then begin
        if WhseRcptLine.FIND('-') then begin
          repeat
            if (WhseRcptLine.Quantity <> WhseRcptLine."Qty. Outstanding") and
               (WhseRcptLine."Qty. Outstanding" <> 0)
            then
              if not CONFIRM(Text008,false) then
                ERROR(Text009)
              else
                Confirmed := true;
          until (WhseRcptLine.NEXT = 0) or Confirmed;
          WhseRcptLine.DELETEALL;
        end;
      end else
        WhseRcptLine.DELETEALL(UseTableTrigger);

      CrossDockOpp.SETRANGE("Source Template Name",'');
      CrossDockOpp.SETRANGE("Source Name/No.","No.");
      CrossDockOpp.DELETEALL;

      WhseCommentLine.SETRANGE("Table Name",WhseCommentLine."Table Name"::"Whse. Receipt");
      WhseCommentLine.SETRANGE(Type,WhseCommentLine.Type::" ");
      WhseCommentLine.SETRANGE("No.","No.");
      WhseCommentLine.DELETEALL;
    END;

    [External]
    PROCEDURE GetHeaderStatus@15(LineNo@1003 : Integer) : Integer;
    VAR
      WhseReceiptLine2@1001 : Record "Warehouse Receipt Line";
      OrderStatus@1002 : '" ","Partially Received","Completely Received"';
    BEGIN
      WhseReceiptLine2.SETRANGE("No.","No.");
      with WhseReceiptLine2 do begin
        if LineNo <> 0 then
          SETFILTER("Line No.",'<>%1',LineNo);
        if FIND('-') then
          repeat
            case OrderStatus of
              OrderStatus::" ":
                OrderStatus := Status;
              OrderStatus::"Completely Received":
                if Status = Status::"Partially Received" then
                  OrderStatus := OrderStatus::"Partially Received";
            end;
          until NEXT = 0;
      end;
      exit(OrderStatus);
    END;

    [External]
    PROCEDURE LookupWhseRcptHeader@5(VAR WhseRcptHeader@1001 : Record "Warehouse Receipt Header");
    BEGIN
      COMMIT;
      if USERID <> '' then begin
        WhseRcptHeader.FILTERGROUP := 2;
        WhseRcptHeader.SETRANGE("Location Code");
      end;
      if PAGE.RUNMODAL(0,WhseRcptHeader) = ACTION::LookupOK then;
      if USERID <> '' then begin
        WhseRcptHeader.FILTERGROUP := 2;
        WhseRcptHeader.SETRANGE("Location Code",WhseRcptHeader."Location Code");
        WhseRcptHeader.FILTERGROUP := 0;
      end;
    END;

    [External]
    PROCEDURE LookupLocation@4(VAR WhseRcptHeader@1001 : Record "Warehouse Receipt Header");
    VAR
      Location@1000 : Record Location;
    BEGIN
      COMMIT;
      Location.FILTERGROUP := 2;
      Location.SETRANGE(Code);
      if PAGE.RUNMODAL(PAGE::"Locations with Warehouse List",Location) = ACTION::LookupOK then
        WhseRcptHeader.VALIDATE("Location Code",Location.Code);
      Location.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        Location.GetLocationSetup(LocationCode,Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE FindFirstAllowedRec@1(Which@1000 : Text[1024]) : Boolean;
    VAR
      WhseRcptHeader@1001 : Record "Warehouse Receipt Header";
      WMSManagement@1002 : Codeunit "WMS Management";
    BEGIN
      if FIND(Which) then begin
        WhseRcptHeader := Rec;
        while true do begin
          if WMSManagement.LocationIsAllowedToView("Location Code") then
            exit(true);

          if NEXT(1) = 0 then begin
            Rec := WhseRcptHeader;
            if FIND(Which) then
              while true do begin
                if WMSManagement.LocationIsAllowedToView("Location Code") then
                  exit(true);

                if NEXT(-1) = 0 then
                  exit(false);
              end;
          end;
        end;
      end;
      exit(false);
    END;

    [External]
    PROCEDURE FindNextAllowedRec@6(Steps@1000 : Integer) : Integer;
    VAR
      WhseRcptHeader@1002 : Record "Warehouse Receipt Header";
      WMSManagement@1001 : Codeunit "WMS Management";
      RealSteps@1003 : Integer;
      NextSteps@1004 : Integer;
    BEGIN
      RealSteps := 0;
      if Steps <> 0 then begin
        WhseRcptHeader := Rec;
        repeat
          NextSteps := NEXT(Steps / ABS(Steps));
          if WMSManagement.LocationIsAllowedToView("Location Code") then begin
            RealSteps := RealSteps + NextSteps;
            WhseRcptHeader := Rec;
          end;
        until (NextSteps = 0) or (RealSteps = Steps);
        Rec := WhseRcptHeader;
        if not FIND then;
      end;
      exit(RealSteps);
    END;

    [External]
    PROCEDURE ErrorIfUserIsNotWhseEmployee@12();
    VAR
      WhseEmployee@1000 : Record "Warehouse Employee";
    BEGIN
      if USERID <> '' then begin
        WhseEmployee.SETRANGE("User ID",USERID);
        if WhseEmployee.ISEMPTY then
          ERROR(Text002,USERID);
      end;
    END;

    BEGIN
    END.
  }
}

