OBJECT Codeunit 1530 Request Page Parameters Helper
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataItemPathTxt@1000 : TextConst '@@@={Locked};ENU=/ReportParameters/DataItems/DataItem';
      OptionPathTxt@1002 : TextConst '@@@={Locked};ENU=/ReportParameters/Options/Field';
      XmlNodesNotFoundErr@1001 : TextConst 'ENU=The XML Nodes at %1 cannot be found in the XML Document %2.';
      RepParamsWrongNumberFoundErr@1003 : TextConst 'ENU=XML contains incorrect number of <ReportParameters> nodes.';

    [Internal]
    PROCEDURE ShowRequestPageAndGetFilters@1(VAR NewFilters@1002 : Text;ExistingFilters@1005 : Text;EntityName@1003 : Code[20];TableNum@1004 : Integer;PageCaption@1006 : Text) FiltersSet : Boolean;
    VAR
      RequestPageParametersHelper@1000 : Codeunit "Request Page Parameters Helper";
      FilterPageBuilder@1001 : FilterPageBuilder;
    BEGIN
      if not RequestPageParametersHelper.BuildDynamicRequestPage(FilterPageBuilder,EntityName,TableNum) then
        exit(false);

      if ExistingFilters <> '' then
        if not RequestPageParametersHelper.SetViewOnDynamicRequestPage(
             FilterPageBuilder,ExistingFilters,EntityName,TableNum)
        then
          exit(false);

      FilterPageBuilder.PAGECAPTION := PageCaption;
      if not FilterPageBuilder.RUNMODAL then
        exit(false);

      NewFilters :=
        RequestPageParametersHelper.GetViewFromDynamicRequestPage(FilterPageBuilder,EntityName,TableNum);

      FiltersSet := true;
    END;

    [Internal]
    PROCEDURE ConvertParametersToFilters@3(RecRef@1005 : RecordRef;TempBlob@1000 : Record TempBlob) : Boolean;
    VAR
      TableMetadata@1003 : Record "Table Metadata";
      FoundXmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      if not TableMetadata.GET(RecRef.NUMBER) then
        exit(false);

      if not FindNodes(FoundXmlNodeList,ReadParameters(TempBlob),DataItemPathTxt) then
        exit(false);

      exit(GetFiltersForTable(RecRef,FoundXmlNodeList));
    END;

    LOCAL PROCEDURE ReadParameters@2(TempBlob@1000 : Record TempBlob) Parameters : Text;
    VAR
      ParametersInStream@1002 : InStream;
    BEGIN
      if TempBlob.Blob.HASVALUE then begin
        TempBlob.Blob.CREATEINSTREAM(ParametersInStream);
        ParametersInStream.READTEXT(Parameters);
      end;
    END;

    LOCAL PROCEDURE FindNodes@31(VAR FoundXmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";Parameters@1000 : Text;NodePath@1003 : Text) : Boolean;
    VAR
      XMLDOMMgt@1004 : Codeunit "XML DOM Management";
      ParametersXmlDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      if not XMLDOMMgt.LoadXMLDocumentFromText(Parameters,ParametersXmlDoc) then
        exit(false);

      if ISNULL(ParametersXmlDoc.DocumentElement) then
        exit(false);

      if not XMLDOMMgt.FindNodes(ParametersXmlDoc.DocumentElement,NodePath,FoundXmlNodeList) then
        ERROR(XmlNodesNotFoundErr,NodePath,ParametersXmlDoc.DocumentElement.InnerXml);

      exit(true);
    END;

    LOCAL PROCEDURE GetFiltersForTable@10(RecRef@1003 : RecordRef;FoundXmlNodeList@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList") : Boolean;
    VAR
      FoundXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      foreach FoundXmlNode in FoundXmlNodeList do
        if (FoundXmlNode.Attributes.ItemOf('name').Value = GetTableCaption(RecRef.NUMBER)) or
           (FoundXmlNode.Attributes.ItemOf('name').Value = GetTableName(RecRef.NUMBER)) or
           (FoundXmlNode.Attributes.ItemOf('name').Value = STRSUBSTNO('Table%1',RecRef.NUMBER))
        then begin
          RecRef.SETVIEW(FoundXmlNode.InnerText);
          exit(true);
        end;

      exit(false);
    END;

    LOCAL PROCEDURE GetTableCaption@11(TableID@1000 : Integer) : Text;
    VAR
      TableMetadata@1001 : Record "Table Metadata";
    BEGIN
      TableMetadata.GET(TableID);
      exit(TableMetadata.Caption);
    END;

    LOCAL PROCEDURE GetTableName@8(TableID@1000 : Integer) : Text;
    VAR
      TableMetadata@1001 : Record "Table Metadata";
    BEGIN
      TableMetadata.GET(TableID);
      exit(TableMetadata.Name);
    END;

    [External]
    PROCEDURE BuildDynamicRequestPage@6(VAR FilterPageBuilder@1000 : FilterPageBuilder;EntityName@1005 : Code[20];TableID@1001 : Integer) : Boolean;
    VAR
      TableList@1002 : DotNet "'mscorlib'.System.Collections.ArrayList";
      Name@1004 : Text;
      Table@1003 : Integer;
    BEGIN
      if not GetDataItems(TableList,EntityName,TableID) then
        exit(false);

      foreach Table in TableList do begin
        Name := FilterPageBuilder.ADDTABLE(GetTableCaption(Table),Table);
        AddFields(FilterPageBuilder,Name,Table);
      end;

      exit(true);
    END;

    LOCAL PROCEDURE GetDataItems@4(VAR TableList@1001 : DotNet "'mscorlib'.System.Collections.ArrayList";EntityName@1004 : Code[20];TableID@1000 : Integer) : Boolean;
    VAR
      TableMetadata@1003 : Record "Table Metadata";
      DynamicRequestPageEntity@1002 : Record "Dynamic Request Page Entity";
    BEGIN
      if not TableMetadata.GET(TableID) then
        exit(false);

      TableList := TableList.ArrayList;
      TableList.Add(TableID);

      DynamicRequestPageEntity.SETRANGE(Name,EntityName);
      DynamicRequestPageEntity.SETRANGE("Table ID",TableID);
      if DynamicRequestPageEntity.FINDSET then
        repeat
          if not TableList.Contains(DynamicRequestPageEntity."Related Table ID") then
            TableList.Add(DynamicRequestPageEntity."Related Table ID");
        until DynamicRequestPageEntity.NEXT = 0;

      exit(true);
    END;

    LOCAL PROCEDURE AddFields@9(VAR FilterPageBuilder@1000 : FilterPageBuilder;Name@1003 : Text;TableID@1002 : Integer);
    VAR
      DynamicRequestPageField@1001 : Record "Dynamic Request Page Field";
    BEGIN
      DynamicRequestPageField.SETRANGE("Table ID",TableID);
      if DynamicRequestPageField.FINDSET then
        repeat
          FilterPageBuilder.ADDFIELDNO(Name,DynamicRequestPageField."Field ID");
        until DynamicRequestPageField.NEXT = 0;
    END;

    [Internal]
    PROCEDURE SetViewOnDynamicRequestPage@5(VAR FilterPageBuilder@1000 : FilterPageBuilder;Filters@1001 : Text;EntityName@1007 : Code[20];TableID@1003 : Integer) : Boolean;
    VAR
      RecRef@1006 : RecordRef;
      FoundXmlNodeList@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      TableList@1004 : DotNet "'mscorlib'.System.Collections.ArrayList";
      Table@1005 : Integer;
    BEGIN
      if not FindNodes(FoundXmlNodeList,Filters,DataItemPathTxt) then
        exit(false);

      if not GetDataItems(TableList,EntityName,TableID) then
        exit(false);

      foreach Table in TableList do begin
        RecRef.OPEN(Table);
        GetFiltersForTable(RecRef,FoundXmlNodeList);
        FilterPageBuilder.SETVIEW(GetTableCaption(Table),RecRef.GETVIEW(false));
        RecRef.CLOSE;
        CLEAR(RecRef);
      end;

      exit(true);
    END;

    [Internal]
    PROCEDURE GetViewFromDynamicRequestPage@7(VAR FilterPageBuilder@1000 : FilterPageBuilder;EntityName@1005 : Code[20];TableID@1001 : Integer) : Text;
    VAR
      TableList@1002 : DotNet "'mscorlib'.System.Collections.ArrayList";
      TableFilterDictionary@1003 : DotNet "'mscorlib'.System.Collections.Generic.Dictionary`2";
      Table@1004 : Integer;
    BEGIN
      if not GetDataItems(TableList,EntityName,TableID) then
        exit('');

      TableFilterDictionary := TableFilterDictionary.Dictionary(TableList.Count);

      foreach Table in TableList do begin
        if not TableFilterDictionary.ContainsKey(Table) then
          TableFilterDictionary.Add(Table,FilterPageBuilder.GETVIEW(GetTableCaption(Table),false));
      end;

      exit(ConvertFiltersToParameters(TableFilterDictionary));
    END;

    LOCAL PROCEDURE ConvertFiltersToParameters@19(TableFilterDictionary@1000 : DotNet "'mscorlib'.System.Collections.Generic.Dictionary`2") : Text;
    VAR
      XMLDOMMgt@1001 : Codeunit "XML DOM Management";
      DataItemXmlNode@1007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      DataItemsXmlNode@1005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XmlDoc@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      ReportParametersXmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TableFilter@1006 : DotNet "'mscorlib'.System.Collections.Generic.KeyValuePair`2";
    BEGIN
      XmlDoc := XmlDoc.XmlDocument;

      XMLDOMMgt.AddRootElement(XmlDoc,'ReportParameters',ReportParametersXmlNode);
      XMLDOMMgt.AddDeclaration(XmlDoc,'1.0','utf-8','yes');

      XMLDOMMgt.AddElement(ReportParametersXmlNode,'DataItems','','',DataItemsXmlNode);
      foreach TableFilter in TableFilterDictionary do begin
        XMLDOMMgt.AddElement(DataItemsXmlNode,'DataItem',TableFilter.Value,'',DataItemXmlNode);
        XMLDOMMgt.AddAttribute(DataItemXmlNode,'name',STRSUBSTNO('Table%1',TableFilter.Key));
      end;

      exit(XmlDoc.InnerXml);
    END;

    [Internal]
    PROCEDURE GetRequestPageOptionValue@13(OptionName@1004 : Text;Parameters@1002 : Text) : Text;
    VAR
      FoundXmlNodeList@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      FoundXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TempValue@1005 : Text;
    BEGIN
      if not FindNodes(FoundXmlNodeList,Parameters,OptionPathTxt) then
        exit('');

      foreach FoundXmlNode in FoundXmlNodeList do begin
        TempValue := FoundXmlNode.Attributes.ItemOf('name').Value;
        if FORMAT(TempValue) = FORMAT(OptionName) then
          exit(FoundXmlNode.InnerText);
      end;
    END;

    [Internal]
    PROCEDURE GetReportID@12(RequestPageParameters@1004 : Text) : Text;
    VAR
      FoundXmlNodeList@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      if not FindNodes(FoundXmlNodeList,RequestPageParameters,'/ReportParameters') then
        ERROR(RepParamsWrongNumberFoundErr);

      if FoundXmlNodeList.Count <> 1 then
        ERROR(RepParamsWrongNumberFoundErr);

      exit(FoundXmlNodeList.Item(0).Attributes.ItemOf('id').Value)
    END;

    BEGIN
    END.
  }
}

