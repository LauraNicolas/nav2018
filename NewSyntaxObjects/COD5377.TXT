OBJECT Codeunit 5377 Webhook Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE GetNotificationUrl@3() NotificationUrl : Text[250];
    BEGIN
      NotificationUrl := GETURL(CLIENTTYPE::OData);
      NotificationUrl := COPYSTR(NotificationUrl,1,STRPOS(NotificationUrl,FORMAT(CLIENTTYPE::OData)) - 1) + 'api/webhooks';
    END;

    [External]
    PROCEDURE IsCurrentClientTypeAllowed@6() : Boolean;
    BEGIN
      exit(not (CURRENTCLIENTTYPE in [CLIENTTYPE::Management,CLIENTTYPE::NAS]));
    END;

    PROCEDURE IsSyncAllowed@5() : Boolean;
    VAR
      CompanyInformation@1003 : Record "Company Information";
      CompanyInformationMgt@1002 : Codeunit "Company Information Mgt.";
      PermissionManager@1001 : Codeunit "Permission Manager";
    BEGIN
      if not CompanyInformation.GET then
        exit(false);

      if not PermissionManager.SoftwareAsAService then
        exit(false);

      if CompanyInformationMgt.IsDemoCompany then
        exit(false);

      exit(true);
    END;

    PROCEDURE FindMatchingWebhookSubscription@8(VAR WebhookSubscription@1000 : Record "Webhook Subscription";SubscriptionEndpoint@1006 : Text) : Boolean;
    BEGIN
      WebhookSubscription.SETRANGE("Company Name",COMPANYNAME);
      if WebhookSubscription.FIND('-') then
        repeat
          if WebhookSubscription.Endpoint = SubscriptionEndpoint then
            exit(true);
        until WebhookSubscription.NEXT = 0;
    END;

    PROCEDURE FindMatchingWebhookSubscriptionRegex@9(VAR WebhookSubscription@1000 : Record "Webhook Subscription";EndpointRegex@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex") : Boolean;
    BEGIN
      WebhookSubscription.SETRANGE("Company Name",COMPANYNAME);
      if WebhookSubscription.FINDSET then
        repeat
          if EndpointRegex.IsMatch(WebhookSubscription.Endpoint) then
            exit(true);
        until WebhookSubscription.NEXT = 0;
    END;

    PROCEDURE FindWebhookSubscriptionMatchingEndPoint@1(VAR WebhookSubscription@1000 : Record "Webhook Subscription";EndpointUri@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";StartIndex@1003 : Integer;PathLength@1006 : Integer) : Boolean;
    VAR
      SubscriptionEndpointUri@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      SearchSubString@1004 : Text;
      IsSameEndpoint@1002 : Boolean;
    BEGIN
      if WebhookSubscription.FINDSET then
        repeat
          SubscriptionEndpointUri := SubscriptionEndpointUri.Uri(WebhookSubscription.Endpoint);
          IsSameEndpoint := false;
          if StartIndex <= 0 then
            IsSameEndpoint := (EndpointUri.ToString = SubscriptionEndpointUri.ToString)
          else
            if (SubscriptionEndpointUri.Scheme = EndpointUri.Scheme) and
               (SubscriptionEndpointUri.Host = EndpointUri.Host)
            then begin
              SearchSubString := COPYSTR(EndpointUri.PathAndQuery,StartIndex + PathLength);
              if STRPOS(SubscriptionEndpointUri.PathAndQuery,SearchSubString) > 0 then
                IsSameEndpoint := true;
            end;

          if IsSameEndpoint and (COMPANYNAME = WebhookSubscription."Company Name") then
            exit(true);
        until WebhookSubscription.NEXT = 0;
    END;

    PROCEDURE IsValidNotificationRunAsUser@2(UserSecurityId@1001 : GUID) : Boolean;
    VAR
      User@1000 : Record User;
      EmptyGUID@1002 : GUID;
    BEGIN
      if UserSecurityId = EmptyGUID then
        exit(false);

      if not User.GET(UserSecurityId) then
        exit(false);

      exit(User."License Type" <> User."License Type"::"External User");
    END;

    BEGIN
    END.
  }
}

