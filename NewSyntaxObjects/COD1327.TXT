OBJECT Codeunit 1327 Adjust Item Inventory
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CantFindTemplateOrBatchErr@1001 : TextConst 'ENU=Unable to find the correct item journal template or batch to post this change. Use the default item journal instead.';
      SimpleInvJnlNameTxt@1000 : TextConst '@@@=The default name of the item journal;ENU=DEFAULT';

    [External]
    PROCEDURE PostAdjustmentToItemLedger@96(Item@1004 : Record Item;NewInventory@1003 : Decimal) LastErrorText : Text;
    VAR
      ItemJnlLine@1001 : Record "Item Journal Line";
      ItemTemplate@1000 : Code[10];
    BEGIN
      Item.CALCFIELDS(Inventory);
      if Item.Inventory = NewInventory then
        exit;

      ItemTemplate := SelectItemTemplateForAdjustment;
      CreateItemJnlLine(ItemJnlLine,Item,ItemTemplate,CreateItemBatch(ItemTemplate),NewInventory);
      ItemJnlLine.INSERT(true);

      LastErrorText := PostItemJnlLines(ItemJnlLine);
    END;

    [Internal]
    PROCEDURE PostMultipleAdjustmentsToItemLedger@97(VAR TempItemJournalLine@1004 : TEMPORARY Record "Item Journal Line") LastErrorText : Text;
    VAR
      Item@1002 : Record Item;
      ItemJnlLine@1001 : Record "Item Journal Line";
      ItemTemplate@1003 : Code[10];
      ItemBatch@1005 : Code[10];
    BEGIN
      if not TempItemJournalLine.FINDSET then
        exit;

      ItemTemplate := SelectItemTemplateForAdjustment;
      ItemBatch := CreateItemBatch(ItemTemplate);

      repeat
        Item.GET(TempItemJournalLine."Item No.");
        Item.SETFILTER("Location Filter",'%1',TempItemJournalLine."Location Code");
        Item.CALCFIELDS(Inventory);
        if Item.Inventory <> TempItemJournalLine.Quantity then begin
          CreateItemJnlLine(ItemJnlLine,Item,ItemTemplate,ItemBatch,TempItemJournalLine.Quantity);
          ItemJnlLine.VALIDATE("Line No.",TempItemJournalLine."Line No.");
          ItemJnlLine.VALIDATE("Location Code",TempItemJournalLine."Location Code");
          ItemJnlLine.INSERT(true);
        end;
      until TempItemJournalLine.NEXT = 0;

      ItemJnlLine.SETRANGE("Journal Template Name",ItemTemplate);
      ItemJnlLine.SETRANGE("Journal Batch Name",ItemBatch);
      if ItemJnlLine.ISEMPTY then
        exit;

      LastErrorText := PostItemJnlLines(ItemJnlLine);
    END;

    PROCEDURE CreateItemJnlLine@1(VAR ItemJnlLine@1000 : Record "Item Journal Line";VAR Item@1003 : Record Item;ItemTemplate@1001 : Code[10];ItemBatch@1002 : Code[10];NewInventory@1004 : Decimal);
    BEGIN
      ItemJnlLine.INIT;
      ItemJnlLine.VALIDATE("Journal Template Name",ItemTemplate);
      ItemJnlLine.VALIDATE("Journal Batch Name",ItemBatch);
      ItemJnlLine.VALIDATE("Posting Date",WORKDATE);
      ItemJnlLine."Document No." := Item."No.";

      if Item.Inventory < NewInventory then
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::"Positive Adjmt.")
      else
        ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::"Negative Adjmt.");

      ItemJnlLine.VALIDATE("Item No.",Item."No.");
      ItemJnlLine.VALIDATE(Description,Item.Description);
      ItemJnlLine.VALIDATE(Quantity,ABS(NewInventory - Item.Inventory));
    END;

    PROCEDURE PostItemJnlLines@8(VAR ItemJournalLine@1001 : Record "Item Journal Line") LastErrorText : Text;
    VAR
      Completed@1000 : Boolean;
    BEGIN
      COMMIT;

      Completed := CODEUNIT.RUN(CODEUNIT::"Item Jnl.-Post Batch",ItemJournalLine);

      DeleteItemBatch(ItemJournalLine."Journal Template Name",ItemJournalLine."Journal Batch Name");

      if not Completed then begin
        LastErrorText := GETLASTERRORTEXT;
        COMMIT;
      end;
    END;

    PROCEDURE SelectItemTemplateForAdjustment@95() : Code[10];
    VAR
      ItemJnlTemplate@1002 : Record "Item Journal Template";
      ItemJnlLine@1170000001 : Record "Item Journal Line";
      ItemJnlManagement@1001 : Codeunit ItemJnlManagement;
      JnlSelected@1000 : Boolean;
    BEGIN
      ItemJnlManagement.TemplateSelection(PAGE::"Item Journal",0,false,ItemJnlLine,JnlSelected);

      ItemJnlTemplate.SETRANGE("Page ID",PAGE::"Item Journal");
      ItemJnlTemplate.SETRANGE(Recurring,false);
      ItemJnlTemplate.SETRANGE(Type,ItemJnlTemplate.Type::Item);
      if not ItemJnlTemplate.FINDFIRST then
        ERROR(CantFindTemplateOrBatchErr);

      exit(ItemJnlTemplate.Name);
    END;

    LOCAL PROCEDURE CreateItemBatch@93(TemplateName@1001 : Code[10]) : Code[10];
    VAR
      ItemJnlBatch@1002 : Record "Item Journal Batch";
    BEGIN
      ItemJnlBatch.INIT;
      ItemJnlBatch."Journal Template Name" := TemplateName;
      ItemJnlBatch.Name := CreateBatchName;
      ItemJnlBatch.Description := SimpleInvJnlNameTxt;
      ItemJnlBatch.INSERT;

      exit(ItemJnlBatch.Name);
    END;

    PROCEDURE FindOrCreateItemBatchWithCustomNameDesc@3(TemplateName@1002 : Code[10];BatchName@1000 : Code[10];BatchDescription@1003 : Text[50]) : Code[10];
    VAR
      ItemJnlBatch@1001 : Record "Item Journal Batch";
    BEGIN
      if ItemJnlBatch.GET(TemplateName,BatchName) then
        exit(BatchName);
      ItemJnlBatch.INIT;
      ItemJnlBatch."Journal Template Name" := TemplateName;
      ItemJnlBatch.Name := BatchName;
      ItemJnlBatch.Description := BatchDescription;
      ItemJnlBatch.SetupNewBatch;
      ItemJnlBatch.INSERT;
      exit(ItemJnlBatch.Name);
    END;

    LOCAL PROCEDURE DeleteItemBatch@84(TemplateName@1001 : Code[10];BatchName@1000 : Code[10]);
    VAR
      ItemJnlBatch@1002 : Record "Item Journal Batch";
    BEGIN
      if ItemJnlBatch.GET(TemplateName,BatchName) then
        ItemJnlBatch.DELETE(true);
    END;

    LOCAL PROCEDURE CreateBatchName@60() : Code[10];
    VAR
      GuidStr@1213 : Text;
      BatchName@1423 : Text;
    BEGIN
      GuidStr := FORMAT(CREATEGUID);
      // Remove numbers to avoid batch name change by INCSTR in codeunit 23
      BatchName := CONVERTSTR(GuidStr,'1234567890-','GHIJKLMNOPQ');
      exit(COPYSTR(BatchName,2,10));
    END;

    BEGIN
    END.
  }
}

