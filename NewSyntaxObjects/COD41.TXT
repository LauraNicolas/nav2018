OBJECT Codeunit 41 TextManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TodayText@1000 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=TODAY';
      WorkdateText@1001 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=WORKDATE';
      PeriodText@1004 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=PERIOD';
      YearText@1003 : TextConst '@@@=Must be uppercase hint reuse the transtaltion from cod1 for 2009 sp1;ENU=YEAR';
      NumeralOutOfRangeError@1006 : TextConst 'ENU=When you specify periods and years, you can use numbers from 1 - 999, such as P-1, P1, Y2 or Y+3.';
      AlphabetText@1002 : TextConst '@@@=Uppercase - translate into entire alphabet.;ENU=ABCDEFGHIJKLMNOPQRSTUVWXYZ';
      NowText@1007 : TextConst '@@@=Must be uppercase.;ENU=NOW';
      YesterdayText@1009 : TextConst '@@@=Must be uppercase;ENU=YESTERDAY';
      TomorrowText@1010 : TextConst '@@@=Must be uppercase;ENU=TOMORROW';
      WeekText@1012 : TextConst '@@@=Must be uppercase;ENU=WEEK';
      MonthText@1005 : TextConst '@@@=Must be uppercase;ENU=MONTH';
      QuarterText@1018 : TextConst '@@@=Must be uppercase;ENU=QUARTER';
      UserText@1013 : TextConst '@@@=Must be uppercase;ENU=USER';
      MeText@1011 : TextConst '@@@=Must be uppercase;ENU=ME';
      MyCustomersText@1014 : TextConst '@@@=Must be uppercase;ENU=MYCUSTOMERS';
      MyItemsText@1015 : TextConst '@@@=Must be uppercase;ENU=MYITEMS';
      MyVendorsText@1016 : TextConst '@@@=Must be uppercase;ENU=MYVENDORS';
      CompanyText@1017 : TextConst '@@@=Must be uppercase;ENU=COMPANY';
      OverflowMsg@1008 : TextConst 'ENU=The filter contains more than 2000 numbers and has been truncated.';
      UnincrementableStringErr@1019 : TextConst 'ENU=%1 contains no number and cannot be incremented.';

    [External]
    PROCEDURE MakeDateTimeText@1(VAR DateTimeText@1000 : Text[250]) : Integer;
    VAR
      Date@1001 : Date;
      Time@1002 : Time;
    BEGIN
      if GetSeparateDateTime(DateTimeText,Date,Time) then begin
        if Date = 0D then
          exit(0);
        if Time = 000000T then
          Time := 000000T;
        DateTimeText := FORMAT(CREATEDATETIME(Date,Time));
      end;
      exit(0);
    END;

    [External]
    PROCEDURE GetSeparateDateTime@2(DateTimeText@1000 : Text[250];VAR Date@1005 : Date;VAR Time@1006 : Time) : Boolean;
    VAR
      DateText@1001 : Text[250];
      TimeText@1002 : Text[250];
      Position@1008 : Integer;
      Length@1007 : Integer;
    BEGIN
      if DateTimeText in [NowText,'NOW'] then
        DateTimeText := FORMAT(CURRENTDATETIME);
      Date := 0D;
      Time := 000000T;
      Position := 1;
      Length := STRLEN(DateTimeText);
      ReadCharacter(' ',DateTimeText,Position,Length);
      ReadUntilCharacter(' ',DateTimeText,Position,Length);
      DateText := DELCHR(COPYSTR(DateTimeText,1,Position - 1),'<>');
      TimeText := DELCHR(COPYSTR(DateTimeText,Position),'<>');
      if DateText = '' then
        exit(true);

      if MakeDateText(DateText) = 0 then;
      if not EVALUATE(Date,DateText) then
        exit(false);

      if TimeText = '' then
        exit(true);

      if MakeTimeText(TimeText) = 0 then;
      if EVALUATE(Time,TimeText) then
        exit(true);
    END;

    [External]
    PROCEDURE MakeDateText@3(VAR DateText@1000 : Text[250]) : Integer;
    VAR
      Date@1002 : Date;
      PartOfText@1001 : Text[250];
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(DateText);
      ReadCharacter(' ',DateText,Position,Length);
      if not FindText(PartOfText,DateText,Position,Length) then
        exit(0);
      case PartOfText of
        COPYSTR('TODAY',1,STRLEN(PartOfText)),COPYSTR(TodayText,1,STRLEN(PartOfText)):
          Date := TODAY;
        COPYSTR('WORKDATE',1,STRLEN(PartOfText)),COPYSTR(WorkdateText,1,STRLEN(PartOfText)):
          Date := WORKDATE;
        else
          exit(0);
      end;
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateText,Position,Length);
      if Position > Length then begin
        DateText := FORMAT(Date);
        exit(0);
      end;
      exit(Position);
    END;

    [External]
    PROCEDURE MakeTimeText@4(VAR TimeText@1000 : Text[250]) : Integer;
    VAR
      PartOfText@1001 : Text[132];
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(TimeText);
      ReadCharacter(' ',TimeText,Position,Length);
      if not FindText(PartOfText,TimeText,Position,Length) then
        exit(0);
      if PartOfText <> COPYSTR(TimeText,1,STRLEN(PartOfText)) then
        exit(0);
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',TimeText,Position,Length);
      if Position <= Length then
        exit(Position);
      TimeText := FORMAT(000000T + ROUND(TIME - 000000T,1000));
      exit(0);
    END;

    [External]
    PROCEDURE MakeText@5(VAR Text@1000 : Text[250]) : Integer;
    VAR
      StandardText@1002 : Record "Standard Text";
      PartOfText@1001 : Text[132];
      Position@1004 : Integer;
      Length@1003 : Integer;
    BEGIN
      Position := 1;
      Length := STRLEN(Text);
      ReadCharacter(' ',Text,Position,Length);
      if not ReadSymbol('?',Text,Position,Length) then
        exit(0);
      PartOfText := COPYSTR(Text,Position);
      if PartOfText = '' then begin
        if PAGE.RUNMODAL(0,StandardText) = ACTION::LookupOK then
          Text := StandardText.Description;
        exit(0);
      end;
      StandardText.Code := COPYSTR(Text,Position,MAXSTRLEN(StandardText.Code));
      if not StandardText.FIND('=>') or
         (UPPERCASE(PartOfText) <> COPYSTR(StandardText.Code,1,STRLEN(PartOfText)))
      then
        exit(Position);
      Text := StandardText.Description;
      exit(0);
    END;

    [Internal]
    PROCEDURE MakeTextFilter@17(VAR TextFilterText@1000 : Text) : Integer;
    VAR
      Position@1002 : Integer;
      Length@1001 : Integer;
      PartOfText@1003 : Text[250];
      HandledByEvent@1004 : Boolean;
    BEGIN
      OnBeforeMakeTextFilter(TextFilterText,Position,HandledByEvent);
      if HandledByEvent then
        exit(Position);

      Position := 1;
      Length := STRLEN(TextFilterText);
      ReadCharacter(' ',TextFilterText,Position,Length);
      if FindText(PartOfText,TextFilterText,Position,Length) then
        case PartOfText of
          COPYSTR('ME',1,STRLEN(PartOfText)),COPYSTR(MeText,1,STRLEN(PartOfText)):
            begin
              Position := Position + STRLEN(PartOfText);
              TextFilterText := USERID;
            end;
          COPYSTR('USER',1,STRLEN(PartOfText)),COPYSTR(UserText,1,STRLEN(PartOfText)):
            begin
              Position := Position + STRLEN(PartOfText);
              TextFilterText := USERID;
            end;
          COPYSTR('COMPANY',1,STRLEN(PartOfText)),COPYSTR(CompanyText,1,STRLEN(PartOfText)):
            begin
              Position := Position + STRLEN(PartOfText);
              TextFilterText := COMPANYNAME;
            end;
          COPYSTR('MYCUSTOMERS',1,STRLEN(PartOfText)),COPYSTR(MyCustomersText,1,STRLEN(PartOfText)):
            begin
              Position := Position + STRLEN(PartOfText);
              GetMyFilterText(TextFilterText,DATABASE::"My Customer");
            end;
          COPYSTR('MYITEMS',1,STRLEN(PartOfText)),COPYSTR(MyItemsText,1,STRLEN(PartOfText)):
            begin
              Position := Position + STRLEN(PartOfText);
              GetMyFilterText(TextFilterText,DATABASE::"My Item");
            end;
          COPYSTR('MYVENDORS',1,STRLEN(PartOfText)),COPYSTR(MyVendorsText,1,STRLEN(PartOfText)):
            begin
              Position := Position + STRLEN(PartOfText);
              GetMyFilterText(TextFilterText,DATABASE::"My Vendor");
            end;
          else
            exit(Position);
        end;
      exit(0);
    END;

    [External]
    PROCEDURE MakeDateTimeFilter@6(VAR DateTimeFilterText@1000 : Text[250]) : Integer;
    VAR
      Head@1006 : Text[250];
      Tail@1008 : Text[250];
      Position@1012 : Integer;
      Length@1011 : Integer;
    BEGIN
      DateTimeFilterText := DELCHR(DateTimeFilterText,'<>');
      Position := 1;
      Length := STRLEN(DateTimeFilterText);
      while Length <> 0 do begin
        ReadCharacter(' |()',DateTimeFilterText,Position,Length);
        if Position > 1 then begin
          Head := Head + COPYSTR(DateTimeFilterText,1,Position - 1);
          DateTimeFilterText := COPYSTR(DateTimeFilterText,Position);
          Position := 1;
          Length := STRLEN(DateTimeFilterText);
        end;
        if Length <> 0 then begin
          ReadUntilCharacter('|()',DateTimeFilterText,Position,Length);
          if Position > 1 then begin
            Tail := COPYSTR(DateTimeFilterText,Position);
            DateTimeFilterText := COPYSTR(DateTimeFilterText,1,Position - 1);
            MakeDateTimeFilter2(DateTimeFilterText);
            EVALUATE(Head,Head + DateTimeFilterText);
            DateTimeFilterText := Tail;
            Position := 1;
            Length := STRLEN(DateTimeFilterText);
          end;
        end;
      end;
      DateTimeFilterText := Head;
      exit(0);
    END;

    LOCAL PROCEDURE MakeDateTimeFilter2@7(VAR DateTimeFilterText@1000 : Text[250]);
    VAR
      DateTime1@1002 : DateTime;
      DateTime2@1005 : DateTime;
      Date1@1007 : Date;
      Date2@1003 : Date;
      Time1@1004 : Time;
      Time2@1001 : Time;
      StringPosition@1011 : Integer;
    BEGIN
      StringPosition := STRPOS(DateTimeFilterText,'..');
      if StringPosition = 0 then begin
        if not GetSeparateDateTime(DateTimeFilterText,Date1,Time1) then
          exit;
        if Date1 = 0D then
          exit;
        if Time1 = 000000T then begin
          DateTimeFilterText := FORMAT(CREATEDATETIME(Date1,000000T)) + '..' + FORMAT(CREATEDATETIME(Date1,235959.995T));
          exit;
        end;
        DateTimeFilterText := FORMAT(CREATEDATETIME(Date1,Time1));
        exit;
      end;
      if not GetSeparateDateTime(COPYSTR(DateTimeFilterText,1,StringPosition - 1),Date1,Time1) then
        exit;
      if not GetSeparateDateTime(COPYSTR(DateTimeFilterText,StringPosition + 2),Date2,Time2) then
        exit;

      if (Date1 = 0D) and (Date2 = 0D) then
        exit;

      if Date1 <> 0D then begin
        if Time1 = 000000T then
          Time1 := 000000T;
        DateTime1 := CREATEDATETIME(Date1,Time1);
      end;
      if Date2 <> 0D then begin
        if Time2 = 000000T then
          Time2 := 235959T;
        DateTime2 := CREATEDATETIME(Date2,Time2);
      end;
      DateTimeFilterText := FORMAT(DateTime1) + '..' + FORMAT(DateTime2);
    END;

    [External]
    PROCEDURE MakeDateFilter@8(VAR DateFilterText@1000 : Text) : Integer;
    VAR
      Date1@1005 : Date;
      Date2@1004 : Date;
      Text1@1007 : Text[30];
      Text2@1006 : Text[30];
      StringPosition@1001 : Integer;
      i@1002 : Integer;
      OK@1003 : Boolean;
    BEGIN
      DateFilterText := DELCHR(DateFilterText,'<>');
      if DateFilterText = '' then
        exit(0);
      StringPosition := STRPOS(DateFilterText,'..');
      if StringPosition = 0 then begin
        i := MakeDateFilter2(OK,Date1,Date2,DateFilterText);
        if i <> 0 then
          exit(i);
        if OK then
          if Date1 = Date2 then
            DateFilterText := FORMAT(Date1)
          else
            DateFilterText := STRSUBSTNO('%1..%2',Date1,Date2);
        exit(0);
      end;

      Text1 := COPYSTR(DateFilterText,1,StringPosition - 1);
      i := MakeDateFilter2(OK,Date1,Date2,Text1);
      if i <> 0 then
        exit(i);
      if OK then
        Text1 := FORMAT(Date1);

      ReadCharacter('.',DateFilterText,StringPosition,STRLEN(DateFilterText));

      Text2 := COPYSTR(DateFilterText,StringPosition);
      i := MakeDateFilter2(OK,Date1,Date2,Text2);
      if i <> 0 then
        exit(StringPosition + i - 1);
      if OK then
        Text2 := FORMAT(Date2);

      DateFilterText := Text1 + '..' + Text2;
      exit(0);
    END;

    LOCAL PROCEDURE MakeDateFilter2@9(VAR OK@1000 : Boolean;VAR Date1@1001 : Date;VAR Date2@1002 : Date;DateFilterText@1003 : Text) : Integer;
    VAR
      PartOfText@1004 : Text[250];
      RemainderOfText@1009 : Text;
      Position@1007 : Integer;
      Length@1006 : Integer;
      DateFormula@1005 : DateFormula;
    BEGIN
      if EVALUATE(DateFormula,DateFilterText) then begin
        RemainderOfText := DateFilterText;
        DateFilterText := '';
      end else begin
        Position := STRPOS(DateFilterText,'+');
        if Position = 0 then
          Position := STRPOS(DateFilterText,'-');

        if Position > 0 then begin
          RemainderOfText := DELCHR(COPYSTR(DateFilterText,Position));
          if EVALUATE(DateFormula,RemainderOfText) then
            DateFilterText := DELCHR(COPYSTR(DateFilterText,1,Position - 1))
          else
            RemainderOfText := '';
        end;
      end;

      Position := 1;
      Length := STRLEN(DateFilterText);
      FindText(PartOfText,DateFilterText,Position,Length);

      if PartOfText <> '' then
        case PartOfText of
          COPYSTR('PERIOD',1,STRLEN(PartOfText)),COPYSTR(PeriodText,1,STRLEN(PartOfText)):
            OK := FindPeriod(Date1,Date2,false,DateFilterText,PartOfText,Position,Length);
          COPYSTR('YEAR',1,STRLEN(PartOfText)),COPYSTR(YearText,1,STRLEN(PartOfText)):
            OK := FindPeriod(Date1,Date2,true,DateFilterText,PartOfText,Position,Length);
          COPYSTR('TODAY',1,STRLEN(PartOfText)),COPYSTR(TodayText,1,STRLEN(PartOfText)):
            OK := FindDate(TODAY,Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('WORKDATE',1,STRLEN(PartOfText)),COPYSTR(WorkdateText,1,STRLEN(PartOfText)):
            OK := FindDate(WORKDATE,Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('NOW',1,STRLEN(PartOfText)),COPYSTR(NowText,1,STRLEN(PartOfText)):
            OK := FindDate(DT2DATE(CURRENTDATETIME),Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('YESTERDAY',1,STRLEN(PartOfText)),COPYSTR(YesterdayText,1,STRLEN(PartOfText)):
            OK := FindDate(CALCDATE('<-1D>'),Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('TOMORROW',1,STRLEN(PartOfText)),COPYSTR(TomorrowText,1,STRLEN(PartOfText)):
            OK := FindDate(CALCDATE('<1D>'),Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('WEEK',1,STRLEN(PartOfText)),COPYSTR(WeekText,1,STRLEN(PartOfText)):
            OK := FindDates('<-CW>','<CW>',Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('MONTH',1,STRLEN(PartOfText)),COPYSTR(MonthText,1,STRLEN(PartOfText)):
            OK := FindDates('<-CM>','<CM>',Date1,Date2,DateFilterText,PartOfText,Position,Length);
          COPYSTR('QUARTER',1,STRLEN(PartOfText)),COPYSTR(QuarterText,1,STRLEN(PartOfText)):
            OK := FindDates('<-CQ>','<CQ>',Date1,Date2,DateFilterText,PartOfText,Position,Length);
        end
      else
        if (DateFilterText <> '') and EVALUATE(Date1,DateFilterText) then begin
          Date2 := Date1;
          OK := true;
          Position := 0;
        end else
          if RemainderOfText <> '' then begin
            Date1 := TODAY;
            Date2 := Date1;
            OK := true;
            Position := 0;
          end else
            OK := false;

      if OK and (RemainderOfText <> '') then begin
        Date1 := CALCDATE(DateFormula,Date1);
        Date2 := CALCDATE(DateFormula,Date2);
      end;
      exit(Position);
    END;

    [External]
    PROCEDURE MakeTimeFilter@22(VAR TimeFilterText@1000 : Text[250]) : Integer;
    VAR
      Head@1006 : Text[250];
      Tail@1008 : Text[250];
      Position@1012 : Integer;
      Length@1011 : Integer;
    BEGIN
      TimeFilterText := DELCHR(TimeFilterText,'<>');
      Position := 1;
      Length := STRLEN(TimeFilterText);
      while Length <> 0 do begin
        ReadCharacter(' |()',TimeFilterText,Position,Length);
        if Position > 1 then begin
          Head := Head + COPYSTR(TimeFilterText,1,Position - 1);
          TimeFilterText := COPYSTR(TimeFilterText,Position);
          Position := 1;
          Length := STRLEN(TimeFilterText);
        end;
        if Length <> 0 then begin
          ReadUntilCharacter('|()',TimeFilterText,Position,Length);
          if Position > 1 then begin
            Tail := COPYSTR(TimeFilterText,Position);
            TimeFilterText := COPYSTR(TimeFilterText,1,Position - 1);
            MakeTimeFilter2(TimeFilterText);
            EVALUATE(Head,Head + TimeFilterText);
            TimeFilterText := Tail;
            Position := 1;
            Length := STRLEN(TimeFilterText);
          end;
        end;
      end;
      TimeFilterText := Head;
      exit(0);
    END;

    LOCAL PROCEDURE MakeTimeFilter2@21(VAR TimeFilterText@1000 : Text[250]);
    VAR
      Time1@1004 : Time;
      Time2@1001 : Time;
      StringPosition@1011 : Integer;
    BEGIN
      StringPosition := STRPOS(TimeFilterText,'..');
      if StringPosition = 0 then begin
        if not GetTime(Time1,TimeFilterText) then
          exit;
        if Time1 = 000000T then begin
          TimeFilterText := FORMAT(000000T) + '..' + FORMAT(235959.995T);
          exit;
        end;
        TimeFilterText := FORMAT(Time1);
        exit;
      end;
      if not GetTime(Time1,COPYSTR(TimeFilterText,1,StringPosition - 1)) then
        exit;
      if not GetTime(Time2,COPYSTR(TimeFilterText,StringPosition + 2)) then
        exit;

      if Time1 = 000000T then
        Time1 := 000000T;
      if Time2 = 000000T then
        Time2 := 235959T;

      TimeFilterText := FORMAT(Time1) + '..' + FORMAT(Time2);
    END;

    [External]
    PROCEDURE EvaluateIncStr@20(StringToIncrement@1000 : Code[20];ErrorHint@1001 : Text);
    BEGIN
      if INCSTR(StringToIncrement) = '' then
        ERROR(UnincrementableStringError,ErrorHint);
    END;

    [External]
    PROCEDURE UnincrementableStringError@19() : Text;
    BEGIN
      exit(UnincrementableStringErr)
    END;

    LOCAL PROCEDURE GetTime@16(VAR Time0@1000 : Time;FilterText@1001 : Text[250]) : Boolean;
    BEGIN
      FilterText := DELCHR(FilterText);
      if FilterText in [NowText,'NOW'] then begin
        Time0 := TIME;
        exit(true);
      end;
      exit(EVALUATE(Time0,FilterText));
    END;

    LOCAL PROCEDURE FindPeriod@10(VAR Date1@1000 : Date;VAR Date2@1001 : Date;FindYear@1002 : Boolean;DateFilterText@1003 : Text;PartOfText@1009 : Text;VAR Position@1004 : Integer;Length@1005 : Integer) : Boolean;
    VAR
      AccountingPeriod@1006 : Record "Accounting Period";
      Sign@1007 : Text[1];
      Numeral@1008 : Integer;
    BEGIN
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateFilterText,Position,Length);
      if FindYear then
        AccountingPeriod.SETRANGE("New Fiscal Year",true)
      else
        AccountingPeriod.SETRANGE("New Fiscal Year");
      Sign := '';
      if ReadSymbol('+',DateFilterText,Position,Length) then
        Sign := '+'
      else
        if ReadSymbol('-',DateFilterText,Position,Length) then
          Sign := '-';
      if Sign = '' then
        if ReadNumeral(Numeral,DateFilterText,Position,Length) then begin
          if FindYear then
            AccountingPeriod.FINDFIRST
          else begin
            AccountingPeriod.SETRANGE("New Fiscal Year",true);
            AccountingPeriod."Starting Date" := WORKDATE;
            AccountingPeriod.FIND('=<');
            AccountingPeriod.SETRANGE("New Fiscal Year");
          end;
          AccountingPeriod.NEXT(Numeral - 1);
        end else begin
          AccountingPeriod."Starting Date" := WORKDATE;
          AccountingPeriod.FIND('=<');
        end
      else begin
        if not ReadNumeral(Numeral,DateFilterText,Position,Length) then
          exit(true);
        if Sign = '-' then
          Numeral := -Numeral;
        AccountingPeriod."Starting Date" := WORKDATE;
        AccountingPeriod.FIND('=<');
        AccountingPeriod.NEXT(Numeral);
      end;
      Date1 := AccountingPeriod."Starting Date";
      if AccountingPeriod.NEXT = 0 then
        Date2 := DMY2DATE(31,12,9999)
      else
        Date2 := AccountingPeriod."Starting Date" - 1;
      ReadCharacter(' ',DateFilterText,Position,Length);
      if Position > Length then
        Position := 0;
      exit(true);
    END;

    LOCAL PROCEDURE FindDate@18(Date1Input@1000 : Date;VAR Date1@1002 : Date;VAR Date2@1001 : Date;DateFilterText@1003 : Text;PartOfText@1006 : Text;VAR Position@1004 : Integer;Length@1005 : Integer) : Boolean;
    BEGIN
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateFilterText,Position,Length);
      Date1 := Date1Input;
      Date2 := Date1;
      if Position > Length then
        Position := 0;
      exit(true);
    END;

    LOCAL PROCEDURE FindDates@27(DateFormulaText1@1000 : Text;DateFormulaText2@1006 : Text;VAR Date1@1002 : Date;VAR Date2@1001 : Date;DateFilterText@1003 : Text;PartOfText@1007 : Text;VAR Position@1004 : Integer;Length@1005 : Integer) : Boolean;
    VAR
      DateFormula1@1008 : DateFormula;
      DateFormula2@1009 : DateFormula;
    BEGIN
      Position := Position + STRLEN(PartOfText);
      ReadCharacter(' ',DateFilterText,Position,Length);
      EVALUATE(DateFormula1,DateFormulaText1);
      EVALUATE(DateFormula2,DateFormulaText2);
      Date1 := CALCDATE(DateFormula1);
      Date2 := CALCDATE(DateFormula2);
      if Position > Length then
        Position := 0;
      exit(true);
    END;

    LOCAL PROCEDURE FindText@11(VAR PartOfText@1000 : Text[250];Text@1001 : Text;Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    VAR
      Position2@1005 : Integer;
    BEGIN
      Position2 := Position;
      ReadCharacter(AlphabetText,Text,Position,Length);
      if Position = Position2 then
        exit(false);
      PartOfText := UPPERCASE(COPYSTR(Text,Position2,Position - Position2));
      exit(true);
    END;

    LOCAL PROCEDURE ReadSymbol@12(Token@1000 : Text[30];Text@1001 : Text;VAR Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    BEGIN
      if Token <> COPYSTR(Text,Position,STRLEN(Token)) then
        exit(false);
      Position := Position + STRLEN(Token);
      ReadCharacter(' ',Text,Position,Length);
      exit(true);
    END;

    LOCAL PROCEDURE ReadNumeral@13(VAR Numeral@1000 : Integer;Text@1001 : Text;VAR Position@1002 : Integer;Length@1003 : Integer) : Boolean;
    VAR
      Position2@1005 : Integer;
      i@1004 : Integer;
    BEGIN
      Position2 := Position;
      ReadCharacter('0123456789',Text,Position,Length);
      if Position2 = Position then
        exit(false);
      Numeral := 0;
      for i := Position2 to Position - 1 do
        if Numeral < 1000 then
          Numeral := Numeral * 10 + STRPOS('0123456789',COPYSTR(Text,i,1)) - 1;
      if (Numeral < 1) or (Numeral > 999) then
        ERROR(NumeralOutOfRangeError);
      exit(true);
    END;

    LOCAL PROCEDURE ReadCharacter@14(Character@1000 : Text[50];Text@1001 : Text;VAR Position@1002 : Integer;Length@1003 : Integer);
    BEGIN
      while (Position <= Length) and (STRPOS(Character,UPPERCASE(COPYSTR(Text,Position,1))) <> 0) do
        Position := Position + 1;
    END;

    LOCAL PROCEDURE ReadUntilCharacter@15(Character@1000 : Text[50];Text@1001 : Text[250];VAR Position@1002 : Integer;Length@1003 : Integer);
    BEGIN
      while (Position <= Length) and (STRPOS(Character,UPPERCASE(COPYSTR(Text,Position,1))) = 0) do
        Position := Position + 1;
    END;

    LOCAL PROCEDURE GetMyFilterText@23(VAR TextFilterText@1001 : Text;MyTableNo@1000 : Integer);
    VAR
      RecRef@1002 : RecordRef;
      FieldRef@1004 : FieldRef;
      NoOfValues@1003 : Integer;
    BEGIN
      if not (MyTableNo in [DATABASE::"My Customer",DATABASE::"My Vendor",DATABASE::"My Item"]) then
        exit;

      TextFilterText := '';
      NoOfValues := 0;
      RecRef.OPEN(MyTableNo);
      FieldRef := RecRef.FIELD(1);
      FieldRef.SETRANGE(USERID);
      if RecRef.FIND('-') then
        repeat
          FieldRef := RecRef.FIELD(2);
          AddToFilter(TextFilterText,FORMAT(FieldRef.VALUE));
          NoOfValues += 1;
        until (RecRef.NEXT = 0) or (NoOfValues > 2000);
      RecRef.CLOSE;

      if NoOfValues > 2000 then
        MESSAGE(OverflowMsg);
    END;

    LOCAL PROCEDURE AddToFilter@37(VAR FilterString@1001 : Text;MyNo@1000 : Code[20]);
    BEGIN
      if FilterString = '' then
        FilterString := MyNo
      else
        FilterString += '|' + MyNo;
    END;

    [External]
    PROCEDURE RemoveMessageTrailingDots@24(Message@1000 : Text) : Text;
    BEGIN
      exit(DELCHR(Message,'>','.'));
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeMakeTextFilter@25(TextFilterText@1000 : Text;VAR Position@1001 : Integer;VAR HandledByEvent@1002 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

