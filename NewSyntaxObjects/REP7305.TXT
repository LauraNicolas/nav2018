OBJECT Report 7305 Whse.-Source - Create Document
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Whse. Item Tracking Line"=rm;
    CaptionML=ENU=Whse.-Source - Create Document;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  CLEAR(CreatePick);
                  CLEAR(CreatePutAway);
                  EverythingHandled := true;
                END;

    OnPostReport=VAR
                   WhseActivHeader@1000 : Record "Warehouse Activity Header";
                   TempWhseItemTrkgLine@1001 : TEMPORARY Record "Whse. Item Tracking Line";
                   ItemTrackingMgt@1002 : Codeunit "Item Tracking Management";
                 BEGIN
                   if (CreateErrorText <> '') and (FirstActivityNo = '') and (LastActivityNo = '') then
                     ERROR(CreateErrorText);
                   if not (WhseDoc in
                           [WhseDoc::"Put-away Worksheet",WhseDoc::"Posted Receipt",WhseDoc::"Internal Put-away"])
                   then begin
                     CreatePick.CreateWhseDocument(FirstActivityNo,LastActivityNo,true);
                     CreatePick.ReturnTempItemTrkgLines(TempWhseItemTrkgLine);
                     ItemTrackingMgt.UpdateWhseItemTrkgLines(TempWhseItemTrkgLine);
                     COMMIT;
                   end else
                     CreatePutAway.GetWhseActivHeaderNo(FirstActivityNo,LastActivityNo);

                   WhseActivHeader.SETRANGE("No.",FirstActivityNo,LastActivityNo);

                   case WhseDoc of
                     WhseDoc::"Internal Pick",WhseDoc::Production,WhseDoc::Assembly:
                       WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Pick);
                     WhseDoc::"Whse. Mov.-Worksheet":
                       WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::Movement);
                     WhseDoc::"Posted Receipt",WhseDoc::"Put-away Worksheet",WhseDoc::"Internal Put-away":
                       WhseActivHeader.SETRANGE(Type,WhseActivHeader.Type::"Put-away");
                   end;

                   if WhseActivHeader.FIND('-') then begin
                     repeat
                       if SortActivity > 0 then
                         WhseActivHeader.SortWhseDoc;
                       COMMIT;
                     until WhseActivHeader.NEXT = 0;

                     if PrintDoc then begin
                       case WhseDoc of
                         WhseDoc::"Internal Pick",WhseDoc::Production,WhseDoc::Assembly:
                           REPORT.RUN(REPORT::"Picking List",false,false,WhseActivHeader);
                         WhseDoc::"Whse. Mov.-Worksheet":
                           REPORT.RUN(REPORT::"Movement List",false,false,WhseActivHeader);
                         WhseDoc::"Posted Receipt",WhseDoc::"Put-away Worksheet",WhseDoc::"Internal Put-away":
                           REPORT.RUN(REPORT::"Put-away List",false,false,WhseActivHeader);
                       end
                     end
                   end else
                     ERROR(Text003);
                 END;

  }
  DATASET
  {
    { 7072;    ;DataItem;Posted Whse. Receipt Line;
               DataItemTable="Posted Whse. Receipt Line";
               DataItemTableView=SORTING("No.","Line No.");
               OnPreDataItem=BEGIN
                               if WhseDoc <> WhseDoc::"Posted Receipt" then
                                 CurrReport.BREAK;

                               CreatePutAway.SetValues(AssignedID,SortActivity,DoNotFillQtytoHandle,BreakbulkFilter);
                               COPYFILTERS(PostedWhseReceiptLine);

                               WhseWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
                               WhseWkshLine.SETRANGE(
                                 "Whse. Document Type",WhseWkshLine."Whse. Document Type"::Receipt);
                               WhseWkshLine.SETRANGE("Whse. Document No.",PostedWhseReceiptLine."No.");
                             END;

               OnAfterGetRecord=VAR
                                  PostedWhseReceiptLine2@1000 : Record "Posted Whse. Receipt Line";
                                  TempWhseItemTrkgLine@1001 : TEMPORARY Record "Whse. Item Tracking Line";
                                  WMSMgt@1003 : Codeunit "WMS Management";
                                  ItemTrackingManagement@1002 : Codeunit "Item Tracking Management";
                                  WhseSNRequired@1004 : Boolean;
                                  WhseLNRequired@1005 : Boolean;
                                BEGIN
                                  WMSMgt.CheckOutboundBlockedBin("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code");

                                  WhseWkshLine.SETRANGE("Whse. Document Line No.","Line No.");
                                  if not WhseWkshLine.FINDFIRST then begin
                                    PostedWhseReceiptLine2 := "Posted Whse. Receipt Line";
                                    PostedWhseReceiptLine2.TESTFIELD("Qty. per Unit of Measure");
                                    PostedWhseReceiptLine2.CALCFIELDS("Put-away Qty. (Base)");
                                    PostedWhseReceiptLine2."Qty. (Base)" :=
                                      PostedWhseReceiptLine2."Qty. (Base)" -
                                      (PostedWhseReceiptLine2."Qty. Put Away (Base)" +
                                       PostedWhseReceiptLine2."Put-away Qty. (Base)");
                                    if PostedWhseReceiptLine2."Qty. (Base)" > 0 then begin
                                      PostedWhseReceiptLine2.Quantity :=
                                        ROUND(
                                          PostedWhseReceiptLine2."Qty. (Base)" /
                                          PostedWhseReceiptLine2."Qty. per Unit of Measure",0.00001);

                                      ItemTrackingManagement.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,false);
                                      if WhseSNRequired or WhseLNRequired then
                                        ItemTrackingManagement.InitItemTrkgForTempWkshLine(
                                          WhseWkshLine."Whse. Document Type"::Receipt,
                                          PostedWhseReceiptLine2."No.",
                                          PostedWhseReceiptLine2."Line No.",
                                          PostedWhseReceiptLine2."Source Type",
                                          PostedWhseReceiptLine2."Source Subtype",
                                          PostedWhseReceiptLine2."Source No.",
                                          PostedWhseReceiptLine2."Source Line No.",
                                          0);

                                      CreatePutAway.SetCrossDockValues(PostedWhseReceiptLine2."Qty. Cross-Docked" <> 0);
                                      CreatePutAwayFromDiffSource(PostedWhseReceiptLine2,DATABASE::"Posted Whse. Receipt Line");
                                      CreatePutAway.GetQtyHandledBase(TempWhseItemTrkgLine);
                                      UpdateWhseItemTrkgLines(PostedWhseReceiptLine2,DATABASE::"Posted Whse. Receipt Line",TempWhseItemTrkgLine);

                                      if CreateErrorText = '' then
                                        CreatePutAway.GetMessage(CreateErrorText);
                                      if EverythingHandled then
                                        EverythingHandled := CreatePutAway.EverythingIsHandled;
                                    end;
                                  end;
                                END;
                                 }

    { 7002;    ;DataItem;Whse. Mov.-Worksheet Line;
               DataItemTable="Whse. Worksheet Line";
               DataItemTableView=SORTING("Worksheet Template Name",Name,"Location Code","Line No.");
               OnPreDataItem=BEGIN
                               if WhseDoc <> WhseDoc::"Whse. Mov.-Worksheet" then
                                 CurrReport.BREAK;

                               CreatePick.SetValues(
                                 AssignedID,2,SortActivity,2,0,0,false,DoNotFillQtytoHandle,BreakbulkFilter,false);

                               CreatePick.SetCalledFromMoveWksh(true);

                               COPYFILTERS(WhseWkshLine);
                               SETFILTER("Qty. to Handle (Base)",'>0');
                               LOCKTABLE;
                             END;

               OnAfterGetRecord=VAR
                                  ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
                                  PickQty@1001 : Decimal;
                                  PickQtyBase@1000000000 : Decimal;
                                BEGIN
                                  if FEFOLocation("Location Code") and ItemTracking("Item No.") then
                                    CreatePick.SetCalledFromWksh(true)
                                  else
                                    CreatePick.SetCalledFromWksh(false);

                                  TESTFIELD("Qty. per Unit of Measure");
                                  if WhseWkshLine.CheckAvailQtytoMove < 0 then
                                    ERROR(
                                      Text004,
                                      TABLECAPTION,FIELDCAPTION("Worksheet Template Name"),"Worksheet Template Name",
                                      FIELDCAPTION(Name),Name,FIELDCAPTION("Location Code"),"Location Code",
                                      FIELDCAPTION("Line No."),"Line No.");

                                  CheckBin("Location Code","From Bin Code",false);
                                  CheckBin("Location Code","To Bin Code",true);
                                  CreatePick.SetCalledFromWksh(true);
                                  CreatePick.SetWhseWkshLine("Whse. Mov.-Worksheet Line",1);
                                  CreatePick.SetTempWhseItemTrkgLine(
                                    Name,DATABASE::"Whse. Worksheet Line","Worksheet Template Name",0,
                                    "Line No.","Location Code");
                                  PickQty := "Qty. to Handle";
                                  PickQtyBase := "Qty. to Handle (Base)";
                                  CreatePick.CreateTempLine(
                                    "Location Code","Item No.","Variant Code","Unit of Measure Code",
                                    "From Bin Code","To Bin Code","Qty. per Unit of Measure",PickQty,PickQtyBase);

                                  WhseWkshLine := "Whse. Mov.-Worksheet Line";
                                  if WhseWkshLine."Qty. to Handle" = WhseWkshLine."Qty. Outstanding" then begin
                                    WhseWkshLine.DELETE;
                                    ItemTrackingMgt.DeleteWhseItemTrkgLines(
                                      DATABASE::"Whse. Worksheet Line",0,Name,"Worksheet Template Name",0,"Line No.","Location Code",true);
                                  end else begin
                                    PickQtyBase := "Qty. Handled (Base)" + "Qty. to Handle (Base)" - PickQtyBase;
                                    WhseWkshLine.VALIDATE("Qty. Handled","Qty. Handled" + "Qty. to Handle" - PickQty);
                                    WhseWkshLine."Qty. Handled (Base)" := PickQtyBase;
                                    WhseWkshLine."Qty. Outstanding (Base)" := "Qty. (Base)" - WhseWkshLine."Qty. Handled (Base)";
                                    WhseWkshLine.MODIFY;
                                  end;
                                END;
                                 }

    { 3605;    ;DataItem;Whse. Put-away Worksheet Line;
               DataItemTable="Whse. Worksheet Line";
               DataItemTableView=SORTING("Worksheet Template Name",Name,"Location Code","Line No.") WHERE("Whse. Document Type"=FILTER(Receipt|"Internal Put-away"));
               OnPreDataItem=BEGIN
                               if WhseDoc <> WhseDoc::"Put-away Worksheet" then
                                 CurrReport.BREAK;

                               CreatePutAway.SetValues(AssignedID,SortActivity,DoNotFillQtytoHandle,BreakbulkFilter);

                               COPYFILTERS(WhseWkshLine);
                               SETFILTER("Qty. to Handle (Base)",'>0');
                             END;

               OnAfterGetRecord=VAR
                                  PostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line";
                                  TempWhseItemTrkgLine@1002 : TEMPORARY Record "Whse. Item Tracking Line";
                                  QtyHandledBase@1001 : Decimal;
                                  SourceType@1003 : Integer;
                                BEGIN
                                  LOCKTABLE;

                                  CheckBin("Location Code","From Bin Code",false);
                                  if not PostedWhseRcptLine.GET("Whse. Document No.","Whse. Document Line No.") then begin
                                    PostedWhseRcptLine.INIT;
                                    PostedWhseRcptLine."No." := "Whse. Document No.";
                                    PostedWhseRcptLine."Line No." := "Whse. Document Line No.";
                                    PostedWhseRcptLine."Item No." := "Item No.";
                                    PostedWhseRcptLine.Description := Description;
                                    PostedWhseRcptLine."Description 2" := "Description 2";
                                    PostedWhseRcptLine."Location Code" := "Location Code";
                                    PostedWhseRcptLine."Zone Code" := "From Zone Code";
                                    PostedWhseRcptLine."Bin Code" := "From Bin Code";
                                    PostedWhseRcptLine."Shelf No." := "Shelf No.";
                                    PostedWhseRcptLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
                                    PostedWhseRcptLine."Due Date" := "Due Date";
                                    PostedWhseRcptLine."Unit of Measure Code" := "Unit of Measure Code";
                                    SourceType := DATABASE::"Whse. Internal Put-away Line";
                                  end else
                                    SourceType := DATABASE::"Posted Whse. Receipt Line";

                                  PostedWhseRcptLine.TESTFIELD("Qty. per Unit of Measure");
                                  PostedWhseRcptLine.Quantity := "Qty. to Handle";
                                  PostedWhseRcptLine."Qty. (Base)" := "Qty. to Handle (Base)";

                                  CreatePutAway.SetCrossDockValues(PostedWhseRcptLine."Qty. Cross-Docked" <> 0);
                                  CreatePutAwayFromDiffSource(PostedWhseRcptLine,SourceType);

                                  if "Qty. to Handle" <> "Qty. Outstanding" then
                                    EverythingHandled := false;

                                  if EverythingHandled then
                                    EverythingHandled := CreatePutAway.EverythingIsHandled;

                                  QtyHandledBase := CreatePutAway.GetQtyHandledBase(TempWhseItemTrkgLine);

                                  if QtyHandledBase > 0 then begin
                                    // update/delete line
                                    WhseWkshLine := "Whse. Put-away Worksheet Line";
                                    WhseWkshLine.VALIDATE("Qty. Handled (Base)","Qty. Handled (Base)" + QtyHandledBase);
                                    if (WhseWkshLine."Qty. Outstanding" = 0) and
                                       (WhseWkshLine."Qty. Outstanding (Base)" = 0)
                                    then
                                      WhseWkshLine.DELETE
                                    else
                                      WhseWkshLine.MODIFY;
                                    UpdateWhseItemTrkgLines(PostedWhseRcptLine,SourceType,TempWhseItemTrkgLine);
                                  end else
                                    if CreateErrorText = '' then
                                      CreatePutAway.GetMessage(CreateErrorText);
                                END;
                                 }

    { 3581;    ;DataItem;Whse. Internal Pick Line;
               DataItemTable="Whse. Internal Pick Line";
               DataItemTableView=SORTING("No.","Line No.");
               OnPreDataItem=BEGIN
                               if WhseDoc <> WhseDoc::"Internal Pick" then
                                 CurrReport.BREAK;

                               CreatePick.SetValues(
                                 AssignedID,3,SortActivity,1,0,0,false,DoNotFillQtytoHandle,BreakbulkFilter,false);

                               COPYFILTERS(WhseInternalPickLine);
                               SETFILTER("Qty. (Base)",'>0');

                               WhseWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
                               WhseWkshLine.SETRANGE(
                                 "Whse. Document Type",WhseWkshLine."Whse. Document Type"::"Internal Pick");
                               WhseWkshLine.SETRANGE("Whse. Document No.",WhseInternalPickLine."No.");
                             END;

               OnAfterGetRecord=VAR
                                  WMSMgt@1001 : Codeunit "WMS Management";
                                  QtyToPick@1003 : Decimal;
                                  QtyToPickBase@1002 : Decimal;
                                BEGIN
                                  WMSMgt.CheckInboundBlockedBin("Location Code","To Bin Code","Item No.","Variant Code","Unit of Measure Code");

                                  CheckBin(false);
                                  WhseWkshLine.SETRANGE("Whse. Document Line No.","Line No.");
                                  if not WhseWkshLine.FINDFIRST then begin
                                    TESTFIELD("Qty. per Unit of Measure");
                                    CALCFIELDS("Pick Qty. (Base)");
                                    QtyToPickBase := "Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)");
                                    QtyToPick :=
                                      ROUND(
                                        ("Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)")) /
                                        "Qty. per Unit of Measure",0.00001);
                                    if QtyToPick > 0 then begin
                                      CreatePick.SetWhseInternalPickLine("Whse. Internal Pick Line",1);
                                      CreatePick.SetTempWhseItemTrkgLine(
                                        "No.",DATABASE::"Whse. Internal Pick Line",'',0,"Line No.","Location Code");
                                      CreatePick.CreateTempLine(
                                        "Location Code","Item No.","Variant Code","Unit of Measure Code",
                                        '',"To Bin Code","Qty. per Unit of Measure",QtyToPick,QtyToPickBase);
                                    end;
                                  end else
                                    WhseWkshLineFound := true;
                                END;
                                 }

    { 1568;    ;DataItem;Whse. Internal Put-away Line;
               DataItemTable="Whse. Internal Put-away Line";
               DataItemTableView=SORTING("No.","Line No.");
               OnPreDataItem=BEGIN
                               if WhseDoc <> WhseDoc::"Internal Put-away" then
                                 CurrReport.BREAK;

                               CreatePutAway.SetValues(AssignedID,SortActivity,DoNotFillQtytoHandle,BreakbulkFilter);

                               SETRANGE("No.",WhseInternalPutAwayHeader."No.");
                               SETFILTER("Qty. (Base)",'>0');

                               WhseWkshLine.SETCURRENTKEY("Whse. Document Type","Whse. Document No.","Whse. Document Line No.");
                               WhseWkshLine.SETRANGE(
                                 "Whse. Document Type",WhseWkshLine."Whse. Document Type"::"Internal Put-away");
                               WhseWkshLine.SETRANGE("Whse. Document No.",WhseInternalPutAwayHeader."No.");
                             END;

               OnAfterGetRecord=VAR
                                  TempWhseItemTrkgLine@1000 : TEMPORARY Record "Whse. Item Tracking Line";
                                  WMSMgt@1002 : Codeunit "WMS Management";
                                  QtyToPutAway@1003 : Decimal;
                                BEGIN
                                  WMSMgt.CheckOutboundBlockedBin("Location Code","From Bin Code","Item No.","Variant Code","Unit of Measure Code");
                                  CheckCurrentLineQty;
                                  WhseWkshLine.SETRANGE("Whse. Document Line No.","Line No.");
                                  if not WhseWkshLine.FINDFIRST then begin
                                    TESTFIELD("Qty. per Unit of Measure");
                                    CALCFIELDS("Put-away Qty. (Base)");
                                    QtyToPutAway :=
                                      ROUND(
                                        ("Qty. (Base)" - ("Qty. Put Away (Base)" + "Put-away Qty. (Base)")) /
                                        "Qty. per Unit of Measure",0.00001);

                                    if QtyToPutAway > 0 then
                                      with PostedWhseReceiptLine do begin
                                        INIT;
                                        "No." := "Whse. Internal Put-away Line"."No.";
                                        "Line No." := "Whse. Internal Put-away Line"."Line No.";
                                        "Location Code" := "Whse. Internal Put-away Line"."Location Code";
                                        "Bin Code" := "Whse. Internal Put-away Line"."From Bin Code";
                                        "Zone Code" := "Whse. Internal Put-away Line"."From Zone Code";
                                        "Item No." := "Whse. Internal Put-away Line"."Item No.";
                                        "Shelf No." := "Whse. Internal Put-away Line"."Shelf No.";
                                        Quantity := QtyToPutAway;
                                        "Qty. (Base)" :=
                                          "Whse. Internal Put-away Line"."Qty. (Base)" -
                                          ("Whse. Internal Put-away Line"."Qty. Put Away (Base)" +
                                           "Whse. Internal Put-away Line"."Put-away Qty. (Base)");
                                        "Qty. Put Away" := "Whse. Internal Put-away Line"."Qty. Put Away";
                                        "Qty. Put Away (Base)" := "Whse. Internal Put-away Line"."Qty. Put Away (Base)";
                                        "Put-away Qty." := "Whse. Internal Put-away Line"."Put-away Qty.";
                                        "Put-away Qty. (Base)" := "Whse. Internal Put-away Line"."Put-away Qty. (Base)";
                                        "Unit of Measure Code" := "Whse. Internal Put-away Line"."Unit of Measure Code";
                                        "Qty. per Unit of Measure" := "Whse. Internal Put-away Line"."Qty. per Unit of Measure";
                                        "Variant Code" := "Whse. Internal Put-away Line"."Variant Code";
                                        Description := "Whse. Internal Put-away Line".Description;
                                        "Description 2" := "Whse. Internal Put-away Line"."Description 2";
                                        "Due Date" := "Whse. Internal Put-away Line"."Due Date";
                                        CreatePutAwayFromDiffSource(PostedWhseReceiptLine,DATABASE::"Whse. Internal Put-away Line");
                                        CreatePutAway.GetQtyHandledBase(TempWhseItemTrkgLine);
                                        UpdateWhseItemTrkgLines(PostedWhseReceiptLine,DATABASE::"Whse. Internal Put-away Line",TempWhseItemTrkgLine);
                                      end;
                                  end;
                                END;
                                 }

    { 7771;    ;DataItem;Prod. Order Component;
               DataItemTable="Prod. Order Component";
               DataItemTableView=SORTING(Status,"Prod. Order No.","Prod. Order Line No.","Line No.");
               OnPreDataItem=BEGIN
                               if WhseDoc <> WhseDoc::Production then
                                 CurrReport.BREAK;

                               WhseSetup.GET;
                               CreatePick.SetValues(
                                 AssignedID,4,SortActivity,1,0,0,false,DoNotFillQtytoHandle,BreakbulkFilter,false);

                               SETRANGE("Prod. Order No.",ProdOrderHeader."No.");
                               SETRANGE(Status,Status::Released);
                               SETFILTER(
                                 "Flushing Method",'%1|%2|%3',
                                 "Flushing Method"::Manual,
                                 "Flushing Method"::"Pick + Forward",
                                 "Flushing Method"::"Pick + Backward");
                               SETRANGE("Planning Level Code",0);
                               SETFILTER("Expected Qty. (Base)",'>0');

                               WhseWkshLine.SETCURRENTKEY(
                                 "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
                               WhseWkshLine.SETRANGE("Source Type",DATABASE::"Prod. Order Component");
                               WhseWkshLine.SETRANGE("Source Subtype",ProdOrderHeader.Status);
                               WhseWkshLine.SETRANGE("Source No.",ProdOrderHeader."No.");
                             END;

               OnAfterGetRecord=VAR
                                  WMSMgt@1000 : Codeunit "WMS Management";
                                  QtyToPick@1003 : Decimal;
                                  QtyToPickBase@1002 : Decimal;
                                BEGIN
                                  if ("Flushing Method" = "Flushing Method"::"Pick + Forward") and ("Routing Link Code" = '') then
                                    CurrReport.SKIP;

                                  WMSMgt.CheckInboundBlockedBin("Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code");

                                  WhseWkshLine.SETRANGE("Source Line No.","Prod. Order Line No.");
                                  WhseWkshLine.SETRANGE("Source Subline No.","Line No.");
                                  if not WhseWkshLine.FINDFIRST then begin
                                    TESTFIELD("Qty. per Unit of Measure");
                                    CALCFIELDS("Pick Qty. (Base)");
                                    QtyToPickBase := "Expected Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)");
                                    QtyToPick :=
                                      ROUND(
                                        ("Expected Qty. (Base)" - ("Qty. Picked (Base)" + "Pick Qty. (Base)")) /
                                        "Qty. per Unit of Measure",0.00001);
                                    if QtyToPick > 0 then begin
                                      CreatePick.SetProdOrderCompLine("Prod. Order Component",1);
                                      CreatePick.SetTempWhseItemTrkgLine(
                                        "Prod. Order No.",DATABASE::"Prod. Order Component",'',
                                        "Prod. Order Line No.","Line No.","Location Code");
                                      CreatePick.CreateTempLine(
                                        "Location Code","Item No.","Variant Code","Unit of Measure Code",
                                        '',"Bin Code",
                                        "Qty. per Unit of Measure",QtyToPick,QtyToPickBase);
                                    end;
                                  end else
                                    WhseWkshLineFound := true;
                                END;
                                 }

    { 6911;    ;DataItem;Assembly Line       ;
               DataItemTable="Assembly Line";
               DataItemTableView=SORTING("Document Type","Document No.",Type,"Location Code") WHERE(Type=CONST(Item));
               OnPreDataItem=BEGIN
                               if WhseDoc <> WhseDoc::Assembly then
                                 CurrReport.BREAK;

                               WhseSetup.GET;
                               CreatePick.SetValues(
                                 AssignedID,5,SortActivity,1,0,0,false,DoNotFillQtytoHandle,BreakbulkFilter,false);

                               SETRANGE("Document No.",AssemblyHeader."No.");
                               SETRANGE("Document Type",AssemblyHeader."Document Type");
                               SETRANGE(Type,Type::Item);
                               SETFILTER("Remaining Quantity (Base)",'>0');

                               WhseWkshLine.SETCURRENTKEY(
                                 "Source Type","Source Subtype","Source No.","Source Line No.","Source Subline No.");
                               WhseWkshLine.SETRANGE("Source Type",DATABASE::"Assembly Line");
                               WhseWkshLine.SETRANGE("Source Subtype",AssemblyHeader."Document Type");
                               WhseWkshLine.SETRANGE("Source No.",AssemblyHeader."No.");
                             END;

               OnAfterGetRecord=VAR
                                  WMSMgt@1000 : Codeunit "WMS Management";
                                BEGIN
                                  WMSMgt.CheckInboundBlockedBin("Location Code","Bin Code","No.","Variant Code","Unit of Measure Code");

                                  WhseWkshLine.SETRANGE("Source Line No.","Line No.");
                                  if not WhseWkshLine.FINDFIRST then
                                    CreatePick.CreateAssemblyPickLine("Assembly Line")
                                  else
                                    WhseWkshLineFound := true;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnOpenPage=VAR
                   Location@1000 : Record Location;
                 BEGIN
                   GetLocation(Location,GetHeaderLocationCode);
                   if Location."Use ADCS" then
                     DoNotFillQtytoHandle := true;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Assigned User ID;
                  CaptionML=ENU=Assigned User ID;
                  ToolTipML=ENU=Specifies the ID of the assigned user to perform the pick instruction.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=AssignedID;
                  TableRelation="Warehouse Employee";
                  OnValidate=VAR
                               WhseEmployee@1000 : Record "Warehouse Employee";
                             BEGIN
                               if AssignedID <> '' then
                                 WhseEmployee.GET(AssignedID,GetHeaderLocationCode);
                             END;

                  OnLookup=VAR
                             WhseEmployee@1001 : Record "Warehouse Employee";
                             LookupWhseEmployee@1000 : Page "Warehouse Employee List";
                           BEGIN
                             WhseEmployee.SETCURRENTKEY("Location Code");
                             WhseEmployee.SETRANGE("Location Code",GetHeaderLocationCode);
                             LookupWhseEmployee.LOOKUPMODE(true);
                             LookupWhseEmployee.SETTABLEVIEW(WhseEmployee);
                             if LookupWhseEmployee.RUNMODAL = ACTION::LookupOK then begin
                               LookupWhseEmployee.GETRECORD(WhseEmployee);
                               AssignedID := WhseEmployee."User ID";
                             end;
                           END;
                            }

      { 2   ;2   ;Field     ;
                  Name=SortingMethodForActivityLines;
                  CaptionML=ENU=Sorting Method for Activity Lines;
                  ToolTipML=ENU=Specifies the method by which the lines in the instruction will be sorted. The options are by item, document, shelf or bin (when the location uses bins, this is the bin code), due date, bin ranking, or action type.;
                  OptionCaptionML=ENU=" ,Item,Document,Shelf or Bin,Due Date,,Bin Ranking,Action Type";
                  ApplicationArea=#Warehouse;
                  SourceExpr=SortActivity;
                  MultiLine=true }

      { 9   ;2   ;Field     ;
                  Name=Set Breakbulk Filter;
                  CaptionML=ENU=Set Breakbulk Filter;
                  ToolTipML=ENU=Specifies if you want the program to hide intermediate break-bulk lines when an entire larger unit of measure is converted to a smaller unit of measure and picked completely.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=BreakbulkFilter }

      { 11  ;2   ;Field     ;
                  Name=Do Not Fill Qty. to Handle;
                  CaptionML=ENU=Do Not Fill Qty. to Handle;
                  ToolTipML=ENU=Specifies if you want to manually fill in the Quantity to Handle field on each line.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=DoNotFillQtytoHandle }

      { 3   ;2   ;Field     ;
                  Name=Print Document;
                  CaptionML=ENU=Print Document;
                  ToolTipML=ENU=Specifies if you want the instructions to be printed. Otherwise, you can print it later from the warehouse instruction window.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=PrintDoc }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      WhseSetup@1031 : Record "Warehouse Setup";
      WhseWkshLine@1019 : Record "Whse. Worksheet Line";
      WhseInternalPickLine@1013 : Record "Whse. Internal Pick Line";
      WhseInternalPutAwayHeader@1024 : Record "Whse. Internal Put-away Header";
      ProdOrderHeader@1026 : Record "Production Order";
      AssemblyHeader@1012 : Record "Assembly Header";
      PostedWhseReceiptLine@1028 : Record "Posted Whse. Receipt Line";
      CreatePick@1003 : Codeunit "Create Pick";
      CreatePutAway@1016 : Codeunit "Create Put-away";
      FirstActivityNo@1002 : Code[20];
      LastActivityNo@1001 : Code[20];
      AssignedID@1008 : Code[50];
      WhseDoc@1006 : '"Whse. Mov.-Worksheet","Posted Receipt","Internal Pick","Internal Put-away",Production,"Put-away Worksheet",Assembly,"Service Order"';
      SortActivity@1005 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To","Bin Ranking","Action Type"';
      SourceTableCaption@1025 : Text[30];
      CreateErrorText@1009 : Text[80];
      Text000@1011 : TextConst 'ENU=%1 activity no. %2 has been created.';
      Text001@1010 : TextConst 'ENU=%1 activities no. %2 to %3 have been created.';
      PrintDoc@1004 : Boolean;
      EverythingHandled@1017 : Boolean;
      WhseWkshLineFound@1020 : Boolean;
      Text002@1021 : TextConst 'ENU=\For %1 with existing Warehouse Worksheet Lines, no %2 lines have been created.';
      HideValidationDialog@1022 : Boolean;
      Text003@1023 : TextConst 'ENU=There is nothing to handle.';
      DoNotFillQtytoHandle@1014 : Boolean;
      Text004@1018 : TextConst 'ENU="You can create a Movement only for the available quantity in %1 %2 = %3,%4 = %5,%6 = %7,%8 = %9."';
      BreakbulkFilter@1029 : Boolean;

    [External]
    PROCEDURE SetPostedWhseReceiptLine@8(VAR PostedWhseReceiptLine2@1000 : Record "Posted Whse. Receipt Line";AssignedID2@1001 : Code[50]);
    BEGIN
      PostedWhseReceiptLine.COPY(PostedWhseReceiptLine2);
      WhseDoc := WhseDoc::"Posted Receipt";
      SourceTableCaption := PostedWhseReceiptLine.TABLECAPTION;
      AssignedID := AssignedID2;
    END;

    [External]
    PROCEDURE SetWhseWkshLine@4(VAR WhseWkshLine2@1000 : Record "Whse. Worksheet Line");
    BEGIN
      WhseWkshLine.COPY(WhseWkshLine2);
      case WhseWkshLine."Whse. Document Type" of
        WhseWkshLine."Whse. Document Type"::Receipt,
        WhseWkshLine."Whse. Document Type"::"Internal Put-away":
          WhseDoc := WhseDoc::"Put-away Worksheet";
        WhseWkshLine."Whse. Document Type"::" ":
          WhseDoc := WhseDoc::"Whse. Mov.-Worksheet";
      end;
    END;

    [External]
    PROCEDURE SetWhseInternalPickLine@5(VAR WhseInternalPickLine2@1001 : Record "Whse. Internal Pick Line";AssignedID2@1000 : Code[50]);
    BEGIN
      WhseInternalPickLine.COPY(WhseInternalPickLine2);
      WhseDoc := WhseDoc::"Internal Pick";
      SourceTableCaption := WhseInternalPickLine.TABLECAPTION;
      AssignedID := AssignedID2;
    END;

    [External]
    PROCEDURE SetWhseInternalPutAway@2(VAR WhseInternalPutAwayHeader2@1000 : Record "Whse. Internal Put-away Header");
    BEGIN
      WhseInternalPutAwayHeader.COPY(WhseInternalPutAwayHeader2);
      WhseDoc := WhseDoc::"Internal Put-away";
      SourceTableCaption := WhseInternalPutAwayHeader.TABLECAPTION;
      AssignedID := WhseInternalPutAwayHeader2."Assigned User ID";
    END;

    [External]
    PROCEDURE SetProdOrder@6(VAR ProdOrderHeader2@1001 : Record "Production Order");
    BEGIN
      ProdOrderHeader.COPY(ProdOrderHeader2);
      WhseDoc := WhseDoc::Production;
      SourceTableCaption := ProdOrderHeader.TABLECAPTION;
    END;

    [External]
    PROCEDURE SetAssemblyOrder@15(VAR AssemblyHeader2@1001 : Record "Assembly Header");
    BEGIN
      AssemblyHeader.COPY(AssemblyHeader2);
      WhseDoc := WhseDoc::Assembly;
      SourceTableCaption := AssemblyHeader.TABLECAPTION;
    END;

    [External]
    PROCEDURE GetResultMessage@3(WhseDocType@1000 : Option) : Boolean;
    VAR
      WhseActivHeader@1001 : Record "Warehouse Activity Header";
    BEGIN
      if FirstActivityNo = '' then
        exit(false);

      if not HideValidationDialog then begin
        WhseActivHeader.Type := WhseDocType;
        if WhseWkshLineFound then begin
          if FirstActivityNo = LastActivityNo then
            MESSAGE(
              STRSUBSTNO(
                Text000,FORMAT(WhseActivHeader.Type),FirstActivityNo) +
              STRSUBSTNO(
                Text002,SourceTableCaption,FORMAT(WhseActivHeader.Type)))
          else
            MESSAGE(
              STRSUBSTNO(
                Text001,
                FORMAT(WhseActivHeader.Type),FirstActivityNo,LastActivityNo) +
              STRSUBSTNO(
                Text002,SourceTableCaption,FORMAT(WhseActivHeader.Type)));
        end else begin
          if FirstActivityNo = LastActivityNo then
            MESSAGE(Text000,FORMAT(WhseActivHeader.Type),FirstActivityNo)
          else
            MESSAGE(Text001,FORMAT(WhseActivHeader.Type),FirstActivityNo,LastActivityNo);
        end;
      end;
      exit(EverythingHandled);
    END;

    [External]
    PROCEDURE SetHideValidationDialog@14(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetLocation@7(VAR Location@1001 : Record Location;LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then
        if LocationCode = '' then
          CLEAR(Location)
        else
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE Initialize@9(AssignedID2@1004 : Code[50];SortActivity2@1002 : '" ",Item,Document,"Shelf/Bin No.","Due Date","Ship-To","Bin Ranking","Action Type"';PrintDoc2@1001 : Boolean;DoNotFillQtytoHandle2@1000 : Boolean;BreakbulkFilter2@1003 : Boolean);
    BEGIN
      AssignedID := AssignedID2;
      SortActivity := SortActivity2;
      PrintDoc := PrintDoc2;
      DoNotFillQtytoHandle := DoNotFillQtytoHandle2;
      BreakbulkFilter := BreakbulkFilter2;
    END;

    [External]
    PROCEDURE SetQuantity@10(VAR PostedWhseRcptLine@1001 : Record "Posted Whse. Receipt Line";SourceType@1002 : Integer;VAR QtyToHandleBase@1003 : Decimal);
    VAR
      WhseItemTrackingLine@1000 : Record "Whse. Item Tracking Line";
    BEGIN
      with WhseItemTrackingLine do begin
        RESET;
        SETCURRENTKEY("Serial No.","Lot No.");
        SETRANGE("Serial No.",PostedWhseRcptLine."Serial No.");
        SETRANGE("Lot No.",PostedWhseRcptLine."Lot No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source ID",PostedWhseRcptLine."No.");
        SETRANGE("Source Ref. No.",PostedWhseRcptLine."Line No.");
        if FINDFIRST then begin
          if QtyToHandleBase < "Qty. to Handle (Base)" then
            PostedWhseRcptLine."Qty. (Base)" := QtyToHandleBase
          else
            PostedWhseRcptLine."Qty. (Base)" := "Qty. to Handle (Base)";
          QtyToHandleBase -= PostedWhseRcptLine."Qty. (Base)";
          PostedWhseRcptLine.Quantity :=
            ROUND(PostedWhseRcptLine."Qty. (Base)" / PostedWhseRcptLine."Qty. per Unit of Measure",0.00001);
        end;
      end
    END;

    [External]
    PROCEDURE UpdateWhseItemTrkgLines@11(PostedWhseRcptLine@1000 : Record "Posted Whse. Receipt Line";SourceType@1002 : Integer;VAR TempWhseItemTrkgLine@1003 : Record "Whse. Item Tracking Line");
    VAR
      WhseItemTrackingLine@1001 : Record "Whse. Item Tracking Line";
    BEGIN
      with WhseItemTrackingLine do begin
        RESET;
        SETCURRENTKEY(
          "Source ID","Source Type","Source Subtype","Source Batch Name",
          "Source Prod. Order Line","Source Ref. No.");
        SETRANGE("Source ID",PostedWhseRcptLine."No.");
        SETRANGE("Source Type",SourceType);
        SETRANGE("Source Subtype",0);
        SETRANGE("Source Batch Name",'');
        SETRANGE("Source Prod. Order Line",0);
        SETRANGE("Source Ref. No.",PostedWhseRcptLine."Line No.");
        if FIND('-') then
          repeat
            TempWhseItemTrkgLine.SETRANGE("Source Type","Source Type");
            TempWhseItemTrkgLine.SETRANGE("Source ID","Source ID");
            TempWhseItemTrkgLine.SETRANGE("Source Ref. No.","Source Ref. No.");
            TempWhseItemTrkgLine.SETRANGE("Serial No.","Serial No.");
            TempWhseItemTrkgLine.SETRANGE("Lot No.","Lot No.");
            if TempWhseItemTrkgLine.FIND('-') then
              "Quantity Handled (Base)" += TempWhseItemTrkgLine."Quantity (Base)";
            "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
            MODIFY;
          until NEXT = 0;
      end
    END;

    [External]
    PROCEDURE CreatePutAwayFromDiffSource@12(PostedWhseRcptLine@1001 : Record "Posted Whse. Receipt Line";SourceType@1000 : Integer);
    VAR
      TempPostedWhseRcptLine@1006 : TEMPORARY Record "Posted Whse. Receipt Line";
      TempPostedWhseRcptLine2@1005 : TEMPORARY Record "Posted Whse. Receipt Line";
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
      RemQtyToHandleBase@1002 : Decimal;
    BEGIN
      case SourceType of
        DATABASE::"Whse. Internal Put-away Line":
          ItemTrackingMgt.SplitInternalPutAwayLine(PostedWhseRcptLine,TempPostedWhseRcptLine);
        DATABASE::"Posted Whse. Receipt Line":
          ItemTrackingMgt.SplitPostedWhseRcptLine(PostedWhseRcptLine,TempPostedWhseRcptLine);
      end;
      RemQtyToHandleBase := PostedWhseRcptLine."Qty. (Base)";

      TempPostedWhseRcptLine.RESET;
      if TempPostedWhseRcptLine.FIND('-') then
        repeat
          TempPostedWhseRcptLine2 := TempPostedWhseRcptLine;
          TempPostedWhseRcptLine2."Line No." := PostedWhseRcptLine."Line No.";
          SetQuantity(TempPostedWhseRcptLine2,SourceType,RemQtyToHandleBase);
          if TempPostedWhseRcptLine2."Qty. (Base)" > 0 then begin
            CreatePutAway.RUN(TempPostedWhseRcptLine2);
            CreatePutAway.UpdateTempWhseItemTrkgLines(TempPostedWhseRcptLine2,SourceType);
          end;
        until TempPostedWhseRcptLine.NEXT = 0;
    END;

    [External]
    PROCEDURE FEFOLocation@1200(LocCode@1201 : Code[10]) : Boolean;
    VAR
      Location2@1202 : Record Location;
    BEGIN
      if LocCode <> '' then begin
        Location2.GET(LocCode);
        exit(Location2."Pick According to FEFO");
      end;
      exit(false);
    END;

    [External]
    PROCEDURE ItemTracking@1203(ItemNo@1204 : Code[20]) : Boolean;
    VAR
      Item@1205 : Record Item;
      ItemTrackingCode@1206 : Record "Item Tracking Code";
    BEGIN
      if ItemNo <> '' then begin
        Item.GET(ItemNo);
        if Item."Item Tracking Code" <> '' then begin
          ItemTrackingCode.GET(Item."Item Tracking Code");
          exit((ItemTrackingCode."SN Specific Tracking" or ItemTrackingCode."Lot Specific Tracking"));
        end;
      end;
      exit(false);
    END;

    LOCAL PROCEDURE GetHeaderLocationCode@13() : Code[10];
    BEGIN
      case WhseDoc of
        WhseDoc::"Posted Receipt":
          exit(PostedWhseReceiptLine."Location Code");
        WhseDoc::"Put-away Worksheet",
        WhseDoc::"Whse. Mov.-Worksheet":
          exit(WhseWkshLine."Location Code");
        WhseDoc::"Internal Pick":
          exit(WhseInternalPickLine."Location Code");
        WhseDoc::"Internal Put-away":
          exit(WhseInternalPutAwayHeader."Location Code");
        WhseDoc::Production:
          exit(ProdOrderHeader."Location Code");
        WhseDoc::Assembly:
          exit(AssemblyHeader."Location Code");
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

