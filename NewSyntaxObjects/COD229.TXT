OBJECT Codeunit 229 Document-Print
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=%1 is missing for %2 %3.';
      Text002@1002 : TextConst 'ENU=%1 for %2 is missing in %3.';
      SalesSetup@1003 : Record "Sales & Receivables Setup";
      PurchSetup@1004 : Record "Purchases & Payables Setup";

    [Internal]
    PROCEDURE EmailSalesHeader@12(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      DoPrintSalesHeader(SalesHeader,true);
    END;

    [Internal]
    PROCEDURE PrintSalesHeader@1(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      DoPrintSalesHeader(SalesHeader,false);
    END;

    LOCAL PROCEDURE DoPrintSalesHeader@14(SalesHeader@1000 : Record "Sales Header";SendAsEmail@1002 : Boolean);
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      CalcSalesDisc(SalesHeader);
      if SendAsEmail then
        ReportSelections.SendEmailToCust(
          GetSalesDocTypeUsage(SalesHeader),SalesHeader,SalesHeader."No.",SalesHeader.GetDocTypeTxt,true,SalesHeader.GetBillToNo)
      else
        ReportSelections.Print(GetSalesDocTypeUsage(SalesHeader),SalesHeader,SalesHeader."Bill-to Customer No.");
    END;

    [External]
    PROCEDURE PrintPurchHeader@5(PurchHeader@1000 : Record "Purchase Header");
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      PurchHeader.SETRANGE("No.",PurchHeader."No.");
      CalcPurchDisc(PurchHeader);

      ReportSelections.Print(GetPurchDocTypeUsage(PurchHeader),PurchHeader,'');
    END;

    [External]
    PROCEDURE PrintBankAccStmt@10(BankAccStmt@1000 : Record "Bank Account Statement");
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      BankAccStmt.SETRECFILTER;

      ReportSelections.Print(ReportSelections.Usage::"B.Stmt",BankAccStmt,'');
    END;

    [External]
    PROCEDURE PrintCheck@11(VAR NewGenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
      ReportSelections@1002 : Record "Report Selections";
    BEGIN
      GenJnlLine.COPY(NewGenJnlLine);
      GenJnlLine.OnCheckGenJournalLinePrintCheckRestrictions;

      ReportSelections.Print(ReportSelections.Usage::"B.Check",GenJnlLine,'');
    END;

    [External]
    PROCEDURE PrintTransferHeader@2(TransHeader@1000 : Record "Transfer Header");
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      TransHeader.SETRANGE("No.",TransHeader."No.");

      ReportSelections.Print(ReportSelections.Usage::Inv1,TransHeader,'');
    END;

    [External]
    PROCEDURE PrintServiceContract@3(ServiceContract@1000 : Record "Service Contract Header");
    VAR
      ReportSelection@1001 : Record "Report Selections";
    BEGIN
      ServiceContract.SETRANGE("Contract No.",ServiceContract."Contract No.");

      ReportSelection.FilterPrintUsage(GetServContractTypeUsage(ServiceContract));
      if ReportSelection.ISEMPTY then
        ERROR(Text001,ReportSelection.TABLECAPTION,FORMAT(ServiceContract."Contract Type"),ServiceContract."Contract No.");

      ReportSelection.Print(GetServContractTypeUsage(ServiceContract),ServiceContract,ServiceContract."Bill-to Customer No.");
    END;

    [External]
    PROCEDURE PrintServiceHeader@4(ServiceHeader@1000 : Record "Service Header");
    VAR
      ReportSelection@1001 : Record "Report Selections";
    BEGIN
      ServiceHeader.SETRANGE("No.",ServiceHeader."No.");
      CalcServDisc(ServiceHeader);

      ReportSelection.FilterPrintUsage(GetServHeaderDocTypeUsage(ServiceHeader));
      if ReportSelection.ISEMPTY then
        ERROR(Text002,ReportSelection.FIELDCAPTION("Report ID"),ServiceHeader.TABLECAPTION,ReportSelection.TABLECAPTION);

      ReportSelection.Print(GetServHeaderDocTypeUsage(ServiceHeader),ServiceHeader,ServiceHeader."Customer No.");
    END;

    [External]
    PROCEDURE PrintAsmHeader@9(AsmHeader@1000 : Record "Assembly Header");
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      AsmHeader.SETRANGE("No.",AsmHeader."No.");

      ReportSelections.Print(GetAsmHeaderDocTypeUsage(AsmHeader),AsmHeader,'');
    END;

    [External]
    PROCEDURE PrintSalesOrder@6(SalesHeader@1000 : Record "Sales Header";Usage@1001 : '"Order Confirmation","Work Order","Pick Instruction"');
    VAR
      ReportSelection@1002 : Record "Report Selections";
    BEGIN
      if SalesHeader."Document Type" <> SalesHeader."Document Type"::Order then
        exit;

      SalesHeader.SETRANGE("No.",SalesHeader."No.");
      CalcSalesDisc(SalesHeader);

      ReportSelection.PrintWithGUIYesNo(GetSalesOrderUsage(Usage),SalesHeader,GUIALLOWED,SalesHeader."Bill-to Customer No.");
    END;

    [External]
    PROCEDURE PrintSalesHeaderArch@7(SalesHeaderArch@1000 : Record "Sales Header Archive");
    VAR
      ReportSelection@1001 : Record "Report Selections";
    BEGIN
      SalesHeaderArch.SETRECFILTER;

      ReportSelection.Print(GetSalesArchDocTypeUsage(SalesHeaderArch),SalesHeaderArch,SalesHeaderArch."Bill-to Customer No.");
    END;

    [External]
    PROCEDURE PrintPurchHeaderArch@8(PurchHeaderArch@1000 : Record "Purchase Header Archive");
    VAR
      ReportSelection@1001 : Record "Report Selections";
    BEGIN
      PurchHeaderArch.SETRECFILTER;

      ReportSelection.Print(GetPurchArchDocTypeUsage(PurchHeaderArch),PurchHeaderArch,'');
    END;

    [External]
    PROCEDURE PrintProformaSalesInvoice@15(SalesHeader@1000 : Record "Sales Header");
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      SalesHeader.SETRECFILTER;
      ReportSelections.Print(ReportSelections.Usage::"Pro Forma S. Invoice",SalesHeader,SalesHeader."Bill-to Customer No.");
    END;

    LOCAL PROCEDURE GetSalesDocTypeUsage@23(SalesHeader@1000 : Record "Sales Header") : Integer;
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      case SalesHeader."Document Type" of
        SalesHeader."Document Type"::Quote:
          exit(ReportSelections.Usage::"S.Quote");
        SalesHeader."Document Type"::"Blanket Order":
          exit(ReportSelections.Usage::"S.Blanket");
        SalesHeader."Document Type"::Order:
          exit(ReportSelections.Usage::"S.Order");
        SalesHeader."Document Type"::"Return Order":
          exit(ReportSelections.Usage::"S.Return");
        SalesHeader."Document Type"::Invoice:
          exit(ReportSelections.Usage::"S.Invoice Draft");
        SalesHeader."Document Type"::"Credit Memo":
          exit(ReportSelections.Usage::"S.Cr.Memo");
        else
          ERROR('');
      end;
    END;

    LOCAL PROCEDURE GetPurchDocTypeUsage@13(PurchHeader@1000 : Record "Purchase Header") : Integer;
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      case PurchHeader."Document Type" of
        PurchHeader."Document Type"::Quote:
          exit(ReportSelections.Usage::"P.Quote");
        PurchHeader."Document Type"::"Blanket Order":
          exit(ReportSelections.Usage::"P.Blanket");
        PurchHeader."Document Type"::Order:
          exit(ReportSelections.Usage::"P.Order");
        PurchHeader."Document Type"::"Return Order":
          exit(ReportSelections.Usage::"P.Return");
        else
          ERROR('');
      end;
    END;

    LOCAL PROCEDURE GetServContractTypeUsage@21(ServiceContractHeader@1000 : Record "Service Contract Header") : Integer;
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      case ServiceContractHeader."Contract Type" of
        ServiceContractHeader."Contract Type"::Quote:
          exit(ReportSelections.Usage::"SM.Contract Quote");
        ServiceContractHeader."Contract Type"::Contract:
          exit(ReportSelections.Usage::"SM.Contract");
        else
          ERROR('');
      end;
    END;

    LOCAL PROCEDURE GetServHeaderDocTypeUsage@22(ServiceHeader@1000 : Record "Service Header") : Integer;
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      case ServiceHeader."Document Type" of
        ServiceHeader."Document Type"::Quote:
          exit(ReportSelections.Usage::"SM.Quote");
        ServiceHeader."Document Type"::Order:
          exit(ReportSelections.Usage::"SM.Order");
        ServiceHeader."Document Type"::Invoice:
          exit(ReportSelections.Usage::"SM.Invoice");
        ServiceHeader."Document Type"::"Credit Memo":
          exit(ReportSelections.Usage::"SM.Credit Memo");
        else
          ERROR('');
      end;
    END;

    LOCAL PROCEDURE GetAsmHeaderDocTypeUsage@18(AsmHeader@1000 : Record "Assembly Header") : Integer;
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      case AsmHeader."Document Type" of
        AsmHeader."Document Type"::Quote,
        AsmHeader."Document Type"::"Blanket Order",
        AsmHeader."Document Type"::Order:
          exit(ReportSelections.Usage::"Asm. Order");
        else
          ERROR('');
      end;
    END;

    LOCAL PROCEDURE GetSalesOrderUsage@24(Usage@1001 : '"Order Confirmation","Work Order","Pick Instruction"') : Integer;
    VAR
      ReportSelections@1000 : Record "Report Selections";
    BEGIN
      case Usage of
        Usage::"Order Confirmation":
          exit(ReportSelections.Usage::"S.Order");
        Usage::"Work Order":
          exit(ReportSelections.Usage::"S.Work Order");
        Usage::"Pick Instruction":
          exit(ReportSelections.Usage::"S.Order Pick Instruction");
        else
          ERROR('');
      end;
    END;

    LOCAL PROCEDURE GetSalesArchDocTypeUsage@29(SalesHeaderArchive@1000 : Record "Sales Header Archive") : Integer;
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      case SalesHeaderArchive."Document Type" of
        SalesHeaderArchive."Document Type"::Quote:
          exit(ReportSelections.Usage::"S.Arch. Quote");
        SalesHeaderArchive."Document Type"::Order:
          exit(ReportSelections.Usage::"S.Arch. Order");
        SalesHeaderArchive."Document Type"::"Return Order":
          exit(ReportSelections.Usage::"S. Arch. Return Order");
        else
          ERROR('');
      end
    END;

    LOCAL PROCEDURE GetPurchArchDocTypeUsage@35(PurchHeaderArchive@1000 : Record "Purchase Header Archive") : Integer;
    VAR
      ReportSelections@1001 : Record "Report Selections";
    BEGIN
      case PurchHeaderArchive."Document Type" of
        PurchHeaderArchive."Document Type"::Quote:
          exit(ReportSelections.Usage::"P.Arch. Quote");
        PurchHeaderArchive."Document Type"::Order:
          exit(ReportSelections.Usage::"P.Arch. Order");
        PurchHeaderArchive."Document Type"::"Return Order":
          exit(ReportSelections.Usage::"P. Arch. Return Order");
        else
          ERROR('');
      end;
    END;

    LOCAL PROCEDURE CalcSalesDisc@25(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesLine@1004 : Record "Sales Line";
    BEGIN
      SalesSetup.GET;
      if SalesSetup."Calc. Inv. Discount" then begin
        SalesLine.RESET;
        SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
        SalesLine.SETRANGE("Document No.",SalesHeader."No.");
        SalesLine.FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Sales-Calc. Discount",SalesLine);
        SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
        COMMIT;
      end;
    END;

    LOCAL PROCEDURE CalcPurchDisc@28(VAR PurchHeader@1000 : Record "Purchase Header");
    VAR
      PurchLine@1003 : Record "Purchase Line";
    BEGIN
      PurchSetup.GET;
      if PurchSetup."Calc. Inv. Discount" then begin
        PurchLine.RESET;
        PurchLine.SETRANGE("Document Type",PurchHeader."Document Type");
        PurchLine.SETRANGE("Document No.",PurchHeader."No.");
        PurchLine.FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Purch.-Calc.Discount",PurchLine);
        PurchHeader.GET(PurchHeader."Document Type",PurchHeader."No.");
        COMMIT;
      end;
    END;

    LOCAL PROCEDURE CalcServDisc@31(VAR ServHeader@1000 : Record "Service Header");
    VAR
      ServLine@1002 : Record "Service Line";
    BEGIN
      SalesSetup.GET;
      if SalesSetup."Calc. Inv. Discount" then begin
        ServLine.RESET;
        ServLine.SETRANGE("Document Type",ServHeader."Document Type");
        ServLine.SETRANGE("Document No.",ServHeader."No.");
        ServLine.FINDFIRST;
        CODEUNIT.RUN(CODEUNIT::"Service-Calc. Discount",ServLine);
        ServHeader.GET(ServHeader."Document Type",ServHeader."No.");
        COMMIT;
      end;
    END;

    BEGIN
    END.
  }
}

