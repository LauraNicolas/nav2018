OBJECT Codeunit 82 Sales-Post + Print
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Sales Header";
    OnRun=VAR
            SalesHeader@1000 : Record "Sales Header";
          BEGIN
            SalesHeader.COPY(Rec);
            Code(SalesHeader);
            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      ShipInvoiceQst@1000 : TextConst 'ENU=&Ship,&Invoice,Ship &and Invoice';
      PostAndPrintQst@1001 : TextConst '@@@="%1 = Document Type";ENU=Do you want to post and print the %1?';
      PostAndEmailQst@1016 : TextConst '@@@="%1 = Document Type";ENU=Do you want to post and email the %1?';
      ReceiveInvoiceQst@1002 : TextConst 'ENU=&Receive,&Invoice,Receive &and Invoice';
      SendReportAsEmail@1009 : Boolean;

    [Internal]
    PROCEDURE PostAndEmail@10(VAR ParmSalesHeader@1000 : Record "Sales Header");
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      SendReportAsEmail := true;
      SalesHeader.COPY(ParmSalesHeader);
      Code(SalesHeader);
      ParmSalesHeader := SalesHeader;
    END;

    LOCAL PROCEDURE Code@2(VAR SalesHeader@1002 : Record "Sales Header");
    VAR
      SalesSetup@1001 : Record "Sales & Receivables Setup";
      SalesPostViaJobQueue@1000 : Codeunit "Sales Post via Job Queue";
      HideDialog@1003 : Boolean;
    BEGIN
      HideDialog := false;

      OnBeforeConfirmPost(SalesHeader,HideDialog);
      if not HideDialog then
        if not ConfirmPost(SalesHeader) then
          exit;

      SalesSetup.GET;
      if SalesSetup."Post & Print with Job Queue" and not SendReportAsEmail then
        SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader)
      else begin
        CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
        GetReport(SalesHeader);
      end;
      COMMIT;
    END;

    [External]
    PROCEDURE GetReport@3(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      with SalesHeader do
        case "Document Type" of
          "Document Type"::Order:
            begin
              if Ship then
                PrintShip(SalesHeader);
              if Invoice then
                PrintInvoice(SalesHeader);
            end;
          "Document Type"::Invoice:
            PrintInvoice(SalesHeader);
          "Document Type"::"Return Order":
            begin
              if Receive then
                PrintReceive(SalesHeader);
              if Invoice then
                PrintCrMemo(SalesHeader);
            end;
          "Document Type"::"Credit Memo":
            PrintCrMemo(SalesHeader);
        end;
    END;

    LOCAL PROCEDURE ConfirmPost@9(VAR SalesHeader@1000 : Record "Sales Header") : Boolean;
    VAR
      Selection@1001 : Integer;
    BEGIN
      with SalesHeader do begin
        case "Document Type" of
          "Document Type"::Order:
            begin
              Selection := STRMENU(ShipInvoiceQst,3);
              if Selection = 0 then
                exit(false);
              Ship := Selection in [1,3];
              Invoice := Selection in [2,3];
            end;
          "Document Type"::"Return Order":
            begin
              Selection := STRMENU(ReceiveInvoiceQst,3);
              if Selection = 0 then
                exit(false);
              Receive := Selection in [1,3];
              Invoice := Selection in [2,3];
            end
          else
            if not CONFIRM(ConfirmationMessage,false,"Document Type") then
              exit(false);
        end;
        "Print Posted Documents" := true;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE ConfirmationMessage@4() : Text;
    BEGIN
      if SendReportAsEmail then
        exit(PostAndEmailQst);
      exit(PostAndPrintQst);
    END;

    LOCAL PROCEDURE PrintReceive@1(SalesHeader@1001 : Record "Sales Header");
    VAR
      ReturnRcptHeader@1000 : Record "Return Receipt Header";
    BEGIN
      ReturnRcptHeader."No." := SalesHeader."Last Return Receipt No.";
      if ReturnRcptHeader.FIND then;
      ReturnRcptHeader.SETRECFILTER;

      if SendReportAsEmail then
        ReturnRcptHeader.EmailRecords(true)
      else
        ReturnRcptHeader.PrintRecords(false);
    END;

    LOCAL PROCEDURE PrintInvoice@5(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesInvHeader@1003 : Record "Sales Invoice Header";
    BEGIN
      if SalesHeader."Last Posting No." = '' then
        SalesInvHeader."No." := SalesHeader."No."
      else
        SalesInvHeader."No." := SalesHeader."Last Posting No.";
      SalesInvHeader.FIND;
      SalesInvHeader.SETRECFILTER;

      if SendReportAsEmail then
        SalesInvHeader.EmailRecords(true)
      else
        SalesInvHeader.PrintRecords(false);
    END;

    LOCAL PROCEDURE PrintShip@7(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesShptHeader@1001 : Record "Sales Shipment Header";
    BEGIN
      SalesShptHeader."No." := SalesHeader."Last Shipping No.";
      if SalesShptHeader.FIND then;
      SalesShptHeader.SETRECFILTER;

      if SendReportAsEmail then
        SalesShptHeader.EmailRecords(true)
      else
        SalesShptHeader.PrintRecords(false);
    END;

    LOCAL PROCEDURE PrintCrMemo@8(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesCrMemoHeader@1003 : Record "Sales Cr.Memo Header";
    BEGIN
      if SalesHeader."Last Posting No." = '' then
        SalesCrMemoHeader."No." := SalesHeader."No."
      else
        SalesCrMemoHeader."No." := SalesHeader."Last Posting No.";
      SalesCrMemoHeader.FIND;
      SalesCrMemoHeader.SETRECFILTER;

      if SendReportAsEmail then
        SalesCrMemoHeader.EmailRecords(true)
      else
        SalesCrMemoHeader.PrintRecords(false);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeConfirmPost@6(VAR SalesHeader@1000 : Record "Sales Header";VAR HideDialog@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

