OBJECT Codeunit 5830 Calc. Availability Overview
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Availability Calc. Overview";
    OnRun=VAR
            CopyOfAvailabilityCalcOverview@1000 : Record "Availability Calc. Overview";
          BEGIN
            CopyOfAvailabilityCalcOverview.COPY(Rec);
            RESET;
            DELETEALL;
            COPY(CopyOfAvailabilityCalcOverview);

            OpenWindow(Text000,COUNT);

            Item.RESET;
            Item.SETFILTER("No.",CopyOfAvailabilityCalcOverview.GETFILTER("Item No."));
            Item.SETFILTER("Location Filter",GETFILTER("Location Code"));
            Item.SETFILTER("Variant Filter",GETFILTER("Variant Code"));
            Item.SETFILTER("Date Filter",GETFILTER(Date));
            Item.SETRANGE("Drop Shipment Filter",false);
            Item.SETRANGE(Type,Item.Type::Inventory);
            if Item.FIND('-') then begin
              OpenWindow(Text000,Item.COUNT);
              repeat
                UpdateWindow;
                SETRANGE("Matches Criteria");
                "Item No." := Item."No.";
                if CheckItemInRange(Rec) then
                  if EntriesExist(Rec) then begin
                    RESET;
                    if FINDLAST then;
                    SetEntryNo("Entry No.");
                    InsertEntry(Rec,Type::Item,0D,'','',0,0,0,0,'',Item.Description,0);
                  end;
                COPY(CopyOfAvailabilityCalcOverview);
              until Item.NEXT = 0;
            end;
            Window.CLOSE;
          END;

  }
  CODE
  {
    VAR
      Item@1000 : Record Item;
      Window@1005 : Dialog;
      StartDate@1009 : Date;
      EndDate@1010 : Date;
      AttachedToEntryNo@1001 : Integer;
      EntryNo@1002 : Integer;
      DemandType@1003 : '" ",Sales,Production,Job,Service,Assembly';
      DemandNo@1014 : Code[20];
      WindowUpdateDateTime@1006 : DateTime;
      NoOfRecords@1007 : Integer;
      i@1008 : Integer;
      Text000@1004 : TextConst 'ENU=Calculating Availability Dates @1@@@@@@@';

    [External]
    PROCEDURE CalculateItem@1035(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      CopyOfAvailabilityCalcOverview@1001 : Record "Availability Calc. Overview";
      CopyOfItem@1002 : Record Item;
      FirstEntryNo@1003 : Integer;
    BEGIN
      CopyOfItem.COPY(Item);
      CopyOfAvailabilityCalcOverview.COPY(AvailabilityCalcOverview);
      with AvailabilityCalcOverview do begin
        StartDate := 0D;
        EndDate := DMY2DATE(31,12,9999);
        if GETFILTER(Date) <> '' then begin
          StartDate := GETRANGEMIN(Date);
          EndDate := GETRANGEMAX(Date);
        end;

        Item.RESET;
        Item.SETFILTER("No.",CopyOfAvailabilityCalcOverview.GETFILTER("Item No."));
        Item.SETFILTER("Location Filter",GETFILTER("Location Code"));
        Item.SETFILTER("Variant Filter",GETFILTER("Variant Code"));
        Item.SETRANGE("Drop Shipment Filter",false);

        SETRANGE("Matches Criteria");
        Item.GET("Item No.");
        RESET;
        SETCURRENTKEY("Item No.");
        SETRANGE("Item No.",Item."No.");
        DELETEALL;

        RESET;
        if FINDLAST then;
        SetEntryNo("Entry No.");

        InsertEntry(AvailabilityCalcOverview,Type::Item,0D,'','',0,0,0,0,'',Item.Description,0);
        CopyOfAvailabilityCalcOverview := AvailabilityCalcOverview;

        FirstEntryNo := "Entry No.";
        COPYFILTERS(CopyOfAvailabilityCalcOverview);
        GetInventoryDates(AvailabilityCalcOverview);
        GetSupplyDates(AvailabilityCalcOverview);
        GetDemandDates(AvailabilityCalcOverview);

        RESET;
        SETCURRENTKEY("Item No.");
        SETRANGE("Item No.",Item."No.");
        SETFILTER(Date,CopyOfAvailabilityCalcOverview.GETFILTER(Date));
        SETFILTER("Location Code",CopyOfAvailabilityCalcOverview.GETFILTER("Location Code"));
        SETFILTER("Variant Code",CopyOfAvailabilityCalcOverview.GETFILTER("Variant Code"));
        if not FINDFIRST then begin
          SETRANGE(Date);
          SETRANGE("Location Code");
          SETRANGE("Variant Code");
          DELETEALL;
        end else
          if DemandType = DemandType::" " then
            MODIFYALL("Matches Criteria",true);
        RESET;
        if GET(FirstEntryNo) then
          if NEXT = 0 then
            DELETE;
      end;
      Item.COPY(CopyOfItem);
      AvailabilityCalcOverview.COPY(CopyOfAvailabilityCalcOverview);
    END;

    [External]
    PROCEDURE CalculateDate@1000(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      CopyOfAvailabilityCalcOverview@1001 : Record "Availability Calc. Overview";
      FirstEntryNo@1007 : Integer;
    BEGIN
      CopyOfAvailabilityCalcOverview.COPY(AvailabilityCalcOverview);
      AttachedToEntryNo := AvailabilityCalcOverview."Attached to Entry No.";

      with AvailabilityCalcOverview do begin
        Item.GET("Item No.");

        RESET;
        SETRANGE("Item No.","Item No.");
        SETRANGE("Location Code","Location Code");
        SETRANGE("Variant Code","Variant Code");
        SETRANGE(Date,Date);
        SETRANGE(Level,2,3);
        DELETEALL;

        RESET;
        if FINDLAST then;
        SetEntryNo("Entry No.");
        TRANSFERFIELDS(CopyOfAvailabilityCalcOverview,false);
        FirstEntryNo := "Entry No.";
      end;

      Item.SETRANGE("Location Filter",AvailabilityCalcOverview."Location Code");
      Item.SETRANGE("Variant Filter",AvailabilityCalcOverview."Variant Code");
      Item.SETRANGE("Date Filter",AvailabilityCalcOverview.Date);
      GetSupplyEntries(AvailabilityCalcOverview);
      GetDemandEntries(AvailabilityCalcOverview);

      AvailabilityCalcOverview.GET(FirstEntryNo);
      if AvailabilityCalcOverview.NEXT = 0 then;
      UpdateRunningTotals(AvailabilityCalcOverview);

      AvailabilityCalcOverview.GET(FirstEntryNo);
      if AvailabilityCalcOverview.NEXT = 0 then;
    END;

    LOCAL PROCEDURE GetInventoryDates@1002(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      with ItemLedgEntry do begin
        FilterLinesWithItemToPlan(Item,false);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            CALCSUMS("Remaining Quantity");
            SETRANGE(Positive,Positive);
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Inventory,0D,"Location Code","Variant Code",
              "Remaining Quantity",0,
              0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",AvailabilityCalcOverview.GETFILTER("Location Code"));
            SETFILTER("Variant Code",AvailabilityCalcOverview.GETFILTER("Variant Code"));
            SETRANGE(Positive);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetSupplyDates@1022(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    BEGIN
      GetPurchOrderSupplyDates(AvailabilityCalcOverview);
      GetSalesRetOrderSupplyDates(AvailabilityCalcOverview);
      GetProdOrderSupplyDates(AvailabilityCalcOverview);
      GetTransOrderSupplyDates(AvailabilityCalcOverview);
      GetAsmOrderSupplyDates(AvailabilityCalcOverview);
    END;

    LOCAL PROCEDURE GetDemandDates@1023(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    BEGIN
      GetSalesOrdersDemandDates(AvailabilityCalcOverview);
      GetServOrdersDemandDates(AvailabilityCalcOverview);
      GetJobOrdersDemandDates(AvailabilityCalcOverview);
      GetPurchRetOrderDemandDates(AvailabilityCalcOverview);
      GetProdOrderCompDemandDates(AvailabilityCalcOverview);
      GetTransOrderDemandDates(AvailabilityCalcOverview);
      GetAsmOrderDemandDates(AvailabilityCalcOverview);
    END;

    LOCAL PROCEDURE GetSupplyEntries@1020(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      CopyOfItem@1001 : Record Item;
    BEGIN
      CopyOfItem.COPY(Item);
      Item.SETRANGE("Location Filter",AvailabilityCalcOverview."Location Code");
      Item.SETRANGE("Variant Filter",AvailabilityCalcOverview."Variant Code");
      Item.SETRANGE("Date Filter",AvailabilityCalcOverview.Date);

      GetPurchOrderSupplyEntries(AvailabilityCalcOverview);
      GetSalesRetOrderSupplyEntries(AvailabilityCalcOverview);
      GetProdOrderSupplyEntries(AvailabilityCalcOverview);
      GetTransOrderSupplyEntries(AvailabilityCalcOverview);
      GetAsmOrderSupplyEntries(AvailabilityCalcOverview);

      Item.COPY(CopyOfItem);
    END;

    LOCAL PROCEDURE GetDemandEntries@1024(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      CopyOfItem@1001 : Record Item;
    BEGIN
      CopyOfItem.COPY(Item);
      Item.SETRANGE("Location Filter",AvailabilityCalcOverview."Location Code");
      Item.SETRANGE("Variant Filter",AvailabilityCalcOverview."Variant Code");
      Item.SETRANGE("Date Filter",AvailabilityCalcOverview.Date);

      GetSalesOrdersDemandEntries(AvailabilityCalcOverview);
      GetServOrdersDemandEntries(AvailabilityCalcOverview);
      GetJobOrdersDemandEntries(AvailabilityCalcOverview);
      GetPurchRetOrderDemandEntries(AvailabilityCalcOverview);
      GetProdOrderCompDemandEntries(AvailabilityCalcOverview);
      GetTransOrderDemandEntries(AvailabilityCalcOverview);
      GetAsmOrderDemandEntries(AvailabilityCalcOverview);

      Item.COPY(Item);
    END;

    [External]
    PROCEDURE EntriesExist@1(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview") : Boolean;
    VAR
      Item@1001 : Record Item;
    BEGIN
      Item.GET(AvailabilityCalcOverview."Item No.");
      Item.SETFILTER("Location Filter",AvailabilityCalcOverview.GETFILTER("Location Code"));
      Item.SETFILTER("Variant Filter",AvailabilityCalcOverview.GETFILTER("Variant Code"));
      Item.SETFILTER("Date Filter",AvailabilityCalcOverview.GETFILTER(Date));

      exit(true in
        [InventoryExists(Item),
         SupplyExists(Item),
         DemandExists(Item)]);
    END;

    LOCAL PROCEDURE InventoryExists@1033(VAR Item@1000 : Record Item) : Boolean;
    VAR
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
    BEGIN
      exit(ItemLedgEntry.LinesWithItemToPlanExist(Item,false));
    END;

    LOCAL PROCEDURE SupplyExists@1032(VAR Item@1000 : Record Item) : Boolean;
    BEGIN
      exit(true in
        [PurchOrderSupplyExists(Item),
         SalesRetOrderSupplyExists(Item),
         ProdOrderSupplyExists(Item),
         TransOrderSupplyExists(Item),
         AsmOrderSupplyExists(Item)]);
    END;

    LOCAL PROCEDURE DemandExists@1031(VAR Item@1000 : Record Item) : Boolean;
    BEGIN
      exit(true in
        [SalesOrderDemandExists(Item),
         ServOrderDemandExists(Item),
         JobOrderDemandExists(Item),
         PurchRetOrderDemandExists(Item),
         ProdOrderCompDemandExists(Item),
         TransOrderDemandExists(Item),
         AsmOrderDemandExists(Item)]);
    END;

    LOCAL PROCEDURE GetPurchOrderSupplyDates@1003(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      with PurchLine do begin
        FilterLinesWithItemToPlan(Item,"Document Type"::Order);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Expected Receipt Date","Expected Receipt Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Expected Receipt Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetSalesRetOrderSupplyDates@1006(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      with SalesLine do begin
        FilterLinesWithItemToPlan(Item,"Document Type"::"Return Order");
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Shipment Date","Shipment Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Shipment Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetProdOrderSupplyDates@1007(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      ProdOrderLine@1001 : Record "Prod. Order Line";
    BEGIN
      with ProdOrderLine do begin
        FilterLinesWithItemToPlan(Item,true);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Due Date","Due Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Due Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetTransOrderSupplyDates@1009(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      TransLine@1001 : Record "Transfer Line";
    BEGIN
      with TransLine do begin
        FilterLinesWithItemToPlan(Item,true,false);
        if FINDFIRST then
          repeat
            SETRANGE("Transfer-to Code","Transfer-to Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Receipt Date","Receipt Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Receipt Date","Transfer-to Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Transfer-to Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Receipt Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetSalesOrdersDemandDates@1004(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      with SalesLine do begin
        FilterLinesWithItemToPlan(Item,"Document Type"::Order);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Shipment Date","Shipment Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Shipment Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetServOrdersDemandDates@11(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      ServLine@1001 : Record "Service Line";
    BEGIN
      with ServLine do begin
        FilterLinesWithItemToPlan(Item);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Needed by Date","Needed by Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Needed by Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Needed by Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetJobOrdersDemandDates@10(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      JobPlanningLine@1001 : Record "Job Planning Line";
    BEGIN
      with JobPlanningLine do begin
        FilterLinesWithItemToPlan(Item);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Planning Date","Planning Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Planning Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Planning Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetPurchRetOrderDemandDates@1005(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      with PurchLine do begin
        FilterLinesWithItemToPlan(Item,"Document Type"::"Return Order");
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Expected Receipt Date","Expected Receipt Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Expected Receipt Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Expected Receipt Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetProdOrderCompDemandDates@1008(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
    BEGIN
      with ProdOrderComp do begin
        FilterLinesWithItemToPlan(Item,true);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Due Date","Due Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Due Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetTransOrderDemandDates@1010(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      TransLine@1001 : Record "Transfer Line";
    BEGIN
      with TransLine do begin
        FilterLinesWithItemToPlan(Item,false,false);
        if FINDFIRST then
          repeat
            SETRANGE("Transfer-from Code","Transfer-from Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Shipment Date","Shipment Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Shipment Date","Transfer-from Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Transfer-to Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Shipment Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetAsmOrderDemandDates@13(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      AsmLine@1001 : Record "Assembly Line";
    BEGIN
      with AsmLine do begin
        FilterLinesWithItemToPlan(Item,"Document Type"::Order);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Due Date","Due Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Due Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetAsmOrderSupplyDates@9(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      with AsmHeader do begin
        FilterLinesWithItemToPlan(Item,"Document Type"::Order);
        if FINDFIRST then
          repeat
            SETRANGE("Location Code","Location Code");
            SETRANGE("Variant Code","Variant Code");
            SETRANGE("Due Date","Due Date");

            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::"As of Date","Due Date","Location Code","Variant Code",0,0,0,0,'','',0);

            FINDLAST;
            SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
            SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
            SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetPurchOrderSupplyEntries@1018(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      PurchLine@1001 : Record "Purchase Line";
      PurchHeader@1002 : Record "Purchase Header";
    BEGIN
      with PurchLine do begin
        if FindLinesWithItemToPlan(Item,"Document Type"::Order) then
          repeat
            PurchHeader.GET("Document Type","Document No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Supply,"Expected Receipt Date","Location Code","Variant Code",
              "Outstanding Qty. (Base)","Reserved Qty. (Base)",
              DATABASE::"Purchase Line","Document Type","Document No.",PurchHeader."Buy-from Vendor Name",0);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetSalesRetOrderSupplyEntries@1015(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      SalesLine@1001 : Record "Sales Line";
      SalesHeader@1002 : Record "Sales Header";
    BEGIN
      with SalesLine do begin
        if FindLinesWithItemToPlan(Item,"Document Type"::"Return Order") then
          repeat
            SalesHeader.GET("Document Type","Document No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Supply,"Shipment Date","Location Code","Variant Code",
              "Outstanding Qty. (Base)","Reserved Qty. (Base)",
              DATABASE::"Sales Line","Document Type","Document No.",SalesHeader."Sell-to Customer Name",0);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetProdOrderSupplyEntries@1014(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      ProdOrderLine@1001 : Record "Prod. Order Line";
      ProdOrder@1002 : Record "Production Order";
    BEGIN
      with ProdOrderLine do begin
        if FindLinesWithItemToPlan(Item,true) then
          repeat
            ProdOrder.GET(Status,"Prod. Order No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Supply,"Due Date","Location Code","Variant Code",
              "Remaining Qty. (Base)","Reserved Qty. (Base)",
              DATABASE::"Prod. Order Line",Status,"Prod. Order No.",ProdOrder.Description,0);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetTransOrderSupplyEntries@1012(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      TransLine@1001 : Record "Transfer Line";
      TransHeader@1002 : Record "Transfer Header";
    BEGIN
      with TransLine do begin
        if FindLinesWithItemToPlan(Item,true,false) then
          repeat
            TransHeader.GET("Document No.");
            CALCFIELDS("Reserved Qty. Inbnd. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Supply,"Receipt Date","Transfer-to Code","Variant Code",
              "Outstanding Qty. (Base)","Reserved Qty. Inbnd. (Base)",
              DATABASE::"Transfer Line",Status,"Document No.",TransHeader."Transfer-from Name",0);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetAsmOrderSupplyEntries@17(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      with AsmHeader do begin
        if FindLinesWithItemToPlan(Item,"Document Type"::Order) then
          repeat
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Supply,"Due Date","Location Code","Variant Code",
              "Remaining Quantity (Base)","Reserved Qty. (Base)",
              DATABASE::"Assembly Header","Document Type",
              "No.",Description,0);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetSalesOrdersDemandEntries@1017(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      SalesLine@1001 : Record "Sales Line";
      SalesHeader@1002 : Record "Sales Header";
    BEGIN
      with SalesLine do begin
        if FindLinesWithItemToPlan(Item,"Document Type"::Order) then
          repeat
            SalesHeader.GET("Document Type","Document No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Demand,"Shipment Date","Location Code","Variant Code",
              -"Outstanding Qty. (Base)",-"Reserved Qty. (Base)",
              DATABASE::"Sales Line","Document Type","Document No.",SalesHeader."Sell-to Customer Name",DemandType::Sales);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetServOrdersDemandEntries@3(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      ServLine@1001 : Record "Service Line";
      ServHeader@1002 : Record "Service Header";
    BEGIN
      with ServLine do begin
        if FindLinesWithItemToPlan(Item) then
          repeat
            ServHeader.GET("Document Type","Document No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Demand,"Needed by Date","Location Code","Variant Code",
              -"Outstanding Qty. (Base)",-"Reserved Qty. (Base)",
              DATABASE::"Service Line","Document Type","Document No.",ServHeader."Ship-to Name",DemandType::Service);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetJobOrdersDemandEntries@4(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      JobPlanningLine@1001 : Record "Job Planning Line";
      Job@1002 : Record Job;
    BEGIN
      with JobPlanningLine do begin
        if FindLinesWithItemToPlan(Item) then
          repeat
            Job.GET("Job No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Demand,"Planning Date","Location Code","Variant Code",
              -"Remaining Qty. (Base)",-"Reserved Qty. (Base)",
              DATABASE::"Job Planning Line",Status,"Job No.",Job."Bill-to Name",DemandType::Job);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetPurchRetOrderDemandEntries@1016(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      PurchLine@1001 : Record "Purchase Line";
      PurchHeader@1002 : Record "Purchase Header";
    BEGIN
      with PurchLine do begin
        if FindLinesWithItemToPlan(Item,"Document Type"::"Return Order") then
          repeat
            PurchHeader.GET("Document Type","Document No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Demand,"Expected Receipt Date","Location Code","Variant Code",
              -"Outstanding Qty. (Base)",-"Reserved Qty. (Base)",
              DATABASE::"Purchase Line","Document Type","Document No.",PurchHeader."Buy-from Vendor Name",0);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetProdOrderCompDemandEntries@1013(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
      ProdOrder@1002 : Record "Production Order";
    BEGIN
      with ProdOrderComp do begin
        if FindLinesWithItemToPlan(Item,true) then
          repeat
            ProdOrder.GET(Status,"Prod. Order No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Demand,"Due Date","Location Code","Variant Code",
              -"Remaining Qty. (Base)",-"Reserved Qty. (Base)",
              DATABASE::"Prod. Order Component",Status,"Prod. Order No.",ProdOrder.Description,DemandType::Production);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetTransOrderDemandEntries@1011(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      TransLine@1001 : Record "Transfer Line";
      TransHeader@1002 : Record "Transfer Header";
    BEGIN
      with TransLine do begin
        if FindLinesWithItemToPlan(Item,false,false) then
          repeat
            TransHeader.GET("Document No.");
            CALCFIELDS("Reserved Qty. Outbnd. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Demand,"Shipment Date","Transfer-from Code","Variant Code",
              -"Outstanding Qty. (Base)",-"Reserved Qty. Outbnd. (Base)",
              DATABASE::"Transfer Line",Status,"Document No.",TransHeader."Transfer-to Name",0);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE GetAsmOrderDemandEntries@22(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      AsmHeader@1001 : Record "Assembly Header";
      AsmLine@1002 : Record "Assembly Line";
    BEGIN
      with AsmLine do begin
        if FindLinesWithItemToPlan(Item,"Document Type"::Order) then
          repeat
            AsmHeader.GET("Document Type","Document No.");
            CALCFIELDS("Reserved Qty. (Base)");
            InsertEntry(
              AvailabilityCalcOverview,
              AvailabilityCalcOverview.Type::Demand,"Due Date","Location Code","Variant Code",
              -"Remaining Quantity (Base)",-"Reserved Qty. (Base)",
              DATABASE::"Assembly Line","Document Type",
              "Document No.",AsmHeader.Description,DemandType::Assembly);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE PurchOrderSupplyExists@1030(VAR Item@1002 : Record Item) : Boolean;
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      exit(PurchLine.LinesWithItemToPlanExist(Item,PurchLine."Document Type"::Order));
    END;

    LOCAL PROCEDURE SalesRetOrderSupplyExists@1029(VAR Item@1002 : Record Item) : Boolean;
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      exit(SalesLine.LinesWithItemToPlanExist(Item,SalesLine."Document Type"::"Return Order"));
    END;

    LOCAL PROCEDURE ProdOrderSupplyExists@1028(VAR Item@1002 : Record Item) : Boolean;
    VAR
      ProdOrderLine@1001 : Record "Prod. Order Line";
    BEGIN
      exit(ProdOrderLine.LinesWithItemToPlanExist(Item,true));
    END;

    LOCAL PROCEDURE TransOrderSupplyExists@1027(VAR Item@1000 : Record Item) : Boolean;
    VAR
      TransLine@1001 : Record "Transfer Line";
    BEGIN
      exit(TransLine.LinesWithItemToPlanExist(Item,true));
    END;

    LOCAL PROCEDURE AsmOrderSupplyExists@7(VAR Item@1000 : Record Item) : Boolean;
    VAR
      AsmHeader@1001 : Record "Assembly Header";
    BEGIN
      exit(AsmHeader.LinesWithItemToPlanExist(Item,AsmHeader."Document Type"::Order));
    END;

    LOCAL PROCEDURE SalesOrderDemandExists@1026(VAR Item@1000 : Record Item) : Boolean;
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      exit(SalesLine.LinesWithItemToPlanExist(Item,SalesLine."Document Type"::Order));
    END;

    LOCAL PROCEDURE ServOrderDemandExists@14(VAR Item@1000 : Record Item) : Boolean;
    VAR
      ServLine@1001 : Record "Service Line";
    BEGIN
      exit(ServLine.LinesWithItemToPlanExist(Item));
    END;

    LOCAL PROCEDURE JobOrderDemandExists@15(VAR Item@1000 : Record Item) : Boolean;
    VAR
      JobPlanningLine@1001 : Record "Job Planning Line";
    BEGIN
      exit(JobPlanningLine.LinesWithItemToPlanExist(Item));
    END;

    LOCAL PROCEDURE PurchRetOrderDemandExists@1025(VAR Item@1000 : Record Item) : Boolean;
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      exit(PurchLine.LinesWithItemToPlanExist(Item,PurchLine."Document Type"::"Return Order"));
    END;

    LOCAL PROCEDURE ProdOrderCompDemandExists@1021(VAR Item@1000 : Record Item) : Boolean;
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
    BEGIN
      exit(ProdOrderComp.LinesWithItemToPlanExist(Item,true));
    END;

    LOCAL PROCEDURE TransOrderDemandExists@1001(VAR Item@1000 : Record Item) : Boolean;
    VAR
      TransLine@1001 : Record "Transfer Line";
    BEGIN
      exit(TransLine.LinesWithItemToPlanExist(Item,false));
    END;

    LOCAL PROCEDURE AsmOrderDemandExists@6(VAR Item@1000 : Record Item) : Boolean;
    VAR
      AsmLine@1001 : Record "Assembly Line";
    BEGIN
      exit(AsmLine.LinesWithItemToPlanExist(Item,AsmLine."Document Type"::Order));
    END;

    LOCAL PROCEDURE ClosingEntryExists@1038(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview";NewType@1001 : Option;LocationCode@1002 : Code[20];VariantCode@1003 : Code[20];ClosingDate@1004 : Date) Found : Boolean;
    VAR
      CopyOfAvailabilityCalcOverview@1005 : Record "Availability Calc. Overview";
    BEGIN
      with AvailabilityCalcOverview do begin
        CopyOfAvailabilityCalcOverview.COPY(AvailabilityCalcOverview);
        SETRANGE("Item No.",Item."No.");
        SETRANGE("Location Code",LocationCode);
        SETRANGE("Variant Code",VariantCode);
        SETRANGE(Date,ClosingDate);
        SETRANGE(Type,NewType);
        Found := FINDFIRST;
        COPYFILTERS(CopyOfAvailabilityCalcOverview);
      end;
    END;

    LOCAL PROCEDURE CheckItemInRange@1039(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview") : Boolean;
    VAR
      Item@1005 : Record Item;
      SalesLine@1001 : Record "Sales Line";
      ServLine@1002 : Record "Service Line";
      JobPlanningLine@1003 : Record "Job Planning Line";
      ProdOrderComp@1004 : Record "Prod. Order Component";
      AsmLine@1007 : Record "Assembly Line";
      Found@1006 : Boolean;
    BEGIN
      Item.GET(AvailabilityCalcOverview."Item No.");
      Item.SETFILTER("Location Filter",AvailabilityCalcOverview.GETFILTER("Location Code"));
      Item.SETFILTER("Variant Filter",AvailabilityCalcOverview.GETFILTER("Variant Code"));
      Item.SETFILTER("Date Filter",AvailabilityCalcOverview.GETFILTER(Date));

      case DemandType of
        DemandType::" ":
          Found := DemandExists(Item);
        DemandType::Sales:
          with SalesLine do
            if LinesWithItemToPlanExist(Item,"Document Type"::Order) then begin
              if DemandNo <> '' then begin
                SETRANGE("Document No.",DemandNo);
                Found := not ISEMPTY;
              end else
                Found := true;
            end;
        DemandType::Production:
          with ProdOrderComp do
            if LinesWithItemToPlanExist(Item,true) then begin
              if DemandNo <> '' then begin
                SETRANGE("Prod. Order No.",DemandNo);
                Found := not ISEMPTY;
              end else
                Found := true;
            end;
        DemandType::Service:
          with ServLine do
            if LinesWithItemToPlanExist(Item) then begin
              if DemandNo <> '' then begin
                SETRANGE("Document No.",DemandNo);
                Found := not ISEMPTY;
              end else
                Found := true;
            end;
        DemandType::Job:
          with JobPlanningLine do
            if LinesWithItemToPlanExist(Item) then begin
              if DemandNo <> '' then begin
                SETRANGE("Job No.",DemandNo);
                Found := not ISEMPTY;
              end else
                Found := true;
            end;
        DemandType::Assembly:
          with AsmLine do
            if LinesWithItemToPlanExist(Item,"Document Type"::Order) then begin
              if DemandNo <> '' then begin
                SETRANGE("Document No.",DemandNo);
                Found := not ISEMPTY;
              end else
                Found := true;
            end;
      end;

      exit(Found);
    END;

    LOCAL PROCEDURE CheckDemandInDate@5(AvailCalcOverview@1005 : Record "Availability Calc. Overview") : Boolean;
    BEGIN
      AvailCalcOverview.SETRANGE("Location Code",AvailCalcOverview."Location Code");
      AvailCalcOverview.SETRANGE("Variant Code",AvailCalcOverview."Variant Code");
      AvailCalcOverview.SETRANGE(Date,AvailCalcOverview.Date);
      exit(CheckItemInRange(AvailCalcOverview));
    END;

    LOCAL PROCEDURE InsertEntry@1034(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview";NewType@1001 : Integer;NewDate@1002 : Date;NewLocation@1003 : Code[10];NewVariantCode@1004 : Code[10];NewQuantityBase@1005 : Decimal;NewReservQtyBase@1012 : Decimal;NewSourceType@1006 : Integer;NewSourceOrderStatus@1007 : Integer;NewSourceID@1008 : Code[20];NewDescription@1009 : Text[50];NewDemandType@1010 : Option);
    VAR
      CopyOfItem@1011 : Record Item;
    BEGIN
      if (NewDate <> 0D) and not (NewDate in [StartDate..EndDate]) then
        exit;
      CopyOfItem.COPY(Item);
      with AvailabilityCalcOverview do begin
        if NewType in [Type::"As of Date",Type::Inventory] then
          if ClosingEntryExists(AvailabilityCalcOverview,NewType,NewLocation,NewVariantCode,NewDate) then begin
            if not "Matches Criteria" then begin
              "Matches Criteria" := CheckDemandInDate(AvailabilityCalcOverview);
              MODIFY;
            end;
            exit;
          end;

        if not (NewType in [Type::Item,Type::"As of Date"]) then
          if NewQuantityBase = 0 then
            exit;
        INIT;
        "Entry No." := GetEntryNo;
        Type := NewType;
        "Item No." := Item."No.";
        Date := NewDate;
        "Location Code" := NewLocation;
        "Variant Code" := NewVariantCode;
        Quantity := NewQuantityBase;
        "Reserved Quantity" := NewReservQtyBase;

        if (DemandType = DemandType::" ") or
           (Type = Type::"As of Date") or
           ((DemandType = NewDemandType) and (DemandNo in ['',NewSourceID]))
        then
          "Matches Criteria" := NewDate in [StartDate..EndDate];

        case NewType of
          Type::Item:
            begin
              Level := 0;
              "Matches Criteria" := true;
            end;
          Type::Inventory:
            begin
              "Attached to Entry No." := "Entry No.";
              Level := 1;
              "Inventory Running Total" := Quantity;
              "Running Total" := Quantity;
            end;
          Type::"As of Date",Type::Inventory:
            begin
              "Attached to Entry No." := "Entry No.";
              Level := 1;
              CalcRunningTotals(
                Item."No.",NewLocation,NewVariantCode,NewDate,
                "Running Total","Inventory Running Total","Supply Running Total","Demand Running Total");
              AllocateToDemand("Inventory Running Total","Supply Running Total","Demand Running Total");
              if "Matches Criteria" then
                "Matches Criteria" := CheckDemandInDate(AvailabilityCalcOverview);
            end;
          else
            "Attached to Entry No." := AttachedToEntryNo;
            Level := 2;
        end;
        "Source Type" := NewSourceType;
        "Source Order Status" := NewSourceOrderStatus;
        "Source ID" := NewSourceID;
        Description := NewDescription;

        INSERT;
      end;
      Item.COPY(CopyOfItem);
    END;

    LOCAL PROCEDURE CalcRunningTotals@19(NewItem@1000 : Code[20];NewLocation@1001 : Code[10];NewVariant@1002 : Code[10];NewDate@1003 : Date;VAR RunningTotal@1004 : Decimal;VAR InventoryRunningTotal@1005 : Decimal;VAR SupplyRunningTotal@1007 : Decimal;VAR DemandRunningTotal@1006 : Decimal);
    VAR
      Item@1008 : Record Item;
    BEGIN
      with Item do begin
        GET(NewItem);
        SETRANGE("Location Filter",NewLocation);
        SETRANGE("Variant Filter",NewVariant);
        SETRANGE("Date Filter",0D,NewDate);
        CALCFIELDS(
          "Reserved Qty. on Purch. Orders",
          "Reserved Qty. on Prod. Order",
          "Res. Qty. on Inbound Transfer",
          "Reserved Qty. on Sales Orders",
          "Res. Qty. on Service Orders",
          "Res. Qty. on Job Order",
          "Res. Qty. on Prod. Order Comp.",
          "Res. Qty. on Outbound Transfer",
          "Reserved Qty. on Inventory",
          "Res. Qty. on Assembly Order",
          "Res. Qty. on  Asm. Comp.",
          "Res. Qty. on Sales Returns",
          "Res. Qty. on Purch. Returns");
        CALCFIELDS(
          "Qty. on Purch. Order",
          "Scheduled Receipt (Qty.)",
          "Planned Order Receipt (Qty.)",
          "Trans. Ord. Receipt (Qty.)",
          "Qty. on Sales Order",
          "Qty. on Service Order",
          "Qty. on Job Order",
          "Scheduled Need (Qty.)",
          "Trans. Ord. Shipment (Qty.)",
          Inventory,
          "Qty. on Assembly Order",
          "Qty. on Asm. Component",
          "Qty. on Purch. Return",
          "Qty. on Sales Return");

        SupplyRunningTotal :=
          "Qty. on Purch. Order" - "Reserved Qty. on Purch. Orders" +
          "Qty. on Sales Return" - "Res. Qty. on Sales Returns" +
          "Scheduled Receipt (Qty.)" + "Planned Order Receipt (Qty.)" - "Reserved Qty. on Prod. Order" +
          "Trans. Ord. Receipt (Qty.)" - "Res. Qty. on Inbound Transfer" +
          "Qty. on Assembly Order" - "Res. Qty. on Assembly Order";
        DemandRunningTotal :=
          -"Qty. on Sales Order" + "Reserved Qty. on Sales Orders" -
          "Qty. on Purch. Return" + "Res. Qty. on Purch. Returns" -
          "Scheduled Need (Qty.)" + "Res. Qty. on Prod. Order Comp." -
          "Qty. on Service Order" + "Res. Qty. on Service Orders" -
          "Qty. on Job Order" + "Res. Qty. on Job Order" -
          "Trans. Ord. Shipment (Qty.)" + "Res. Qty. on Outbound Transfer" -
          "Qty. on Asm. Component" + "Res. Qty. on  Asm. Comp.";
        InventoryRunningTotal := Inventory - "Reserved Qty. on Inventory";

        RunningTotal := InventoryRunningTotal + SupplyRunningTotal + DemandRunningTotal;
      end;
    END;

    LOCAL PROCEDURE UpdateRunningTotals@16(VAR AvailabilityCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      CopyOfAvailCalcOverview@1007 : Record "Availability Calc. Overview";
      FirstEntryNo@1006 : Integer;
      RunningTotal@1005 : Decimal;
      SupplyRunningTotal@1004 : Decimal;
      DemandRunningTotal@1003 : Decimal;
      InventoryRunningTotal@1002 : Decimal;
    BEGIN
      CopyOfAvailCalcOverview.COPY(AvailabilityCalcOverview);
      with AvailabilityCalcOverview do begin
        FirstEntryNo := "Entry No.";
        if Date <> 0D then
          CalcRunningTotals(
            "Item No.","Location Code","Variant Code",CALCDATE('<-1D>',Date),
            RunningTotal,InventoryRunningTotal,SupplyRunningTotal,DemandRunningTotal);

        repeat
          RunningTotal += Quantity - "Reserved Quantity";
          case Type of
            Type::Inventory:
              InventoryRunningTotal += Quantity - "Reserved Quantity";
            Type::Supply,
            Type::"Supply Forecast":
              SupplyRunningTotal += Quantity - "Reserved Quantity";
            Type::Demand:
              DemandRunningTotal += Quantity - "Reserved Quantity";
          end;

          "Running Total" := RunningTotal;
          "Inventory Running Total" := InventoryRunningTotal;
          "Supply Running Total" := SupplyRunningTotal;
          "Demand Running Total" := DemandRunningTotal;
          AllocateToDemand("Inventory Running Total","Supply Running Total","Demand Running Total");
          if DemandType = DemandType::" " then
            "Matches Criteria" := CopyOfAvailCalcOverview."Matches Criteria";

          MODIFY;
        until NEXT = 0;
        GET(FirstEntryNo);
        if NEXT = 0 then;
      end;
    END;

    LOCAL PROCEDURE AllocateToDemand@27(VAR InventoryRunningTotal@1000 : Decimal;VAR SupplyRunningTotal@1001 : Decimal;VAR DemandRunningTotal@1002 : Decimal);
    VAR
      RemQty@1003 : Decimal;
    BEGIN
      RemQty := DemandRunningTotal;
      if RemQty < 0 then
        if InventoryRunningTotal > 0 then
          if -RemQty > InventoryRunningTotal then begin
            RemQty += InventoryRunningTotal;
            InventoryRunningTotal := 0;
          end else begin
            InventoryRunningTotal += RemQty;
            RemQty := 0;
          end;
      if RemQty < 0 then
        if SupplyRunningTotal > 0 then
          if -RemQty > SupplyRunningTotal then begin
            RemQty += SupplyRunningTotal;
            SupplyRunningTotal := 0;
          end else begin
            SupplyRunningTotal += RemQty;
            RemQty := 0;
          end;
      DemandRunningTotal := RemQty;
    END;

    LOCAL PROCEDURE GetEntryNo@1036() : Integer;
    BEGIN
      EntryNo += 1;
      exit(EntryNo);
    END;

    LOCAL PROCEDURE SetEntryNo@1057(NewEntryNo@1000 : Integer);
    BEGIN
      EntryNo := NewEntryNo;
    END;

    [External]
    PROCEDURE SetParam@1042(NewDemandType@1000 : Option;NewDemandNo@1001 : Code[20]);
    BEGIN
      DemandType := NewDemandType;
      DemandNo := NewDemandNo;
    END;

    LOCAL PROCEDURE OpenWindow@12(DisplayText@1001 : Text[250];NoOfRecords2@1000 : Integer);
    BEGIN
      i := 0;
      NoOfRecords := NoOfRecords2;
      WindowUpdateDateTime := CURRENTDATETIME;
      Window.OPEN(DisplayText);
    END;

    LOCAL PROCEDURE UpdateWindow@2();
    BEGIN
      i := i + 1;
      if CURRENTDATETIME - WindowUpdateDateTime >= 1000 then begin
        WindowUpdateDateTime := CURRENTDATETIME;
        Window.UPDATE(1,ROUND(i / NoOfRecords * 10000,1));
      end;
    END;

    BEGIN
    END.
  }
}

