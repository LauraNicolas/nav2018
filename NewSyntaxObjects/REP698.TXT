OBJECT Report 698 Get Sales Orders
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Get Sales Orders;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  ReqWkshTmpl.GET(ReqLine."Worksheet Template Name");
                  ReqWkshName.GET(ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name");
                  ReqLine.SETRANGE("Worksheet Template Name",ReqLine."Worksheet Template Name");
                  ReqLine.SETRANGE("Journal Batch Name",ReqLine."Journal Batch Name");
                  ReqLine.LOCKTABLE;
                  if ReqLine.FINDLAST then begin
                    ReqLine.INIT;
                    LineNo := ReqLine."Line No.";
                  end;
                  Window.OPEN(Text000);
                END;

  }
  DATASET
  {
    { 2844;    ;DataItem;Sales Line          ;
               DataItemTable="Sales Line";
               DataItemTableView=WHERE("Document Type"=CONST(Order),Type=CONST(Item),"Purch. Order Line No."=CONST(0),"Outstanding Quantity"=FILTER(<>0));
               ReqFilterHeadingML=ENU=Sales Order Line;
               OnAfterGetRecord=BEGIN
                                  if ("Purchasing Code" = '') and (SpecOrder <> 1)then
                                    if "Drop Shipment" then begin
                                      LineCount := LineCount + 1;
                                      Window.UPDATE(1,LineCount);
                                      InsertReqWkshLine("Sales Line");
                                    end;

                                  if "Purchasing Code" <> '' then
                                    if PurchasingCode.GET("Purchasing Code") then
                                      if PurchasingCode."Drop Shipment" and (SpecOrder <> 1) then begin
                                        LineCount := LineCount + 1;
                                        Window.UPDATE(1,LineCount);
                                        InsertReqWkshLine("Sales Line");
                                      end else
                                        if PurchasingCode."Special Order" and
                                           ("Special Order Purchase No." = '') and
                                           (SpecOrder <> 0)
                                        then begin
                                          LineCount := LineCount + 1;
                                          Window.UPDATE(1,LineCount);
                                          InsertReqWkshLine("Sales Line");
                                        end;
                                END;

               OnPostDataItem=BEGIN
                                if LineCount = 0 then
                                  ERROR(Text001);
                              END;

               ReqFilterFields="Document No.","Sell-to Customer No.","No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Retrieve dimensions from;
                  CaptionML=ENU=Retrieve dimensions from;
                  ToolTipML=ENU=Specifies the source of dimensions that will be copied in the batch job. Dimensions can be copied exactly as they were used on a sales line or can be copied from the items used on a sales line.;
                  OptionCaptionML=ENU=Item,Sales Line;
                  ApplicationArea=#Dimensions;
                  SourceExpr=GetDim }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing sales lines  #1######';
      Text001@1001 : TextConst 'ENU=There are no sales lines to retrieve.';
      ReqWkshTmpl@1002 : Record "Req. Wksh. Template";
      ReqWkshName@1003 : Record "Requisition Wksh. Name";
      ReqLine@1004 : Record "Requisition Line";
      SalesHeader@1005 : Record "Sales Header";
      PurchasingCode@1009 : Record Purchasing;
      ItemTrackingMgt@1011 : Codeunit "Item Tracking Management";
      LeadTimeMgt@1012 : Codeunit "Lead-Time Management";
      Window@1006 : Dialog;
      LineCount@1007 : Integer;
      SpecOrder@1010 : Integer;
      GetDim@1008 : 'Item,"Sales Line"';
      LineNo@1013 : Integer;

    PROCEDURE SetReqWkshLine@1(NewReqLine@1000 : Record "Requisition Line";SpecialOrder@1001 : Integer);
    BEGIN
      ReqLine := NewReqLine;
      SpecOrder := SpecialOrder;
    END;

    LOCAL PROCEDURE InsertReqWkshLine@2(SalesLine@1000 : Record "Sales Line");
    BEGIN
      ReqLine.RESET;
      ReqLine.SETCURRENTKEY(Type,"No.");
      ReqLine.SETRANGE(Type,"Sales Line".Type);
      ReqLine.SETRANGE("No.","Sales Line"."No.");
      ReqLine.SETRANGE("Sales Order No.","Sales Line"."Document No.");
      ReqLine.SETRANGE("Sales Order Line No.","Sales Line"."Line No.");
      if ReqLine.FINDFIRST then
        exit;

      LineNo := LineNo + 10000;
      CLEAR(ReqLine);
      ReqLine.SetDropShipment(SalesLine."Drop Shipment");
      with ReqLine do begin
        INIT;
        "Worksheet Template Name" := ReqWkshName."Worksheet Template Name";
        "Journal Batch Name" := ReqWkshName.Name;
        "Line No." := LineNo;
        VALIDATE(Type,SalesLine.Type);
        VALIDATE("No.",SalesLine."No.");
        "Variant Code" := SalesLine."Variant Code";
        VALIDATE("Location Code",SalesLine."Location Code");
        "Bin Code" := SalesLine."Bin Code";

        // Drop Shipment means replenishment by purchase only
        if ("Replenishment System" <> "Replenishment System"::Purchase) and
           SalesLine."Drop Shipment"
        then
          VALIDATE("Replenishment System","Replenishment System"::Purchase);

        if SpecOrder <> 1 then
          VALIDATE("Unit of Measure Code",SalesLine."Unit of Measure Code");
        VALIDATE(
          Quantity,
          ROUND(SalesLine."Outstanding Quantity" * SalesLine."Qty. per Unit of Measure" / "Qty. per Unit of Measure",0.00001));
        "Sales Order No." := SalesLine."Document No.";
        "Sales Order Line No." := SalesLine."Line No.";
        "Sell-to Customer No." := SalesLine."Sell-to Customer No.";
        SalesHeader.GET(1,SalesLine."Document No.");
        if SpecOrder <> 1 then
          "Ship-to Code" := SalesHeader."Ship-to Code";
        "Item Category Code" := SalesLine."Item Category Code";
        Nonstock := SalesLine.Nonstock;
        "Action Message" := "Action Message"::New;
        "Purchasing Code" := SalesLine."Purchasing Code";
        // Backward Scheduling
        "Due Date" := SalesLine."Shipment Date";
        "Ending Date" :=
          LeadTimeMgt.PlannedEndingDate(
            "No.","Location Code","Variant Code","Due Date","Vendor No.","Ref. Order Type");
        CalcStartingDate('');
        UpdateDescription;
        UpdateDatetime;

        INSERT;
        ItemTrackingMgt.CopyItemTracking(SalesLine.RowID1,RowID1,true);
        if GetDim = GetDim::"Sales Line" then begin
          "Shortcut Dimension 1 Code" := SalesLine."Shortcut Dimension 1 Code";
          "Shortcut Dimension 2 Code" := SalesLine."Shortcut Dimension 2 Code";
          "Dimension Set ID" := SalesLine."Dimension Set ID";
          MODIFY;
        end;
      end;
    END;

    PROCEDURE InitializeRequest@3(NewRetrieveDimensionsFrom@1000 : Option);
    BEGIN
      GetDim := NewRetrieveDimensionsFrom;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

