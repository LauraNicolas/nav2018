OBJECT Codeunit 5722 Item Category Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    EventSubscriberInstance=Manual;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempItemCategory@1000 : TEMPORARY Record "Item Category";

    [EventSubscriber(Table,5722,OnAfterRenameEvent)]
    LOCAL PROCEDURE UpdatedPresentationOrderOnAfterRenameItemCategory@1(VAR Rec@1000 : Record "Item Category";VAR xRec@1001 : Record "Item Category";RunTrigger@1002 : Boolean);
    BEGIN
      UpdatePresentationOrder;
    END;

    [EventSubscriber(Table,5722,OnAfterModifyEvent)]
    LOCAL PROCEDURE UpdatePresentationOrderOnAfterModifyItemCategory@4(VAR Rec@1000 : Record "Item Category";VAR xRec@1001 : Record "Item Category";RunTrigger@1002 : Boolean);
    VAR
      NewParentItemCategory@1003 : Record "Item Category";
    BEGIN
      if not Rec.ISTEMPORARY then
        if xRec."Parent Category" <> Rec."Parent Category" then begin
          UpdatePresentationOrder;
          if NewParentItemCategory.GET(Rec."Parent Category") then
            Rec.VALIDATE(Indentation,NewParentItemCategory.Indentation + 1)
          else
            Rec.VALIDATE(Indentation,0);
          Rec.MODIFY;
        end;
    END;

    [EventSubscriber(Table,5722,OnAfterInsertEvent)]
    LOCAL PROCEDURE UpdatePresentationOrdOnAfterInsertItemCategory@7(VAR Rec@1000 : Record "Item Category";RunTrigger@1001 : Boolean);
    VAR
      NewParentItemCategory@1002 : Record "Item Category";
    BEGIN
      if not Rec.ISTEMPORARY then begin
        UpdatePresentationOrder;
        if NewParentItemCategory.GET(Rec."Parent Category") then begin
          Rec.VALIDATE(Indentation,NewParentItemCategory.Indentation + 1);
          Rec.MODIFY;
        end;
      end;
    END;

    [External]
    PROCEDURE UpdatePresentationOrder@3();
    VAR
      ItemCategory@1002 : Record "Item Category";
    BEGIN
      TempItemCategory.RESET;
      TempItemCategory.DELETEALL;
      if ItemCategory.FINDSET(false,false) then
        repeat
          TempItemCategory.TRANSFERFIELDS(ItemCategory);
          TempItemCategory.INSERT;
        until ItemCategory.NEXT = 0;
      UpdatePresentationOrderIterative;
    END;

    LOCAL PROCEDURE UpdatePresentationOrderIterative@2();
    VAR
      ItemCategory@1000 : Record "Item Category";
      TempStack@1005 : TEMPORARY Record TempStack;
      TempCurItemCategory@1004 : TEMPORARY Record "Item Category";
      CurItemCategoryID@1003 : RecordID;
      PresentationOrder@1001 : Integer;
      Indentation@1002 : Integer;
      HasChildren@1006 : Boolean;
    BEGIN
      PresentationOrder := 0;

      TempCurItemCategory.COPY(TempItemCategory,true);

      TempItemCategory.SETCURRENTKEY("Parent Category");
      TempItemCategory.ASCENDING(false);
      TempItemCategory.SETRANGE("Parent Category",'');
      if TempItemCategory.FINDSET(false,false) then
        repeat
          TempStack.Push(TempItemCategory.RECORDID);
        until TempItemCategory.NEXT = 0;

      while TempStack.Pop(CurItemCategoryID) do begin
        TempCurItemCategory.GET(CurItemCategoryID);
        HasChildren := false;

        TempItemCategory.SETRANGE("Parent Category",TempCurItemCategory.Code);
        if TempItemCategory.FINDSET(false,false) then
          repeat
            TempStack.Push(TempItemCategory.RECORDID);
            HasChildren := true;
          until TempItemCategory.NEXT = 0;

        if TempCurItemCategory."Parent Category" <> '' then begin
          TempItemCategory.GET(TempCurItemCategory."Parent Category");
          Indentation := TempItemCategory.Indentation + 1;
        end else
          Indentation := 0;
        PresentationOrder := PresentationOrder + 1;

        if (TempCurItemCategory."Presentation Order" <> PresentationOrder) or
           (TempCurItemCategory.Indentation <> Indentation) or (TempCurItemCategory."Has Children" <> HasChildren)
        then begin
          ItemCategory.GET(TempCurItemCategory.Code);
          ItemCategory.VALIDATE("Presentation Order",PresentationOrder);
          ItemCategory.VALIDATE(Indentation,Indentation);
          ItemCategory.VALIDATE("Has Children",HasChildren);
          ItemCategory.MODIFY;
          TempItemCategory.GET(TempCurItemCategory.Code);
          TempItemCategory.VALIDATE("Presentation Order",PresentationOrder);
          TempItemCategory.VALIDATE(Indentation,Indentation);
          TempItemCategory.VALIDATE("Has Children",HasChildren);
          TempItemCategory.MODIFY;
        end;
      end;
    END;

    [External]
    PROCEDURE DoesValueExistInItemCategories@5(Text@1000 : Code[20];VAR ItemCategory@1001 : Record "Item Category") : Boolean;
    BEGIN
      ItemCategory.RESET;
      ItemCategory.SETFILTER(Code,'@' + Text);
      exit(ItemCategory.FINDSET);
    END;

    BEGIN
    END.
  }
}

