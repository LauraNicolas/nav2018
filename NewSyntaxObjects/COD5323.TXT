OBJECT Codeunit 5323 Exchange Add-in Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExchangeWebServicesServer@1000 : Codeunit "Exchange Web Services Server";
      AddinManifestManagement@1001 : Codeunit "Add-in Manifest Management";
      Initialized@1002 : Boolean;
      InvalidCredentialsErr@1005 : TextConst 'ENU=The provided email address and password are not valid Office 365 or Exchange credentials.';
      NoMailboxErr@1006 : TextConst 'ENU=An Office 365 or Exchange mailbox could not be found for this account.';
      AutodiscoverMsg@1008 : TextConst 'ENU=Searching for your mailbox.';
      WelcomeSubjectTxt@1016 : TextConst '@@@=%1 - Application name;ENU=Welcome to %1 - your Business Inbox in Outlook is ready!';
      WelcomeEmailFromNameTxt@1014 : TextConst '@@@=%1 - Application Name;ENU=%1 Admin';
      SalesEmailAddrTxt@1012 : TextConst '@@@={Locked};ENU=jim.glynn@contoso.com';

    [TryFunction]
    LOCAL PROCEDURE Initialize@1003(AuthenticationEmail@1003 : Text[80]);
    VAR
      ExchangeServiceSetup@1000 : Record "Exchange Service Setup";
      AzureADMgt@1001 : Codeunit "Azure AD Mgt.";
      AccessToken@1002 : Text;
    BEGIN
      AccessToken := AzureADMgt.GetAccessToken(AzureADMgt.GetO365Resource,AzureADMgt.GetO365ResourceName,false);

      if AccessToken <> '' then begin
        ExchangeWebServicesServer.InitializeWithOAuthToken(AccessToken,ExchangeWebServicesServer.GetEndpoint);
        if ValidateCredentials then
          exit;
      end;

      ExchangeServiceSetup.GET;
      with ExchangeServiceSetup do
        ExchangeWebServicesServer.InitializeWithCertificate("Azure AD App. ID","Azure AD App. Cert. Thumbprint",
          "Azure AD Auth. Endpoint","Exchange Service Endpoint","Exchange Resource Uri");

      ExchangeWebServicesServer.SetImpersonatedIdentity(AuthenticationEmail);
      Initialized := true;
    END;

    [TryFunction]
    [Internal]
    PROCEDURE InitializeServiceWithCredentials@1002(Email@1000 : Text[80];Password@1001 : Text);
    VAR
      WebCredentials@1002 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials";
      ProgressWindow@1004 : Dialog;
      ErrorText@1005 : Text;
    BEGIN
      WebCredentials := WebCredentials.WebCredentials(Email,Password);

      ProgressWindow.OPEN('#1');
      ProgressWindow.UPDATE(1,AutodiscoverMsg);

      // Production O365 endpoint
      Initialized := ExchangeWebServicesServer.Initialize(Email,ExchangeWebServicesServer.GetEndpoint,WebCredentials,false) and
        ValidateCredentials;
      ErrorText := GETLASTERRORTEXT;

      // Autodiscover endpoint (can be slow)
      if not Initialized then begin
        Initialized := ExchangeWebServicesServer.Initialize(Email,'',WebCredentials,true) and ValidateCredentials;
        ErrorText := GETLASTERRORTEXT;
      end;

      ProgressWindow.CLOSE;

      if not Initialized then
        ERROR(ErrorText);
    END;

    [Internal]
    PROCEDURE CredentialsRequired@1008(AuthenticationEmail@1000 : Text[80]) Required : Boolean;
    BEGIN
      Required := not Initialize(AuthenticationEmail);
    END;

    [Internal]
    PROCEDURE PromptForCredentials@1014() : Boolean;
    VAR
      User@1000 : Record User;
      TempOfficeAdminCredentials@1001 : TEMPORARY Record "Office Admin. Credentials";
    BEGIN
      TempOfficeAdminCredentials.INIT;
      TempOfficeAdminCredentials.INSERT;

      User.SETRANGE("User Name",USERID);
      if User.FINDFIRST then begin
        TempOfficeAdminCredentials.Email := User."Authentication Email";
        TempOfficeAdminCredentials.MODIFY;
      end;

      if CredentialsRequired(TempOfficeAdminCredentials.Email) or (TempOfficeAdminCredentials.Email = '') then begin
        CLEARLASTERROR;
        repeat
          if PAGE.RUNMODAL(PAGE::"Office 365 Credentials",TempOfficeAdminCredentials) <> ACTION::LookupOK then
            exit(false);
        until InitializeServiceWithCredentials(TempOfficeAdminCredentials.Email,TempOfficeAdminCredentials.GetPassword);
      end;

      exit(true);
    END;

    [Internal]
    PROCEDURE ImpersonateUser@1006(Email@1000 : Text[80]);
    BEGIN
      if not Initialized then
        Initialize(Email);

      ExchangeWebServicesServer.SetImpersonatedIdentity(Email);
    END;

    [External]
    PROCEDURE SampleEmailsAvailable@1007() : Boolean;
    VAR
      CompanyInformationMgt@1001 : Codeunit "Company Information Mgt.";
      PermissionManager@1002 : Codeunit "Permission Manager";
    BEGIN
      exit(CompanyInformationMgt.IsDemoCompany and PermissionManager.SoftwareAsAService);
    END;

    [Internal]
    PROCEDURE DeployAddin@1013(OfficeAddin@1000 : Record "Office Add-in");
    VAR
      UserPreference@1004 : Record "User Preference";
      InstructionMgt@1005 : Codeunit "Instruction Mgt.";
      Stream@1001 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      Encoding@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.UTF8Encoding";
      ManifestText@1002 : Text;
    BEGIN
      AddinManifestManagement.GenerateManifest(OfficeAddin,ManifestText);
      Encoding := Encoding.UTF8Encoding;
      Stream := Stream.MemoryStream(Encoding.GetBytes(ManifestText));
      ExchangeWebServicesServer.InstallApp(Stream);

      UserPreference.SETRANGE("Instruction Code",InstructionMgt.OfficeUpdateNotificationCode);
      UserPreference.SETRANGE("User ID",USERID);
      UserPreference.DELETEALL;
    END;

    [Internal]
    PROCEDURE DeployAddins@1004(VAR OfficeAddin@1000 : Record "Office Add-in");
    BEGIN
      if OfficeAddin.GetAddins then
        repeat
          DeployAddin(OfficeAddin);
        until OfficeAddin.NEXT = 0;
    END;

    [Internal]
    PROCEDURE DeploySampleEmails@1005();
    VAR
      User@1003 : Record User;
      OfficeAddinSampleEmails@1001 : Codeunit "Office Add-In Sample Emails";
      RecipientEmail@1002 : Text;
      HTMlBody@1000 : Text;
    BEGIN
      User.SETRANGE("User Name",USERID);
      if User.FINDFIRST then
        RecipientEmail := User."Authentication Email";

      HTMlBody := OfficeAddinSampleEmails.GetHTMLSampleMsg;
      ExchangeWebServicesServer.SaveHTMLEmailToInbox(STRSUBSTNO(WelcomeSubjectTxt,PRODUCTNAME.MARKETING),HTMlBody,
        SalesEmailAddrTxt,STRSUBSTNO(WelcomeEmailFromNameTxt,PRODUCTNAME.FULL),RecipientEmail);
    END;

    [TryFunction]
    LOCAL PROCEDURE ValidateCredentials@1012();
    BEGIN
      if not ExchangeWebServicesServer.ValidCredentials then begin
        if STRPOS(GETLASTERRORTEXT,'401') > 0 then
          ERROR(InvalidCredentialsErr);
        ERROR(NoMailboxErr);
      end;
    END;

    BEGIN
    END.
  }
}

