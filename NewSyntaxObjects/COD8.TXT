OBJECT Codeunit 8 AccSchedManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Acc. Schedule Line";
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=DEFAULT';
      Text001@1001 : TextConst 'ENU=Default Schedule';
      Text002@1002 : TextConst 'ENU=Default Columns';
      Text012@1006 : TextConst 'ENU=You have entered an illegal value or a nonexistent row number.';
      Text013@1007 : TextConst 'ENU=You have entered an illegal value or a nonexistent column number.';
      Text016@1003 : TextConst '@@@={Locked};ENU=%1\\ %2 %3 %4';
      Text017@1011 : TextConst 'ENU=The error occurred when the program tried to calculate:\';
      Text018@1012 : TextConst '@@@="%1 = Row No., %2= Line No., %3 = Totaling";ENU="Acc. Sched. Line: Row No. = %1, Line No. = %2, Totaling = %3\"';
      Text019@1013 : TextConst '@@@="%1 = Column No., %2= Line No., %3 = Formula";ENU="Acc. Sched. Column: Column No. = %1, Line No. = %2, Formula  = %3"';
      Text020@1014 : TextConst 'ENU=Because of circular references, the program cannot calculate a formula.';
      AccSchedName@1015 : Record "Acc. Schedule Name";
      AccountScheduleLine@1016 : Record "Acc. Schedule Line";
      ColumnLayoutName@1039 : Record "Column Layout Name";
      AccSchedCellValue@1017 : TEMPORARY Record "Acc. Sched. Cell Value";
      CurrExchRate@1018 : Record "Currency Exchange Rate";
      GLSetup@1019 : Record "General Ledger Setup";
      AddRepCurrency@1035 : Record Currency;
      AnalysisView@1036 : Record "Analysis View";
      MatrixMgt@1009 : Codeunit "Matrix Management";
      AnalysisViewRead@1037 : Boolean;
      StartDate@1020 : Date;
      EndDate@1021 : Date;
      FiscalStartDate@1022 : Date;
      DivisionError@1023 : Boolean;
      PeriodError@1034 : Boolean;
      CallLevel@1024 : Integer;
      CallingAccSchedLineID@1025 : Integer;
      CallingColumnLayoutID@1026 : Integer;
      OldAccSchedLineFilters@1027 : Text;
      OldColumnLayoutFilters@1028 : Text;
      OldAccSchedLineName@1029 : Code[10];
      OldColumnLayoutName@1030 : Code[10];
      OldCalcAddCurr@1031 : Boolean;
      GLSetupRead@1033 : Boolean;
      Text021@1040 : TextConst 'ENU=Conversion of dimension totaling filter %1 results in a filter that becomes too long.';
      BasePercentLine@1038 : ARRAY [50] OF Integer;
      Text022@1041 : TextConst 'ENU=You cannot have more than %1 lines with %2 of %3.';
      Text023@1042 : TextConst 'ENU=Formulas ending with a percent sign require %2 %1 on a line before it.';
      Text024@1043 : TextConst 'ENU=The %1 %3 on the %2 must equal the %4 %6 on the %5 when any Dimension Totaling is used in any Column.';
      ColumnFormulaMsg@1005 : TextConst 'ENU=Column formula: %1.';
      RowFormulaMsg@1004 : TextConst 'ENU=Row formula: %1.';
      ColumnFormulaErrorMsg@1008 : TextConst 'ENU=Column formula: %1. \Error: %2.';
      Recalculate@1049 : Boolean;
      SystemGeneratedAccSchedMsg@1010 : TextConst 'ENU=Warning: This account schedule may be automatically updated by the system, so any changes you make may be lost.';

    [External]
    PROCEDURE OpenSchedule@1(VAR CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record "Acc. Schedule Line");
    BEGIN
      CheckTemplateAndSetFilter(CurrentSchedName,AccSchedLine);
    END;

    [External]
    PROCEDURE OpenAndCheckSchedule@57(VAR CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record "Acc. Schedule Line");
    VAR
      GeneralLedgerSetup@1002 : Record "General Ledger Setup";
    BEGIN
      CheckTemplateAndSetFilter(CurrentSchedName,AccSchedLine);
      if AccSchedLine.ISEMPTY then
        exit;
      GeneralLedgerSetup.GET;
      if CurrentSchedName in
         [GeneralLedgerSetup."Acc. Sched. for Balance Sheet",GeneralLedgerSetup."Acc. Sched. for Cash Flow Stmt",
          GeneralLedgerSetup."Acc. Sched. for Income Stmt.",GeneralLedgerSetup."Acc. Sched. for Retained Earn."]
      then
        MESSAGE(SystemGeneratedAccSchedMsg);
    END;

    LOCAL PROCEDURE CheckTemplateAndSetFilter@46(VAR CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record "Acc. Schedule Line");
    BEGIN
      CheckTemplateName(CurrentSchedName);
      AccSchedLine.FILTERGROUP(2);
      AccSchedLine.SETRANGE("Schedule Name",CurrentSchedName);
      AccSchedLine.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE CheckTemplateName@2(VAR CurrentSchedName@1000 : Code[10]);
    VAR
      AccSchedName@1001 : Record "Acc. Schedule Name";
    BEGIN
      if not AccSchedName.GET(CurrentSchedName) then begin
        if not AccSchedName.FINDFIRST then begin
          AccSchedName.INIT;
          AccSchedName.Name := Text000;
          AccSchedName.Description := Text001;
          AccSchedName.INSERT;
          COMMIT;
        end;
        CurrentSchedName := AccSchedName.Name;
      end;
    END;

    [External]
    PROCEDURE CheckName@3(CurrentSchedName@1000 : Code[10]);
    VAR
      AccSchedName@1001 : Record "Acc. Schedule Name";
    BEGIN
      AccSchedName.GET(CurrentSchedName);
    END;

    [External]
    PROCEDURE SetName@4(CurrentSchedName@1000 : Code[10];VAR AccSchedLine@1001 : Record "Acc. Schedule Line");
    BEGIN
      AccSchedLine.FILTERGROUP(2);
      AccSchedLine.SETRANGE("Schedule Name",CurrentSchedName);
      AccSchedLine.FILTERGROUP(0);
      if AccSchedLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupName@5(CurrentSchedName@1000 : Code[10];VAR EntrdSchedName@1001 : Text[10]) : Boolean;
    VAR
      AccSchedName@1002 : Record "Acc. Schedule Name";
    BEGIN
      AccSchedName.Name := CurrentSchedName;
      if PAGE.RUNMODAL(0,AccSchedName) <> ACTION::LookupOK then
        exit(false);

      EntrdSchedName := AccSchedName.Name;
      exit(true);
    END;

    [External]
    PROCEDURE OpenColumns@16(VAR CurrentColumnName@1000 : Code[10];VAR ColumnLayout@1001 : Record "Column Layout");
    BEGIN
      CheckColumnTemplateName(CurrentColumnName);
      ColumnLayout.FILTERGROUP(2);
      ColumnLayout.SETRANGE("Column Layout Name",CurrentColumnName);
      ColumnLayout.FILTERGROUP(0);
    END;

    LOCAL PROCEDURE CheckColumnTemplateName@15(VAR CurrentColumnName@1000 : Code[10]);
    VAR
      ColumnLayoutName@1001 : Record "Column Layout Name";
    BEGIN
      if not ColumnLayoutName.GET(CurrentColumnName) then begin
        if not ColumnLayoutName.FINDFIRST then begin
          ColumnLayoutName.INIT;
          ColumnLayoutName.Name := Text000;
          ColumnLayoutName.Description := Text002;
          ColumnLayoutName.INSERT;
          COMMIT;
        end;
        CurrentColumnName := ColumnLayoutName.Name;
      end;
    END;

    [External]
    PROCEDURE CheckColumnName@14(CurrentColumnName@1000 : Code[10]);
    VAR
      ColumnLayoutName@1001 : Record "Column Layout Name";
    BEGIN
      ColumnLayoutName.GET(CurrentColumnName);
    END;

    [External]
    PROCEDURE SetColumnName@13(CurrentColumnName@1000 : Code[10];VAR ColumnLayout@1001 : Record "Column Layout");
    BEGIN
      ColumnLayout.RESET;
      ColumnLayout.FILTERGROUP(2);
      ColumnLayout.SETRANGE("Column Layout Name",CurrentColumnName);
      ColumnLayout.FILTERGROUP(0);
    END;

    [External]
    PROCEDURE CopyColumnsToTemp@21(NewColumnName@1000 : Code[10];VAR TempColumnLayout@1001 : Record "Column Layout");
    VAR
      ColumnLayout@1002 : Record "Column Layout";
    BEGIN
      TempColumnLayout.DELETEALL;
      ColumnLayout.SETRANGE("Column Layout Name",NewColumnName);
      if ColumnLayout.FIND('-') then
        repeat
          TempColumnLayout := ColumnLayout;
          TempColumnLayout.INSERT;
        until ColumnLayout.NEXT = 0;
      if TempColumnLayout.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupColumnName@11(CurrentColumnName@1000 : Code[10];VAR EntrdColumnName@1001 : Text[10]) : Boolean;
    VAR
      ColumnLayoutName@1002 : Record "Column Layout Name";
    BEGIN
      ColumnLayoutName.Name := CurrentColumnName;
      if PAGE.RUNMODAL(0,ColumnLayoutName) <> ACTION::LookupOK then
        exit(false);

      EntrdColumnName := ColumnLayoutName.Name;
      exit(true);
    END;

    [External]
    PROCEDURE CheckAnalysisView@36(CurrentSchedName@1000 : Code[10];CurrentColumnName@1001 : Code[10];TestColumnName@1002 : Boolean);
    VAR
      ColumnLayout2@1003 : Record "Column Layout";
      AnyColumnDimensions@1004 : Boolean;
    BEGIN
      if not AnalysisViewRead then begin
        AnalysisViewRead := true;
        if CurrentSchedName <> AccSchedName.Name then begin
          CheckTemplateName(CurrentSchedName);
          AccSchedName.GET(CurrentSchedName);
        end;
        if TestColumnName then
          if CurrentColumnName <> ColumnLayoutName.Name then begin
            CheckColumnTemplateName(CurrentColumnName);
            ColumnLayoutName.GET(CurrentColumnName);
          end;
        if AccSchedName."Analysis View Name" = '' then begin
          if not GLSetupRead then
            GLSetup.GET;
          GLSetupRead := true;
          AnalysisView.INIT;
          AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
          AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
        end else
          AnalysisView.GET(AccSchedName."Analysis View Name");
        if AccSchedName."Analysis View Name" <> ColumnLayoutName."Analysis View Name" then begin
          AnyColumnDimensions := false;
          ColumnLayout2.SETRANGE("Column Layout Name",ColumnLayoutName.Name);
          if ColumnLayout2.FIND('-') then
            repeat
              AnyColumnDimensions :=
                (ColumnLayout2."Dimension 1 Totaling" <> '') or
                (ColumnLayout2."Dimension 2 Totaling" <> '') or
                (ColumnLayout2."Dimension 3 Totaling" <> '') or
                (ColumnLayout2."Dimension 4 Totaling" <> '');
            until AnyColumnDimensions or (ColumnLayout2.NEXT = 0);
          if AnyColumnDimensions then
            ERROR(
              Text024,
              AccSchedName.FIELDCAPTION("Analysis View Name"),
              AccSchedName.TABLECAPTION,
              AccSchedName."Analysis View Name",
              ColumnLayoutName.FIELDCAPTION("Analysis View Name"),
              ColumnLayoutName.TABLECAPTION,
              ColumnLayoutName."Analysis View Name");
        end;
      end;
    END;

    [External]
    PROCEDURE FindFiscalYear@10(BalanceDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",true);
      AccountingPeriod.SETRANGE("Starting Date",0D,BalanceDate);
      if AccountingPeriod.FINDLAST then
        exit(AccountingPeriod."Starting Date");
      AccountingPeriod.RESET;
      AccountingPeriod.FINDFIRST;
      exit(AccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE FindEndOfFiscalYear@27(BalanceDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",true);
      AccountingPeriod.SETFILTER("Starting Date",'>%1',FindFiscalYear(BalanceDate));
      if AccountingPeriod.FINDFIRST then
        exit(CALCDATE('<-1D>',AccountingPeriod."Starting Date"));
      exit(DMY2DATE(31,12,9999));
    END;

    LOCAL PROCEDURE AccPeriodStartEnd@26(Formula@1002 : Code[20];Date@1000 : Date;VAR StartDate@1013 : Date;VAR EndDate@1014 : Date);
    VAR
      ColumnLayout@1006 : Record "Column Layout";
      AccountingPeriod@1001 : Record "Accounting Period";
      AccountingPeriodFY@1007 : Record "Accounting Period";
      Steps@1005 : Integer;
      Type@1004 : '" ",Period,"Fiscal year","Fiscal Halfyear","Fiscal Quarter"';
      CurrentPeriodNo@1003 : Integer;
      RangeFromType@1012 : 'Int,CP,LP';
      RangeToType@1011 : 'Int,CP,LP';
      RangeFromInt@1010 : Integer;
      RangeToInt@1009 : Integer;
    BEGIN
      if Formula = '' then
        exit;

      ColumnLayout.ParsePeriodFormula(
        Formula,Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);

      // Find current period
      AccountingPeriod.SETFILTER("Starting Date",'<=%1',Date);
      if not AccountingPeriod.FIND('+') then begin
        AccountingPeriod.RESET;
        if Steps < 0 then
          AccountingPeriod.FIND('-')
        else
          AccountingPeriod.FIND('+')
      end;
      AccountingPeriod.RESET;

      case Type of
        Type::Period:
          begin
            if AccountingPeriod.NEXT(Steps) <> Steps then
              PeriodError := true;
            StartDate := AccountingPeriod."Starting Date";
            EndDate := AccPeriodEndDate(StartDate);
          end;
        Type::"Fiscal year":
          begin
            AccountingPeriodFY := AccountingPeriod;
            while not AccountingPeriodFY."New Fiscal Year" do
              if AccountingPeriodFY.FIND('<') then
                CurrentPeriodNo += 1
              else
                AccountingPeriodFY."New Fiscal Year" := true;
            AccountingPeriodFY.SETRANGE("New Fiscal Year",true);
            AccountingPeriodFY.NEXT(Steps);

            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeFromType,RangeFromInt,false,StartDate);
            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeToType,RangeToInt,true,EndDate);
          end;
      end;
    END;

    LOCAL PROCEDURE AccPeriodEndDate@29(StartDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      AccountingPeriod."Starting Date" := StartDate;
      if AccountingPeriod.FIND('>') then
        exit(AccountingPeriod."Starting Date" - 1);
      exit(DMY2DATE(31,12,9999));
    END;

    LOCAL PROCEDURE AccPeriodGetPeriod@35(VAR AccountingPeriod@1001 : Record "Accounting Period";AccPeriodNo@1000 : Integer);
    BEGIN
      case true of
        AccPeriodNo > 0:
          begin
            AccountingPeriod.NEXT(AccPeriodNo);
            exit;
          end;
        AccPeriodNo = 0:
          exit;
        AccPeriodNo < 0:
          begin
            AccountingPeriod.SETRANGE("New Fiscal Year",true);
            if not AccountingPeriod.FIND('>') then begin
              AccountingPeriod.RESET;
              AccountingPeriod.FIND('+');
              exit;
            end;
            AccountingPeriod.RESET;
            AccountingPeriod.FIND('<');
            exit;
          end;
      end;
    END;

    LOCAL PROCEDURE AccPeriodStartOrEnd@30(AccountingPeriod@1000 : Record "Accounting Period";CurrentPeriodNo@1007 : Integer;RangeType@1006 : 'Int,CP,LP';RangeInt@1009 : Integer;EndDate@1003 : Boolean;VAR Date@1002 : Date);
    BEGIN
      case RangeType of
        RangeType::CP:
          AccPeriodGetPeriod(AccountingPeriod,CurrentPeriodNo);
        RangeType::LP:
          AccPeriodGetPeriod(AccountingPeriod,-1);
        RangeType::Int:
          AccPeriodGetPeriod(AccountingPeriod,RangeInt - 1);
      end;
      if EndDate then
        Date := AccPeriodEndDate(AccountingPeriod."Starting Date")
      else
        Date := AccountingPeriod."Starting Date";
    END;

    LOCAL PROCEDURE InitBasePercents@33(AccSchedLine@1000 : Record "Acc. Schedule Line";ColumnLayout@1001 : Record "Column Layout");
    VAR
      BaseIdx@1002 : Integer;
    BEGIN
      CLEAR(BasePercentLine);
      BaseIdx := 0;

      with AccSchedLine do begin
        SETRANGE("Schedule Name","Schedule Name");
        if FIND('-') then
          repeat
            if "Totaling Type" = "Totaling Type"::"Set Base For Percent" then begin
              BaseIdx := BaseIdx + 1;
              if BaseIdx > ARRAYLEN(BasePercentLine) then
                ShowError(
                  STRSUBSTNO(Text022,ARRAYLEN(BasePercentLine),FIELDCAPTION("Totaling Type"),"Totaling Type"),
                  AccSchedLine,ColumnLayout);
              BasePercentLine[BaseIdx] := "Line No.";
            end;
          until NEXT = 0;
      end;

      if BaseIdx = 0 then begin
        AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Set Base For Percent";
        ShowError(
          STRSUBSTNO(Text023,AccSchedLine.FIELDCAPTION("Totaling Type"),AccSchedLine."Totaling Type"),
          AccSchedLine,ColumnLayout);
      end;
    END;

    LOCAL PROCEDURE GetBasePercentLine@34(AccSchedLine@1000 : Record "Acc. Schedule Line";ColumnLayout@1001 : Record "Column Layout") : Integer;
    VAR
      BaseIdx@1002 : Integer;
    BEGIN
      if BasePercentLine[1] = 0 then
        InitBasePercents(AccSchedLine,ColumnLayout);

      BaseIdx := ARRAYLEN(BasePercentLine);
      repeat
        if BasePercentLine[BaseIdx] <> 0 then
          if BasePercentLine[BaseIdx] < AccSchedLine."Line No." then
            exit(BasePercentLine[BaseIdx]);
        BaseIdx := BaseIdx - 1;
      until BaseIdx = 0;

      AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Set Base For Percent";
      ShowError(
        STRSUBSTNO(Text023,AccSchedLine.FIELDCAPTION("Totaling Type"),AccSchedLine."Totaling Type"),
        AccSchedLine,ColumnLayout);
    END;

    [Internal]
    PROCEDURE CalcCell@8(VAR AccSchedLine@1000 : Record "Acc. Schedule Line";VAR ColumnLayout@1001 : Record "Column Layout";CalcAddCurr@1002 : Boolean) : Decimal;
    VAR
      Result@1003 : Decimal;
    BEGIN
      AccountScheduleLine.COPYFILTERS(AccSchedLine);
      StartDate := AccountScheduleLine.GETRANGEMIN("Date Filter");
      if EndDate <> AccountScheduleLine.GETRANGEMAX("Date Filter") then begin
        EndDate := AccountScheduleLine.GETRANGEMAX("Date Filter");
        FiscalStartDate := FindFiscalYear(EndDate);
      end;
      DivisionError := false;
      PeriodError := false;
      CallLevel := 0;
      CallingAccSchedLineID := AccSchedLine."Line No.";
      CallingColumnLayoutID := ColumnLayout."Line No.";

      if (OldAccSchedLineFilters <> AccSchedLine.GETFILTERS) or
         (OldColumnLayoutFilters <> ColumnLayout.GETFILTERS) or
         (OldAccSchedLineName <> AccSchedLine."Schedule Name") or
         (OldColumnLayoutName <> ColumnLayout."Column Layout Name") or
         (OldCalcAddCurr <> CalcAddCurr) or
         Recalculate
      then begin
        AccSchedCellValue.RESET;
        AccSchedCellValue.DELETEALL;
        CLEAR(BasePercentLine);
        OldAccSchedLineFilters := AccSchedLine.GETFILTERS;
        OldColumnLayoutFilters := ColumnLayout.GETFILTERS;
        OldAccSchedLineName := AccSchedLine."Schedule Name";
        OldColumnLayoutName := ColumnLayout."Column Layout Name";
        OldCalcAddCurr := CalcAddCurr;
      end;

      Result := CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr);
      with ColumnLayout do begin
        case Show of
          Show::"When Positive":
            if Result < 0 then
              Result := 0;
          Show::"When Negative":
            if Result > 0 then
              Result := 0;
        end;
        if "Show Opposite Sign" then
          Result := -Result;
        case "Show Indented Lines" of
          "Show Indented Lines"::"Indented Only":
            if AccSchedLine.Indentation = 0 then
              Result := 0;
          "Show Indented Lines"::"Non-Indented Only":
            if AccSchedLine.Indentation > 0 then
              Result := 0;
        end;
      end;
      if AccSchedLine."Show Opposite Sign" then
        Result := -Result;

      OnBeforeCalcCellExit(AccountScheduleLine,ColumnLayout,CalcAddCurr,Result);
      exit(Result);
    END;

    LOCAL PROCEDURE CalcCellValue@6(AccSchedLine@1000 : Record "Acc. Schedule Line";ColumnLayout@1001 : Record "Column Layout";CalcAddCurr@1002 : Boolean) : Decimal;
    VAR
      GLAcc@1004 : Record "G/L Account";
      CostType@1005 : Record "Cost Type";
      CFAccount@1003 : Record "Cash Flow Account";
      Result@1015 : Decimal;
    BEGIN
      Result := 0;
      if AccSchedLine.Totaling <> '' then
        if AccSchedCellValue.GET(AccSchedLine."Line No.",ColumnLayout."Line No.") then begin
          Result := AccSchedCellValue.Value;
          DivisionError := DivisionError or AccSchedCellValue."Has Error";
          PeriodError := PeriodError or AccSchedCellValue."Period Error";
        end else begin
          if ColumnLayout."Column Type" = ColumnLayout."Column Type"::Formula then
            Result :=
              EvaluateExpression(
                false,ColumnLayout.Formula,AccSchedLine,ColumnLayout,CalcAddCurr)
          else
            if AccSchedLine."Totaling Type" in
               [AccSchedLine."Totaling Type"::Formula,AccSchedLine."Totaling Type"::"Set Base For Percent"]
            then
              Result :=
                EvaluateExpression(
                  true,AccSchedLine.Totaling,AccSchedLine,ColumnLayout,CalcAddCurr)
            else
              if (StartDate = 0D) or (EndDate = 0D) or (EndDate = DMY2DATE(31,12,9999)) then begin
                Result := 0;
                PeriodError := true;
              end else begin
                if AccSchedLine."Totaling Type" in
                   [AccSchedLine."Totaling Type"::"Posting Accounts",AccSchedLine."Totaling Type"::"Total Accounts"]
                then begin
                  AccSchedLine.COPYFILTERS(AccountScheduleLine);
                  SetGLAccRowFilters(GLAcc,AccSchedLine);
                  SetGLAccColumnFilters(GLAcc,AccSchedLine,ColumnLayout);
                  if (AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::"Posting Accounts") and
                     (STRLEN(AccSchedLine.Totaling) <= MAXSTRLEN(GLAcc.Totaling)) and (STRPOS(AccSchedLine.Totaling,'*') = 0)
                  then begin
                    GLAcc."Account Type" := GLAcc."Account Type"::Total;
                    GLAcc.Totaling := AccSchedLine.Totaling;
                    Result := Result + CalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr);
                  end else
                    if GLAcc.FIND('-') then
                      repeat
                        Result := Result + CalcGLAcc(GLAcc,AccSchedLine,ColumnLayout,CalcAddCurr);
                      until GLAcc.NEXT = 0;
                end;

                if AccSchedLine."Totaling Type" in
                   [AccSchedLine."Totaling Type"::"Cost Type",AccSchedLine."Totaling Type"::"Cost Type Total"]
                then begin
                  AccSchedLine.COPYFILTERS(AccountScheduleLine);
                  SetCostTypeRowFilters(CostType,AccSchedLine,ColumnLayout);
                  SetCostTypeColumnFilters(CostType,AccSchedLine,ColumnLayout);

                  if (AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::"Cost Type") and
                     (STRLEN(AccSchedLine.Totaling) <= MAXSTRLEN(GLAcc.Totaling)) and (STRPOS(AccSchedLine.Totaling,'*') = 0)
                  then begin
                    CostType.Type := CostType.Type::Total;
                    CostType.Totaling := AccSchedLine.Totaling;
                    Result := Result + CalcCostType(CostType,AccSchedLine,ColumnLayout,CalcAddCurr);
                  end else begin
                    if CostType.FIND('-') then
                      repeat
                        Result := Result + CalcCostType(CostType,AccSchedLine,ColumnLayout,CalcAddCurr);
                      until CostType.NEXT = 0;
                  end;
                end;

                if AccSchedLine."Totaling Type" in
                   [AccSchedLine."Totaling Type"::"Cash Flow Entry Accounts",AccSchedLine."Totaling Type"::"Cash Flow Total Accounts"]
                then begin
                  AccSchedLine.COPYFILTERS(AccountScheduleLine);
                  SetCFAccRowFilter(CFAccount,AccSchedLine);
                  SetCFAccColumnFilter(CFAccount,AccSchedLine,ColumnLayout);
                  if (AccSchedLine."Totaling Type" = AccSchedLine."Totaling Type"::"Cash Flow Entry Accounts") and
                     (STRLEN(AccSchedLine.Totaling) <= 30)
                  then begin
                    CFAccount."Account Type" := CFAccount."Account Type"::Total;
                    CFAccount.Totaling := AccSchedLine.Totaling;
                    Result := Result + CalcCFAccount(CFAccount,AccSchedLine,ColumnLayout);
                  end else
                    if CFAccount.FIND('-') then
                      repeat
                        Result := Result + CalcCFAccount(CFAccount,AccSchedLine,ColumnLayout);
                      until CFAccount.NEXT = 0;
                end;
              end;

          AccSchedCellValue."Row No." := AccSchedLine."Line No.";
          AccSchedCellValue."Column No." := ColumnLayout."Line No.";
          AccSchedCellValue.Value := Result;
          AccSchedCellValue."Has Error" := DivisionError;
          AccSchedCellValue."Period Error" := PeriodError;
          AccSchedCellValue.INSERT;
        end;
      exit(Result);
    END;

    LOCAL PROCEDURE CalcGLAcc@7(VAR GLAcc@1001 : Record "G/L Account";VAR AccSchedLine@1002 : Record "Acc. Schedule Line";VAR ColumnLayout@1003 : Record "Column Layout";CalcAddCurr@1004 : Boolean) ColValue@1000 : Decimal;
    VAR
      GLEntry@1005 : Record "G/L Entry";
      GLBudgEntry@1006 : Record "G/L Budget Entry";
      AnalysisViewEntry@1007 : Record "Analysis View Entry";
      AnalysisViewBudgetEntry@1008 : Record "Analysis View Budget Entry";
      AmountType@1009 : '"Net Amount","Debit Amount","Credit Amount"';
      TestBalance@1010 : Boolean;
      Balance@1011 : Decimal;
      UseBusUnitFilter@1111 : Boolean;
      UseDimFilter@1012 : Boolean;
    BEGIN
      ColValue := 0;
      UseDimFilter := false;
      if AccSchedName.Name <> AccSchedLine."Schedule Name" then
        AccSchedName.GET(AccSchedLine."Schedule Name");

      if ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) then
        exit(0);
      TestBalance :=
        AccSchedLine.Show in [AccSchedLine.Show::"When Positive Balance",AccSchedLine.Show::"When Negative Balance"];
      if ColumnLayout."Column Type" <> ColumnLayout."Column Type"::Formula then begin
        UseBusUnitFilter := (AccSchedLine.GETFILTER("Business Unit Filter") <> '') or (ColumnLayout."Business Unit Totaling" <> '');
        UseDimFilter := HasDimFilter(AccSchedLine,ColumnLayout);
        case ColumnLayout."Ledger Entry Type" of
          ColumnLayout."Ledger Entry Type"::Entries:
            begin
              if AccSchedName."Analysis View Name" = '' then
                with GLEntry do begin
                  if UseBusUnitFilter then
                    if UseDimFilter then
                      SETCURRENTKEY(
                        "G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code")
                    else
                      SETCURRENTKEY(
                        "G/L Account No.","Business Unit Code","Posting Date")
                  else
                    if UseDimFilter then
                      SETCURRENTKEY("G/L Account No.","Global Dimension 1 Code","Global Dimension 2 Code")
                    else
                      SETCURRENTKEY("G/L Account No.","Posting Date");
                  if GLAcc.Totaling = '' then
                    SETRANGE("G/L Account No.",GLAcc."No.")
                  else
                    SETFILTER("G/L Account No.",GLAcc.Totaling);
                  GLAcc.COPYFILTER("Date Filter","Posting Date");
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  AccSchedLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Code");
                  AccSchedLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Code");
                  FILTERGROUP(2);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"));
                  FILTERGROUP(8);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);
                  case AmountType of
                    AmountType::"Net Amount":
                      begin
                        if CalcAddCurr then begin
                          CALCSUMS("Additional-Currency Amount");
                          ColValue := "Additional-Currency Amount";
                        end else begin
                          CALCSUMS(Amount);
                          ColValue := Amount;
                        end;
                        Balance := ColValue;
                      end;
                    AmountType::"Debit Amount":
                      begin
                        if CalcAddCurr then begin
                          if TestBalance then begin
                            CALCSUMS("Add.-Currency Debit Amount","Additional-Currency Amount");
                            Balance := "Additional-Currency Amount";
                          end else
                            CALCSUMS("Add.-Currency Debit Amount");
                          ColValue := "Add.-Currency Debit Amount";
                        end else begin
                          if TestBalance then begin
                            CALCSUMS("Debit Amount",Amount);
                            Balance := Amount;
                          end else
                            CALCSUMS("Debit Amount");
                          ColValue := "Debit Amount";
                        end;
                      end;
                    AmountType::"Credit Amount":
                      begin
                        if CalcAddCurr then begin
                          if TestBalance then begin
                            CALCSUMS("Add.-Currency Credit Amount","Additional-Currency Amount");
                            Balance := "Additional-Currency Amount";
                          end else
                            CALCSUMS("Add.-Currency Credit Amount");
                          ColValue := "Add.-Currency Credit Amount";
                        end else begin
                          if TestBalance then begin
                            CALCSUMS("Credit Amount",Amount);
                            Balance := Amount;
                          end else
                            CALCSUMS("Credit Amount");
                          ColValue := "Credit Amount";
                        end;
                      end;
                  end;
                end
              else
                with AnalysisViewEntry do begin
                  SETRANGE("Analysis View Code",AccSchedName."Analysis View Name");
                  SETRANGE("Account Source","Account Source"::"G/L Account");
                  if GLAcc.Totaling = '' then
                    SETRANGE("Account No.",GLAcc."No.")
                  else
                    SETFILTER("Account No.",GLAcc.Totaling);
                  GLAcc.COPYFILTER("Date Filter","Posting Date");
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  CopyDimFilters(AccSchedLine);
                  FILTERGROUP(2);
                  SetDimFilters(
                    GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,AccSchedLine."Dimension 4 Totaling"));
                  FILTERGROUP(8);
                  SetDimFilters(
                    GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);

                  case AmountType of
                    AmountType::"Net Amount":
                      begin
                        if CalcAddCurr then begin
                          CALCSUMS("Add.-Curr. Amount");
                          ColValue := "Add.-Curr. Amount";
                        end else begin
                          CALCSUMS(Amount);
                          ColValue := Amount;
                        end;
                        Balance := ColValue;
                      end;
                    AmountType::"Debit Amount":
                      begin
                        if CalcAddCurr then begin
                          if TestBalance then begin
                            CALCSUMS("Add.-Curr. Debit Amount","Add.-Curr. Amount");
                            Balance := "Add.-Curr. Amount";
                          end else
                            CALCSUMS("Add.-Curr. Debit Amount");
                          ColValue := "Add.-Curr. Debit Amount";
                        end else begin
                          if TestBalance then begin
                            CALCSUMS("Debit Amount",Amount);
                            Balance := Amount;
                          end else
                            CALCSUMS("Debit Amount");
                          ColValue := "Debit Amount";
                        end;
                      end;
                    AmountType::"Credit Amount":
                      begin
                        if CalcAddCurr then begin
                          if TestBalance then begin
                            CALCSUMS("Add.-Curr. Credit Amount","Add.-Curr. Amount");
                            Balance := "Add.-Curr. Amount";
                          end else
                            CALCSUMS("Add.-Curr. Credit Amount");
                          ColValue := "Add.-Curr. Credit Amount";
                        end else begin
                          if TestBalance then begin
                            CALCSUMS("Credit Amount",Amount);
                            Balance := Amount;
                          end else
                            CALCSUMS("Credit Amount");
                          ColValue := "Credit Amount";
                        end;
                      end;
                  end;
                end;
            end;
          ColumnLayout."Ledger Entry Type"::"Budget Entries":
            begin
              if AccSchedName."Analysis View Name" = '' then
                with GLBudgEntry do begin
                  if UseBusUnitFilter or UseDimFilter then
                    SETCURRENTKEY(
                      "Budget Name","G/L Account No.","Business Unit Code",
                      "Global Dimension 1 Code","Global Dimension 2 Code",
                      "Budget Dimension 1 Code","Budget Dimension 2 Code",
                      "Budget Dimension 3 Code","Budget Dimension 4 Code",Date)
                  else
                    SETCURRENTKEY("Budget Name","G/L Account No.",Date);
                  if GLAcc.Totaling = '' then
                    SETRANGE("G/L Account No.",GLAcc."No.")
                  else
                    SETFILTER("G/L Account No.",GLAcc.Totaling);
                  GLAcc.COPYFILTER("Date Filter",Date);
                  AccSchedLine.COPYFILTER("G/L Budget Filter","Budget Name");
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  AccSchedLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Code");
                  AccSchedLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Code");
                  FILTERGROUP(2);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"));
                  FILTERGROUP(8);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);

                  case AmountType of
                    AmountType::"Net Amount":
                      begin
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      end;
                    AmountType::"Debit Amount":
                      begin
                        CALCSUMS(Amount);
                        ColValue := Amount;
                        if ColValue < 0 then
                          ColValue := 0;
                      end;
                    AmountType::"Credit Amount":
                      begin
                        CALCSUMS(Amount);
                        ColValue := -Amount;
                        if ColValue < 0 then
                          ColValue := 0;
                      end;
                  end;
                  Balance := Amount;
                end
              else
                with AnalysisViewBudgetEntry do begin
                  if GLAcc.Totaling = '' then
                    SETRANGE("G/L Account No.",GLAcc."No.")
                  else
                    SETFILTER("G/L Account No.",GLAcc.Totaling);
                  SETRANGE("Analysis View Code",AccSchedName."Analysis View Name");
                  GLAcc.COPYFILTER("Date Filter","Posting Date");
                  AccSchedLine.COPYFILTER("G/L Budget Filter","Budget Name");
                  AccSchedLine.COPYFILTER("Business Unit Filter","Business Unit Code");
                  CopyDimFilters(AccSchedLine);
                  FILTERGROUP(2);
                  SetDimFilters(
                    GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,AccSchedLine."Dimension 4 Totaling"));
                  FILTERGROUP(8);
                  SetDimFilters(
                    GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
                  SETFILTER("Business Unit Code",ColumnLayout."Business Unit Totaling");
                  FILTERGROUP(0);

                  case AmountType of
                    AmountType::"Net Amount":
                      begin
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      end;
                    AmountType::"Debit Amount":
                      begin
                        CALCSUMS(Amount);
                        ColValue := Amount;
                        if ColValue < 0 then
                          ColValue := 0;
                      end;
                    AmountType::"Credit Amount":
                      begin
                        CALCSUMS(Amount);
                        ColValue := -Amount;
                        if ColValue < 0 then
                          ColValue := 0;
                      end;
                  end;
                  Balance := Amount;
                end;
              if CalcAddCurr then
                ColValue := CalcLCYToACY(ColValue);
            end;
        end;
        if TestBalance then begin
          if AccSchedLine.Show = AccSchedLine.Show::"When Positive Balance" then
            if Balance < 0 then
              exit(0);
          if AccSchedLine.Show = AccSchedLine.Show::"When Negative Balance" then
            if Balance > 0 then
              exit(0);
        end;
      end;
      exit(ColValue);
    END;

    LOCAL PROCEDURE CalcCFAccount@39(VAR CFAccount@1000 : Record "Cash Flow Account";VAR AccSchedLine@1001 : Record "Acc. Schedule Line";VAR ColumnLayout@1002 : Record "Column Layout") ColValue@1003 : Decimal;
    VAR
      CFForecastEntry@1004 : Record "Cash Flow Forecast Entry";
      AnalysisViewEntry@1007 : Record "Analysis View Entry";
      AmountType@1009 : '"Net Amount","Debit Amount","Credit Amount"';
    BEGIN
      ColValue := 0;
      if AccSchedName.Name <> AccSchedLine."Schedule Name" then
        AccSchedName.GET(AccSchedLine."Schedule Name");

      if ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) then
        exit(0);

      if ColumnLayout."Column Type" <> ColumnLayout."Column Type"::Formula then
        case ColumnLayout."Ledger Entry Type" of
          ColumnLayout."Ledger Entry Type"::Entries:
            begin
              if AccSchedName."Analysis View Name" = '' then
                with CFForecastEntry do begin
                  SETCURRENTKEY(
                    "Cash Flow Account No.","Cash Flow Forecast No.","Global Dimension 1 Code",
                    "Global Dimension 2 Code","Cash Flow Date");
                  if CFAccount.Totaling = '' then
                    SETRANGE("Cash Flow Account No.",CFAccount."No.")
                  else
                    SETFILTER("Cash Flow Account No.",CFAccount.Totaling);
                  CFAccount.COPYFILTER("Date Filter","Cash Flow Date");
                  AccSchedLine.COPYFILTER("Cash Flow Forecast Filter","Cash Flow Forecast No.");
                  AccSchedLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Code");
                  AccSchedLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Code");
                  FILTERGROUP(2);
                  SETFILTER("Global Dimension 1 Code",AccSchedLine."Dimension 1 Totaling");
                  SETFILTER("Global Dimension 2 Code",AccSchedLine."Dimension 2 Totaling");
                  FILTERGROUP(8);
                  SETFILTER("Global Dimension 1 Code",GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"));
                  SETFILTER("Global Dimension 2 Code",GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"));
                  FILTERGROUP(0);
                  case ColumnLayout."Amount Type" of
                    ColumnLayout."Amount Type"::"Net Amount":
                      begin
                        CALCSUMS("Amount (LCY)");
                        ColValue := "Amount (LCY)";
                      end;
                  end;
                end
              else
                with AnalysisViewEntry do begin
                  SETRANGE("Analysis View Code",AccSchedName."Analysis View Name");

                  SETRANGE("Account Source","Account Source"::"Cash Flow Account");
                  if CFAccount.Totaling = '' then
                    SETRANGE("Account No.",CFAccount."No.")
                  else
                    SETFILTER("Account No.",CFAccount.Totaling);
                  CFAccount.COPYFILTER("Date Filter","Posting Date");
                  AccSchedLine.COPYFILTER("Cash Flow Forecast Filter","Cash Flow Forecast No.");
                  CopyDimFilters(AccSchedLine);
                  FILTERGROUP(2);
                  SetDimFilters(
                    GetDimTotalingFilter(1,AccSchedLine."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,AccSchedLine."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,AccSchedLine."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,AccSchedLine."Dimension 4 Totaling"));
                  FILTERGROUP(8);
                  SetDimFilters(
                    GetDimTotalingFilter(1,ColumnLayout."Dimension 1 Totaling"),
                    GetDimTotalingFilter(2,ColumnLayout."Dimension 2 Totaling"),
                    GetDimTotalingFilter(3,ColumnLayout."Dimension 3 Totaling"),
                    GetDimTotalingFilter(4,ColumnLayout."Dimension 4 Totaling"));
                  FILTERGROUP(0);

                  case ColumnLayout."Amount Type" of
                    ColumnLayout."Amount Type"::"Net Amount":
                      begin
                        CALCSUMS(Amount);
                        ColValue := Amount;
                      end;
                  end;
                end;
            end;
        end;

      exit(ColValue);
    END;

    [External]
    PROCEDURE SetGLAccRowFilters@17(VAR GLAcc@1000 : Record "G/L Account";VAR AccSchedLine2@1001 : Record "Acc. Schedule Line");
    BEGIN
      with AccSchedLine2 do
        case "Totaling Type" of
          "Totaling Type"::"Posting Accounts":
            begin
              GLAcc.SETFILTER("No.",Totaling);
              GLAcc.SETRANGE("Account Type",GLAcc."Account Type"::Posting);
            end;
          "Totaling Type"::"Total Accounts":
            begin
              GLAcc.SETFILTER("No.",Totaling);
              GLAcc.SETFILTER("Account Type",'<>%1',GLAcc."Account Type"::Posting);
            end;
        end;
    END;

    [External]
    PROCEDURE SetCFAccRowFilter@817(VAR CFAccount@1000 : Record "Cash Flow Account";VAR AccSchedLine2@1001 : Record "Acc. Schedule Line");
    BEGIN
      with AccSchedLine2 do begin
        COPYFILTER("Cash Flow Forecast Filter",CFAccount."Cash Flow Forecast Filter");

        case "Totaling Type" of
          "Totaling Type"::"Cash Flow Entry Accounts":
            begin
              CFAccount.SETFILTER("No.",Totaling);
              CFAccount.SETRANGE("Account Type",CFAccount."Account Type"::Entry);
            end;
          "Totaling Type"::"Cash Flow Total Accounts":
            begin
              CFAccount.SETFILTER("No.",Totaling);
              CFAccount.SETFILTER("Account Type",'<>%1',CFAccount."Account Type"::Entry);
            end;
        end;
      end;
    END;

    [External]
    PROCEDURE SetGLAccColumnFilters@20(VAR GLAcc@1000 : Record "G/L Account";AccSchedLine2@1005 : Record "Acc. Schedule Line";VAR ColumnLayout@1001 : Record "Column Layout");
    VAR
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      FiscalStartDate2@1004 : Date;
    BEGIN
      with ColumnLayout do begin
        CalcColumnDates("Comparison Date Formula","Comparison Period Formula",FromDate,ToDate,FiscalStartDate2);
        case "Column Type" of
          "Column Type"::"Net Change":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE("Date Filter",FromDate,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FromDate - 1)); // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,ToDate);
            end;
          "Column Type"::"Balance at Date":
            if AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Beginning Balance" then
              GLAcc.SETRANGE("Date Filter",0D) // Force a zero return
            else
              GLAcc.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            if AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Balance at Date" then
              GLAcc.SETRANGE("Date Filter",0D) // Force a zero return
            else
              GLAcc.SETRANGE(
                "Date Filter",0D,CLOSINGDATE(FromDate - 1));
          "Column Type"::"Year to Date":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE("Date Filter",FiscalStartDate2,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FiscalStartDate2 - 1)); // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,ToDate);
            end;
          "Column Type"::"Rest of Fiscal Year":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE(
                  "Date Filter",CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETRANGE("Date Filter",0D,ToDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            end;
          "Column Type"::"Entire Fiscal Year":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                GLAcc.SETRANGE(
                  "Date Filter",
                  FiscalStartDate2,
                  FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                GLAcc.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FiscalStartDate2 - 1)); // always includes closing date
              AccSchedLine2."Row Type"::"Balance at Date":
                GLAcc.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            end;
        end;
      end;
    END;

    [External]
    PROCEDURE SetCFAccColumnFilter@38(VAR CFAccount@1000 : Record "Cash Flow Account";AccSchedLine2@1005 : Record "Acc. Schedule Line";VAR ColumnLayout2@1001 : Record "Column Layout");
    VAR
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      FiscalStartDate2@1004 : Date;
    BEGIN
      with ColumnLayout2 do begin
        CalcColumnDates("Comparison Date Formula","Comparison Period Formula",FromDate,ToDate,FiscalStartDate2);
        case "Column Type" of
          "Column Type"::"Net Change":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE("Date Filter",FromDate,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FromDate - 1));
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,ToDate);
            end;
          "Column Type"::"Balance at Date":
            if AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Beginning Balance" then
              CFAccount.SETRANGE("Date Filter",0D) // Force a zero return
            else
              CFAccount.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            if AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Balance at Date" then
              CFAccount.SETRANGE("Date Filter",0D) // Force a zero return
            else
              CFAccount.SETRANGE(
                "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE("Date Filter",FiscalStartDate2,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETFILTER("Date Filter",'..%1',FiscalStartDate2 - 1);
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,ToDate);
            end;
          "Column Type"::"Rest of Fiscal Year":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE(
                  "Date Filter",
                  CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETRANGE("Date Filter",0D,ToDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            end;
          "Column Type"::"Entire Fiscal Year":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CFAccount.SETRANGE(
                  "Date Filter",
                  FiscalStartDate2,FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CFAccount.SETFILTER("Date Filter",'..%1',CLOSINGDATE(FiscalStartDate2 - 1));
              AccSchedLine2."Row Type"::"Balance at Date":
                CFAccount.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE EvaluateExpression@9(IsAccSchedLineExpression@1000 : Boolean;Expression@1001 : Text;AccSchedLine@1002 : Record "Acc. Schedule Line";ColumnLayout@1003 : Record "Column Layout";CalcAddCurr@1004 : Boolean) : Decimal;
    VAR
      AccSchedLine2@1018 : Record "Acc. Schedule Line";
      Result@1005 : Decimal;
      Parantheses@1006 : Integer;
      Operator@1007 : Char;
      LeftOperand@1008 : Text;
      RightOperand@1009 : Text;
      LeftResult@1010 : Decimal;
      RightResult@1011 : Decimal;
      i@1012 : Integer;
      IsExpression@1013 : Boolean;
      IsFilter@1014 : Boolean;
      Operators@1015 : Text[8];
      OperatorNo@1016 : Integer;
      AccSchedLineID@1017 : Integer;
    BEGIN
      Result := 0;

      CallLevel := CallLevel + 1;
      if CallLevel > 25 then
        ShowError(Text020,
          AccSchedLine,ColumnLayout);

      Expression := DELCHR(Expression,'<>',' ');
      if STRLEN(Expression) > 0 then begin
        Parantheses := 0;
        IsExpression := false;
        Operators := '+-*/^%';
        OperatorNo := 1;
        repeat
          i := STRLEN(Expression);
          repeat
            if Expression[i] = '(' then
              Parantheses := Parantheses + 1
            else
              if Expression[i] = ')' then
                Parantheses := Parantheses - 1;
            if (Parantheses = 0) and (Expression[i] = Operators[OperatorNo]) then
              IsExpression := true
            else
              i := i - 1;
          until IsExpression or (i <= 0);
          if not IsExpression then
            OperatorNo := OperatorNo + 1;
        until (OperatorNo > STRLEN(Operators)) or IsExpression;
        if IsExpression then begin
          if i > 1 then
            LeftOperand := COPYSTR(Expression,1,i - 1)
          else
            LeftOperand := '';
          if i < STRLEN(Expression) then
            RightOperand := COPYSTR(Expression,i + 1)
          else
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            EvaluateExpression(
              IsAccSchedLineExpression,LeftOperand,AccSchedLine,ColumnLayout,CalcAddCurr);
          if (RightOperand = '') and (Operator = '%') and not IsAccSchedLineExpression and
             (AccSchedLine."Totaling Type" <> AccSchedLine."Totaling Type"::"Set Base For Percent")
          then begin
            AccSchedLine2.COPY(AccSchedLine);
            AccSchedLine2."Line No." := GetBasePercentLine(AccSchedLine,ColumnLayout);
            AccSchedLine2.FIND;
            RightResult :=
              EvaluateExpression(
                IsAccSchedLineExpression,LeftOperand,AccSchedLine2,ColumnLayout,CalcAddCurr);
          end else
            RightResult :=
              EvaluateExpression(
                IsAccSchedLineExpression,RightOperand,AccSchedLine,ColumnLayout,CalcAddCurr);
          case Operator of
            '^':
              Result := POWER(LeftResult,RightResult);
            '%':
              if RightResult = 0 then begin
                Result := 0;
                DivisionError := true;
              end else
                Result := 100 * LeftResult / RightResult;
            '*':
              Result := LeftResult * RightResult;
            '/':
              if RightResult = 0 then begin
                Result := 0;
                DivisionError := true;
              end else
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          end;
        end else
          if (Expression[1] = '(') and (Expression[STRLEN(Expression)] = ')') then
            Result :=
              EvaluateExpression(
                IsAccSchedLineExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                AccSchedLine,ColumnLayout,CalcAddCurr)
          else begin
            IsFilter :=
              (STRPOS(Expression,'..') +
               STRPOS(Expression,'|') +
               STRPOS(Expression,'<') +
               STRPOS(Expression,'>') +
               STRPOS(Expression,'&') +
               STRPOS(Expression,'=') > 0);
            if (STRLEN(Expression) > 10) and (not IsFilter) then
              EVALUATE(Result,Expression)
            else
              if IsAccSchedLineExpression then begin
                AccSchedLine.SETRANGE("Schedule Name",AccSchedLine."Schedule Name");
                AccSchedLine.SETFILTER("Row No.",Expression);
                AccSchedLineID := AccSchedLine."Line No.";
                if AccSchedLine.FIND('-') then
                  repeat
                    if AccSchedLine."Line No." <> AccSchedLineID then
                      Result := Result + CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr);
                  until AccSchedLine.NEXT = 0
                else
                  if IsFilter or (not EVALUATE(Result,Expression)) then
                    ShowError(Text012,AccSchedLine,ColumnLayout);
              end else begin
                ColumnLayout.SETRANGE("Column Layout Name",ColumnLayout."Column Layout Name");
                ColumnLayout.SETFILTER("Column No.",Expression);
                AccSchedLineID := ColumnLayout."Line No.";
                if ColumnLayout.FIND('-') then
                  repeat
                    if ColumnLayout."Line No." <> AccSchedLineID then
                      Result := Result + CalcCellValue(AccSchedLine,ColumnLayout,CalcAddCurr);
                  until ColumnLayout.NEXT = 0
                else
                  if IsFilter or (not EVALUATE(Result,Expression)) then
                    ShowError(Text013,AccSchedLine,ColumnLayout);
              end;
          end;
      end;
      CallLevel := CallLevel - 1;
      exit(Result);
    END;

    [External]
    PROCEDURE FormatCellAsText@24(VAR ColumnLayout2@1000 : Record "Column Layout";Value@1001 : Decimal;CalcAddCurr@1002 : Boolean) : Text[30];
    VAR
      ValueAsText@1003 : Text[30];
    BEGIN
      ValueAsText := MatrixMgt.FormatValue(Value,ColumnLayout2."Rounding Factor",CalcAddCurr);

      if (ValueAsText <> '') and
         (ColumnLayout2."Column Type" = ColumnLayout2."Column Type"::Formula) and
         (STRPOS(ColumnLayout2.Formula,'%') > 1)
      then
        ValueAsText := ValueAsText + '%';

      exit(ValueAsText);
    END;

    [External]
    PROCEDURE GetDivisionError@18() : Boolean;
    BEGIN
      exit(DivisionError);
    END;

    [External]
    PROCEDURE GetPeriodError@31() : Boolean;
    BEGIN
      exit(PeriodError);
    END;

    LOCAL PROCEDURE ShowError@19(MessageLine@1000 : Text[100];VAR AccSchedLine@1001 : Record "Acc. Schedule Line";VAR ColumnLayout@1002 : Record "Column Layout");
    BEGIN
      AccSchedLine.SETRANGE("Schedule Name",AccSchedLine."Schedule Name");
      AccSchedLine.SETRANGE("Line No.",CallingAccSchedLineID);
      if AccSchedLine.FINDFIRST then;
      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayout."Column Layout Name");
      ColumnLayout.SETRANGE("Line No.",CallingColumnLayoutID);
      if ColumnLayout.FINDFIRST then;
      ERROR(
        STRSUBSTNO(
          Text016,
          MessageLine,
          Text017,
          STRSUBSTNO(Text018,AccSchedLine."Row No.",AccSchedLine."Line No.",AccSchedLine.Totaling),
          STRSUBSTNO(Text019,ColumnLayout."Column No.",ColumnLayout."Line No.",ColumnLayout.Formula)));
    END;

    [External]
    PROCEDURE InsertGLAccounts@12(VAR AccSchedLine@1000 : Record "Acc. Schedule Line");
    VAR
      GLAcc@1001 : Record "G/L Account";
      GLAccList@1002 : Page "G/L Account List";
      AccCounter@1003 : Integer;
      AccSchedLineNo@1004 : Integer;
    BEGIN
      GLAccList.LOOKUPMODE(true);
      if GLAccList.RUNMODAL = ACTION::LookupOK then begin
        GLAccList.SetSelection(GLAcc);
        AccCounter := GLAcc.COUNT;
        if AccCounter > 0 then begin
          AccSchedLineNo := AccSchedLine."Line No.";
          MoveAccSchedLines(AccSchedLine,AccCounter);
          if GLAcc.FINDSET then
            repeat
              AccSchedLine.INIT;
              AccSchedLineNo := AccSchedLineNo + 10000;
              AccSchedLine."Line No." := AccSchedLineNo;
              AccSchedLine.Description := GLAcc.Name;
              AccSchedLine.Indentation := GLAcc.Indentation;
              AccSchedLine.Bold := GLAcc."Account Type" <> GLAcc."Account Type"::Posting;
              if GLAcc."Account Type" in
                 [GLAcc."Account Type"::Posting,GLAcc."Account Type"::Total,GLAcc."Account Type"::"End-Total"]
              then begin
                AccSchedLine.Totaling := GLAcc."No.";
                AccSchedLine."Row No." := COPYSTR(GLAcc."No.",1,MAXSTRLEN(AccSchedLine."Row No."));
              end;
              if GLAcc."Account Type" in
                 [GLAcc."Account Type"::Total,GLAcc."Account Type"::"End-Total"]
              then
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Total Accounts"
              else
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Posting Accounts";
              AccSchedLine.INSERT;
            until GLAcc.NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE InsertCFAccounts@47(VAR AccSchedLine@1000 : Record "Acc. Schedule Line");
    VAR
      CashFlowAcc@1001 : Record "Cash Flow Account";
      CashFlowAccList@1002 : Page "Cash Flow Account List";
      AccCounter@1003 : Integer;
      AccSchedLineNo@1004 : Integer;
    BEGIN
      CashFlowAccList.LOOKUPMODE(true);
      if CashFlowAccList.RUNMODAL = ACTION::LookupOK then begin
        CashFlowAccList.SetSelection(CashFlowAcc);
        AccCounter := CashFlowAcc.COUNT;
        if AccCounter > 0 then begin
          AccSchedLineNo := AccSchedLine."Line No.";
          MoveAccSchedLines(AccSchedLine,AccCounter);
          if CashFlowAcc.FINDSET then
            repeat
              AccSchedLine.INIT;
              AccSchedLineNo := AccSchedLineNo + 10000;
              AccSchedLine."Line No." := AccSchedLineNo;
              AccSchedLine.Description := CashFlowAcc.Name;
              if CashFlowAcc."Account Type" in
                 [CashFlowAcc."Account Type"::Entry,CashFlowAcc."Account Type"::Total,CashFlowAcc."Account Type"::"End-Total"]
              then begin
                AccSchedLine.Totaling := CashFlowAcc."No.";
                AccSchedLine."Row No." := COPYSTR(CashFlowAcc."No.",1,MAXSTRLEN(AccSchedLine."Row No."));
              end;
              if CashFlowAcc."Account Type" in
                 [CashFlowAcc."Account Type"::Total,CashFlowAcc."Account Type"::"End-Total"]
              then
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cash Flow Total Accounts"
              else
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cash Flow Entry Accounts";
              AccSchedLine.INSERT;
            until CashFlowAcc.NEXT = 0;
        end;
      end;
    END;

    [External]
    PROCEDURE InsertCostTypes@43(VAR AccSchedLine@1000 : Record "Acc. Schedule Line");
    VAR
      CostType@1001 : Record "Cost Type";
      CostTypeList@1002 : Page "Cost Type List";
      AccCounter@1003 : Integer;
      AccSchedLineNo@1004 : Integer;
    BEGIN
      CostTypeList.LOOKUPMODE(true);
      if CostTypeList.RUNMODAL = ACTION::LookupOK then begin
        CostTypeList.SetSelection(CostType);
        AccCounter := CostType.COUNT;
        if AccCounter > 0 then begin
          AccSchedLineNo := AccSchedLine."Line No.";
          MoveAccSchedLines(AccSchedLine,AccCounter);
          if CostType.FINDSET then
            repeat
              AccSchedLine.INIT;
              AccSchedLineNo := AccSchedLineNo + 10000;
              AccSchedLine."Line No." := AccSchedLineNo;
              AccSchedLine.Description := CostType.Name;
              if CostType.Type in
                 [CostType.Type::"Cost Type",CostType.Type::Total,CostType.Type::"End-Total"]
              then begin
                AccSchedLine.Totaling := CostType."No.";
                AccSchedLine."Row No." := COPYSTR(CostType."No.",1,MAXSTRLEN(AccSchedLine."Row No."));
              end;
              if CostType.Type in
                 [CostType.Type::Total,CostType.Type::"End-Total"]
              then
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cost Type Total"
              else
                AccSchedLine."Totaling Type" := AccSchedLine."Totaling Type"::"Cost Type";
              AccSchedLine.INSERT;
            until CostType.NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE ExchangeAmtAddCurrToLCY@23(AmountLCY@1000 : Decimal) : Decimal;
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
      end;

      exit(
        CurrExchRate.ExchangeAmtLCYToFCY(
          WORKDATE,GLSetup."Additional Reporting Currency",AmountLCY,
          CurrExchRate.ExchangeRate(WORKDATE,GLSetup."Additional Reporting Currency")));
    END;

    [External]
    PROCEDURE SetAccSchedName@22(VAR NewAccSchedName@1000 : Record "Acc. Schedule Name");
    BEGIN
      AccSchedName := NewAccSchedName;
    END;

    [External]
    PROCEDURE GetDimTotalingFilter@32(DimNo@1001 : Integer;DimTotaling@1000 : Text[250]) : Text[1024];
    VAR
      DimTotaling2@1002 : Text[250];
      DimTotalPart@1005 : Text[250];
      ResultFilter@1003 : Text[1024];
      ResultFilter2@1006 : Text[1024];
      i@1004 : Integer;
    BEGIN
      if DimTotaling = '' then
        exit(DimTotaling);
      DimTotaling2 := DimTotaling;
      repeat
        i := STRPOS(DimTotaling2,'|');
        if i > 0 then begin
          DimTotalPart := COPYSTR(DimTotaling2,1,i - 1);
          if i < STRLEN(DimTotaling2) then
            DimTotaling2 := COPYSTR(DimTotaling2,i + 1)
          else
            DimTotaling2 := '';
        end else
          DimTotalPart := DimTotaling2;
        ResultFilter2 := ConvDimTotalingFilter(DimNo,DimTotalPart);
        if ResultFilter2 <> '' then
          if STRLEN(ResultFilter) + STRLEN(ResultFilter2) + 1 > MAXSTRLEN(ResultFilter) then
            ERROR(Text021,DimTotaling);

        if ResultFilter <> '' then
          ResultFilter := ResultFilter + '|';
        ResultFilter := COPYSTR(ResultFilter + ResultFilter2,1,MAXSTRLEN(ResultFilter));
      until i <= 0;
      exit(ResultFilter);
    END;

    LOCAL PROCEDURE ConvDimTotalingFilter@28(DimNo@1000 : Integer;DimTotaling@1001 : Text[250]) : Text[1024];
    VAR
      DimVal@1003 : Record "Dimension Value";
      CostAccSetup@1006 : Record "Cost Accounting Setup";
      DimCode@1002 : Code[20];
      ResultFilter@1004 : Text[1024];
      DimValTotaling@1005 : Boolean;
    BEGIN
      if CostAccSetup.GET then;
      if DimTotaling = '' then
        exit(DimTotaling);

      CheckAnalysisView(AccSchedName.Name,'',false);

      case DimNo of
        1:
          DimCode := AnalysisView."Dimension 1 Code";
        2:
          DimCode := AnalysisView."Dimension 2 Code";
        3:
          DimCode := AnalysisView."Dimension 3 Code";
        4:
          DimCode := AnalysisView."Dimension 4 Code";
        5:
          DimCode := CostAccSetup."Cost Center Dimension";
        6:
          DimCode := CostAccSetup."Cost Object Dimension";
      end;
      if DimCode = '' then
        exit(DimTotaling);

      DimVal.SETRANGE("Dimension Code",DimCode);
      DimVal.SETFILTER(Code,DimTotaling);
      if DimVal.FIND('-') then
        repeat
          DimValTotaling :=
            DimVal."Dimension Value Type" in
            [DimVal."Dimension Value Type"::Total,DimVal."Dimension Value Type"::"End-Total"];
          if DimValTotaling and (DimVal.Totaling <> '') then begin
            if STRLEN(ResultFilter) + STRLEN(DimVal.Totaling) + 1 > MAXSTRLEN(ResultFilter) then
              ERROR(Text021,DimTotaling);
            if ResultFilter <> '' then
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + DimVal.Totaling;
          end;
        until (DimVal.NEXT = 0) or not DimValTotaling;

      if DimValTotaling then
        exit(ResultFilter);

      exit(DimTotaling);
    END;

    LOCAL PROCEDURE CalcCostType@25(VAR CostType@1000 : Record "Cost Type";VAR AccSchedLine@1001 : Record "Acc. Schedule Line";VAR ColumnLayout@1002 : Record "Column Layout";CalcAddCurr@1003 : Boolean) ColValue@1004 : Decimal;
    VAR
      CostEntry@1005 : Record "Cost Entry";
      CostBudgEntry@1006 : Record "Cost Budget Entry";
      AmountType@1008 : '"Net Amount","Debit Amount","Credit Amount"';
      UseDimFilter@1007 : Boolean;
      TestBalance@1009 : Boolean;
      Balance@1010 : Decimal;
    BEGIN
      ColValue := 0;
      if AccSchedName.Name <> AccSchedLine."Schedule Name" then
        AccSchedName.GET(AccSchedLine."Schedule Name");

      if ConflictAmountType(AccSchedLine,ColumnLayout."Amount Type",AmountType) then
        exit(0);

      TestBalance :=
        AccSchedLine.Show in [AccSchedLine.Show::"When Positive Balance",AccSchedLine.Show::"When Negative Balance"];

      if ColumnLayout."Column Type" <> ColumnLayout."Column Type"::Formula then begin
        UseDimFilter := HasDimFilter(AccSchedLine,ColumnLayout) or HasCostDimFilter(AccSchedLine);
        if ColumnLayout."Ledger Entry Type" = ColumnLayout."Ledger Entry Type"::Entries then begin
          with CostEntry do begin
            if UseDimFilter then
              SETCURRENTKEY("Cost Type No.","Cost Center Code","Cost Object Code")
            else
              SETCURRENTKEY("Cost Type No.","Posting Date");
            if CostType.Totaling = '' then
              SETRANGE("Cost Type No.",CostType."No.")
            else
              SETFILTER("Cost Type No.",CostType.Totaling);
            CostType.COPYFILTER("Date Filter","Posting Date");
            AccSchedLine.COPYFILTER("Cost Center Filter","Cost Center Code");
            AccSchedLine.COPYFILTER("Cost Object Filter","Cost Object Code");
            FILTERGROUP(2);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,AccSchedLine."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,AccSchedLine."Cost Object Totaling"));
            FILTERGROUP(8);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,ColumnLayout."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,ColumnLayout."Cost Object Totaling"));
            FILTERGROUP(0);
          end;
          case AmountType of
            AmountType::"Net Amount":
              begin
                if CalcAddCurr then begin
                  CostEntry.CALCSUMS("Additional-Currency Amount");
                  ColValue := CostEntry."Additional-Currency Amount";
                end else begin
                  CostEntry.CALCSUMS(Amount);
                  ColValue := CostEntry.Amount;
                end;
                Balance := ColValue;
              end;
            AmountType::"Debit Amount":
              begin
                if CalcAddCurr then begin
                  CostEntry.CALCSUMS("Add.-Currency Debit Amount","Additional-Currency Amount");
                  if TestBalance then
                    Balance := CostEntry."Additional-Currency Amount";
                  ColValue := CostEntry."Add.-Currency Debit Amount";
                end else begin
                  if TestBalance then begin
                    CostEntry.CALCSUMS("Debit Amount",Amount);
                    Balance := CostEntry.Amount;
                  end else
                    CostEntry.CALCSUMS("Debit Amount");
                  ColValue := CostEntry."Debit Amount";
                end;
              end;
            AmountType::"Credit Amount":
              begin
                if CalcAddCurr then begin
                  CostEntry.CALCSUMS("Add.-Currency Credit Amount","Additional-Currency Amount");
                  if TestBalance then
                    Balance := CostEntry."Additional-Currency Amount";
                  ColValue := CostEntry."Add.-Currency Credit Amount";
                end else begin
                  if TestBalance then begin
                    CostEntry.CALCSUMS("Credit Amount",Amount);
                    Balance := CostEntry.Amount;
                  end else
                    CostEntry.CALCSUMS("Credit Amount");
                  ColValue := CostEntry."Credit Amount";
                end;
              end;
          end;
        end;

        if ColumnLayout."Ledger Entry Type" = ColumnLayout."Ledger Entry Type"::"Budget Entries" then begin
          with CostBudgEntry do begin
            SETCURRENTKEY("Budget Name","Cost Type No.","Cost Center Code","Cost Object Code",Date);

            if CostType.Totaling = '' then
              SETRANGE("Cost Type No.",CostType."No.")
            else
              SETFILTER("Cost Type No.",CostType.Totaling);

            CostType.COPYFILTER("Date Filter",Date);
            AccSchedLine.COPYFILTER("Cost Budget Filter","Budget Name");
            AccSchedLine.COPYFILTER("Cost Center Filter","Cost Center Code");
            AccSchedLine.COPYFILTER("Cost Object Filter","Cost Object Code");

            FILTERGROUP(2);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,AccSchedLine."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,AccSchedLine."Cost Object Totaling"));
            FILTERGROUP(8);
            SETFILTER("Cost Center Code",GetDimTotalingFilter(5,ColumnLayout."Cost Center Totaling"));
            SETFILTER("Cost Object Code",GetDimTotalingFilter(6,ColumnLayout."Cost Object Totaling"));
            FILTERGROUP(0);
          end;

          CostBudgEntry.CALCSUMS(Amount);

          case AmountType of
            AmountType::"Net Amount":
              ColValue := CostBudgEntry.Amount;
            AmountType::"Debit Amount":
              if CostBudgEntry.Amount > 0 then
                ColValue := CostBudgEntry.Amount;
            AmountType::"Credit Amount":
              if CostBudgEntry.Amount < 0 then
                ColValue := CostBudgEntry.Amount;
          end;
          Balance := CostBudgEntry.Amount;
          if CalcAddCurr then
            ColValue := CalcLCYToACY(ColValue);
        end;

        if TestBalance then begin
          if AccSchedLine.Show = AccSchedLine.Show::"When Positive Balance" then
            if Balance < 0 then
              exit(0);
          if AccSchedLine.Show = AccSchedLine.Show::"When Negative Balance" then
            if Balance > 0 then
              exit(0);
        end;
      end;
      exit(ColValue);
    END;

    [External]
    PROCEDURE SetCostTypeRowFilters@37(VAR CostType@1000 : Record "Cost Type";VAR AccSchedLine2@1001 : Record "Acc. Schedule Line";VAR ColumnLayout@1002 : Record "Column Layout");
    BEGIN
      with AccSchedLine2 do begin
        case "Totaling Type" of
          "Totaling Type"::"Cost Type":
            begin
              CostType.SETFILTER("No.",Totaling);
              CostType.SETRANGE(Type,CostType.Type::"Cost Type");
            end;
          "Totaling Type"::"Cost Type Total":
            begin
              CostType.SETFILTER("No.",Totaling);
              CostType.SETFILTER(Type,'<>%1',CostType.Type::"Cost Type");
            end;
        end;

        CostType.SETFILTER("Cost Center Filter",GETFILTER("Cost Center Filter"));
        CostType.SETFILTER("Cost Object Filter",GETFILTER("Cost Object Filter"));
        if ColumnLayout."Ledger Entry Type" = ColumnLayout."Ledger Entry Type"::"Budget Entries" then
          CostType.SETFILTER("Budget Filter",GETFILTER("Cost Budget Filter"));
      end;
    END;

    [External]
    PROCEDURE SetCostTypeColumnFilters@838(VAR CostType@1000 : Record "Cost Type";AccSchedLine2@1001 : Record "Acc. Schedule Line";VAR ColumnLayout@1002 : Record "Column Layout");
    VAR
      FromDate@1003 : Date;
      ToDate@1004 : Date;
      FiscalStartDate2@1005 : Date;
    BEGIN
      with ColumnLayout do begin
        CalcColumnDates("Comparison Date Formula","Comparison Period Formula",FromDate,ToDate,FiscalStartDate2);
        case "Column Type" of
          "Column Type"::"Net Change":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE("Date Filter",FromDate,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETFILTER("Date Filter",'<%1',FromDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,ToDate);
            end;
          "Column Type"::"Balance at Date":
            if AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Beginning Balance" then
              CostType.SETRANGE("Date Filter",0D) // Force a zero return
            else
              CostType.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            if AccSchedLine2."Row Type" = AccSchedLine2."Row Type"::"Balance at Date" then
              CostType.SETRANGE("Date Filter",0D) // Force a zero return
            else
              CostType.SETRANGE(
                "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE("Date Filter",FiscalStartDate2,ToDate);
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETFILTER("Date Filter",'<%1',FiscalStartDate2);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,ToDate);
            end;
          "Column Type"::"Rest of Fiscal Year":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE(
                  "Date Filter",CALCDATE('<+1D>',ToDate),FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETRANGE("Date Filter",0D,ToDate);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            end;
          "Column Type"::"Entire Fiscal Year":
            case AccSchedLine2."Row Type" of
              AccSchedLine2."Row Type"::"Net Change":
                CostType.SETRANGE(
                  "Date Filter",FiscalStartDate2,FindEndOfFiscalYear(FiscalStartDate2));
              AccSchedLine2."Row Type"::"Beginning Balance":
                CostType.SETFILTER("Date Filter",'<%1',FiscalStartDate2);
              AccSchedLine2."Row Type"::"Balance at Date":
                CostType.SETRANGE("Date Filter",0D,FindEndOfFiscalYear(ToDate));
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE HasDimFilter@42(VAR AccSchedLine@1001 : Record "Acc. Schedule Line";VAR ColumnLayout@1000 : Record "Column Layout") : Boolean;
    BEGIN
      exit((AccSchedLine."Dimension 1 Totaling" <> '') or
        (AccSchedLine."Dimension 2 Totaling" <> '') or
        (AccSchedLine."Dimension 3 Totaling" <> '') or
        (AccSchedLine."Dimension 4 Totaling" <> '') or
        (AccSchedLine.GETFILTER("Dimension 1 Filter") <> '') or
        (AccSchedLine.GETFILTER("Dimension 2 Filter") <> '') or
        (AccSchedLine.GETFILTER("Dimension 3 Filter") <> '') or
        (AccSchedLine.GETFILTER("Dimension 4 Filter") <> '') or
        (ColumnLayout."Dimension 1 Totaling" <> '') or
        (ColumnLayout."Dimension 2 Totaling" <> '') or
        (ColumnLayout."Dimension 3 Totaling" <> '') or
        (ColumnLayout."Dimension 4 Totaling" <> '') or
        (ColumnLayout."Cost Center Totaling" <> '') or
        (ColumnLayout."Cost Object Totaling" <> ''));
    END;

    LOCAL PROCEDURE HasCostDimFilter@40(VAR AccSchedLine@1001 : Record "Acc. Schedule Line") : Boolean;
    BEGIN
      exit((AccSchedLine."Cost Center Totaling" <> '') or
        (AccSchedLine."Cost Object Totaling" <> '') or
        (AccSchedLine.GETFILTER("Cost Center Filter") <> '') or
        (AccSchedLine.GETFILTER("Cost Object Filter") <> ''));
    END;

    [External]
    PROCEDURE CalcColumnDates@41(ComparisonDateFormula@1000 : DateFormula;ComparisonPeriodFormula@1006 : Code[20];VAR FromDate@1001 : Date;VAR ToDate@1002 : Date;VAR FiscalStartDate2@1005 : Date);
    BEGIN
      if (FORMAT(ComparisonDateFormula) <> '0') and (FORMAT(ComparisonDateFormula) <> '') then begin
        FromDate := CALCDATE(ComparisonDateFormula,StartDate);
        ToDate := CALCDATE(ComparisonDateFormula,EndDate);
        if (StartDate = CALCDATE('<-CM>',StartDate)) and
           (FromDate = CALCDATE('<-CM>',FromDate)) and
           (EndDate = CALCDATE('<CM>',EndDate))
        then
          ToDate := CALCDATE('<CM>',ToDate);
        FiscalStartDate2 := FindFiscalYear(ToDate);
      end else
        if ComparisonPeriodFormula <> '' then begin
          AccPeriodStartEnd(ComparisonPeriodFormula,StartDate,FromDate,ToDate);
          FiscalStartDate2 := FindFiscalYear(ToDate);
        end else begin
          FromDate := StartDate;
          ToDate := EndDate;
          FiscalStartDate2 := FiscalStartDate;
        end;
    END;

    LOCAL PROCEDURE MoveAccSchedLines@44(VAR AccSchedLine@1000 : Record "Acc. Schedule Line";Place@1001 : Integer);
    VAR
      AccSchedLineNo@1002 : Integer;
      I@1003 : Integer;
    BEGIN
      AccSchedLineNo := AccSchedLine."Line No.";
      AccSchedLine.SETRANGE("Schedule Name",AccSchedLine."Schedule Name");
      if AccSchedLine.FIND('+') then
        repeat
          I := AccSchedLine."Line No.";
          if I > AccSchedLineNo then begin
            AccSchedLine.DELETE;
            AccSchedLine."Line No." := I + 10000 * Place;
            AccSchedLine.INSERT;
          end;
        until (I <= AccSchedLineNo) or (AccSchedLine.NEXT(-1) = 0);
    END;

    [External]
    PROCEDURE SetStartDateEndDate@50(NewStartDate@1000 : Date;NewEndDate@1001 : Date);
    BEGIN
      StartDate := NewStartDate;
      EndDate := NewEndDate;
    END;

    LOCAL PROCEDURE ConflictAmountType@45(AccSchedLine@1000 : Record "Acc. Schedule Line";ColumnLayoutAmtType@1001 : '"Net Amount","Debit Amount","Credit Amount"';VAR AmountType@1002 : Option) : Boolean;
    BEGIN
      if (ColumnLayoutAmtType = AccSchedLine."Amount Type") or
         (AccSchedLine."Amount Type" = AccSchedLine."Amount Type"::"Net Amount")
      then
        AmountType := ColumnLayoutAmtType
      else
        if ColumnLayoutAmtType = ColumnLayoutAmtType::"Net Amount" then
          AmountType := AccSchedLine."Amount Type"
        else
          exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE DrillDown@52(TempColumnLayout@1001 : TEMPORARY Record "Column Layout";VAR AccScheduleLine@1000 : Record "Acc. Schedule Line";PeriodLength@1002 : Option);
    VAR
      AccScheduleOverview@1003 : Page "Acc. Schedule Overview";
      ErrorType@1004 : 'None,"Division by Zero","Period Error",Both';
    BEGIN
      with AccScheduleLine do begin
        if TempColumnLayout."Column Type" = TempColumnLayout."Column Type"::Formula then begin
          CalcFieldError(ErrorType,"Line No.",TempColumnLayout."Line No.");
          if ErrorType <> ErrorType::None then
            MESSAGE(STRSUBSTNO(ColumnFormulaErrorMsg,TempColumnLayout.Formula,FORMAT(ErrorType)))
          else
            MESSAGE(ColumnFormulaMsg,TempColumnLayout.Formula);
          exit;
        end;

        if "Totaling Type" in ["Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent"] then begin
          AccScheduleOverview.SetAccSchedName("Schedule Name");
          AccScheduleOverview.SETTABLEVIEW(AccScheduleLine);
          AccScheduleOverview.SETRECORD(AccScheduleLine);
          AccScheduleOverview.SetPeriodType(PeriodLength);
          AccScheduleOverview.RUN;
          exit;
        end;

        if Totaling = '' then
          exit;

        if "Totaling Type" in ["Totaling Type"::"Cash Flow Entry Accounts","Totaling Type"::"Cash Flow Total Accounts"] then
          DrillDownOnCFAccount(TempColumnLayout,AccScheduleLine)
        else
          DrillDownOnGLAccount(TempColumnLayout,AccScheduleLine);
      end;
    END;

    [External]
    PROCEDURE DrillDownFromOverviewPage@54(TempColumnLayout@1001 : TEMPORARY Record "Column Layout";VAR AccScheduleLine@1000 : Record "Acc. Schedule Line";PeriodLength@1002 : Option);
    BEGIN
      with AccScheduleLine do begin
        if "Totaling Type" in ["Totaling Type"::Formula,"Totaling Type"::"Set Base For Percent"] then
          MESSAGE(RowFormulaMsg,Totaling)
        else
          DrillDown(TempColumnLayout,AccScheduleLine,PeriodLength);
      end;
    END;

    LOCAL PROCEDURE DrillDownOnGLAccount@51(TempColumnLayout@1007 : TEMPORARY Record "Column Layout";VAR AccScheduleLine@1003 : Record "Acc. Schedule Line");
    VAR
      GLAcc@1006 : Record "G/L Account";
      GLAccAnalysisView@1005 : Record "G/L Account (Analysis View)";
      CostType@1004 : Record "Cost Type";
      ChartOfAccsAnalysisView@1002 : Page "Chart of Accs. (Analysis View)";
    BEGIN
      with AccScheduleLine do
        if "Totaling Type" in ["Totaling Type"::"Cost Type","Totaling Type"::"Cost Type Total"] then begin
          SetCostTypeRowFilters(CostType,AccScheduleLine,TempColumnLayout);
          SetCostTypeColumnFilters(CostType,AccScheduleLine,TempColumnLayout);
          COPYFILTER("Cost Center Filter",CostType."Cost Center Filter");
          COPYFILTER("Cost Object Filter",CostType."Cost Object Filter");
          COPYFILTER("Cost Budget Filter",CostType."Budget Filter");
          CostType.FILTERGROUP(2);
          CostType.SETFILTER("Cost Center Filter",GetDimTotalingFilter(1,"Cost Center Totaling"));
          CostType.SETFILTER("Cost Object Filter",GetDimTotalingFilter(1,"Cost Object Totaling"));
          CostType.FILTERGROUP(8);
          CostType.SETFILTER("Cost Center Filter",GetDimTotalingFilter(1,TempColumnLayout."Cost Center Totaling"));
          CostType.SETFILTER("Cost Object Filter",GetDimTotalingFilter(1,TempColumnLayout."Cost Object Totaling"));
          CostType.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Chart of Cost Types",CostType);
        end else begin
          COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
          COPYFILTER("G/L Budget Filter",GLAcc."Budget Filter");
          SetGLAccRowFilters(GLAcc,AccScheduleLine);
          SetGLAccColumnFilters(GLAcc,AccScheduleLine,TempColumnLayout);
          AccSchedName.GET("Schedule Name");
          if AccSchedName."Analysis View Name" = '' then begin
            COPYFILTER("Dimension 1 Filter",GLAcc."Global Dimension 1 Filter");
            COPYFILTER("Dimension 2 Filter",GLAcc."Global Dimension 2 Filter");
            COPYFILTER("Business Unit Filter",GLAcc."Business Unit Filter");
            GLAcc.FILTERGROUP(2);
            GLAcc.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,"Dimension 1 Totaling"));
            GLAcc.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,"Dimension 2 Totaling"));
            GLAcc.FILTERGROUP(8);
            GLAcc.SETFILTER("Business Unit Filter",TempColumnLayout."Business Unit Totaling");
            GLAcc.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"));
            GLAcc.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"));
            GLAcc.FILTERGROUP(0);
            PAGE.RUN(PAGE::"Chart of Accounts (G/L)",GLAcc)
          end else begin
            GLAcc.COPYFILTER("Date Filter",GLAccAnalysisView."Date Filter");
            GLAcc.COPYFILTER("Budget Filter",GLAccAnalysisView."Budget Filter");
            GLAcc.COPYFILTER("Business Unit Filter",GLAccAnalysisView."Business Unit Filter");
            GLAccAnalysisView.SETRANGE("Analysis View Filter",AccSchedName."Analysis View Name");
            GLAccAnalysisView.CopyDimFilters(AccScheduleLine);
            GLAccAnalysisView.FILTERGROUP(2);
            GLAccAnalysisView.SetDimFilters(
              GetDimTotalingFilter(1,"Dimension 1 Totaling"),GetDimTotalingFilter(2,"Dimension 2 Totaling"),
              GetDimTotalingFilter(3,"Dimension 3 Totaling"),GetDimTotalingFilter(4,"Dimension 4 Totaling"));
            GLAccAnalysisView.FILTERGROUP(8);
            GLAccAnalysisView.SetDimFilters(
              GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"),
              GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"),
              GetDimTotalingFilter(3,TempColumnLayout."Dimension 3 Totaling"),
              GetDimTotalingFilter(4,TempColumnLayout."Dimension 4 Totaling"));
            GLAccAnalysisView.SETFILTER("Business Unit Filter",TempColumnLayout."Business Unit Totaling");
            GLAccAnalysisView.FILTERGROUP(0);
            CLEAR(ChartOfAccsAnalysisView);
            ChartOfAccsAnalysisView.InsertTempGLAccAnalysisViews(GLAcc);
            ChartOfAccsAnalysisView.SETTABLEVIEW(GLAccAnalysisView);
            ChartOfAccsAnalysisView.RUN;
          end;
        end;
    END;

    LOCAL PROCEDURE DrillDownOnCFAccount@49(TempColumnLayout@1001 : TEMPORARY Record "Column Layout";VAR AccScheduleLine@1000 : Record "Acc. Schedule Line");
    VAR
      CFAccount@1004 : Record "Cash Flow Account";
      GLAccAnalysisView@1003 : Record "G/L Account (Analysis View)";
      ChartOfAccsAnalysisView@1002 : Page "Chart of Accs. (Analysis View)";
    BEGIN
      with AccScheduleLine do begin
        COPYFILTER("Cash Flow Forecast Filter",CFAccount."Cash Flow Forecast Filter");

        SetCFAccRowFilter(CFAccount,AccScheduleLine);
        SetCFAccColumnFilter(CFAccount,AccScheduleLine,TempColumnLayout);
        AccSchedName.GET("Schedule Name");
        if AccSchedName."Analysis View Name" = '' then begin
          COPYFILTER("Dimension 1 Filter",CFAccount."Global Dimension 1 Filter");
          COPYFILTER("Dimension 2 Filter",CFAccount."Global Dimension 2 Filter");
          CFAccount.FILTERGROUP(2);
          CFAccount.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,"Dimension 1 Totaling"));
          CFAccount.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,"Dimension 2 Totaling"));
          CFAccount.FILTERGROUP(8);
          CFAccount.SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"));
          CFAccount.SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"));
          CFAccount.FILTERGROUP(0);
          PAGE.RUN(PAGE::"Chart of Cash Flow Accounts",CFAccount)
        end else begin
          CFAccount.COPYFILTER("Date Filter",GLAccAnalysisView."Date Filter");
          CFAccount.COPYFILTER("Cash Flow Forecast Filter",GLAccAnalysisView."Cash Flow Forecast Filter");
          GLAccAnalysisView.SETRANGE("Analysis View Filter",AccSchedName."Analysis View Name");
          GLAccAnalysisView.CopyDimFilters(AccScheduleLine);
          GLAccAnalysisView.FILTERGROUP(2);
          GLAccAnalysisView.SetDimFilters(
            GetDimTotalingFilter(1,"Dimension 1 Totaling"),
            GetDimTotalingFilter(2,"Dimension 2 Totaling"),
            GetDimTotalingFilter(3,"Dimension 3 Totaling"),
            GetDimTotalingFilter(4,"Dimension 4 Totaling"));
          GLAccAnalysisView.FILTERGROUP(8);
          GLAccAnalysisView.SetDimFilters(
            GetDimTotalingFilter(1,TempColumnLayout."Dimension 1 Totaling"),
            GetDimTotalingFilter(2,TempColumnLayout."Dimension 2 Totaling"),
            GetDimTotalingFilter(3,TempColumnLayout."Dimension 3 Totaling"),
            GetDimTotalingFilter(4,TempColumnLayout."Dimension 4 Totaling"));
          GLAccAnalysisView.FILTERGROUP(0);
          CLEAR(ChartOfAccsAnalysisView);
          ChartOfAccsAnalysisView.InsertTempCFAccountAnalysisVie(CFAccount);
          ChartOfAccsAnalysisView.SETTABLEVIEW(GLAccAnalysisView);
          ChartOfAccsAnalysisView.RUN;
        end;
      end;
    END;

    [Internal]
    PROCEDURE FindPeriod@48(VAR AccScheduleLine@1004 : Record "Acc. Schedule Line";SearchText@1003 : Text[3];PeriodType@1000 : 'Day,Week,Month,Quarter,Year,"Accounting Period"');
    VAR
      Calendar@1002 : Record Date;
      PeriodFormMgt@1001 : Codeunit PeriodFormManagement;
    BEGIN
      with AccScheduleLine do begin
        if GETFILTER("Date Filter") <> '' then begin
          Calendar.SETFILTER("Period Start",GETFILTER("Date Filter"));
          if not PeriodFormMgt.FindDate('+',Calendar,PeriodType) then
            PeriodFormMgt.FindDate('+',Calendar,PeriodType::Day);
          Calendar.SETRANGE("Period Start");
        end;
        PeriodFormMgt.FindDate(SearchText,Calendar,PeriodType);
        SETRANGE("Date Filter",Calendar."Period Start",Calendar."Period End");
        if GETRANGEMIN("Date Filter") = GETRANGEMAX("Date Filter") then
          SETRANGE("Date Filter",GETRANGEMIN("Date Filter"));
      end;
    END;

    [External]
    PROCEDURE CalcFieldError@53(VAR ErrorType@1002 : 'None,"Division by Zero","Period Error",Both';RowNo@1000 : Integer;ColumnNo@1001 : Integer);
    BEGIN
      AccSchedCellValue.SETRANGE("Row No.",RowNo);
      AccSchedCellValue.SETRANGE("Column No.",ColumnNo);
      ErrorType := ErrorType::None;
      if AccSchedCellValue.FINDFIRST then
        case true of
          AccSchedCellValue."Has Error":
            ErrorType := ErrorType::"Division by Zero";
          AccSchedCellValue."Period Error":
            ErrorType := ErrorType::"Period Error";
          AccSchedCellValue."Has Error" and AccSchedCellValue."Period Error":
            ErrorType := ErrorType::Both;
        end;

      AccSchedCellValue.SETRANGE("Row No.");
      AccSchedCellValue.SETRANGE("Column No.");
    END;

    [External]
    PROCEDURE ForceRecalculate@55(NewRecalculate@1000 : Boolean);
    BEGIN
      Recalculate := NewRecalculate;
    END;

    LOCAL PROCEDURE CalcLCYToACY@56(ColValue@1000 : Decimal) : Decimal;
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
        if GLSetup."Additional Reporting Currency" <> '' then
          AddRepCurrency.GET(GLSetup."Additional Reporting Currency");
      end;
      if GLSetup."Additional Reporting Currency" <> '' then
        exit(ROUND(ExchangeAmtAddCurrToLCY(ColValue),AddRepCurrency."Amount Rounding Precision"));
      exit(0);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCalcCellExit@58(VAR AccSchedLine@1002 : Record "Acc. Schedule Line";VAR ColumnLayout@1001 : Record "Column Layout";CalcAddCurr@1000 : Boolean;VAR Result@1003 : Decimal);
    BEGIN
    END;

    BEGIN
    END.
  }
}

