OBJECT Table 135 Acc. Sched. KPI Web Srv. Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Primary Key",'');
             END;

    OnDelete=VAR
               AccSchedKPIWebSrvLine@1000 : Record "Acc. Sched. KPI Web Srv. Line";
             BEGIN
               AccSchedKPIWebSrvLine.DELETEALL;
             END;

    CaptionML=ENU=Acc. Sched. KPI Web Srv. Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;OnValidate=BEGIN
                                                                TESTFIELD("Primary Key",'');
                                                              END;

                                                   CaptionML=ENU=Primary Key }
    { 2   ;   ;Forecasted Values Start;Option     ;CaptionML=ENU=Forecasted Values Start;
                                                   OptionCaptionML=ENU=After Latest Closed Period,After Current Date;
                                                   OptionString="After Latest Closed Period","After Current Date" }
    { 3   ;   ;G/L Budget Name     ;Code10        ;TableRelation="G/L Budget Name";
                                                   CaptionML=ENU=G/L Budget Name }
    { 4   ;   ;Period              ;Option        ;CaptionML=ENU=Period;
                                                   OptionCaptionML=ENU=Fiscal Year - Last Locked Period,Current Fiscal Year,Current Calendar Year,Current Calendar Quarter,Current Month,Today,Current Period,Last Locked Period,Current Fiscal Year + 3 Previous Years;
                                                   OptionString="Fiscal Year - Last Locked Period","Current Fiscal Year","Current Calendar Year","Current Calendar Quarter","Current Month",Today,"Current Period","Last Locked Period","Current Fiscal Year + 3 Previous Years" }
    { 5   ;   ;View By             ;Option        ;CaptionML=ENU=View By;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                                                   OptionString=Day,Week,Month,Quarter,Year,Period }
    { 6   ;   ;Web Service Name    ;Text240       ;OnValidate=VAR
                                                                i@1001 : Integer;
                                                                s@1000 : Text;
                                                              BEGIN
                                                                if "Web Service Name" = '' then
                                                                  exit;
                                                                s := LOWERCASE("Web Service Name");
                                                                for i := 1 to STRLEN(s) do
                                                                  if not (s[i] in ['a'..'z','0'..'9','-']) then
                                                                    ERROR(ServiceNameErr);
                                                              END;

                                                   CaptionML=ENU=Web Service Name }
    { 7   ;   ;Published           ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Web Service" WHERE ("Object Type"=CONST(Page),
                                                                                          "Object ID"=CONST(197),
                                                                                          Published=CONST(true)));
                                                   CaptionML=ENU=Published;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      ServiceNameErr@1000 : TextConst 'ENU=The service name may only contain letters A-Z, a-z, digits 0-9, and hyphens (-). No other characters are allowed.';

    [External]
    PROCEDURE GetPeriodLength@7(VAR NoOfLines@1003 : Integer;VAR StartDate@1004 : Date;VAR EndDate@1005 : Date);
    VAR
      AccountingPeriod@1002 : Record "Accounting Period";
      TotalNoOfDays@1000 : Integer;
      NoOfDaysPerLine@1001 : Integer;
    BEGIN
      case Period of
        Period::"Fiscal Year - Last Locked Period":
          GetFiscalYear(GetLastClosedAccDate,StartDate,EndDate);
        Period::"Current Fiscal Year":
          GetFiscalYear(WORKDATE,StartDate,EndDate);
        Period::"Current Period":
          begin
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',WORKDATE);
            AccountingPeriod.FINDLAST;
            StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETRANGE("Starting Date");
            if AccountingPeriod.FIND('>') then
              EndDate := AccountingPeriod."Starting Date" - 1
            else
              EndDate := CALCDATE('<CM>',StartDate);
          end;
        Period::"Last Locked Period":
          begin
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',GetLastClosedAccDate);
            AccountingPeriod.FINDLAST;
            StartDate := AccountingPeriod."Starting Date";
            AccountingPeriod.SETRANGE("Starting Date");
            if AccountingPeriod.FIND('>') then
              EndDate := AccountingPeriod."Starting Date" - 1
            else
              EndDate := CALCDATE('<CM>',StartDate);
          end;
        Period::"Current Calendar Year":
          begin
            StartDate := CALCDATE('<-CY>',WORKDATE);
            EndDate := CALCDATE('<CY>',StartDate);
          end;
        Period::"Current Calendar Quarter":
          begin
            StartDate := CALCDATE('<-CQ>',WORKDATE);
            EndDate := CALCDATE('<CQ>',StartDate);
          end;
        Period::"Current Month":
          begin
            StartDate := CALCDATE('<-CM>',WORKDATE);
            EndDate := CALCDATE('<CM>',StartDate);
          end;
        Period::Today:
          begin
            StartDate := WORKDATE;
            EndDate := WORKDATE;
          end;
        Period::"Current Fiscal Year + 3 Previous Years":
          begin
            GetFiscalYear(WORKDATE,StartDate,EndDate);
            StartDate := CALCDATE('<-3Y>',StartDate);
            AccountingPeriod.SETRANGE("New Fiscal Year",true);
            AccountingPeriod.FINDFIRST; // Get oldest accounting year
            if AccountingPeriod."Starting Date" > StartDate then
              StartDate := AccountingPeriod."Starting Date";
          end;
      end;
      TotalNoOfDays := EndDate - StartDate + 1;

      case "View By" of
        "View By"::Period:
          NoOfDaysPerLine := TotalNoOfDays;
        "View By"::Year:
          NoOfDaysPerLine := TotalNoOfDays;
        "View By"::Quarter:
          NoOfDaysPerLine := 90;
        "View By"::Month:
          NoOfDaysPerLine := 30;
        "View By"::Week:
          NoOfDaysPerLine := 7;
        "View By"::Day:
          NoOfDaysPerLine := 1;
      end;

      NoOfLines := TotalNoOfDays div NoOfDaysPerLine;
      if NoOfLines = 0 then
        NoOfLines := 1;
    END;

    LOCAL PROCEDURE GetFiscalYear@13(Date@1000 : Date;VAR StartDate@1001 : Date;VAR EndDate@1002 : Date);
    VAR
      AccountingPeriod@1003 : Record "Accounting Period";
    BEGIN
      StartDate := Date;
      AccountingPeriod.SETFILTER("Starting Date",'<=%1',Date);
      AccountingPeriod.SETRANGE("New Fiscal Year",true);
      if AccountingPeriod.FINDLAST then
        StartDate := AccountingPeriod."Starting Date";
      AccountingPeriod.SETRANGE("Starting Date");
      if AccountingPeriod.FIND('>') then
        EndDate := AccountingPeriod."Starting Date" - 1
      else
        EndDate := CALCDATE('<1Y-1D>',StartDate);
    END;

    [External]
    PROCEDURE CalcNextStartDate@4(OrgStartDate@1000 : Date;OffSet@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1004 : Record "Accounting Period";
      DateCalc@1003 : DateFormula;
      DateCalcStr@1002 : Text;
    BEGIN
      if OffSet = 0 then
        exit(OrgStartDate);

      case "View By" of
        "View By"::Period:
          begin
            AccountingPeriod."Starting Date" := OrgStartDate;
            AccountingPeriod.FIND('=><');
            AccountingPeriod.NEXT(OffSet);
            exit(AccountingPeriod."Starting Date")
          end;
        "View By"::Year:
          DateCalcStr := '<%1Y>';
        "View By"::Quarter:
          DateCalcStr := '<%1Q>';
        "View By"::Month:
          DateCalcStr := '<%1M>';
        "View By"::Week:
          DateCalcStr := '<%1W>';
        "View By"::Day:
          DateCalcStr := '<%1D>';
      end;

      EVALUATE(DateCalc,STRSUBSTNO(DateCalcStr,OffSet));
      exit(CALCDATE(DateCalc,OrgStartDate));
    END;

    [External]
    PROCEDURE GetLastClosedAccDate@1() : Date;
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
    BEGIN
      GLSetup.GET;
      if GLSetup."Allow Posting From" <> 0D then
        exit(GLSetup."Allow Posting From" - 1);
      exit(WORKDATE);
    END;

    [External]
    PROCEDURE GetLastBudgetChangedDate@2() : Date;
    VAR
      GLBudgetEntry@1001 : Record "G/L Budget Entry";
    BEGIN
      if "G/L Budget Name" <> '' then
        GLBudgetEntry.SETRANGE("Budget Name","G/L Budget Name");
      GLBudgetEntry.SETCURRENTKEY("Last Date Modified","Budget Name");
      if GLBudgetEntry.FINDLAST then
        exit(GLBudgetEntry."Last Date Modified");
      exit(0D);
    END;

    [Internal]
    PROCEDURE PublishWebService@8();
    VAR
      WebService@1000 : Record "Web Service";
      WebServiceManagement@1001 : Codeunit "Web Service Management";
    BEGIN
      TESTFIELD("Web Service Name");
      DeleteWebService;
      WebServiceManagement.CreateWebService(WebService."Object Type"::Page,
        PAGE::"Acc. Sched. KPI Web Service","Web Service Name",true);
      WebServiceManagement.CreateWebService(WebService."Object Type"::Query,
        QUERY::"Dimension Sets",'',true);
    END;

    [Internal]
    PROCEDURE DeleteWebService@12();
    VAR
      WebService@1000 : Record "Web Service";
    BEGIN
      WebService.SETRANGE("Object Type",WebService."Object Type"::Page);
      WebService.SETRANGE("Object ID",PAGE::"Acc. Sched. KPI Web Service");
      WebService.SETRANGE("Service Name","Web Service Name");
      if WebService.ISEMPTY then
        WebService.SETRANGE("Service Name");
      MarkAndReset(WebService);

      WebService.SETRANGE("Object Type",WebService."Object Type"::Page);
      WebService.SETRANGE("Object ID",PAGE::"Acc. Sched. KPI WS Dimensions");
      MarkAndReset(WebService);

      WebService.SETRANGE("Object Type",WebService."Object Type"::Query);
      WebService.SETRANGE("Object ID",QUERY::"Dimension Sets");
      MarkAndReset(WebService);

      WebService.MARKEDONLY(true);
      WebService.DELETEALL;
    END;

    LOCAL PROCEDURE MarkAndReset@25(VAR WebService@1000 : Record "Web Service");
    BEGIN
      if WebService.FINDSET then
        repeat
          WebService.MARK(true);
        until WebService.NEXT = 0;
      WebService.SETRANGE("Object Type");
      WebService.SETRANGE("Object ID");
      WebService.SETRANGE("Service Name");
    END;

    BEGIN
    END.
  }
}

