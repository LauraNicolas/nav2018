OBJECT Page 5915 Service Tasks
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Service Tasks;
    SaveValues=true;
    InsertAllowed=false;
    SourceTable="Service Item Line";
    SourceTableView=SORTING("Response Date","Response Time",Priority);
    PageType=Worksheet;
    OnOpenPage=BEGIN
                 if UserMgt.GetServiceFilter <> '' then begin
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetServiceFilter);
                   FILTERGROUP(0);
                 end;

                 SetAllFilters;

                 if ISEMPTY then begin
                   ServOrderFilter := '';
                   SetServOrderFilter;
                 end;
               END;

    OnAfterGetRecord=BEGIN
                       ServHeader.GET("Document Type","Document No.");

                       if not Cust.GET(ServHeader."Customer No.") then
                         CLEAR(Cust);

                       CALCFIELDS("No. of Active/Finished Allocs");
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 51      ;1   ;ActionGroup;
                      Name=&Service Tasks;
                      CaptionML=ENU=&Service Tasks;
                      Image=ServiceTasks }
      { 53      ;2   ;Action    ;
                      Name=&Show Document;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=&Show Document;
                      ToolTipML=ENU=Open the document that the information on the line comes from.;
                      ApplicationArea=#Service;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PageManagement@1000 : Codeunit "Page Management";
                               BEGIN
                                 if ServHeader.GET("Document Type","Document No.") then begin
                                   PageManagement.PageRunModal(ServHeader);

                                   if ServOrderFilter <> '' then begin
                                     ServItemLine.RESET;
                                     ServItemLine.COPYFILTERS(Rec);
                                     if ServItemLine.GETRANGEMIN("Document No.") = ServItemLine.GETRANGEMAX("Document No.") then
                                       if ServItemLine.ISEMPTY then begin
                                         ServOrderFilter := '';
                                         SetServOrderFilter;
                                       end
                                   end;
                                 end;
                               END;
                                }
      { 54      ;2   ;Action    ;
                      Name=&Item Worksheet;
                      CaptionML=ENU=&Item Worksheet;
                      ToolTipML=ENU=View or edit information about service items, such as repair status, fault comments and codes, and cost. In this window, you can update information on the items such as repair status and fault and resolution codes. You can also enter new service lines for resource hours, for the use of spare parts and for specific service costs.;
                      ApplicationArea=#Service;
                      RunObject=Page "Service Item Worksheet";
                      RunPageLink="Document Type"=FIELD("Document Type"),
                                  "Document No."=FIELD("Document No."),
                                  "Line No."=FIELD("Line No."),
                                  "Resource Filter"=FIELD("Resource Filter");
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ItemWorksheet;
                      PromotedCategory=Process }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 36      ;1   ;ActionGroup;
                      Name=&Print;
                      CaptionML=ENU=&Print;
                      Image=Print }
      { 37      ;2   ;Action    ;
                      Name=Service &Tasks;
                      Ellipsis=true;
                      CaptionML=ENU=Service &Tasks;
                      ApplicationArea=#Service;
                      Image=ServiceTasks;
                      OnAction=BEGIN
                                 CLEAR(ServItemLine);
                                 FILTERGROUP(2);
                                 ServItemLine.SETVIEW(GETVIEW);
                                 FILTERGROUP(0);
                                 ServItemLine.SETRANGE("No. of Allocations");
                                 ServItemLine.SETRANGE("No. of Active/Finished Allocs");

                                 REPORT.RUN(REPORT::"Service Tasks",true,true,ServItemLine);
                               END;
                                }
      { 48      ;2   ;Action    ;
                      Name=Service Item &Worksheet;
                      Ellipsis=true;
                      CaptionML=ENU=Service Item &Worksheet;
                      ApplicationArea=#Service;
                      Image=ServiceItemWorksheet;
                      OnAction=BEGIN
                                 CLEAR(ServItemLine);
                                 ServItemLine.SETRANGE("Document Type","Document Type");
                                 ServItemLine.SETRANGE("Document No.","Document No.");
                                 ServItemLine.SETRANGE("Line No.","Line No.");
                                 REPORT.RUN(REPORT::"Service Item Worksheet",true,true,ServItemLine);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 29  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 42  ;2   ;Field     ;
                Name=ResourceFilter;
                CaptionML=ENU=Resource Filter;
                ToolTipML=ENU=Specifies the filter that displays service tasks corresponding to service item lines that a certain resource is allocated to.;
                ApplicationArea=#Service;
                SourceExpr=ResourceFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Resource Filter");
                             FILTERGROUP(0);
                             SetResourceFilter;
                             if not TestFilter then begin
                               ResourceFilter := TempTextFilter;
                               SetResourceFilter;
                               ERROR(Text000,TABLECAPTION);
                             end;
                             ResourceFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           Res.RESET;
                           if PAGE.RUNMODAL(0,Res) = ACTION::LookupOK then begin
                             Text := Res."No.";
                             SetResourceFilter;
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 63  ;2   ;Field     ;
                Name=ResourceGroupFilter;
                CaptionML=ENU=Resource Group Filter;
                ToolTipML=ENU=Specifies the filter that displays service tasks corresponding to service item lines with the specified resource group allocated to each of them.;
                ApplicationArea=#Service;
                SourceExpr=ResourceGroupFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Resource Group Filter");
                             FILTERGROUP(0);
                             SetResourceGroupFilter;
                             if not TestFilter then begin
                               ResourceGroupFilter := TempTextFilter;
                               SetResourceGroupFilter;
                               ERROR(Text000,TABLECAPTION);
                             end;
                             ResourceGroupFilterOnAfterVali;
                           END;

                OnLookup=BEGIN
                           ResourceGroup.RESET;
                           if PAGE.RUNMODAL(0,ResourceGroup) = ACTION::LookupOK then begin
                             Text := ResourceGroup."No.";
                             SetResourceGroupFilter;
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 32  ;2   ;Field     ;
                Name=RespDateFilter;
                CaptionML=ENU=Response Date Filter;
                ToolTipML=ENU=Specifies the filter that displays service tasks corresponding to service item lines with the specified value in the Response Date field.;
                ApplicationArea=#Service;
                SourceExpr=RespDateFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Response Date");
                             FILTERGROUP(0);
                             SetRespDateFilter;
                             if not TestFilter then begin
                               RespDateFilter := TempTextFilter;
                               SetRespDateFilter;
                               ERROR(Text000,TABLECAPTION);
                             end;
                             RespDateFilterOnAfterValidate;
                           END;

                ImplicitType=Text }

    { 39  ;2   ;Field     ;
                Name=AllocationStatus;
                CaptionML=ENU=Allocation Status Filter;
                ToolTipML=ENU=Specifies the filter that displays the service tasks corresponding to service item lines with a certain value in the Status Code of Resource Allocations.;
                OptionCaptionML=ENU=" ,Nonactive,Active,Finished,Canceled,Reallocation Needed";
                ApplicationArea=#Service;
                SourceExpr=AllocationStatus;
                OnValidate=BEGIN
                             TempAllocationStatus := "Allocation Status Filter";
                             SetAllocationFilter;
                             if not TestFilter then begin
                               AllocationStatus := TempAllocationStatus;
                               SetAllocationFilter;
                               ERROR(Text000,TABLECAPTION);
                             end;
                             AllocationStatusOnAfterValidat;
                           END;

                ImplicitType=Option }

    { 56  ;2   ;Field     ;
                Name=DocFilter;
                CaptionML=ENU=Document Filter;
                ToolTipML=ENU=Specifies the filter that displays all service tasks corresponding to documents of the specified type.;
                OptionCaptionML=ENU=Order,Quote,All;
                ApplicationArea=#Service;
                SourceExpr=DocFilter;
                OnValidate=BEGIN
                             ServOrderFilter := '';
                             SetServOrderFilter;
                             SetDocFilter;
                             DocFilterOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 60  ;2   ;Field     ;
                Name=ServOrderFilter;
                CaptionML=ENU=No. Filter;
                ToolTipML=ENU=Specifies the filter that displays service tasks corresponding to the service item lines within the specified document.;
                ApplicationArea=#Service;
                SourceExpr=ServOrderFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Document No.");
                             FILTERGROUP(0);
                             SetServOrderFilter;
                             if not TestFilter then begin
                               ServOrderFilter := TempTextFilter;
                               SetServOrderFilter;
                               ERROR(Text000,TABLECAPTION);
                             end;
                             ServOrderFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           ServHeader.RESET;
                           SetDocFilterHeader(ServHeader);
                           if PAGE.RUNMODAL(0,ServHeader) = ACTION::LookupOK then begin
                             Text := ServHeader."No.";
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 40  ;2   ;Field     ;
                Name=RepairStatusFilter;
                CaptionML=ENU=Repair Status Code Filter;
                ToolTipML=ENU=Specifies the Repair Status Code filter to view service tasks corresponding to service item lines with the specified repair status code.;
                ApplicationArea=#Service;
                SourceExpr=RepairStatusFilter;
                OnValidate=BEGIN
                             FILTERGROUP(2);
                             TempTextFilter := GETFILTER("Repair Status Code");
                             FILTERGROUP(0);
                             SetRepStatFilter;
                             if not TestFilter then begin
                               RepairStatusFilter := TempTextFilter;
                               SetRepStatFilter;
                               ERROR(Text000,TABLECAPTION);
                             end;
                             RepairStatusFilterOnAfterValid;
                           END;

                OnLookup=BEGIN
                           RepairStatus.RESET;
                           if PAGE.RUNMODAL(0,RepairStatus) = ACTION::LookupOK then begin
                             Text := RepairStatus.Code;
                             SetRepStatFilter;
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 1   ;1   ;Group     ;
                Name=Group1;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Response Date;
                ToolTipML=ENU=Specifies the estimated date when service should start on this service item line.;
                ApplicationArea=#Service;
                SourceExpr="Response Date";
                ImplicitType=Date }

    { 4   ;2   ;Field     ;
                Name=Response Time;
                ToolTipML=ENU=Specifies the estimated time when service should start on this service item.;
                ApplicationArea=#Service;
                SourceExpr="Response Time";
                ImplicitType=Time }

    { 6   ;2   ;Field     ;
                Name=Priority;
                ToolTipML=ENU=Specifies the service priority for this item.;
                ApplicationArea=#Service;
                SourceExpr=Priority;
                ImplicitType=Option }

    { 57  ;2   ;Field     ;
                Name=Document Type;
                ToolTipML=ENU=Specifies whether the service document is a service order or service quote.;
                ApplicationArea=#Service;
                SourceExpr="Document Type";
                ImplicitType=Option }

    { 26  ;2   ;Field     ;
                Name=Document No.;
                ToolTipML=ENU=Specifies the number of the service order linked to this service item line.;
                ApplicationArea=#Service;
                SourceExpr="Document No.";
                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Repair Status Code;
                ToolTipML=ENU=Specifies the repair status of this service item.;
                ApplicationArea=#Service;
                SourceExpr="Repair Status Code";
                ImplicitType=Code10 }

    { 12  ;2   ;Field     ;
                Name=Service Item No.;
                ToolTipML=ENU=Specifies the service item number registered in the Service Item table.;
                ApplicationArea=#Service;
                SourceExpr="Service Item No.";
                ImplicitType=Code20 }

    { 49  ;2   ;Field     ;
                Name=Customer No.;
                ToolTipML=ENU=Specifies the customer number associated with the service contract.;
                ApplicationArea=#Service;
                SourceExpr="Customer No.";
                ImplicitType=Code20 }

    { 61  ;2   ;Field     ;
                Name=Ship-to Code;
                ToolTipML=ENU=Specifies a code for an alternate shipment address if you want to ship to another address than the one that has been entered automatically. This field is also used in case of drop shipment.;
                ApplicationArea=#Service;
                SourceExpr="Ship-to Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 45  ;2   ;Field     ;
                Name=Customer Name;
                CaptionML=ENU=Customer Name;
                ToolTipML=ENU=Specifies the name of the customer.;
                ApplicationArea=#Service;
                SourceExpr=Cust.Name;
                Visible=FALSE }

    { 18  ;2   ;Field     ;
                Name=Service Shelf No.;
                ToolTipML=ENU=Specifies the number of the service shelf this item is stored on.;
                ApplicationArea=#Service;
                SourceExpr="Service Shelf No.";
                ImplicitType=Code10 }

    { 14  ;2   ;Field     ;
                Name=Item No.;
                ToolTipML=ENU=Specifies the item number linked to this service item.;
                ApplicationArea=#Service;
                SourceExpr="Item No.";
                ImplicitType=Code20 }

    { 10  ;2   ;Field     ;
                Name=Service Item Group Code;
                ToolTipML=ENU=Specifies the code of the service item group for this item.;
                ApplicationArea=#Service;
                SourceExpr="Service Item Group Code";
                ImplicitType=Code10 }

    { 38  ;2   ;Field     ;
                Name=Variant Code;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Variant Code";
                Visible=FALSE;
                ImplicitType=Code10 }

    { 16  ;2   ;Field     ;
                Name=Serial No.;
                ToolTipML=ENU=Specifies the serial number of this item.;
                ApplicationArea=#ItemTracking;
                SourceExpr="Serial No.";
                OnAssistEdit=BEGIN
                               CLEAR(ItemLedgerEntry);
                               ItemLedgerEntry.SETRANGE("Item No.","Item No.");
                               ItemLedgerEntry.SETRANGE("Variant Code","Variant Code");
                               ItemLedgerEntry.SETRANGE("Serial No.","Serial No.");
                               PAGE.RUN(PAGE::"Item Ledger Entries",ItemLedgerEntry);
                             END;

                ImplicitType=Code20 }

    { 34  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of this service item.;
                ApplicationArea=#Service;
                SourceExpr=Description;
                Visible=FALSE;
                ImplicitType=Text50 }

    { 20  ;2   ;Field     ;
                Name=Warranty;
                ToolTipML=ENU=Specifies that warranty on either parts or labor exists for this item.;
                ApplicationArea=#Service;
                SourceExpr=Warranty;
                ImplicitType=Boolean }

    { 22  ;2   ;Field     ;
                Name=Contract No.;
                ToolTipML=ENU=Specifies the number of the service contract associated with the item or service on the line.;
                ApplicationArea=#Service;
                SourceExpr="Contract No.";
                ImplicitType=Code20 }

    { 24  ;2   ;Field     ;
                Name=No. of Allocations;
                ToolTipML=ENU=Specifies the number of resource allocations with the allocation status specified in the Allocation Status Filter field.;
                ApplicationArea=#Service;
                SourceExpr="No. of Allocations";
                ImplicitType=Integer }

    { 44  ;1   ;Group     ;
                Name=Group44 }

    { 31  ;2   ;Field     ;
                Name=Description2;
                ToolTipML=ENU=Specifies a description of this service item.;
                ApplicationArea=#Service;
                SourceExpr=Description;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                ApplicationArea=#Service;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                ApplicationArea=#Service;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ItemLedgerEntry@1013 : Record "Item Ledger Entry";
      RepairStatus@1010 : Record "Repair Status";
      Cust@1002 : Record Customer;
      ServHeader@1000 : Record "Service Header";
      ServItemLine@1001 : Record "Service Item Line";
      Res@1011 : Record Resource;
      ResourceGroup@1015 : Record "Resource Group";
      UserMgt@1003 : Codeunit "User Setup Management";
      RepairStatusFilter@1006 : Text;
      RespDateFilter@1007 : Text;
      ServOrderFilter@1008 : Text;
      ResourceFilter@1009 : Text;
      AllocationStatus@1005 : '" ",Nonactive,Active,Finished,Canceled,"Reallocation Needed"';
      DocFilter@1012 : 'Order,Quote,All';
      ResourceGroupFilter@1014 : Text;
      TempTextFilter@1016 : Text;
      Text000@1017 : TextConst 'ENU=There is no %1 within the filter.';
      TempAllocationStatus@1018 : '" ",Nonactive,Active,Finished,Canceled,"Reallocation Needed"';

    [External]
    PROCEDURE SetAllFilters@5();
    BEGIN
      SetRepStatFilter;
      SetRespDateFilter;
      SetDocFilter;
      SetServOrderFilter;
      SetResourceFilter;
      SetResourceGroupFilter;
      SetAllocationFilter;
    END;

    [External]
    PROCEDURE SetRepStatFilter@4();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Repair Status Code",RepairStatusFilter);
      RepairStatusFilter := GETFILTER("Repair Status Code");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetRespDateFilter@6();
    VAR
      ApplicationManagement@1000 : Codeunit ApplicationManagement;
    BEGIN
      FILTERGROUP(2);
      if ApplicationManagement.MakeDateFilter(RespDateFilter) = 0 then;
      SETFILTER("Response Date",RespDateFilter);
      RespDateFilter := GETFILTER("Response Date");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetDocFilter@8();
    BEGIN
      FILTERGROUP(2);
      case DocFilter of
        DocFilter::Order:
          SETRANGE("Document Type","Document Type"::Order);
        DocFilter::Quote:
          SETRANGE("Document Type","Document Type"::Quote);
        DocFilter::All:
          SETRANGE("Document Type");
      end;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetDocFilterHeader@2(VAR ServHeader@1000 : Record "Service Header");
    BEGIN
      with ServHeader do begin
        FILTERGROUP(2);
        case DocFilter of
          DocFilter::Order:
            SETRANGE("Document Type","Document Type"::Order);
          DocFilter::Quote:
            SETRANGE("Document Type","Document Type"::Quote);
          DocFilter::All:
            SETRANGE("Document Type");
        end;
        FILTERGROUP(0);
      end;
    END;

    [External]
    PROCEDURE SetServOrderFilter@7();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Document No.",ServOrderFilter);
      ServOrderFilter := GETFILTER("Document No.");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetResourceFilter@1();
    BEGIN
      FILTERGROUP(2);
      if ResourceFilter <> '' then begin
        SETFILTER("No. of Active/Finished Allocs",'>0');
        SETFILTER("Resource Filter",ResourceFilter);
        ResourceFilter := GETFILTER("Resource Filter");
      end else begin
        if ResourceGroupFilter = '' then
          SETRANGE("No. of Active/Finished Allocs");
        SETRANGE("Resource Filter");
      end;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetResourceGroupFilter@9();
    BEGIN
      FILTERGROUP(2);
      if ResourceGroupFilter <> '' then begin
        SETFILTER("No. of Active/Finished Allocs",'>0');
        SETFILTER("Resource Group Filter",ResourceGroupFilter);
        ResourceGroupFilter := GETFILTER("Resource Group Filter");
      end else begin
        if ResourceFilter = '' then
          SETRANGE("No. of Active/Finished Allocs");
        SETRANGE("Resource Group Filter");
      end;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetAllocationFilter@3();
    BEGIN
      FILTERGROUP(2);
      case AllocationStatus of
        AllocationStatus::" ":
          begin
            SETRANGE("Allocation Status Filter");
            SETRANGE("No. of Allocations");
          end;
        AllocationStatus::Nonactive:
          begin
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Nonactive);
            SETFILTER("No. of Allocations",'>0');
          end;
        AllocationStatus::Active:
          begin
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Active);
            SETFILTER("No. of Allocations",'>0');
          end;
        AllocationStatus::Finished:
          begin
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Finished);
            SETFILTER("No. of Allocations",'>0');
          end;
        AllocationStatus::Canceled:
          begin
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::Canceled);
            SETFILTER("No. of Allocations",'>0');
          end;
        AllocationStatus::"Reallocation Needed":
          begin
            SETRANGE("Allocation Status Filter","Allocation Status Filter"::"Reallocation Needed");
            SETFILTER("No. of Allocations",'>0');
          end;
      end;
      FILTERGROUP(0);
    END;

    LOCAL PROCEDURE TestFilter@10() : Boolean;
    BEGIN
      if ServOrderFilter <> '' then begin
        FILTERGROUP(2);
        if GETRANGEMIN("Document No.") = GETRANGEMAX("Document No.") then
          if ISEMPTY then begin
            FILTERGROUP(0);
            exit(false);
          end;
        FILTERGROUP(0);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE RepairStatusFilterOnAfterValid@19075265();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ResourceFilterOnAfterValidate@19005532();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE AllocationStatusOnAfterValidat@19046183();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE DocFilterOnAfterValidate@19004301();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ServOrderFilterOnAfterValidate@19063213();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE RespDateFilterOnAfterValidate@19063229();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ResourceGroupFilterOnAfterVali@19056724();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    BEGIN
    END.
  }
}

