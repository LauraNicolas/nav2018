OBJECT Table 90 BOM Component
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               Item.GET("Parent Item No.");
               if Type = Type::Item then
                 ValidateAgainstRecursion("No.")
             END;

    OnModify=BEGIN
               Item.GET("Parent Item No.");
               if Type = Type::Item then
                 ValidateAgainstRecursion("No.")
             END;

    OnRename=BEGIN
               Item.GET("Parent Item No.");
               if Type = Type::Item then
                 ValidateAgainstRecursion("No.")
             END;

    CaptionML=ENU=BOM Component;
    LookupPageID="Assembly BOM";
    DrillDownPageID="Assembly BOM";
  }
  FIELDS
  {
    { 1   ;   ;Parent Item No.     ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   CaptionML=ENU=Parent Item No.;
                                                   NotBlank=true }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                "No." := '';
                                                                "Variant Code" := '';
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Item,Resource";
                                                   OptionString=" ",Item,Resource }
    { 4   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item WHERE (Type=CONST(Inventory))
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type);
                                                                "Variant Code" := '';
                                                                if "No." = '' then
                                                                  exit;

                                                                case Type of
                                                                  Type::Item:
                                                                    begin
                                                                      Item.GET("No.");
                                                                      ValidateAgainstRecursion("No.");
                                                                      Item.CALCFIELDS("Assembly BOM");
                                                                      "Assembly BOM" := Item."Assembly BOM";
                                                                      Description := Item.Description;
                                                                      "Unit of Measure Code" := Item."Base Unit of Measure";
                                                                      ParentItem.GET("Parent Item No.");
                                                                      CalcLowLevelCode.SetRecursiveLevelsOnItem(Item,ParentItem."Low-Level Code" + 1,true);
                                                                      Item.FIND;
                                                                      ParentItem.FIND;
                                                                      if ParentItem."Low-Level Code" >= Item."Low-Level Code" then
                                                                        ERROR(Text001,"No.");
                                                                    end;
                                                                  Type::Resource:
                                                                    begin
                                                                      Res.GET("No.");
                                                                      "Assembly BOM" := false;
                                                                      Description := Res.Name;
                                                                      "Unit of Measure Code" := Res."Base Unit of Measure";
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 5   ;   ;Assembly BOM        ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("BOM Component" WHERE (Type=CONST(Item),
                                                                                            "Parent Item No."=FIELD("No.")));
                                                   CaptionML=ENU=Assembly BOM;
                                                   Editable=false }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE ("Resource No."=FIELD("No."));
                                                   CaptionML=ENU=Unit of Measure Code }
    { 8   ;   ;Quantity per        ;Decimal       ;CaptionML=ENU=Quantity per;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 9   ;   ;Position            ;Code10        ;CaptionML=ENU=Position }
    { 10  ;   ;Position 2          ;Code10        ;CaptionML=ENU=Position 2 }
    { 11  ;   ;Position 3          ;Code10        ;CaptionML=ENU=Position 3 }
    { 12  ;   ;Machine No.         ;Code10        ;CaptionML=ENU=Machine No. }
    { 13  ;   ;Lead-Time Offset    ;DateFormula   ;CaptionML=ENU=Lead-Time Offset }
    { 14  ;   ;BOM Description     ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(Item.Description WHERE ("No."=FIELD("Parent Item No.")));
                                                   CaptionML=ENU=BOM Description;
                                                   Editable=false }
    { 20  ;   ;Resource Usage Type ;Option        ;OnValidate=BEGIN
                                                                if "Resource Usage Type" = xRec."Resource Usage Type" then
                                                                  exit;

                                                                TESTFIELD(Type,Type::Resource);
                                                              END;

                                                   CaptionML=ENU=Resource Usage Type;
                                                   OptionCaptionML=ENU=Direct,Fixed;
                                                   OptionString=Direct,Fixed }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                   OnValidate=BEGIN
                                                                if "Variant Code" = '' then
                                                                  exit;
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("No.");
                                                                ItemVariant.GET("No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5900;   ;Installed in Line No.;Integer      ;OnValidate=BEGIN
                                                                if "Installed in Line No." <> 0 then begin
                                                                  if "Installed in Line No." = "Line No." then
                                                                    ERROR(Text000,FIELDCAPTION("Installed in Line No."));
                                                                  BOMComp.RESET;
                                                                  BOMComp.SETRANGE("Parent Item No.","Parent Item No.");
                                                                  BOMComp.SETRANGE(Type,BOMComp.Type::Item);
                                                                  BOMComp.SETRANGE("Line No.","Installed in Line No.");
                                                                  BOMComp.FINDFIRST;
                                                                  BOMComp.TESTFIELD("Quantity per",1);
                                                                  "Installed in Item No." := BOMComp."No.";
                                                                end else
                                                                  "Installed in Item No." := '';
                                                              END;

                                                   OnLookup=BEGIN
                                                              BOMComp.RESET;
                                                              BOMComp.SETRANGE("Parent Item No.","Parent Item No.");
                                                              BOMComp.SETRANGE(Type,BOMComp.Type::Item);
                                                              BOMComp.SETFILTER("Line No.",'<>%1',"Line No.");
                                                              CLEAR(AssemblyBOM);
                                                              AssemblyBOM.SETTABLEVIEW(BOMComp);
                                                              AssemblyBOM.EDITABLE(false);
                                                              AssemblyBOM.LOOKUPMODE(true);
                                                              if AssemblyBOM.RUNMODAL = ACTION::LookupOK then begin
                                                                AssemblyBOM.GETRECORD(BOMComp);
                                                                VALIDATE("Installed in Line No.",BOMComp."Line No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Installed in Line No. }
    { 5901;   ;Installed in Item No.;Code20       ;TableRelation=IF (Type=CONST(Item)) Item;
                                                   OnValidate=BEGIN
                                                                if "Installed in Item No." <> '' then begin
                                                                  BOMComp.RESET;
                                                                  BOMComp.SETRANGE("Parent Item No.","Parent Item No.");
                                                                  BOMComp.SETRANGE(Type,BOMComp.Type::Item);
                                                                  BOMComp.SETRANGE("No.","Installed in Item No.");
                                                                  BOMComp.FINDFIRST;
                                                                end;

                                                                VALIDATE("Installed in Line No.",BOMComp."Line No.");
                                                              END;

                                                   OnLookup=BEGIN
                                                              BOMComp.RESET;
                                                              BOMComp.SETRANGE("Parent Item No.","Parent Item No.");
                                                              BOMComp.SETRANGE(Type,BOMComp.Type::Item);
                                                              BOMComp."No." := "Installed in Item No.";
                                                              BOMComp.SETFILTER("Line No.",'<>%1',"Line No.");
                                                              CLEAR(AssemblyBOM);
                                                              AssemblyBOM.SETTABLEVIEW(BOMComp);
                                                              AssemblyBOM.EDITABLE(false);
                                                              AssemblyBOM.LOOKUPMODE(true);
                                                              if AssemblyBOM.RUNMODAL = ACTION::LookupOK then begin
                                                                AssemblyBOM.GETRECORD(BOMComp);
                                                                VALIDATE("Installed in Line No.",BOMComp."Line No.");
                                                              end;
                                                            END;

                                                   CaptionML=ENU=Installed in Item No. }
  }
  KEYS
  {
    {    ;"Parent Item No.","Line No."            ;Clustered=true }
    {    ;Type,"No."                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1 cannot be component of itself.';
      Text001@1006 : TextConst 'ENU=You cannot insert item %1 as an assembly component of itself.';
      Item@1001 : Record Item;
      ParentItem@1007 : Record Item;
      Res@1002 : Record Resource;
      ItemVariant@1003 : Record "Item Variant";
      BOMComp@1004 : Record "BOM Component";
      CalcLowLevelCode@1008 : Codeunit "Calculate Low-Level Code";
      AssemblyBOM@1005 : Page "Assembly BOM";

    [External]
    PROCEDURE ValidateAgainstRecursion@3(ItemNo@1003 : Code[20]);
    VAR
      BOMComp@1001 : Record "BOM Component";
    BEGIN
      if "Parent Item No." = ItemNo then
        ERROR(Text001,ItemNo);
      if Type = Type::Item then begin
        BOMComp.SETCURRENTKEY(Type,"No.");
        BOMComp.SETRANGE(Type,Type::Item);
        BOMComp.SETRANGE("No.","Parent Item No.");
        if BOMComp.FINDSET then
          repeat
            BOMComp.ValidateAgainstRecursion(ItemNo);
          until BOMComp.NEXT = 0
      end
    END;

    BEGIN
    END.
  }
}

