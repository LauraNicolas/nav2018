OBJECT Report 5698 Date Compress Maint. Ledger
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Date Compr. Register"=rimd,
                TableData "Dimension Set ID Filter Line"=imd,
                TableData "FA Register"=rimd,
                TableData "Maintenance Ledger Entry"=rimd;
    CaptionML=ENU=Date Compress Maint. Ledger;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  DimSelectionBuf.CompareDimText(
                    3,REPORT::"Date Compress Maint. Ledger",'',RetainDimText,Text010);

                  MaintenanceLedgEntryFilter := COPYSTR("Maintenance Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 9437;    ;DataItem;Maintenance Ledger Entry;
               DataItemTable="Maintenance Ledger Entry";
               DataItemTableView=SORTING("FA No.","Depreciation Book Code","FA Posting Date");
               OnPreDataItem=VAR
                               GLSetup@1000 : Record "General Ledger Setup";
                             BEGIN
                               if not CONFIRM(Text000,false) then
                                 CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007 +
                                 Text008);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Maintenance Ledger");

                               SelectedDim.GetSelectedDim(
                                 USERID,3,REPORT::"Date Compress Maint. Ledger",'',TempSelectedDim);
                               GLSetup.GET;
                               Retain[4] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Maint. Ledger",'',GLSetup."Global Dimension 1 Code");
                               Retain[5] :=
                                 TempSelectedDim.GET(
                                   USERID,3,REPORT::"Date Compress Maint. Ledger",'',GLSetup."Global Dimension 2 Code");

                               NewMaintenanceLedgEntry.LOCKTABLE;
                               FAReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               if MaintenanceLedgEntry2.FIND('+') then;
                               LastEntryNo := MaintenanceLedgEntry2."Entry No.";
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("FA Posting Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;
                             END;

               OnAfterGetRecord=BEGIN
                                  MaintenanceLedgEntry2 := "Maintenance Ledger Entry";
                                  with MaintenanceLedgEntry2 do begin
                                    SETCURRENTKEY("FA No.","Depreciation Book Code","FA Posting Date");
                                    COPYFILTERS("Maintenance Ledger Entry");

                                    SETRANGE("FA No.","FA No.");
                                    SETRANGE("Depreciation Book Code","Depreciation Book Code");
                                    SETRANGE("FA Posting Group","FA Posting Group");
                                    SETRANGE("Document Type","Document Type");

                                    SETFILTER("FA Posting Date",DateComprMgt.GetDateFilter("FA Posting Date",EntrdDateComprReg,true));

                                    if RetainNo(FIELDNO("Document No.")) then
                                      SETRANGE("Document No.","Document No.");
                                    if RetainNo(FIELDNO("Maintenance Code")) then
                                      SETRANGE("Maintenance Code","Maintenance Code");
                                    if RetainNo(FIELDNO("Index Entry")) then
                                      SETRANGE("Index Entry","Index Entry");
                                    if RetainNo(FIELDNO("Global Dimension 1 Code")) then
                                      SETRANGE("Global Dimension 1 Code","Global Dimension 1 Code");
                                    if RetainNo(FIELDNO("Global Dimension 2 Code")) then
                                      SETRANGE("Global Dimension 2 Code","Global Dimension 2 Code");
                                    if Quantity >= 0 then
                                      SETFILTER(Quantity,'>=0')
                                    else
                                      SETFILTER(Quantity,'<0');

                                    InitNewEntry(NewMaintenanceLedgEntry);

                                    DimBufMgt.CollectDimEntryNo(
                                      TempSelectedDim,"Dimension Set ID","Entry No.",
                                      0,false,DimEntryNo);
                                    ComprDimEntryNo := DimEntryNo;
                                    SummarizeEntry(NewMaintenanceLedgEntry,MaintenanceLedgEntry2);
                                    while NEXT <> 0 do begin
                                      DimBufMgt.CollectDimEntryNo(
                                        TempSelectedDim,"Dimension Set ID","Entry No.",
                                        ComprDimEntryNo,true,DimEntryNo);
                                      if DimEntryNo = ComprDimEntryNo then
                                        SummarizeEntry(NewMaintenanceLedgEntry,MaintenanceLedgEntry2);
                                    end;

                                    InsertNewEntry(NewMaintenanceLedgEntry,ComprDimEntryNo);

                                    ComprCollectedEntries;
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(FAReg,DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(FAReg,DateComprReg);
                              END;

               ReqFilterFields="FA No.","Depreciation Book Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if EntrdDateComprReg."Ending Date" = 0D then
                     EntrdDateComprReg."Ending Date" := TODAY;
                   if EntrdMaintenanceLedgEntry.Description = '' then
                     EntrdMaintenanceLedgEntry.Description := Text009;

                   with "Maintenance Ledger Entry" do begin
                     InsertField(FIELDNO("Document No."),FIELDCAPTION("Document No."));
                     InsertField(FIELDNO("Maintenance Code"),FIELDCAPTION("Maintenance Code"));
                     InsertField(FIELDNO("Index Entry"),FIELDCAPTION("Index Entry"));
                     InsertField(FIELDNO("Global Dimension 1 Code"),FIELDCAPTION("Global Dimension 1 Code"));
                     InsertField(FIELDNO("Global Dimension 2 Code"),FIELDCAPTION("Global Dimension 2 Code"));
                   end;

                   RetainDimText := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Date Compress Maint. Ledger",'');
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=Starting Date;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the date from which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=Ending Date;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the date to which the report or batch job processes information.;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=Period Length;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the period for which data is shown in the report. For example, enter "1M" for one month, "30D" for thirty days, "3Q" for three quarters, or "5Y" for five years.;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Suite;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 4   ;2   ;Field     ;
                  Name=Posting Description;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies the posting date to be used by the batch job as a filter.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=EntrdMaintenanceLedgEntry.Description }

      { 1907651001;2;Group  ;
                  Name=Retain Field Contents;
                  CaptionML=ENU=Retain Field Contents }

      { 5   ;3   ;Field     ;
                  Name=Document No.;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies, if you leave the field empty, the next available number on the resulting journal line. If a number series is not set up, enter the document number that you want assigned to the resulting journal line.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=Retain[1] }

      { 6   ;3   ;Field     ;
                  Name=Maintenance Code;
                  CaptionML=ENU=Maintenance Code;
                  ToolTipML=ENU=Specifies the fixed asset.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=Retain[2] }

      { 7   ;3   ;Field     ;
                  Name=Index Entry;
                  CaptionML=ENU=Index Entry;
                  ToolTipML=ENU=Specifies the index entry to be data compressed. With the Index Fixed Assets batch job, you can index fixed assets that are linked to a specific depreciation book. The batch job creates entries in a journal based on the conditions that you specify. You can then post the journal or adjust the entries before posting, if necessary.;
                  ApplicationArea=#FixedAssets;
                  SourceExpr=Retain[3] }

      { 9   ;2   ;Field     ;
                  Name=Retain Dimensions;
                  CaptionML=ENU=Retain Dimensions;
                  ToolTipML=ENU=Specifies which dimension information you want to retain when the entries are compressed. The more dimension information that you choose to retain, the more detailed the compressed entries are.;
                  ApplicationArea=#Suite;
                  SourceExpr=RetainDimText;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Date Compress Maint. Ledger",RetainDimText);
                               END;
                                }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing maintenance ledger entries...\\';
      Text005@1005 : TextConst 'ENU=FA No.               #1##########\';
      Text006@1006 : TextConst 'ENU=Date                 #2######\\';
      Text007@1007 : TextConst 'ENU=No. of new entries   #3######\';
      Text008@1008 : TextConst 'ENU=No. of entries del.  #4######';
      Text009@1009 : TextConst 'ENU=Date Compressed';
      Text010@1010 : TextConst 'ENU=Retain Dimensions';
      SourceCodeSetup@1011 : Record "Source Code Setup";
      DateComprReg@1012 : Record "Date Compr. Register";
      EntrdDateComprReg@1013 : Record "Date Compr. Register";
      FAReg@1014 : Record "FA Register";
      EntrdMaintenanceLedgEntry@1015 : Record "Maintenance Ledger Entry";
      NewMaintenanceLedgEntry@1016 : Record "Maintenance Ledger Entry";
      MaintenanceLedgEntry2@1017 : Record "Maintenance Ledger Entry";
      SelectedDim@1018 : Record "Selected Dimension";
      TempSelectedDim@1019 : TEMPORARY Record "Selected Dimension";
      DimSelectionBuf@1020 : Record "Dimension Selection Buffer";
      DateComprMgt@1021 : Codeunit DateComprMgt;
      DimBufMgt@1022 : Codeunit "Dimension Buffer Management";
      DimMgt@1023 : Codeunit DimensionManagement;
      FAInsertLedgEntry@1024 : Codeunit "FA Insert Ledger Entry";
      Window@1025 : Dialog;
      MaintenanceLedgEntryFilter@1026 : Text[250];
      NoOfFields@1027 : Integer;
      Retain@1028 : ARRAY [10] OF Boolean;
      FieldNumber@1029 : ARRAY [10] OF Integer;
      FieldNameArray@1030 : ARRAY [10] OF Text[100];
      LastEntryNo@1031 : Integer;
      NoOfDeleted@1032 : Integer;
      FARegExists@1033 : Boolean;
      i@1034 : Integer;
      ComprDimEntryNo@1035 : Integer;
      DimEntryNo@1036 : Integer;
      RetainDimText@1037 : Text[250];

    LOCAL PROCEDURE InitRegisters@4();
    BEGIN
      if FAReg.FIND('+') then;
      FAReg.INIT;
      FAReg."No." := FAReg."No." + 1;
      FAReg."Creation Date" := TODAY;
      FAReg."Journal Type" := FAReg."Journal Type"::"Fixed Asset";
      FAReg."Source Code" := SourceCodeSetup."Compress Maintenance Ledger";
      FAReg."User ID" := USERID;
      FAReg."From Maintenance Entry No." := LastEntryNo + 1;

      if DateComprReg.FINDLAST then;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"Maintenance Ledger Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := EntrdDateComprReg."Period Length";
      for i := 1 to NoOfFields do
        if Retain[i] then
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);
      DateComprReg.Filter := MaintenanceLedgEntryFilter;
      DateComprReg."Register No." := FAReg."No.";
      DateComprReg."Source Code" := SourceCodeSetup."Compress Maintenance Ledger";
      DateComprReg."User ID" := USERID;

      FARegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR FAReg@1000 : Record "FA Register";VAR DateComprReg@1001 : Record "Date Compr. Register");
    VAR
      FAReg2@1002 : Record "FA Register";
    BEGIN
      FAReg."To Maintenance Entry No." := NewMaintenanceLedgEntry."Entry No.";

      if FARegExists then begin
        FAReg.MODIFY;
        DateComprReg.MODIFY;
      end else begin
        FAReg.INSERT;
        DateComprReg.INSERT;
        FARegExists := true;
      end;

      COMMIT;

      NewMaintenanceLedgEntry.LOCKTABLE;
      FAReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      MaintenanceLedgEntry2.RESET;
      if MaintenanceLedgEntry2.FIND('+') then;
      if FAReg2.FINDLAST then;
      if (LastEntryNo <> MaintenanceLedgEntry2."Entry No.") or (FAReg."No." <> FAReg2."No.") then begin
        LastEntryNo := MaintenanceLedgEntry2."Entry No.";
        InitRegisters;
      end;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      exit(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      for i := 1 to NoOfFields do
        if Number = FieldNumber[i] then
          exit(i);
    END;

    LOCAL PROCEDURE SummarizeEntry@5(VAR NewMaintenanceLedgEntry@1000 : Record "Maintenance Ledger Entry";MaintenanceLedgEntry@1001 : Record "Maintenance Ledger Entry");
    BEGIN
      with MaintenanceLedgEntry do begin
        NewMaintenanceLedgEntry.Quantity := NewMaintenanceLedgEntry.Quantity + Quantity;
        NewMaintenanceLedgEntry.Amount := NewMaintenanceLedgEntry.Amount + Amount;
        DELETE;
        DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
        Window.UPDATE(4,DateComprReg."No. Records Deleted");
      end;
    END;

    LOCAL PROCEDURE ComprCollectedEntries@12();
    VAR
      MaintenanceLedgEntry@1000 : Record "Maintenance Ledger Entry";
      OldDimEntryNo@1001 : Integer;
      Found@1002 : Boolean;
      MaintenanceLedgEntryNo@1003 : Integer;
    BEGIN
      OldDimEntryNo := 0;
      if DimBufMgt.FindFirstDimEntryNo(DimEntryNo,MaintenanceLedgEntryNo) then begin
        InitNewEntry(NewMaintenanceLedgEntry);
        repeat
          MaintenanceLedgEntry.GET(MaintenanceLedgEntryNo);
          SummarizeEntry(NewMaintenanceLedgEntry,MaintenanceLedgEntry);
          OldDimEntryNo := DimEntryNo;
          Found := DimBufMgt.NextDimEntryNo(DimEntryNo,MaintenanceLedgEntryNo);
          if (OldDimEntryNo <> DimEntryNo) or not Found then begin
            InsertNewEntry(NewMaintenanceLedgEntry,OldDimEntryNo);
            if Found then
              InitNewEntry(NewMaintenanceLedgEntry);
          end;
          OldDimEntryNo := DimEntryNo;
        until not Found;
      end;
      DimBufMgt.DeleteAllDimEntryNo;
    END;

    PROCEDURE InitNewEntry@7(VAR NewMaintenanceLedgEntry@1000 : Record "Maintenance Ledger Entry");
    BEGIN
      LastEntryNo := LastEntryNo + 1;

      with MaintenanceLedgEntry2 do begin
        NewMaintenanceLedgEntry.INIT;
        NewMaintenanceLedgEntry."Entry No." := LastEntryNo;

        NewMaintenanceLedgEntry."FA No." := "FA No.";
        NewMaintenanceLedgEntry."Depreciation Book Code" := "Depreciation Book Code";
        NewMaintenanceLedgEntry."FA Posting Group" := "FA Posting Group";
        NewMaintenanceLedgEntry."Document Type" := "Document Type";

        NewMaintenanceLedgEntry."FA Posting Date" := GETRANGEMIN("FA Posting Date");
        NewMaintenanceLedgEntry."Posting Date" := GETRANGEMIN("FA Posting Date");
        NewMaintenanceLedgEntry.Description := EntrdMaintenanceLedgEntry.Description;
        NewMaintenanceLedgEntry."Source Code" := SourceCodeSetup."Compress Maintenance Ledger";
        NewMaintenanceLedgEntry."User ID" := USERID;

        if RetainNo(FIELDNO("Document No.")) then
          NewMaintenanceLedgEntry."Document No." := "Document No.";
        if RetainNo(FIELDNO("Maintenance Code")) then
          NewMaintenanceLedgEntry."Maintenance Code" := "Maintenance Code";
        if RetainNo(FIELDNO("Index Entry")) then
          NewMaintenanceLedgEntry."Index Entry" := "Index Entry";
        if RetainNo(FIELDNO("Global Dimension 1 Code")) then
          NewMaintenanceLedgEntry."Global Dimension 1 Code" := "Global Dimension 1 Code";
        if RetainNo(FIELDNO("Global Dimension 2 Code")) then
          NewMaintenanceLedgEntry."Global Dimension 2 Code" := "Global Dimension 2 Code";

        Window.UPDATE(1,NewMaintenanceLedgEntry."FA No.");
        Window.UPDATE(2,NewMaintenanceLedgEntry."FA Posting Date");
        DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
        Window.UPDATE(3,DateComprReg."No. of New Records");
      end;
    END;

    LOCAL PROCEDURE InsertNewEntry@23(VAR NewMaintenanceLedgEntry@1000 : Record "Maintenance Ledger Entry";DimEntryNo@1001 : Integer);
    VAR
      TempDimBuf@1002 : TEMPORARY Record "Dimension Buffer";
      TempDimSetEntry@1005 : TEMPORARY Record "Dimension Set Entry";
    BEGIN
      TempDimBuf.DELETEALL;
      DimBufMgt.GetDimensions(DimEntryNo,TempDimBuf);
      DimMgt.CopyDimBufToDimSetEntry(TempDimBuf,TempDimSetEntry);
      NewMaintenanceLedgEntry."Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry);
      NewMaintenanceLedgEntry.INSERT;
      if NewMaintenanceLedgEntry."FA No." <> '' then
        FAInsertLedgEntry.SetMaintenanceLastDate(NewMaintenanceLedgEntry);
    END;

    PROCEDURE InitializeRequest@8(StartingDateFrom@1000 : Date;EndingDateFrom@1001 : Date;PeriodLengthFrom@1002 : Option;DescriptionFrom@1003 : Text[50];RetainDimTextFrom@1004 : Text[250]);
    BEGIN
      EntrdDateComprReg."Starting Date" := StartingDateFrom;
      EntrdDateComprReg."Ending Date" := EndingDateFrom;
      EntrdDateComprReg."Period Length" := PeriodLengthFrom;
      EntrdMaintenanceLedgEntry.Description := DescriptionFrom;
      RetainDimText := RetainDimTextFrom;

      InsertField("Maintenance Ledger Entry".FIELDNO("Maintenance Code"),"Maintenance Ledger Entry".FIELDCAPTION("Maintenance Code"));
      InsertField(
        "Maintenance Ledger Entry".FIELDNO("Global Dimension 1 Code"),
        "Maintenance Ledger Entry".FIELDCAPTION("Global Dimension 1 Code"));
      InsertField(
        "Maintenance Ledger Entry".FIELDNO("Global Dimension 2 Code"),
        "Maintenance Ledger Entry".FIELDCAPTION("Global Dimension 2 Code"));
    END;

    PROCEDURE SetRetainDocumentNo@9(RetainValue@1000 : Boolean);
    BEGIN
      Retain[1] := RetainValue;
      InsertField("Maintenance Ledger Entry".FIELDNO("Document No."),"Maintenance Ledger Entry".FIELDCAPTION("Document No."));
    END;

    PROCEDURE SetRetainIndexEntry@10(RetainValue@1000 : Boolean);
    BEGIN
      Retain[3] := RetainValue;
      InsertField("Maintenance Ledger Entry".FIELDNO("Index Entry"),"Maintenance Ledger Entry".FIELDCAPTION("Index Entry"));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

