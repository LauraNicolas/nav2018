OBJECT Table 130 Incoming Document
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Vendor Name","Vendor Invoice No.",Description;
    OnInsert=VAR
               OCRServiceSetup@1001 : Record "OCR Service Setup";
             BEGIN
               if OCRServiceSetup.GET then;
               "Created Date-Time" := ROUNDDATETIME(CURRENTDATETIME,60000);
               "Created By User ID" := USERSECURITYID;
               if "OCR Service Doc. Template Code" = '' then
                 "OCR Service Doc. Template Code" := OCRServiceSetup."Default OCR Doc. Template";
             END;

    OnModify=BEGIN
               "Last Date-Time Modified" := ROUNDDATETIME(CURRENTDATETIME,60000);
               "Last Modified By User ID" := USERSECURITYID;
             END;

    OnDelete=VAR
               IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
               ActivityLog@1001 : Record "Activity Log";
               ApprovalsMgmt@1002 : Codeunit "Approvals Mgmt.";
             BEGIN
               TESTFIELD(Posted,false);

               ApprovalsMgmt.DeleteApprovalEntries(RECORDID);
               ClearRelatedRecords;

               IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
               if not IncomingDocumentAttachment.ISEMPTY then
                 IncomingDocumentAttachment.DELETEALL;

               ActivityLog.SETRANGE("Record ID",RECORDID);
               if not ActivityLog.ISEMPTY then
                 ActivityLog.DELETEALL;

               ClearErrorMessages;
             END;

    CaptionML=ENU=Incoming Document;
    LookupPageID="Incoming Documents";
    DrillDownPageID="Incoming Documents";
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Entry No. }
    { 2   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 3   ;   ;Created Date-Time   ;DateTime      ;CaptionML=ENU=Created Date-Time;
                                                   Editable=false }
    { 4   ;   ;Created By User ID  ;GUID          ;TableRelation=User;
                                                   CaptionML=ENU=Created By User ID;
                                                   Editable=false }
    { 5   ;   ;Created By User Name;Code50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."User Name" WHERE ("User Security ID"=FIELD("Created By User ID")));
                                                   CaptionML=ENU=Created By User Name;
                                                   Editable=false }
    { 6   ;   ;Released            ;Boolean       ;CaptionML=ENU=Released;
                                                   Editable=false }
    { 7   ;   ;Released Date-Time  ;DateTime      ;CaptionML=ENU=Released Date-Time;
                                                   Editable=false }
    { 8   ;   ;Released By User ID ;GUID          ;TableRelation=User;
                                                   CaptionML=ENU=Released By User ID;
                                                   Editable=false }
    { 9   ;   ;Released By User Name;Code50       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."User Name" WHERE ("User Security ID"=FIELD("Released By User ID")));
                                                   CaptionML=ENU=Released By User Name;
                                                   Editable=false }
    { 10  ;   ;Last Date-Time Modified;DateTime   ;CaptionML=ENU=Last Date-Time Modified;
                                                   Editable=false }
    { 11  ;   ;Last Modified By User ID;GUID      ;TableRelation=User;
                                                   CaptionML=ENU=Last Modified By User ID;
                                                   Editable=false }
    { 12  ;   ;Last Modified By User Name;Code50  ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(User."User Name" WHERE ("User Security ID"=FIELD("Last Modified By User ID")));
                                                   CaptionML=ENU=Last Modified By User Name;
                                                   Editable=false }
    { 13  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted;
                                                   Editable=false }
    { 14  ;   ;Posted Date-Time    ;DateTime      ;CaptionML=ENU=Posted Date-Time;
                                                   Editable=false }
    { 15  ;   ;Document Type       ;Option        ;InitValue=" ";
                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU="Journal,Sales Invoice,Sales Credit Memo,Purchase Invoice,Purchase Credit Memo, ";
                                                   OptionString=Journal,"Sales Invoice","Sales Credit Memo","Purchase Invoice","Purchase Credit Memo"," ";
                                                   Editable=false }
    { 16  ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No.;
                                                   Editable=false }
    { 17  ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date;
                                                   ClosingDates=true;
                                                   Editable=false }
    { 18  ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=New,Released,Rejected,Posted,Created,Failed,Pending Approval;
                                                   OptionString=New,Released,Rejected,Posted,Created,Failed,"Pending Approval";
                                                   Editable=false }
    { 19  ;   ;URL1                ;Text250       ;CaptionML=ENU=URL1;
                                                   Editable=false }
    { 20  ;   ;URL2                ;Text250       ;CaptionML=ENU=URL2;
                                                   Editable=false }
    { 21  ;   ;URL3                ;Text250       ;CaptionML=ENU=URL3;
                                                   Editable=false }
    { 22  ;   ;URL4                ;Text250       ;CaptionML=ENU=URL4;
                                                   Editable=false }
    { 23  ;   ;Vendor Name         ;Text50        ;CaptionML=ENU=Vendor Name }
    { 24  ;   ;Vendor VAT Registration No.;Text30 ;CaptionML=ENU=Vendor VAT Registration No. }
    { 25  ;   ;Vendor IBAN         ;Code50        ;CaptionML=ENU=Vendor IBAN }
    { 26  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 27  ;   ;Vendor Bank Branch No.;Text20      ;CaptionML=ENU=Vendor Bank Branch No. }
    { 28  ;   ;Vendor Bank Account No.;Text30     ;CaptionML=ENU=Vendor Bank Account No. }
    { 29  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No. }
    { 30  ;   ;Data Exchange Type  ;Code20        ;TableRelation="Data Exchange Type";
                                                   CaptionML=ENU=Data Exchange Type }
    { 31  ;   ;OCR Data Corrected  ;Boolean       ;InitValue=false;
                                                   CaptionML=ENU=OCR Data Corrected }
    { 32  ;   ;OCR Status          ;Option        ;CaptionML=ENU=OCR Status;
                                                   OptionCaptionML=ENU=" ,Ready,Sent,Error,Success,Awaiting Verification";
                                                   OptionString=" ",Ready,Sent,Error,Success,"Awaiting Verification";
                                                   Editable=false }
    { 38  ;   ;OCR Service Doc. Template Code;Code20;
                                                   TableRelation="OCR Service Document Template";
                                                   OnValidate=BEGIN
                                                                CALCFIELDS("OCR Service Doc. Template Name");
                                                              END;

                                                   CaptionML=ENU=OCR Service Doc. Template Code }
    { 39  ;   ;OCR Service Doc. Template Name;Text50;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Lookup("OCR Service Document Template".Name WHERE (Code=FIELD("OCR Service Doc. Template Code")));
                                                   CaptionML=ENU=OCR Service Doc. Template Name;
                                                   Editable=false }
    { 40  ;   ;OCR Process Finished;Boolean       ;CaptionML=ENU=OCR Process Finished }
    { 41  ;   ;Created Doc. Error Msg. Type;Option;InitValue=Error;
                                                   CaptionML=ENU=Created Doc. Error Msg. Type;
                                                   OptionCaptionML=ENU=" ,Error,Warning";
                                                   OptionString=" ",Error,Warning }
    { 42  ;   ;Vendor Id           ;GUID          ;CaptionML=ENU=Vendor Id }
    { 50  ;   ;Currency Code       ;Code10        ;OnValidate=VAR
                                                                GeneralLedgerSetup@1000 : Record "General Ledger Setup";
                                                                Currency@1001 : Record Currency;
                                                              BEGIN
                                                                GeneralLedgerSetup.GET;
                                                                if (not Currency.GET("Currency Code")) and ("Currency Code" <> '') and ("Currency Code" <> GeneralLedgerSetup."LCY Code") then
                                                                  ERROR(InvalidCurrencyCodeErr);
                                                              END;

                                                   OnLookup=VAR
                                                              Currency@1000 : Record Currency;
                                                            BEGIN
                                                              if PAGE.RUNMODAL(PAGE::Currencies,Currency) = ACTION::LookupOK then
                                                                "Currency Code" := Currency.Code;
                                                            END;

                                                   CaptionML=ENU=Currency Code }
    { 51  ;   ;Amount Excl. VAT    ;Decimal       ;CaptionML=ENU=Amount Excl. VAT;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 52  ;   ;Amount Incl. VAT    ;Decimal       ;CaptionML=ENU=Amount Incl. VAT;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 53  ;   ;VAT Amount          ;Decimal       ;CaptionML=ENU=VAT Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 54  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 55  ;   ;Vendor Invoice No.  ;Code20        ;CaptionML=ENU=Vendor Invoice No. }
    { 56  ;   ;Order No.           ;Code20        ;CaptionML=ENU=Order No. }
    { 57  ;   ;Vendor Phone No.    ;Text30        ;CaptionML=ENU=Vendor Phone No. }
    { 58  ;   ;Related Record ID   ;RecordID      ;CaptionML=ENU=Related Record ID }
    { 160 ;   ;Job Queue Status    ;Option        ;OnLookup=VAR
                                                              JobQueueEntry@1000 : Record "Job Queue Entry";
                                                            BEGIN
                                                              if "Job Queue Status" = "Job Queue Status"::" " then
                                                                exit;
                                                              JobQueueEntry.ShowStatusMsg("Job Queue Entry ID");
                                                            END;

                                                   CaptionML=ENU=Job Queue Status;
                                                   OptionCaptionML=ENU=" ,Scheduled,Error,Processing";
                                                   OptionString=" ",Scheduled,Error,Processing;
                                                   Editable=false }
    { 161 ;   ;Job Queue Entry ID  ;GUID          ;CaptionML=ENU=Job Queue Entry ID;
                                                   Editable=false }
    { 162 ;   ;Processed           ;Boolean       ;CaptionML=ENU=Processed }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;Status                                   }
    {    ;"Document No.","Posting Date"            }
  }
  FIELDGROUPS
  {
    { 1   ;Brick               ;"Created Date-Time",Description,"Amount Incl. VAT",Status,"Currency Code" }
  }
  CODE
  {
    VAR
      IncomingDocumentsSetup@1001 : Record "Incoming Documents Setup";
      UrlTooLongErr@1003 : TextConst 'ENU=Only URLs with a maximum 1000 characters are allowed.';
      TempErrorMessage@1011 : TEMPORARY Record "Error Message";
      DocumentType@1005 : 'Invoice,"Credit Memo"';
      NoDocumentMsg@1008 : TextConst 'ENU=There is no incoming document for this combination of posting date and document number.';
      AlreadyUsedInJnlErr@1004 : TextConst '@@@="%1 = journal batch name, %2=line number.";ENU=The incoming document has already been assigned to journal batch %1, line number. %2.';
      AlreadyUsedInDocHdrErr@1006 : TextConst '@@@="%1=document type, %2=document number, %3=table name, e.g. Sales Header.";ENU=The incoming document has already been assigned to %1 %2 (%3).';
      DocPostedErr@1009 : TextConst 'ENU=The document related to this incoming document has been posted.';
      DocApprovedErr@1010 : TextConst 'ENU=This incoming document requires releasing.';
      DetachQst@1012 : TextConst 'ENU=Do you want to remove the reference from this incoming document to posted document %1, posting date %2?';
      NotSupportedPurchErr@1013 : TextConst '@@@=%1 will be Sales/Purchase Header. %2 will be invoice, Credit Memo.;ENU=Purchase documents of type %1 are not supported.';
      NotSupportedSalesErr@1016 : TextConst '@@@=%1 will be Sales/Purchase Header. %2 will be invoice, Credit Memo.;ENU=Sales documents of type %1 are not supported.';
      EntityNotFoundErr@1014 : TextConst 'ENU=Cannot create the document. Make sure the data exchange definition is correct.';
      DocAlreadyCreatedErr@1015 : TextConst 'ENU=The document has already been created.';
      DocNotCreatedMsg@1017 : TextConst 'ENU=The document was not created due to errors in the conversion process.';
      DocCreatedMsg@1018 : TextConst '@@@=%1 can be Purchase Invoice, %2 is an ID (e.g. 1001);ENU=%1 %2 has been created.';
      DocCreatedWarningsMsg@1019 : TextConst '@@@=%1 can be Purchase Invoice, %2 is an ID (e.g. 1001);ENU=%1 %2 has been created with warnings.';
      RemovePostedRecordManuallyMsg@1024 : TextConst 'ENU=The reference to the posted record has been removed.\\Remember to correct the posted record if needed.';
      DeleteRecordQst@1025 : TextConst 'ENU=The reference to the record has been removed.\\Do you want to delete the record?';
      DocWhenApprovalIsCompleteErr@1026 : TextConst 'ENU=The document can only be created when the approval process is complete.';
      InvalidCurrencyCodeErr@1000 : TextConst 'ENU=You must enter a valid currency code.';
      ReplaceMainAttachmentQst@1002 : TextConst 'ENU=Are you sure you want to replace the attached file?';
      PurchaseTxt@1031 : TextConst 'ENU=Purchase';
      SalesTxt@1030 : TextConst 'ENU=Sales';
      PurchaseInvoiceTxt@2002 : TextConst 'ENU=Purchase Invoice';
      PurchaseCreditMemoTxt@1007 : TextConst 'ENU=Purchase Credit Memo';
      SalesInvoiceTxt@1020 : TextConst 'ENU=Sales Invoice';
      SalesCreditMemoTxt@1021 : TextConst 'ENU=Sales Credit Memo';
      JournalTxt@1022 : TextConst 'ENU=Journal';
      DoYouWantToRemoveReferenceQst@1023 : TextConst 'ENU=Do you want to remove the reference?';
      DataExchangeTypeEmptyErr@1027 : TextConst 'ENU=You must select a value in the Data Exchange Type field on the incoming document.';
      NoDocAttachErr@1028 : TextConst 'ENU=No document is attached.\\Attach a document, and then try again.';
      GeneralLedgerEntriesTxt@1029 : TextConst 'ENU=General Ledger Entries';
      CannotReplaceMainAttachmentErr@1032 : TextConst 'ENU=Cannot replace the main attachment because the document has already been sent to OCR.';

    [External]
    PROCEDURE GetURL@1() : Text;
    BEGIN
      exit(URL1 + URL2 + URL3 + URL4);
    END;

    [External]
    PROCEDURE SetURL@2(URL@1000 : Text);
    BEGIN
      TESTFIELD(Status,Status::New);

      TESTFIELD(Posted,false);
      if STRLEN(URL) > 1000 then
        ERROR(UrlTooLongErr);
      URL2 := '';
      URL3 := '';
      URL4 := '';
      URL1 := COPYSTR(URL,1,250);
      if STRLEN(URL) > 250 then
        URL2 := COPYSTR(URL,251,250);
      if STRLEN(URL) > 500 then
        URL3 := COPYSTR(URL,501,250);
      if STRLEN(URL) > 750 then
        URL4 := COPYSTR(URL,751,250);
    END;

    [Internal]
    PROCEDURE Release@3();
    VAR
      ReleaseIncomingDocument@1000 : Codeunit "Release Incoming Document";
    BEGIN
      ReleaseIncomingDocument.PerformManualRelease(Rec);
    END;

    [External]
    PROCEDURE Reject@4();
    VAR
      ReleaseIncomingDocument@1000 : Codeunit "Release Incoming Document";
    BEGIN
      ReleaseIncomingDocument.PerformManualReject(Rec);
    END;

    [External]
    PROCEDURE CheckNotCreated@122();
    BEGIN
      if Status = Status::Created then
        ERROR(DocAlreadyCreatedErr);
    END;

    [Internal]
    PROCEDURE CreateDocumentWithDataExchange@126();
    VAR
      RelatedRecord@1000 : Variant;
    BEGIN
      if GetNAVRecord(RelatedRecord) then
        ERROR(DocAlreadyCreatedErr);

      CreateWithDataExchange("Document Type"::" ")
    END;

    [Internal]
    PROCEDURE TryCreateDocumentWithDataExchange@73();
    BEGIN
      CreateDocumentWithDataExchange
    END;

    [Internal]
    PROCEDURE CreateReleasedDocumentWithDataExchange@72();
    VAR
      PurchaseHeader@1002 : Record "Purchase Header";
      ReleasePurchaseDocument@1003 : Codeunit "Release Purchase Document";
      Variant@1001 : Variant;
      RecordRef@1000 : RecordRef;
    BEGIN
      CreateWithDataExchange("Document Type"::" ");
      GetNAVRecord(Variant);
      RecordRef.GETTABLE(Variant);
      if RecordRef.NUMBER <> DATABASE::"Purchase Header" then
        exit;
      RecordRef.SETTABLE(PurchaseHeader);
      ReleasePurchaseDocument.PerformManualRelease(PurchaseHeader);
    END;

    LOCAL PROCEDURE CreateWithDataExchange@51(DocumentType@1001 : Option);
    VAR
      ErrorMessage@1000 : Record "Error Message";
      ApprovalsMgmt@1002 : Codeunit "Approvals Mgmt.";
      ReleaseIncomingDocument@1003 : Codeunit "Release Incoming Document";
      OldStatus@1004 : Option;
    BEGIN
      FIND;

      if ApprovalsMgmt.IsIncomingDocApprovalsWorkflowEnabled(Rec) and (Status = Status::New) then
        ERROR(DocWhenApprovalIsCompleteErr);

      OnCheckIncomingDocCreateDocRestrictions;

      if "Data Exchange Type" = '' then
        ERROR(DataExchangeTypeEmptyErr);

      "Document Type" := DocumentType;
      MODIFY;

      ClearErrorMessages;
      TestReadyForProcessing;

      CheckNotCreated;

      if Status in [Status::New,Status::Failed] then begin
        OldStatus := Status;
        CODEUNIT.RUN(CODEUNIT::"Release Incoming Document",Rec);
        TESTFIELD(Status,Status::Released);
        Status := OldStatus;
        MODIFY;
      end;

      COMMIT;
      if not CODEUNIT.RUN(CODEUNIT::"Incoming Doc. with Data. Exch.",Rec) then begin
        ErrorMessage.CopyFromTemp(TempErrorMessage);
        SetProcessFailed('');
        exit;
      end;

      ErrorMessage.SetContext(RECORDID);
      if ErrorMessage.HasErrors(false) then begin
        SetProcessFailed('');
        exit;
      end;

      // identify the created doc
      if not UpdateDocumentFields then begin
        SetProcessFailed('');
        exit;
      end;

      ReleaseIncomingDocument.Create(Rec);

      if ErrorMessage.ErrorMessageCount(ErrorMessage."Message Type"::Warning) > 0 then
        MESSAGE(DocCreatedWarningsMsg,FORMAT("Document Type"),"Document No.")
      else
        MESSAGE(DocCreatedMsg,FORMAT("Document Type"),"Document No.");
    END;

    [Internal]
    PROCEDURE CreateManually@271();
    VAR
      RelatedRecord@1002 : Variant;
      DocumentTypeOption@1000 : Integer;
    BEGIN
      if GetNAVRecord(RelatedRecord) then
        ERROR(DocAlreadyCreatedErr);

      DocumentTypeOption :=
        STRMENU(
          STRSUBSTNO('%1,%2,%3,%4,%5',JournalTxt,SalesInvoiceTxt,SalesCreditMemoTxt,PurchaseInvoiceTxt,PurchaseCreditMemoTxt),1);

      if DocumentTypeOption < 1 then
        exit;

      DocumentTypeOption -= 1;

      case DocumentTypeOption of
        "Document Type"::"Purchase Invoice":
          CreatePurchInvoice;
        "Document Type"::"Purchase Credit Memo":
          CreatePurchCreditMemo;
        "Document Type"::"Sales Invoice":
          CreateSalesInvoice;
        "Document Type"::"Sales Credit Memo":
          CreateSalesCreditMemo;
        "Document Type"::Journal:
          CreateGenJnlLine;
      end;
    END;

    [Internal]
    PROCEDURE CreateGenJnlLine@5();
    VAR
      GenJnlLine@1000 : Record "Gen. Journal Line";
      LastGenJnlLine@1002 : Record "Gen. Journal Line";
      LineNo@1001 : Integer;
    BEGIN
      if "Document Type" <> "Document Type"::Journal then
        TestIfAlreadyExists;
      TestReadyForProcessing;
      IncomingDocumentsSetup.TESTFIELD("General Journal Template Name");
      IncomingDocumentsSetup.TESTFIELD("General Journal Batch Name");
      GenJnlLine.SETRANGE("Journal Template Name",IncomingDocumentsSetup."General Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name",IncomingDocumentsSetup."General Journal Batch Name");
      GenJnlLine.SETRANGE("Incoming Document Entry No.","Entry No.");
      if not GenJnlLine.ISEMPTY then
        exit; // instead; go to the document

      GenJnlLine.SETRANGE("Incoming Document Entry No.");

      "Document Type" := "Document Type"::Journal;

      if GenJnlLine.FINDLAST then;
      LastGenJnlLine := GenJnlLine;
      LineNo := GenJnlLine."Line No." + 10000;
      GenJnlLine.INIT;
      GenJnlLine."Journal Template Name" := IncomingDocumentsSetup."General Journal Template Name";
      GenJnlLine."Journal Batch Name" := IncomingDocumentsSetup."General Journal Batch Name";
      GenJnlLine."Line No." := LineNo;
      GenJnlLine.SetUpNewLine(LastGenJnlLine,0,true);
      GenJnlLine."Incoming Document Entry No." := "Entry No.";
      GenJnlLine.Description := COPYSTR(Description,1,MAXSTRLEN(GenJnlLine.Description));

      if GenJnlLine.INSERT(true) then
        OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
      else
        OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);

      if GenJnlLine.HASLINKS then
        GenJnlLine.DELETELINKS;
      if GetURL <> '' then
        GenJnlLine.ADDLINK(GetURL,Description);

      ShowNAVRecord;
    END;

    [Internal]
    PROCEDURE CreatePurchInvoice@6();
    BEGIN
      if "Document Type" <> "Document Type"::"Purchase Invoice" then
        TestIfAlreadyExists;

      "Document Type" := "Document Type"::"Purchase Invoice";
      CreatePurchDoc(DocumentType::Invoice);
    END;

    [Internal]
    PROCEDURE CreatePurchCreditMemo@7();
    BEGIN
      if "Document Type" <> "Document Type"::"Purchase Credit Memo" then
        TestIfAlreadyExists;

      "Document Type" := "Document Type"::"Purchase Credit Memo";
      CreatePurchDoc(DocumentType::"Credit Memo");
    END;

    [Internal]
    PROCEDURE CreateSalesInvoice@8();
    BEGIN
      if "Document Type" <> "Document Type"::"Sales Invoice" then
        TestIfAlreadyExists;

      "Document Type" := "Document Type"::"Sales Invoice";
      CreateSalesDoc(DocumentType::Invoice);
    END;

    [Internal]
    PROCEDURE CreateSalesCreditMemo@9();
    BEGIN
      if "Document Type" <> "Document Type"::"Sales Credit Memo" then
        TestIfAlreadyExists;

      "Document Type" := "Document Type"::"Sales Credit Memo";
      CreateSalesDoc(DocumentType::"Credit Memo");
    END;

    [Internal]
    PROCEDURE CreateGeneralJournalLineWithDataExchange@45();
    VAR
      ErrorMessage@1002 : Record "Error Message";
      RelatedRecord@1000 : Variant;
    BEGIN
      if GetNAVRecord(RelatedRecord) then
        ERROR(DocAlreadyCreatedErr);

      CreateWithDataExchange("Document Type"::Journal);

      ErrorMessage.SetContext(RECORDID);
      if not ErrorMessage.HasErrors(false) then
        OnAfterCreateGenJnlLineFromIncomingDocSuccess(Rec)
      else
        OnAfterCreateGenJnlLineFromIncomingDocFail(Rec);
    END;

    [Internal]
    PROCEDURE TryCreateGeneralJournalLineWithDataExchange@272();
    BEGIN
      CreateGeneralJournalLineWithDataExchange
    END;

    [External]
    PROCEDURE RemoveReferenceToWorkingDocument@36(EntryNo@1000 : Integer);
    BEGIN
      if EntryNo = 0 then
        exit;
      if not GET(EntryNo) then
        exit;

      TESTFIELD(Posted,false);

      "Document Type" := "Document Type"::" ";
      "Document No." := '';
      // To clear the filters and prevent the page from putting values back
      SETRANGE("Document Type");
      SETRANGE("Document No.");

      if Released then
        Status := Status::Released
      else
        Status := Status::New;

      ClearErrorMessages;
      "Created Doc. Error Msg. Type" := "Created Doc. Error Msg. Type"::Error;

      MODIFY;
    END;

    LOCAL PROCEDURE RemoveIncomingDocumentEntryNoFromUnpostedDocument@83();
    VAR
      SalesHeader@1004 : Record "Sales Header";
      DataTypeManagement@1003 : Codeunit "Data Type Management";
      RelatedRecordRecordRef@1002 : RecordRef;
      RelatedRecordFieldRef@1001 : FieldRef;
      RelatedRecord@1000 : Variant;
    BEGIN
      if not GetUnpostedNAVRecord(RelatedRecord) then
        exit;
      RelatedRecordRecordRef.GETTABLE(RelatedRecord);
      DataTypeManagement.FindFieldByName(
        RelatedRecordRecordRef,RelatedRecordFieldRef,SalesHeader.FIELDNAME("Incoming Document Entry No."));
      RelatedRecordFieldRef.VALUE := 0;
      RelatedRecordRecordRef.MODIFY(true);
    END;

    [External]
    PROCEDURE CreateIncomingDocument@25(NewDescription@1003 : Text;NewURL@1002 : Text) : Integer;
    BEGIN
      RESET;
      CLEAR(Rec);
      INIT;
      Description := COPYSTR(NewDescription,1,MAXSTRLEN(Description));
      SetURL(NewURL);
      INSERT(true);
      exit("Entry No.");
    END;

    [Internal]
    PROCEDURE CreateIncomingDocumentFromServerFile@40(FileName@1000 : Text;FilePath@1001 : Text);
    VAR
      IncomingDocument@1006 : Record "Incoming Document";
    BEGIN
      if (FileName = '') or (FilePath = '') then
        exit;
      IncomingDocument.COPYFILTERS(Rec);
      CreateIncomingDocument(FileName,'');
      AddAttachmentFromServerFile(FileName,FilePath);
      COPYFILTERS(IncomingDocument);
    END;

    LOCAL PROCEDURE TestIfAlreadyExists@33();
    VAR
      GenJnlLine@1002 : Record "Gen. Journal Line";
      SalesHeader@1001 : Record "Sales Header";
      PurchaseHeader@1000 : Record "Purchase Header";
    BEGIN
      case "Document Type" of
        "Document Type"::Journal:
          begin
            GenJnlLine.SETRANGE("Incoming Document Entry No.","Entry No.");
            if GenJnlLine.FINDFIRST then
              ERROR(AlreadyUsedInJnlErr,GenJnlLine."Journal Batch Name",GenJnlLine."Line No.");
          end;
        "Document Type"::"Sales Invoice","Document Type"::"Sales Credit Memo":
          begin
            SalesHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
            if SalesHeader.FINDFIRST then
              ERROR(AlreadyUsedInDocHdrErr,SalesHeader."Document Type",SalesHeader."No.",SalesHeader.TABLECAPTION);
          end;
        "Document Type"::"Purchase Invoice","Document Type"::"Purchase Credit Memo":
          begin
            PurchaseHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
            if PurchaseHeader.FINDFIRST then
              ERROR(AlreadyUsedInDocHdrErr,PurchaseHeader."Document Type",PurchaseHeader."No.",PurchaseHeader.TABLECAPTION);
          end;
      end;
    END;

    [External]
    PROCEDURE TestReadyForProcessing@24();
    BEGIN
      TestReadyForProcessingForcePosted(false);
    END;

    LOCAL PROCEDURE TestReadyForProcessingForcePosted@77(ForcePosted@1000 : Boolean);
    BEGIN
      if not ForcePosted and Posted then
        ERROR(DocPostedErr);

      IncomingDocumentsSetup.Fetch;
      if IncomingDocumentsSetup."Require Approval To Create" and (not Released) then
        ERROR(DocApprovedErr);
    END;

    [External]
    PROCEDURE PostedDocExists@35(DocumentNo@1000 : Code[20];PostingDate@1001 : Date) : Boolean;
    BEGIN
      SETRANGE(Posted,true);
      SETRANGE("Document No.",DocumentNo);
      SETRANGE("Posting Date",PostingDate);
      exit(not ISEMPTY);
    END;

    [External]
    PROCEDURE GetPostedDocType@79(PostingDate@1000 : Date;DocNo@1001 : Code[20];VAR IsPosted@1003 : Boolean) : Integer;
    VAR
      SalesInvoiceHeader@1008 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1007 : Record "Sales Cr.Memo Header";
      PurchInvHeader@1006 : Record "Purch. Inv. Header";
      PurchCrMemoHdr@1005 : Record "Purch. Cr. Memo Hdr.";
      GLEntry@1002 : Record "G/L Entry";
    BEGIN
      IsPosted := true;
      case true of
        ((PostingDate = 0D) or (DocNo = '')):
          exit("Document Type"::" ");
        PurchInvHeader.GET(DocNo):
          if PurchInvHeader."Posting Date" = PostingDate then
            exit("Document Type"::"Purchase Invoice");
        PurchCrMemoHdr.GET(DocNo):
          if PurchCrMemoHdr."Posting Date" = PostingDate then
            exit("Document Type"::"Purchase Credit Memo");
        SalesInvoiceHeader.GET(DocNo):
          if SalesInvoiceHeader."Posting Date" = PostingDate then
            exit("Document Type"::"Sales Invoice");
        SalesCrMemoHeader.GET(DocNo):
          if SalesCrMemoHeader."Posting Date" = PostingDate then
            exit("Document Type"::"Sales Credit Memo");
        else
          GLEntry.SETRANGE("Posting Date",PostingDate);
          GLEntry.SETRANGE("Document No.",DocNo);
          IsPosted := not GLEntry.ISEMPTY;
          exit("Document Type"::Journal);
      end;
      IsPosted := false;
      exit("Document Type"::" ");
    END;

    [External]
    PROCEDURE SetPostedDocFields@10(PostingDate@1000 : Date;DocNo@1001 : Code[20]);
    BEGIN
      SetPostedDocFieldsForcePosted(PostingDate,DocNo,false);
    END;

    [External]
    PROCEDURE SetPostedDocFieldsForcePosted@82(PostingDate@1000 : Date;DocNo@1001 : Code[20];ForcePosted@1003 : Boolean);
    VAR
      IncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";
    BEGIN
      TestReadyForProcessingForcePosted(ForcePosted);
      Posted := true;
      Status := Status::Posted;
      Processed := true;
      "Posted Date-Time" := CURRENTDATETIME;
      "Document No." := DocNo;
      "Posting Date" := PostingDate;
      ClearErrorMessages;
      MODIFY(true);
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.MODIFYALL("Document No.","Document No.");
      IncomingDocumentAttachment.MODIFYALL("Posting Date","Posting Date");
    END;

    [External]
    PROCEDURE UndoPostedDocFields@27();
    VAR
      IncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";
      DummyRecordID@1000 : RecordID;
    BEGIN
      if "Entry No." = 0 then
        exit;
      if not Posted then
        exit;
      if not CONFIRM(STRSUBSTNO(DetachQst,"Document No.","Posting Date"),false) then
        exit;
      Posted := false;
      Processed := false;
      Status := Status::Released;
      "Posted Date-Time" := 0DT;
      "Related Record ID" := DummyRecordID;
      "Document No." := '';
      "Document Type" := "Document Type"::" ";
      "Posting Date" := 0D;

      // To clear the filters and prevent the page from putting values back
      SETRANGE("Posted Date-Time");
      SETRANGE("Document No.");
      SETRANGE("Document Type");
      SETRANGE("Posting Date");

      MODIFY(true);
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.MODIFYALL("Document No.","Document No.");
      IncomingDocumentAttachment.MODIFYALL("Posting Date","Posting Date");

      MESSAGE(RemovePostedRecordManuallyMsg);
    END;

    [External]
    PROCEDURE UpdateIncomingDocumentFromPosting@12(IncomingDoumentNo@1000 : Integer;PostingDate@1001 : Date;DocNo@1002 : Code[20]);
    VAR
      IncomingDocument@1003 : Record "Incoming Document";
    BEGIN
      if IncomingDoumentNo = 0 then
        exit;

      if not IncomingDocument.GET(IncomingDoumentNo) then
        exit;

      IncomingDocument.SetPostedDocFieldsForcePosted(PostingDate,DocNo,true);
      IncomingDocument.MODIFY;
    END;

    LOCAL PROCEDURE ClearRelatedRecords@21();
    VAR
      GenJnlLine@1002 : Record "Gen. Journal Line";
      SalesHeader@1001 : Record "Sales Header";
      PurchaseHeader@1000 : Record "Purchase Header";
    BEGIN
      case "Document Type" of
        "Document Type"::Journal:
          begin
            GenJnlLine.SETRANGE("Incoming Document Entry No.","Entry No.");
            GenJnlLine.MODIFYALL("Incoming Document Entry No.",0,true);
          end;
        "Document Type"::"Sales Invoice","Document Type"::"Sales Credit Memo":
          begin
            SalesHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
            SalesHeader.MODIFYALL("Incoming Document Entry No.",0,true);
          end;
        "Document Type"::"Purchase Invoice","Document Type"::"Purchase Credit Memo":
          begin
            PurchaseHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
            PurchaseHeader.MODIFYALL("Incoming Document Entry No.",0,true);
          end;
      end;
    END;

    LOCAL PROCEDURE CreateSalesDoc@14(DocType@1000 : Option);
    VAR
      SalesHeader@1001 : Record "Sales Header";
    BEGIN
      TestReadyForProcessing;
      SalesHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
      if not SalesHeader.ISEMPTY then begin
        ShowNAVRecord;
        exit;
      end;
      SalesHeader.RESET;
      SalesHeader.INIT;
      case DocType of
        DocumentType::Invoice:
          SalesHeader."Document Type" := SalesHeader."Document Type"::Invoice;
        DocumentType::"Credit Memo":
          SalesHeader."Document Type" := SalesHeader."Document Type"::"Credit Memo";
      end;
      SalesHeader.INSERT(true);
      OnAfterCreateSalesHeaderFromIncomingDoc(SalesHeader);
      if GetURL <> '' then
        SalesHeader.ADDLINK(GetURL,Description);
      SalesHeader."Incoming Document Entry No." := "Entry No.";
      SalesHeader.MODIFY;
      "Document No." := SalesHeader."No.";
      MODIFY(true);
      COMMIT;
      ShowNAVRecord;
    END;

    LOCAL PROCEDURE CreatePurchDoc@15(DocType@1000 : Option);
    VAR
      PurchHeader@1001 : Record "Purchase Header";
    BEGIN
      TestReadyForProcessing;
      PurchHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
      if not PurchHeader.ISEMPTY then begin
        ShowNAVRecord;
        exit;
      end;
      PurchHeader.RESET;
      PurchHeader.INIT;
      case DocType of
        DocumentType::Invoice:
          PurchHeader."Document Type" := PurchHeader."Document Type"::Invoice;
        DocumentType::"Credit Memo":
          PurchHeader."Document Type" := PurchHeader."Document Type"::"Credit Memo";
      end;
      PurchHeader.INSERT(true);
      OnAfterCreatePurchHeaderFromIncomingDoc(PurchHeader);
      if GetURL <> '' then
        PurchHeader.ADDLINK(GetURL,Description);
      PurchHeader."Incoming Document Entry No." := "Entry No.";
      PurchHeader.MODIFY;
      "Document No." := PurchHeader."No.";
      MODIFY(true);
      COMMIT;
      ShowNAVRecord;
    END;

    [Internal]
    PROCEDURE SetGenJournalLine@17(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      if GenJnlLine."Incoming Document Entry No." = 0 then
        exit;
      GET(GenJnlLine."Incoming Document Entry No.");
      TestReadyForProcessing;
      TestIfAlreadyExists;
      "Document Type" := "Document Type"::Journal;
      MODIFY(true);
      if not DocLinkExists(GenJnlLine) then
        GenJnlLine.ADDLINK(GetURL,Description);
    END;

    [Internal]
    PROCEDURE SetSalesDoc@19(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
      if SalesHeader."Incoming Document Entry No." = 0 then
        exit;
      GET(SalesHeader."Incoming Document Entry No.");
      TestReadyForProcessing;
      TestIfAlreadyExists;
      case SalesHeader."Document Type" of
        SalesHeader."Document Type"::Invoice:
          "Document Type" := "Document Type"::"Sales Invoice";
        SalesHeader."Document Type"::"Credit Memo":
          "Document Type" := "Document Type"::"Sales Credit Memo";
      end;
      MODIFY;
      if not DocLinkExists(SalesHeader) then
        SalesHeader.ADDLINK(GetURL,Description);
    END;

    [Internal]
    PROCEDURE SetPurchDoc@23(VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      if PurchaseHeader."Incoming Document Entry No." = 0 then
        exit;
      GET(PurchaseHeader."Incoming Document Entry No.");
      TestReadyForProcessing;
      TestIfAlreadyExists;
      case PurchaseHeader."Document Type" of
        PurchaseHeader."Document Type"::Invoice:
          "Document Type" := "Document Type"::"Purchase Invoice";
        PurchaseHeader."Document Type"::"Credit Memo":
          "Document Type" := "Document Type"::"Purchase Credit Memo";
      end;
      MODIFY;
      if not DocLinkExists(PurchaseHeader) then
        PurchaseHeader.ADDLINK(GetURL,Description);
    END;

    LOCAL PROCEDURE DocLinkExists@18(RecVar@1000 : Variant) : Boolean;
    VAR
      RecordLink@1002 : Record "Record Link";
      RecRef@1001 : RecordRef;
    BEGIN
      if GetURL = '' then
        exit(true);
      RecRef.GETTABLE(RecVar);
      RecordLink.SETRANGE("Record ID",RecRef.RECORDID);
      RecordLink.SETRANGE(URL1,URL1);
      RecordLink.SETRANGE(Description,Description);
      exit(not RecordLink.ISEMPTY);
    END;

    [Internal]
    PROCEDURE HyperlinkToDocument@20(DocumentNo@1000 : Code[20];PostingDate@1001 : Date);
    VAR
      IncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";
    BEGIN
      SETRANGE("Document No.",DocumentNo);
      SETRANGE("Posting Date",PostingDate);
      if not FINDFIRST then begin
        MESSAGE(NoDocumentMsg);
        exit;
      end;
      if GetURL <> '' then begin
        HYPERLINK(GetURL);
        exit;
      end;
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.SETFILTER(Type,'<>%1',IncomingDocumentAttachment.Type::XML);
      if IncomingDocumentAttachment.FINDFIRST then
        IncomingDocumentAttachment.Export('',true);
    END;

    [External]
    PROCEDURE ShowCard@26(DocumentNo@1000 : Code[20];PostingDate@1001 : Date);
    BEGIN
      SETRANGE("Document No.",DocumentNo);
      SETRANGE("Posting Date",PostingDate);
      if not FINDFIRST then
        exit;
      SETRECFILTER;
      PAGE.RUN(PAGE::"Incoming Document",Rec);
    END;

    [External]
    PROCEDURE ShowCardFromEntryNo@32(EntryNo@1000 : Integer);
    BEGIN
      if EntryNo = 0 then
        exit;
      GET(EntryNo);
      SETRECFILTER;
      PAGE.RUN(PAGE::"Incoming Document",Rec);
    END;

    [External]
    PROCEDURE ImportAttachment@13(VAR IncomingDocument@1001 : Record "Incoming Document");
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.NewAttachment;
      IncomingDocument.GET(IncomingDocumentAttachment."Incoming Document Entry No.")
    END;

    [Internal]
    PROCEDURE AddXmlAttachmentFromXmlText@42(VAR IncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";OrgFileName@1000 : Text;XmlText@1001 : Text);
    VAR
      FileManagement@1004 : Codeunit "File Management";
      OutStr@1003 : OutStream;
    BEGIN
      TESTFIELD("Entry No.");
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      if not IncomingDocumentAttachment.FINDLAST then
        IncomingDocumentAttachment."Line No." := 10000
      else
        IncomingDocumentAttachment."Line No." += 10000;
      IncomingDocumentAttachment."Incoming Document Entry No." := "Entry No.";
      IncomingDocumentAttachment.INIT;
      IncomingDocumentAttachment.Name :=
        COPYSTR(FileManagement.GetFileNameWithoutExtension(OrgFileName),1,MAXSTRLEN(IncomingDocumentAttachment.Name));
      IncomingDocumentAttachment.VALIDATE("File Extension",'xml');
      IncomingDocumentAttachment.Content.CREATEOUTSTREAM(OutStr,TEXTENCODING::UTF8);
      OutStr.WRITETEXT(XmlText);
      IncomingDocumentAttachment.INSERT(true);
      if IncomingDocumentAttachment.Type in [IncomingDocumentAttachment.Type::Image,IncomingDocumentAttachment.Type::PDF] then
        IncomingDocumentAttachment.OnAttachBinaryFile;
    END;

    [Internal]
    PROCEDURE AddAttachmentFromStream@43(VAR IncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";OrgFileName@1000 : Text;FileExtension@1006 : Text;VAR InStr@1001 : InStream);
    VAR
      FileManagement@1004 : Codeunit "File Management";
      OutStr@1003 : OutStream;
    BEGIN
      TESTFIELD("Entry No.");
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      if not IncomingDocumentAttachment.FINDLAST then
        IncomingDocumentAttachment."Line No." := 10000
      else
        IncomingDocumentAttachment."Line No." += 10000;
      IncomingDocumentAttachment."Incoming Document Entry No." := "Entry No.";
      IncomingDocumentAttachment.INIT;
      IncomingDocumentAttachment.Name :=
        COPYSTR(FileManagement.GetFileNameWithoutExtension(OrgFileName),1,MAXSTRLEN(IncomingDocumentAttachment.Name));
      IncomingDocumentAttachment.VALIDATE(
        "File Extension",COPYSTR(FileExtension,1,MAXSTRLEN(IncomingDocumentAttachment."File Extension")));
      IncomingDocumentAttachment.Content.CREATEOUTSTREAM(OutStr);
      COPYSTREAM(OutStr,InStr);
      IncomingDocumentAttachment.INSERT(true);
    END;

    [Internal]
    PROCEDURE AddAttachmentFromServerFile@44(FileName@1000 : Text;FilePath@1001 : Text);
    VAR
      IncomingDocumentAttachment@1005 : Record "Incoming Document Attachment";
      FileManagement@1004 : Codeunit "File Management";
      File@1003 : File;
      InStr@1002 : InStream;
    BEGIN
      if (FileName = '') or (FilePath = '') then
        exit;
      if not File.OPEN(FilePath) then
        exit;
      File.CREATEINSTREAM(InStr);
      AddAttachmentFromStream(IncomingDocumentAttachment,FileName,FileManagement.GetExtension(FileName),InStr);
      File.CLOSE;
      if ERASE(FilePath) then;
    END;

    LOCAL PROCEDURE SetProcessFailed@28(ErrorMsg@1000 : Text[250]);
    VAR
      ErrorMessage@1001 : Record "Error Message";
      ReleaseIncomingDocument@1002 : Codeunit "Release Incoming Document";
    BEGIN
      ReleaseIncomingDocument.Fail(Rec);

      if ErrorMsg = '' then begin
        ErrorMsg := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ErrorMessage.Description));
        CLEARLASTERROR;
      end;

      if ErrorMsg <> '' then begin
        ErrorMessage.SetContext(RECORDID);
        ErrorMessage.LogSimpleMessage(ErrorMessage."Message Type"::Error,ErrorMsg);
      end;

      if GUIALLOWED then
        MESSAGE(DocNotCreatedMsg);
    END;

    [TryFunction]
    LOCAL PROCEDURE UpdateDocumentFields@30();
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      SalesHeader@1001 : Record "Sales Header";
      GenJournalLine@1002 : Record "Gen. Journal Line";
    BEGIN
      // If purchase
      PurchaseHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
      if PurchaseHeader.FINDFIRST then begin
        case PurchaseHeader."Document Type" of
          PurchaseHeader."Document Type"::Invoice:
            "Document Type" := "Document Type"::"Purchase Invoice";
          PurchaseHeader."Document Type"::"Credit Memo":
            "Document Type" := "Document Type"::"Purchase Credit Memo";
          else
            ERROR(NotSupportedPurchErr,FORMAT(PurchaseHeader."Document Type"));
        end;
        "Document No." := PurchaseHeader."No.";
        exit;
      end;

      // If sales
      SalesHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
      if SalesHeader.FINDFIRST then begin
        case SalesHeader."Document Type" of
          SalesHeader."Document Type"::Invoice:
            "Document Type" := "Document Type"::"Sales Invoice";
          SalesHeader."Document Type"::"Credit Memo":
            "Document Type" := "Document Type"::"Sales Credit Memo";
          else
            ERROR(NotSupportedSalesErr,FORMAT(SalesHeader."Document Type"));
        end;
        "Document No." := SalesHeader."No.";
        exit;
      end;

      // If general journal line
      GenJournalLine.SETRANGE("Incoming Document Entry No.","Entry No.");
      if GenJournalLine.FINDFIRST then begin
        "Document No." := GenJournalLine."Document No.";
        exit;
      end;

      ERROR(EntityNotFoundErr);
    END;

    LOCAL PROCEDURE ClearErrorMessages@38();
    VAR
      ErrorMessage@1000 : Record "Error Message";
    BEGIN
      ErrorMessage.SETRANGE("Context Record ID",RECORDID);
      ErrorMessage.DELETEALL;
      TempErrorMessage.SETRANGE("Context Record ID",RECORDID);
      TempErrorMessage.DELETEALL;
    END;

    [External]
    PROCEDURE SelectIncomingDocument@29(EntryNo@1000 : Integer;RelatedRecordID@1004 : RecordID) : Integer;
    VAR
      IncomingDocumentsSetup@1003 : Record "Incoming Documents Setup";
      IncomingDocument@1001 : Record "Incoming Document";
      IncomingDocuments@1002 : Page "Incoming Documents";
    BEGIN
      if EntryNo <> 0 then begin
        IncomingDocument.GET(EntryNo);
        IncomingDocuments.SETRECORD(IncomingDocument);
      end;
      if IncomingDocumentsSetup.GET then
        if IncomingDocumentsSetup."Require Approval To Create" then
          IncomingDocument.SETRANGE(Released,true);
      IncomingDocument.SETRANGE(Posted,false);
      IncomingDocuments.SETTABLEVIEW(IncomingDocument);
      IncomingDocuments.LOOKUPMODE := true;
      if IncomingDocuments.RUNMODAL = ACTION::LookupOK then begin
        IncomingDocuments.GETRECORD(IncomingDocument);
        IncomingDocument.VALIDATE("Related Record ID",RelatedRecordID);
        IncomingDocument.MODIFY;
        exit(IncomingDocument."Entry No.");
      end;
      exit(EntryNo);
    END;

    [External]
    PROCEDURE SelectIncomingDocumentForPostedDocument@34(DocumentNo@1000 : Code[20];PostingDate@1003 : Date;RelatedRecordID@1005 : RecordID);
    VAR
      IncomingDocument@1001 : Record "Incoming Document";
      EntryNo@1002 : Integer;
      IsPosted@1004 : Boolean;
    BEGIN
      if (DocumentNo = '') or (PostingDate = 0D) then
        exit;
      EntryNo := SelectIncomingDocument(0,RelatedRecordID);
      if EntryNo = 0 then
        exit;

      IncomingDocument.GET(EntryNo);
      IncomingDocument.SetPostedDocFields(PostingDate,DocumentNo);
      IncomingDocument."Document Type" := GetPostedDocType(PostingDate,DocumentNo,IsPosted);
    END;

    [Internal]
    PROCEDURE SendToJobQueue@55(ShowMessages@1001 : Boolean);
    VAR
      SendIncomingDocumentToOCR@1000 : Codeunit "Send Incoming Document to OCR";
    BEGIN
      SendIncomingDocumentToOCR.SetShowMessages(ShowMessages);
      SendIncomingDocumentToOCR.SendToJobQueue(Rec);
    END;

    [Internal]
    PROCEDURE ResetOriginalOCRData@46();
    VAR
      OCRServiceMgt@1000 : Codeunit "OCR Service Mgt.";
      OriginalXMLRootNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      OCRServiceMgt.GetOriginalOCRXMLRootNode(Rec,OriginalXMLRootNode);
      OCRServiceMgt.UpdateIncomingDocWithOCRData(Rec,OriginalXMLRootNode);
    END;

    [Internal]
    PROCEDURE UploadCorrectedOCRData@49() : Boolean;
    VAR
      OCRServiceMgt@1000 : Codeunit "OCR Service Mgt.";
    BEGIN
      exit(OCRServiceMgt.UploadCorrectedOCRFile(Rec))
    END;

    [External]
    PROCEDURE SaveErrorMessages@39(VAR TempErrorMessageRef@1000 : TEMPORARY Record "Error Message");
    BEGIN
      if not TempErrorMessageRef.FINDSET then
        exit;

      repeat
        TempErrorMessage := TempErrorMessageRef;
        TempErrorMessage.INSERT;
      until TempErrorMessageRef.NEXT = 0;
    END;

    [External]
    PROCEDURE RemoveFromJobQueue@41(ShowMessages@1001 : Boolean);
    VAR
      SendIncomingDocumentToOCR@1000 : Codeunit "Send Incoming Document to OCR";
    BEGIN
      SendIncomingDocumentToOCR.SetShowMessages(ShowMessages);
      SendIncomingDocumentToOCR.RemoveFromJobQueue(Rec);
    END;

    [Internal]
    PROCEDURE SendToOCR@31(ShowMessages@1001 : Boolean);
    VAR
      SendIncomingDocumentToOCR@1000 : Codeunit "Send Incoming Document to OCR";
    BEGIN
      SendIncomingDocumentToOCR.SetShowMessages(ShowMessages);
      SendIncomingDocumentToOCR.SendDocToOCR(Rec);
      SendIncomingDocumentToOCR.ScheduleJobQueueReceive;
    END;

    [External]
    PROCEDURE SetStatus@66(NewStatus@1000 : Option);
    BEGIN
      Status := NewStatus;
      MODIFY;
    END;

    [Internal]
    PROCEDURE RetrieveFromOCR@37(ShowMessages@1001 : Boolean);
    VAR
      SendIncomingDocumentToOCR@1000 : Codeunit "Send Incoming Document to OCR";
    BEGIN
      SendIncomingDocumentToOCR.SetShowMessages(ShowMessages);
      SendIncomingDocumentToOCR.RetrieveDocFromOCR(Rec);
    END;

    [External]
    PROCEDURE GetGeneratedFromOCRAttachment@57(VAR IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment") : Boolean;
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.SETRANGE("Generated from OCR",true);
      exit(IncomingDocumentAttachment.FINDFIRST)
    END;

    [External]
    PROCEDURE GetDataExchangePath@48(FieldNumber@1000 : Integer) : Text;
    VAR
      DataExchangeType@1001 : Record "Data Exchange Type";
      DataExchLineDef@1003 : Record "Data Exch. Line Def";
      PurchaseHeader@1002 : Record "Purchase Header";
      VendorBankAccount@1004 : Record "Vendor Bank Account";
      Vendor@1005 : Record Vendor;
      GLEntry@1006 : Record "G/L Entry";
      DataExchangePath@1007 : Text;
    BEGIN
      if not DataExchangeType.GET("Data Exchange Type") then
        exit('');
      DataExchLineDef.SETRANGE("Data Exch. Def Code",DataExchangeType."Data Exch. Def. Code");
      DataExchLineDef.SETRANGE("Parent Code",'');
      if not DataExchLineDef.FINDFIRST then
        exit('');
      case FieldNumber of
        FIELDNO("Vendor Name"):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Buy-from Vendor Name")));
        FIELDNO("Vendor Id"):
          exit(DataExchLineDef.GetPath(DATABASE::Vendor,Vendor.FIELDNO(Id)));
        FIELDNO("Vendor VAT Registration No."):
          exit(DataExchLineDef.GetPath(DATABASE::Vendor,Vendor.FIELDNO("VAT Registration No.")));
        FIELDNO("Vendor IBAN"):
          exit(DataExchLineDef.GetPath(DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO(IBAN)));
        FIELDNO("Vendor Bank Branch No."):
          exit(DataExchLineDef.GetPath(DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Branch No.")));
        FIELDNO("Vendor Bank Account No."):
          exit(DataExchLineDef.GetPath(DATABASE::"Vendor Bank Account",VendorBankAccount.FIELDNO("Bank Account No.")));
        FIELDNO("Vendor Phone No."):
          exit(DataExchLineDef.GetPath(DATABASE::Vendor,Vendor.FIELDNO("Phone No.")));
        FIELDNO("Vendor Invoice No."):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Invoice No.")));
        FIELDNO("Document Date"):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Document Date")));
        FIELDNO("Due Date"):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Due Date")));
        FIELDNO("Currency Code"):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Currency Code")));
        FIELDNO("Amount Excl. VAT"):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO(Amount)));
        FIELDNO("Amount Incl. VAT"):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Amount Including VAT")));
        FIELDNO("Order No."):
          exit(DataExchLineDef.GetPath(DATABASE::"Purchase Header",PurchaseHeader.FIELDNO("Vendor Order No.")));
        FIELDNO("VAT Amount"):
          exit(DataExchLineDef.GetPath(DATABASE::"G/L Entry",GLEntry.FIELDNO("VAT Amount")));
        else begin
          OnGetDataExchangePath(DataExchLineDef,FieldNumber,DataExchangePath);
          if  DataExchangePath <> '' then
            exit(DataExchangePath);
        end;
      end;

      exit('');
    END;

    [Internal]
    PROCEDURE ShowNAVRecord@80();
    VAR
      PageManagement@1000 : Codeunit "Page Management";
      DataTypeManagement@1003 : Codeunit "Data Type Management";
      RecRef@1002 : RecordRef;
      RelatedRecord@1001 : Variant;
    BEGIN
      if GetNAVRecord(RelatedRecord) then begin
        DataTypeManagement.GetRecordRef(RelatedRecord,RecRef);
        PageManagement.PageRun(RecRef);
      end;
    END;

    [External]
    PROCEDURE GetNAVRecord@59(VAR RelatedRecord@1001 : Variant) : Boolean;
    BEGIN
      if Posted then
        exit(GetPostedNAVRecord(RelatedRecord));
      exit(GetUnpostedNAVRecord(RelatedRecord));
    END;

    LOCAL PROCEDURE GetPostedNAVRecord@53(VAR RelatedRecord@1000 : Variant) : Boolean;
    VAR
      SalesInvoiceHeader@1004 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1005 : Record "Sales Cr.Memo Header";
      PurchInvHeader@1003 : Record "Purch. Inv. Header";
      PurchCrMemoHdr@1006 : Record "Purch. Cr. Memo Hdr.";
      GLEntry@1002 : Record "G/L Entry";
      RelatedRecordRef@1001 : RecordRef;
    BEGIN
      if GetRelatedRecord(RelatedRecordRef) then begin
        RelatedRecord := RelatedRecordRef;
        exit(true);
      end;
      case "Document Type" of
        "Document Type"::Journal:
          begin
            GLEntry.SETCURRENTKEY("Document No.","Posting Date");
            GLEntry.SETRANGE("Document No.","Document No.");
            GLEntry.SETRANGE("Posting Date","Posting Date");
            if GLEntry.FINDFIRST then begin
              RelatedRecord := GLEntry;
              exit(true);
            end;
          end;
        "Document Type"::"Sales Invoice":
          if SalesInvoiceHeader.GET("Document No.") then begin
            RelatedRecord := SalesInvoiceHeader;
            exit(true);
          end;
        "Document Type"::"Sales Credit Memo":
          if SalesCrMemoHeader.GET("Document No.") then begin
            RelatedRecord := SalesCrMemoHeader;
            exit(true);
          end;
        "Document Type"::"Purchase Invoice":
          if PurchInvHeader.GET("Document No.") then begin
            RelatedRecord := PurchInvHeader;
            exit(true);
          end;
        "Document Type"::"Purchase Credit Memo":
          if PurchCrMemoHdr.GET("Document No.") then begin
            RelatedRecord := PurchCrMemoHdr;
            exit(true);
          end;
      end;
      exit(false);
    END;

    LOCAL PROCEDURE GetUnpostedNAVRecord@54(VAR RelatedRecord@1000 : Variant) : Boolean;
    VAR
      SalesHeader@1005 : Record "Sales Header";
      PurchaseHeader@1004 : Record "Purchase Header";
      GenJournalLine@1003 : Record "Gen. Journal Line";
      RelatedRecordRef@1001 : RecordRef;
    BEGIN
      if GetRelatedRecord(RelatedRecordRef) then begin
        RelatedRecord := RelatedRecordRef;
        exit(true);
      end;
      case "Document Type" of
        "Document Type"::Journal:
          begin
            GenJournalLine.SETRANGE("Incoming Document Entry No.","Entry No.");
            if GenJournalLine.FINDFIRST then begin
              GenJournalLine.SETRANGE("Journal Batch Name",GenJournalLine."Journal Batch Name");
              GenJournalLine.SETRANGE("Journal Template Name",GenJournalLine."Journal Template Name");
              RelatedRecord := GenJournalLine;
              exit(true)
            end;
          end;
        "Document Type"::"Sales Invoice",
        "Document Type"::"Sales Credit Memo":
          begin
            SalesHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
            if SalesHeader.FINDFIRST then begin
              RelatedRecord := SalesHeader;
              exit(true);
            end;
          end;
        "Document Type"::"Purchase Invoice",
        "Document Type"::"Purchase Credit Memo":
          begin
            PurchaseHeader.SETRANGE("Incoming Document Entry No.","Entry No.");
            if PurchaseHeader.FINDFIRST then begin
              RelatedRecord := PurchaseHeader;
              exit(true);
            end;
          end;
      end;
      exit(false)
    END;

    LOCAL PROCEDURE GetRelatedRecord@92(VAR RelatedRecordRef@1000 : RecordRef) : Boolean;
    VAR
      RelatedRecordID@1001 : RecordID;
    BEGIN
      RelatedRecordID := "Related Record ID";
      if RelatedRecordID.TABLENO = 0 then
        exit(false);
      RelatedRecordRef := RelatedRecordID.GETRECORD;
      exit(RelatedRecordRef.GET(RelatedRecordID));
    END;

    [External]
    PROCEDURE RemoveLinkToRelatedRecord@84();
    VAR
      DummyRecordID@1000 : RecordID;
    BEGIN
      "Related Record ID" := DummyRecordID;
      "Document No." := '';
      "Document Type" := "Document Type"::" ";
      MODIFY(true);
    END;

    [External]
    PROCEDURE RemoveReferencedRecords@11();
    VAR
      RecRef@1000 : RecordRef;
      NavRecordVariant@1001 : Variant;
    BEGIN
      if Posted then
        UndoPostedDocFields
      else begin
        if not CONFIRM(DoYouWantToRemoveReferenceQst) then
          exit;

        if CONFIRM(DeleteRecordQst) then
          if GetNAVRecord(NavRecordVariant) then begin
            RecRef.GETTABLE(NavRecordVariant);
            RecRef.DELETE(true);
            exit;
          end;

        RemoveIncomingDocumentEntryNoFromUnpostedDocument;
        RemoveReferenceToWorkingDocument("Entry No.");
      end;
    END;

    [Internal]
    PROCEDURE CreateFromAttachment@52();
    VAR
      IncomingDocumentAttachment@1001 : Record "Incoming Document Attachment";
      IncomingDocument@1004 : Record "Incoming Document";
    BEGIN
      if IncomingDocumentAttachment.Import then begin
        IncomingDocument.GET(IncomingDocumentAttachment."Incoming Document Entry No.");
        PAGE.RUN(PAGE::"Incoming Document",IncomingDocument);
      end;
    END;

    [External]
    PROCEDURE GetMainAttachment@16(VAR IncomingDocumentAttachment@1001 : Record "Incoming Document Attachment") : Boolean;
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.SETRANGE("Main Attachment",true);
      exit(IncomingDocumentAttachment.FINDFIRST);
    END;

    [External]
    PROCEDURE GetMainAttachmentFileName@60() : Text;
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      if GetMainAttachment(IncomingDocumentAttachment) then
        exit(IncomingDocumentAttachment.GetFullName);

      exit('');
    END;

    [External]
    PROCEDURE GetRecordLinkText@50() : Text;
    VAR
      DataTypeManagement@1001 : Codeunit "Data Type Management";
      RecRef@1000 : RecordRef;
      VariantRecord@1002 : Variant;
    BEGIN
      if GetNAVRecord(VariantRecord) and DataTypeManagement.GetRecordRef(VariantRecord,RecRef) then
        exit(GetRelatedRecordCaption(RecRef));
      exit('');
    END;

    LOCAL PROCEDURE GetRelatedRecordCaption@93(VAR RelatedRecordRef@1003 : RecordRef) : Text;
    VAR
      GenJournalLine@1001 : Record "Gen. Journal Line";
      RecCaption@1000 : Text;
    BEGIN
      if RelatedRecordRef.ISEMPTY then
        exit('');

      case RelatedRecordRef.NUMBER of
        DATABASE::"Sales Header":
          RecCaption := STRSUBSTNO('%1 %2',SalesTxt,GetRecordCaption(RelatedRecordRef));
        DATABASE::"Sales Invoice Header":
          RecCaption := STRSUBSTNO('%1 - %2',SalesInvoiceTxt,GetRecordCaption(RelatedRecordRef));
        DATABASE::"Sales Cr.Memo Header":
          RecCaption := STRSUBSTNO('%1 - %2',SalesCreditMemoTxt,GetRecordCaption(RelatedRecordRef));
        DATABASE::"Purchase Header":
          RecCaption := STRSUBSTNO('%1 %2',PurchaseTxt,GetRecordCaption(RelatedRecordRef));
        DATABASE::"Purch. Inv. Header":
          RecCaption := STRSUBSTNO('%1 - %2',PurchaseInvoiceTxt,GetRecordCaption(RelatedRecordRef));
        DATABASE::"Purch. Cr. Memo Hdr.":
          RecCaption := STRSUBSTNO('%1 - %2',PurchaseCreditMemoTxt,GetRecordCaption(RelatedRecordRef));
        DATABASE::"G/L Entry":
          RecCaption := STRSUBSTNO('%1 - %2',"Document Type",GeneralLedgerEntriesTxt);
        DATABASE::"Gen. Journal Line":
          if Posted then
            RecCaption := STRSUBSTNO('%1 - %2',"Document Type",GeneralLedgerEntriesTxt)
          else begin
            RelatedRecordRef.SETTABLE(GenJournalLine);
            if GenJournalLine."Document Type" <> GenJournalLine."Document Type"::" " then
              RecCaption := STRSUBSTNO('%1 - %2',GenJournalLine."Document Type",GetRecordCaption(RelatedRecordRef))
            else
              RecCaption := STRSUBSTNO('%1 - %2',JournalTxt,GetRecordCaption(RelatedRecordRef));
          end;
        else
          RecCaption := STRSUBSTNO('%1 - %2',RelatedRecordRef.CAPTION,GetRecordCaption(RelatedRecordRef));
      end;
      exit(RecCaption)
    END;

    LOCAL PROCEDURE GetRecordCaption@81(VAR RecRef@1005 : RecordRef) : Text;
    VAR
      KeyRef@1003 : KeyRef;
      FieldRef@1001 : FieldRef;
      KeyNo@1006 : Integer;
      FieldNo@1007 : Integer;
      RecCaption@1000 : Text;
    BEGIN
      for KeyNo := 1 to RecRef.KEYCOUNT do begin
        KeyRef := RecRef.KEYINDEX(KeyNo);
        if KeyRef.ACTIVE then begin
          for FieldNo := 1 to KeyRef.FIELDCOUNT do begin
            FieldRef := KeyRef.FIELDINDEX(FieldNo);
            if RecCaption <> '' then
              RecCaption := STRSUBSTNO('%1 - %2',RecCaption,FieldRef.VALUE)
            else
              RecCaption := FORMAT(FieldRef.VALUE);
          end;
          break;
        end
      end;
      exit(RecCaption);
    END;

    [External]
    PROCEDURE GetOCRResutlFileName@56() : Text;
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
      FileName@1001 : Text;
    BEGIN
      FileName := '';
      if GetGeneratedFromOCRAttachment(IncomingDocumentAttachment) then
        FileName := IncomingDocumentAttachment.GetFullName;

      exit(FileName);
    END;

    [Internal]
    PROCEDURE MainAttachmentDrillDown@47();
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      if not GetMainAttachment(IncomingDocumentAttachment) then begin
        IncomingDocumentAttachment.NewAttachment;
        exit;
      end;

      // Download
      IncomingDocumentAttachment.Export('',true);
    END;

    [Internal]
    PROCEDURE ReplaceOrInsertMainAttachment@71();
    BEGIN
      ReplaceMainAttachment('');
    END;

    [Internal]
    PROCEDURE ReplaceMainAttachment@69(FilePath@1001 : Text);
    VAR
      MainIncomingDocumentAttachment@1002 : Record "Incoming Document Attachment";
      NewIncomingDocumentAttachment@1004 : Record "Incoming Document Attachment";
      ImportAttachmentIncDoc@1003 : Codeunit "Import Attachment - Inc. Doc.";
    BEGIN
      if not CanReplaceMainAttachment then
        ERROR(CannotReplaceMainAttachmentErr);

      if not GetMainAttachment(MainIncomingDocumentAttachment) then begin
        MainIncomingDocumentAttachment.NewAttachment;
        exit;
      end;

      if not CONFIRM(ReplaceMainAttachmentQst) then
        exit;

      if FilePath = '' then
        ImportAttachmentIncDoc.UploadFile(NewIncomingDocumentAttachment,FilePath);

      if FilePath = '' then
        exit;

      MainIncomingDocumentAttachment.DELETE;
      COMMIT;

      NewIncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      ImportAttachmentIncDoc.ImportAttachment(NewIncomingDocumentAttachment,FilePath);
    END;

    [Internal]
    PROCEDURE ShowMainAttachment@70();
    VAR
      IncomingDocumentAttachment@1001 : Record "Incoming Document Attachment";
    BEGIN
      if GetMainAttachment(IncomingDocumentAttachment) then
        IncomingDocumentAttachment.Export('',true);
    END;

    [Internal]
    PROCEDURE OCRResultDrillDown@58();
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      if not GetGeneratedFromOCRAttachment(IncomingDocumentAttachment) then
        exit;

      IncomingDocumentAttachment.Export('',true);
    END;

    [External]
    PROCEDURE GetAdditionalAttachments@61(VAR IncomingDocumentAttachment@1001 : Record "Incoming Document Attachment") : Boolean;
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.SETRANGE("Main Attachment",false);
      IncomingDocumentAttachment.SETRANGE("Generated from OCR",false);
      exit(IncomingDocumentAttachment.FINDSET);
    END;

    [External]
    PROCEDURE DefaultAttachmentIsXML@62() : Boolean;
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      IncomingDocumentAttachment.SETRANGE(Default,true);

      if IncomingDocumentAttachment.FINDFIRST then
        exit(IncomingDocumentAttachment.Type = IncomingDocumentAttachment.Type::XML);

      exit(false);
    END;

    [External]
    PROCEDURE FindByDocumentNoAndPostingDate@67(MainRecordRef@1003 : RecordRef;VAR IncomingDocument@1006 : Record "Incoming Document") : Boolean;
    VAR
      SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
      VATEntry@1002 : Record "VAT Entry";
      DataTypeManagement@1001 : Codeunit "Data Type Management";
      DocumentNoFieldRef@1004 : FieldRef;
      PostingDateFieldRef@1005 : FieldRef;
      PostingDate@1007 : Date;
    BEGIN
      if not DataTypeManagement.FindFieldByName(MainRecordRef,DocumentNoFieldRef,SalesInvoiceHeader.FIELDNAME("No.")) then
        if not DataTypeManagement.FindFieldByName(MainRecordRef,DocumentNoFieldRef,VATEntry.FIELDNAME("Document No.")) then
          exit(false);

      if not DataTypeManagement.FindFieldByName(MainRecordRef,PostingDateFieldRef,SalesInvoiceHeader.FIELDNAME("Posting Date")) then
        exit(false);

      IncomingDocument.SETRANGE("Document No.",FORMAT(DocumentNoFieldRef.VALUE));
      EVALUATE(PostingDate,FORMAT(PostingDateFieldRef.VALUE));
      IncomingDocument.SETRANGE("Posting Date",PostingDate);
      if (FORMAT(DocumentNoFieldRef.VALUE) = '') or (PostingDate = 0D) then
        exit;
      exit(IncomingDocument.FINDFIRST);
    END;

    [External]
    PROCEDURE FindFromIncomingDocumentEntryNo@68(MainRecordRef@1001 : RecordRef;VAR IncomingDocument@1000 : Record "Incoming Document") : Boolean;
    VAR
      SalesHeader@1008 : Record "Sales Header";
      DataTypeManagement@1006 : Codeunit "Data Type Management";
      IncomingDocumentEntryNoFieldRef@1002 : FieldRef;
    BEGIN
      if not DataTypeManagement.FindFieldByName(
           MainRecordRef,IncomingDocumentEntryNoFieldRef,SalesHeader.FIELDNAME("Incoming Document Entry No."))
      then
        exit(false);

      exit(IncomingDocument.GET(FORMAT(IncomingDocumentEntryNoFieldRef.VALUE)));
    END;

    [External]
    PROCEDURE GetStatusStyleText@22() : Text;
    BEGIN
      case Status of
        Status::Rejected,
        Status::Failed:
          exit('Unfavorable');
        else
          exit('Standard');
      end;
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckIncomingDocReleaseRestrictions@63();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckIncomingDocCreateDocRestrictions@64();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckIncomingDocSetForOCRRestrictions@65();
    BEGIN
    END;

    [External]
    PROCEDURE WaitingToReceiveFromOCR@74() : Boolean;
    BEGIN
      if "OCR Status" in ["OCR Status"::Sent,"OCR Status"::"Awaiting Verification"] then
        exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE OCRIsEnabled@78() : Boolean;
    VAR
      OCRServiceSetup@1000 : Record "OCR Service Setup";
    BEGIN
      if not OCRServiceSetup.GET then
        exit(false);
      exit(OCRServiceSetup.Enabled);
    END;

    [Internal]
    PROCEDURE IsADocumentAttached@75() : Boolean;
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      IncomingDocumentAttachment.SETRANGE("Incoming Document Entry No.","Entry No.");
      if GetURL = '' then
        if IncomingDocumentAttachment.ISEMPTY then
          exit(false);
      exit(true);
    END;

    [External]
    PROCEDURE TestReadyForApproval@76();
    BEGIN
      if IsADocumentAttached then
        exit;
      ERROR(NoDocAttachErr);
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterCreateGenJnlLineFromIncomingDocSuccess@86(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    [Integration]
    [External]
    PROCEDURE OnAfterCreateGenJnlLineFromIncomingDocFail@85(VAR IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterCreateSalesHeaderFromIncomingDoc@90(VAR SalesHeader@1000 : Record "Sales Header");
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterCreatePurchHeaderFromIncomingDoc@94(VAR PurchHeader@1000 : Record "Purchase Header");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetDataExchangePath@89(DataExchLineDef@1000 : Record "Data Exch. Line Def";FieldNumber@1001 : Integer;VAR DataExchangePath@1002 : Text);
    BEGIN
    END;

    [External]
    PROCEDURE HasAttachment@88() : Boolean;
    VAR
      IncomingDocumentAttachment@1000 : Record "Incoming Document Attachment";
    BEGIN
      exit(GetMainAttachment(IncomingDocumentAttachment));
    END;

    [External]
    PROCEDURE CanReplaceMainAttachment@91() : Boolean;
    BEGIN
      if not HasAttachment then
        exit(true);
      exit(not WasSentToOCR);
    END;

    LOCAL PROCEDURE WasSentToOCR@87() : Boolean;
    BEGIN
      exit("OCR Status" <> "OCR Status"::" ");
    END;

    BEGIN
    END.
  }
}

