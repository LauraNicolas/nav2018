OBJECT Report 29 Export Acc. Sched. to Excel
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Export Acc. Sched. to Excel;
    ProcessingOnly=true;
    UseRequestPage=false;
  }
  DATASET
  {
    { 1   ;    ;DataItem;Integer             ;
               DataItemTable=Integer;
               DataItemTableView=SORTING(Number) WHERE(Number=CONST(1));
               OnAfterGetRecord=VAR
                                  Window@1000 : Dialog;
                                  RecNo@1001 : Integer;
                                  TotalRecNo@1002 : Integer;
                                  RowNo@1003 : Integer;
                                  ColumnNo@1004 : Integer;
                                  ClientFileName@1005 : Text;
                                BEGIN
                                  if DoUpdateExistingWorksheet then
                                    if not UploadClientFile(ClientFileName,ServerFileName) then
                                      exit;

                                  Window.OPEN(
                                    Text000 +
                                    '@1@@@@@@@@@@@@@@@@@@@@@\');
                                  Window.UPDATE(1,0);
                                  AccSchedLine.SETFILTER(Show,'<>%1',AccSchedLine.Show::No);
                                  TotalRecNo := AccSchedLine.COUNT;
                                  RecNo := 0;

                                  TempExcelBuffer.DELETEALL;
                                  CLEAR(TempExcelBuffer);

                                  AccSchedName.GET(AccSchedLine.GETRANGEMIN("Schedule Name"));
                                  AccSchedManagement.CheckAnalysisView(AccSchedName.Name,ColumnLayout.GETRANGEMIN("Column Layout Name"),true);
                                  if AccSchedName."Analysis View Name" <> '' then
                                    AnalysisView.GET(AccSchedName."Analysis View Name");
                                  GLSetup.GET;

                                  RowNo := 1;
                                  EnterCell(RowNo,1,Text001,false,false,true,false,'',TempExcelBuffer."Cell Type"::Text);
                                  EnterFilterInCell(
                                    RowNo,AccSchedLine.GETFILTER("Date Filter"),AccSchedLine.FIELDCAPTION("Date Filter"),
                                    '',TempExcelBuffer."Cell Type"::Text);
                                  EnterFilterInCell(
                                    RowNo,AccSchedLine.GETFILTER("G/L Budget Filter"),AccSchedLine.FIELDCAPTION("G/L Budget Filter"),
                                    '',TempExcelBuffer."Cell Type"::Text);
                                  EnterFilterInCell(
                                    RowNo,AccSchedLine.GETFILTER("Cost Budget Filter"),AccSchedLine.FIELDCAPTION("Cost Budget Filter"),
                                    '',TempExcelBuffer."Cell Type"::Text);
                                  if ((AccSchedName."Analysis View Name" = '') and (GLSetup."Global Dimension 1 Code" <> '')) or
                                     ((AccSchedName."Analysis View Name" <> '') and (AnalysisView."Dimension 1 Code" <> ''))
                                  then
                                    EnterFilterInCell(
                                      RowNo,AccSchedLine.GETFILTER("Dimension 1 Filter"),GetDimFilterCaption(1),'',TempExcelBuffer."Cell Type"::Text);
                                  if ((AccSchedName."Analysis View Name" = '') and (GLSetup."Global Dimension 2 Code" <> '')) or
                                     ((AccSchedName."Analysis View Name" <> '') and (AnalysisView."Dimension 2 Code" <> ''))
                                  then
                                    EnterFilterInCell(
                                      RowNo,AccSchedLine.GETFILTER("Dimension 2 Filter"),GetDimFilterCaption(2),'',TempExcelBuffer."Cell Type"::Text);
                                  if (AccSchedName."Analysis View Name" = '') or
                                     ((AccSchedName."Analysis View Name" <> '') and (AnalysisView."Dimension 3 Code" <> ''))
                                  then
                                    EnterFilterInCell(
                                      RowNo,AccSchedLine.GETFILTER("Dimension 3 Filter"),GetDimFilterCaption(3),'',TempExcelBuffer."Cell Type"::Text);
                                  if (AccSchedName."Analysis View Name" = '') or
                                     ((AccSchedName."Analysis View Name" <> '') and (AnalysisView."Dimension 4 Code" <> ''))
                                  then
                                    EnterFilterInCell(
                                      RowNo,AccSchedLine.GETFILTER("Dimension 4 Filter"),GetDimFilterCaption(4),'',TempExcelBuffer."Cell Type"::Text);

                                  RowNo := RowNo + 1;
                                  if UseAmtsInAddCurr then
                                    EnterFilterInCell(
                                      RowNo,GLSetup."Additional Reporting Currency",Currency.TABLECAPTION,'',TempExcelBuffer."Cell Type"::Text)
                                  else
                                    EnterFilterInCell(
                                      RowNo,GLSetup."LCY Code",Currency.TABLECAPTION,'',TempExcelBuffer."Cell Type"::Text);

                                  RowNo := RowNo + 1;
                                  if AccSchedLine.FIND('-') then begin
                                    if ColumnLayout.FIND('-') then begin
                                      RowNo := RowNo + 1;
                                      ColumnNo := 2; // Skip the "Row No." column.
                                      repeat
                                        ColumnNo := ColumnNo + 1;
                                        EnterCell(
                                          RowNo,ColumnNo,ColumnLayout."Column Header",false,false,false,false,'',TempExcelBuffer."Cell Type"::Text);
                                      until ColumnLayout.NEXT = 0;
                                    end;
                                    repeat
                                      RecNo := RecNo + 1;
                                      Window.UPDATE(1,ROUND(RecNo / TotalRecNo * 10000,1));
                                      RowNo := RowNo + 1;
                                      ColumnNo := 1;
                                      EnterCell(
                                        RowNo,ColumnNo,AccSchedLine."Row No.",
                                        AccSchedLine.Bold,AccSchedLine.Italic,AccSchedLine.Underline,AccSchedLine."Double Underline",
                                        '0',TempExcelBuffer."Cell Type"::Text);
                                      ColumnNo := 2;
                                      EnterCell(
                                        RowNo,ColumnNo,AccSchedLine.Description,
                                        AccSchedLine.Bold,AccSchedLine.Italic,AccSchedLine.Underline,AccSchedLine."Double Underline",
                                        '',TempExcelBuffer."Cell Type"::Text);
                                      if ColumnLayout.FIND('-') then begin
                                        repeat
                                          if AccSchedLine.Totaling = '' then
                                            ColumnValue := 0
                                          else begin
                                            ColumnValue := AccSchedManagement.CalcCell(AccSchedLine,ColumnLayout,UseAmtsInAddCurr);
                                            if AccSchedManagement.GetDivisionError then
                                              ColumnValue := 0
                                          end;
                                          ColumnNo := ColumnNo + 1;
                                          EnterCell(
                                            RowNo,ColumnNo,MatrixMgt.FormatValue(ColumnValue,ColumnLayout."Rounding Factor",UseAmtsInAddCurr),
                                            AccSchedLine.Bold,AccSchedLine.Italic,AccSchedLine.Underline,AccSchedLine."Double Underline",
                                            '',TempExcelBuffer."Cell Type"::Number)
                                        until ColumnLayout.NEXT = 0;
                                      end;
                                    until AccSchedLine.NEXT = 0;
                                  end;

                                  Window.CLOSE;

                                  if DoUpdateExistingWorksheet then begin
                                    TempExcelBuffer.UpdateBookExcel(ServerFileName,SheetName,false);
                                    TempExcelBuffer.WriteSheet('',COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    SaveFile(ClientFileName);
                                  end else begin
                                    TempExcelBuffer.CreateBook(ServerFileName,AccSchedName.Name);
                                    TempExcelBuffer.WriteSheet(AccSchedName.Description,COMPANYNAME,USERID);
                                    TempExcelBuffer.CloseBook;
                                    if not TestMode then
                                      TempExcelBuffer.OpenExcel;
                                  end;
                                  if not TestMode then
                                    TempExcelBuffer.GiveUserControl;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Analyzing Data...\\';
      Text001@1001 : TextConst 'ENU=Filters';
      Text002@1002 : TextConst 'ENU=Update Workbook';
      AccSchedName@1003 : Record "Acc. Schedule Name";
      AccSchedLine@1004 : Record "Acc. Schedule Line";
      ColumnLayout@1005 : Record "Column Layout";
      TempExcelBuffer@1006 : TEMPORARY Record "Excel Buffer";
      GLSetup@1013 : Record "General Ledger Setup";
      AnalysisView@1014 : Record "Analysis View";
      Currency@1015 : Record Currency;
      AccSchedManagement@1007 : Codeunit AccSchedManagement;
      MatrixMgt@1018 : Codeunit "Matrix Management";
      FileMgt@1017 : Codeunit "File Management";
      UseAmtsInAddCurr@1008 : Boolean;
      ColumnValue@1009 : Decimal;
      ServerFileName@1016 : Text;
      SheetName@1011 : Text[250];
      DoUpdateExistingWorksheet@1010 : Boolean;
      ExcelFileExtensionTok@1012 : TextConst '@@@={Locked};ENU=.xlsx';
      TestMode@1019 : Boolean;
      OverwriteFileQst@1020 : TextConst 'ENU=Do you want to overwrite the existing file?';

    PROCEDURE SetOptions@3(VAR AccSchedLine2@1000 : Record "Acc. Schedule Line";ColumnLayoutName2@1001 : Code[10];UseAmtsInAddCurr2@1002 : Boolean);
    BEGIN
      AccSchedLine.COPYFILTERS(AccSchedLine2);
      ColumnLayout.SETRANGE("Column Layout Name",ColumnLayoutName2);
      UseAmtsInAddCurr := UseAmtsInAddCurr2;
    END;

    LOCAL PROCEDURE EnterFilterInCell@5(VAR RowNo@1000 : Integer;Filter@1001 : Text[250];FieldName@1002 : Text[100];Format@1003 : Text[30];CellType@1004 : Option);
    BEGIN
      if Filter <> '' then begin
        RowNo := RowNo + 1;
        EnterCell(RowNo,1,FieldName,false,false,false,false,'',TempExcelBuffer."Cell Type"::Text);
        EnterCell(RowNo,2,Filter,false,false,false,false,Format,CellType);
      end;
    END;

    LOCAL PROCEDURE EnterCell@2(RowNo@1000 : Integer;ColumnNo@1001 : Integer;CellValue@1002 : Text[250];Bold@1003 : Boolean;Italic@1004 : Boolean;UnderLine@1005 : Boolean;DoubleUnderLine@1008 : Boolean;Format@1006 : Text[30];CellType@1007 : Option);
    BEGIN
      TempExcelBuffer.INIT;
      TempExcelBuffer.VALIDATE("Row No.",RowNo);
      TempExcelBuffer.VALIDATE("Column No.",ColumnNo);
      TempExcelBuffer."Cell Value as Text" := CellValue;
      TempExcelBuffer.Formula := '';
      TempExcelBuffer.Bold := Bold;
      TempExcelBuffer.Italic := Italic;
      if DoubleUnderLine = true then begin
        TempExcelBuffer."Double Underline" := true;
        TempExcelBuffer.Underline := false;
      end else begin
        TempExcelBuffer."Double Underline" := false;
        TempExcelBuffer.Underline := UnderLine;
      end;
      TempExcelBuffer.NumberFormat := Format;
      TempExcelBuffer."Cell Type" := CellType;
      TempExcelBuffer.INSERT;
    END;

    LOCAL PROCEDURE GetDimFilterCaption@4(DimFilterNo@1000 : Integer) : Text[80];
    VAR
      Dimension@1001 : Record Dimension;
    BEGIN
      if AccSchedName."Analysis View Name" = '' then
        case DimFilterNo of
          1:
            Dimension.GET(GLSetup."Global Dimension 1 Code");
          2:
            Dimension.GET(GLSetup."Global Dimension 2 Code");
        end
      else
        case DimFilterNo of
          1:
            Dimension.GET(AnalysisView."Dimension 1 Code");
          2:
            Dimension.GET(AnalysisView."Dimension 2 Code");
          3:
            Dimension.GET(AnalysisView."Dimension 3 Code");
          4:
            Dimension.GET(AnalysisView."Dimension 4 Code");
        end;
      exit(COPYSTR(Dimension.GetMLFilterCaption(GLOBALLANGUAGE),1,80));
    END;

    PROCEDURE SetUpdateExistingWorksheet@1(UpdateExistingWorksheet@1000 : Boolean);
    BEGIN
      DoUpdateExistingWorksheet := UpdateExistingWorksheet;
    END;

    PROCEDURE SetFileNameSilent@6(NewFileName@1000 : Text);
    BEGIN
      ServerFileName := NewFileName;
    END;

    PROCEDURE SetTestMode@7(NewTestMode@1000 : Boolean);
    BEGIN
      TestMode := NewTestMode;
    END;

    LOCAL PROCEDURE UploadClientFile@10(VAR ClientFileName@1000 : Text;VAR ServerFileName@1001 : Text) : Boolean;
    BEGIN
      if FileMgt.IsWebClient then
        ServerFileName := FileMgt.UploadFile(Text002,ExcelFileExtensionTok)
      else begin
        ClientFileName := FileMgt.OpenFileDialog(Text002,ExcelFileExtensionTok,'');
        if ClientFileName = '' then
          exit(false);
        ServerFileName := FileMgt.UploadFileSilent(ClientFileName);
      end;

      if ServerFileName = '' then
        exit(false);

      SheetName := TempExcelBuffer.SelectSheetsName(ServerFileName);
      if SheetName = '' then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE SaveFile@8(ClientFileName@1000 : Text);
    BEGIN
      if TestMode then
        exit;

      if not FileMgt.IsWebClient then begin
        if not CONFIRM(OverwriteFileQst,false) then
          TempExcelBuffer.DownloadAndOpenExcel
        else
          TempExcelBuffer.OverwriteAndOpenExistingExcel(ClientFileName);
      end else
        TempExcelBuffer.DownloadAndOpenExcel
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

