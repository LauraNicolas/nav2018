OBJECT Page 1432 Net Promoter Score Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Net Promoter Score Setup;
    SourceTable="Net Promoter Score Setup";
    PageType=Card;
    OnOpenPage=VAR
                 NetPromoterScoreMgt@1000 : Codeunit "Net Promoter Score Mgt.";
               BEGIN
                 GetActualApiUrl;
                 Puid := NetPromoterScoreMgt.GetPuid;
               END;

    OnAfterGetCurrRecord=BEGIN
                           GetCachedApiUrl;
                         END;

    ActionList=ACTIONS
    {
      { 2       ;    ;ActionContainer;
                      Name=ActionContainer2;
                      ActionContainerType=ActionItems }
      { 11      ;1   ;Action    ;
                      Name=Validate Actual URL;
                      CaptionML=ENU=Validate Actual URL;
                      ToolTipML=ENU=Validate the actual API URL.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=IsActualUrlNotEmpty;
                      Image=ValidateEmailLoggingSetup;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 ValidateApiUrl(ActualApiUrl);
                               END;
                                }
      { 12      ;1   ;Action    ;
                      Name=Validate Cached URL;
                      CaptionML=ENU=Validate Cached URL;
                      ToolTipML=ENU=Validate the cached API URL.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=IsCachedUrlNotEmpty;
                      Image=ValidateEmailLoggingSetup;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 ValidateApiUrl(CachedApiUrl);
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=Test Actual URL;
                      CaptionML=ENU=Test Actual URL;
                      ToolTipML=ENU=Verify the actual API URL.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=IsActualUrlNotEmpty;
                      Image=Link;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 NetPromoterScoreMgt@1000 : Codeunit "Net Promoter Score Mgt.";
                               BEGIN
                                 TestApiUrl(NetPromoterScoreMgt.GetTestUrl(ActualApiUrl));
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=Test Cached URL;
                      CaptionML=ENU=Test Cached URL;
                      ToolTipML=ENU=Verify the cached API URL.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=IsCachedUrlNotEmpty;
                      Image=Link;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=VAR
                                 NetPromoterScoreMgt@1000 : Codeunit "Net Promoter Score Mgt.";
                               BEGIN
                                 TestApiUrl(NetPromoterScoreMgt.GetTestUrl(CachedApiUrl));
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=Renew Cached URL;
                      CaptionML=ENU=Renew Cached URL;
                      ToolTipML=ENU=Renew the cached API URL.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=Apply;
                      PromotedCategory=Process;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 GetActualApiUrl;
                                 if not IsActualUrlNotEmpty then
                                   if not CONFIRM(EmptyCachedUrlQst) then
                                     exit;

                                 "Expire Time" := CURRENTDATETIME;
                                 MODIFY;

                                 GetCachedApiUrl;
                                 if IsCachedUrlNotEmpty then
                                   MESSAGE(SuccessfulSynchronizationMsg)
                                 else
                                   MESSAGE(FailedSynchronizationMsg);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 10  ;1   ;Field     ;
                Name=PUID;
                CaptionML=ENU=PUID;
                ToolTipML=ENU=Specifies PUID;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Puid;
                ImplicitType=Text }

    { 8   ;1   ;Field     ;
                Name=Actual API URL;
                CaptionML=ENU=Actual API URL;
                ToolTipML=ENU=Specifies the actual API URL.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ActualApiUrl;
                ImplicitType=Text }

    { 3   ;1   ;Field     ;
                Name=Cached API URL;
                CaptionML=ENU=Cached API URL;
                ToolTipML=ENU=Specifies the cached API URL.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=CachedApiUrl;
                Editable=FALSE;
                ImplicitType=Text }

    { 4   ;1   ;Field     ;
                Name=Cache Expire Time;
                CaptionML=ENU=Cache Expire Time;
                ToolTipML=ENU=Specifies the cache expiration time.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Expire Time";
                ImplicitType=DateTime }

    { 5   ;1   ;Field     ;
                Name=Time Between Requests;
                CaptionML=ENU=Time Between Requests;
                ToolTipML=ENU=Specifies the minimum time between requests to the NPS API URL.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Time Between Requests";
                ImplicitType=Integer }

  }
  CODE
  {
    VAR
      CachedApiUrl@1000 : Text;
      TestSuccessfulMsg@1001 : TextConst '@@@=%1 - request, %2 - response;ENU=The URL test was successful.\Request: %1\Response: %2.';
      TestFailedMsg@1002 : TextConst '@@@=%1 - request, %2 - error;ENU=The URL test failed.\Request: %1\Error: %2.';
      ValidationMsg@1012 : TextConst '@@@=%1 - URL, %2 - is URI, %3 - is HTTP, %4 - is HTTPS;ENU=The URL was validated.\URL: %1\Is URI: %2\Is HTTP: %3\Is HTTPS: %4.';
      SuccessfulSynchronizationMsg@1003 : TextConst 'ENU=The cached URL was successfuly synchronized with the actual URL.';
      FailedSynchronizationMsg@1004 : TextConst 'ENU=Cannot get the actual URL.';
      ActualApiUrl@1005 : Text;
      NpsApiUrlTxt@1006 : TextConst '@@@={Locked};ENU=NpsApiUrl';
      Puid@1010 : Text;
      IsCachedUrlNotEmpty@1007 : Boolean;
      IsActualUrlNotEmpty@1008 : Boolean;
      EmptyCachedUrlQst@1009 : TextConst 'ENU=The actual API URL is empty. Do you want to empty the cached API URL as well?';

    LOCAL PROCEDURE GetActualApiUrl@4();
    VAR
      AzureKeyVaultManagement@1000 : Codeunit "Azure Key Vault Management";
    BEGIN
      if AzureKeyVaultManagement.IsEnable then
        if not AzureKeyVaultManagement.GetAzureKeyVaultSecret(ActualApiUrl,NpsApiUrlTxt) then
          ActualApiUrl := '';
      ActualApiUrl := DELCHR(ActualApiUrl,'<>',' ');
      IsActualUrlNotEmpty := ActualApiUrl <> '';
    END;

    LOCAL PROCEDURE GetCachedApiUrl@2();
    BEGIN
      CachedApiUrl := DELCHR(GetApiUrl,'<>',' ');
      IsCachedUrlNotEmpty := CachedApiUrl <> '';
    END;

    LOCAL PROCEDURE TestApiUrl@5(Url@1004 : Text);
    VAR
      NetPromoterScoreMgt@1002 : Codeunit "Net Promoter Score Mgt.";
      Response@1000 : Text;
      ErrorMessage@1001 : Text;
    BEGIN
      if NetPromoterScoreMgt.TestConnection(Url,Response,ErrorMessage) then
        MESSAGE(TestSuccessfulMsg,Url,Response)
      else
        MESSAGE(TestFailedMsg,Url,ErrorMessage);
    END;

    LOCAL PROCEDURE ValidateApiUrl@3(Url@1004 : Text);
    VAR
      WebRequestHelper@1002 : Codeunit "Web Request Helper";
      IsValidUri@1000 : Boolean;
      IsHttpUrl@1003 : Boolean;
      IsSecureHttpUrl@1005 : Boolean;
    BEGIN
      IsValidUri := WebRequestHelper.IsValidUri(Url);
      IsHttpUrl := WebRequestHelper.IsHttpUrl(Url);
      IsSecureHttpUrl := WebRequestHelper.IsSecureHttpUrl(Url);
      MESSAGE(ValidationMsg,Url,IsValidUri,IsHttpUrl,IsSecureHttpUrl);
    END;

    BEGIN
    END.
  }
}

