OBJECT Table 274 Bank Acc. Reconciliation Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Data Exch. Field"=rimd;
    OnInsert=BEGIN
               BankAccRecon.GET("Statement Type","Bank Account No.","Statement No.");
               "Applied Entries" := 0;
               VALIDATE("Applied Amount",0);
             END;

    OnModify=BEGIN
               if xRec."Statement Amount" <> "Statement Amount" then
                 RemoveApplication(Type);
             END;

    OnDelete=BEGIN
               RemoveApplication(Type);
               ClearDataExchEntries;
               RemoveAppliedPaymentEntries;
               DeletePaymentMatchingDetails;
               UpdateParentLineStatementAmount;
               if FIND then;
             END;

    OnRename=BEGIN
               ERROR(Text000,TABLECAPTION);
             END;

    CaptionML=ENU=Bank Acc. Reconciliation Line;
  }
  FIELDS
  {
    { 1   ;   ;Bank Account No.    ;Code20        ;TableRelation="Bank Account";
                                                   CaptionML=ENU=Bank Account No. }
    { 2   ;   ;Statement No.       ;Code20        ;TableRelation="Bank Acc. Reconciliation"."Statement No." WHERE ("Bank Account No."=FIELD("Bank Account No."));
                                                   CaptionML=ENU=Statement No. }
    { 3   ;   ;Statement Line No.  ;Integer       ;CaptionML=ENU=Statement Line No. }
    { 4   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 5   ;   ;Transaction Date    ;Date          ;CaptionML=ENU=Transaction Date }
    { 6   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 7   ;   ;Statement Amount    ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   CaptionML=ENU=Statement Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 8   ;   ;Difference          ;Decimal       ;OnValidate=BEGIN
                                                                "Statement Amount" := "Applied Amount" + Difference;
                                                              END;

                                                   CaptionML=ENU=Difference;
                                                   BlankZero=true;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 9   ;   ;Applied Amount      ;Decimal       ;OnValidate=BEGIN
                                                                Difference := "Statement Amount" - "Applied Amount";
                                                              END;

                                                   OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=ENU=Applied Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                if (Type <> xRec.Type) and
                                                                   ("Applied Entries" <> 0)
                                                                then
                                                                  if CONFIRM(Text001,false) then begin
                                                                    RemoveApplication(xRec.Type);
                                                                    VALIDATE("Applied Amount",0);
                                                                    "Applied Entries" := 0;
                                                                    "Check No." := '';
                                                                  end else
                                                                    ERROR(Text002);
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Bank Account Ledger Entry,Check Ledger Entry,Difference;
                                                   OptionString="Bank Account Ledger Entry","Check Ledger Entry",Difference }
    { 11  ;   ;Applied Entries     ;Integer       ;OnLookup=BEGIN
                                                              DisplayApplication;
                                                            END;

                                                   CaptionML=ENU=Applied Entries;
                                                   Editable=false }
    { 12  ;   ;Value Date          ;Date          ;CaptionML=ENU=Value Date }
    { 13  ;   ;Ready for Application;Boolean      ;CaptionML=ENU=Ready for Application }
    { 14  ;   ;Check No.           ;Code20        ;CaptionML=ENU=Check No. }
    { 15  ;   ;Related-Party Name  ;Text250       ;CaptionML=ENU=Related-Party Name }
    { 16  ;   ;Additional Transaction Info;Text100;CaptionML=ENU=Additional Transaction Info }
    { 17  ;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=ENU=Data Exch. Entry No.;
                                                   Editable=false }
    { 18  ;   ;Data Exch. Line No. ;Integer       ;CaptionML=ENU=Data Exch. Line No.;
                                                   Editable=false }
    { 20  ;   ;Statement Type      ;Option        ;CaptionML=ENU=Statement Type;
                                                   OptionCaptionML=ENU=Bank Reconciliation,Payment Application;
                                                   OptionString="Bank Reconciliation","Payment Application" }
    { 21  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                                if "Account Type" <> xRec."Account Type" then
                                                                  VALIDATE("Account No.",'');
                                                              END;

                                                   CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee }
    { 22  ;   ;Account No.         ;Code20        ;TableRelation=IF ("Account Type"=CONST("G/L Account")) "G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                                                               Blocked=CONST(false))
                                                                                                                               ELSE IF ("Account Type"=CONST(Customer)) Customer
                                                                                                                               ELSE IF ("Account Type"=CONST(Vendor)) Vendor
                                                                                                                               ELSE IF ("Account Type"=CONST("Bank Account")) "Bank Account"
                                                                                                                               ELSE IF ("Account Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                                                                               ELSE IF ("Account Type"=CONST("IC Partner")) "IC Partner";
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Applied Amount",0);
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::"Salesperson/Purchaser",GetSalepersonPurchaserCode);
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Account No. }
    { 23  ;   ;Transaction Text    ;Text140       ;OnValidate=BEGIN
                                                                if ("Statement Type" = "Statement Type"::"Payment Application") or (Description = '') then
                                                                  Description := COPYSTR("Transaction Text",1,MAXSTRLEN(Description));
                                                              END;

                                                   CaptionML=ENU=Transaction Text }
    { 24  ;   ;Related-Party Bank Acc. No.;Text100;CaptionML=ENU=Related-Party Bank Acc. No. }
    { 25  ;   ;Related-Party Address;Text100      ;CaptionML=ENU=Related-Party Address }
    { 26  ;   ;Related-Party City  ;Text50        ;CaptionML=ENU=Related-Party City }
    { 31  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 32  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 50  ;   ;Match Confidence    ;Option        ;FieldClass=FlowField;
                                                   InitValue=None;
                                                   CalcFormula=Max("Applied Payment Entry"."Match Confidence" WHERE ("Statement Type"=FIELD("Statement Type"),
                                                                                                                     "Bank Account No."=FIELD("Bank Account No."),
                                                                                                                     "Statement No."=FIELD("Statement No."),
                                                                                                                     "Statement Line No."=FIELD("Statement Line No.")));
                                                   CaptionML=ENU=Match Confidence;
                                                   OptionCaptionML=ENU=None,Low,Medium,High,High - Text-to-Account Mapping,Manual,Accepted;
                                                   OptionString=None,Low,Medium,High,"High - Text-to-Account Mapping",Manual,Accepted;
                                                   Editable=false }
    { 51  ;   ;Match Quality       ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Max("Applied Payment Entry".Quality WHERE ("Bank Account No."=FIELD("Bank Account No."),
                                                                                                          "Statement No."=FIELD("Statement No."),
                                                                                                          "Statement Line No."=FIELD("Statement Line No."),
                                                                                                          "Statement Type"=FIELD("Statement Type")));
                                                   CaptionML=ENU=Match Quality;
                                                   Editable=false }
    { 60  ;   ;Sorting Order       ;Integer       ;CaptionML=ENU=Sorting Order }
    { 61  ;   ;Parent Line No.     ;Integer       ;CaptionML=ENU=Parent Line No.;
                                                   Editable=false }
    { 70  ;   ;Transaction ID      ;Text50        ;CaptionML=ENU=Transaction ID }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Statement Type","Bank Account No.","Statement No.","Statement Line No.";
                                                   SumIndexFields="Statement Amount",Difference;
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot rename a %1.';
      Text001@1001 : TextConst 'ENU=Delete application?';
      Text002@1002 : TextConst 'ENU=Update canceled.';
      BankAccLedgEntry@1003 : Record "Bank Account Ledger Entry";
      CheckLedgEntry@1004 : Record "Check Ledger Entry";
      BankAccRecon@1005 : Record "Bank Acc. Reconciliation";
      BankAccSetStmtNo@1006 : Codeunit "Bank Acc. Entry Set Recon.-No.";
      CheckSetStmtNo@1007 : Codeunit "Check Entry Set Recon.-No.";
      DimMgt@1009 : Codeunit DimensionManagement;
      AmountWithinToleranceRangeTok@1011 : TextConst '@@@={Locked};ENU=">=%1&<=%2"';
      AmountOustideToleranceRangeTok@1012 : TextConst '@@@={Locked};ENU=<%1|>%2';
      TransactionAmountMustNotBeZeroErr@1008 : TextConst 'ENU=The Transaction Amount field must have a value that is not 0.';
      CreditTheAccountQst@1013 : TextConst '@@@=%1 is the account name, %2 is the amount that is not applied (there is filed on the page named Remaining Amount To Apply);ENU=The remaining amount to apply is %2.\\Do you want to create a new payment application line that will debit or credit %1 with the remaining amount when you post the payment?';
      ExcessiveAmountErr@1010 : TextConst '@@@=%1 is the amount that is not applied (there is filed on the page named Remaining Amount To Apply);ENU=The remaining amount to apply is %1.';
      ImportPostedTransactionsQst@1014 : TextConst 'ENU=The bank statement contains payments that are already applied, but the related bank account ledger entries are not closed.\\Do you want to include these payments in the import?';

    [External]
    PROCEDURE DisplayApplication@2();
    VAR
      PaymentApplication@1000 : Page "Payment Application";
    BEGIN
      case "Statement Type" of
        "Statement Type"::"Bank Reconciliation":
          case Type of
            Type::"Bank Account Ledger Entry":
              begin
                BankAccLedgEntry.RESET;
                BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                BankAccLedgEntry.SETRANGE(Open,true);
                BankAccLedgEntry.SETRANGE(
                  "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
                BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
                BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,BankAccLedgEntry);
              end;
            Type::"Check Ledger Entry":
              begin
                CheckLedgEntry.RESET;
                CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
                CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
                CheckLedgEntry.SETRANGE(Open,true);
                CheckLedgEntry.SETRANGE(
                  "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
                CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
                CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
                PAGE.RUN(0,CheckLedgEntry);
              end;
          end;
        "Statement Type"::"Payment Application":
          begin
            if "Statement Amount" = 0 then
              ERROR(TransactionAmountMustNotBeZeroErr);
            PaymentApplication.SetBankAccReconcLine(Rec);
            PaymentApplication.RUNMODAL;
          end;
      end;
    END;

    [External]
    PROCEDURE GetCurrencyCode@3() : Code[10];
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      if "Bank Account No." = BankAcc."No." then
        exit(BankAcc."Currency Code");

      if BankAcc.GET("Bank Account No.") then
        exit(BankAcc."Currency Code");

      exit('');
    END;

    [External]
    PROCEDURE GetStyle@35() : Text;
    BEGIN
      if "Applied Entries" <> 0 then
        exit('Favorable');

      exit('');
    END;

    [External]
    PROCEDURE ClearDataExchEntries@5();
    VAR
      DataExchField@1000 : Record "Data Exch. Field";
      BankAccReconciliationLine@1001 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
      BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
      BankAccReconciliationLine.SETRANGE("Statement No.","Statement No.");
      BankAccReconciliationLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      BankAccReconciliationLine.SETFILTER("Statement Line No.",'<>%1',"Statement Line No.");
      if BankAccReconciliationLine.ISEMPTY then
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Statement No.","Statement Line No."));
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1007 : Integer;No2@1006 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record "Source Code Setup";
      BankAccReconciliation@1005 : Record "Bank Acc. Reconciliation";
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup."Payment Reconciliation Journal",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",BankAccReconciliation."Dimension Set ID",DATABASE::"Bank Account");
    END;

    [External]
    PROCEDURE SetUpNewLine@34();
    BEGIN
      "Transaction Date" := WORKDATE;
      "Match Confidence" := "Match Confidence"::None;
      "Document No." := '';
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@50(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE AcceptAppliedPaymentEntriesSelectedLines@12();
    BEGIN
      if FINDSET then
        repeat
          AcceptApplication;
        until NEXT = 0;
    END;

    [External]
    PROCEDURE RejectAppliedPaymentEntriesSelectedLines@18();
    BEGIN
      if FINDSET then
        repeat
          RejectAppliedPayment;
        until NEXT = 0;
    END;

    [External]
    PROCEDURE RejectAppliedPayment@6();
    BEGIN
      RemoveAppliedPaymentEntries;
      DeletePaymentMatchingDetails;
    END;

    [External]
    PROCEDURE AcceptApplication@4();
    VAR
      AppliedPaymentEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      // For customer payments, the applied amount is positive, so positive difference means excessive amount.
      // For vendor payments, the applied amount is negative, so negative difference means excessive amount.
      // If "Applied Amount" and Difference have the same sign, then this is an overpayment situation.
      // Two non-zero numbers have the same sign if and only if their product is a positive number.
      if Difference * "Applied Amount" > 0 then begin
        if "Account Type" = "Account Type"::"Bank Account" then
          ERROR(ExcessiveAmountErr,Difference);
        if not CONFIRM(STRSUBSTNO(CreditTheAccountQst,GetAppliedToName,Difference)) then
          exit;
        TransferRemainingAmountToAccount;
      end;

      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Accepted);
    END;

    LOCAL PROCEDURE RemoveApplication@1(AppliedType@1000 : Option);
    BEGIN
      if "Statement Type" = "Statement Type"::"Bank Reconciliation" then
        case AppliedType of
          Type::"Bank Account Ledger Entry":
            begin
              BankAccLedgEntry.RESET;
              BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              BankAccLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              BankAccLedgEntry.SETRANGE(Open,true);
              BankAccLedgEntry.SETRANGE(
                "Statement Status",BankAccLedgEntry."Statement Status"::"Bank Acc. Entry Applied");
              BankAccLedgEntry.SETRANGE("Statement No.","Statement No.");
              BankAccLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              if BankAccLedgEntry.FIND('-') then
                repeat
                  BankAccSetStmtNo.RemoveReconNo(BankAccLedgEntry,Rec,true);
                until BankAccLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              MODIFY;
            end;
          Type::"Check Ledger Entry":
            begin
              CheckLedgEntry.RESET;
              CheckLedgEntry.SETCURRENTKEY("Bank Account No.",Open);
              CheckLedgEntry.SETRANGE("Bank Account No.","Bank Account No.");
              CheckLedgEntry.SETRANGE(Open,true);
              CheckLedgEntry.SETRANGE(
                "Statement Status",CheckLedgEntry."Statement Status"::"Check Entry Applied");
              CheckLedgEntry.SETRANGE("Statement No.","Statement No.");
              CheckLedgEntry.SETRANGE("Statement Line No.","Statement Line No.");
              BankAccLedgEntry.LOCKTABLE;
              CheckLedgEntry.LOCKTABLE;
              if CheckLedgEntry.FIND('-') then
                repeat
                  CheckSetStmtNo.RemoveReconNo(CheckLedgEntry,Rec,true);
                until CheckLedgEntry.NEXT = 0;
              "Applied Entries" := 0;
              VALIDATE("Applied Amount",0);
              "Check No." := '';
              MODIFY;
            end;
        end;
    END;

    [External]
    PROCEDURE SetManualApplication@33();
    VAR
      AppliedPaymentEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      AppliedPaymentEntry.FilterAppliedPmtEntry(Rec);
      AppliedPaymentEntry.MODIFYALL("Match Confidence","Match Confidence"::Manual)
    END;

    LOCAL PROCEDURE RemoveAppliedPaymentEntries@9();
    VAR
      AppliedPmtEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      VALIDATE("Applied Amount",0);
      VALIDATE("Applied Entries",0);
      VALIDATE("Account No.",'');
      MODIFY(true);

      AppliedPmtEntry.FilterAppliedPmtEntry(Rec);
      AppliedPmtEntry.DELETEALL(true);
    END;

    LOCAL PROCEDURE DeletePaymentMatchingDetails@10();
    VAR
      PaymentMatchingDetails@1000 : Record "Payment Matching Details";
    BEGIN
      PaymentMatchingDetails.SETRANGE("Statement Type","Statement Type");
      PaymentMatchingDetails.SETRANGE("Bank Account No.","Bank Account No.");
      PaymentMatchingDetails.SETRANGE("Statement No.","Statement No.");
      PaymentMatchingDetails.SETRANGE("Statement Line No.","Statement Line No.");
      PaymentMatchingDetails.DELETEALL(true);
    END;

    [External]
    PROCEDURE GetAppliedEntryAccountName@47(AppliedToEntryNo@1000 : Integer) : Text;
    VAR
      AccountType@1005 : Option;
      AccountNo@1006 : Code[20];
    BEGIN
      AccountType := GetAppliedEntryAccountType(AppliedToEntryNo);
      AccountNo := GetAppliedEntryAccountNo(AppliedToEntryNo);
      exit(GetAccountName(AccountType,AccountNo));
    END;

    [External]
    PROCEDURE GetAppliedToName@14() : Text;
    VAR
      AccountType@1005 : Option;
      AccountNo@1006 : Code[20];
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      exit(GetAccountName(AccountType,AccountNo));
    END;

    [External]
    PROCEDURE GetAppliedEntryAccountType@43(AppliedToEntryNo@1000 : Integer) : Integer;
    VAR
      BankAccountLedgerEntry@1003 : Record "Bank Account Ledger Entry";
    BEGIN
      if "Account Type" = "Account Type"::"Bank Account" then
        if BankAccountLedgerEntry.GET(AppliedToEntryNo) then
          exit(BankAccountLedgerEntry."Bal. Account Type");
      exit("Account Type");
    END;

    [External]
    PROCEDURE GetAppliedToAccountType@36() : Integer;
    VAR
      BankAccountLedgerEntry@1003 : Record "Bank Account Ledger Entry";
    BEGIN
      if "Account Type" = "Account Type"::"Bank Account" then
        if BankAccountLedgerEntry.GET(GetFirstAppliedToEntryNo) then
          exit(BankAccountLedgerEntry."Bal. Account Type");
      exit("Account Type");
    END;

    [External]
    PROCEDURE GetAppliedEntryAccountNo@39(AppliedToEntryNo@1000 : Integer) : Code[20];
    VAR
      CustLedgerEntry@1001 : Record "Cust. Ledger Entry";
      VendorLedgerEntry@1002 : Record "Vendor Ledger Entry";
      BankAccountLedgerEntry@1003 : Record "Bank Account Ledger Entry";
    BEGIN
      case "Account Type" of
        "Account Type"::Customer:
          if CustLedgerEntry.GET(AppliedToEntryNo) then
            exit(CustLedgerEntry."Customer No.");
        "Account Type"::Vendor:
          if VendorLedgerEntry.GET(AppliedToEntryNo) then
            exit(VendorLedgerEntry."Vendor No.");
        "Account Type"::"Bank Account":
          if BankAccountLedgerEntry.GET(AppliedToEntryNo) then
            exit(BankAccountLedgerEntry."Bal. Account No.");
      end;
      exit("Account No.");
    END;

    [External]
    PROCEDURE GetAppliedToAccountNo@37() : Code[20];
    VAR
      BankAccountLedgerEntry@1004 : Record "Bank Account Ledger Entry";
    BEGIN
      if "Account Type" = "Account Type"::"Bank Account" then
        if BankAccountLedgerEntry.GET(GetFirstAppliedToEntryNo) then
          exit(BankAccountLedgerEntry."Bal. Account No.");
      exit("Account No.")
    END;

    LOCAL PROCEDURE GetAccountName@45(AccountType@1000 : Option;AccountNo@1001 : Code[20]) : Text;
    VAR
      Customer@1005 : Record Customer;
      Vendor@1004 : Record Vendor;
      GLAccount@1003 : Record "G/L Account";
      BankAccount@1002 : Record "Bank Account";
      Name@1006 : Text;
    BEGIN
      case AccountType of
        "Account Type"::Customer:
          if Customer.GET(AccountNo) then
            Name := Customer.Name;
        "Account Type"::Vendor:
          if Vendor.GET(AccountNo) then
            Name := Vendor.Name;
        "Account Type"::"G/L Account":
          if GLAccount.GET(AccountNo) then
            Name := GLAccount.Name;
        "Account Type"::"Bank Account":
          if BankAccount.GET(AccountNo) then
            Name := BankAccount.Name;
      end;

      exit(Name);
    END;

    [External]
    PROCEDURE AppliedEntryAccountDrillDown@46(AppliedEntryNo@1000 : Integer);
    VAR
      AccountType@1004 : Option;
      AccountNo@1003 : Code[20];
    BEGIN
      AccountType := GetAppliedEntryAccountType(AppliedEntryNo);
      AccountNo := GetAppliedEntryAccountNo(AppliedEntryNo);
      OpenAccountPage(AccountType,AccountNo);
    END;

    [External]
    PROCEDURE AppliedToDrillDown@16();
    VAR
      AccountType@1004 : Option;
      AccountNo@1003 : Code[20];
    BEGIN
      AccountType := GetAppliedToAccountType;
      AccountNo := GetAppliedToAccountNo;
      OpenAccountPage(AccountType,AccountNo);
    END;

    LOCAL PROCEDURE OpenAccountPage@40(AccountType@1006 : Option;AccountNo@1007 : Code[20]);
    VAR
      Customer@1002 : Record Customer;
      Vendor@1001 : Record Vendor;
      GLAccount@1000 : Record "G/L Account";
      BankAccount@1005 : Record "Bank Account";
    BEGIN
      case AccountType of
        "Account Type"::Customer:
          begin
            Customer.GET(AccountNo);
            PAGE.RUN(PAGE::"Customer Card",Customer);
          end;
        "Account Type"::Vendor:
          begin
            Vendor.GET(AccountNo);
            PAGE.RUN(PAGE::"Vendor Card",Vendor);
          end;
        "Account Type"::"G/L Account":
          begin
            GLAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"G/L Account Card",GLAccount);
          end;
        "Account Type"::"Bank Account":
          begin
            BankAccount.GET(AccountNo);
            PAGE.RUN(PAGE::"Bank Account Card",BankAccount);
          end;
      end;
    END;

    [External]
    PROCEDURE DrillDownOnNoOfLedgerEntriesWithinAmountTolerance@21();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountWithinToleranceRangeTok);
    END;

    [External]
    PROCEDURE DrillDownOnNoOfLedgerEntriesOutsideOfAmountTolerance@23();
    BEGIN
      DrillDownOnNoOfLedgerEntriesBasedOnAmount(AmountOustideToleranceRangeTok);
    END;

    LOCAL PROCEDURE DrillDownOnNoOfLedgerEntriesBasedOnAmount@24(AmountFilter@1005 : Text);
    VAR
      CustLedgerEntry@1003 : Record "Cust. Ledger Entry";
      VendorLedgerEntry@1004 : Record "Vendor Ledger Entry";
      BankAccountLedgerEntry@1000 : Record "Bank Account Ledger Entry";
      MinAmount@1001 : Decimal;
      MaxAmount@1002 : Decimal;
    BEGIN
      GetAmountRangeForTolerance(MinAmount,MaxAmount);

      case "Account Type" of
        "Account Type"::Customer:
          begin
            GetCustomerLedgerEntriesInAmountRange(CustLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Customer Ledger Entries",CustLedgerEntry);
          end;
        "Account Type"::Vendor:
          begin
            GetVendorLedgerEntriesInAmountRange(VendorLedgerEntry,"Account No.",AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Vendor Ledger Entries",VendorLedgerEntry);
          end;
        "Account Type"::"Bank Account":
          begin
            GetBankAccountLedgerEntriesInAmountRange(BankAccountLedgerEntry,AmountFilter,MinAmount,MaxAmount);
            PAGE.RUN(PAGE::"Bank Account Ledger Entries",BankAccountLedgerEntry);
          end;
      end;
    END;

    LOCAL PROCEDURE GetCustomerLedgerEntriesInAmountRange@41(VAR CustLedgerEntry@1004 : Record "Cust. Ledger Entry";AccountNo@1005 : Code[20];AmountFilter@1001 : Text;MinAmount@1002 : Decimal;MaxAmount@1003 : Decimal) : Integer;
    VAR
      BankAccount@1000 : Record "Bank Account";
    BEGIN
      CustLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");
      BankAccount.GET("Bank Account No.");
      GetApplicableCustomerLedgerEntries(CustLedgerEntry,BankAccount."Currency Code",AccountNo);

      if BankAccount.IsInLocalCurrency then
        CustLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      else
        CustLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      exit(CustLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetVendorLedgerEntriesInAmountRange@42(VAR VendorLedgerEntry@1004 : Record "Vendor Ledger Entry";AccountNo@1005 : Code[20];AmountFilter@1002 : Text;MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal) : Integer;
    VAR
      BankAccount@1003 : Record "Bank Account";
    BEGIN
      VendorLedgerEntry.SETAUTOCALCFIELDS("Remaining Amount","Remaining Amt. (LCY)");

      BankAccount.GET("Bank Account No.");
      GetApplicableVendorLedgerEntries(VendorLedgerEntry,BankAccount."Currency Code",AccountNo);

      if BankAccount.IsInLocalCurrency then
        VendorLedgerEntry.SETFILTER("Remaining Amt. (LCY)",AmountFilter,MinAmount,MaxAmount)
      else
        VendorLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      exit(VendorLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetBankAccountLedgerEntriesInAmountRange@7(VAR BankAccountLedgerEntry@1004 : Record "Bank Account Ledger Entry";AmountFilter@1002 : Text;MinAmount@1001 : Decimal;MaxAmount@1000 : Decimal) : Integer;
    VAR
      BankAccount@1003 : Record "Bank Account";
    BEGIN
      BankAccount.GET("Bank Account No.");
      GetApplicableBankAccountLedgerEntries(BankAccountLedgerEntry,BankAccount."Currency Code","Bank Account No.");

      BankAccountLedgerEntry.SETFILTER("Remaining Amount",AmountFilter,MinAmount,MaxAmount);

      exit(BankAccountLedgerEntry.COUNT);
    END;

    LOCAL PROCEDURE GetApplicableCustomerLedgerEntries@15(VAR CustLedgerEntry@1000 : Record "Cust. Ledger Entry";CurrencyCode@1001 : Code[10];AccountNo@1002 : Code[20]);
    BEGIN
      CustLedgerEntry.SETRANGE(Open,true);
      CustLedgerEntry.SETRANGE("Applies-to ID",'');
      CustLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        CustLedgerEntry."Document Type"::Payment,
        CustLedgerEntry."Document Type"::Refund);

      if CurrencyCode <> '' then
        CustLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      if AccountNo <> '' then
        CustLedgerEntry.SETFILTER("Customer No.",AccountNo);
    END;

    LOCAL PROCEDURE GetApplicableVendorLedgerEntries@22(VAR VendorLedgerEntry@1000 : Record "Vendor Ledger Entry";CurrencyCode@1002 : Code[10];AccountNo@1001 : Code[20]);
    BEGIN
      VendorLedgerEntry.SETRANGE(Open,true);
      VendorLedgerEntry.SETRANGE("Applies-to ID",'');
      VendorLedgerEntry.SETFILTER("Document Type",'<>%1&<>%2',
        VendorLedgerEntry."Document Type"::Payment,
        VendorLedgerEntry."Document Type"::Refund);

      if CurrencyCode <> '' then
        VendorLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      if AccountNo <> '' then
        VendorLedgerEntry.SETFILTER("Vendor No.",AccountNo);
    END;

    LOCAL PROCEDURE GetApplicableBankAccountLedgerEntries@11(VAR BankAccountLedgerEntry@1000 : Record "Bank Account Ledger Entry";CurrencyCode@1002 : Code[10];AccountNo@1001 : Code[20]);
    BEGIN
      BankAccountLedgerEntry.SETRANGE(Open,true);

      if CurrencyCode <> '' then
        BankAccountLedgerEntry.SETRANGE("Currency Code",CurrencyCode);

      if AccountNo <> '' then
        BankAccountLedgerEntry.SETRANGE("Bank Account No.",AccountNo);
    END;

    [External]
    PROCEDURE FilterBankRecLines@20(BankAccRecon@1000 : Record "Bank Acc. Reconciliation");
    BEGIN
      RESET;
      SETRANGE("Statement Type",BankAccRecon."Statement Type");
      SETRANGE("Bank Account No.",BankAccRecon."Bank Account No.");
      SETRANGE("Statement No.",BankAccRecon."Statement No.");
    END;

    [External]
    PROCEDURE LinesExist@19(BankAccRecon@1001 : Record "Bank Acc. Reconciliation") : Boolean;
    BEGIN
      FilterBankRecLines(BankAccRecon);
      exit(FINDSET);
    END;

    [External]
    PROCEDURE GetAppliedToDocumentNo@30() : Text;
    VAR
      ApplyType@1002 : '"Document No.","Entry No."';
    BEGIN
      exit(GetAppliedNo(ApplyType::"Document No."));
    END;

    [External]
    PROCEDURE GetAppliedToEntryNo@13() : Text;
    VAR
      ApplyType@1000 : '"Document No.","Entry No."';
    BEGIN
      exit(GetAppliedNo(ApplyType::"Entry No."));
    END;

    LOCAL PROCEDURE GetFirstAppliedToEntryNo@17() : Integer;
    VAR
      AppliedEntryNumbers@1001 : Text;
      AppliedToEntryNo@1003 : Integer;
    BEGIN
      AppliedEntryNumbers := GetAppliedToEntryNo;
      if AppliedEntryNumbers = '' then
        exit(0);
      EVALUATE(AppliedToEntryNo,SELECTSTR(1,AppliedEntryNumbers));
      exit(AppliedToEntryNo);
    END;

    LOCAL PROCEDURE GetAppliedNo@32(ApplyType@1000 : '"Document No.","Entry No."') : Text;
    VAR
      AppliedPaymentEntry@1002 : Record "Applied Payment Entry";
      AppliedNumbers@1001 : Text;
    BEGIN
      AppliedPaymentEntry.SETRANGE("Statement Type","Statement Type");
      AppliedPaymentEntry.SETRANGE("Bank Account No.","Bank Account No.");
      AppliedPaymentEntry.SETRANGE("Statement No.","Statement No.");
      AppliedPaymentEntry.SETRANGE("Statement Line No.","Statement Line No.");

      AppliedNumbers := '';
      if AppliedPaymentEntry.FINDSET then begin
        repeat
          if ApplyType = ApplyType::"Document No." then begin
            if AppliedPaymentEntry."Document No." <> '' then
              if AppliedNumbers = '' then
                AppliedNumbers := AppliedPaymentEntry."Document No."
              else
                AppliedNumbers := AppliedNumbers + ', ' + AppliedPaymentEntry."Document No.";
          end else begin
            if AppliedPaymentEntry."Applies-to Entry No." <> 0 then
              if AppliedNumbers = '' then
                AppliedNumbers := FORMAT(AppliedPaymentEntry."Applies-to Entry No.")
              else
                AppliedNumbers := AppliedNumbers + ', ' + FORMAT(AppliedPaymentEntry."Applies-to Entry No.");
          end;
        until AppliedPaymentEntry.NEXT = 0;
      end;

      exit(AppliedNumbers);
    END;

    [External]
    PROCEDURE TransferRemainingAmountToAccount@31();
    VAR
      AppliedPaymentEntry@1000 : Record "Applied Payment Entry";
    BEGIN
      TESTFIELD("Account No.");

      AppliedPaymentEntry.TransferFromBankAccReconLine(Rec);
      AppliedPaymentEntry."Account Type" := GetAppliedToAccountType;
      AppliedPaymentEntry."Account No." := GetAppliedToAccountNo;
      AppliedPaymentEntry.VALIDATE("Applied Amount",Difference);
      AppliedPaymentEntry.VALIDATE("Match Confidence",AppliedPaymentEntry."Match Confidence"::Manual);
      AppliedPaymentEntry.INSERT(true);
    END;

    [External]
    PROCEDURE GetAmountRangeForTolerance@8(VAR MinAmount@1001 : Decimal;VAR MaxAmount@1002 : Decimal);
    VAR
      BankAccount@1000 : Record "Bank Account";
      TempAmount@1003 : Decimal;
    BEGIN
      BankAccount.GET("Bank Account No.");
      case BankAccount."Match Tolerance Type" of
        BankAccount."Match Tolerance Type"::Amount:
          begin
            MinAmount := "Statement Amount" - BankAccount."Match Tolerance Value";
            MaxAmount := "Statement Amount" + BankAccount."Match Tolerance Value";

            if ("Statement Amount" >= 0) and (MinAmount < 0) then
              MinAmount := 0
            else
              if ("Statement Amount" < 0) and (MaxAmount > 0) then
                MaxAmount := 0;
          end;
        BankAccount."Match Tolerance Type"::Percentage:
          begin
            MinAmount := "Statement Amount" * (1 - BankAccount."Match Tolerance Value" / 100);
            MaxAmount := "Statement Amount" * (1 + BankAccount."Match Tolerance Value" / 100);

            if "Statement Amount" < 0 then begin
              TempAmount := MinAmount;
              MinAmount := MaxAmount;
              MaxAmount := TempAmount;
            end;
          end;
      end;

      MinAmount := ROUND(MinAmount);
      MaxAmount := ROUND(MaxAmount);
    END;

    [External]
    PROCEDURE GetAppliedPmtData@52(VAR AppliedPmtEntry@1000 : Record "Applied Payment Entry";VAR RemainingAmountAfterPosting@1002 : Decimal;VAR DifferenceStatementAmtToApplEntryAmount@1001 : Decimal;PmtAppliedToTxt@1004 : Text);
    VAR
      CurrRemAmtAfterPosting@1003 : Decimal;
    BEGIN
      AppliedPmtEntry.INIT;
      RemainingAmountAfterPosting := 0;
      DifferenceStatementAmtToApplEntryAmount := 0;

      AppliedPmtEntry.FilterAppliedPmtEntry(Rec);
      AppliedPmtEntry.SETFILTER("Applies-to Entry No.",'<>0');
      if AppliedPmtEntry.FINDSET then begin
        DifferenceStatementAmtToApplEntryAmount := "Statement Amount";
        repeat
          CurrRemAmtAfterPosting :=
            AppliedPmtEntry.GetRemAmt -
            AppliedPmtEntry.GetAmtAppliedToOtherStmtLines;

          RemainingAmountAfterPosting += CurrRemAmtAfterPosting - AppliedPmtEntry."Applied Amount";
          DifferenceStatementAmtToApplEntryAmount -= CurrRemAmtAfterPosting - AppliedPmtEntry."Applied Pmt. Discount";
        until AppliedPmtEntry.NEXT = 0;
      end;

      if "Applied Entries" > 1 then
        AppliedPmtEntry.Description := STRSUBSTNO(PmtAppliedToTxt,"Applied Entries");
    END;

    LOCAL PROCEDURE UpdateParentLineStatementAmount@38();
    VAR
      BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      if BankAccReconciliationLine.GET("Statement Type","Bank Account No.","Statement No.","Parent Line No.") then begin
        BankAccReconciliationLine.VALIDATE("Statement Amount","Statement Amount" + BankAccReconciliationLine."Statement Amount");
        BankAccReconciliationLine.MODIFY(true)
      end
    END;

    [External]
    PROCEDURE IsTransactionPostedAndReconciled@27() : Boolean;
    VAR
      PostedPaymentReconLine@1001 : Record "Posted Payment Recon. Line";
    BEGIN
      if "Transaction ID" <> '' then begin
        PostedPaymentReconLine.SETRANGE("Bank Account No.","Bank Account No.");
        PostedPaymentReconLine.SETRANGE("Transaction ID","Transaction ID");
        PostedPaymentReconLine.SETRANGE(Reconciled,true);
        exit(PostedPaymentReconLine.FINDFIRST)
      end;
      exit(false);
    END;

    LOCAL PROCEDURE IsTransactionPostedAndNotReconciled@48() : Boolean;
    VAR
      PostedPaymentReconLine@1001 : Record "Posted Payment Recon. Line";
    BEGIN
      if "Transaction ID" <> '' then begin
        PostedPaymentReconLine.SETRANGE("Bank Account No.","Bank Account No.");
        PostedPaymentReconLine.SETRANGE("Transaction ID","Transaction ID");
        PostedPaymentReconLine.SETRANGE(Reconciled,false);
        exit(PostedPaymentReconLine.FINDFIRST)
      end;
      exit(false);
    END;

    LOCAL PROCEDURE IsTransactionAlreadyImported@28() : Boolean;
    VAR
      BankAccReconciliationLine@1001 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      if "Transaction ID" <> '' then begin
        BankAccReconciliationLine.SETRANGE("Statement Type","Statement Type");
        BankAccReconciliationLine.SETRANGE("Bank Account No.","Bank Account No.");
        BankAccReconciliationLine.SETRANGE("Transaction ID","Transaction ID");
        exit(BankAccReconciliationLine.FINDFIRST)
      end;
      exit(false);
    END;

    LOCAL PROCEDURE AllowImportOfPostedNotReconciledTransactions@49() : Boolean;
    VAR
      BankAccReconciliation@1000 : Record "Bank Acc. Reconciliation";
    BEGIN
      BankAccReconciliation.GET("Statement Type","Bank Account No.","Statement No.");
      if BankAccReconciliation."Import Posted Transactions" = BankAccReconciliation."Import Posted Transactions"::" " then begin
        BankAccReconciliation."Import Posted Transactions" := BankAccReconciliation."Import Posted Transactions"::No;
        if GUIALLOWED then
          if CONFIRM(ImportPostedTransactionsQst) then
            BankAccReconciliation."Import Posted Transactions" := BankAccReconciliation."Import Posted Transactions"::Yes;
        BankAccReconciliation.MODIFY;
      end;

      exit(BankAccReconciliation."Import Posted Transactions" = BankAccReconciliation."Import Posted Transactions"::Yes);
    END;

    [External]
    PROCEDURE CanImport@44() : Boolean;
    BEGIN
      if IsTransactionPostedAndReconciled or IsTransactionAlreadyImported then
        exit(false);

      if IsTransactionPostedAndNotReconciled then
        exit(AllowImportOfPostedNotReconciledTransactions);

      exit(true);
    END;

    LOCAL PROCEDURE GetSalepersonPurchaserCode@51() : Code[20];
    VAR
      Customer@1002 : Record Customer;
      Vendor@1003 : Record Vendor;
    BEGIN
      case "Account Type" of
        "Account Type"::Customer:
          if Customer.GET("Account No.") then
            exit(Customer."Salesperson Code");
        "Account Type"::Vendor:
          if Vendor.GET("Account No.") then
            exit(Vendor."Purchaser Code");
      end;
    END;

    [External]
    PROCEDURE GetAppliesToID@62() : Code[50];
    VAR
      CustLedgerEntry@1001 : Record "Cust. Ledger Entry";
    BEGIN
      exit(COPYSTR(FORMAT("Statement No.") + '-' + FORMAT("Statement Line No."),1,MAXSTRLEN(CustLedgerEntry."Applies-to ID")));
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

