OBJECT Report 492 Copy Purchase Document
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Purchase Document;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  PurchSetup.GET;
                  CopyDocMgt.SetProperties(
                    IncludeHeader,RecalculateLines,false,false,false,PurchSetup."Exact Cost Reversing Mandatory",false);
                  CopyDocMgt.CopyPurchDoc(DocType,DocNo,PurchHeader)
                END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if DocNo <> '' then begin
                     case DocType of
                       DocType::Quote:
                         if FromPurchHeader.GET(FromPurchHeader."Document Type"::Quote,DocNo) then;
                       DocType::"Blanket Order":
                         if FromPurchHeader.GET(FromPurchHeader."Document Type"::"Blanket Order",DocNo) then;
                       DocType::Order:
                         if FromPurchHeader.GET(FromPurchHeader."Document Type"::Order,DocNo) then;
                       DocType::Invoice:
                         if FromPurchHeader.GET(FromPurchHeader."Document Type"::Invoice,DocNo) then;
                       DocType::"Return Order":
                         if FromPurchHeader.GET(FromPurchHeader."Document Type"::"Return Order",DocNo) then;
                       DocType::"Credit Memo":
                         if FromPurchHeader.GET(FromPurchHeader."Document Type"::"Credit Memo",DocNo) then;
                       DocType::"Posted Receipt":
                         if FromPurchRcptHeader.GET(DocNo) then
                           FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
                       DocType::"Posted Invoice":
                         if FromPurchInvHeader.GET(DocNo) then
                           FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
                       DocType::"Posted Return Shipment":
                         if FromReturnShptHeader.GET(DocNo) then
                           FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
                       DocType::"Posted Credit Memo":
                         if FromPurchCrMemoHeader.GET(DocNo) then
                           FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
                     end;
                     if FromPurchHeader."No." = '' then
                       DocNo := '';
                   end;
                   ValidateDocNo;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  Name=DocumentType;
                  CaptionML=ENU=Document Type;
                  ToolTipML=ENU=Specifies the type of document that is processed by the report or batch job.;
                  OptionCaptionML=ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocType;
                  OnValidate=BEGIN
                               DocNo := '';
                               ValidateDocNo;
                             END;
                              }

      { 8   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the document that is processed by the report or batch job.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocNo;
                  OnValidate=BEGIN
                               ValidateDocNo;
                             END;

                  OnLookup=BEGIN
                             LookupDocNo;
                           END;
                            }

      { 5   ;2   ;Field     ;
                  Name=BuyfromVendorNo;
                  CaptionML=ENU=Buy-from Vendor No.;
                  ToolTipML=ENU=Specifies the vendor according to the values in the Document No. and Document Type fields.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=FromPurchHeader."Buy-from Vendor No.";
                  Editable=FALSE }

      { 7   ;2   ;Field     ;
                  Name=BuyfromVendorName;
                  CaptionML=ENU=Buy-from Vendor Name;
                  ToolTipML=ENU=Specifies the vendor according to the values in the Document No. and Document Type fields.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=FromPurchHeader."Buy-from Vendor Name";
                  Editable=FALSE }

      { 1   ;2   ;Field     ;
                  Name=IncludeHeader_Options;
                  CaptionML=ENU=Include Header;
                  ToolTipML=ENU=Specifies if you also want to copy the information from the document header. When you copy quotes, if the posting date field of the new document is empty, the work date is used as the posting date of the new document.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=IncludeHeader;
                  OnValidate=BEGIN
                               ValidateIncludeHeader;
                             END;
                              }

      { 4   ;2   ;Field     ;
                  Name=RecalculateLines;
                  CaptionML=ENU=Recalculate Lines;
                  ToolTipML=ENU=Specifies that lines are recalculate and inserted on the purchase document you are creating. The batch job retains the item numbers and item quantities but recalculates the amounts on the lines based on the vendor information on the new document header. In this way, the batch job accounts for item prices and discounts that are specifically linked to the vendor on the new header.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RecalculateLines;
                  OnValidate=BEGIN
                               if (DocType = DocType::"Posted Receipt") or (DocType = DocType::"Posted Return Shipment") then
                                 RecalculateLines := true;
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      PurchHeader@1007 : Record "Purchase Header";
      FromPurchHeader@1010 : Record "Purchase Header";
      FromPurchRcptHeader@1012 : Record "Purch. Rcpt. Header";
      FromPurchInvHeader@1014 : Record "Purch. Inv. Header";
      FromReturnShptHeader@1008 : Record "Return Shipment Header";
      FromPurchCrMemoHeader@1016 : Record "Purch. Cr. Memo Hdr.";
      PurchSetup@1003 : Record "Purchases & Payables Setup";
      CopyDocMgt@1033 : Codeunit "Copy Document Mgt.";
      DocType@1024 : 'Quote,"Blanket Order",Order,Invoice,"Return Order","Credit Memo","Posted Receipt","Posted Invoice","Posted Return Shipment","Posted Credit Memo"';
      DocNo@1025 : Code[20];
      IncludeHeader@1026 : Boolean;
      RecalculateLines@1027 : Boolean;
      Text000@1002 : TextConst 'ENU=The price information may not be reversed correctly, if you copy a %1. If possible, copy a %2 instead or use %3 functionality.';
      Text001@1001 : TextConst 'ENU=Undo Receipt';
      Text002@1000 : TextConst 'ENU=Undo Return Shipment';
      Text003@1004 : TextConst 'ENU=Quote,Blanket Order,Order,Invoice,Return Order,Credit Memo,Posted Receipt,Posted Invoice,Posted Return Shipment,Posted Credit Memo';

    [External]
    PROCEDURE SetPurchHeader@2(VAR NewPurchHeader@1000 : Record "Purchase Header");
    BEGIN
      NewPurchHeader.TESTFIELD("No.");
      PurchHeader := NewPurchHeader;
    END;

    LOCAL PROCEDURE ValidateDocNo@1();
    VAR
      DocType2@1000 : 'Quote,"Blanket Order",Order,Invoice,"Return Order","Credit Memo","Posted Receipt","Posted Invoice","Posted Return Shipment","Posted Credit Memo"';
    BEGIN
      if DocNo = '' then
        FromPurchHeader.INIT
      else
        if DocNo <> FromPurchHeader."No." then begin
          FromPurchHeader.INIT;
          case DocType of
            DocType::Quote,
            DocType::"Blanket Order",
            DocType::Order,
            DocType::Invoice,
            DocType::"Return Order",
            DocType::"Credit Memo":
              FromPurchHeader.GET(CopyDocMgt.PurchHeaderDocType(DocType),DocNo);
            DocType::"Posted Receipt":
              begin
                FromPurchRcptHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchRcptHeader);
                if PurchHeader."Document Type" in
                   [PurchHeader."Document Type"::"Return Order",PurchHeader."Document Type"::"Credit Memo"]
                then begin
                  DocType2 := DocType2::"Posted Invoice";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text001);
                end;
              end;
            DocType::"Posted Invoice":
              begin
                FromPurchInvHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchInvHeader);
              end;
            DocType::"Posted Return Shipment":
              begin
                FromReturnShptHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromReturnShptHeader);
                if PurchHeader."Document Type" in
                   [PurchHeader."Document Type"::Order,PurchHeader."Document Type"::Invoice]
                then begin
                  DocType2 := DocType2::"Posted Credit Memo";
                  MESSAGE(Text000,SELECTSTR(1 + DocType,Text003),SELECTSTR(1 + DocType2,Text003),Text002);
                end;
              end;
            DocType::"Posted Credit Memo":
              begin
                FromPurchCrMemoHeader.GET(DocNo);
                FromPurchHeader.TRANSFERFIELDS(FromPurchCrMemoHeader);
              end;
          end;
        end;
      FromPurchHeader."No." := '';

      IncludeHeader :=
        (DocType in [DocType::"Posted Invoice",DocType::"Posted Credit Memo"]) and
        ((DocType = DocType::"Posted Credit Memo") <>
         (PurchHeader."Document Type" = PurchHeader."Document Type"::"Credit Memo")) and
        (PurchHeader."Buy-from Vendor No." in [FromPurchHeader."Buy-from Vendor No.",'']);
      ValidateIncludeHeader;
    END;

    LOCAL PROCEDURE LookupDocNo@3();
    BEGIN
      case DocType of
        DocType::Quote,
        DocType::"Blanket Order",
        DocType::Order,
        DocType::Invoice,
        DocType::"Return Order",
        DocType::"Credit Memo":
          begin
            FromPurchHeader.FILTERGROUP := 0;
            FromPurchHeader.SETRANGE("Document Type",CopyDocMgt.PurchHeaderDocType(DocType));
            if PurchHeader."Document Type" = CopyDocMgt.PurchHeaderDocType(DocType) then
              FromPurchHeader.SETFILTER("No.",'<>%1',PurchHeader."No.");
            FromPurchHeader.FILTERGROUP := 2;
            FromPurchHeader."Document Type" := CopyDocMgt.PurchHeaderDocType(DocType);
            FromPurchHeader."No." := DocNo;
            if (DocNo = '') and (PurchHeader."Buy-from Vendor No." <> '') then
              if FromPurchHeader.SETCURRENTKEY("Document Type","Buy-from Vendor No.") then begin
                FromPurchHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                if FromPurchHeader.FIND('=><') then;
              end;
            if PAGE.RUNMODAL(0,FromPurchHeader) = ACTION::LookupOK then
              DocNo := FromPurchHeader."No.";
          end;
        DocType::"Posted Receipt":
          begin
            FromPurchRcptHeader."No." := DocNo;
            if (DocNo = '') and (PurchHeader."Buy-from Vendor No." <> '') then
              if FromPurchRcptHeader.SETCURRENTKEY("Buy-from Vendor No.") then begin
                FromPurchRcptHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                if FromPurchRcptHeader.FIND('=><') then;
              end;
            if PAGE.RUNMODAL(0,FromPurchRcptHeader) = ACTION::LookupOK then
              DocNo := FromPurchRcptHeader."No.";
          end;
        DocType::"Posted Invoice":
          begin
            FromPurchInvHeader."No." := DocNo;
            if (DocNo = '') and (PurchHeader."Buy-from Vendor No." <> '') then
              if FromPurchInvHeader.SETCURRENTKEY("Buy-from Vendor No.") then begin
                FromPurchInvHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                if FromPurchInvHeader.FIND('=><') then;
              end;
            FromPurchInvHeader.FILTERGROUP(2);
            FromPurchInvHeader.SETRANGE("Prepayment Invoice",false);
            FromPurchInvHeader.FILTERGROUP(0);
            if PAGE.RUNMODAL(0,FromPurchInvHeader) = ACTION::LookupOK then
              DocNo := FromPurchInvHeader."No.";
          end;
        DocType::"Posted Return Shipment":
          begin
            FromReturnShptHeader."No." := DocNo;
            if (DocNo = '') and (PurchHeader."Buy-from Vendor No." <> '') then
              if FromReturnShptHeader.SETCURRENTKEY("Buy-from Vendor No.") then begin
                FromReturnShptHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                if FromReturnShptHeader.FIND('=><') then;
              end;
            if PAGE.RUNMODAL(0,FromReturnShptHeader) = ACTION::LookupOK then
              DocNo := FromReturnShptHeader."No.";
          end;
        DocType::"Posted Credit Memo":
          begin
            FromPurchCrMemoHeader."No." := DocNo;
            if (DocNo = '') and (PurchHeader."Buy-from Vendor No." <> '') then
              if FromPurchCrMemoHeader.SETCURRENTKEY("Buy-from Vendor No.") then begin
                FromPurchCrMemoHeader."Buy-from Vendor No." := PurchHeader."Buy-from Vendor No.";
                if FromPurchCrMemoHeader.FIND('=><') then;
              end;
            FromPurchCrMemoHeader.FILTERGROUP(2);
            FromPurchCrMemoHeader.SETRANGE("Prepayment Credit Memo",false);
            FromPurchCrMemoHeader.FILTERGROUP(0);
            if PAGE.RUNMODAL(0,FromPurchCrMemoHeader) = ACTION::LookupOK then
              DocNo := FromPurchCrMemoHeader."No.";
          end;
      end;
      ValidateDocNo;
    END;

    LOCAL PROCEDURE ValidateIncludeHeader@4();
    BEGIN
      RecalculateLines :=
        (DocType in [DocType::"Posted Receipt",DocType::"Posted Return Shipment"]) or not IncludeHeader;
    END;

    PROCEDURE InitializeRequest@5(NewDocType@1001 : Option;NewDocNo@1000 : Code[20];NewIncludeHeader@1002 : Boolean;NewRecalcLines@1003 : Boolean);
    BEGIN
      DocType := NewDocType;
      DocNo := NewDocNo;
      IncludeHeader := NewIncludeHeader;
      RecalculateLines := NewRecalcLines;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

