OBJECT Table 843 Cash Flow Setup
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Service Password"=rimd;
    CaptionML=ENU=Cash Flow Setup;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Cash Flow Forecast No. Series;Code20;
                                                   TableRelation="No. Series";
                                                   CaptionML=ENU=Cash Flow Forecast No. Series }
    { 3   ;   ;Receivables CF Account No.;Code20  ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Receivables CF Account No.");
                                                              END;

                                                   CaptionML=ENU=Receivables CF Account No. }
    { 4   ;   ;Payables CF Account No.;Code20     ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Payables CF Account No.");
                                                              END;

                                                   CaptionML=ENU=Payables CF Account No. }
    { 5   ;   ;Sales Order CF Account No.;Code20  ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Sales Order CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Sales Order CF Account No. }
    { 6   ;   ;Purch. Order CF Account No.;Code20 ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Purch. Order CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                                                   CaptionML=ENU=Purch. Order CF Account No. }
    { 8   ;   ;FA Budget CF Account No.;Code20    ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("FA Budget CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=FA Budget CF Account No. }
    { 9   ;   ;FA Disposal CF Account No.;Code20  ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("FA Disposal CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=FA Disposal CF Account No. }
    { 10  ;   ;Service CF Account No.;Code20      ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Service CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData "Service Header"=R;
                                                   CaptionML=ENU=Service CF Account No. }
    { 11  ;   ;CF No. on Chart in Role Center;Code20;
                                                   OnValidate=BEGIN
                                                                if not ConfirmedChartRoleCenterCFNo("CF No. on Chart in Role Center") then
                                                                  "CF No. on Chart in Role Center" := xRec."CF No. on Chart in Role Center";
                                                              END;

                                                   CaptionML=ENU=CF No. on Chart in Role Center }
    { 12  ;   ;Job CF Account No.  ;Code20        ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Job CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData "Job Planning Line"=R;
                                                   CaptionML=ENU=Job CF Account No. }
    { 13  ;   ;Automatic Update Frequency;Option  ;OnValidate=VAR
                                                                CashFlowManagement@1000 : Codeunit "Cash Flow Management";
                                                              BEGIN
                                                                if "Automatic Update Frequency" = xRec."Automatic Update Frequency" then
                                                                  exit;

                                                                CashFlowManagement.DeleteJobQueueEntries;
                                                                CashFlowManagement.CreateAndStartJobQueueEntry("Automatic Update Frequency");
                                                              END;

                                                   CaptionML=ENU=Automatic Update Frequency;
                                                   OptionCaptionML=ENU=Never,Daily,Weekly;
                                                   OptionString=Never,Daily,Weekly }
    { 14  ;   ;Tax CF Account No.  ;Code20        ;TableRelation="Cash Flow Account";
                                                   OnValidate=BEGIN
                                                                CheckAccType("Tax CF Account No.");
                                                              END;

                                                   AccessByPermission=TableData "VAT Entry"=R;
                                                   CaptionML=ENU=Tax CF Account No. }
    { 19  ;   ;Taxable Period      ;Option        ;InitValue=Quarterly;
                                                   CaptionML=ENU=Taxable Period;
                                                   OptionCaptionML=ENU=Monthly,Quarterly,Accounting Period,Yearly;
                                                   OptionString=Monthly,Quarterly,"Accounting Period",Yearly }
    { 20  ;   ;Tax Payment Window  ;DateFormula   ;CaptionML=ENU=Tax Payment Window }
    { 21  ;   ;Tax Bal. Account Type;Option       ;OnValidate=BEGIN
                                                                EmptyTaxBalAccountIfTypeChanged(xRec."Tax Bal. Account Type");
                                                              END;

                                                   CaptionML=ENU=Tax Bal. Account Type;
                                                   OptionCaptionML=ENU=" ,Vendor,G/L Account";
                                                   OptionString=" ",Vendor,"G/L Account" }
    { 22  ;   ;Tax Bal. Account No.;Code20        ;TableRelation=IF ("Tax Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Tax Bal. Account Type"=CONST(Vendor)) Vendor;
                                                   CaptionML=ENU=Tax Bal. Account No. }
    { 23  ;   ;API Key             ;Text250       ;OnValidate=BEGIN
                                                                if not ISNULLGUID("Service Pass API Key ID") then
                                                                  EnableEncryption;
                                                                SaveUserDefinedAPIKey("API Key");
                                                              END;

                                                   CaptionML=ENU=API Key }
    { 24  ;   ;API URL             ;Text250       ;CaptionML=ENU=API URL }
    { 25  ;   ;Variance %          ;Integer       ;InitValue=35;
                                                   CaptionML=ENU=Variance %;
                                                   MinValue=1;
                                                   MaxValue=100 }
    { 26  ;   ;Historical Periods  ;Integer       ;InitValue=24;
                                                   CaptionML=ENU=Historical Periods;
                                                   MinValue=5;
                                                   MaxValue=24 }
    { 27  ;   ;Horizon             ;Integer       ;InitValue=4;
                                                   CaptionML=ENU=Horizon;
                                                   MinValue=3;
                                                   MaxValue=24 }
    { 28  ;   ;Period Type         ;Option        ;InitValue=Month;
                                                   CaptionML=ENU=Period Type;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year;
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 29  ;   ;TimeOut             ;Integer       ;InitValue=120;
                                                   CaptionML=ENU=TimeOut;
                                                   MinValue=1 }
    { 30  ;   ;Service Pass API Key ID;GUID       ;TableRelation="Service Password".Key;
                                                   CaptionML=ENU=Service Pass API Key ID;
                                                   Description=The Key for retrieving the API Key from the Service Password table. }
    { 31  ;   ;Cortana Intelligence Enabled;Boolean;
                                                   InitValue=false;
                                                   CaptionML=ENU=Cortana Intelligence Enabled }
    { 32  ;   ;Show Cortana Notification;Boolean  ;InitValue=true;
                                                   CaptionML=ENU=Show Cortana Notification }
  }
  KEYS
  {
    {    ;"Primary Key"                           ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@=Cash Flow <No.> <Description> is shown in the chart on the Role Center.;ENU=Cash Flow Forecast %1 %2 is shown in the chart on the Role Center. Do you want to show this Cash Flow Forecast instead?';
      AzureKeyVaultManagement@1001 : Codeunit "Azure Key Vault Management";

    LOCAL PROCEDURE CheckAccType@1(Code@1000 : Code[20]);
    VAR
      CFAccount@1001 : Record "Cash Flow Account";
    BEGIN
      if Code <> '' then begin
        CFAccount.GET(Code);
        CFAccount.TESTFIELD("Account Type",CFAccount."Account Type"::Entry);
      end;
    END;

    [External]
    PROCEDURE SetChartRoleCenterCFNo@11(CashFlowNo@1000 : Code[20]);
    BEGIN
      GET;
      "CF No. on Chart in Role Center" := CashFlowNo;
      MODIFY;
    END;

    [External]
    PROCEDURE GetChartRoleCenterCFNo@2() : Code[20];
    BEGIN
      GET;
      exit("CF No. on Chart in Role Center");
    END;

    LOCAL PROCEDURE ConfirmedChartRoleCenterCFNo@3(NewCashFlowNo@1000 : Code[20]) : Boolean;
    VAR
      CashFlowForecast@1001 : Record "Cash Flow Forecast";
    BEGIN
      if NewCashFlowNo = '' then
        exit(true);

      if not (xRec."CF No. on Chart in Role Center" in ['',NewCashFlowNo]) then begin
        CashFlowForecast.GET(xRec."CF No. on Chart in Role Center");
        exit(CONFIRM(STRSUBSTNO(Text001,CashFlowForecast."No.",CashFlowForecast.Description),true));
      end;
      exit(true);
    END;

    [External]
    PROCEDURE GetTaxPaymentDueDate@4(ReferenceDate@1000 : Date) : Date;
    VAR
      EndOfTaxPeriod@1002 : Date;
    BEGIN
      GET;
      EndOfTaxPeriod := CalculateTaxableDate(ReferenceDate,true);
      exit(CALCDATE("Tax Payment Window",EndOfTaxPeriod));
    END;

    [External]
    PROCEDURE GetTaxPeriodStartEndDates@8(TaxDueDate@1000 : Date;VAR StartDate@1001 : Date;VAR EndDate@1002 : Date);
    BEGIN
      GET;
      EndDate := GetTaxPeriodEndDate(TaxDueDate);
      StartDate := CalculateTaxableDate(EndDate,false);
    END;

    [External]
    PROCEDURE GetTaxPaymentStartDate@5(TaxDueDate@1000 : Date) : Date;
    BEGIN
      GET;
      exit(CALCDATE('<1D>',GetTaxPeriodEndDate(TaxDueDate)));
    END;

    LOCAL PROCEDURE GetTaxPeriodEndDate@7(TaxDueDate@1000 : Date) : Date;
    VAR
      ReverseDateFormula@1001 : DateFormula;
    BEGIN
      GET;
      EVALUATE(ReverseDateFormula,ReverseDateFormulaAsText);
      exit(CALCDATE(ReverseDateFormula,TaxDueDate));
    END;

    [External]
    PROCEDURE GetCurrentPeriodStartDate@12() : Date;
    BEGIN
      GET;
      exit(CalculateTaxableDate(WORKDATE,false));
    END;

    [External]
    PROCEDURE UpdateTaxPaymentInfo@29(NewTaxablePeriod@1002 : Option;NewPaymentWindow@1000 : DateFormula;NewTaxBalAccountType@1004 : Option;NewTaxBalAccountNum@1001 : Code[20]);
    VAR
      Modified@1003 : Boolean;
    BEGIN
      GET;
      if "Taxable Period" <> NewTaxablePeriod then begin
        "Taxable Period" := NewTaxablePeriod;
        Modified := true;
      end;

      if "Tax Payment Window" <> NewPaymentWindow then begin
        "Tax Payment Window" := NewPaymentWindow;
        Modified := true;
      end;

      if "Tax Bal. Account Type" <> NewTaxBalAccountType then begin
        "Tax Bal. Account Type" := NewTaxBalAccountType;
        Modified := true;
      end;

      if "Tax Bal. Account No." <> NewTaxBalAccountNum then begin
        "Tax Bal. Account No." := NewTaxBalAccountNum;
        Modified := true;
      end;

      if Modified then
        MODIFY;
    END;

    LOCAL PROCEDURE CalculateTaxableDate@6(ReferenceDate@1000 : Date;FindLast@1001 : Boolean) Result : Date;
    VAR
      AccountingPeriod@1003 : Record "Accounting Period";
    BEGIN
      case "Taxable Period" of
        "Taxable Period"::Monthly:
          if FindLast then
            Result := CALCDATE('<CM>',ReferenceDate)
          else
            Result := CALCDATE('<-CM>',ReferenceDate);
        "Taxable Period"::Quarterly:
          if FindLast then
            Result := CALCDATE('<CQ>',ReferenceDate)
          else
            Result := CALCDATE('<-CQ>',ReferenceDate);
        "Taxable Period"::"Accounting Period":
          if FindLast then begin
            // The end of the current accounting period is the start of the next acc. period - 1 day
            AccountingPeriod.SETFILTER("Starting Date",'>%1',ReferenceDate);
            AccountingPeriod.FINDFIRST;
            Result := AccountingPeriod."Starting Date" - 1;
          end else begin
            // The end of the current accounting period is the start of the next acc. period - 1 day
            AccountingPeriod.SETFILTER("Starting Date",'<=%1',ReferenceDate);
            AccountingPeriod.FINDFIRST;
            Result := AccountingPeriod."Starting Date";
          end;
        "Taxable Period"::Yearly:
          if FindLast then
            Result := CALCDATE('<CY>',ReferenceDate)
          else
            Result := CALCDATE('<-CY>',ReferenceDate);
      end;
    END;

    LOCAL PROCEDURE ReverseDateFormulaAsText@15() Result : Text;
    VAR
      TempChar@1000 : Char;
    BEGIN
      Result := FORMAT("Tax Payment Window");
      if Result = '' then
        exit('');

      if not (COPYSTR(Result,1,1) in ['+','-']) then
        Result := '+' + Result;

      TempChar := '#';
      Result := ReplaceCharInString(Result,'+',TempChar);
      Result := ReplaceCharInString(Result,'-','+');
      Result := ReplaceCharInString(Result,TempChar,'-');
    END;

    LOCAL PROCEDURE ReplaceCharInString@16(StringToReplace@1000 : Text;OldChar@1001 : Char;NewChar@1002 : Char) Result : Text;
    VAR
      Index@1005 : Integer;
      FirstPart@1003 : Text;
      LastPart@1004 : Text;
    BEGIN
      Index := STRPOS(StringToReplace,FORMAT(OldChar));
      Result := StringToReplace;
      while Index > 0 do begin
        if Index > 1 then
          FirstPart := COPYSTR(Result,1,Index - 1);
        if Index < STRLEN(Result) then
          LastPart := COPYSTR(Result,Index + 1);
        Result := FirstPart + FORMAT(NewChar) + LastPart;
        Index := STRPOS(Result,FORMAT(OldChar));
      end;
    END;

    [External]
    PROCEDURE HasValidTaxAccountInfo@9() : Boolean;
    BEGIN
      exit("Tax Bal. Account Type" <> "Tax Bal. Account Type"::" ");
    END;

    [External]
    PROCEDURE EmptyTaxBalAccountIfTypeChanged@10(OldTypeValue@1000 : Option);
    BEGIN
      if "Tax Bal. Account Type" <> OldTypeValue then
        "Tax Bal. Account No." := '';
    END;

    [External]
    PROCEDURE SaveUserDefinedAPIKey@14(APIKeyValue@1000 : Text[250]);
    VAR
      ServicePassword@1002 : Record "Service Password";
    BEGIN
      if ISNULLGUID("Service Pass API Key ID") or not ServicePassword.GET("Service Pass API Key ID") then begin
        ServicePassword.SavePassword(APIKeyValue);
        ServicePassword.INSERT(true);
        "Service Pass API Key ID" := ServicePassword.Key;
      end else begin
        ServicePassword.SavePassword(APIKeyValue);
        ServicePassword.MODIFY;
      end;
    END;

    [Internal]
    PROCEDURE GetMLCredentials@13(VAR APIURL@1003 : Text[250];VAR APIKey@1002 : Text[200];VAR LimitValue@1001 : Decimal) : Boolean;
    VAR
      ServicePassword@1000 : Record "Service Password";
      PermissionManager@1004 : Codeunit "Permission Manager";
    BEGIN
      // user-defined credentials
      if IsAPIUserDefined then begin
        ServicePassword.GET("Service Pass API Key ID");
        APIKey := COPYSTR(ServicePassword.GetPassword,1,200);
        if (APIKey = '') or ("API URL" = '') then
          exit(false);
        APIURL := "API URL";
        exit(true);
      end;

      // if credentials not user-defined retrieve it from Azure Key Vault
      if PermissionManager.SoftwareAsAService then
        exit(RetrieveSaaSMLCredentials(APIURL,APIKey,LimitValue));
    END;

    LOCAL PROCEDURE RetrieveSaaSMLCredentials@55(VAR APIURL@1003 : Text[250];VAR APIKey@1002 : Text[200];VAR LimitValue@1001 : Decimal) : Boolean;
    BEGIN
      if not AzureKeyVaultManagement.GetMachineLearningCredentials(APIURL,APIKey,LimitValue) then
        exit(false);
      APIURL := APIURL + '/execute?api-version=2.0&details=true';
      exit(true);
    END;

    LOCAL PROCEDURE EnableEncryption@56();
    VAR
      EncryptionManagement@1000 : Codeunit "Encryption Management";
    BEGIN
      if not EncryptionManagement.IsEncryptionEnabled then
        EncryptionManagement.EnableEncryption;
    END;

    [External]
    PROCEDURE GetUserDefinedAPIKey@18() : Text[200];
    VAR
      ServicePassword@1000 : Record "Service Password";
    BEGIN
      // user-defined credentials
      if not ISNULLGUID("Service Pass API Key ID") then begin
        ServicePassword.GET("Service Pass API Key ID");
        exit(COPYSTR(ServicePassword.GetPassword,1,200));
      end;
    END;

    [External]
    PROCEDURE IsAPIUserDefined@99() : Boolean;
    BEGIN
      exit(not (ISNULLGUID("Service Pass API Key ID") or ("API URL" = '')));
    END;

    BEGIN
    END.
  }
}

