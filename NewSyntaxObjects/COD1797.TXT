OBJECT Codeunit 1797 Data Migration Facade Helper
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    SingleInstance=true;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DataMigrationFacadeHelper@1000 : Codeunit "Data Migration Facade Helper";

    PROCEDURE CreateShipmentMethodIfNeeded@2(CodeToSet@1001 : Code[10];DescriptionToSet@1002 : Text[50]) : Code[10];
    VAR
      ShipmentMethod@1000 : Record "Shipment Method";
    BEGIN
      if ShipmentMethod.GET(CodeToSet) then
        exit(CodeToSet);

      ShipmentMethod.VALIDATE(Code,CodeToSet);
      ShipmentMethod.VALIDATE(Description,DescriptionToSet);
      ShipmentMethod.INSERT(true);
      exit(ShipmentMethod.Code);
    END;

    PROCEDURE CreateSalespersonPurchaserIfNeeded@3(CodeToSet@1001 : Code[20];NameToSet@1002 : Text[50];PhoneNoToSet@1003 : Text[30];EmailToSet@1004 : Text[80]) : Code[20];
    VAR
      SalespersonPurchaser@1000 : Record "Salesperson/Purchaser";
    BEGIN
      if SalespersonPurchaser.GET(CodeToSet) then
        exit(CodeToSet);

      SalespersonPurchaser.INIT;
      SalespersonPurchaser.VALIDATE(Code,CodeToSet);
      SalespersonPurchaser.VALIDATE(Name,NameToSet);
      SalespersonPurchaser.VALIDATE("Phone No.",PhoneNoToSet);
      SalespersonPurchaser.VALIDATE("E-Mail",EmailToSet);
      SalespersonPurchaser.VALIDATE("Search E-Mail",EmailToSet);
      SalespersonPurchaser.INSERT(true);
      exit(SalespersonPurchaser.Code);
    END;

    PROCEDURE CreateCustomerPriceGroupIfNeeded@4(CodeToSet@1001 : Code[10];DescriptionToSet@1002 : Text[50];PriceIncludesVatToSet@1003 : Boolean) : Code[10];
    VAR
      CustomerPriceGroup@1000 : Record "Customer Price Group";
    BEGIN
      if CustomerPriceGroup.GET(CodeToSet) then
        exit(CodeToSet);

      CustomerPriceGroup.INIT;
      CustomerPriceGroup.VALIDATE(Code,CodeToSet);
      CustomerPriceGroup.VALIDATE(Description,DescriptionToSet);
      CustomerPriceGroup.VALIDATE("Price Includes VAT",PriceIncludesVatToSet);
      CustomerPriceGroup.INSERT(true);
      exit(CustomerPriceGroup.Code);
    END;

    PROCEDURE CreatePaymentTermsIfNeeded@5(CodeToSet@1001 : Code[10];DescriptionToSet@1002 : Text[50];DueDateCalculationToSet@1003 : DateFormula) : Code[10];
    VAR
      PaymentTerms@1000 : Record "Payment Terms";
    BEGIN
      if PaymentTerms.GET(CodeToSet) then
        exit(CodeToSet);

      PaymentTerms.INIT;
      PaymentTerms.VALIDATE(Code,CodeToSet);
      PaymentTerms.VALIDATE(Description,DescriptionToSet);
      PaymentTerms.VALIDATE("Due Date Calculation",DueDateCalculationToSet);
      PaymentTerms.INSERT(true);
      exit(PaymentTerms.Code);
    END;

    PROCEDURE CreatePaymentMethodIfNeeded@6(CodeToSet@1002 : Code[10];DescriptionToSet@1001 : Text[50]) : Code[10];
    VAR
      PaymentMethod@1000 : Record "Payment Method";
    BEGIN
      if PaymentMethod.GET(CodeToSet) then
        exit(CodeToSet);

      PaymentMethod.INIT;
      PaymentMethod.VALIDATE(Code,CodeToSet);
      PaymentMethod.VALIDATE(Description,DescriptionToSet);
      PaymentMethod.INSERT(true);
      exit(PaymentMethod.Code);
    END;

    PROCEDURE DoesPostCodeExist@1(CodeToSearch@1002 : Code[20];CityToSearch@1001 : Text[30]) : Boolean;
    VAR
      PostCode@1000 : Record "Post Code";
    BEGIN
      exit(PostCode.GET(CodeToSearch,CityToSearch));
    END;

    PROCEDURE CreatePostCodeIfNeeded@8(CodeToSet@1002 : Code[20];CityToSet@1001 : Text[30];CountyToSet@1003 : Text[30];CountryRegionCodeToSet@1004 : Code[10]);
    VAR
      PostCode@1000 : Record "Post Code";
    BEGIN
      if PostCode.GET(CodeToSet,CityToSet) then
        exit;

      PostCode.INIT;
      PostCode.VALIDATE(Code,CodeToSet);
      PostCode.VALIDATE(City,CityToSet);
      PostCode.VALIDATE(County,CountyToSet);
      PostCode.VALIDATE("Country/Region Code",CountryRegionCodeToSet);
      PostCode.INSERT(true);
    END;

    PROCEDURE CreateCountryIfNeeded@12(CodeToSet@1002 : Code[10];NameToSet@1001 : Text[50];AddressFormatToSet@1005 : '"Post Code+City","City+Post Code","City+County+Post Code","Blank Line+Post Code+City"';ContactAddressFormatToSet@1006 : 'First,"After Company Name",Last') : Code[10];
    VAR
      CountryRegion@1000 : Record "Country/Region";
    BEGIN
      if CountryRegion.GET(CodeToSet) then
        exit(CountryRegion.Code);

      CountryRegion.INIT;
      CountryRegion.VALIDATE(Code,CodeToSet);
      CountryRegion.VALIDATE(Name,NameToSet);
      CountryRegion.VALIDATE("Address Format",AddressFormatToSet);
      CountryRegion.VALIDATE("Contact Address Format",ContactAddressFormatToSet);
      CountryRegion.INSERT(true);

      exit(CountryRegion.Code);
    END;

    PROCEDURE SearchCountry@14(CodeToSearch@1001 : Code[10];NameToSearch@1003 : Text[50];EUCountryRegionCodeToSearch@1004 : Code[10];IntrastatCodeToSet@1005 : Code[10];VAR CodeToGet@1002 : Code[10]) : Boolean;
    VAR
      CountryRegion@1000 : Record "Country/Region";
    BEGIN
      if CodeToSearch <> '' then
        CountryRegion.SETRANGE(Code,CodeToSearch);

      if NameToSearch <> '' then
        CountryRegion.SETRANGE(Name,NameToSearch);

      if EUCountryRegionCodeToSearch <> '' then
        CountryRegion.SETRANGE("EU Country/Region Code",EUCountryRegionCodeToSearch);

      if IntrastatCodeToSet <> '' then
        CountryRegion.SETRANGE("Intrastat Code",IntrastatCodeToSet);

      if CountryRegion.FINDFIRST then begin
        CodeToGet := CountryRegion.Code;
        exit(true);
      end;
    END;

    PROCEDURE SearchLanguage@7(AbbreviatedNameToSearch@1000 : Code[3];VAR CodeToGet@1003 : Code[10]) : Boolean;
    VAR
      WindowsLanguageSearch@1002 : Record "Windows Language";
      Language@1001 : Record Language;
    BEGIN
      WindowsLanguageSearch.SETRANGE("Abbreviated Name",AbbreviatedNameToSearch);
      if WindowsLanguageSearch.FINDFIRST then begin
        Language.SETRANGE("Windows Language ID",WindowsLanguageSearch."Language ID");
        if Language.FINDFIRST then begin
          CodeToGet := Language.Code;
          exit(true);
        end;
      end;
    END;

    PROCEDURE FixIfLcyCode@9(CurrencyCode@1000 : Code[10]) : Code[10];
    VAR
      GeneralLedgerSetup@1001 : Record "General Ledger Setup";
    BEGIN
      GeneralLedgerSetup.FINDFIRST;

      if CurrencyCode = GeneralLedgerSetup."LCY Code" then
        exit('');
      exit(CurrencyCode);
    END;

    PROCEDURE CreateGeneralJournalBatchIfNeeded@97(GeneralJournalBatchCode@1000 : Code[10];NoSeriesCode@1004 : Code[20];PostingNoSeriesCode@1003 : Code[20]);
    VAR
      GenJournalBatch@1002 : Record "Gen. Journal Batch";
      TemplateName@1001 : Code[10];
    BEGIN
      TemplateName := CreateGeneralJournalTemplateIfNeeded(GeneralJournalBatchCode);
      GenJournalBatch.SETRANGE("Journal Template Name",TemplateName);
      GenJournalBatch.SETRANGE(Name,GeneralJournalBatchCode);
      GenJournalBatch.SETRANGE("No. Series",NoSeriesCode);
      GenJournalBatch.SETRANGE("Posting No. Series",PostingNoSeriesCode);
      if not GenJournalBatch.FINDFIRST then begin
        GenJournalBatch.INIT;
        GenJournalBatch.VALIDATE("Journal Template Name",TemplateName);
        GenJournalBatch.SetupNewBatch;
        GenJournalBatch.VALIDATE(Name,GeneralJournalBatchCode);
        GenJournalBatch.VALIDATE(Description,GeneralJournalBatchCode);
        GenJournalBatch."No. Series" := NoSeriesCode;
        GenJournalBatch."Posting No. Series" := PostingNoSeriesCode;
        GenJournalBatch.INSERT(true);
      end;
    END;

    LOCAL PROCEDURE CreateGeneralJournalTemplateIfNeeded@98(GeneralJournalBatchCode@1000 : Code[10]) : Code[10];
    VAR
      GenJournalTemplate@1001 : Record "Gen. Journal Template";
    BEGIN
      GenJournalTemplate.SETRANGE(Type,GenJournalTemplate.Type::General);
      GenJournalTemplate.SETRANGE(Recurring,false);
      if not GenJournalTemplate.FINDFIRST then begin
        GenJournalTemplate.INIT;
        GenJournalTemplate.VALIDATE(Name,GeneralJournalBatchCode);
        GenJournalTemplate.VALIDATE(Type,GenJournalTemplate.Type::General);
        GenJournalTemplate.VALIDATE(Recurring,false);
        GenJournalTemplate.INSERT(true);
      end;
      exit(GenJournalTemplate.Name);
    END;

    PROCEDURE CreateGeneralJournalLine@99(VAR GenJournalLine@1006 : Record "Gen. Journal Line";GeneralJournalBatchCode@1000 : Code[10];DocumentNo@1001 : Code[20];Description@1002 : Text[50];AccountType@1009 : Option;AccountNo@1010 : Code[20];PostingDate@1003 : Date;DueDate@1011 : Date;Amount@1004 : Decimal;AmountLCY@1013 : Decimal;Currency@1012 : Code[10]);
    VAR
      GenJournalBatch@1005 : Record "Gen. Journal Batch";
      GenJournalLineCurrent@1007 : Record "Gen. Journal Line";
      LineNum@1008 : Integer;
    BEGIN
      GenJournalBatch.GET(CreateGeneralJournalTemplateIfNeeded(GeneralJournalBatchCode),GeneralJournalBatchCode);

      GenJournalLineCurrent.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLineCurrent.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      if GenJournalLineCurrent.FINDLAST then
        LineNum := GenJournalLineCurrent."Line No." + 10000
      else
        LineNum := 10000;

      GenJournalLine.INIT;
      GenJournalLine.VALIDATE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.VALIDATE("Journal Batch Name",GenJournalBatch.Name);
      GenJournalLine.VALIDATE("Line No.",LineNum);
      GenJournalLine.VALIDATE("Account Type",AccountType);
      GenJournalLine.VALIDATE("Document No.",DocumentNo);
      GenJournalLine.VALIDATE("Account No.",AccountNo);
      GenJournalLine.VALIDATE(Description,Description);
      GenJournalLine.VALIDATE("Document Date",PostingDate);
      GenJournalLine.VALIDATE("Posting Date",PostingDate);
      GenJournalLine.VALIDATE("Due Date",DueDate);
      GenJournalLine.VALIDATE(Amount,Amount);
      GenJournalLine.VALIDATE("Amount (LCY)",AmountLCY);
      GenJournalLine.VALIDATE("Currency Code",DataMigrationFacadeHelper.FixIfLcyCode(Currency));
      GenJournalLine.VALIDATE("Bal. Account Type",GenJournalLine."Bal. Account Type"::"G/L Account");
      GenJournalLine.VALIDATE("Bal. Account No.",'');
      GenJournalLine.VALIDATE("Bal. Gen. Posting Type",GenJournalLine."Bal. Gen. Posting Type"::" ");
      GenJournalLine.VALIDATE("Bal. Gen. Bus. Posting Group",'');
      GenJournalLine.VALIDATE("Bal. Gen. Prod. Posting Group",'');
      GenJournalLine.VALIDATE("Bal. VAT Prod. Posting Group",'');
      GenJournalLine.VALIDATE("Bal. VAT Bus. Posting Group",'');
      GenJournalLine.INSERT(true);
    END;

    PROCEDURE GetOrCreateDimension@22(DimensionCode@1000 : Code[20];DimensionDescription@1001 : Text[50];VAR Dimension@1002 : Record Dimension);
    BEGIN
      if Dimension.GET(DimensionCode) then
        exit;

      Dimension.INIT;
      Dimension.VALIDATE(Code,DimensionCode);
      Dimension.VALIDATE(Description,DimensionDescription);
      Dimension.INSERT(true);
    END;

    PROCEDURE GetOrCreateDimensionValue@21(DimensionCode@1000 : Code[20];DimensionValueCode@1001 : Code[20];DimensionValueName@1002 : Text[50];VAR DimensionValue@1003 : Record "Dimension Value");
    BEGIN
      if DimensionValue.GET(DimensionCode,DimensionValueCode) then
        exit;

      DimensionValue.INIT;
      DimensionValue.VALIDATE("Dimension Code",DimensionCode);
      DimensionValue.VALIDATE(Code,DimensionValueCode);
      DimensionValue.VALIDATE(Name,DimensionValueName);
      DimensionValue.INSERT(true);
    END;

    PROCEDURE CreateOnlyDefaultDimensionIfNeeded@20(DimensionCode@1001 : Code[20];DimensionValueCode@1002 : Code[20];TableId@1003 : Integer;EntityNo@1004 : Code[20]);
    VAR
      DefaultDimension@1000 : Record "Default Dimension";
    BEGIN
      if DefaultDimension.GET(TableId,EntityNo,DimensionCode) then
        exit;

      DefaultDimension.INIT;
      DefaultDimension.VALIDATE("Dimension Code",DimensionCode);
      DefaultDimension.VALIDATE("Dimension Value Code",DimensionValueCode);
      DefaultDimension.VALIDATE("Table ID",TableId);
      DefaultDimension.VALIDATE("No.",EntityNo);
      DefaultDimension.INSERT(true);
    END;

    PROCEDURE CreateDimensionSetId@10(OldDimensionSetId@1004 : Integer;DimensionCode@1001 : Code[20];DimensionDescription@1006 : Text[50];DimensionValueCode@1000 : Code[20];DimensionValueName@1007 : Text[50]) : Integer;
    VAR
      Dimension@1008 : Record Dimension;
      DimensionValue@1009 : Record "Dimension Value";
      DimensionSetEntry@1005 : Record "Dimension Set Entry";
      TempDimensionSetEntry@1003 : TEMPORARY Record "Dimension Set Entry";
      DimensionManagement@1002 : Codeunit DimensionManagement;
    BEGIN
      if (DimensionCode = '') or (DimensionValueCode = '') then
        exit(OldDimensionSetId);

      GetOrCreateDimension(DimensionCode,DimensionDescription,Dimension);
      GetOrCreateDimensionValue(DimensionCode,DimensionValueCode,DimensionValueName,DimensionValue);

      DimensionSetEntry.SETRANGE("Dimension Set ID",OldDimensionSetId);
      DimensionSetEntry.SETFILTER("Dimension Code",'<>%1',DimensionCode);
      if DimensionSetEntry.FINDSET then
        repeat
          TempDimensionSetEntry.TRANSFERFIELDS(DimensionSetEntry);
          TempDimensionSetEntry.INSERT(true);
        until DimensionSetEntry.NEXT = 0;

      TempDimensionSetEntry.INIT;
      TempDimensionSetEntry.VALIDATE("Dimension Set ID",OldDimensionSetId);
      TempDimensionSetEntry.VALIDATE("Dimension Code",DimensionCode);
      TempDimensionSetEntry.VALIDATE("Dimension Value Code",DimensionValueCode);
      TempDimensionSetEntry.INSERT(true);
      exit(DimensionManagement.GetDimensionSetID(TempDimensionSetEntry));
    END;

    BEGIN
    END.
  }
}

