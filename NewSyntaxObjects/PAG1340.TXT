OBJECT Page 1340 Config Templates
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Templates;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Config. Template Header";
    PageType=List;
    PromotedActionCategoriesML=ENU=New,Process,Report,Manage;
    OnOpenPage=VAR
                 FilterValue@1000 : Text;
               BEGIN
                 FilterValue := GETFILTER("Table ID");

                 if not EVALUATE(FilteredTableId,FilterValue) then
                   FilteredTableId := 0;

                 UpdateActionsVisibility;
                 UpdatePageCaption;

                 if NewMode then
                   UpdateSelection;
               END;

    OnDeleteRecord=BEGIN
                     case "Table ID" of
                       DATABASE::Customer,
                       DATABASE::Item:
                         ConfigTemplateManagement.DeleteRelatedTemplates(Code,DATABASE::"Default Dimension");
                     end;
                   END;

    OnQueryClosePage=BEGIN
                       if NewMode and (CloseAction = ACTION::LookupOK) then
                         SaveSelection;
                     END;

    ActionList=ACTIONS
    {
      { 5       ;    ;ActionContainer;
                      Name=NewDocumentItems;
                      ActionContainerType=NewDocumentItems }
      { 6       ;1   ;Action    ;
                      Name=NewCustomerTemplate;
                      CaptionML=ENU=New;
                      ToolTipML=ENU=Create a new template for a customer card.;
                      ApplicationArea=#All;
                      RunObject=Page "Cust. Template Card";
                      Visible=CreateCustomerActionVisible;
                      Image=NewDocument;
                      RunPageMode=Create }
      { 3       ;1   ;Action    ;
                      Name=NewVendorTemplate;
                      CaptionML=ENU=New;
                      ToolTipML=ENU=Create a new template for a vendor card.;
                      ApplicationArea=#All;
                      RunObject=Page "Vendor Template Card";
                      Visible=CreateVendorActionVisible;
                      Image=NewDocument;
                      RunPageMode=Create }
      { 8       ;1   ;Action    ;
                      Name=NewItemTemplate;
                      CaptionML=ENU=New;
                      ToolTipML=ENU=Create a new template for an item card.;
                      ApplicationArea=#All;
                      RunObject=Page "Item Template Card";
                      Visible=CreateItemActionVisible;
                      Image=NewDocument;
                      RunPageMode=Create }
      { 9       ;1   ;Action    ;
                      Name=NewConfigTemplate;
                      CaptionML=ENU=New;
                      ToolTipML=ENU=Create a new configuration template.;
                      ApplicationArea=#All;
                      RunObject=Page "Config. Template Header";
                      Visible=CreateConfigurationTemplateActionVisible;
                      Image=NewDocument;
                      RunPageMode=Create }
      { 7       ;    ;ActionContainer;
                      Name=ActionContainer7;
                      ActionContainerType=ActionItems }
      { 10      ;1   ;Action    ;
                      Name=Edit Template;
                      ShortCutKey=Return;
                      CaptionML=ENU=Edit;
                      ToolTipML=ENU=Edit the selected template.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Image=Edit;
                      Scope=Repeater;
                      OnAction=VAR
                                 TempMiniCustomerTemplate@1000 : TEMPORARY Record "Mini Customer Template";
                                 TempItemTemplate@1001 : TEMPORARY Record "Item Template";
                                 TempMiniVendorTemplate@1002 : TEMPORARY Record "Mini Vendor Template";
                               BEGIN
                                 case "Table ID" of
                                   DATABASE::Customer:
                                     begin
                                       TempMiniCustomerTemplate.InitializeTempRecordFromConfigTemplate(TempMiniCustomerTemplate,Rec);
                                       PAGE.RUN(PAGE::"Cust. Template Card",TempMiniCustomerTemplate);
                                     end;
                                   DATABASE::Item:
                                     begin
                                       TempItemTemplate.InitializeTempRecordFromConfigTemplate(TempItemTemplate,Rec);
                                       PAGE.RUN(PAGE::"Item Template Card",TempItemTemplate);
                                     end;
                                   DATABASE::Vendor:
                                     begin
                                       TempMiniVendorTemplate.InitializeTempRecordFromConfigTemplate(TempMiniVendorTemplate,Rec);
                                       PAGE.RUN(PAGE::"Vendor Template Card",TempMiniVendorTemplate);
                                     end;
                                   else
                                     PAGE.RUN(PAGE::"Config. Template Header",Rec);
                                 end;
                               END;
                                }
      { 13      ;1   ;Action    ;
                      Name=Delete;
                      CaptionML=ENU=Delete;
                      ToolTipML=ENU=Delete the record.;
                      ApplicationArea=#Basic,#Suite,#Invoicing;
                      Image=Delete;
                      OnAction=BEGIN
                                 if CONFIRM(STRSUBSTNO(DeleteQst,Code)) then
                                   DELETE(true);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Repeater;
                GroupType=Repeater }

    { 11  ;2   ;Field     ;
                Name=Template;
                ToolTipML=ENU=Specifies the configuration template.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Code;
                ImplicitType=Code10 }

    { 4   ;2   ;Field     ;
                Name=Template Name;
                ToolTipML=ENU=Specifies a description of the template.;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Description;
                ImplicitType=Text50 }

    { 12  ;2   ;Field     ;
                Name=Enabled;
                ToolTipML=ENU=Specifies if the template is ready to be used;
                ApplicationArea=#Basic,#Suite,#Invoicing;
                SourceExpr=Enabled;
                Visible=NOT NewMode;
                ImplicitType=Boolean }

  }
  CODE
  {
    VAR
      ConfigTemplateManagement@1007 : Codeunit "Config. Template Management";
      CreateCustomerActionVisible@1000 : Boolean;
      CreateVendorActionVisible@1011 : Boolean;
      CreateItemActionVisible@1001 : Boolean;
      CreateConfigurationTemplateActionVisible@1002 : Boolean;
      NewMode@1014 : Boolean;
      FilteredTableId@1003 : Integer;
      ConfigurationTemplatesCap@1006 : TextConst 'ENU=Configuration Templates';
      CustomerTemplatesCap@1005 : TextConst 'ENU=Customer Templates';
      VendorTemplatesCap@1013 : TextConst 'ENU=Vendor Templates';
      ItemTemplatesCap@1004 : TextConst 'ENU=Item Templates';
      SelectConfigurationTemplatesCap@1010 : TextConst 'ENU=Select a template';
      SelectCustomerTemplatesCap@1009 : TextConst 'ENU=Select a template for a new customer';
      SelectVendorTemplatesCap@1012 : TextConst 'ENU=Select a template for a new vendor';
      SelectItemTemplatesCap@1008 : TextConst 'ENU=Select a template for a new item';
      DeleteQst@1015 : TextConst '@@@=%1 - configuration template code;ENU=Delete %1?';

    LOCAL PROCEDURE UpdateActionsVisibility@3();
    BEGIN
      CreateCustomerActionVisible := false;
      CreateItemActionVisible := false;
      CreateConfigurationTemplateActionVisible := false;
      CreateVendorActionVisible := false;

      case FilteredTableId of
        DATABASE::Customer:
          CreateCustomerActionVisible := true;
        DATABASE::Item:
          CreateItemActionVisible := true;
        DATABASE::Vendor:
          CreateVendorActionVisible := true;
        else
          CreateConfigurationTemplateActionVisible := true;
      end;
    END;

    LOCAL PROCEDURE UpdatePageCaption@1();
    VAR
      PageCaption@1000 : Text;
    BEGIN
      if not NewMode then
        case FilteredTableId of
          DATABASE::Customer:
            PageCaption := CustomerTemplatesCap;
          DATABASE::Vendor:
            PageCaption := VendorTemplatesCap;
          DATABASE::Item:
            PageCaption := ItemTemplatesCap;
          else
            PageCaption := ConfigurationTemplatesCap;
        end
      else
        case FilteredTableId of
          DATABASE::Customer:
            PageCaption := SelectCustomerTemplatesCap;
          DATABASE::Vendor:
            PageCaption := SelectVendorTemplatesCap;
          DATABASE::Item:
            PageCaption := SelectItemTemplatesCap;
          else
            PageCaption := SelectConfigurationTemplatesCap;
        end;

      CurrPage.CAPTION(PageCaption);
    END;

    LOCAL PROCEDURE UpdateSelection@2();
    VAR
      ConfigTemplateHeader@1002 : Record "Config. Template Header";
      TemplateSelectionMgt@1000 : Codeunit "Template Selection Mgt.";
      TemplateCode@1001 : Code[10];
    BEGIN
      case FilteredTableId of
        DATABASE::Customer:
          TemplateSelectionMgt.GetLastCustTemplateSelection(TemplateCode);
        DATABASE::Vendor:
          TemplateSelectionMgt.GetLastVendorTemplateSelection(TemplateCode);
        DATABASE::Item:
          TemplateSelectionMgt.GetLastItemTemplateSelection(TemplateCode);
      end;

      if not (TemplateCode = '') then
        if ConfigTemplateHeader.GET(TemplateCode) then
          SETPOSITION(ConfigTemplateHeader.GETPOSITION);
    END;

    LOCAL PROCEDURE SaveSelection@4();
    VAR
      TemplateSelectionMgt@1000 : Codeunit "Template Selection Mgt.";
    BEGIN
      case FilteredTableId of
        DATABASE::Customer:
          TemplateSelectionMgt.SaveCustTemplateSelectionForCurrentUser(Code);
        DATABASE::Vendor:
          TemplateSelectionMgt.SaveVendorTemplateSelectionForCurrentUser(Code);
        DATABASE::Item:
          TemplateSelectionMgt.SaveItemTemplateSelectionForCurrentUser(Code);
      end;
    END;

    [External]
    PROCEDURE SetNewMode@5();
    BEGIN
      NewMode := true;
    END;

    BEGIN
    END.
  }
}

