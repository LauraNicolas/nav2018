OBJECT Report 794 Adjust Item Costs/Prices
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Adjust Item Costs/Prices;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  RoundingMethod.SETRANGE(Code,RoundingMethod.Code);

                  if Item.GETFILTERS <> '' then
                    FilteredItem.COPYFILTERS(Item);
                END;

  }
  DATASET
  {
    { 8129;    ;DataItem;Item                ;
               DataItemTable=Item;
               DataItemTableView=SORTING("No.");
               OnPreDataItem=BEGIN
                               if AdjustCard = AdjustCard::"Stockkeeping Unit Card" then
                                 CurrReport.BREAK;

                               Window.OPEN(Text000);
                             END;

               OnAfterGetRecord=BEGIN
                                  Window.UPDATE(1,"No.");

                                  case Selection of
                                    Selection::"Unit Price":
                                      OldFieldValue := "Unit Price";
                                    Selection::"Profit %":
                                      OldFieldValue := "Profit %";
                                    Selection::"Indirect Cost %":
                                      OldFieldValue := "Indirect Cost %";
                                    Selection::"Last Direct Cost":
                                      OldFieldValue := "Last Direct Cost";
                                    Selection::"Standard Cost":
                                      OldFieldValue := "Standard Cost";
                                  end;
                                  NewFieldValue := OldFieldValue * AdjFactor;

                                  GetGLSetup;
                                  PriceIsRnded := false;
                                  if RoundingMethod.Code <> '' then begin
                                    RoundingMethod."Minimum Amount" := NewFieldValue;
                                    if RoundingMethod.FIND('=<') then begin
                                      NewFieldValue := NewFieldValue + RoundingMethod."Amount Added Before";
                                      if RoundingMethod.Precision > 0 then begin
                                        NewFieldValue := ROUND(NewFieldValue,RoundingMethod.Precision,COPYSTR('=><',RoundingMethod.Type + 1,1));
                                        PriceIsRnded := true;
                                      end;
                                      NewFieldValue := NewFieldValue + RoundingMethod."Amount Added After";
                                    end;
                                  end;
                                  if not PriceIsRnded then
                                    NewFieldValue := ROUND(NewFieldValue,GLSetup."Unit-Amount Rounding Precision");

                                  case Selection of
                                    Selection::"Unit Price":
                                      VALIDATE("Unit Price",NewFieldValue);
                                    Selection::"Profit %":
                                      VALIDATE("Profit %",NewFieldValue);
                                    Selection::"Indirect Cost %":
                                      VALIDATE("Indirect Cost %",NewFieldValue);
                                    Selection::"Last Direct Cost":
                                      VALIDATE("Last Direct Cost",NewFieldValue);
                                    Selection::"Standard Cost":
                                      VALIDATE("Standard Cost",NewFieldValue);
                                  end;
                                  MODIFY;
                                END;

               ReqFilterFields="No.","Vendor No.","Inventory Posting Group","Costing Method" }

    { 5605;    ;DataItem;Stockkeeping Unit   ;
               DataItemTable="Stockkeeping Unit";
               DataItemTableView=SORTING("Item No.","Location Code","Variant Code");
               OnPreDataItem=BEGIN
                               if AdjustCard = AdjustCard::"Item Card" then
                                 CurrReport.BREAK;

                               Item.COPYFILTER("No.","Item No.");
                               Item.COPYFILTER("Location Filter","Location Code");
                               Item.COPYFILTER("Variant Filter","Variant Code");

                               Window.OPEN(
                                 Text002 +
                                 Text003 +
                                 Text004);
                             END;

               OnAfterGetRecord=BEGIN
                                  SkipNoneExistingItem("Item No.");

                                  Window.UPDATE(1,"Item No.");
                                  Window.UPDATE(2,"Location Code");
                                  Window.UPDATE(3,"Variant Code");

                                  case Selection of
                                    Selection::"Last Direct Cost":
                                      OldFieldValue := "Last Direct Cost";
                                    Selection::"Standard Cost":
                                      OldFieldValue := "Standard Cost";
                                  end;
                                  NewFieldValue := OldFieldValue * AdjFactor;

                                  PriceIsRnded := false;
                                  if RoundingMethod.Code <> '' then begin
                                    RoundingMethod."Minimum Amount" := NewFieldValue;
                                    if RoundingMethod.FIND('=<') then begin
                                      NewFieldValue := NewFieldValue + RoundingMethod."Amount Added Before";
                                      if RoundingMethod.Precision > 0 then begin
                                        NewFieldValue := ROUND(NewFieldValue,RoundingMethod.Precision,COPYSTR('=><',RoundingMethod.Type + 1,1));
                                        PriceIsRnded := true;
                                      end;
                                      NewFieldValue := NewFieldValue + RoundingMethod."Amount Added After";
                                    end;
                                  end;
                                  if not PriceIsRnded then
                                    NewFieldValue := ROUND(NewFieldValue,0.00001);

                                  case Selection of
                                    Selection::"Last Direct Cost":
                                      VALIDATE("Last Direct Cost",NewFieldValue);
                                    Selection::"Standard Cost":
                                      VALIDATE("Standard Cost",NewFieldValue);
                                  end;
                                  MODIFY;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnInit=BEGIN
               Selection3Enable := true;
               Selection2Enable := true;
               Selection1Enable := true;
             END;

      OnOpenPage=BEGIN
                   if AdjFactor = 0 then
                     AdjFactor := 1;
                   UpdateEnabled;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 6   ;2   ;Field     ;
                  Name=Adjust;
                  CaptionML=ENU=Adjust;
                  ToolTipML=ENU=Specifies which card is to be adjusted.;
                  OptionCaptionML=ENU=Item Card,Stockkeeping Unit Card;
                  ApplicationArea=#Advanced;
                  SourceExpr=AdjustCard;
                  OnValidate=BEGIN
                               UpdateEnabled;
                             END;
                              }

      { 4   ;2   ;Field     ;
                  Name=AdjustField;
                  CaptionML=ENU=Adjust Field;
                  ToolTipML=ENU=Specifies which field should be adjusted.;
                  OptionCaptionML=ENU=Unit Price,Profit %,Indirect Cost %,Last Direct Cost,Standard Cost;
                  ApplicationArea=#Advanced;
                  SourceExpr=Selection;
                  OnValidate=BEGIN
                               if Selection = Selection::"Indirect Cost %" then
                                 IndirectCost37SelectionOnValid;
                               if Selection = Selection::"Profit %" then
                                 Profit37SelectionOnValidate;
                               if Selection = Selection::"Unit Price" then
                                 UnitPriceSelectionOnValidate;
                             END;
                              }

      { 7   ;2   ;Field     ;
                  Name=AdjustmentFactor;
                  CaptionML=ENU=Adjustment Factor;
                  ToolTipML=ENU=Specifies an adjustment factor to multiply the amounts that you want to copy. By entering an adjustment factor, you can increase or decrease the amounts.;
                  ApplicationArea=#Advanced;
                  DecimalPlaces=0:5;
                  SourceExpr=AdjFactor;
                  MinValue=0 }

      { 8   ;2   ;Field     ;
                  Name=Rounding_Method;
                  CaptionML=ENU=Rounding Method;
                  ToolTipML=ENU=Specifies a code for the rounding method that you want to apply to costs or prices that you adjust.;
                  ApplicationArea=#Advanced;
                  SourceExpr=RoundingMethod.Code;
                  TableRelation="Rounding Method" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Processing items  #1##########';
      Text002@1001 : TextConst 'ENU=Processing items     #1##########\';
      Text003@1002 : TextConst 'ENU=Processing locations #2##########\';
      Text004@1003 : TextConst 'ENU=Processing variants  #3##########';
      RoundingMethod@1004 : Record "Rounding Method";
      GLSetup@1012 : Record "General Ledger Setup";
      FilteredItem@1016 : Record Item;
      Window@1005 : Dialog;
      NewFieldValue@1006 : Decimal;
      OldFieldValue@1007 : Decimal;
      PriceIsRnded@1008 : Boolean;
      GLSetupRead@1013 : Boolean;
      AdjFactor@1009 : Decimal;
      Selection@1010 : '"Unit Price","Profit %","Indirect Cost %","Last Direct Cost","Standard Cost"';
      AdjustCard@1011 : '"Item Card","Stockkeeping Unit Card"';
      Selection1Enable@19032709 : Boolean INDATASET;
      Selection2Enable@19007109 : Boolean INDATASET;
      Selection3Enable@19016581 : Boolean INDATASET;
      SelectionErr@19003950 : TextConst 'ENU=%1 is not a valid selection.';
      SelectionTxt@1014 : TextConst 'ENU=Unit Price,Profit %,Indirect Cost %,Last Direct Cost,Standard Cost';

    LOCAL PROCEDURE UpdateEnabled@1();
    BEGIN
      PageUpdateEnabled;
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE PageUpdateEnabled@19050232();
    BEGIN
      if AdjustCard = AdjustCard::"Stockkeeping Unit Card" then
        if Selection < 3 then
          Selection := 3;
    END;

    LOCAL PROCEDURE UnitPriceSelectionOnValidate@19034063();
    BEGIN
      if not Selection1Enable then
        ERROR(SelectionErr,SELECTSTR(Selection + 1,SelectionTxt));
    END;

    LOCAL PROCEDURE Profit37SelectionOnValidate@19033633();
    BEGIN
      if not Selection2Enable then
        ERROR(SelectionErr,SELECTSTR(Selection + 1,SelectionTxt));
    END;

    LOCAL PROCEDURE IndirectCost37SelectionOnValid@19020400();
    BEGIN
      if not Selection3Enable then
        ERROR(SelectionErr,SELECTSTR(Selection + 1,SelectionTxt));
    END;

    LOCAL PROCEDURE SkipNoneExistingItem@2(ItemNo@1000 : Code[20]);
    BEGIN
      if Item.GETFILTERS <> '' then begin
        FilteredItem.SETRANGE("No.",ItemNo);
        if FilteredItem.ISEMPTY then
          CurrReport.SKIP;
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

