OBJECT Table 130401 CAL Test Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if "Line Type" = "Line Type"::Codeunit then
                 CALTestMgt.RunSuite(Rec,false);
             END;

    OnModify=BEGIN
               if ("Line Type" = "Line Type"::Codeunit) and
                  ("Test Codeunit" <> xRec."Test Codeunit")
               then
                 CALTestMgt.RunSuite(Rec,false);
             END;

    OnDelete=BEGIN
               DeleteChildren;
             END;

    CaptionML=ENU=CAL Test Line;
  }
  FIELDS
  {
    { 1   ;   ;Test Suite          ;Code10        ;TableRelation="CAL Test Suite".Name;
                                                   CaptionML=ENU=Test Suite }
    { 2   ;   ;Line No.            ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Line No. }
    { 3   ;   ;Line Type           ;Option        ;InitValue=Codeunit;
                                                   OnValidate=BEGIN
                                                                case "Line Type" of
                                                                  "Line Type"::Group:
                                                                    TESTFIELD("Test Codeunit",0);
                                                                  "Line Type"::Codeunit:
                                                                    begin
                                                                      TESTFIELD("Function",'');
                                                                      Name := '';
                                                                    end;
                                                                end;

                                                                UpdateLevelNo;
                                                              END;

                                                   CaptionML=ENU=Line Type;
                                                   OptionCaptionML=ENU=Group,Codeunit,Function;
                                                   OptionString=Group,Codeunit,Function;
                                                   Editable=false }
    { 4   ;   ;Test Codeunit       ;Integer       ;TableRelation=IF ("Line Type"=CONST(Codeunit)) AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Codeunit),
                                                                                                                                       "Object Subtype"=CONST('Test'));
                                                   OnValidate=VAR
                                                                AllObjWithCaption@1001 : Record AllObjWithCaption;
                                                              BEGIN
                                                                if "Test Codeunit" = 0 then
                                                                  exit;
                                                                TESTFIELD("Function",'');
                                                                if "Line Type" = "Line Type"::Group then
                                                                  TESTFIELD("Test Codeunit",0);
                                                                if AllObjWithCaption.GET(AllObjWithCaption."Object Type"::Codeunit,"Test Codeunit") then
                                                                  Name := AllObjWithCaption."Object Name";
                                                                UpdateLevelNo;
                                                              END;

                                                   CaptionML=ENU=Test Codeunit;
                                                   Editable=false }
    { 5   ;   ;Name                ;Text128       ;OnValidate=VAR
                                                                TestUnitNo@1000 : Integer;
                                                              BEGIN
                                                                case "Line Type" of
                                                                  "Line Type"::Group:
                                                                    ;
                                                                  "Line Type"::"Function":
                                                                    TESTFIELD(Name,"Function");
                                                                  "Line Type"::Codeunit:
                                                                    begin
                                                                      TESTFIELD(Name);
                                                                      EVALUATE(TestUnitNo,Name);
                                                                      VALIDATE("Test Codeunit",TestUnitNo);
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Name;
                                                   Editable=false }
    { 6   ;   ;Function            ;Text128       ;OnValidate=BEGIN
                                                                if "Line Type" <> "Line Type"::"Function" then begin
                                                                  TESTFIELD("Function",'');
                                                                  exit;
                                                                end;
                                                                UpdateLevelNo;
                                                                Name := "Function";
                                                              END;

                                                   CaptionML=ENU=Function;
                                                   Editable=false }
    { 7   ;   ;Run                 ;Boolean       ;OnValidate=BEGIN
                                                                if "Function" = 'OnRun' then
                                                                  ERROR(CannotChangeValueErr);
                                                                CALTestLine.COPY(Rec);
                                                                UpdateGroup(CALTestLine);
                                                                UpdateChildren(CALTestLine);
                                                              END;

                                                   CaptionML=ENU=Run }
    { 8   ;   ;Result              ;Option        ;OnValidate=BEGIN
                                                                "First Error" := '';
                                                              END;

                                                   CaptionML=ENU=Result;
                                                   OptionCaptionML=ENU=" ,Failure,Success,Skipped";
                                                   OptionString=" ",Failure,Success,Skipped;
                                                   Editable=false }
    { 9   ;   ;First Error         ;Text250       ;CaptionML=ENU=First Error;
                                                   Editable=false }
    { 10  ;   ;Start Time          ;DateTime      ;CaptionML=ENU=Start Time;
                                                   Editable=false }
    { 11  ;   ;Finish Time         ;DateTime      ;CaptionML=ENU=Finish Time;
                                                   Editable=false }
    { 12  ;   ;Level               ;Integer       ;CaptionML=ENU=Level;
                                                   Editable=false }
    { 13  ;   ;Hit Objects         ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("CAL Test Coverage Map" WHERE ("Test Codeunit ID"=FIELD("Test Codeunit")));
                                                   CaptionML=ENU=Hit Objects;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Test Suite","Line No."                 ;Clustered=true }
    {    ;"Test Suite",Result,"Line Type",Run      }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CALTestLine@1002 : Record "CAL Test Line";
      CannotChangeValueErr@1001 : TextConst '@@@={Locked};ENU=You cannot change the value of the OnRun.';
      CALTestMgt@1003 : Codeunit "CAL Test Management";

    [External]
    PROCEDURE UpdateGroup@1(VAR CALTestLine@1000 : Record "CAL Test Line");
    VAR
      CopyOfCALTestLine@1001 : Record "CAL Test Line";
      OutOfGroup@1002 : Boolean;
    BEGIN
      if not CALTestLine.Run then
        exit;
      if not ("Line Type" = "Line Type"::"Function") then
        exit;

      CopyOfCALTestLine.COPY(CALTestLine);
      with CALTestLine do begin
        RESET;
        SETRANGE("Test Suite","Test Suite");
        repeat
          OutOfGroup :=
            (NEXT(-1) = 0) or
            ("Test Codeunit" <> CopyOfCALTestLine."Test Codeunit");

          if (("Line Type" in ["Line Type"::Group,"Line Type"::Codeunit]) or ("Function" = 'OnRun')) and
             not Run
          then begin
            Run := true;
            MODIFY;
          end;
        until OutOfGroup;
      end;
      CALTestLine.COPY(CopyOfCALTestLine);
    END;

    [External]
    PROCEDURE UpdateChildren@2(VAR CALTestLine@1001 : Record "CAL Test Line");
    VAR
      CopyOfCALTestLine@1003 : Record "CAL Test Line";
    BEGIN
      if CALTestLine."Line Type" = "Line Type"::"Function" then
        exit;

      CopyOfCALTestLine.COPY(CALTestLine);
      with CALTestLine do begin
        RESET;
        SETRANGE("Test Suite","Test Suite");
        while (NEXT <> 0) and not ("Line Type" in ["Line Type"::Group,CopyOfCALTestLine."Line Type"]) do begin
          Run := CopyOfCALTestLine.Run;
          MODIFY;
        end;
      end;
      CALTestLine.COPY(CopyOfCALTestLine);
    END;

    [External]
    PROCEDURE GetMinCodeunitLineNo@4() MinLineNo : Integer;
    VAR
      CALTestLine@1001 : Record "CAL Test Line";
    BEGIN
      with CALTestLine do begin
        COPY(Rec);
        RESET;
        SETRANGE("Test Suite","Test Suite");

        MinLineNo := "Line No.";
        repeat
          MinLineNo := "Line No.";
        until (Level < 2) or (NEXT(-1) = 0);
      end;
    END;

    [External]
    PROCEDURE GetMaxGroupLineNo@3() MaxLineNo : Integer;
    VAR
      CALTestLine@1000 : Record "CAL Test Line";
    BEGIN
      with CALTestLine do begin
        COPY(Rec);
        RESET;
        SETRANGE("Test Suite","Test Suite");

        MaxLineNo := "Line No.";
        while (NEXT <> 0) and (Level >= Rec.Level) do
          MaxLineNo := "Line No.";
      end;
    END;

    [External]
    PROCEDURE GetMaxCodeunitLineNo@7(VAR NoOfFunctions@1001 : Integer) MaxLineNo : Integer;
    VAR
      CALTestLine@1000 : Record "CAL Test Line";
    BEGIN
      TESTFIELD("Test Codeunit");
      NoOfFunctions := 0;

      with CALTestLine do begin
        COPY(Rec);
        RESET;
        SETRANGE("Test Suite","Test Suite");
        MaxLineNo := "Line No.";
        while (NEXT <> 0) and ("Line Type" = "Line Type"::"Function") do begin
          MaxLineNo := "Line No.";
          if Run then
            NoOfFunctions += 1;
        end;
      end;
    END;

    [External]
    PROCEDURE DeleteChildren@5();
    VAR
      CopyOfCALTestLine@1000 : Record "CAL Test Line";
    BEGIN
      CopyOfCALTestLine.COPY(Rec);
      RESET;
      SETRANGE("Test Suite","Test Suite");
      while (NEXT <> 0) and (Level > CopyOfCALTestLine.Level) do
        DELETE(true);
      COPY(CopyOfCALTestLine);
    END;

    [External]
    PROCEDURE CalcTestResults@6(VAR Success@1000 : Integer;VAR Fail@1001 : Integer;VAR Skipped@1002 : Integer;VAR NotExecuted@1004 : Integer);
    VAR
      CALTestLine@1003 : Record "CAL Test Line";
    BEGIN
      CALTestLine.SETRANGE("Test Suite","Test Suite");
      CALTestLine.SETFILTER("Function",'<>%1','OnRun');
      CALTestLine.SETRANGE("Line Type","Line Type"::"Function");

      CALTestLine.SETRANGE(Result,Result::Success);
      Success := CALTestLine.COUNT;

      CALTestLine.SETRANGE(Result,Result::Failure);
      Fail := CALTestLine.COUNT;

      CALTestLine.SETRANGE(Result,Result::Skipped);
      Skipped := CALTestLine.COUNT;

      CALTestLine.SETRANGE(Result,Result::" ");
      NotExecuted := CALTestLine.COUNT;
    END;

    LOCAL PROCEDURE UpdateLevelNo@20();
    BEGIN
      case "Line Type" of
        "Line Type"::Group:
          Level := 0;
        "Line Type"::Codeunit:
          Level := 1;
        else
          Level := 2;
      end;
    END;

    [External]
    PROCEDURE ShowTestResults@8();
    VAR
      CALTestResult@1000 : Record "CAL Test Result";
    BEGIN
      CALTestResult.SETRANGE("Codeunit ID","Test Codeunit");
      if "Function" <> '' then
        CALTestResult.SETRANGE("Function Name","Function");
      if CALTestResult.FINDLAST then;
      PAGE.RUN(PAGE::"CAL Test Results",CALTestResult);
    END;

    BEGIN
    END.
  }
}

