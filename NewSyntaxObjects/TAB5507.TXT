OBJECT Table 5507 Sales Cr. Memo Entity Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               UpdateReferencedRecordIds;
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               UpdateReferencedRecordIds;
             END;

    OnRename=BEGIN
               if Posted and (not IsRenameAllowed) then
                 ERROR(CannotModifyPostedInvioceErr);

               "Last Modified Date Time" := CURRENTDATETIME;
               UpdateReferencedRecordIds;
             END;

    CaptionML=ENU=Sales Cr. Memo Entity Buffer;
  }
  FIELDS
  {
    { 2   ;   ;Sell-to Customer No.;Code20        ;TableRelation=Customer;
                                                   OnValidate=BEGIN
                                                                UpdateCustomerId;
                                                              END;

                                                   CaptionML=ENU=Sell-to Customer No.;
                                                   NotBlank=true }
    { 3   ;   ;No.                 ;Code20        ;CaptionML=ENU=No. }
    { 23  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsId;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 24  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 31  ;   ;Customer Posting Group;Code20      ;TableRelation="Customer Posting Group";
                                                   CaptionML=ENU=Customer Posting Group }
    { 32  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyId;
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 35  ;   ;Prices Including VAT;Boolean       ;CaptionML=ENU=Prices Including VAT }
    { 43  ;   ;Salesperson Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   CaptionML=ENU=Salesperson Code }
    { 52  ;   ;Applies-to Doc. Type;Option        ;CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 53  ;   ;Applies-to Doc. No. ;Code20        ;CaptionML=ENU=Applies-to Doc. No. }
    { 56  ;   ;Recalculate Invoice Disc.;Boolean  ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Sales Line" WHERE ("Document Type"=CONST(Invoice),
                                                                                         "Document No."=FIELD("No."),
                                                                                         "Recalculate Invoice Disc."=CONST(true)));
                                                   CaptionML=ENU=Recalculate Invoice Disc.;
                                                   Editable=false }
    { 60  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Amount Including VAT;Decimal       ;CaptionML=ENU=Amount Including VAT;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 79  ;   ;Sell-to Customer Name;Text50       ;TableRelation=Customer.Name;
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Sell-to Customer Name }
    { 81  ;   ;Sell-to Address     ;Text50        ;CaptionML=ENU=Sell-to Address }
    { 82  ;   ;Sell-to Address 2   ;Text50        ;CaptionML=ENU=Sell-to Address 2 }
    { 83  ;   ;Sell-to City        ;Text30        ;TableRelation=IF ("Sell-to Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Sell-to Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Sell-to Country/Region Code"));
                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Sell-to City }
    { 84  ;   ;Sell-to Contact     ;Text50        ;CaptionML=ENU=Sell-to Contact }
    { 88  ;   ;Sell-to Post Code   ;Code20        ;TableRelation=IF ("Sell-to Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Sell-to Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Sell-to Country/Region Code"));
                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Sell-to Post Code }
    { 89  ;   ;Sell-to County      ;Text30        ;CaptionML=ENU=Sell-to County }
    { 90  ;   ;Sell-to Country/Region Code;Code10 ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Sell-to Country/Region Code }
    { 99  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date }
    { 100 ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 1304;   ;Cust. Ledger Entry No.;Integer     ;TableRelation="Cust. Ledger Entry"."Entry No.";
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Cust. Ledger Entry No. }
    { 1305;   ;Invoice Discount Amount;Decimal    ;CaptionML=ENU=Invoice Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 5052;   ;Sell-to Contact No. ;Code20        ;TableRelation=Contact;
                                                   CaptionML=ENU=Sell-to Contact No. }
    { 5750;   ;Shipping Advice     ;Option        ;AccessByPermission=TableData "Sales Shipment Header"=R;
                                                   CaptionML=ENU=Shipping Advice;
                                                   OptionCaptionML=ENU=Partial,Complete;
                                                   OptionString=Partial,Complete }
    { 5752;   ;Completely Shipped  ;Boolean       ;CaptionML=ENU=Completely Shipped }
    { 5790;   ;Requested Delivery Date;Date       ;AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Requested Delivery Date }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 9600;   ;Total Tax Amount    ;Decimal       ;CaptionML=ENU=Total Tax Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 9601;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=[@@@={Locked};
                                                                    ENU=Draft,In Review,Open,Canceled,Corrective,Paid];
                                                   OptionString=Draft,"In Review",Open,Canceled,Corrective,Paid }
    { 9602;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 9624;   ;Discount Applied Before Tax;Boolean;CaptionML=ENU=Discount Applied Before Tax }
    { 9630;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time }
    { 9631;   ;Customer Id         ;GUID          ;TableRelation=Customer.Id;
                                                   OnValidate=BEGIN
                                                                UpdateCustomerNo;
                                                              END;

                                                   CaptionML=ENU=Customer Id }
    { 9633;   ;Contact Graph Id    ;Text250       ;CaptionML=ENU=Contact Graph Id }
    { 9634;   ;Currency Id         ;GUID          ;TableRelation=Currency.Id;
                                                   OnValidate=BEGIN
                                                                UpdateCurrencyCode;
                                                              END;

                                                   CaptionML=ENU=Currency Id }
    { 9635;   ;Payment Terms Id    ;GUID          ;TableRelation="Payment Terms".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentTermsCode;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Id }
  }
  KEYS
  {
    {    ;"No.",Posted                             }
    {    ;Id                                      ;Clustered=true }
    {    ;"Cust. Ledger Entry No."                 }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CannotModifyPostedInvioceErr@1000 : TextConst '@@@={Locked};ENU=The credit memo has been posted and can no longer be modified.';
      IsRenameAllowed@1001 : Boolean;

    LOCAL PROCEDURE UpdateCustomerNo@1();
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if ISNULLGUID("Customer Id") then
        exit;

      Customer.SETRANGE(Id,"Customer Id");
      if not Customer.FINDFIRST then
        exit;

      "Sell-to Customer No." := Customer."No.";
    END;

    LOCAL PROCEDURE UpdateCustomerId@2();
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if "Sell-to Customer No." = '' then begin
        CLEAR("Customer Id");
        exit;
      end;

      if not Customer.GET("Sell-to Customer No.") then
        exit;

      "Customer Id" := Customer.Id;
    END;

    LOCAL PROCEDURE UpdateCurrencyCode@10();
    VAR
      Currency@1000 : Record Currency;
    BEGIN
      if ISNULLGUID("Currency Id") then
        exit;

      Currency.SETRANGE(Id,"Currency Id");
      if not Currency.FINDFIRST then
        exit;

      "Currency Code" := Currency.Code;
    END;

    PROCEDURE UpdateCurrencyId@9();
    VAR
      Currency@1000 : Record Currency;
    BEGIN
      if "Currency Code" = '' then begin
        CLEAR("Currency Id");
        exit;
      end;

      if not Currency.GET("Currency Code") then
        exit;

      "Currency Id" := Currency.Id;
    END;

    PROCEDURE UpdatePaymentTermsId@57();
    VAR
      PaymentTerms@1000 : Record "Payment Terms";
    BEGIN
      if "Payment Terms Code" = '' then begin
        CLEAR("Payment Terms Id");
        exit;
      end;

      if not PaymentTerms.GET("Payment Terms Code") then
        exit;

      "Payment Terms Id" := PaymentTerms.Id;
    END;

    LOCAL PROCEDURE UpdatePaymentTermsCode@56();
    VAR
      PaymentTerms@1001 : Record "Payment Terms";
    BEGIN
      if ISNULLGUID("Payment Terms Id") then
        exit;

      PaymentTerms.SETRANGE(Id,"Payment Terms Id");
      if not PaymentTerms.FINDFIRST then
        exit;

      "Payment Terms Code" := PaymentTerms.Code;
    END;

    PROCEDURE UpdateReferencedRecordIds@5();
    BEGIN
      UpdateCustomerId;
      UpdateCurrencyId;
      UpdatePaymentTermsId;

      UpdateGraphContactId;
    END;

    PROCEDURE UpdateGraphContactId@6();
    VAR
      contactFound@1003 : Boolean;
    BEGIN
      if "Sell-to Contact No." = '' then
        contactFound := UpdateContactIdFromCustomer
      else
        contactFound := UpdateContactIdFromSellToContactNo;

      if not contactFound then
        CLEAR("Contact Graph Id");
    END;

    LOCAL PROCEDURE UpdateContactIdFromCustomer@7() : Boolean;
    VAR
      Customer@1001 : Record Customer;
      Contact@1002 : Record Contact;
      GraphIntContact@1000 : Codeunit "Graph Int. - Contact";
      GraphID@1003 : Text[250];
    BEGIN
      if ISNULLGUID("Customer Id") then
        exit(false);

      Customer.SETRANGE(Id,"Customer Id");
      if not Customer.FINDFIRST then
        exit(false);

      if not GraphIntContact.FindGraphContactIdFromCustomer(GraphID,Customer,Contact) then
        exit(false);

      "Contact Graph Id" := GraphID;

      exit(true);
    END;

    LOCAL PROCEDURE UpdateContactIdFromSellToContactNo@8() : Boolean;
    VAR
      Contact@1002 : Record Contact;
      GraphIntegrationRecord@1001 : Record "Graph Integration Record";
      GraphID@1000 : Text[250];
    BEGIN
      if not Contact.GET("Sell-to Contact No.") then
        exit(false);

      if not GraphIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,GraphID) then
        exit(false);

      "Contact Graph Id" := GraphID;

      exit(true);
    END;

    PROCEDURE SetIsRenameAllowed@3(RenameAllowed@1000 : Boolean);
    BEGIN
      IsRenameAllowed := RenameAllowed;
    END;

    BEGIN
    END.
  }
}

