OBJECT Codeunit 5988 Serv-Documents Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Invoice Post. Buffer"=imd,
                TableData "Service Header"=imd,
                TableData "Service Item Line"=imd,
                TableData "Service Line"=imd,
                TableData "Service Ledger Entry"=m,
                TableData "Warranty Ledger Entry"=m,
                TableData "Service Shipment Item Line"=imd,
                TableData "Service Shipment Header"=imd,
                TableData "Service Shipment Line"=imd,
                TableData "Service Invoice Header"=imd,
                TableData "Service Invoice Line"=imd,
                TableData "Service Cr.Memo Header"=imd,
                TableData "Service Cr.Memo Line"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ServHeader@1002 : TEMPORARY Record "Service Header";
      ServLine@1003 : TEMPORARY Record "Service Line";
      TempServiceLine@1035 : TEMPORARY Record "Service Line";
      ServItemLine@1004 : TEMPORARY Record "Service Item Line";
      ServShptHeader@1018 : TEMPORARY Record "Service Shipment Header";
      ServShptItemLine@1047 : TEMPORARY Record "Service Shipment Item Line";
      ServShptLine@1019 : TEMPORARY Record "Service Shipment Line";
      ServInvHeader@1020 : TEMPORARY Record "Service Invoice Header";
      ServInvLine@1021 : TEMPORARY Record "Service Invoice Line";
      ServCrMemoHeader@1022 : TEMPORARY Record "Service Cr.Memo Header";
      ServCrMemoLine@1023 : TEMPORARY Record "Service Cr.Memo Line";
      PServLine@1052 : Record "Service Line";
      PServItemLine@1053 : Record "Service Item Line";
      TempHandlingSpecification@1058 : TEMPORARY Record "Tracking Specification";
      TempInvoicingSpecification@1056 : TEMPORARY Record "Tracking Specification";
      TempTrackingSpecification@1039 : TEMPORARY Record "Tracking Specification";
      TempTrackingSpecificationInv@1057 : TEMPORARY Record "Tracking Specification";
      TempValueEntryRelation@1042 : TEMPORARY Record "Value Entry Relation";
      SalesSetup@1029 : Record "Sales & Receivables Setup";
      ServMgtSetup@1016 : Record "Service Mgt. Setup";
      ServDocReg@1034 : Record "Service Document Register";
      DummyServCommentLine@1043 : Record "Service Comment Line";
      ServiceCommentLine@1063 : Record "Service Comment Line";
      TempWarrantyLedgerEntry@1065 : TEMPORARY Record "Warranty Ledger Entry";
      ServPostingJnlsMgt@1000 : Codeunit "Serv-Posting Journals Mgt.";
      ServAmountsMgt@1001 : Codeunit "Serv-Amounts Mgt.";
      ServITRMgt@1060 : Codeunit "Serv-Item Tracking Rsrv. Mgt.";
      ServCalcDisc@1054 : Codeunit "Service-Calc. Discount";
      ServOrderMgt@1038 : Codeunit ServOrderManagement;
      ServLogMgt@1048 : Codeunit ServLogManagement;
      DimMgt@1011 : Codeunit DimensionManagement;
      ServAllocMgt@1031 : Codeunit ServAllocationManagement;
      GenJnlLineExtDocNo@1024 : Code[20];
      GenJnlLineDocNo@1025 : Code[20];
      SrcCode@1017 : Code[10];
      GenJnlLineDocType@1026 : Integer;
      ItemLedgShptEntryNo@1041 : Integer;
      NextServLedgerEntryNo@1045 : Integer;
      NextWarrantyLedgerEntryNo@1044 : Integer;
      Ship@1006 : Boolean;
      Consume@1007 : Boolean;
      Invoice@1008 : Boolean;
      Text001@1005 : TextConst 'ENU=There is nothing to post.';
      Text007@1028 : TextConst 'ENU=%1 %2 -> Invoice %3';
      Text008@1027 : TextConst 'ENU=%1 %2 -> Credit Memo %3';
      Text011@1033 : TextConst 'ENU=must have the same sign as the shipment.';
      Text013@1032 : TextConst 'ENU=The shipment lines have been deleted.';
      Text014@1037 : TextConst 'ENU=You cannot invoice more than you have shipped for order %1.';
      Text015@1040 : TextConst 'ENU="The %1 you are going to invoice has a %2 entered.\You may need to run price adjustment. Do you want to continue posting? "';
      Text023@1061 : TextConst 'ENU=This order must be a complete Shipment.';
      Text026@1062 : TextConst 'ENU=Line %1 of the shipment %2, which you are attempting to invoice, has already been invoiced.';
      Text027@1030 : TextConst 'ENU=The quantity you are attempting to invoice is greater than the quantity in shipment %1.';
      Text028@1015 : TextConst 'ENU=The combination of dimensions used in %1 %2 is blocked. %3';
      Text029@1014 : TextConst 'ENU=The combination of dimensions used in %1 %2, line no. %3 is blocked. %4';
      Text030@1013 : TextConst 'ENU=The dimensions used in %1 %2 are invalid. %3';
      Text031@1012 : TextConst 'ENU=The dimensions used in %1 %2, line no. %3 are invalid. %4';
      CloseCondition@1036 : Boolean;
      ServLinesPassed@1046 : Boolean;
      Text035@1051 : TextConst 'ENU=The %1 %2 relates to the same %3 as %1 %4.';
      Text039@1050 : TextConst 'ENU=%1 %2 on %3 %4 relates to a %5 that has already been invoiced.';
      Text041@1049 : TextConst 'ENU=Old %1 service ledger entries have been found for service contract %2.\You must close them by posting the old service invoices.';
      TrackingSpecificationExists@1059 : Boolean;
      ServLineInvoicedConsumedQty@1064 : Decimal;
      ServLedgEntryNo@1009 : Integer;

    [External]
    PROCEDURE Initialize@1(VAR PassedServiceHeader@1000 : Record "Service Header";VAR PassedServiceLine@1001 : Record "Service Line");
    VAR
      SrcCodeSetup@1002 : Record "Source Code Setup";
    BEGIN
      CloseCondition := true;
      CLEAR(ServPostingJnlsMgt);
      CLEAR(ServAmountsMgt);
      PrepareDocument(PassedServiceHeader,PassedServiceLine);
      CheckSysCreatedEntry;
      CheckShippingAdvice;
      CheckDim;
      ServMgtSetup.GET;
      GetAndCheckCustomer;
      SalesSetup.GET;
      SrcCodeSetup.GET;
      SrcCode := SrcCodeSetup."Service Management";
      ServPostingJnlsMgt.Initialize(ServHeader,Consume,Invoice);
      ServAmountsMgt.Initialize(ServHeader."Currency Code"); // roundingLineInserted is set to FALSE;
      TrackingSpecificationExists := false;
    END;

    [Internal]
    PROCEDURE CalcInvDiscount@39();
    BEGIN
      if SalesSetup."Calc. Inv. Discount" then begin
        ServLine.FIND('-');
        ServCalcDisc.CalculateWithServHeader(ServHeader,PServLine,ServLine);
      end;
    END;

    [Internal]
    PROCEDURE PostDocumentLines@10(VAR Window@1000 : Dialog);
    VAR
      ServiceLineACY@1010 : Record "Service Line";
      TotalServiceLine@1008 : Record "Service Line";
      TotalServiceLineLCY@1009 : Record "Service Line";
      ServLineOld@1022 : Record "Service Line";
      ServLedgEntry@1002 : Record "Service Ledger Entry";
      TempServLine@1011 : TEMPORARY Record "Service Line";
      TempVATAmountLine@1006 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLineForSLE@1018 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLineRemainder@1003 : TEMPORARY Record "VAT Amount Line";
      InvPostingBuffer@1004 : ARRAY [2] OF TEMPORARY Record "Invoice Post. Buffer";
      DummyTrackingSpecification@1016 : Record "Tracking Specification";
      Item@1021 : Record Item;
      ServItemMgt@1020 : Codeunit ServItemManagement;
      RemQtyToBeInvoiced@1012 : Decimal;
      RemQtyToBeInvoicedBase@1013 : Decimal;
      RemQtyToBeConsumed@1014 : Decimal;
      RemQtyToBeConsumedBase@1015 : Decimal;
      LineCount@1001 : Integer;
      ApplToServEntryNo@1023 : Integer;
      WarrantyNo@1019 : Integer;
      BiggestLineNo@1024 : Integer;
      LastLineRetrieved@1017 : Boolean;
    BEGIN
      LineCount := 0;

      // init cu for posting SLE type Usage
      ServPostingJnlsMgt.InitServiceRegister(NextServLedgerEntryNo,NextWarrantyLedgerEntryNo);

      ServLine.CalcVATAmountLines(1,ServHeader,ServLine,TempVATAmountLine,Ship);
      ServLine.CalcVATAmountLines(2,ServHeader,ServLine,TempVATAmountLineForSLE,Ship);

      ServLine.RESET;
      SortLines(ServLine);
      ServLedgEntryNo := FindFirstServLedgEntry(ServLine);
      if ServLine.FIND('-') then
        repeat
          ServPostingJnlsMgt.SetItemJnlRollRndg(false);
          if ServLine.Type = ServLine.Type::Item then
            DummyTrackingSpecification.CheckItemTrackingQuantity(
              DATABASE::"Service Line",ServLine."Document Type",ServLine."Document No.",ServLine."Line No.",
              ServLine."Qty. to Ship (Base)",ServLine."Qty. to Invoice (Base)",Ship,Invoice);
          LineCount += 1;
          Window.UPDATE(2,LineCount);

          with ServLine do begin
            if Ship and ("Qty. to Ship" <> 0) or Invoice and ("Qty. to Invoice" <> 0) then
              ServOrderMgt.CheckServItemRepairStatus(ServHeader,ServItemLine,ServLine);

            ServLineOld := ServLine;
            if "Spare Part Action" in
               ["Spare Part Action"::"Component Replaced",
                "Spare Part Action"::Permanent,
                "Spare Part Action"::"Temporary"]
            then begin
              "Spare Part Action" := "Spare Part Action"::"Component Installed";
              MODIFY
            end;

            // post Service Ledger Entry of type Usage, on shipment
            if (Ship and ("Document Type" = "Document Type"::Order) or
                ("Document Type" = "Document Type"::Invoice)) and
               ("Qty. to Ship" <> 0) and not ServAmountsMgt.RoundingLineInserted
            then begin
              TempServLine := ServLine;
              ServPostingJnlsMgt.CalcSLEDivideAmount("Qty. to Ship",ServHeader,TempServLine,TempVATAmountLineForSLE);

              ApplToServEntryNo :=
                ServPostingJnlsMgt.InsertServLedgerEntry(NextServLedgerEntryNo,
                  ServHeader,TempServLine,ServItemLine,"Qty. to Ship",ServHeader."Shipping No.");

              if "Appl.-to Service Entry" = 0 then
                "Appl.-to Service Entry" := ApplToServEntryNo;
            end;

            if (Type = Type::Item) and ("No." <> '') then begin
              GetItem(ServLine,Item);
              if (Item."Costing Method" = Item."Costing Method"::Standard) and not IsShipment then
                GetUnitCost;
            end;

            if CheckCloseCondition(
                 Quantity,"Qty. to Invoice","Qty. to Consume","Quantity Invoiced","Quantity Consumed") = false
            then
              CloseCondition := false;

            if Quantity = 0 then
              TESTFIELD("Line Amount",0)
            else begin
              TestBinCode;
              TESTFIELD("No.");
              TESTFIELD(Type);
              TESTFIELD("Gen. Bus. Posting Group");
              TESTFIELD("Gen. Prod. Posting Group");
              ServAmountsMgt.DivideAmount(1,"Qty. to Invoice",ServHeader,ServLine,
                TempVATAmountLine,TempVATAmountLineRemainder);
            end;

            ServAmountsMgt.RoundAmount("Qty. to Invoice",ServHeader,ServLine,
              TempServiceLine,TotalServiceLine,TotalServiceLineLCY,ServiceLineACY);

            if "Document Type" <> "Document Type"::"Credit Memo" then begin
              ServAmountsMgt.ReverseAmount(ServLine);
              ServAmountsMgt.ReverseAmount(ServiceLineACY);
            end;

            // post Service Ledger Entry of type Sale, on invoice
            if "Document Type" = "Document Type"::"Credit Memo" then begin
              CheckIfServDuplicateLine(ServLine);
              ServPostingJnlsMgt.CreateCreditEntry(NextServLedgerEntryNo,
                ServHeader,ServLine,GenJnlLineDocNo);
            end else
              if (Invoice or ("Document Type" = "Document Type"::Invoice)) and
                 ("Qty. to Invoice" <> 0) and not ServAmountsMgt.RoundingLineInserted
              then begin
                CheckIfServDuplicateLine(ServLine);
                ServPostingJnlsMgt.InsertServLedgerEntrySale(NextServLedgerEntryNo,
                  ServHeader,ServLine,ServItemLine,"Qty. to Invoice","Qty. to Invoice",GenJnlLineDocNo,"Line No.");
              end;

            if Consume and ("Document Type" = "Document Type"::Order) and
               ("Qty. to Consume" <> 0)
            then
              ServPostingJnlsMgt.InsertServLedgerEntrySale(NextServLedgerEntryNo,
                ServHeader,ServLine,ServItemLine,"Qty. to Consume",0,ServHeader."Shipping No.","Line No.");

            RemQtyToBeInvoiced := "Qty. to Invoice";
            RemQtyToBeConsumed := "Qty. to Consume";
            RemQtyToBeInvoicedBase := "Qty. to Invoice (Base)";
            RemQtyToBeConsumedBase := "Qty. to Consume (Base)";

            if Invoice then
              if "Qty. to Invoice" = 0 then
                TrackingSpecificationExists := false
              else
                TrackingSpecificationExists :=
                  ServITRMgt.RetrieveInvoiceSpecification(ServLine,TempInvoicingSpecification,false);

            if Consume then
              if "Qty. to Consume" = 0 then
                TrackingSpecificationExists := false
              else
                TrackingSpecificationExists :=
                  ServITRMgt.RetrieveInvoiceSpecification(ServLine,TempInvoicingSpecification,true);

            // update previously shipped lines with invoicing information.
            if "Document Type" = "Document Type"::"Credit Memo" then
              UpdateRcptLinesOnInv
            else // Order or Invoice
              UpdateShptLinesOnInv(ServLine,
                RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                RemQtyToBeConsumed,RemQtyToBeConsumedBase);

            if TrackingSpecificationExists then
              ServITRMgt.SaveInvoiceSpecification(TempInvoicingSpecification,TempTrackingSpecification);

            // post service line via journals
            case Type of
              Type::Item:
                begin
                  if Ship and ("Document Type" = "Document Type"::Order) then begin
                    TempServLine := ServLine;
                    ServPostingJnlsMgt.CalcSLEDivideAmount("Qty. to Ship",ServHeader,TempServLine,TempVATAmountLineForSLE);
                    WarrantyNo :=
                      ServPostingJnlsMgt.InsertWarrantyLedgerEntry(
                        NextWarrantyLedgerEntryNo,ServHeader,TempServLine,ServItemLine,
                        "Qty. to Ship",ServHeader."Shipping No.");
                  end;

                  if Invoice and (RemQtyToBeInvoiced <> 0) then
                    ItemLedgShptEntryNo := ServPostingJnlsMgt.PostItemJnlLine(
                        ServLine,RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                        0,0,RemQtyToBeInvoiced,RemQtyToBeInvoicedBase,
                        0,DummyTrackingSpecification,
                        TempTrackingSpecificationInv,TempHandlingSpecification,
                        TempTrackingSpecification,
                        ServShptHeader,'');

                  if Consume and (RemQtyToBeConsumed <> 0) then
                    ItemLedgShptEntryNo := ServPostingJnlsMgt.PostItemJnlLine(
                        ServLine,RemQtyToBeConsumed,RemQtyToBeConsumedBase,
                        RemQtyToBeConsumed,RemQtyToBeConsumedBase,0,0,
                        0,DummyTrackingSpecification,
                        TempTrackingSpecificationInv,TempHandlingSpecification,
                        TempTrackingSpecification,
                        ServShptHeader,'');

                  if not ("Document Type" in ["Document Type"::"Credit Memo"]) then
                    if ((ABS("Qty. to Ship") - ABS("Qty. to Consume") - ABS("Qty. to Invoice")) > ABS(RemQtyToBeConsumed)) or
                       ((ABS("Qty. to Ship") - ABS("Qty. to Consume") - ABS("Qty. to Invoice")) > ABS(RemQtyToBeInvoiced))
                    then
                      ItemLedgShptEntryNo := ServPostingJnlsMgt.PostItemJnlLine(
                          ServLine,
                          "Qty. to Ship" - RemQtyToBeInvoiced - RemQtyToBeConsumed,
                          "Qty. to Ship (Base)" - RemQtyToBeInvoicedBase - RemQtyToBeConsumedBase,
                          0,0,0,0,0,DummyTrackingSpecification,TempTrackingSpecificationInv,
                          TempHandlingSpecification,TempTrackingSpecification,ServShptHeader,'');
                end;// type:Item
              Type::Resource:
                begin
                  TempServLine := ServLine;
                  ServPostingJnlsMgt.CalcSLEDivideAmount("Qty. to Ship",ServHeader,TempServLine,TempVATAmountLineForSLE);

                  if Ship and ("Document Type" = "Document Type"::Order) then begin
                    WarrantyNo := ServPostingJnlsMgt.InsertWarrantyLedgerEntry(NextWarrantyLedgerEntryNo,
                        ServHeader,TempServLine,ServItemLine,"Qty. to Ship",ServHeader."Shipping No.");
                    if (not Consume) and ("Qty. to Ship" <> 0) then
                      ServPostingJnlsMgt.PostResJnlLineShip(TempServLine,ServShptHeader."No.",'');
                  end;
                  if "Qty. to Invoice" <> 0 then
                    ServPostingJnlsMgt.PostResJnlLineSale(ServLine,GenJnlLineDocNo,GenJnlLineExtDocNo);
                end;
            end; // Case Type

            if Consume and ("Document Type" = "Document Type"::Order) then begin
              if ServPostingJnlsMgt.PostJobJnlLine(ServHeader,ServLine,RemQtyToBeConsumed) then begin
                ServLedgEntry.RESET;
                ServLedgEntry.GET(NextServLedgerEntryNo - 1);
                ServLedgEntry."Job Posted" := true;
                ServLedgEntry.MODIFY;
              end else
                if (Type = Type::Resource) and (RemQtyToBeConsumed <> 0) then
                  ServPostingJnlsMgt.PostResJnlLineConsume(ServLine,ServShptHeader);
            end;

            if Ship and ("Document Type" = "Document Type"::Order) then begin
              // component spare part action
              ServItemMgt.AddOrReplaceSIComponent(ServLineOld,ServHeader,
                ServHeader."Shipping No.",ServLineOld."Line No.",TempTrackingSpecification);
              // allocations
              ServAllocMgt.SetServLineAllocStatus(TempServiceLine);
            end;

            if (Type <> Type::" ") and ("Qty. to Invoice" <> 0) then
              // Copy sales to buffer
              ServAmountsMgt.FillInvPostingBuffer(InvPostingBuffer,ServLine,ServiceLineACY,ServHeader);

            // prepare posted document lines
            if Ship then
              PrepareShipmentLine(TempServiceLine,WarrantyNo);
            if Invoice then
              if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then
                PrepareInvoiceLine(TempServiceLine)
              else
                PrepareCrMemoLine(TempServiceLine);

            if Invoice or Consume then
              CollectValueEntryRelation;

            if ServAmountsMgt.RoundingLineInserted then
              LastLineRetrieved := true
            else begin
              BiggestLineNo := ServAmountsMgt.MAX(BiggestLineNo,"Line No.");
              LastLineRetrieved := NEXT = 0; // ServLine
              if LastLineRetrieved and SalesSetup."Invoice Rounding" then
                ServAmountsMgt.InvoiceRounding(ServHeader,ServLine,TotalServiceLine,
                  LastLineRetrieved,false,BiggestLineNo);
            end;
          end; // With ServLine
        until LastLineRetrieved;

      with ServHeader do begin
        // again reverse amount
        if "Document Type" <> "Document Type"::"Credit Memo" then begin
          ServAmountsMgt.ReverseAmount(TotalServiceLine);
          ServAmountsMgt.ReverseAmount(TotalServiceLineLCY);
          TotalServiceLineLCY."Unit Cost (LCY)" := -TotalServiceLineLCY."Unit Cost (LCY)";
        end;

        ServPostingJnlsMgt.FinishServiceRegister(NextServLedgerEntryNo,NextWarrantyLedgerEntryNo);

        if Invoice or ("Document Type" = "Document Type"::Invoice) then begin
          CLEAR(ServDocReg);
          // fake service register entry to be used in the following PostServSalesDocument()
          if Invoice and ("Document Type" = "Document Type"::Order) and (ServLine."Contract No." <> '') then
            ServDocReg.InsertServSalesDocument(
              ServDocReg."Source Document Type"::Contract,ServLine."Contract No.",
              ServDocReg."Destination Document Type"::Invoice,ServLine."Document No.");
          ServDocReg.PostServSalesDocument(
            ServDocReg."Destination Document Type"::Invoice,
            ServLine."Document No.",ServInvHeader."No.");
        end;
        if Invoice or ("Document Type" = "Document Type"::"Credit Memo") then begin
          CLEAR(ServDocReg);
          ServDocReg.PostServSalesDocument(
            ServDocReg."Destination Document Type"::"Credit Memo",
            ServLine."Document No.",
            ServCrMemoHeader."No.");
        end;

        // Post sales and VAT to G/L entries from posting buffer
        if Invoice then begin
          LineCount := 0;
          if InvPostingBuffer[1].FIND('+') then
            repeat
              LineCount += 1;
              Window.UPDATE(3,LineCount);
              ServPostingJnlsMgt.SetPostingDate("Posting Date");
              ServPostingJnlsMgt.PostInvoicePostBufferLine(
                InvPostingBuffer[1],GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo);
            until InvPostingBuffer[1].NEXT(-1) = 0;

          // Post customer entry
          Window.UPDATE(4,1);
          ServPostingJnlsMgt.SetPostingDate("Posting Date");
          ServPostingJnlsMgt.PostCustomerEntry(
            TotalServiceLine,TotalServiceLineLCY,
            GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo);

          // post Balancing account
          if "Bal. Account No." <> '' then begin
            Window.UPDATE(5,1);
            ServPostingJnlsMgt.SetPostingDate("Posting Date");
            ServPostingJnlsMgt.PostBalancingEntry(
              TotalServiceLine,TotalServiceLineLCY,
              GenJnlLineDocType,GenJnlLineDocNo,GenJnlLineExtDocNo);
          end;
        end; // end posting sales,receivables,balancing

        MakeInvtAdjustment;
        if Ship then begin
          "Last Shipping No." := "Shipping No.";
          "Shipping No." := '';
        end;

        if Invoice then begin
          "Last Posting No." := "Posting No.";
          "Posting No." := '';
        end;

        MODIFY;
      end;// with header
    END;

    LOCAL PROCEDURE MakeInvtAdjustment@46();
    VAR
      InvtSetup@1001 : Record "Inventory Setup";
      InvtAdjmt@1002 : Codeunit "Inventory Adjustment";
    BEGIN
      InvtSetup.GET;
      if InvtSetup."Automatic Cost Adjustment" <>
         InvtSetup."Automatic Cost Adjustment"::Never
      then begin
        InvtAdjmt.SetProperties(true,InvtSetup."Automatic Cost Posting");
        InvtAdjmt.MakeMultiLevelAdjmt;
      end;
    END;

    [Internal]
    PROCEDURE UpdateDocumentLines@17();
    BEGIN
      with ServHeader do begin
        MODIFY;
        if ("Document Type" = "Document Type"::Order) and not CloseCondition then begin
          ServITRMgt.InsertTrackingSpecification(ServHeader,TempTrackingSpecification);

          // update service line quantities according to posted values
          UpdateServLinesOnPostOrder;
        end else begin
          // close condition met for order, or we post Invoice or CrMemo

          if ServLinesPassed then
            UpdateServLinesOnPostOrder;

          case "Document Type" of
            "Document Type"::Invoice:
              UpdateServLinesOnPostInvoice;
            "Document Type"::"Credit Memo":
              UpdateServLinesOnPostCrMemo;
          end;// case

          ServAllocMgt.SetServOrderAllocStatus(ServHeader);
        end; // End CloseConditionMet
      end;
    END;

    LOCAL PROCEDURE PrepareDocument@8(VAR PassedServHeader@1000 : Record "Service Header";VAR PassedServLine@1003 : Record "Service Line");
    BEGIN
      // fill ServiceHeader we will work with (tempTable)
      ServHeader.DELETEALL;
      ServHeader.COPY(PassedServHeader);
      ServHeader.INSERT; // temporary table

      // Fetch persistent Service Lines and Service Item Lines bound to Service Header.
      // Copy persistent records to temporary.
      with ServHeader do begin
        ServLine.DELETEALL;
        PassedServLine.RESET;

        // collect passed lines
        if PassedServLine.FIND('-') then begin
          repeat
            ServLine.COPY(PassedServLine);
            ServLine.INSERT; // temptable
          until PassedServLine.NEXT = 0;
          ServLinesPassed := true; // indicate either we collect passed or all SLs.
        end else begin
          // collect persistent lines related to ServHeader
          PServLine.RESET;
          PServLine.SETRANGE("Document Type","Document Type");
          PServLine.SETRANGE("Document No.","No.");
          if PServLine.FIND('-') then
            repeat
              ServLine.COPY(PServLine);
              ServLine."Posting Date" := "Posting Date";
              ServLine.INSERT; // temptable
            until PServLine.NEXT = 0;
          ServLinesPassed := false;
        end;

        RemoveLinesNotSatisfyPosting;

        ServItemLine.DELETEALL;
        PServItemLine.RESET;
        PServItemLine.SETRANGE("Document Type","Document Type");
        PServItemLine.SETRANGE("Document No.","No.");
        if PServItemLine.FIND('-') then
          repeat
            ServItemLine.COPY(PServItemLine);
            ServItemLine.INSERT; // temptable
          until PServItemLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE PrepareShipmentHeader@11();
    VAR
      ServLine@1003 : Record "Service Line";
      PServShptHeader@1001 : Record "Service Shipment Header";
      PServShptLine@1000 : Record "Service Shipment Line";
      ServItemMgt@1002 : Codeunit ServItemManagement;
      RecordLinkManagement@1004 : Codeunit "Record Link Management";
    BEGIN
      with ServHeader do begin
        if ("Document Type" = "Document Type"::Order) or
           (("Document Type" = "Document Type"::Invoice) and ServMgtSetup."Shipment on Invoice")
        then begin
          PServShptHeader.LOCKTABLE;
          PServShptLine.LOCKTABLE;
          ServShptHeader.INIT;
          ServShptHeader.TRANSFERFIELDS(ServHeader);

          ServShptHeader."No." := "Shipping No.";
          if "Document Type" = "Document Type"::Order then begin
            ServShptHeader."Order No. Series" := "No. Series";
            ServShptHeader."Order No." := "No.";
          end;

          if ServMgtSetup."Copy Comments Order to Shpt." then
            RecordLinkManagement.CopyLinks(ServHeader,ServShptHeader);

          ServShptHeader."Source Code" := SrcCode;
          ServShptHeader."User ID" := USERID;
          ServShptHeader."No. Printed" := 0;
          ServShptHeader.INSERT;

          CLEAR(ServLogMgt);
          ServLogMgt.ServOrderShipmentPost("No.",ServShptHeader."No.");

          if ("Document Type" = "Document Type"::Order) and ServMgtSetup."Copy Comments Order to Shpt." then
            ServOrderMgt.CopyCommentLines(
              DummyServCommentLine."Table Name"::"Service Header",
              DummyServCommentLine."Table Name"::"Service Shipment Header",
              "No.",ServShptHeader."No.");

          // create Service Shipment Item Lines
          ServItemLine.RESET;
          if ServItemLine.FIND('-') then
            repeat
              // create SSIL
              ServShptItemLine.TRANSFERFIELDS(ServItemLine);
              ServShptItemLine."No." := ServShptHeader."No.";
              ServShptItemLine.INSERT;

              // set mgt. date and service dates
              if (ServItemLine."Contract No." <> '') and (ServItemLine."Contract Line No." <> 0) and
                 ("Contract No." <> '')
              then begin
                ServLine.SETRANGE("Document Type","Document Type");
                ServLine.SETRANGE("Document No.","No.");
                ServLine.SETFILTER("Quantity Shipped",'>%1',0);
                if not ServLine.FINDFIRST then
                  ServOrderMgt.CalcContractDates(ServHeader,ServItemLine);
              end;
              ServOrderMgt.CalcServItemDates(ServHeader,ServItemLine."Service Item No.");
            until ServItemLine.NEXT = 0
          else begin
            ServShptItemLine.INIT;
            ServShptItemLine."No." := ServShptHeader."No.";
            ServShptItemLine."Line No." := 10000;
            ServShptItemLine.Description := FORMAT("Document Type") + ' ' + "No.";
            ServShptItemLine.INSERT;
          end;
        end;

        ServItemMgt.CopyReservationEntryService(ServHeader);
      end;
    END;

    LOCAL PROCEDURE PrepareShipmentLine@22(VAR passedServLine@1000 : Record "Service Line";passedWarrantyNo@1001 : Integer);
    VAR
      WarrantyLedgerEntry@1002 : Record "Warranty Ledger Entry";
    BEGIN
      with passedServLine do begin
        if (ServShptHeader."No." <> '') and ("Shipment No." = '') and not ServAmountsMgt.RoundingLineInserted
        then begin
          // Insert shipment line
          ServShptLine.INIT;
          ServShptLine.TRANSFERFIELDS(passedServLine);
          ServShptLine."Document No." := ServShptHeader."No.";
          ServShptLine.Quantity := "Qty. to Ship";
          ServShptLine."Quantity (Base)" := "Qty. to Ship (Base)";
          ServShptLine."Appl.-to Warranty Entry" := passedWarrantyNo;

          if ABS("Qty. to Consume") > ABS("Qty. to Ship" - "Qty. to Invoice")
          then begin
            ServShptLine."Quantity Consumed" := "Qty. to Ship" - "Qty. to Invoice";
            ServShptLine."Qty. Consumed (Base)" := "Qty. to Ship (Base)" - "Qty. to Invoice (Base)";
          end else begin
            ServShptLine."Quantity Consumed" := "Qty. to Consume";
            ServShptLine."Qty. Consumed (Base)" := "Qty. to Consume (Base)";
          end;

          if ABS("Qty. to Invoice") > ABS("Qty. to Ship" - "Qty. to Consume")
          then begin
            ServShptLine."Quantity Invoiced" := "Qty. to Ship" - "Qty. to Consume";
            ServShptLine."Qty. Invoiced (Base)" := "Qty. to Ship (Base)" - "Qty. to Consume (Base)";
          end else begin
            ServShptLine."Quantity Invoiced" := "Qty. to Invoice";
            ServShptLine."Qty. Invoiced (Base)" := "Qty. to Invoice (Base)";
          end;

          ServShptLine."Qty. Shipped Not Invoiced" := ServShptLine.Quantity -
            ServShptLine."Quantity Invoiced" - ServShptLine."Quantity Consumed";
          ServShptLine."Qty. Shipped Not Invd. (Base)" := ServShptLine."Quantity (Base)" -
            ServShptLine."Qty. Invoiced (Base)" - ServShptLine."Qty. Consumed (Base)";
          if "Document Type" = "Document Type"::Order then begin
            ServShptLine."Order No." := "Document No.";
            ServShptLine."Order Line No." := "Line No.";
          end;

          if (Type = Type::Item) and ("Qty. to Ship" <> 0) then
            ServShptLine."Item Shpt. Entry No." :=
              ServITRMgt.InsertShptEntryRelation(ServShptLine,
                TempHandlingSpecification,TempTrackingSpecificationInv,ItemLedgShptEntryNo);

          CALCFIELDS("Service Item Line Description");
          ServShptLine."Service Item Line Description" := "Service Item Line Description";

          ServShptLine.INSERT;
          CheckCertificateOfSupplyStatus(ServShptHeader,ServShptLine);
        end;
        // end inserting Service Shipment Line

        if Invoice and Ship then begin
          WarrantyLedgerEntry.RESET;
          WarrantyLedgerEntry.SETCURRENTKEY("Service Order No.","Posting Date","Document No.");
          WarrantyLedgerEntry.SETRANGE("Service Order No.",ServShptLine."Order No.");
          WarrantyLedgerEntry.SETRANGE("Document No.",ServShptLine."Document No.");
          WarrantyLedgerEntry.SETRANGE(Type,ServShptLine.Type);
          WarrantyLedgerEntry.SETRANGE("No.",ServShptLine."No.");
          WarrantyLedgerEntry.SETRANGE(Open,true);
          WarrantyLedgerEntry.MODIFYALL(Open,false);
        end;
      end;
    END;

    [External]
    PROCEDURE PrepareInvoiceHeader@12(VAR Window@1001 : Dialog);
    VAR
      RecordLinkManagement@1000 : Codeunit "Record Link Management";
    BEGIN
      with ServHeader do begin
        ServInvHeader.INIT;
        ServInvHeader.TRANSFERFIELDS(ServHeader);

        if "Document Type" = "Document Type"::Order then begin
          ServInvHeader."No." := "Posting No.";
          ServInvHeader."Pre-Assigned No. Series" := '';
          ServInvHeader."Order No. Series" := "No. Series";
          ServInvHeader."Order No." := "No.";
          Window.UPDATE(1,STRSUBSTNO(Text007,"Document Type","No.",ServInvHeader."No."));
        end else begin
          ServInvHeader."Pre-Assigned No. Series" := "No. Series";
          ServInvHeader."Pre-Assigned No." := "No.";
          if "Posting No." <> '' then begin
            ServInvHeader."No." := "Posting No.";
            Window.UPDATE(1,STRSUBSTNO(Text007,"Document Type","No.",ServInvHeader."No."));
          end;
        end;

        if ServMgtSetup."Copy Comments Order to Invoice" then
          RecordLinkManagement.CopyLinks(ServHeader,ServInvHeader);

        ServInvHeader."Source Code" := SrcCode;
        ServInvHeader."User ID" := USERID;
        ServInvHeader."No. Printed" := 0;
        ServInvHeader.INSERT;

        CLEAR(ServLogMgt);
        case "Document Type" of
          "Document Type"::Invoice:
            ServLogMgt.ServInvoicePost("No.",ServInvHeader."No.");
          "Document Type"::Order:
            ServLogMgt.ServOrderInvoicePost("No.",ServInvHeader."No.");
        end;

        SetGenJnlLineDocNos(2,// Invoice
          ServInvHeader."No.","No.");

        if ("Document Type" = "Document Type"::Invoice) or
           ("Document Type" = "Document Type"::Order) and ServMgtSetup."Copy Comments Order to Invoice"
        then
          ServOrderMgt.CopyCommentLines(
            DummyServCommentLine."Table Name"::"Service Header",
            DummyServCommentLine."Table Name"::"Service Invoice Header",
            "No.",ServInvHeader."No.");
      end;
    END;

    LOCAL PROCEDURE PrepareInvoiceLine@35(VAR passedServLine@1000 : Record "Service Line");
    BEGIN
      with passedServLine do begin
        ServInvLine.INIT;
        ServInvLine.TRANSFERFIELDS(passedServLine);
        ServInvLine."Document No." := ServInvHeader."No.";
        ServInvLine.Quantity := "Qty. to Invoice";
        ServInvLine."Quantity (Base)" := "Qty. to Invoice (Base)";

        CALCFIELDS("Service Item Line Description");
        ServInvLine."Service Item Line Description" := "Service Item Line Description";
        ServInvLine.INSERT;
      end;
    END;

    [External]
    PROCEDURE PrepareCrMemoHeader@14(VAR Window@1001 : Dialog);
    VAR
      RecordLinkManagement@1000 : Codeunit "Record Link Management";
    BEGIN
      with ServHeader do begin
        ServCrMemoHeader.INIT;
        ServCrMemoHeader.TRANSFERFIELDS(ServHeader);
        ServCrMemoHeader."Pre-Assigned No. Series" := "No. Series";
        ServCrMemoHeader."Pre-Assigned No." := "No.";
        if "Posting No." <> '' then begin
          ServCrMemoHeader."No." := "Posting No.";
          Window.UPDATE(1,STRSUBSTNO(Text008,"Document Type","No.",ServCrMemoHeader."No."));
        end;

        RecordLinkManagement.CopyLinks(ServHeader,ServCrMemoHeader);

        ServCrMemoHeader."Source Code" := SrcCode;
        ServCrMemoHeader."User ID" := USERID;
        ServCrMemoHeader."No. Printed" := 0;
        ServCrMemoHeader.INSERT;

        CLEAR(ServLogMgt);
        ServLogMgt.ServCrMemoPost("No.",ServCrMemoHeader."No.");

        SetGenJnlLineDocNos(3,// Credit Memo
          ServCrMemoHeader."No.","No.");

        ServOrderMgt.CopyCommentLines(
          DummyServCommentLine."Table Name"::"Service Header",
          DummyServCommentLine."Table Name"::"Service Cr.Memo Header",
          "No.",ServCrMemoHeader."No.");
      end;
    END;

    LOCAL PROCEDURE PrepareCrMemoLine@36(VAR passedServLine@1001 : Record "Service Line");
    BEGIN
      with passedServLine do begin
        // TempSrvLine is initialized (in Sales module) in RoundAmount
        // procedure, and likely does not differ from initial ServLine.

        ServCrMemoLine.INIT;
        ServCrMemoLine.TRANSFERFIELDS(passedServLine);
        ServCrMemoLine."Document No." := ServCrMemoHeader."No.";
        ServCrMemoLine.Quantity := "Qty. to Invoice";
        ServCrMemoLine."Quantity (Base)" := "Qty. to Invoice (Base)";
        CALCFIELDS("Service Item Line Description");
        ServCrMemoLine."Service Item Line Description" := "Service Item Line Description";
        ServCrMemoLine.INSERT;
      end;
    END;

    [External]
    PROCEDURE Finalize@9(VAR PassedServHeader@1000 : Record "Service Header");
    BEGIN
      // finalize codeunits calls
      ServPostingJnlsMgt.Finalize;

      // finalize posted documents
      FinalizeShipmentDocument;
      FinalizeInvoiceDocument;
      FinalizeCrMemoDocument;
      FinalizeWarrantyLedgerEntries(PassedServHeader,CloseCondition);

      if ((ServHeader."Document Type" = ServHeader."Document Type"::Order) and CloseCondition) or
         (ServHeader."Document Type" <> ServHeader."Document Type"::Order)
      then begin
        // Service Lines, Service Item Lines, Service Header
        FinalizeDeleteLines;
        FinalizeDeleteServOrdAllocat;
        FinalizeDeleteItemLines;
        FinalizeDeleteComments;
        FinalizeDeleteHeader(PassedServHeader);
      end else begin
        // Service Lines, Service Item Lines, Service Header
        FinalizeLines;
        FinalizeItemLines;
        FinalizeHeader(PassedServHeader);
      end;
    END;

    LOCAL PROCEDURE FinalizeHeader@3(VAR PassedServHeader@1000 : Record "Service Header");
    BEGIN
      // finalize Service Header
      PassedServHeader.COPY(ServHeader);
      ServHeader.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeLines@4();
    BEGIN
      // copy Service Lines to persistent from temporary
      PServLine.RESET;
      ServLine.RESET;
      ServLine.SETFILTER(Quantity,'<>0');
      if ServLine.FIND('-') then
        repeat
          with ServLine do begin
            if PServLine.GET("Document Type","Document No.","Line No.") then begin
              PServLine.COPY(ServLine);
              PServLine.MODIFY;
            end else
              // invoice discount lines only
              if (Type = Type::"G/L Account") and "System-Created Entry" then begin
                PServLine.INIT;
                PServLine.COPY(ServLine);
                PServLine.INSERT;
              end;
          end;
        until ServLine.NEXT = 0;
      ServLine.RESET;
      ServLine.DELETEALL; // just temp records
    END;

    LOCAL PROCEDURE FinalizeItemLines@5();
    BEGIN
      // copy Service Item Lines to persistent from temporary
      ServItemLine.RESET;
      if ServItemLine.FIND('-') then
        repeat
          with ServItemLine do begin
            PServItemLine.GET("Document Type","Document No.","Line No.");
            PServItemLine.COPY(ServItemLine);
            PServItemLine.MODIFY;
          end;
        until ServItemLine.NEXT = 0;
      ServItemLine.DELETEALL; // just temp records
    END;

    LOCAL PROCEDURE FinalizeDeleteHeader@32(VAR PassedServHeader@1000 : Record "Service Header");
    BEGIN
      with PassedServHeader do begin
        DELETE;
        ServITRMgt.DeleteInvoiceSpecFromHeader(ServHeader);
      end;

      ServHeader.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeDeleteLines@27();
    BEGIN
      // delete Service Lines persistent and temporary
      PServLine.RESET;
      PServLine.SETRANGE("Document Type",ServHeader."Document Type");
      PServLine.SETRANGE("Document No.",ServHeader."No.");
      PServLine.DELETEALL;

      ServLine.RESET;
      ServLine.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeDeleteItemLines@29();
    BEGIN
      // delete Service Item Lines persistent and temporary
      PServItemLine.RESET;
      PServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
      PServItemLine.SETRANGE("Document No.",ServHeader."No.");
      PServItemLine.DELETEALL;

      ServItemLine.RESET;
      ServItemLine.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeShipmentDocument@43();
    VAR
      PServShptHeader@1001 : Record "Service Shipment Header";
      PServShptItemLine@1003 : Record "Service Shipment Item Line";
      PServShptLine@1000 : Record "Service Shipment Line";
    BEGIN
      ServShptHeader.RESET;
      if ServShptHeader.FINDFIRST then begin
        PServShptHeader.INIT;
        PServShptHeader.COPY(ServShptHeader);
        PServShptHeader.INSERT;
      end;
      ServShptHeader.DELETEALL;

      ServShptItemLine.RESET;
      if ServShptItemLine.FIND('-') then
        repeat
          PServShptItemLine.INIT;
          PServShptItemLine.COPY(ServShptItemLine);
          PServShptItemLine.INSERT;
        until ServShptItemLine.NEXT = 0;
      ServShptItemLine.DELETEALL;

      ServShptLine.RESET;
      if ServShptLine.FIND('-') then
        repeat
          PServShptLine.INIT;
          PServShptLine.COPY(ServShptLine);
          PServShptLine.INSERT;
        until ServShptLine.NEXT = 0;
      ServShptLine.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeInvoiceDocument@42();
    VAR
      PServInvHeader@1000 : Record "Service Invoice Header";
      PServInvLine@1001 : Record "Service Invoice Line";
    BEGIN
      ServInvHeader.RESET;
      if ServInvHeader.FINDFIRST then begin
        PServInvHeader.INIT;
        PServInvHeader.COPY(ServInvHeader);
        PServInvHeader.INSERT;
      end;
      ServInvHeader.DELETEALL;

      ServInvLine.RESET;
      if ServInvLine.FIND('-') then
        repeat
          PServInvLine.INIT;
          PServInvLine.COPY(ServInvLine);
          PServInvLine.INSERT;
        until ServInvLine.NEXT = 0;
      ServInvLine.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeCrMemoDocument@41();
    VAR
      PServCrMemoHeader@1000 : Record "Service Cr.Memo Header";
      PServCrMemoLine@1001 : Record "Service Cr.Memo Line";
    BEGIN
      ServCrMemoHeader.RESET;
      if ServCrMemoHeader.FINDFIRST then begin
        PServCrMemoHeader.INIT;
        PServCrMemoHeader.COPY(ServCrMemoHeader);
        PServCrMemoHeader.INSERT;
      end;
      ServCrMemoHeader.DELETEALL;

      ServCrMemoLine.RESET;
      if ServCrMemoLine.FIND('-') then
        repeat
          PServCrMemoLine.INIT;
          PServCrMemoLine.COPY(ServCrMemoLine);
          PServCrMemoLine.INSERT;
        until ServCrMemoLine.NEXT = 0;
      ServCrMemoLine.DELETEALL;
    END;

    LOCAL PROCEDURE GetAndCheckCustomer@6();
    VAR
      Cust@1000 : Record Customer;
    BEGIN
      with ServHeader do begin
        Cust.GET("Customer No.");

        if Ship or ServMgtSetup."Shipment on Invoice" and
           ("Document Type" = "Document Type"::Invoice)
        then begin
          ServLine.RESET;
          ServLine.SETRANGE("Document Type","Document Type");
          ServLine.SETRANGE("Document No.","No.");
          ServLine.SETFILTER("Qty. to Ship",'<>0');
          ServLine.SETRANGE("Shipment No.",'');
          if not ServLine.ISEMPTY then
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type",true,true);
        end else
          Cust.CheckBlockedCustOnDocs(Cust,"Document Type",false,true);

        if "Bill-to Customer No." <> "Customer No." then begin
          Cust.GET("Bill-to Customer No.");
          if Ship or ServMgtSetup."Shipment on Invoice" and
             ("Document Type" = "Document Type"::Invoice)
          then begin
            ServLine.RESET;
            ServLine.SETRANGE("Document Type","Document Type");
            ServLine.SETRANGE("Document No.","No.");
            ServLine.SETFILTER("Qty. to Ship",'<>0');
            if not ServLine.ISEMPTY then
              Cust.CheckBlockedCustOnDocs(Cust,"Document Type",true,true);
          end else
            Cust.CheckBlockedCustOnDocs(Cust,"Document Type",false,true);
        end;
        ServLine.RESET;
      end;
    END;

    LOCAL PROCEDURE GetItem@49(ServLine@1000 : Record "Service Line";VAR Item@1001 : Record Item);
    BEGIN
      with ServLine do begin
        TESTFIELD(Type,Type::Item);
        TESTFIELD("No.");
        if "No." <> Item."No." then
          Item.GET("No.");
      end;
    END;

    LOCAL PROCEDURE CheckDim@34();
    VAR
      ServiceLine2@1001 : Record "Service Line";
    BEGIN
      ServiceLine2."Line No." := 0;
      CheckDimComb(ServiceLine2);
      CheckDimValuePosting(ServiceLine2);

      ServLine.SETFILTER(Type,'<>%1',ServLine.Type::" ");
      if ServLine.FIND('-') then
        repeat
          if (Invoice and (ServLine."Qty. to Invoice" <> 0)) or
             (Ship and (ServLine."Qty. to Ship" <> 0))
          then begin
            CheckDimComb(ServLine);
            CheckDimValuePosting(ServLine);
          end;
        until ServLine.NEXT = 0;
      ServLine.RESET;
    END;

    LOCAL PROCEDURE CollectValueEntryRelation@25();
    BEGIN
      with ServHeader do begin
        if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then
          ServPostingJnlsMgt.CollectValueEntryRelation(TempValueEntryRelation,ServInvLine.RowID1)
        else
          ServPostingJnlsMgt.CollectValueEntryRelation(TempValueEntryRelation,ServCrMemoLine.RowID1);
      end;
    END;

    [External]
    PROCEDURE InsertValueEntryRelation@24();
    BEGIN
      ServITRMgt.InsertValueEntryRelation(TempValueEntryRelation);
    END;

    LOCAL PROCEDURE CheckIfServDuplicateLine@44(VAR CurrentServLine@1000 : Record "Service Line");
    VAR
      ServLine2@1002 : Record "Service Line";
      ServLedgEntry@1003 : Record "Service Ledger Entry";
    BEGIN
      if CurrentServLine."Appl.-to Service Entry" = 0 then
        exit;
      ServLine2.RESET;
      ServLine2.SETRANGE("Document Type",CurrentServLine."Document Type");
      ServLine2.SETRANGE("Document No.",CurrentServLine."Document No.");
      ServLine2.SETFILTER("Line No.",'<>%1',CurrentServLine."Line No.");
      ServLine2.SETRANGE("Appl.-to Service Entry",CurrentServLine."Appl.-to Service Entry");
      if ServLine2.FINDFIRST then
        ERROR(
          Text035,ServLine2.FIELDCAPTION("Line No."),
          ServLine2."Line No.",ServLedgEntry.TABLECAPTION,CurrentServLine."Line No.");

      if CurrentServLine."Document Type" = CurrentServLine."Document Type"::Invoice then
        if ServLedgEntry.GET(CurrentServLine."Appl.-to Service Entry") and
           (ServLedgEntry.Open = false) and
           ((ServLedgEntry."Document Type" = ServLedgEntry."Document Type"::Invoice) or
            (ServLedgEntry."Document Type" = ServLedgEntry."Document Type"::"Credit Memo"))
        then
          ERROR(
            Text039,ServLine2.FIELDCAPTION("Line No."),CurrentServLine."Line No.",
            FORMAT(ServLine2."Document Type"),ServHeader."No.",
            ServLedgEntry.TABLECAPTION);

      if (CurrentServLine."Contract No." <> '') and
         (CurrentServLine."Shipment No." = '') and
         (CurrentServLine."Document Type" <> CurrentServLine."Document Type"::Order)
      then begin
        ServLedgEntry.RESET;
        ServLedgEntry.SETCURRENTKEY("Service Contract No.");
        ServLedgEntry.SETRANGE("Service Contract No.",CurrentServLine."Contract No.");
        ServLedgEntry.SETRANGE("Service Order No.",'');
        ServLedgEntry.SETRANGE(Open,true);
        ServLedgEntry.SETFILTER("Entry No.",'<%1',ServLedgEntryNo);
        if not ServLedgEntry.ISEMPTY and (ServHeader."Contract No." <> '') then
          ERROR(Text041,ServLedgEntry.FIELDCAPTION(Open),CurrentServLine."Contract No.");
      end;
    END;

    LOCAL PROCEDURE FindFirstServLedgEntry@20(VAR TempServiceLine@1000 : TEMPORARY Record "Service Line") : Integer;
    VAR
      ApplServLedgEntryNo@1001 : Integer;
    BEGIN
      if not TempServiceLine.FIND('-') then
        exit(0);
      ApplServLedgEntryNo := 0;
      with TempServiceLine do
        repeat
          if "Appl.-to Service Entry" <> 0 then
            if ApplServLedgEntryNo = 0 then
              ApplServLedgEntryNo := "Appl.-to Service Entry"
            else
              if "Appl.-to Service Entry" < ApplServLedgEntryNo then
                ApplServLedgEntryNo := "Appl.-to Service Entry";
        until NEXT = 0;
      exit(ApplServLedgEntryNo);
    END;

    LOCAL PROCEDURE CheckDimComb@30(ServiceLine@1000 : Record "Service Line");
    BEGIN
      if ServiceLine."Line No." = 0 then
        if not DimMgt.CheckDimIDComb(ServHeader."Dimension Set ID") then
          ERROR(Text028,
            ServHeader."Document Type",ServHeader."No.",DimMgt.GetDimCombErr);

      if ServiceLine."Line No." <> 0 then
        if not DimMgt.CheckDimIDComb(ServiceLine."Dimension Set ID") then
          ERROR(Text029,
            ServHeader."Document Type",ServHeader."No.",ServiceLine."Line No.",DimMgt.GetDimCombErr);
    END;

    LOCAL PROCEDURE CheckDimValuePosting@28(VAR ServiceLine2@1000 : Record "Service Line");
    VAR
      TableIDArr@1002 : ARRAY [10] OF Integer;
      NumberArr@1003 : ARRAY [10] OF Code[20];
    BEGIN
      if ServiceLine2."Line No." = 0 then begin
        TableIDArr[1] := DATABASE::Customer;
        NumberArr[1] := ServHeader."Bill-to Customer No.";
        TableIDArr[2] := DATABASE::"Salesperson/Purchaser";
        NumberArr[2] := ServHeader."Salesperson Code";
        TableIDArr[3] := DATABASE::"Responsibility Center";
        NumberArr[3] := ServHeader."Responsibility Center";
        TableIDArr[4] := DATABASE::"Service Order Type";
        NumberArr[4] := ServHeader."Service Order Type";

        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,ServHeader."Dimension Set ID") then
          ERROR(
            Text030,
            ServHeader."Document Type",ServHeader."No.",DimMgt.GetDimValuePostingErr);
      end else begin
        TableIDArr[1] := DimMgt.TypeToTableID5(ServiceLine2.Type);
        NumberArr[1] := ServiceLine2."No.";
        TableIDArr[2] := DATABASE::Job;
        NumberArr[2] := ServiceLine2."Job No.";

        TableIDArr[3] := DATABASE::"Responsibility Center";
        NumberArr[3] := ServiceLine2."Responsibility Center";

        if ServiceLine2."Service Item Line No." <> 0 then begin
          ServItemLine.RESET;
          ServItemLine.SETRANGE("Document Type",ServiceLine2."Document Type");
          ServItemLine.SETRANGE("Document No.",ServiceLine2."Document No.");
          ServItemLine.SETRANGE("Line No.",ServiceLine2."Service Item Line No.");
          if ServItemLine.FIND('-') then begin
            TableIDArr[4] := DATABASE::"Service Item";
            NumberArr[4] := ServItemLine."Service Item No.";
            TableIDArr[5] := DATABASE::"Service Item Group";
            NumberArr[5] := ServItemLine."Service Item Group Code";
          end;
          ServItemLine.RESET;
        end;

        if not DimMgt.CheckDimValuePosting(TableIDArr,NumberArr,ServiceLine2."Dimension Set ID") then
          ERROR(Text031,
            ServHeader."Document Type",ServHeader."No.",ServiceLine2."Line No.",DimMgt.GetDimValuePostingErr);
      end;
    END;

    [External]
    PROCEDURE CheckAndSetPostingConstants@2(VAR PassedShip@1000 : Boolean;VAR PassedConsume@1001 : Boolean;VAR PassedInvoice@1002 : Boolean);
    BEGIN
      with ServHeader do begin
        if PassedConsume then begin
          ServLine.RESET;
          ServLine.SETFILTER(Quantity,'<>0');
          if "Document Type" = "Document Type"::Order then
            ServLine.SETFILTER("Qty. to Consume",'<>0');
          PassedConsume := ServLine.FIND('-');
          if PassedConsume and ("Document Type" = "Document Type"::Order) and not PassedShip then begin
            PassedConsume := false;
            repeat
              PassedConsume :=
                (ServLine."Quantity Shipped" - ServLine."Quantity Invoiced" - ServLine."Quantity Consumed" <> 0);
            until PassedConsume or (ServLine.NEXT = 0);
          end;
        end;
        if PassedInvoice then begin
          ServLine.RESET;
          ServLine.SETFILTER(Quantity,'<>0');
          if "Document Type" = "Document Type"::Order then
            ServLine.SETFILTER("Qty. to Invoice",'<>0');
          PassedInvoice := ServLine.FIND('-');
          if PassedInvoice and ("Document Type" = "Document Type"::Order) and not PassedShip then begin
            PassedInvoice := false;
            repeat
              PassedInvoice :=
                (ServLine."Quantity Shipped" - ServLine."Quantity Invoiced" - ServLine."Quantity Consumed" <> 0);
            until PassedInvoice or (ServLine.NEXT = 0);
          end;
        end;
        if PassedShip then begin
          ServLine.RESET;
          ServLine.SETFILTER(Quantity,'<>0');
          if "Document Type" = "Document Type"::Order then
            ServLine.SETFILTER("Qty. to Ship",'<>0');
          ServLine.SETRANGE("Shipment No.",'');
          PassedShip := ServLine.FIND('-');
          if PassedShip then
            ServITRMgt.CheckTrackingSpecification(ServHeader,ServLine);
        end;
      end;

      SetPostingOptions(PassedShip,PassedConsume,PassedInvoice);
      ServLine.RESET;
    END;

    [External]
    PROCEDURE CheckAndBlankQtys@37(ServDocType@1000 : Integer);
    BEGIN
      ServLine.RESET;
      if ServLine.FIND('-') then
        repeat
          with ServLine do begin
            // Service Charge line should not be tested.
            if (Type <> Type::" ") and not "System-Created Entry" then begin
              if ServDocType = DATABASE::"Service Contract Header" then
                TESTFIELD("Contract No.");
              if ServDocType = DATABASE::"Service Header" then
                TESTFIELD("Shipment No.");
            end;

            if "Qty. per Unit of Measure" = 0 then
              "Qty. per Unit of Measure" := 1;
            case "Document Type" of
              "Document Type"::Invoice:
                begin
                  if "Shipment No." = '' then
                    TESTFIELD("Qty. to Ship",Quantity);
                  TESTFIELD("Qty. to Invoice",Quantity);
                end;
              "Document Type"::"Credit Memo":
                begin
                  TESTFIELD("Qty. to Ship",0);
                  TESTFIELD("Qty. to Invoice",Quantity);
                end;
            end;

            if not (Ship or ServAmountsMgt.RoundingLineInserted) then begin
              "Qty. to Ship" := 0;
              "Qty. to Ship (Base)" := 0;
            end;

            if ("Document Type" = "Document Type"::Invoice) and ("Shipment No." <> '') then begin
              "Quantity Shipped" := Quantity;
              "Qty. Shipped (Base)" := "Quantity (Base)";
              "Qty. to Ship" := 0;
              "Qty. to Ship (Base)" := 0;
            end;

            if Invoice then begin
              if ABS("Qty. to Invoice") > ABS(MaxQtyToInvoice) then begin
                "Qty. to Consume" := 0;
                "Qty. to Consume (Base)" := 0;
                InitQtyToInvoice;
              end
            end else begin
              "Qty. to Invoice" := 0;
              "Qty. to Invoice (Base)" := 0;
            end;

            if Consume then begin
              if ABS("Qty. to Consume") > ABS(MaxQtyToConsume) then begin
                "Qty. to Consume" := MaxQtyToConsume;
                "Qty. to Consume (Base)" := MaxQtyToConsumeBase;
              end;
            end else begin
              "Qty. to Consume" := 0;
              "Qty. to Consume (Base)" := 0;
            end;

            MODIFY;
          end;

        until ServLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckCloseCondition@13(Qty@1000 : Decimal;QtytoInv@1001 : Decimal;QtyToCsm@1002 : Decimal;QtyInvd@1003 : Decimal;QtyCsmd@1004 : Decimal) : Boolean;
    VAR
      ServiceItemLineTemp@1007 : Record "Service Item Line";
      ServiceLineTemp@1008 : Record "Service Line";
      QtyClosedCondition@1005 : Boolean;
      ServiceItemClosedCondition@1006 : Boolean;
    BEGIN
      QtyClosedCondition := (Qty = QtyToCsm + QtytoInv + QtyCsmd + QtyInvd);
      ServiceItemClosedCondition := true;
      ServiceItemLineTemp.SETCURRENTKEY("Document Type","Document No.","Line No.");
      ServiceItemLineTemp.SETRANGE("Document Type",ServItemLine."Document Type");
      ServiceItemLineTemp.SETRANGE("Document No.",ServItemLine."Document No.");
      ServiceItemLineTemp.SETFILTER("Service Item No.",'<>%1','');
      if ServiceItemLineTemp.FINDSET then
        repeat
          ServiceLineTemp.SETCURRENTKEY("Document Type","Document No.","Service Item No.");
          ServiceLineTemp.SETRANGE("Document Type",ServiceItemLineTemp."Document Type");
          ServiceLineTemp.SETRANGE("Document No.",ServiceItemLineTemp."Document No.");
          ServiceLineTemp.SETRANGE("Service Item No.",ServiceItemLineTemp."Service Item No.");
          if not ServiceLineTemp.FINDFIRST then
            ServiceItemClosedCondition := false
        until (ServiceItemLineTemp.NEXT = 0) or (not ServiceItemClosedCondition);
      exit(QtyClosedCondition and ServiceItemClosedCondition);
    END;

    LOCAL PROCEDURE CheckSysCreatedEntry@45();
    BEGIN
      with ServLine do begin
        if ServHeader."Document Type" = ServHeader."Document Type"::Invoice then begin
          RESET;
          SETRANGE("System-Created Entry",false);
          SETFILTER(Quantity,'<>0');
          if not FIND('-') then
            ERROR(Text001);
          RESET;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckShippingAdvice@40();
    BEGIN
      if ServHeader."Shipping Advice" = ServHeader."Shipping Advice"::Complete then
        with ServLine do
          if FINDSET then
            repeat
              if IsShipment then begin
                if not GetShippingAdvice then
                  ERROR(Text023);
                exit;
              end;
            until NEXT = 0;
    END;

    [External]
    PROCEDURE CheckAdjustedLines@18();
    VAR
      ServPriceMgt@1001 : Codeunit "Service Price Management";
    BEGIN
      with ServLine do begin
        if ServItemLine.GET("Document Type","Document No.","Service Item Line No.") then
          if ServItemLine."Service Price Group Code" <> '' then
            if ServPriceMgt.IsLineToAdjustFirstInvoiced(ServLine) then
              if not CONFIRM(STRSUBSTNO(Text015,TABLECAPTION,FIELDCAPTION("Service Price Group Code"))) then
                ERROR('');
        RESET;
      end;
    END;

    [External]
    PROCEDURE IsCloseConditionMet@33() : Boolean;
    BEGIN
      exit(CloseCondition);
    END;

    [External]
    PROCEDURE SetNoSeries@7(VAR PServHeader@1001 : Record "Service Header") : Boolean;
    VAR
      NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
      ModifyHeader@1002 : Boolean;
    BEGIN
      ModifyHeader := false;
      with ServHeader do begin
        if Ship and ("Shipping No." = '') then
          if ("Document Type" = "Document Type"::Order) or
             (("Document Type" = "Document Type"::Invoice) and ServMgtSetup."Shipment on Invoice")
          then begin
            TESTFIELD("Shipping No. Series");
            "Shipping No." := NoSeriesMgt.GetNextNo("Shipping No. Series","Posting Date",true);
            ModifyHeader := true;
          end;

        if Invoice and ("Posting No." = '') then begin
          if ("No. Series" <> '') or ("Document Type" = "Document Type"::Order)
          then
            TESTFIELD("Posting No. Series");
          if ("No. Series" <> "Posting No. Series") or ("Document Type" = "Document Type"::Order)
          then begin
            "Posting No." := NoSeriesMgt.GetNextNo("Posting No. Series","Posting Date",true);
            ModifyHeader := true;
          end;
        end;

        OnBeforeModifyServiceDocNoSeries(ServHeader,PServHeader,ModifyHeader);
        MODIFY;

        if ModifyHeader then begin
          PServHeader."Shipping No." := "Shipping No.";
          PServHeader."Posting No." := "Posting No.";
        end;
      end;
      exit(ModifyHeader);
    END;

    [External]
    PROCEDURE SetLastNos@23(VAR PServHeader@1000 : Record "Service Header");
    BEGIN
      if Ship then begin
        PServHeader."Last Shipping No." := ServHeader."Last Shipping No.";
        PServHeader."Shipping No." := '';
      end;

      if Invoice then begin
        PServHeader."Last Posting No." := ServHeader."Last Posting No.";
        PServHeader."Posting No." := '';
      end;
      if ServLinesPassed and CloseCondition then
        PServHeader.Status := ServHeader.Status::Finished;
    END;

    [External]
    PROCEDURE SetPostingOptions@47(passedShip@1000 : Boolean;passedConsume@1001 : Boolean;passedInvoice@1002 : Boolean);
    BEGIN
      Ship := passedShip;
      Consume := passedConsume;
      Invoice := passedInvoice;
      ServPostingJnlsMgt.SetPostingOptions(passedConsume,passedInvoice);
    END;

    LOCAL PROCEDURE SetGenJnlLineDocNos@15(DocType@1000 : Integer;DocNo@1001 : Code[20];ExtDocNo@1002 : Code[20]);
    BEGIN
      GenJnlLineDocType := DocType;
      GenJnlLineDocNo := DocNo;
      if SalesSetup."Ext. Doc. No. Mandatory" then
        GenJnlLineExtDocNo := ExtDocNo
      else
        GenJnlLineExtDocNo := '';
      ServPostingJnlsMgt.SetGenJnlLineDocNos(GenJnlLineDocNo,GenJnlLineExtDocNo);
    END;

    LOCAL PROCEDURE UpdateRcptLinesOnInv@21();
    BEGIN
    END;

    LOCAL PROCEDURE UpdateShptLinesOnInv@52(VAR ServiceLine@1001 : Record "Service Line";VAR RemQtyToBeInvoiced@1002 : Decimal;VAR RemQtyToBeInvoicedBase@1003 : Decimal;VAR RemQtyToBeConsumed@1004 : Decimal;VAR RemQtyToBeConsumedBase@1005 : Decimal);
    VAR
      ServiceShptLine@1006 : Record "Service Shipment Line";
      ItemEntryRelation@1000 : Record "Item Entry Relation";
      QtyToBeInvoiced@1008 : Decimal;
      QtyToBeInvoicedBase@1009 : Decimal;
      QtyToBeConsumed@1010 : Decimal;
      QtyToBeConsumedBase@1011 : Decimal;
      EndLoop@1013 : Boolean;
    BEGIN
      EndLoop := false;
      if ((ABS(RemQtyToBeInvoiced) > ABS(ServiceLine."Qty. to Ship")) and Invoice) or
         ((ABS(RemQtyToBeConsumed) > ABS(ServiceLine."Qty. to Ship")) and Consume)
      then begin
        ServiceShptLine.RESET;
        case ServHeader."Document Type" of
          ServHeader."Document Type"::Order:
            begin
              ServiceShptLine.SETCURRENTKEY("Order No.","Order Line No.");
              ServiceShptLine.SETRANGE("Order No.",ServiceLine."Document No.");
              ServiceShptLine.SETRANGE("Order Line No.",ServiceLine."Line No.");
            end;
          ServHeader."Document Type"::Invoice:
            begin
              ServiceShptLine.SETRANGE("Document No.",ServiceLine."Shipment No.");
              ServiceShptLine.SETRANGE("Line No.",ServiceLine."Shipment Line No.");
            end;
        end;

        ServiceShptLine.SETFILTER("Qty. Shipped Not Invoiced",'<>0');
        if ServiceShptLine.FIND('-') then begin
          ServPostingJnlsMgt.SetItemJnlRollRndg(true);
          repeat
            if TrackingSpecificationExists then begin
              ItemEntryRelation.GET(TempInvoicingSpecification."Item Ledger Entry No.");
              ServiceShptLine.GET(ItemEntryRelation."Source ID",ItemEntryRelation."Source Ref. No.");
            end else
              ItemEntryRelation."Item Entry No." := ServiceShptLine."Item Shpt. Entry No.";
            ServiceShptLine.TESTFIELD("Customer No.",ServiceLine."Customer No.");
            ServiceShptLine.TESTFIELD(Type,ServiceLine.Type);
            ServiceShptLine.TESTFIELD("No.",ServiceLine."No.");
            ServiceShptLine.TESTFIELD("Gen. Bus. Posting Group",ServiceLine."Gen. Bus. Posting Group");
            ServiceShptLine.TESTFIELD("Gen. Prod. Posting Group",ServiceLine."Gen. Prod. Posting Group");

            ServiceShptLine.TESTFIELD("Unit of Measure Code",ServiceLine."Unit of Measure Code");
            ServiceShptLine.TESTFIELD("Variant Code",ServiceLine."Variant Code");
            if -ServiceLine."Qty. to Invoice" * ServiceShptLine.Quantity < 0 then
              ServiceLine.FIELDERROR("Qty. to Invoice",Text011);

            if TrackingSpecificationExists then begin
              if Invoice then begin
                QtyToBeInvoiced := TempInvoicingSpecification."Qty. to Invoice";
                QtyToBeInvoicedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
              end;
              if Consume then begin
                QtyToBeConsumed := TempInvoicingSpecification."Qty. to Invoice";
                QtyToBeConsumedBase := TempInvoicingSpecification."Qty. to Invoice (Base)";
              end;
            end else begin
              if Invoice then begin
                QtyToBeInvoiced := RemQtyToBeInvoiced - ServiceLine."Qty. to Ship" - ServiceLine."Qty. to Consume";
                QtyToBeInvoicedBase :=
                  RemQtyToBeInvoicedBase - ServiceLine."Qty. to Ship (Base)" - ServiceLine."Qty. to Consume (Base)";
              end;
              if Consume then begin
                QtyToBeConsumed := RemQtyToBeConsumed - ServiceLine."Qty. to Ship" - ServiceLine."Qty. to Invoice";
                QtyToBeConsumedBase :=
                  RemQtyToBeConsumedBase - ServiceLine."Qty. to Ship (Base)" - ServiceLine."Qty. to Invoice (Base)";
              end;
            end;

            if Invoice then begin
              if ABS(QtyToBeInvoiced) >
                 ABS(ServiceShptLine.Quantity - ServiceShptLine."Quantity Invoiced" - ServiceShptLine."Quantity Consumed")
              then begin
                QtyToBeInvoiced :=
                  -(ServiceShptLine.Quantity - ServiceShptLine."Quantity Invoiced" - ServiceShptLine."Quantity Consumed");
                QtyToBeInvoicedBase :=
                  -(ServiceShptLine."Quantity (Base)" - ServiceShptLine."Qty. Invoiced (Base)" -
                    ServiceShptLine."Qty. Consumed (Base)");
              end;

              if TrackingSpecificationExists then
                ServITRMgt.AdjustQuantityRounding(
                  RemQtyToBeInvoiced,QtyToBeInvoiced,
                  RemQtyToBeInvoicedBase,QtyToBeInvoicedBase);

              RemQtyToBeInvoiced := RemQtyToBeInvoiced - QtyToBeInvoiced;
              RemQtyToBeInvoicedBase := RemQtyToBeInvoicedBase - QtyToBeInvoicedBase;

              ServiceShptLine."Quantity Invoiced" := ServiceShptLine."Quantity Invoiced" - QtyToBeInvoiced;
              ServiceShptLine."Qty. Invoiced (Base)" := ServiceShptLine."Qty. Invoiced (Base)" - QtyToBeInvoicedBase;
            end;

            if Consume then begin
              if ABS(QtyToBeConsumed) >
                 ABS(ServiceShptLine.Quantity - ServiceShptLine."Quantity Invoiced" - ServiceShptLine."Quantity Consumed")
              then begin
                QtyToBeConsumed :=
                  -(ServiceShptLine.Quantity - ServiceShptLine."Quantity Invoiced" - ServiceShptLine."Quantity Consumed");
                QtyToBeConsumedBase :=
                  -(ServiceShptLine."Quantity (Base)" - ServiceShptLine."Qty. Invoiced (Base)" -
                    ServiceShptLine."Qty. Consumed (Base)");
              end;

              if TrackingSpecificationExists then
                ServITRMgt.AdjustQuantityRounding(
                  RemQtyToBeConsumed,QtyToBeConsumed,
                  RemQtyToBeConsumedBase,QtyToBeConsumedBase);

              RemQtyToBeConsumed := RemQtyToBeConsumed - QtyToBeConsumed;
              RemQtyToBeConsumedBase := RemQtyToBeConsumedBase - QtyToBeConsumedBase;

              ServiceShptLine."Quantity Consumed" :=
                ServiceShptLine."Quantity Consumed" - QtyToBeConsumed;
              ServiceShptLine."Qty. Consumed (Base)" :=
                ServiceShptLine."Qty. Consumed (Base)" - QtyToBeConsumedBase;
            end;

            ServiceShptLine."Qty. Shipped Not Invoiced" :=
              ServiceShptLine.Quantity - ServiceShptLine."Quantity Invoiced" - ServiceShptLine."Quantity Consumed";
            ServiceShptLine."Qty. Shipped Not Invd. (Base)" :=
              ServiceShptLine."Quantity (Base)" - ServiceShptLine."Qty. Invoiced (Base)" - ServiceShptLine."Qty. Consumed (Base)";
            ServiceShptLine.MODIFY;

            if ServiceLine.Type = ServiceLine.Type::Item then begin
              if Consume then
                ServPostingJnlsMgt.PostItemJnlLine(
                  ServiceLine,0,0,
                  QtyToBeConsumed,QtyToBeConsumedBase,
                  QtyToBeInvoiced,QtyToBeInvoicedBase,
                  ItemEntryRelation."Item Entry No.",
                  TempInvoicingSpecification,TempTrackingSpecificationInv,
                  TempHandlingSpecification,TempTrackingSpecification,
                  ServShptHeader,ServiceShptLine."Document No.");

              if Invoice then
                ServPostingJnlsMgt.PostItemJnlLine(
                  ServiceLine,0,0,
                  QtyToBeConsumed,QtyToBeConsumedBase,
                  QtyToBeInvoiced,QtyToBeInvoicedBase,
                  ItemEntryRelation."Item Entry No.",
                  TempInvoicingSpecification,TempTrackingSpecificationInv,
                  TempHandlingSpecification,TempTrackingSpecification,
                  ServShptHeader,ServiceShptLine."Document No.");
            end;

            if TrackingSpecificationExists then
              EndLoop := (TempInvoicingSpecification.NEXT = 0)
            else
              EndLoop :=
                (ServiceShptLine.NEXT = 0) or
                ((Invoice and (ABS(RemQtyToBeInvoiced) <= ABS(ServiceLine."Qty. to Ship"))) or
                 (Consume and (ABS(RemQtyToBeConsumed) <= ABS(ServiceLine."Qty. to Ship"))));
          until EndLoop;
        end else
          if ServiceLine."Shipment Line No." <> 0 then
            ERROR(Text026,ServiceLine."Shipment Line No.",ServiceLine."Shipment No.")
          else
            ERROR(Text001);
      end;

      if (Invoice and (ABS(RemQtyToBeInvoiced) > ABS(ServiceLine."Qty. to Ship"))) or
         (Consume and (ABS(RemQtyToBeConsumed) > ABS(ServiceLine."Qty. to Ship")))
      then begin
        if ServHeader."Document Type" = ServHeader."Document Type"::Invoice then
          ERROR(Text027,ServiceShptLine."Document No.");
        ERROR(Text013);
      end;
    END;

    LOCAL PROCEDURE UpdateServLinesOnPostOrder@26();
    VAR
      CalcInvDiscAmt@1000 : Boolean;
      OldInvDiscountAmount@1001 : Decimal;
    BEGIN
      CalcInvDiscAmt := false;
      with ServLine do begin
        if FIND('-') then
          repeat
            if Quantity <> 0 then begin
              OldInvDiscountAmount := "Inv. Discount Amount";

              if Ship then begin
                "Quantity Shipped" := "Quantity Shipped" + "Qty. to Ship";
                "Qty. Shipped (Base)" := "Qty. Shipped (Base)" + "Qty. to Ship (Base)";
              end;

              if Consume then begin
                if ABS("Quantity Consumed" + "Qty. to Consume") >
                   ABS("Quantity Shipped" - "Quantity Invoiced")
                then begin
                  VALIDATE("Qty. to Consume","Quantity Shipped" - "Quantity Invoiced" - "Quantity Consumed");
                  "Qty. to Consume (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)" - "Qty. Consumed (Base)";
                end;
                "Quantity Consumed" := "Quantity Consumed" + "Qty. to Consume";
                "Qty. Consumed (Base)" := "Qty. Consumed (Base)" + "Qty. to Consume (Base)";
                VALIDATE("Qty. to Consume",0);
                "Qty. to Consume (Base)" := 0;
              end;

              if Invoice then begin
                if ABS("Quantity Invoiced" + "Qty. to Invoice") >
                   ABS("Quantity Shipped" - "Quantity Consumed")
                then begin
                  VALIDATE("Qty. to Invoice","Quantity Shipped" - "Quantity Invoiced" - "Quantity Consumed");
                  "Qty. to Invoice (Base)" := "Qty. Shipped (Base)" - "Qty. Invoiced (Base)" - "Qty. Consumed (Base)";
                end;
                "Quantity Invoiced" := "Quantity Invoiced" + "Qty. to Invoice";
                "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + "Qty. to Invoice (Base)";
              end;

              InitOutstanding;
              InitQtyToShip;

              if "Inv. Discount Amount" <> OldInvDiscountAmount then
                CalcInvDiscAmt := true;

              MODIFY;
            end;
          until NEXT = 0;

        if FIND('-') then
          if SalesSetup."Calc. Inv. Discount" or CalcInvDiscAmt then begin
            ServHeader.GET("Document Type","Document No.");
            CLEAR(ServCalcDisc);
            ServCalcDisc.CalculateWithServHeader(ServHeader,PServLine,ServLine);
          end;
      end;
    END;

    LOCAL PROCEDURE UpdateServLinesOnPostInvoice@16();
    VAR
      PServShptLine@1000 : Record "Service Shipment Line";
    BEGIN
      ServLine.SETFILTER("Shipment No.",'<>%1','');
      if ServLine.FIND('-') then
        repeat
          if ServLine.Type <> ServLine.Type::" " then
            with PServLine do begin
              PServShptLine.GET(ServLine."Shipment No.",ServLine."Shipment Line No.");
              GET("Document Type"::Order,PServShptLine."Order No.",PServShptLine."Order Line No.");
              "Quantity Invoiced" := "Quantity Invoiced" + ServLine."Qty. to Invoice";
              "Qty. Invoiced (Base)" := "Qty. Invoiced (Base)" + ServLine."Qty. to Invoice (Base)";
              if ABS("Quantity Invoiced") > ABS("Quantity Shipped") then
                ERROR(Text014,"Document No.");
              VALIDATE("Qty. to Consume",0);
              InitQtyToInvoice;
              InitOutstanding;
              MODIFY;
            end;

        until ServLine.NEXT = 0;
      ServITRMgt.InsertTrackingSpecification(ServHeader,TempTrackingSpecification);
      ServLine.SETRANGE("Shipment No.");
    END;

    LOCAL PROCEDURE UpdateServLinesOnPostCrMemo@19();
    BEGIN
    END;

    LOCAL PROCEDURE GetShippingAdvice@38() : Boolean;
    VAR
      ServLine2@1000 : Record "Service Line";
    BEGIN
      ServLine2.SETRANGE("Document Type",ServHeader."Document Type");
      ServLine2.SETRANGE("Document No.",ServHeader."No.");
      if ServLine2.FINDSET then
        repeat
          if ServLine2.IsShipment then begin
            if ServLine2."Document Type" <> ServLine2."Document Type"::"Credit Memo" then
              if ServLine2."Quantity (Base)" <>
                 ServLine2."Qty. to Ship (Base)" + ServLine2."Qty. Shipped (Base)"
              then
                exit(false);
          end;
        until ServLine2.NEXT = 0;
      exit(true);
    END;

    LOCAL PROCEDURE RemoveLinesNotSatisfyPosting@1102601001();
    VAR
      ServLine2@1102601000 : Record "Service Line";
    BEGIN
      // Find ServLines not selected to post, and check if they were completely posted
      if ServLine.FINDFIRST then begin
        ServLine2.SETRANGE("Document Type",ServHeader."Document Type");
        ServLine2.SETRANGE("Document No.",ServHeader."No.");
        ServLine2.FINDSET;
        if ServLine.COUNT <> ServLine2.COUNT then
          repeat
            if not ServLine.GET(ServLine2."Document Type",ServLine2."Document No.",ServLine2."Line No.") then
              if ServLine2.Quantity <> ServLine2."Quantity Invoiced" + ServLine2."Quantity Consumed" then
                CloseCondition := false;
          until (ServLine2.NEXT = 0) or (not CloseCondition);
      end;
      // Remove ServLines that do not meet the posting conditions from the selected to post lines
      with ServLine do
        if FINDSET then
          repeat
            if ((Ship and not Consume and not Invoice and (("Qty. to Consume" <> 0) or ("Qty. to Ship" = 0))) or
                ((Ship and Consume) and ("Qty. to Consume" = 0)) or
                ((Ship and Invoice) and (("Qty. to Consume" <> 0) or (("Qty. to Ship" = 0) and ("Qty. to Invoice" = 0)))) or
                ((not Ship and Invoice) and (("Qty. to Invoice" = 0) or
                                             ("Quantity Shipped" - "Quantity Invoiced" - "Quantity Consumed" = 0)))) and
               ("Attached to Line No." = 0)
            then begin
              if Quantity <> "Quantity Invoiced" + "Quantity Consumed" then
                CloseCondition := false;
              if ((Type <> Type::" ") and (Description = '') and ("No." = '')) or
                 ((Type <> Type::" ") and (Description <> '') and ("No." <> ''))
              then begin
                ServLine2 := ServLine;
                if ServLine2.FIND then begin
                  ServLine2.InitOutstanding;
                  ServLine2.InitQtyToShip;
                  ServLine2.MODIFY;
                end;
                DeleteWithAttachedLines;
              end;
            end;
          until NEXT = 0;
    END;

    LOCAL PROCEDURE FinalizeDeleteComments@48();
    BEGIN
      ServiceCommentLine.SETRANGE("No.",ServHeader."No.");
      ServiceCommentLine.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeDeleteServOrdAllocat@50();
    VAR
      ServiceOrderAllocationRec@1000 : Record "Service Order Allocation";
    BEGIN
      if not (ServHeader."Document Type" in [ServHeader."Document Type"::Quote,ServHeader."Document Type"::Order]) then
        exit;
      ServiceOrderAllocationRec.RESET;
      ServiceOrderAllocationRec.SETCURRENTKEY("Document Type","Document No.");
      ServiceOrderAllocationRec.SETRANGE("Document Type",ServHeader."Document Type");
      ServiceOrderAllocationRec.SETRANGE("Document No.",ServHeader."No.");
      ServiceOrderAllocationRec.DELETEALL;
    END;

    LOCAL PROCEDURE FinalizeWarrantyLedgerEntries@54(VAR ServiceHeader@1000 : Record "Service Header";CloseCondition@1002 : Boolean);
    VAR
      WarrantyLedgerEntry@1001 : Record "Warranty Ledger Entry";
    BEGIN
      WarrantyLedgerEntry.RESET;
      WarrantyLedgerEntry.SETCURRENTKEY("Service Order No.","Posting Date","Document No.");
      WarrantyLedgerEntry.SETRANGE("Service Order No.",ServiceHeader."No.");
      if WarrantyLedgerEntry.ISEMPTY then
        exit;
      if CloseCondition then begin
        WarrantyLedgerEntry.MODIFYALL(Open,false);
        exit;
      end;
      if not ServLine.FIND('-') then
        exit;
      repeat
        FillTempWarrantyLedgerEntry(ServLine,WarrantyLedgerEntry);
        ServLineInvoicedConsumedQty := ServLine."Quantity Invoiced" + ServLine."Quantity Consumed";
        UpdateTempWarrantyLedgerEntry;
        UpdWarrantyLedgEntriesFromTemp;
      until ServLine.NEXT = 0;
    END;

    LOCAL PROCEDURE FillTempWarrantyLedgerEntry@56(TempServiceLineParam@1000 : TEMPORARY Record "Service Line";VAR WarrantyLedgerEntryPar@1001 : Record "Warranty Ledger Entry");
    BEGIN
      TempWarrantyLedgerEntry.DELETEALL;
      WarrantyLedgerEntryPar.FIND('-');
      repeat
        if WarrantyLedgerEntryPar."Service Order Line No." = TempServiceLineParam."Line No." then begin
          TempWarrantyLedgerEntry := WarrantyLedgerEntryPar;
          TempWarrantyLedgerEntry.INSERT;
        end;
      until WarrantyLedgerEntryPar.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateTempWarrantyLedgerEntry@53();
    VAR
      Reduction@1002 : Decimal;
    BEGIN
      if not TempWarrantyLedgerEntry.FIND('-') then
        exit;
      repeat
        Reduction := FindMinimumNumber(ServLineInvoicedConsumedQty,TempWarrantyLedgerEntry.Quantity);
        ServLineInvoicedConsumedQty -= Reduction;
        TempWarrantyLedgerEntry.Quantity -= Reduction;
        TempWarrantyLedgerEntry.MODIFY;
      until (TempWarrantyLedgerEntry.NEXT = 0) or (ServLineInvoicedConsumedQty <= 0);
      TempWarrantyLedgerEntry.FIND('-');
      repeat
        TempWarrantyLedgerEntry.Open := TempWarrantyLedgerEntry.Quantity > 0;
        TempWarrantyLedgerEntry.MODIFY;
      until (TempWarrantyLedgerEntry.NEXT = 0);
    END;

    LOCAL PROCEDURE FindMinimumNumber@51(DecimalNumber1@1000 : Decimal;DecimalNumber2@1001 : Decimal) : Decimal;
    BEGIN
      if DecimalNumber1 < DecimalNumber2 then
        exit(DecimalNumber1);
      exit(DecimalNumber2);
    END;

    LOCAL PROCEDURE SortLines@57(VAR ServLine@1000 : Record "Service Line");
    VAR
      GLSetup@1002 : Record "General Ledger Setup";
    BEGIN
      GLSetup.GET;
      if GLSetup.OptimGLEntLockForMultiuserEnv then
        ServLine.SETCURRENTKEY("Document Type","Document No.",Type,"No.")
      else
        ServLine.SETCURRENTKEY("Document Type","Document No.","Line No.");
    END;

    LOCAL PROCEDURE UpdWarrantyLedgEntriesFromTemp@62();
    VAR
      WarrantyLedgerEntryLocal@1000 : Record "Warranty Ledger Entry";
    BEGIN
      if not TempWarrantyLedgerEntry.FIND('-') then
        exit;
      repeat
        WarrantyLedgerEntryLocal.GET(TempWarrantyLedgerEntry."Entry No.");
        if WarrantyLedgerEntryLocal.Open and not TempWarrantyLedgerEntry.Open then begin
          WarrantyLedgerEntryLocal.Open := false;
          WarrantyLedgerEntryLocal.MODIFY;
        end;
      until TempWarrantyLedgerEntry.NEXT = 0;
      TempWarrantyLedgerEntry.DELETEALL;
    END;

    LOCAL PROCEDURE CheckCertificateOfSupplyStatus@88(ServShptHeader@1001 : Record "Service Shipment Header";ServShptLine@1000 : Record "Service Shipment Line");
    VAR
      CertificateOfSupply@1002 : Record "Certificate of Supply";
      VATPostingSetup@1003 : Record "VAT Posting Setup";
    BEGIN
      if ServShptLine.Quantity <> 0 then
        if VATPostingSetup.GET(ServShptHeader."VAT Bus. Posting Group",ServShptLine."VAT Prod. Posting Group") and
           VATPostingSetup."Certificate of Supply Required"
        then begin
          CertificateOfSupply.InitFromService(ServShptHeader);
          CertificateOfSupply.SetRequired(ServShptHeader."No.");
        end
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifyServiceDocNoSeries@31(VAR ServHeader@1000 : Record "Service Header";PServHeader@1001 : Record "Service Header";ModifyHeader@1002 : Boolean);
    BEGIN
    END;

    [External]
    PROCEDURE CollectTrackingSpecification@55(VAR TempTargetTrackingSpecification@1001 : TEMPORARY Record "Tracking Specification");
    BEGIN
      TempTrackingSpecification.RESET;
      TempTargetTrackingSpecification.RESET;
      TempTargetTrackingSpecification.DELETEALL;

      if TempTrackingSpecification.FINDSET then
        repeat
          TempTargetTrackingSpecification := TempTrackingSpecification;
          TempTargetTrackingSpecification.INSERT;
        until TempTrackingSpecification.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

