OBJECT Codeunit 6721 Booking Manager
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetAppointmentConnectionName@11() : Text;
    BEGIN
      exit('BOOKINGAPPOINTMENTS');
    END;

    PROCEDURE GetBookingItems@1(VAR TempBookingItem@1000 : TEMPORARY Record "Booking Item");
    VAR
      BookingItem@1001 : Record "Booking Item";
      BookingSync@1004 : Record "Booking Sync";
      DateFilterCalc@1002 : Codeunit "DateFilter-Calc";
      Now@1003 : DateTime;
    BEGIN
      if not BookingSync.IsSetup then
        exit;

      RegisterAppointmentConnection;

      BookingItem.SETRANGE("Invoice Status",BookingItem."Invoice Status"::draft);
      BookingItem.SETFILTER("Invoice No.",'=''''');
      Now := DateFilterCalc.ConvertToUtcDateTime(CURRENTDATETIME);
      if TryFindAppointments(BookingItem) then
        repeat
          TempBookingItem.INIT;
          BookingItem.CALCFIELDS("Start Date","End Date");
          TempBookingItem.TRANSFERFIELDS(BookingItem);
          with BookingItem do
            if ("Invoice No." = '') and ("Invoice Status" = "Invoice Status"::draft) then
              if GetStartDate < Now then
                TempBookingItem.INSERT;
        until BookingItem.NEXT = 0;
    END;

    PROCEDURE GetBookingMailboxes@2(VAR TempBookingMailbox@1000 : TEMPORARY Record "Booking Mailbox");
    BEGIN
      OnGetBookingMailboxes(TempBookingMailbox);
    END;

    PROCEDURE GetBookingServiceForBooking@10(VAR TempBookingItem@1000 : TEMPORARY Record "Booking Item";VAR TempBookingService@1001 : TEMPORARY Record "Booking Service");
    BEGIN
      OnGetBookingServiceForBooking(TempBookingItem,TempBookingService);
    END;

    PROCEDURE InvoiceBookingItems@3();
    VAR
      TempBookingItem@1000 : TEMPORARY Record "Booking Item";
    BEGIN
      GetBookingItems(TempBookingItem);
      PAGE.RUN(PAGE::"Booking Items",TempBookingItem);
    END;

    PROCEDURE RegisterAppointmentConnection@15();
    BEGIN
      OnRegisterAppointmentConnection;
    END;

    PROCEDURE SetBookingItemInvoiced@9(InvoicedBookingItem@1001 : Record "Invoiced Booking Item");
    BEGIN
      OnSetBookingItemInvoiced(InvoicedBookingItem);
    END;

    PROCEDURE Synchronize@8(VAR BookingItem@1000 : Record "Booking Item");
    BEGIN
      OnSynchronize(BookingItem);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryFindAppointments@5(VAR BookingItem@1000 : Record "Booking Item");
    BEGIN
      BookingItem.FINDSET;
    END;

    LOCAL PROCEDURE CanHandleHeader@21(SalesHeader@1000 : Record "Sales Header") : Boolean;
    BEGIN
      if SalesHeader.ISTEMPORARY then
        exit(false);

      if SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE CanHandleLine@14(SalesLine@1000 : Record "Sales Line") : Boolean;
    BEGIN
      if SalesLine.ISTEMPORARY then
        exit(false);

      if SalesLine."Document Type" <> SalesLine."Document Type"::Invoice then
        exit(false);

      exit(true);
    END;

    [EventSubscriber(Table,36,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesHeader@12(VAR Rec@1000 : Record "Sales Header";VAR xRec@1001 : Record "Sales Header";RunTrigger@1002 : Boolean);
    VAR
      InvoicedBookingItem@1003 : Record "Invoiced Booking Item";
    BEGIN
      if not CanHandleHeader(Rec) then
        exit;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."No.");
      if InvoicedBookingItem.FINDFIRST then
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterInsertSalesLine@20(VAR Rec@1000 : Record "Sales Line";RunTrigger@1001 : Boolean);
    VAR
      InvoicedBookingItem@1002 : Record "Invoiced Booking Item";
    BEGIN
      if not CanHandleLine(Rec) then
        exit;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."Document No.");
      if InvoicedBookingItem.FINDFIRST then
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Table,1638,OnAfterInsertEvent)]
    PROCEDURE OnAfterInsertInvoicedBookingItem@16(VAR Rec@1000 : Record "Invoiced Booking Item";RunTrigger@1001 : Boolean);
    BEGIN
      if Rec.ISTEMPORARY then
        exit;

      if not RunTrigger then
        exit;

      SetBookingItemInvoiced(Rec);
    END;

    [EventSubscriber(Table,37,OnAfterModifyEvent)]
    LOCAL PROCEDURE OnAfterModifySalesLine@18(VAR Rec@1000 : Record "Sales Line";VAR xRec@1001 : Record "Sales Line";RunTrigger@1003 : Boolean);
    VAR
      InvoicedBookingItem@1002 : Record "Invoiced Booking Item";
    BEGIN
      if not CanHandleLine(Rec) then
        exit;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."Document No.");
      if InvoicedBookingItem.FINDFIRST then
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Codeunit,80,OnAfterPostSalesDoc)]
    LOCAL PROCEDURE OnAfterPostSalesDoc@4(VAR SalesHeader@1000 : Record "Sales Header";VAR GenJnlPostLine@1002 : Codeunit "Gen. Jnl.-Post Line";SalesShptHdrNo@1003 : Code[20];RetRcpHdrNo@1004 : Code[20];SalesInvHdrNo@1005 : Code[20];SalesCrMemoHdrNo@1006 : Code[20]);
    VAR
      InvoicedBookingItem@1007 : Record "Invoiced Booking Item";
    BEGIN
      if not CanHandleHeader(SalesHeader) then
        exit;

      InvoicedBookingItem.SETRANGE("Document No.",SalesHeader."No.");
      if InvoicedBookingItem.ISEMPTY then
        exit;

      InvoicedBookingItem.MODIFYALL(Posted,true);
      InvoicedBookingItem.MODIFYALL("Document No.",SalesInvHdrNo);
      InvoicedBookingItem.SETRANGE("Document No.",SalesInvHdrNo);
      if InvoicedBookingItem.FINDFIRST then
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [EventSubscriber(Table,36,OnBeforeDeleteEvent)]
    LOCAL PROCEDURE OnDeleteSalesInvoice@7(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    VAR
      InvoicedBookingItem@1002 : Record "Invoiced Booking Item";
    BEGIN
      if not (RunTrigger and CanHandleHeader(Rec)) then
        exit;

      InvoicedBookingItem.SETRANGE("Document No.",Rec."No.");
      if InvoicedBookingItem.FINDFIRST then
        SetBookingItemInvoiced(InvoicedBookingItem);
    END;

    [Integration]
    LOCAL PROCEDURE OnGetBookingMailboxes@6(VAR TempBookingMailbox@1000 : TEMPORARY Record "Booking Mailbox");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnGetBookingServiceForBooking@19(VAR TempBookingItem@1000 : TEMPORARY Record "Booking Item";VAR TempBookingService@1001 : TEMPORARY Record "Booking Service");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnRegisterAppointmentConnection@17();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSetBookingItemInvoiced@22(VAR InvoicedBookingItem@1000 : Record "Invoiced Booking Item");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnSynchronize@13(VAR BookingItem@1000 : Record "Booking Item");
    BEGIN
    END;

    BEGIN
    END.
  }
}

