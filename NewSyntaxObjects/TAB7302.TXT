OBJECT Table 7302 Bin Content
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if Default then
                 if WMSManagement.CheckDefaultBin(
                      "Item No.","Variant Code","Location Code","Bin Code")
                 then
                   ERROR(Text010,"Location Code","Item No.","Variant Code");

               GetLocation("Location Code");
               if Location."Directed Put-away and Pick" then
                 TESTFIELD("Zone Code")
               else
                 TESTFIELD("Zone Code",'');

               if "Min. Qty." > "Max. Qty." then
                 ERROR(
                   Text005,
                   FIELDCAPTION("Max. Qty."),"Max. Qty.",
                   FIELDCAPTION("Min. Qty."),"Min. Qty.");
             END;

    OnModify=BEGIN
               if Default then
                 if WMSManagement.CheckDefaultBin(
                      "Item No.","Variant Code","Location Code","Bin Code")
                 then
                   ERROR(Text010,"Location Code","Item No.","Variant Code");

               GetLocation("Location Code");
               if Location."Directed Put-away and Pick" then
                 TESTFIELD("Zone Code")
               else
                 TESTFIELD("Zone Code",'');

               if "Min. Qty." > "Max. Qty." then
                 ERROR(
                   Text005,
                   FIELDCAPTION("Max. Qty."),"Max. Qty.",
                   FIELDCAPTION("Min. Qty."),"Min. Qty.");
             END;

    OnDelete=VAR
               BinContent@1000 : Record "Bin Content";
             BEGIN
               BinContent := Rec;
               BinContent.CALCFIELDS(
                 "Quantity (Base)","Pick Quantity (Base)","Negative Adjmt. Qty. (Base)",
                 "Put-away Quantity (Base)","Positive Adjmt. Qty. (Base)");
               if BinContent."Quantity (Base)" <> 0 then
                 ERROR(Text000,TABLECAPTION);

               if (BinContent."Pick Quantity (Base)" <> 0) or (BinContent."Negative Adjmt. Qty. (Base)" <> 0) or
                  (BinContent."Put-away Quantity (Base)" <> 0) or (BinContent."Positive Adjmt. Qty. (Base)" <> 0)
               then
                 ERROR(Text001,TABLECAPTION);
             END;

    CaptionML=ENU=Bin Content;
    LookupPageID="Bin Contents List";
    DrillDownPageID="Bin Contents List";
  }
  FIELDS
  {
    { 1   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                if (CurrFieldNo <> 0) and ("Location Code" <> xRec."Location Code") then begin
                                                                  CheckManualChange(FIELDCAPTION("Location Code"));
                                                                  "Bin Code" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   NotBlank=true }
    { 2   ;   ;Zone Code           ;Code10        ;TableRelation=Zone.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if (CurrFieldNo <> 0) and ("Zone Code" <> xRec."Zone Code") then
                                                                  CheckManualChange(FIELDCAPTION("Zone Code"));
                                                              END;

                                                   CaptionML=ENU=Zone Code;
                                                   NotBlank=true;
                                                   Editable=false }
    { 3   ;   ;Bin Code            ;Code20        ;TableRelation=IF ("Zone Code"=FILTER('')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"))
                                                                 ELSE IF ("Zone Code"=FILTER(<>'')) Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                    "Zone Code"=FIELD("Zone Code"));
                                                   OnValidate=BEGIN
                                                                if (CurrFieldNo <> 0) and ("Bin Code" <> xRec."Bin Code") then begin
                                                                  CheckManualChange(FIELDCAPTION("Bin Code"));
                                                                  GetBin("Location Code","Bin Code");
                                                                  Dedicated := Bin.Dedicated;
                                                                  "Bin Type Code" := Bin."Bin Type Code";
                                                                  "Warehouse Class Code" := Bin."Warehouse Class Code";
                                                                  "Bin Ranking" := Bin."Bin Ranking";
                                                                  "Block Movement" := Bin."Block Movement";
                                                                  "Zone Code" := Bin."Zone Code";
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Bin Code;
                                                   NotBlank=true }
    { 4   ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                if (CurrFieldNo <> 0) and ("Item No." <> xRec."Item No.") then begin
                                                                  CheckManualChange(FIELDCAPTION("Item No."));
                                                                  "Variant Code" := '';
                                                                end;

                                                                if ("Item No." <> xRec."Item No.") and ("Item No." <> '') then begin
                                                                  GetItem("Item No.");
                                                                  VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Item No.;
                                                   NotBlank=true }
    { 10  ;   ;Bin Type Code       ;Code10        ;TableRelation="Bin Type";
                                                   CaptionML=ENU=Bin Type Code;
                                                   Editable=false }
    { 11  ;   ;Warehouse Class Code;Code10        ;TableRelation="Warehouse Class";
                                                   CaptionML=ENU=Warehouse Class Code;
                                                   Editable=false }
    { 12  ;   ;Block Movement      ;Option        ;CaptionML=ENU=Block Movement;
                                                   OptionCaptionML=ENU=" ,Inbound,Outbound,All";
                                                   OptionString=" ",Inbound,Outbound,All }
    { 15  ;   ;Min. Qty.           ;Decimal       ;CaptionML=ENU=Min. Qty.;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Max. Qty.           ;Decimal       ;OnValidate=BEGIN
                                                                if "Max. Qty." <> xRec."Max. Qty." then
                                                                  CheckBinMaxCubageAndWeight;
                                                              END;

                                                   CaptionML=ENU=Max. Qty.;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Bin Ranking         ;Integer       ;CaptionML=ENU=Bin Ranking;
                                                   Editable=false }
    { 26  ;   ;Quantity            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Entry".Quantity WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                     "Bin Code"=FIELD("Bin Code"),
                                                                                                     "Item No."=FIELD("Item No."),
                                                                                                     "Variant Code"=FIELD("Variant Code"),
                                                                                                     "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                     "Lot No."=FIELD("Lot No. Filter"),
                                                                                                     "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 29  ;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                       "Bin Code"=FIELD("Bin Code"),
                                                                                                                       "Item No."=FIELD("Item No."),
                                                                                                                       "Variant Code"=FIELD("Variant Code"),
                                                                                                                       "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                       "Action Type"=CONST(Take),
                                                                                                                       "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                       "Serial No."=FIELD("Serial No. Filter"),
                                                                                                                       "Assemble to Order"=CONST(false)));
                                                   CaptionML=ENU=Pick Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 30  ;   ;Neg. Adjmt. Qty.    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Journal Line"."Qty. (Absolute)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                     "From Bin Code"=FIELD("Bin Code"),
                                                                                                                     "Item No."=FIELD("Item No."),
                                                                                                                     "Variant Code"=FIELD("Variant Code"),
                                                                                                                     "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                     "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                     "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Neg. Adjmt. Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Put-away Qty.       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                       "Bin Code"=FIELD("Bin Code"),
                                                                                                                       "Item No."=FIELD("Item No."),
                                                                                                                       "Variant Code"=FIELD("Variant Code"),
                                                                                                                       "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                       "Action Type"=CONST(Place),
                                                                                                                       "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                       "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Put-away Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 32  ;   ;Pos. Adjmt. Qty.    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Journal Line"."Qty. (Absolute)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                     "To Bin Code"=FIELD("Bin Code"),
                                                                                                                     "Item No."=FIELD("Item No."),
                                                                                                                     "Variant Code"=FIELD("Variant Code"),
                                                                                                                     "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                     "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                     "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Pos. Adjmt. Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 37  ;   ;Fixed               ;Boolean       ;CaptionML=ENU=Fixed }
    { 40  ;   ;Cross-Dock Bin      ;Boolean       ;CaptionML=ENU=Cross-Dock Bin }
    { 41  ;   ;Default             ;Boolean       ;OnValidate=BEGIN
                                                                if (xRec.Default <> Default) and Default then
                                                                  if WMSManagement.CheckDefaultBin(
                                                                       "Item No.","Variant Code","Location Code","Bin Code")
                                                                  then
                                                                    ERROR(Text010,"Location Code","Item No.","Variant Code");
                                                              END;

                                                   CaptionML=ENU=Default }
    { 50  ;   ;Quantity (Base)     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Entry"."Qty. (Base)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                          "Bin Code"=FIELD("Bin Code"),
                                                                                                          "Item No."=FIELD("Item No."),
                                                                                                          "Variant Code"=FIELD("Variant Code"),
                                                                                                          "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                          "Lot No."=FIELD("Lot No. Filter"),
                                                                                                          "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 51  ;   ;Pick Quantity (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                              "Bin Code"=FIELD("Bin Code"),
                                                                                                                              "Item No."=FIELD("Item No."),
                                                                                                                              "Variant Code"=FIELD("Variant Code"),
                                                                                                                              "Unit of Measure Code"=FIELD("Unit of Measure Filter"),
                                                                                                                              "Action Type"=CONST(Take),
                                                                                                                              "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                              "Serial No."=FIELD("Serial No. Filter"),
                                                                                                                              "Assemble to Order"=CONST(false)));
                                                   CaptionML=ENU=Pick Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 52  ;   ;Negative Adjmt. Qty. (Base);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Journal Line"."Qty. (Absolute, Base)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                           "From Bin Code"=FIELD("Bin Code"),
                                                                                                                           "Item No."=FIELD("Item No."),
                                                                                                                           "Variant Code"=FIELD("Variant Code"),
                                                                                                                           "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                           "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                           "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Negative Adjmt. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 53  ;   ;Put-away Quantity (Base);Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                              "Bin Code"=FIELD("Bin Code"),
                                                                                                                              "Item No."=FIELD("Item No."),
                                                                                                                              "Variant Code"=FIELD("Variant Code"),
                                                                                                                              "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                              "Action Type"=CONST(Place),
                                                                                                                              "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                              "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Put-away Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 54  ;   ;Positive Adjmt. Qty. (Base);Decimal;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Journal Line"."Qty. (Absolute, Base)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                           "To Bin Code"=FIELD("Bin Code"),
                                                                                                                           "Item No."=FIELD("Item No."),
                                                                                                                           "Variant Code"=FIELD("Variant Code"),
                                                                                                                           "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                           "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                           "Serial No."=FIELD("Serial No. Filter")));
                                                   CaptionML=ENU=Positive Adjmt. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 55  ;   ;ATO Components Pick Qty.;Decimal   ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                       "Bin Code"=FIELD("Bin Code"),
                                                                                                                       "Item No."=FIELD("Item No."),
                                                                                                                       "Variant Code"=FIELD("Variant Code"),
                                                                                                                       "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                       "Action Type"=CONST(Take),
                                                                                                                       "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                       "Serial No."=FIELD("Serial No. Filter"),
                                                                                                                       "Assemble to Order"=CONST(true),
                                                                                                                       "ATO Component"=CONST(true)));
                                                   CaptionML=ENU=ATO Components Pick Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 56  ;   ;ATO Components Pick Qty (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                              "Bin Code"=FIELD("Bin Code"),
                                                                                                                              "Item No."=FIELD("Item No."),
                                                                                                                              "Variant Code"=FIELD("Variant Code"),
                                                                                                                              "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                              "Action Type"=CONST(Take),
                                                                                                                              "Lot No."=FIELD("Lot No. Filter"),
                                                                                                                              "Serial No."=FIELD("Serial No. Filter"),
                                                                                                                              "Assemble to Order"=CONST(true),
                                                                                                                              "ATO Component"=CONST(true)));
                                                   CaptionML=ENU=ATO Components Pick Qty (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                if (CurrFieldNo <> 0) and ("Variant Code" <> xRec."Variant Code") then
                                                                  CheckManualChange(FIELDCAPTION("Variant Code"));
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=BEGIN
                                                                if (CurrFieldNo <> 0) and ("Unit of Measure Code" <> xRec."Unit of Measure Code") then
                                                                  CheckManualChange(FIELDCAPTION("Unit of Measure Code"));

                                                                GetItem("Item No.");
                                                                "Qty. per Unit of Measure" :=
                                                                  UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code;
                                                   NotBlank=true }
    { 6500;   ;Lot No. Filter      ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Lot No. Filter }
    { 6501;   ;Serial No. Filter   ;Code20        ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Serial No. Filter }
    { 6502;   ;Dedicated           ;Boolean       ;CaptionML=ENU=Dedicated;
                                                   Editable=false }
    { 6503;   ;Unit of Measure Filter;Code10      ;FieldClass=FlowFilter;
                                                   TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Unit of Measure Filter }
  }
  KEYS
  {
    {    ;"Location Code","Bin Code","Item No.","Variant Code","Unit of Measure Code";
                                                   Clustered=true }
    {    ;"Bin Type Code"                          }
    {    ;"Location Code","Item No.","Variant Code","Cross-Dock Bin","Qty. per Unit of Measure","Bin Ranking" }
    {    ;"Location Code","Warehouse Class Code",Fixed,"Bin Ranking" }
    {    ;"Location Code","Item No.","Variant Code","Warehouse Class Code",Fixed,"Bin Ranking" }
    {    ;"Item No."                               }
    {    ;Default,"Location Code","Item No.","Variant Code","Bin Code" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Item@1007 : Record Item;
      Location@1006 : Record Location;
      Bin@1000 : Record Bin;
      Text000@1001 : TextConst 'ENU=You cannot delete this %1, because the %1 contains items.';
      Text001@1002 : TextConst 'ENU=You cannot delete this %1, because warehouse document lines have items allocated to this %1.';
      Text002@1003 : TextConst 'ENU=The total cubage %1 of the %2 for the %5 exceeds the %3 %4 of the %5.\Do you still want enter this %2?';
      Text003@1005 : TextConst 'ENU=The total weight %1 of the %2 for the %5 exceeds the %3 %4 of the %5.\Do you still want enter this %2?';
      Text004@1004 : TextConst 'ENU=Cancelled.';
      Text005@1008 : TextConst 'ENU=The %1 %2 must not be less than the %3 %4.';
      Text006@1009 : TextConst 'ENU=available must not be less than %1';
      UOMMgt@1010 : Codeunit "Unit of Measure Management";
      Text007@1012 : TextConst 'ENU=You cannot modify the %1, because the %2 contains items.';
      Text008@1011 : TextConst 'ENU=You cannot modify the %1, because warehouse document lines have items allocated to this %2.';
      Text009@1013 : TextConst 'ENU=You must first set up user %1 as a warehouse employee.';
      Text010@1014 : TextConst 'ENU=There is already a default bin content for location code %1, item no. %2 and variant code %3.';
      WMSManagement@1015 : Codeunit "WMS Management";
      StockProposal@1016 : Boolean;

    [External]
    PROCEDURE SetUpNewLine@8();
    BEGIN
      GetBin("Location Code","Bin Code");
      Dedicated := Bin.Dedicated;
      "Bin Type Code" := Bin."Bin Type Code";
      "Warehouse Class Code" := Bin."Warehouse Class Code";
      "Bin Ranking" := Bin."Bin Ranking";
      "Block Movement" := Bin."Block Movement";
      "Zone Code" := Bin."Zone Code";
      "Cross-Dock Bin" := Bin."Cross-Dock Bin";
    END;

    LOCAL PROCEDURE CheckManualChange@6(CaptionField@1000 : Text[80]);
    BEGIN
      xRec.CALCFIELDS(
        "Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)",
        "Negative Adjmt. Qty. (Base)","Pick Quantity (Base)");
      if xRec."Quantity (Base)" <> 0 then
        ERROR(Text007,CaptionField,TABLECAPTION);
      if (xRec."Positive Adjmt. Qty. (Base)" <> 0) or (xRec."Put-away Quantity (Base)" <> 0) or
         (xRec."Negative Adjmt. Qty. (Base)" <> 0) or (xRec."Pick Quantity (Base)" <> 0)
      then
        ERROR(Text008,CaptionField,TABLECAPTION);
    END;

    [External]
    PROCEDURE CalcQtyAvailToTake@15(ExcludeQtyBase@1000 : Decimal) : Decimal;
    BEGIN
      SetFilterOnUnitOfMeasure;
      CALCFIELDS("Quantity (Base)","Negative Adjmt. Qty. (Base)","Pick Quantity (Base)","ATO Components Pick Qty (Base)");
      exit(
        "Quantity (Base)" -
        (("Pick Quantity (Base)" + "ATO Components Pick Qty (Base)") - ExcludeQtyBase + "Negative Adjmt. Qty. (Base)"));
    END;

    [External]
    PROCEDURE CalcQtyAvailToTakeUOM@14() : Decimal;
    BEGIN
      GetItem("Item No.");
      if Item."No." <> '' then
        exit(ROUND(CalcQtyAvailToTake(0) / UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"),0.00001));
    END;

    LOCAL PROCEDURE CalcTotalQtyAvailToTake@26(ExcludeQtyBase@1000 : Decimal) : Decimal;
    VAR
      TotalQtyBase@1001 : Decimal;
      TotalNegativeAdjmtQtyBase@1002 : Decimal;
      TotalATOComponentsPickQtyBase@1003 : Decimal;
    BEGIN
      TotalQtyBase := CalcTotalQtyBase;
      TotalNegativeAdjmtQtyBase := CalcTotalNegativeAdjmtQtyBase;
      TotalATOComponentsPickQtyBase := CalcTotalATOComponentsPickQtyBase;
      SetFilterOnUnitOfMeasure;
      CALCFIELDS("Pick Quantity (Base)");
      exit(
        TotalQtyBase -
        ("Pick Quantity (Base)" + TotalATOComponentsPickQtyBase - ExcludeQtyBase + TotalNegativeAdjmtQtyBase));
    END;

    [External]
    PROCEDURE CalcQtyAvailToPick@2(ExcludeQtyBase@1000 : Decimal) : Decimal;
    BEGIN
      if (not Dedicated) and (not ("Block Movement" in ["Block Movement"::Outbound,"Block Movement"::All])) then
        exit(CalcQtyAvailToTake(ExcludeQtyBase) - CalcQtyWithBlockedItemTracking);
    END;

    [External]
    PROCEDURE CalcQtyWithBlockedItemTracking@19() : Decimal;
    VAR
      SerialNoInfo@1005 : Record "Serial No. Information";
      LotNoInfo@1004 : Record "Lot No. Information";
      XBinContent@1003 : Record "Bin Content";
      QtySNBlocked@1002 : Decimal;
      QtyLNBlocked@1001 : Decimal;
      QtySNAndLNBlocked@1000 : Decimal;
      SNGiven@1006 : Boolean;
      LNGiven@1007 : Boolean;
      NoITGiven@1008 : Boolean;
    BEGIN
      SerialNoInfo.SETRANGE("Item No.","Item No.");
      SerialNoInfo.SETRANGE("Variant Code","Variant Code");
      COPYFILTER("Serial No. Filter",SerialNoInfo."Serial No.");
      SerialNoInfo.SETRANGE(Blocked,true);

      LotNoInfo.SETRANGE("Item No.","Item No.");
      LotNoInfo.SETRANGE("Variant Code","Variant Code");
      COPYFILTER("Lot No. Filter",LotNoInfo."Lot No.");
      LotNoInfo.SETRANGE(Blocked,true);

      if SerialNoInfo.ISEMPTY and LotNoInfo.ISEMPTY then
        exit;

      SNGiven := not (GETFILTER("Serial No. Filter") = '');
      LNGiven := not (GETFILTER("Lot No. Filter") = '');

      XBinContent.COPY(Rec);
      SETRANGE("Serial No. Filter");
      SETRANGE("Lot No. Filter");

      NoITGiven := not SNGiven and not LNGiven;
      if SNGiven or NoITGiven then
        if SerialNoInfo.FINDSET then
          repeat
            SETRANGE("Serial No. Filter",SerialNoInfo."Serial No.");
            CALCFIELDS("Quantity (Base)");
            QtySNBlocked += "Quantity (Base)";
            SETRANGE("Serial No. Filter");
          until SerialNoInfo.NEXT = 0;

      if LNGiven or NoITGiven then
        if LotNoInfo.FINDSET then
          repeat
            SETRANGE("Lot No. Filter",LotNoInfo."Lot No.");
            CALCFIELDS("Quantity (Base)");
            QtyLNBlocked += "Quantity (Base)";
            SETRANGE("Lot No. Filter");
          until LotNoInfo.NEXT = 0;

      if (SNGiven and LNGiven) or NoITGiven then
        if SerialNoInfo.FINDSET then
          repeat
            if LotNoInfo.FINDSET then
              repeat
                SETRANGE("Serial No. Filter",SerialNoInfo."Serial No.");
                SETRANGE("Lot No. Filter",LotNoInfo."Lot No.");
                CALCFIELDS("Quantity (Base)");
                QtySNAndLNBlocked += "Quantity (Base)";
              until LotNoInfo.NEXT = 0;
          until SerialNoInfo.NEXT = 0;

      COPY(XBinContent);
      exit(QtySNBlocked + QtyLNBlocked - QtySNAndLNBlocked);
    END;

    LOCAL PROCEDURE CalcQtyAvailToPutAway@3(ExcludeQtyBase@1000 : Decimal) : Decimal;
    BEGIN
      CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
      exit(
        ROUND("Max. Qty." * "Qty. per Unit of Measure",0.00001) -
        ("Quantity (Base)" + "Put-away Quantity (Base)" - ExcludeQtyBase + "Positive Adjmt. Qty. (Base)"));
    END;

    [External]
    PROCEDURE NeedToReplenish@16(ExcludeQtyBase@1000 : Decimal) : Boolean;
    BEGIN
      CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
      exit(
        ROUND("Min. Qty." * "Qty. per Unit of Measure",0.00001) >
        "Quantity (Base)" +
        ABS("Put-away Quantity (Base)" - ExcludeQtyBase + "Positive Adjmt. Qty. (Base)"));
    END;

    [External]
    PROCEDURE CalcQtyToReplenish@24(ExcludeQtyBase@1000 : Decimal) : Decimal;
    BEGIN
      CALCFIELDS("Quantity (Base)","Positive Adjmt. Qty. (Base)","Put-away Quantity (Base)");
      exit(
        ROUND("Max. Qty." * "Qty. per Unit of Measure",0.00001) -
        ("Quantity (Base)" + "Put-away Quantity (Base)" - ExcludeQtyBase + "Positive Adjmt. Qty. (Base)"));
    END;

    LOCAL PROCEDURE CheckBinMaxCubageAndWeight@4();
    VAR
      BinContent@1000 : Record "Bin Content";
      WMSMgt@1001 : Codeunit "WMS Management";
      TotalCubage@1002 : Decimal;
      TotalWeight@1003 : Decimal;
      Cubage@1005 : Decimal;
      Weight@1004 : Decimal;
    BEGIN
      GetBin("Location Code","Bin Code");
      if (Bin."Maximum Cubage" <> 0) or (Bin."Maximum Weight" <> 0) then begin
        BinContent.SETRANGE("Location Code","Location Code");
        BinContent.SETRANGE("Bin Code","Bin Code");
        if BinContent.FIND('-') then
          repeat
            if (BinContent."Location Code" = "Location Code") and
               (BinContent."Bin Code" = "Bin Code") and
               (BinContent."Item No." = "Item No.") and
               (BinContent."Variant Code" = "Variant Code") and
               (BinContent."Unit of Measure Code" = "Unit of Measure Code")
            then
              WMSMgt.CalcCubageAndWeight(
                "Item No.","Unit of Measure Code","Max. Qty.",Cubage,Weight)
            else
              WMSMgt.CalcCubageAndWeight(
                BinContent."Item No.",BinContent."Unit of Measure Code",
                BinContent."Max. Qty.",Cubage,Weight);
            TotalCubage := TotalCubage + Cubage;
            TotalWeight := TotalWeight + Weight;
          until BinContent.NEXT = 0;

        if (Bin."Maximum Cubage" > 0) and (Bin."Maximum Cubage" - TotalCubage < 0) then
          if not CONFIRM(
               Text002,
               false,TotalCubage,FIELDCAPTION("Max. Qty."),
               Bin.FIELDCAPTION("Maximum Cubage"),Bin."Maximum Cubage",Bin.TABLECAPTION)
          then
            ERROR(Text004);
        if (Bin."Maximum Weight" > 0) and (Bin."Maximum Weight" - TotalWeight < 0) then
          if not CONFIRM(
               Text003,
               false,TotalWeight,FIELDCAPTION("Max. Qty."),
               Bin.FIELDCAPTION("Maximum Weight"),Bin."Maximum Weight",Bin.TABLECAPTION)
          then
            ERROR(Text004);
      end;
    END;

    [External]
    PROCEDURE CheckDecreaseBinContent@21(Qty@1004 : Decimal;VAR QtyBase@1009 : Decimal;DecreaseQtyBase@1001 : Decimal);
    VAR
      WhseActivLine@1003 : Record "Warehouse Activity Line";
      QtyAvailToPickBase@1000 : Decimal;
      QtyAvailToPick@1002 : Decimal;
    BEGIN
      if "Block Movement" in ["Block Movement"::Outbound,"Block Movement"::All] then
        FIELDERROR("Block Movement");

      GetLocation("Location Code");
      if "Bin Code" = Location."Adjustment Bin Code" then
        exit;

      WhseActivLine.SETCURRENTKEY(
        "Item No.","Bin Code","Location Code","Action Type",
        "Variant Code","Unit of Measure Code","Breakbulk No.",
        "Activity Type","Lot No.","Serial No.","Original Breakbulk");
      WhseActivLine.SETRANGE("Item No.","Item No.");
      WhseActivLine.SETRANGE("Bin Code","Bin Code");
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
      WhseActivLine.SETRANGE("Variant Code","Variant Code");

      if Location."Allow Breakbulk" then begin
        WhseActivLine.SETRANGE("Action Type",WhseActivLine."Action Type"::Take);
        WhseActivLine.SETRANGE("Original Breakbulk",true);
        WhseActivLine.SETRANGE("Breakbulk No.",0);
        WhseActivLine.CALCSUMS("Qty. (Base)");
        DecreaseQtyBase := DecreaseQtyBase + WhseActivLine."Qty. (Base)";
      end;

      QtyAvailToPickBase := CalcTotalQtyAvailToTake(DecreaseQtyBase);
      if QtyAvailToPickBase < QtyBase then begin
        GetItem("Item No.");
        QtyAvailToPick := ROUND(QtyAvailToPickBase / UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"),0.00001);
        if QtyAvailToPick = Qty then
          QtyBase := QtyAvailToPickBase // rounding issue- qty is same, but not qty (base)
        else
          FIELDERROR("Quantity (Base)",STRSUBSTNO(Text006,ABS(QtyBase)));
      end;
    END;

    [External]
    PROCEDURE CheckIncreaseBinContent@22(QtyBase@1005 : Decimal;DeductQtyBase@1011 : Decimal;DeductCubage@1009 : Decimal;DeductWeight@1008 : Decimal;PutawayCubage@1007 : Decimal;PutawayWeight@1006 : Decimal;CalledbyPosting@1010 : Boolean;IgnoreError@1012 : Boolean) : Boolean;
    VAR
      WhseActivLine@1001 : Record "Warehouse Activity Line";
      WMSMgt@1002 : Codeunit "WMS Management";
      QtyAvailToPutAwayBase@1000 : Decimal;
      AvailableWeight@1003 : Decimal;
      AvailableCubage@1004 : Decimal;
    BEGIN
      if "Block Movement" in ["Block Movement"::Inbound,"Block Movement"::All] then
        if not StockProposal then
          FIELDERROR("Block Movement");

      GetLocation("Location Code");
      if "Bin Code" = Location."Adjustment Bin Code" then
        exit;

      if not CheckWhseClass(IgnoreError) then
        exit(false);

      if QtyBase <> 0 then
        if Location."Bin Capacity Policy" in
           [Location."Bin Capacity Policy"::"Allow More Than Max. Capacity",
            Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap."]
        then
          if "Max. Qty." <> 0 then begin
            QtyAvailToPutAwayBase := CalcQtyAvailToPutAway(DeductQtyBase);
            WMSMgt.CheckPutAwayAvailability(
              "Bin Code",WhseActivLine.FIELDCAPTION("Qty. (Base)"),TABLECAPTION,QtyBase,QtyAvailToPutAwayBase,
              (Location."Bin Capacity Policy" =
               Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") and CalledbyPosting);
          end else begin
            GetBin("Location Code","Bin Code");
            if (Bin."Maximum Cubage" <> 0) or (Bin."Maximum Weight" <> 0) then begin
              Bin.CalcCubageAndWeight(AvailableCubage,AvailableWeight,CalledbyPosting);
              if not CalledbyPosting then begin
                AvailableCubage := AvailableCubage + DeductCubage;
                AvailableWeight := AvailableWeight + DeductWeight;
              end;

              if (Bin."Maximum Cubage" <> 0) and (PutawayCubage > AvailableCubage) then
                WMSMgt.CheckPutAwayAvailability(
                  "Bin Code",WhseActivLine.FIELDCAPTION(Cubage),Bin.TABLECAPTION,PutawayCubage,AvailableCubage,
                  (Location."Bin Capacity Policy" =
                   Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") and CalledbyPosting);

              if (Bin."Maximum Weight" <> 0) and (PutawayWeight > AvailableWeight) then
                WMSMgt.CheckPutAwayAvailability(
                  "Bin Code",WhseActivLine.FIELDCAPTION(Weight),Bin.TABLECAPTION,PutawayWeight,AvailableWeight,
                  (Location."Bin Capacity Policy" =
                   Location."Bin Capacity Policy"::"Prohibit More Than Max. Cap.") and CalledbyPosting);
            end;
          end;
      exit(true);
    END;

    [External]
    PROCEDURE CheckWhseClass@5(IgnoreError@1000 : Boolean) : Boolean;
    BEGIN
      GetItem("Item No.");
      if IgnoreError then
        exit("Warehouse Class Code" = Item."Warehouse Class Code");
      TESTFIELD("Warehouse Class Code",Item."Warehouse Class Code");
      exit(true);
    END;

    [External]
    PROCEDURE ShowBinContents@7(LocationCode@1002 : Code[10];ItemNo@1003 : Code[20];VariantCode@1004 : Code[10];BinCode@1005 : Code[20]);
    VAR
      BinContent@1000 : Record "Bin Content";
      BinContentLookup@1001 : Page "Bin Contents List";
    BEGIN
      if BinCode <> '' then
        BinContent.SETRANGE("Bin Code",BinCode)
      else
        BinContent.SETCURRENTKEY("Location Code","Item No.","Variant Code");
      BinContent.SETRANGE("Item No.",ItemNo);
      BinContent.SETRANGE("Variant Code",VariantCode);
      BinContentLookup.SETTABLEVIEW(BinContent);
      BinContentLookup.Initialize(LocationCode);
      BinContentLookup.RUNMODAL;
      CLEAR(BinContentLookup);
    END;

    LOCAL PROCEDURE GetLocation@10(LocationCode@1000 : Code[10]);
    BEGIN
      if Location.Code <> LocationCode then
        Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetBin@1(LocationCode@1000 : Code[10];BinCode@1002 : Code[20]);
    BEGIN
      if (LocationCode = '') or (BinCode = '') then
        Bin.INIT
      else
        if (Bin."Location Code" <> LocationCode) or
           (Bin.Code <> BinCode)
        then
          Bin.GET(LocationCode,BinCode);
    END;

    LOCAL PROCEDURE GetItem@18(ItemNo@1000 : Code[20]);
    BEGIN
      if Item."No." = ItemNo then
        exit;

      if ItemNo = '' then
        Item.INIT
      else
        Item.GET(ItemNo);
    END;

    [External]
    PROCEDURE GetItemDescr@20(ItemNo@1000 : Code[20];VariantCode@1005 : Code[10];VAR ItemDescription@1001 : Text[50]);
    VAR
      Item@1002 : Record Item;
      ItemVariant@1004 : Record "Item Variant";
      OldItemNo@1003 : Code[20];
    BEGIN
      ItemDescription := '';
      if ItemNo <> OldItemNo then begin
        ItemDescription := '';
        if ItemNo <> '' then begin
          if Item.GET(ItemNo) then
            ItemDescription := Item.Description;
          if VariantCode <> '' then
            if ItemVariant.GET(ItemNo,VariantCode) then
              ItemDescription := ItemVariant.Description;
        end;
        OldItemNo := ItemNo;
      end;
    END;

    [External]
    PROCEDURE GetWhseLocation@9(VAR CurrentLocationCode@1002 : Code[10];VAR CurrentZoneCode@1004 : Code[10]);
    VAR
      Location@1001 : Record Location;
      WhseEmployee@1003 : Record "Warehouse Employee";
      WMSMgt@1000 : Codeunit "WMS Management";
    BEGIN
      if USERID <> '' then begin
        WhseEmployee.SETRANGE("User ID",USERID);
        if WhseEmployee.ISEMPTY then
          ERROR(Text009,USERID);
        if CurrentLocationCode <> '' then begin
          if not Location.GET(CurrentLocationCode) then begin
            CurrentLocationCode := '';
            CurrentZoneCode := '';
          end else
            if not Location."Bin Mandatory" then begin
              CurrentLocationCode := '';
              CurrentZoneCode := '';
            end else begin
              WhseEmployee.SETRANGE("Location Code",CurrentLocationCode);
              if WhseEmployee.ISEMPTY then begin
                CurrentLocationCode := '';
                CurrentZoneCode := '';
              end;
            end
            ;
          if CurrentLocationCode = '' then begin
            CurrentLocationCode := WMSMgt.GetDefaultLocation;
            if CurrentLocationCode <> '' then begin
              Location.GET(CurrentLocationCode);
              if not Location."Bin Mandatory" then
                CurrentLocationCode := '';
            end;
          end;
        end;
      end;
      FILTERGROUP := 2;
      if CurrentLocationCode <> '' then
        SETRANGE("Location Code",CurrentLocationCode)
      else
        SETRANGE("Location Code");
      if CurrentZoneCode <> '' then
        SETRANGE("Zone Code",CurrentZoneCode)
      else
        SETRANGE("Zone Code");
      FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE CalcQtyonAdjmtBin@11() : Decimal;
    VAR
      WhseEntry@1000 : Record "Warehouse Entry";
    BEGIN
      GetLocation("Location Code");
      WhseEntry.SETCURRENTKEY(
        "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code");
      WhseEntry.SETRANGE("Item No.","Item No.");
      WhseEntry.SETRANGE("Bin Code",Location."Adjustment Bin Code");
      WhseEntry.SETRANGE("Location Code","Location Code");
      WhseEntry.SETRANGE("Variant Code","Variant Code");
      WhseEntry.SETRANGE("Unit of Measure Code","Unit of Measure Code");
      WhseEntry.CALCSUMS("Qty. (Base)");
      exit(WhseEntry."Qty. (Base)");
    END;

    [External]
    PROCEDURE CalcQtyBase@49() : Decimal;
    VAR
      WhseActivLine@1004 : Record "Warehouse Activity Line";
      WhseJnlLine@1005 : Record "Warehouse Journal Line";
    BEGIN
      WhseActivLine.SETCURRENTKEY(
        "Item No.","Bin Code","Location Code",
        "Action Type","Variant Code","Unit of Measure Code",
        "Breakbulk No.","Activity Type","Lot No.","Serial No.");
      WhseActivLine.SETRANGE("Item No.","Item No." );
      WhseActivLine.SETRANGE("Bin Code","Bin Code");
      WhseActivLine.SETRANGE("Location Code","Location Code");
      WhseActivLine.SETRANGE("Variant Code","Variant Code");
      WhseActivLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
      COPYFILTER("Lot No. Filter",WhseActivLine."Lot No.");
      COPYFILTER("Serial No. Filter",WhseActivLine."Serial No.");
      WhseActivLine.CALCSUMS("Qty. Outstanding (Base)");

      WhseJnlLine.SETCURRENTKEY(
        "Item No.","From Bin Code","Location Code","Entry Type","Variant Code",
        "Unit of Measure Code","Lot No.","Serial No.");
      WhseJnlLine.SETRANGE("Item No.","Item No." );
      WhseJnlLine.SETRANGE("From Bin Code","Bin Code");
      WhseJnlLine.SETRANGE("Location Code","Location Code");
      WhseJnlLine.SETRANGE("Variant Code","Variant Code");
      WhseJnlLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
      COPYFILTER("Lot No. Filter",WhseJnlLine."Lot No.");
      COPYFILTER("Serial No. Filter",WhseJnlLine."Serial No.");
      WhseJnlLine.CALCSUMS("Qty. (Absolute, Base)");

      CALCFIELDS("Quantity (Base)");
      exit(
        "Quantity (Base)" +
        WhseActivLine."Qty. Outstanding (Base)" +
        WhseJnlLine."Qty. (Absolute, Base)");
    END;

    [External]
    PROCEDURE CalcQtyUOM@13() : Decimal;
    BEGIN
      GetItem("Item No.");
      CALCFIELDS("Quantity (Base)");
      if Item."No." <> '' then
        exit(ROUND("Quantity (Base)" / UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code"),0.00001));
    END;

    [External]
    PROCEDURE GetCaption@12() : Text[250];
    VAR
      ObjTransl@1000 : Record "Object Translation";
      ReservEntry@1008 : Record "Reservation Entry";
      FormCaption@1005 : Text[250];
      Filter@1010 : Text;
    BEGIN
      FormCaption :=
        STRSUBSTNO(
          '%1 %2',
          ObjTransl.TranslateObject(ObjTransl."Object Type"::Table,DATABASE::Location),
          "Location Code");

      case true of
        GetFieldFilter(GETFILTER("Serial No. Filter"),Filter):
          GetPageCaption(FormCaption,FIELDNO("Serial No. Filter"),Filter,-1,ReservEntry.FIELDCAPTION("Serial No."));
        GetFieldFilter(GETFILTER("Lot No. Filter"),Filter):
          GetPageCaption(FormCaption,FIELDNO("Lot No. Filter"),Filter,-1,ReservEntry.FIELDCAPTION("Lot No."));
        GetFieldFilter(GETFILTER("Bin Code"),Filter):
          GetPageCaption(FormCaption,FIELDNO("Bin Code"),Filter,DATABASE::"Registered Invt. Movement Line",'');
        GetFieldFilter(GETFILTER("Variant Code"),Filter):
          GetPageCaption(FormCaption,FIELDNO("Variant Code"),Filter,DATABASE::"Item Variant",'');
        GetFieldFilter(GETFILTER("Item No."),Filter):
          GetPageCaption(FormCaption,FIELDNO("Item No."),Filter,DATABASE::Item,'');
      end;

      exit(FormCaption);
    END;

    [External]
    PROCEDURE SetProposalMode@17(NewValue@1000 : Boolean);
    BEGIN
      StockProposal := NewValue;
    END;

    LOCAL PROCEDURE GetFieldFilter@29(FieldFilter@1000 : Text;VAR Filter@1001 : Text) : Boolean;
    BEGIN
      Filter := FieldFilter;
      exit(STRLEN(Filter) > 0);
    END;

    LOCAL PROCEDURE GetPageCaption@33(VAR PageCaption@1000 : Text;FieldNo@1001 : Integer;Filter@1008 : Text;TableId@1004 : Integer;CustomDetails@1002 : Text);
    VAR
      ObjectTranslation@1005 : Record "Object Translation";
      FieldRef@1006 : FieldRef;
      RecRef@1007 : RecordRef;
    BEGIN
      RecRef.GETTABLE(Rec);
      FieldRef := RecRef.FIELD(FieldNo);
      FieldRef.SETFILTER(Filter);

      if RecRef.FINDFIRST then begin
        if TableId > 0 then
          CustomDetails := ObjectTranslation.TranslateObject(ObjectTranslation."Object Type"::Table,TableId);

        PageCaption := STRSUBSTNO('%1 %2 %3',PageCaption,CustomDetails,FieldRef.VALUE);
      end;
    END;

    [External]
    PROCEDURE SetFilterOnUnitOfMeasure@23();
    BEGIN
      GetLocation("Location Code");
      if Location."Directed Put-away and Pick" then
        SETRANGE("Unit of Measure Filter","Unit of Measure Code")
      else
        SETRANGE("Unit of Measure Filter");
    END;

    LOCAL PROCEDURE CalcTotalQtyBase@25() : Decimal;
    VAR
      WarehouseEntry@1001 : Record "Warehouse Entry";
    BEGIN
      WarehouseEntry.SETRANGE("Location Code","Location Code");
      WarehouseEntry.SETRANGE("Bin Code","Bin Code");
      WarehouseEntry.SETRANGE("Item No.","Item No.");
      WarehouseEntry.SETRANGE("Variant Code","Variant Code");
      WarehouseEntry.SETFILTER("Lot No.",GETFILTER("Lot No. Filter"));
      WarehouseEntry.SETFILTER("Serial No.",GETFILTER("Serial No. Filter"));
      WarehouseEntry.CALCSUMS("Qty. (Base)");
      exit(WarehouseEntry."Qty. (Base)");
    END;

    LOCAL PROCEDURE CalcTotalNegativeAdjmtQtyBase@34() : Decimal;
    VAR
      WarehouseJournalLine@1001 : Record "Warehouse Journal Line";
    BEGIN
      WarehouseJournalLine.SETRANGE("Location Code","Location Code");
      WarehouseJournalLine.SETRANGE("From Bin Code","Bin Code");
      WarehouseJournalLine.SETRANGE("Item No.","Item No.");
      WarehouseJournalLine.SETRANGE("Variant Code","Variant Code");
      WarehouseJournalLine.SETFILTER("Lot No.",GETFILTER("Lot No. Filter"));
      WarehouseJournalLine.SETFILTER("Serial No.",GETFILTER("Serial No. Filter"));
      WarehouseJournalLine.CALCSUMS("Qty. (Absolute, Base)");
      exit(WarehouseJournalLine."Qty. (Absolute, Base)");
    END;

    LOCAL PROCEDURE CalcTotalATOComponentsPickQtyBase@27() : Decimal;
    VAR
      WarehouseActivityLine@1001 : Record "Warehouse Activity Line";
    BEGIN
      GetLocation("Location Code");
      WarehouseActivityLine.SETRANGE("Location Code","Location Code");
      WarehouseActivityLine.SETRANGE("Bin Code","Bin Code");
      WarehouseActivityLine.SETRANGE("Item No.","Item No.");
      WarehouseActivityLine.SETRANGE("Variant Code","Variant Code");
      if Location."Allow Breakbulk" then
        WarehouseActivityLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
      WarehouseActivityLine.SETRANGE("Activity Type",WarehouseActivityLine."Activity Type"::Pick);
      WarehouseActivityLine.SETRANGE("Action Type",WarehouseActivityLine."Action Type"::Take);
      WarehouseActivityLine.SETRANGE("Assemble to Order",true);
      WarehouseActivityLine.SETRANGE("ATO Component",true);
      WarehouseActivityLine.SETFILTER("Lot No.",GETFILTER("Lot No. Filter"));
      WarehouseActivityLine.SETFILTER("Serial No.",GETFILTER("Serial No. Filter"));
      WarehouseActivityLine.CALCSUMS("Qty. (Base)");
      exit(WarehouseActivityLine."Qty. (Base)");
    END;

    BEGIN
    END.
  }
}

