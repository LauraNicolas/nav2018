OBJECT Page 806 Online Map Location
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Online Map Location;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    PageType=Card;
    ShowFilter=false;
    OnOpenPage=BEGIN
                 if not LocationProvider.IsAvailable then begin
                   MESSAGE(LocationNotAvailableMsg);
                   CurrPage.CLOSE;
                   exit;
                 end;
                 LocationProvider := LocationProvider.Create;
                 LocationProvider.RequestLocationAsync;
               END;

  }
  CONTROLS
  {
    { 1900000001;;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Field     ;
                Name=Status;
                CaptionML=ENU=Status;
                ToolTipML=ENU=Specifies the status of the map.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GeolocationLbl;
                Importance=Promoted }

  }
  CODE
  {
    VAR
      LocationProvider@1013 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.LocationProvider" WITHEVENTS RUNONCLIENT;
      ToTableNo@1001 : Integer;
      ToRecordPosition@1002 : Text[1000];
      GeolocationLbl@1003 : TextConst 'ENU=Searching for your location.';
      LocationNotAvailableMsg@1005 : TextConst 'ENU=Your location cannot be determined.';

    [External]
    PROCEDURE SetRecordTo@2(NewToTableNo@1000 : Integer;NewToRecordPosition@1001 : Text[1000]);
    BEGIN
      ToTableNo := NewToTableNo;
      ToRecordPosition := NewToRecordPosition;
    END;

    EVENT LocationProvider@1013::LocationChanged@10(location@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.Location");
    VAR
      OnlineMapSetup@1002 : Record "Online Map Setup";
      Geolocation@1004 : Record Geolocation;
      OnlineMapManagement@1001 : Codeunit "Online Map Management";
    BEGIN
      if location.Status <> 0 then begin
        MESSAGE(LocationNotAvailableMsg);
        CurrPage.CLOSE;
        exit;
      end;

      Geolocation.INIT;
      Geolocation.ID := CREATEGUID;
      Geolocation.Latitude := location.Coordinate.Latitude;
      Geolocation.Longitude := location.Coordinate.Longitude;
      Geolocation.INSERT;

      if not OnlineMapSetup.GET then begin
        OnlineMapManagement.SetupDefault;
        OnlineMapSetup.GET;
      end;

      OnlineMapManagement.ProcessDirections(
        DATABASE::Geolocation,Geolocation.GETPOSITION,
        ToTableNo,ToRecordPosition,
        OnlineMapSetup."Distance In",OnlineMapSetup.Route);

      Geolocation.DELETE;
      CurrPage.CLOSE;
    END;

    BEGIN
    END.
  }
}

