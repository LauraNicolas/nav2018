OBJECT Codeunit 23 Item Jnl.-Post Batch
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Item Journal Line";
    Permissions=TableData "Item Journal Batch"=imd,
                TableData "Warehouse Register"=r;
    OnRun=BEGIN
            ItemJnlLine.COPY(Rec);
            Code;
            Rec := ItemJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=cannot exceed %1 characters';
      Text001@1001 : TextConst 'ENU=Journal Batch Name    #1##########\\';
      Text002@1002 : TextConst 'ENU=Checking lines        #2######\';
      Text003@1003 : TextConst 'ENU=Posting lines         #3###### @4@@@@@@@@@@@@@\';
      Text004@1004 : TextConst 'ENU=Updating lines        #5###### @6@@@@@@@@@@@@@';
      Text005@1005 : TextConst 'ENU=Posting lines         #3###### @4@@@@@@@@@@@@@';
      Text006@1006 : TextConst 'ENU=A maximum of %1 posting number series can be used in each journal.';
      Text007@1007 : TextConst 'ENU=<Month Text>';
      Text008@1008 : TextConst 'ENU=There are new postings made in the period you want to revalue item no. %1.\';
      Text009@1009 : TextConst 'ENU=You must calculate the inventory value again.';
      Text010@1061 : TextConst '@@@="One or more reservation entries exist for the item with Item No. = 1000, Location Code = BLUE, Variant Code = NEW which may be disrupted if you post this negative adjustment. Do you want to continue?";ENU="One or more reservation entries exist for the item with %1 = %2, %3 = %4, %5 = %6 which may be disrupted if you post this negative adjustment. Do you want to continue?"';
      ItemJnlTemplate@1010 : Record "Item Journal Template";
      ItemJnlBatch@1011 : Record "Item Journal Batch";
      ItemJnlLine@1012 : Record "Item Journal Line";
      ItemLedgEntry@1015 : Record "Item Ledger Entry";
      WhseEntry@1049 : Record "Warehouse Entry";
      ItemReg@1016 : Record "Item Register";
      WhseReg@1025 : Record "Warehouse Register";
      GLSetup@1017 : Record "General Ledger Setup";
      InvtSetup@1050 : Record "Inventory Setup";
      AccountingPeriod@1018 : Record "Accounting Period";
      NoSeries@1019 : TEMPORARY Record "No. Series";
      Location@1043 : Record Location;
      ItemJnlCheckLine@1021 : Codeunit "Item Jnl.-Check Line";
      ItemJnlPostLine@1022 : Codeunit "Item Jnl.-Post Line";
      NoSeriesMgt@1023 : Codeunit NoSeriesManagement;
      NoSeriesMgt2@1024 : ARRAY [10] OF Codeunit NoSeriesManagement;
      WMSMgmt@1046 : Codeunit "WMS Management";
      WhseJnlPostLine@1048 : Codeunit "Whse. Jnl.-Register Line";
      InvtAdjmt@1045 : Codeunit "Inventory Adjustment";
      Window@1027 : Dialog;
      ItemRegNo@1028 : Integer;
      WhseRegNo@1044 : Integer;
      StartLineNo@1029 : Integer;
      Day@1030 : Integer;
      Week@1031 : Integer;
      Month@1032 : Integer;
      MonthText@1033 : Text[30];
      NoOfRecords@1034 : Integer;
      LineCount@1035 : Integer;
      LastDocNo@1036 : Code[20];
      LastDocNo2@1037 : Code[20];
      LastPostedDocNo@1038 : Code[20];
      NoOfPostingNoSeries@1039 : Integer;
      PostingNoSeriesNo@1040 : Integer;
      WhseTransaction@1047 : Boolean;
      PhysInvtCount@1052 : Boolean;

    LOCAL PROCEDURE Code@3();
    VAR
      UpdateAnalysisView@1002 : Codeunit "Update Analysis View";
      UpdateItemAnalysisView@1006 : Codeunit "Update Item Analysis View";
      PhysInvtCountMgt@1007 : Codeunit "Phys. Invt. Count.-Management";
      OldEntryType@1008 : 'Purchase,Sale,"Positive Adjmt.","Negative Adjmt.",Transfer,Consumption,Output," ","Assembly Consumption","Assembly Output"';
    BEGIN
      with ItemJnlLine do begin
        LOCKTABLE;
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");

        ItemJnlTemplate.GET("Journal Template Name");
        ItemJnlBatch.GET("Journal Template Name","Journal Batch Name");
        if STRLEN(INCSTR(ItemJnlBatch.Name)) > MAXSTRLEN(ItemJnlBatch.Name) then
          ItemJnlBatch.FIELDERROR(
            Name,
            STRSUBSTNO(
              Text000,
              MAXSTRLEN(ItemJnlBatch.Name)));

        if ItemJnlTemplate.Recurring then begin
          SETRANGE("Posting Date",0D,WORKDATE);
          SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
        end;

        if not FIND('=><') then begin
          "Line No." := 0;
          COMMIT;
          exit;
        end;

        CheckItemAvailability(ItemJnlLine);

        if ItemJnlTemplate.Recurring then
          Window.OPEN(
            Text001 +
            Text002 +
            Text003 +
            Text004)
        else
          Window.OPEN(
            Text001 +
            Text002 +
            Text005);

        Window.UPDATE(1,"Journal Batch Name");

        CheckLines(ItemJnlLine);

        // Find next register no.
        ItemLedgEntry.LOCKTABLE;
        if ItemLedgEntry.FINDLAST then;
        if WhseTransaction then begin
          WhseEntry.LOCKTABLE;
          if WhseEntry.FINDLAST then;
        end;

        ItemReg.LOCKTABLE;
        if ItemReg.FINDLAST then
          ItemRegNo := ItemReg."No." + 1
        else
          ItemRegNo := 1;

        WhseReg.LOCKTABLE;
        if WhseReg.FINDLAST then
          WhseRegNo := WhseReg."No." + 1
        else
          WhseRegNo := 1;

        GLSetup.GET;
        PhysInvtCount := false;

        // Post lines
        LineCount := 0;
        OldEntryType := "Entry Type";
        PostLines(ItemJnlLine,PhysInvtCountMgt);

        // Copy register no. and current journal batch name to item journal
        if not ItemReg.FINDLAST or (ItemReg."No." <> ItemRegNo) then
          ItemRegNo := 0;
        if not WhseReg.FINDLAST or (WhseReg."No." <> WhseRegNo) then
          WhseRegNo := 0;

        INIT;

        "Line No." := ItemRegNo;
        if "Line No." = 0 then
          "Line No." := WhseRegNo;

        InvtSetup.GET;
        if InvtSetup."Automatic Cost Adjustment" <>
           InvtSetup."Automatic Cost Adjustment"::Never
        then begin
          InvtAdjmt.SetProperties(true,InvtSetup."Automatic Cost Posting");
          InvtAdjmt.MakeMultiLevelAdjmt;
        end;

        // Update/delete lines
        if "Line No." <> 0 then begin
          if ItemJnlTemplate.Recurring then begin
            HandleRecurringLine(ItemJnlLine);
          end else
            HandleNonRecurringLine(ItemJnlLine,OldEntryType);
          if ItemJnlBatch."No. Series" <> '' then
            NoSeriesMgt.SaveNoSeries;
          if NoSeries.FINDSET then
            repeat
              EVALUATE(PostingNoSeriesNo,NoSeries.Description);
              NoSeriesMgt2[PostingNoSeriesNo].SaveNoSeries;
            until NoSeries.NEXT = 0;
        end;

        if PhysInvtCount then
          PhysInvtCountMgt.UpdateItemSKUListPhysInvtCount;

        Window.CLOSE;
        COMMIT;
        CLEAR(ItemJnlCheckLine);
        CLEAR(ItemJnlPostLine);
        CLEAR(WhseJnlPostLine);
        CLEAR(InvtAdjmt)
      end;
      UpdateAnalysisView.UpdateAll(0,true);
      UpdateItemAnalysisView.UpdateAll(0,true);
      COMMIT;
    END;

    LOCAL PROCEDURE CheckLines@11(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    BEGIN
      with ItemJnlLine do begin
        LineCount := 0;
        StartLineNo := "Line No.";
        repeat
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          CheckRecurringLine(ItemJnlLine);

          if (("Value Entry Type" = "Value Entry Type"::"Direct Cost") and ("Item Charge No." = '')) or
             (("Invoiced Quantity" <> 0) and (Amount <> 0))
          then begin
            ItemJnlCheckLine.RunCheck(ItemJnlLine);

            if (Quantity <> 0) and
               ("Value Entry Type" = "Value Entry Type"::"Direct Cost") and
               ("Item Charge No." = '')
            then
              CheckWMSBin(ItemJnlLine);

            if ("Value Entry Type" = "Value Entry Type"::Revaluation) and
               ("Inventory Value Per" = "Inventory Value Per"::" ") and
               "Partial Revaluation"
            then
              CheckRemainingQty;
          end;

          if NEXT = 0 then
            FINDFIRST;
        until "Line No." = StartLineNo;
        NoOfRecords := LineCount;
      end;
    END;

    LOCAL PROCEDURE PostLines@12(VAR ItemJnlLine@1000 : Record "Item Journal Line";VAR PhysInvtCountMgt@1004 : Codeunit "Phys. Invt. Count.-Management");
    VAR
      TempTrackingSpecification@1003 : TEMPORARY Record "Tracking Specification";
      OriginalQuantity@1002 : Decimal;
      OriginalQuantityBase@1001 : Decimal;
    BEGIN
      LastDocNo := '';
      LastDocNo2 := '';
      LastPostedDocNo := '';
      with ItemJnlLine do begin
        FINDSET;
        repeat
          if not EmptyLine and
             (ItemJnlBatch."No. Series" <> '') and
             ("Document No." <> LastDocNo2)
          then
            TESTFIELD("Document No.",NoSeriesMgt.GetNextNo(ItemJnlBatch."No. Series","Posting Date",false));
          if not EmptyLine then
            LastDocNo2 := "Document No.";
          MakeRecurringTexts(ItemJnlLine);
          ConstructPostingNumber(ItemJnlLine);

          if "Inventory Value Per" <> "Inventory Value Per"::" " then
            ItemJnlPostSumLine(ItemJnlLine)
          else
            if (("Value Entry Type" = "Value Entry Type"::"Direct Cost") and ("Item Charge No." = '')) or
               (("Invoiced Quantity" <> 0) and (Amount <> 0))
            then begin
              LineCount := LineCount + 1;
              Window.UPDATE(3,LineCount);
              Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
              OriginalQuantity := Quantity;
              OriginalQuantityBase := "Quantity (Base)";
              if not ItemJnlPostLine.RunWithCheck(ItemJnlLine) then
                ItemJnlPostLine.CheckItemTracking;
              if "Value Entry Type" <> "Value Entry Type"::Revaluation then begin
                ItemJnlPostLine.CollectTrackingSpecification(TempTrackingSpecification);
                PostWhseJnlLine(ItemJnlLine,OriginalQuantity,OriginalQuantityBase,TempTrackingSpecification);
              end;
            end;

          if IsPhysInvtCount(ItemJnlTemplate,"Phys Invt Counting Period Code","Phys Invt Counting Period Type") then begin
            if not PhysInvtCount then begin
              PhysInvtCountMgt.InitTempItemSKUList;
              PhysInvtCount := true;
            end;
            PhysInvtCountMgt.AddToTempItemSKUList("Item No.","Location Code","Variant Code","Phys Invt Counting Period Type");
          end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE HandleRecurringLine@15(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    VAR
      ItemJnlLine2@1002 : Record "Item Journal Line";
    BEGIN
      LineCount := 0;
      ItemJnlLine2.COPYFILTERS(ItemJnlLine);
      ItemJnlLine2.FINDSET;
      repeat
        LineCount := LineCount + 1;
        Window.UPDATE(5,LineCount);
        Window.UPDATE(6,ROUND(LineCount / NoOfRecords * 10000,1));
        if ItemJnlLine2."Posting Date" <> 0D then
          ItemJnlLine2.VALIDATE("Posting Date",CALCDATE(ItemJnlLine2."Recurring Frequency",ItemJnlLine2."Posting Date"));
        if (ItemJnlLine2."Recurring Method" = ItemJnlLine2."Recurring Method"::Variable) and
           (ItemJnlLine2."Item No." <> '')
        then begin
          ItemJnlLine2.Quantity := 0;
          ItemJnlLine2."Invoiced Quantity" := 0;
          ItemJnlLine2.Amount := 0;
        end;
        ItemJnlLine2.MODIFY;
      until ItemJnlLine2.NEXT = 0;
    END;

    LOCAL PROCEDURE HandleNonRecurringLine@17(VAR ItemJnlLine@1000 : Record "Item Journal Line";OldEntryType@1001 : 'Purchase,Sale,"Positive Adjmt.","Negative Adjmt.",Transfer,Consumption,Output," ","Assembly Consumption","Assembly Output"');
    VAR
      ItemJnlLine2@1003 : Record "Item Journal Line";
      ItemJnlLine3@1002 : Record "Item Journal Line";
    BEGIN
      with ItemJnlLine do begin
        ItemJnlLine2.COPYFILTERS(ItemJnlLine);
        ItemJnlLine2.SETFILTER("Item No.",'<>%1','');
        if ItemJnlLine2.FINDLAST then; // Remember the last line
        ItemJnlLine2."Entry Type" := OldEntryType;

        ItemJnlLine3.COPY(ItemJnlLine);
        ItemJnlLine3.DELETEALL;
        ItemJnlLine3.RESET;
        ItemJnlLine3.SETRANGE("Journal Template Name","Journal Template Name");
        ItemJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
        if not ItemJnlLine3.FINDLAST then
          if INCSTR("Journal Batch Name") <> '' then begin
            ItemJnlBatch.DELETE;
            ItemJnlBatch.Name := INCSTR("Journal Batch Name");
            if ItemJnlBatch.INSERT then;
            "Journal Batch Name" := ItemJnlBatch.Name;
          end;

        ItemJnlLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
        if (ItemJnlBatch."No. Series" = '') and not ItemJnlLine3.FINDLAST and
           not (ItemJnlLine2."Entry Type" in [ItemJnlLine2."Entry Type"::Consumption,ItemJnlLine2."Entry Type"::Output])
        then begin
          ItemJnlLine3.INIT;
          ItemJnlLine3."Journal Template Name" := "Journal Template Name";
          ItemJnlLine3."Journal Batch Name" := "Journal Batch Name";
          ItemJnlLine3."Line No." := 10000;
          ItemJnlLine3.INSERT;
          ItemJnlLine3.SetUpNewLine(ItemJnlLine2);
          ItemJnlLine3.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE ConstructPostingNumber@13(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    BEGIN
      with ItemJnlLine do begin
        if "Posting No. Series" = '' then
          "Posting No. Series" := ItemJnlBatch."No. Series"
        else
          if not EmptyLine then
            if "Document No." = LastDocNo then
              "Document No." := LastPostedDocNo
            else begin
              if not NoSeries.GET("Posting No. Series") then begin
                NoOfPostingNoSeries := NoOfPostingNoSeries + 1;
                if NoOfPostingNoSeries > ARRAYLEN(NoSeriesMgt2) then
                  ERROR(
                    Text006,
                    ARRAYLEN(NoSeriesMgt2));
                NoSeries.Code := "Posting No. Series";
                NoSeries.Description := FORMAT(NoOfPostingNoSeries);
                NoSeries.INSERT;
              end;
              LastDocNo := "Document No.";
              EVALUATE(PostingNoSeriesNo,NoSeries.Description);
              "Document No." := NoSeriesMgt2[PostingNoSeriesNo].GetNextNo("Posting No. Series","Posting Date",false);
              LastPostedDocNo := "Document No.";
            end;
      end;
    END;

    LOCAL PROCEDURE CheckRecurringLine@1(VAR ItemJnlLine2@1000 : Record "Item Journal Line");
    VAR
      NULDF@1001 : DateFormula;
    BEGIN
      with ItemJnlLine2 do begin
        if "Item No." <> '' then
          if ItemJnlTemplate.Recurring then begin
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            if "Recurring Method" = "Recurring Method"::Variable then
              TESTFIELD(Quantity);
          end else begin
            CLEAR(NULDF);
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency",NULDF);
          end;
      end;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@2(VAR ItemJnlLine2@1000 : Record "Item Journal Line");
    BEGIN
      with ItemJnlLine2 do begin
        if ("Item No." <> '') and ("Recurring Method" <> 0) then begin // Not recurring
          Day := DATE2DMY("Posting Date",1);
          Week := DATE2DWY("Posting Date",2);
          Month := DATE2DMY("Posting Date",2);
          MonthText := FORMAT("Posting Date",0,Text007);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Posting Date");
          if not AccountingPeriod.FINDLAST then
            AccountingPeriod.Name := '';
          "Document No." :=
            DELCHR(
              PADSTR(
                STRSUBSTNO("Document No.",Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN("Document No.")),
              '>');
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
        end;
      end;
    END;

    LOCAL PROCEDURE ItemJnlPostSumLine@5800(ItemJnlLine4@1000 : Record "Item Journal Line");
    VAR
      Item@1002 : Record Item;
      ItemLedgEntry4@1003 : Record "Item Ledger Entry";
      ItemLedgEntry5@1005 : Record "Item Ledger Entry";
      Remainder@1006 : Decimal;
      RemAmountToDistribute@1007 : Decimal;
      RemQuantity@1008 : Decimal;
      DistributeCosts@1009 : Boolean;
      IncludeExpectedCost@1010 : Boolean;
      PostingDate@1012 : Date;
      IsLastEntry@1011 : Boolean;
    BEGIN
      DistributeCosts := true;
      RemAmountToDistribute := ItemJnlLine.Amount;
      RemQuantity := ItemJnlLine.Quantity;
      if ItemJnlLine.Amount <> 0 then begin
        LineCount := LineCount + 1;
        Window.UPDATE(3,LineCount);
        Window.UPDATE(4,ROUND(LineCount / NoOfRecords * 10000,1));
        with ItemLedgEntry4 do begin
          Item.GET(ItemJnlLine4."Item No.");
          IncludeExpectedCost := (Item."Costing Method" = Item."Costing Method"::Standard) and
            (ItemJnlLine4."Inventory Value Per" <> ItemJnlLine4."Inventory Value Per"::" ");
          RESET;
          SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
          SETRANGE("Item No.",ItemJnlLine."Item No.");
          SETRANGE(Positive,true);
          PostingDate := ItemJnlLine."Posting Date";

          if (ItemJnlLine4."Location Code" <> '') or
             (ItemJnlLine4."Inventory Value Per" in
              [ItemJnlLine."Inventory Value Per"::Location,
               ItemJnlLine4."Inventory Value Per"::"Location and Variant"])
          then
            SETRANGE("Location Code",ItemJnlLine."Location Code");
          if (ItemJnlLine."Variant Code" <> '') or
             (ItemJnlLine4."Inventory Value Per" in
              [ItemJnlLine."Inventory Value Per"::Variant,
               ItemJnlLine4."Inventory Value Per"::"Location and Variant"])
          then
            SETRANGE("Variant Code",ItemJnlLine."Variant Code");
          if FINDSET then
            repeat
              if IncludeEntryInCalc(ItemLedgEntry4,PostingDate,IncludeExpectedCost) then begin
                ItemLedgEntry5 := ItemLedgEntry4;

                ItemJnlLine4."Entry Type" := "Entry Type";
                ItemJnlLine4.Quantity :=
                  CalculateRemQuantity("Entry No.",ItemJnlLine."Posting Date");

                ItemJnlLine4."Quantity (Base)" := ItemJnlLine4.Quantity;
                ItemJnlLine4."Invoiced Quantity" := ItemJnlLine4.Quantity;
                ItemJnlLine4."Invoiced Qty. (Base)" := ItemJnlLine4.Quantity;
                ItemJnlLine4."Location Code" := "Location Code";
                ItemJnlLine4."Variant Code" := "Variant Code";
                ItemJnlLine4."Applies-to Entry" := "Entry No.";
                ItemJnlLine4."Source No." := "Source No.";
                ItemJnlLine4."Order Type" := "Order Type";
                ItemJnlLine4."Order No." := "Order No.";
                ItemJnlLine4."Order Line No." := "Order Line No.";

                if ItemJnlLine4.Quantity <> 0 then begin
                  ItemJnlLine4.Amount :=
                    ItemJnlLine."Inventory Value (Revalued)" * ItemJnlLine4.Quantity /
                    ItemJnlLine.Quantity -
                    ROUND(
                      CalculateRemInventoryValue(
                        "Entry No.",Quantity,ItemJnlLine4.Quantity,
                        IncludeExpectedCost and not "Completely Invoiced",PostingDate),
                      GLSetup."Amount Rounding Precision") + Remainder;

                  RemQuantity := RemQuantity - ItemJnlLine4.Quantity;

                  if RemQuantity = 0 then begin
                    if NEXT > 0 then
                      repeat
                        if IncludeEntryInCalc(ItemLedgEntry4,PostingDate,IncludeExpectedCost) then begin
                          RemQuantity := CalculateRemQuantity("Entry No.",ItemJnlLine."Posting Date");
                          if RemQuantity > 0 then
                            ERROR(Text008 + Text009,ItemJnlLine4."Item No.");
                        end;
                      until NEXT = 0;

                    ItemJnlLine4.Amount := RemAmountToDistribute;
                    DistributeCosts := false;
                  end else begin
                    repeat
                      IsLastEntry := NEXT = 0;
                    until IncludeEntryInCalc(ItemLedgEntry4,PostingDate,IncludeExpectedCost) or IsLastEntry;
                    if IsLastEntry or (RemQuantity < 0) then
                      ERROR(Text008 + Text009,ItemJnlLine4."Item No.");
                    Remainder := ItemJnlLine4.Amount - ROUND(ItemJnlLine4.Amount,GLSetup."Amount Rounding Precision");
                    ItemJnlLine4.Amount := ROUND(ItemJnlLine4.Amount,GLSetup."Amount Rounding Precision");
                    RemAmountToDistribute := RemAmountToDistribute - ItemJnlLine4.Amount;
                  end;
                  ItemJnlLine4."Unit Cost" := ItemJnlLine4.Amount / ItemJnlLine4.Quantity;

                  if ItemJnlLine4.Amount <> 0 then begin
                    if IncludeExpectedCost and not ItemLedgEntry5."Completely Invoiced" then begin
                      ItemJnlLine4."Applied Amount" := ROUND(
                          ItemJnlLine4.Amount * (ItemLedgEntry5.Quantity - ItemLedgEntry5."Invoiced Quantity") /
                          ItemLedgEntry5.Quantity,
                          GLSetup."Amount Rounding Precision");
                    end else
                      ItemJnlLine4."Applied Amount" := 0;
                    ItemJnlPostLine.RunWithCheck(ItemJnlLine4);
                  end;
                end else begin
                  repeat
                    IsLastEntry := NEXT = 0;
                  until IncludeEntryInCalc(ItemLedgEntry4,PostingDate,IncludeExpectedCost) or IsLastEntry;
                  if IsLastEntry then
                    ERROR(Text008 + Text009,ItemJnlLine4."Item No.");
                end;
              end else
                DistributeCosts := NEXT <> 0;
            until not DistributeCosts;
        end;

        if ItemJnlLine."Update Standard Cost" then
          UpdateStdCost;
      end;
    END;

    LOCAL PROCEDURE IncludeEntryInCalc@7(ItemLedgEntry@1000 : Record "Item Ledger Entry";PostingDate@1002 : Date;IncludeExpectedCost@1001 : Boolean) : Boolean;
    BEGIN
      with ItemLedgEntry do begin
        if IncludeExpectedCost then
          exit("Posting Date" in [0D..PostingDate]);
        exit("Completely Invoiced" and ("Last Invoice Date" in [0D..PostingDate]));
      end;
    END;

    LOCAL PROCEDURE UpdateStdCost@5();
    VAR
      Item@1000 : Record Item;
      SKU@1002 : Record "Stockkeeping Unit";
    BEGIN
      with ItemJnlLine do begin
        if SKU.GET("Location Code","Item No.","Variant Code") then begin
          SKU.VALIDATE("Standard Cost","Unit Cost (Revalued)");
          SKU.MODIFY;
        end else begin
          Item.GET("Item No.");
          Item.VALIDATE("Standard Cost","Unit Cost (Revalued)");
          Item."Single-Level Material Cost" := "Single-Level Material Cost";
          Item."Single-Level Capacity Cost" := "Single-Level Capacity Cost";
          Item."Single-Level Subcontrd. Cost" := "Single-Level Subcontrd. Cost";
          Item."Single-Level Cap. Ovhd Cost" := "Single-Level Cap. Ovhd Cost";
          Item."Single-Level Mfg. Ovhd Cost" := "Single-Level Mfg. Ovhd Cost";
          Item."Rolled-up Material Cost" := "Rolled-up Material Cost";
          Item."Rolled-up Capacity Cost" := "Rolled-up Capacity Cost";
          Item."Rolled-up Subcontracted Cost" := "Rolled-up Subcontracted Cost";
          Item."Rolled-up Mfg. Ovhd Cost" := "Rolled-up Mfg. Ovhd Cost";
          Item."Rolled-up Cap. Overhead Cost" := "Rolled-up Cap. Overhead Cost";
          Item."Last Unit Cost Calc. Date" := "Posting Date";
          Item.MODIFY;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckRemainingQty@4();
    VAR
      ItemLedgerEntry@1001 : Record "Item Ledger Entry";
      RemainingQty@1000 : Decimal;
    BEGIN
      RemainingQty := ItemLedgerEntry.CalculateRemQuantity(
          ItemJnlLine."Applies-to Entry",ItemJnlLine."Posting Date");

      if RemainingQty <> ItemJnlLine.Quantity then
        ERROR(Text008 + Text009,ItemJnlLine."Item No.");
    END;

    LOCAL PROCEDURE PostWhseJnlLine@7302(ItemJnlLine@1000 : Record "Item Journal Line";OriginalQuantity@1001 : Decimal;OriginalQuantityBase@1006 : Decimal;VAR TempTrackingSpecification@1003 : TEMPORARY Record "Tracking Specification");
    VAR
      WhseJnlLine@1002 : Record "Warehouse Journal Line";
      TempWhseJnlLine2@1005 : TEMPORARY Record "Warehouse Journal Line";
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
    BEGIN
      with ItemJnlLine do begin
        Quantity := OriginalQuantity;
        "Quantity (Base)" := OriginalQuantityBase;
        GetLocation("Location Code");
        if not ("Entry Type" in ["Entry Type"::Consumption,"Entry Type"::Output]) then
          if Location."Bin Mandatory" then
            if WMSMgmt.CreateWhseJnlLine(ItemJnlLine,ItemJnlTemplate.Type,WhseJnlLine,false) then begin
              ItemTrackingMgt.SplitWhseJnlLine(WhseJnlLine,TempWhseJnlLine2,TempTrackingSpecification,false);
              if TempWhseJnlLine2.FINDSET then
                repeat
                  WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,false);
                  WhseJnlPostLine.RUN(TempWhseJnlLine2);
                until TempWhseJnlLine2.NEXT = 0;
            end;

        if "Entry Type" = "Entry Type"::Transfer then begin
          GetLocation("New Location Code");
          if Location."Bin Mandatory" then
            if WMSMgmt.CreateWhseJnlLine(ItemJnlLine,ItemJnlTemplate.Type,WhseJnlLine,true) then begin
              ItemTrackingMgt.SplitWhseJnlLine(WhseJnlLine,TempWhseJnlLine2,TempTrackingSpecification,true);
              if TempWhseJnlLine2.FINDSET then
                repeat
                  WMSMgmt.CheckWhseJnlLine(TempWhseJnlLine2,1,0,true);
                  WhseJnlPostLine.RUN(TempWhseJnlLine2);
                until TempWhseJnlLine2.NEXT = 0;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckWMSBin@8(ItemJnlLine@1000 : Record "Item Journal Line");
    BEGIN
      with ItemJnlLine do begin
        GetLocation("Location Code");
        if Location."Bin Mandatory" then
          WhseTransaction := true;
        case "Entry Type" of
          "Entry Type"::Purchase,"Entry Type"::Sale,
          "Entry Type"::"Positive Adjmt.","Entry Type"::"Negative Adjmt.":
            begin
              if Location."Directed Put-away and Pick" then
                WMSMgmt.CheckAdjmtBin(
                  Location,Quantity,
                  ("Entry Type" in
                   ["Entry Type"::Purchase,
                    "Entry Type"::"Positive Adjmt."]));
            end;
          "Entry Type"::Transfer:
            begin
              if Location."Directed Put-away and Pick" then
                WMSMgmt.CheckAdjmtBin(Location,-Quantity,false);
              GetLocation("New Location Code");
              if Location."Directed Put-away and Pick" then
                WMSMgmt.CheckAdjmtBin(Location,Quantity,true);
              if Location."Bin Mandatory" then
                WhseTransaction := true;
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE GetLocation@7301(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE GetWhseRegNo@6() : Integer;
    BEGIN
      exit(WhseRegNo);
    END;

    [External]
    PROCEDURE GetItemRegNo@9() : Integer;
    BEGIN
      exit(ItemRegNo);
    END;

    LOCAL PROCEDURE IsPhysInvtCount@10(ItemJnlTemplate2@1000 : Record "Item Journal Template";PhysInvtCountingPeriodCode@1002 : Code[10];PhysInvtCountingPeriodType@1003 : '" ",Item,SKU') : Boolean;
    BEGIN
      exit(
        (ItemJnlTemplate2.Type = ItemJnlTemplate2.Type::"Phys. Inventory") and
        (PhysInvtCountingPeriodType <> PhysInvtCountingPeriodType::" ") and
        (PhysInvtCountingPeriodCode <> ''));
    END;

    LOCAL PROCEDURE CheckItemAvailability@14(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    VAR
      Item@1003 : Record Item;
      TempSKU@1001 : TEMPORARY Record "Stockkeeping Unit";
      ItemJnlLine2@1005 : Record "Item Journal Line";
      QtyinItemJnlLine@1002 : Decimal;
      AvailableQty@1004 : Decimal;
    BEGIN
      ItemJnlLine2.COPYFILTERS(ItemJnlLine);
      if ItemJnlLine2.FINDSET then
        repeat
          if not TempSKU.GET(ItemJnlLine2."Location Code",ItemJnlLine2."Item No.",ItemJnlLine2."Variant Code") then
            InsertTempSKU(TempSKU,ItemJnlLine2);
        until ItemJnlLine2.NEXT = 0;

      if TempSKU.FINDSET then
        repeat
          QtyinItemJnlLine := CalcRequiredQty(TempSKU,ItemJnlLine2);
          if QtyinItemJnlLine < 0 then begin
            Item.GET(TempSKU."Item No.");
            Item.SETFILTER("Location Filter",TempSKU."Location Code");
            Item.SETFILTER("Variant Filter",TempSKU."Variant Code");
            Item.CALCFIELDS("Reserved Qty. on Inventory","Net Change");
            AvailableQty := Item."Net Change" - Item."Reserved Qty. on Inventory" + SelfReservedQty(TempSKU,ItemJnlLine2);

            if (Item."Reserved Qty. on Inventory" > 0) and (AvailableQty < ABS(QtyinItemJnlLine)) then
              if not CONFIRM(
                   Text010,false,TempSKU.FIELDCAPTION("Item No."),TempSKU."Item No.",TempSKU.FIELDCAPTION("Location Code"),
                   TempSKU."Location Code",TempSKU.FIELDCAPTION("Variant Code"),TempSKU."Variant Code")
              then
                ERROR('');
          end;
        until TempSKU.NEXT = 0 ;
    END;

    LOCAL PROCEDURE InsertTempSKU@18(VAR TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";ItemJnlLine@1001 : Record "Item Journal Line");
    BEGIN
      with TempSKU do begin
        INIT;
        "Location Code" := ItemJnlLine."Location Code";
        "Item No." := ItemJnlLine."Item No.";
        "Variant Code" := ItemJnlLine."Variant Code";
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CalcRequiredQty@19(TempSKU@1000 : TEMPORARY Record "Stockkeeping Unit";VAR ItemJnlLine@1001 : Record "Item Journal Line") : Decimal;
    VAR
      SignFactor@1003 : Integer;
      QtyinItemJnlLine@1002 : Decimal;
    BEGIN
      QtyinItemJnlLine := 0;
      ItemJnlLine.SETRANGE("Item No.",TempSKU."Item No.");
      ItemJnlLine.SETRANGE("Location Code",TempSKU."Location Code");
      ItemJnlLine.SETRANGE("Variant Code",TempSKU."Variant Code");
      ItemJnlLine.FINDSET;
      repeat
        if (ItemJnlLine."Entry Type" in
            [ItemJnlLine."Entry Type"::Sale,
             ItemJnlLine."Entry Type"::"Negative Adjmt.",
             ItemJnlLine."Entry Type"::Consumption]) or
           (ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer)
        then
          SignFactor := -1
        else
          SignFactor := 1;
        QtyinItemJnlLine += ItemJnlLine."Quantity (Base)" * SignFactor;
      until ItemJnlLine.NEXT = 0;
      exit(QtyinItemJnlLine);
    END;

    LOCAL PROCEDURE SelfReservedQty@20(SKU@1000 : Record "Stockkeeping Unit";ItemJnlLine@1003 : Record "Item Journal Line") : Decimal;
    VAR
      ReservationEntry@1002 : Record "Reservation Entry";
    BEGIN
      if ItemJnlLine."Order Type" <> ItemJnlLine."Order Type"::Production then
        exit;

      with ReservationEntry do begin
        SETRANGE("Item No.",SKU."Item No.");
        SETRANGE("Location Code",SKU."Location Code");
        SETRANGE("Variant Code",SKU."Variant Code");
        SETRANGE("Source Type",DATABASE::"Prod. Order Component");
        SETRANGE("Source ID",ItemJnlLine."Order No.");
        if ISEMPTY then
          exit;
        CALCSUMS("Quantity (Base)");
        exit(-"Quantity (Base)");
      end;
    END;

    BEGIN
    END.
  }
}

