OBJECT Table 270 Bank Account
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Bank Account Ledger Entry"=r;
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               if "No." = '' then begin
                 GLSetup.GET;
                 GLSetup.TESTFIELD("Bank Account Nos.");
                 NoSeriesMgt.InitSeries(GLSetup."Bank Account Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;

               if not InsertFromContact then
                 UpdateContFromBank.OnInsert(Rec);

               DimMgt.UpdateDefaultDim(
                 DATABASE::"Bank Account","No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;

               if (Name <> xRec.Name) or
                  ("Search Name" <> xRec."Search Name") or
                  ("Name 2" <> xRec."Name 2") or
                  (Address <> xRec.Address) or
                  ("Address 2" <> xRec."Address 2") or
                  (City <> xRec.City) or
                  ("Phone No." <> xRec."Phone No.") or
                  ("Telex No." <> xRec."Telex No.") or
                  ("Territory Code" <> xRec."Territory Code") or
                  ("Currency Code" <> xRec."Currency Code") or
                  ("Language Code" <> xRec."Language Code") or
                  ("Our Contact Code" <> xRec."Our Contact Code") or
                  ("Country/Region Code" <> xRec."Country/Region Code") or
                  ("Fax No." <> xRec."Fax No.") or
                  ("Telex Answer Back" <> xRec."Telex Answer Back") or
                  ("Post Code" <> xRec."Post Code") or
                  (County <> xRec.County) or
                  ("E-Mail" <> xRec."E-Mail") or
                  ("Home Page" <> xRec."Home Page")
               then begin
                 MODIFY;
                 UpdateContFromBank.OnModify(Rec);
                 if not FIND then begin
                   RESET;
                   if FIND then;
                 end;
               end;
             END;

    OnDelete=BEGIN
               MoveEntries.MoveBankAccEntries(Rec);

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::"Bank Account");
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               UpdateContFromBank.OnDelete(Rec);

               DimMgt.DeleteDefaultDim(DATABASE::"Bank Account","No.");
             END;

    OnRename=BEGIN
               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Bank Account;
    LookupPageID="Bank Account List";
    DrillDownPageID="Bank Account List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  GLSetup.GET;
                                                                  NoSeriesMgt.TestManual(GLSetup."Bank Account Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                if ("Search Name" = UPPERCASE(xRec.Name)) or ("Search Name" = '') then
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 3   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 4   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 5   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 6   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 7   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 8   ;   ;Contact             ;Text50        ;CaptionML=ENU=Contact }
    { 9   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 10  ;   ;Telex No.           ;Text20        ;CaptionML=ENU=Telex No. }
    { 13  ;   ;Bank Account No.    ;Text30        ;CaptionML=ENU=Bank Account No. }
    { 14  ;   ;Transit No.         ;Text20        ;CaptionML=ENU=Transit No. }
    { 15  ;   ;Territory Code      ;Code10        ;TableRelation=Territory;
                                                   CaptionML=ENU=Territory Code }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Chain Name          ;Code10        ;CaptionML=ENU=Chain Name }
    { 20  ;   ;Min. Balance        ;Decimal       ;CaptionML=ENU=Min. Balance;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 21  ;   ;Bank Acc. Posting Group;Code20     ;TableRelation="Bank Account Posting Group";
                                                   CaptionML=ENU=Bank Acc. Posting Group }
    { 22  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=BEGIN
                                                                if "Currency Code" = xRec."Currency Code" then
                                                                  exit;

                                                                BankAcc.RESET;
                                                                BankAcc := Rec;
                                                                BankAcc.CALCFIELDS(Balance,"Balance (LCY)");
                                                                BankAcc.TESTFIELD(Balance,0);
                                                                BankAcc.TESTFIELD("Balance (LCY)",0);

                                                                if not BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open) then
                                                                  BankAccLedgEntry.SETCURRENTKEY("Bank Account No.");
                                                                BankAccLedgEntry.SETRANGE("Bank Account No.","No.");
                                                                BankAccLedgEntry.SETRANGE(Open,true);
                                                                if BankAccLedgEntry.FINDLAST then
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Currency Code"));
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 24  ;   ;Language Code       ;Code10        ;TableRelation=Language;
                                                   CaptionML=ENU=Language Code }
    { 26  ;   ;Statistics Group    ;Integer       ;CaptionML=ENU=Statistics Group }
    { 29  ;   ;Our Contact Code    ;Code20        ;TableRelation="Salesperson/Purchaser";
                                                   CaptionML=ENU=Our Contact Code }
    { 35  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 37  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 38  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE ("Table Name"=CONST("Bank Account"),
                                                                                           "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 39  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 41  ;   ;Last Statement No.  ;Code20        ;CaptionML=ENU=Last Statement No. }
    { 42  ;   ;Last Payment Statement No.;Code20  ;OnValidate=VAR
                                                                TextManagement@1000 : Codeunit TextManagement;
                                                              BEGIN
                                                                TextManagement.EvaluateIncStr("Last Payment Statement No.",FIELDCAPTION("Last Payment Statement No."));
                                                              END;

                                                   CaptionML=ENU=Last Payment Statement No. }
    { 54  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 55  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 56  ;   ;Global Dimension 1 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Filter;
                                                   CaptionClass='1,3,1' }
    { 57  ;   ;Global Dimension 2 Filter;Code20   ;FieldClass=FlowFilter;
                                                   TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Filter;
                                                   CaptionClass='1,3,2' }
    { 58  ;   ;Balance             ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE ("Bank Account No."=FIELD("No."),
                                                                                                             "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                             "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter")));
                                                   CaptionML=ENU=Balance;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 59  ;   ;Balance (LCY)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE ("Bank Account No."=FIELD("No."),
                                                                                                                     "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                     "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter")));
                                                   CaptionML=ENU=Balance (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 60  ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE ("Bank Account No."=FIELD("No."),
                                                                                                             "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                             "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                             "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Net Change;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 61  ;   ;Net Change (LCY)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE ("Bank Account No."=FIELD("No."),
                                                                                                                     "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                     "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                     "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Net Change (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 62  ;   ;Total on Checks     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Check Ledger Entry".Amount WHERE ("Bank Account No."=FIELD("No."),
                                                                                                      "Entry Status"=FILTER(Posted),
                                                                                                      "Statement Status"=FILTER(<>Closed)));
                                                   CaptionML=ENU=Total on Checks;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 84  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 85  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 89  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 91  ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 92  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 93  ;   ;Last Check No.      ;Code20        ;AccessByPermission=TableData "Check Ledger Entry"=R;
                                                   CaptionML=ENU=Last Check No. }
    { 94  ;   ;Balance Last Statement;Decimal     ;CaptionML=ENU=Balance Last Statement;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 95  ;   ;Balance at Date     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry".Amount WHERE ("Bank Account No."=FIELD("No."),
                                                                                                             "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                             "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                             "Posting Date"=FIELD(UPPERLIMIT("Date Filter"))));
                                                   CaptionML=ENU=Balance at Date;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 96  ;   ;Balance at Date (LCY);Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Amount (LCY)" WHERE ("Bank Account No."=FIELD("No."),
                                                                                                                     "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                     "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                     "Posting Date"=FIELD(UPPERLIMIT("Date Filter"))));
                                                   CaptionML=ENU=Balance at Date (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 97  ;   ;Debit Amount        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Debit Amount" WHERE ("Bank Account No."=FIELD("No."),
                                                                                                                     "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                     "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                     "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 98  ;   ;Credit Amount       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Credit Amount" WHERE ("Bank Account No."=FIELD("No."),
                                                                                                                      "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                      "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                      "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 99  ;   ;Debit Amount (LCY)  ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Debit Amount (LCY)" WHERE ("Bank Account No."=FIELD("No."),
                                                                                                                           "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                           "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                           "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Debit Amount (LCY);
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 100 ;   ;Credit Amount (LCY) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Bank Account Ledger Entry"."Credit Amount (LCY)" WHERE ("Bank Account No."=FIELD("No."),
                                                                                                                            "Global Dimension 1 Code"=FIELD("Global Dimension 1 Filter"),
                                                                                                                            "Global Dimension 2 Code"=FIELD("Global Dimension 2 Filter"),
                                                                                                                            "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Credit Amount (LCY);
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 101 ;   ;Bank Branch No.     ;Text20        ;CaptionML=ENU=Bank Branch No. }
    { 102 ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit "Mail Management";
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 103 ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 108 ;   ;Check Report ID     ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE ("Object Type"=CONST(Report));
                                                   CaptionML=ENU=Check Report ID }
    { 109 ;   ;Check Report Name   ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup(AllObjWithCaption."Object Name" WHERE ("Object Type"=CONST(Report),
                                                                                                             "Object ID"=FIELD("Check Report ID")));
                                                   CaptionML=ENU=Check Report Name;
                                                   Editable=false }
    { 110 ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1000 : Record "Company Information";
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=ENU=IBAN }
    { 111 ;   ;SWIFT Code          ;Code20        ;CaptionML=ENU=SWIFT Code }
    { 113 ;   ;Bank Statement Import Format;Code20;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Import));
                                                   CaptionML=ENU=Bank Statement Import Format }
    { 115 ;   ;Credit Transfer Msg. Nos.;Code20   ;TableRelation="No. Series";
                                                   CaptionML=ENU=Credit Transfer Msg. Nos. }
    { 116 ;   ;Direct Debit Msg. Nos.;Code20      ;TableRelation="No. Series";
                                                   CaptionML=ENU=Direct Debit Msg. Nos. }
    { 117 ;   ;SEPA Direct Debit Exp. Format;Code20;
                                                   TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export));
                                                   CaptionML=ENU=SEPA Direct Debit Exp. Format }
    { 121 ;   ;Bank Stmt. Service Record ID;RecordID;
                                                   OnValidate=VAR
                                                                Handled@1000 : Boolean;
                                                              BEGIN
                                                                if FORMAT("Bank Stmt. Service Record ID") = '' then
                                                                  OnUnlinkStatementProviderEvent(Rec,Handled);
                                                              END;

                                                   CaptionML=ENU=Bank Stmt. Service Record ID }
    { 123 ;   ;Transaction Import Timespan;Integer;CaptionML=ENU=Transaction Import Timespan }
    { 124 ;   ;Automatic Stmt. Import Enabled;Boolean;
                                                   OnValidate=BEGIN
                                                                if "Automatic Stmt. Import Enabled" then begin
                                                                  if not IsAutoLogonPossible then
                                                                    ERROR(MFANotSupportedErr);

                                                                  if not ("Transaction Import Timespan" in [0..9999]) then
                                                                    ERROR(TransactionImportTimespanMustBePositiveErr);
                                                                  ScheduleBankStatementDownload
                                                                end else
                                                                  UnscheduleBankStatementDownload;
                                                              END;

                                                   CaptionML=ENU=Automatic Stmt. Import Enabled }
    { 140 ;   ;Image               ;Media         ;ExtendedDatatype=Person;
                                                   CaptionML=ENU=Image }
    { 170 ;   ;Creditor No.        ;Code35        ;CaptionML=ENU=Creditor No. }
    { 1210;   ;Payment Export Format;Code20       ;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST(Export));
                                                   CaptionML=ENU=Payment Export Format }
    { 1211;   ;Bank Clearing Code  ;Text50        ;CaptionML=ENU=Bank Clearing Code }
    { 1212;   ;Bank Clearing Standard;Text50      ;TableRelation="Bank Clearing Standard";
                                                   CaptionML=ENU=Bank Clearing Standard }
    { 1213;   ;Bank Name - Data Conversion;Text50 ;TableRelation="Bank Data Conv. Bank" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Bank Name - Data Conversion }
    { 1250;   ;Match Tolerance Type;Option        ;OnValidate=BEGIN
                                                                if "Match Tolerance Type" <> xRec."Match Tolerance Type" then
                                                                  "Match Tolerance Value" := 0;
                                                              END;

                                                   CaptionML=ENU=Match Tolerance Type;
                                                   OptionCaptionML=ENU=Percentage,Amount;
                                                   OptionString=Percentage,Amount }
    { 1251;   ;Match Tolerance Value;Decimal      ;OnValidate=BEGIN
                                                                if "Match Tolerance Value" < 0 then
                                                                  ERROR(InvalidValueErr);

                                                                if "Match Tolerance Type" = "Match Tolerance Type"::Percentage then
                                                                  if "Match Tolerance Value" > 99 then
                                                                    ERROR(InvalidPercentageValueErr,FIELDCAPTION("Match Tolerance Type"),
                                                                      FORMAT("Match Tolerance Type"::Percentage));
                                                              END;

                                                   CaptionML=ENU=Match Tolerance Value;
                                                   DecimalPlaces=0:5 }
    { 1260;   ;Positive Pay Export Code;Code20    ;TableRelation="Bank Export/Import Setup".Code WHERE (Direction=CONST("Export-Positive Pay"));
                                                   CaptionML=ENU=Positive Pay Export Code }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Search Name"                            }
    {    ;"Bank Acc. Posting Group"                }
    {    ;"Currency Code"                          }
    {    ;"Country/Region Code"                    }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.",Name,"Bank Account No.","Currency Code" }
    { 2   ;Brick               ;"No.",Name,"Bank Account No.","Currency Code",Image }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot change %1 because there are one or more open ledger entries for this bank account.';
      Text003@1003 : TextConst 'ENU=Do you wish to create a contact for %1 %2?';
      GLSetup@1004 : Record "General Ledger Setup";
      BankAcc@1005 : Record "Bank Account";
      BankAccLedgEntry@1006 : Record "Bank Account Ledger Entry";
      CommentLine@1007 : Record "Comment Line";
      PostCode@1008 : Record "Post Code";
      NoSeriesMgt@1009 : Codeunit NoSeriesManagement;
      MoveEntries@1010 : Codeunit MoveEntries;
      UpdateContFromBank@1011 : Codeunit "BankCont-Update";
      DimMgt@1012 : Codeunit DimensionManagement;
      InsertFromContact@1013 : Boolean;
      Text004@1014 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      BankAccIdentifierIsEmptyErr@1001 : TextConst 'ENU=You must specify either a %1 or an %2.';
      InvalidPercentageValueErr@1002 : TextConst '@@@=%1 is "field caption and %2 is "Percentage";ENU=If %1 is %2, then the value must be between 0 and 99.';
      InvalidValueErr@1015 : TextConst 'ENU=The value must be positive.';
      DataExchNotSetErr@1016 : TextConst 'ENU=The Data Exchange Code field must be filled.';
      BankStmtScheduledDownloadDescTxt@1018 : TextConst '@@@=%1 - Bank Account name;ENU=%1 Bank Statement Import';
      JobQEntriesCreatedQst@1019 : TextConst 'ENU=A job queue entry for import of bank statements has been created.\\Do you want to open the Job Queue Entry window?';
      TransactionImportTimespanMustBePositiveErr@1020 : TextConst 'ENU=The value in the Number of Days Included field must be a positive number not greater than 9999.';
      MFANotSupportedErr@1021 : TextConst 'ENU=Cannot setup automatic bank statement import because the selected bank requires multi-factor authentication.';
      BankAccNotLinkedErr@1023 : TextConst 'ENU=This bank account is not linked to an online bank account.';
      AutoLogonNotPossibleErr@1024 : TextConst 'ENU=Automatic logon is not possible for this bank account.';
      CancelTxt@1017 : TextConst 'ENU=Cancel';
      OnlineFeedStatementStatus@1022 : '"Not Linked",Linked,"Linked and Auto. Bank Statement Enabled"';

    [External]
    PROCEDURE AssistEdit@2(OldBankAcc@1000 : Record "Bank Account") : Boolean;
    BEGIN
      with BankAcc do begin
        BankAcc := Rec;
        GLSetup.GET;
        GLSetup.TESTFIELD("Bank Account Nos.");
        if NoSeriesMgt.SelectSeries(GLSetup."Bank Account Nos.",OldBankAcc."No. Series","No. Series") then begin
          GLSetup.GET;
          GLSetup.TESTFIELD("Bank Account Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := BankAcc;
          exit(true);
        end;
      end;
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::"Bank Account","No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    [External]
    PROCEDURE ShowContact@1();
    VAR
      ContBusRel@1000 : Record "Contact Business Relation";
      Cont@1001 : Record Contact;
    BEGIN
      if "No." = '' then
        exit;

      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::"Bank Account");
      ContBusRel.SETRANGE("No.","No.");
      if not ContBusRel.FINDFIRST then begin
        if not CONFIRM(Text003,false,TABLECAPTION,"No.") then
          exit;
        UpdateContFromBank.InsertNewContact(Rec,false);
        ContBusRel.FINDFIRST;
      end;
      COMMIT;

      Cont.SETCURRENTKEY("Company Name","Company No.",Type,Name);
      Cont.SETRANGE("Company No.",ContBusRel."Contact No.");
      PAGE.RUN(PAGE::"Contact List",Cont);
    END;

    [External]
    PROCEDURE SetInsertFromContact@3(FromContact@1000 : Boolean);
    BEGIN
      InsertFromContact := FromContact;
    END;

    [External]
    PROCEDURE GetPaymentExportCodeunitID@6() : Integer;
    VAR
      BankExportImportSetup@1000 : Record "Bank Export/Import Setup";
    BEGIN
      GetBankExportImportSetup(BankExportImportSetup);
      exit(BankExportImportSetup."Processing Codeunit ID");
    END;

    [External]
    PROCEDURE GetPaymentExportXMLPortID@4() : Integer;
    VAR
      BankExportImportSetup@1000 : Record "Bank Export/Import Setup";
    BEGIN
      GetBankExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing XMLport ID");
      exit(BankExportImportSetup."Processing XMLport ID");
    END;

    [External]
    PROCEDURE GetDDExportCodeunitID@11() : Integer;
    VAR
      BankExportImportSetup@1000 : Record "Bank Export/Import Setup";
    BEGIN
      GetDDExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing Codeunit ID");
      exit(BankExportImportSetup."Processing Codeunit ID");
    END;

    [External]
    PROCEDURE GetDDExportXMLPortID@9() : Integer;
    VAR
      BankExportImportSetup@1000 : Record "Bank Export/Import Setup";
    BEGIN
      GetDDExportImportSetup(BankExportImportSetup);
      BankExportImportSetup.TESTFIELD("Processing XMLport ID");
      exit(BankExportImportSetup."Processing XMLport ID");
    END;

    [External]
    PROCEDURE GetBankExportImportSetup@8(VAR BankExportImportSetup@1001 : Record "Bank Export/Import Setup");
    BEGIN
      TESTFIELD("Payment Export Format");
      BankExportImportSetup.GET("Payment Export Format");
    END;

    [External]
    PROCEDURE GetDDExportImportSetup@12(VAR BankExportImportSetup@1001 : Record "Bank Export/Import Setup");
    BEGIN
      TESTFIELD("SEPA Direct Debit Exp. Format");
      BankExportImportSetup.GET("SEPA Direct Debit Exp. Format");
    END;

    [External]
    PROCEDURE GetCreditTransferMessageNo@5() : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit NoSeriesManagement;
    BEGIN
      TESTFIELD("Credit Transfer Msg. Nos.");
      exit(NoSeriesManagement.GetNextNo("Credit Transfer Msg. Nos.",TODAY,true));
    END;

    [External]
    PROCEDURE GetDirectDebitMessageNo@10() : Code[20];
    VAR
      NoSeriesManagement@1000 : Codeunit NoSeriesManagement;
    BEGIN
      TESTFIELD("Direct Debit Msg. Nos.");
      exit(NoSeriesManagement.GetNextNo("Direct Debit Msg. Nos.",TODAY,true));
    END;

    [Internal]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record "Online Map Setup";
      MapMgt@1000 : Codeunit "Online Map Management";
    BEGIN
      if MapPoint.FINDFIRST then
        MapMgt.MakeSelection(DATABASE::"Bank Account",GETPOSITION)
      else
        MESSAGE(Text004);
    END;

    [External]
    PROCEDURE GetDataExchDef@13(VAR DataExchDef@1000 : Record "Data Exch. Def");
    VAR
      BankExportImportSetup@1001 : Record "Bank Export/Import Setup";
      DataExchDefCodeResponse@1002 : Code[20];
      Handled@1003 : Boolean;
    BEGIN
      OnGetDataExchangeDefinitionEvent(DataExchDefCodeResponse,Handled);
      if not Handled then begin
        TESTFIELD("Bank Statement Import Format");
        DataExchDefCodeResponse := "Bank Statement Import Format";
      end;

      if DataExchDefCodeResponse = '' then
        ERROR(DataExchNotSetErr);

      BankExportImportSetup.GET(DataExchDefCodeResponse);
      BankExportImportSetup.TESTFIELD("Data Exch. Def. Code");

      DataExchDef.GET(BankExportImportSetup."Data Exch. Def. Code");
      DataExchDef.TESTFIELD(Type,DataExchDef.Type::"Bank Statement Import");
    END;

    [External]
    PROCEDURE GetBankAccountNoWithCheck@14() AccountNo : Text;
    BEGIN
      AccountNo := GetBankAccountNo;
      if AccountNo = '' then
        ERROR(BankAccIdentifierIsEmptyErr,FIELDCAPTION("Bank Account No."),FIELDCAPTION(IBAN));
    END;

    [External]
    PROCEDURE GetBankAccountNo@15() : Text;
    BEGIN
      if IBAN <> '' then
        exit(DELCHR(IBAN,'=<>'));

      if "Bank Account No." <> '' then
        exit("Bank Account No.");
    END;

    [External]
    PROCEDURE IsInLocalCurrency@16() : Boolean;
    VAR
      GeneralLedgerSetup@1000 : Record "General Ledger Setup";
    BEGIN
      if "Currency Code" = '' then
        exit(true);

      GeneralLedgerSetup.GET;
      exit("Currency Code" = GeneralLedgerSetup.GetCurrencyCode(''));
    END;

    [External]
    PROCEDURE GetPosPayExportCodeunitID@17() : Integer;
    VAR
      BankExportImportSetup@1000 : Record "Bank Export/Import Setup";
    BEGIN
      TESTFIELD("Positive Pay Export Code");
      BankExportImportSetup.GET("Positive Pay Export Code");
      exit(BankExportImportSetup."Processing Codeunit ID");
    END;

    [External]
    PROCEDURE IsLinkedToBankStatementServiceProvider@27() : Boolean;
    VAR
      IsBankAccountLinked@1000 : Boolean;
    BEGIN
      OnCheckLinkedToStatementProviderEvent(Rec,IsBankAccountLinked);
      exit(IsBankAccountLinked);
    END;

    [External]
    PROCEDURE StatementProvidersExist@37() : Boolean;
    VAR
      TempNameValueBuffer@1000 : TEMPORARY Record "Name/Value Buffer";
    BEGIN
      OnGetStatementProvidersEvent(TempNameValueBuffer);
      exit(not TempNameValueBuffer.ISEMPTY);
    END;

    [External]
    PROCEDURE LinkStatementProvider@32(VAR BankAccount@1001 : Record "Bank Account");
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      if StatementProvider <> '' then
        OnLinkStatementProviderEvent(BankAccount,StatementProvider);
    END;

    [External]
    PROCEDURE SimpleLinkStatementProvider@39(VAR OnlineBankAccLink@1001 : Record "Online Bank Acc. Link");
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      if StatementProvider <> '' then
        OnSimpleLinkStatementProviderEvent(OnlineBankAccLink,StatementProvider);
    END;

    [External]
    PROCEDURE UnlinkStatementProvider@31();
    VAR
      Handled@1000 : Boolean;
    BEGIN
      OnUnlinkStatementProviderEvent(Rec,Handled);
    END;

    [External]
    PROCEDURE UpdateBankAccountLinking@35();
    VAR
      StatementProvider@1000 : Text;
    BEGIN
      StatementProvider := SelectBankLinkingService;

      if StatementProvider <> '' then
        OnUpdateBankAccountLinkingEvent(Rec,StatementProvider);
    END;

    [External]
    PROCEDURE GetUnlinkedBankAccounts@30(VAR TempUnlinkedBankAccount@1000 : TEMPORARY Record "Bank Account");
    VAR
      BankAccount@1001 : Record "Bank Account";
    BEGIN
      if BankAccount.FINDSET then
        repeat
          if not BankAccount.IsLinkedToBankStatementServiceProvider then begin
            TempUnlinkedBankAccount := BankAccount;
            TempUnlinkedBankAccount.INSERT;
          end;
        until BankAccount.NEXT = 0;
    END;

    [External]
    PROCEDURE GetLinkedBankAccounts@33(VAR TempUnlinkedBankAccount@1000 : TEMPORARY Record "Bank Account");
    VAR
      BankAccount@1001 : Record "Bank Account";
    BEGIN
      if BankAccount.FINDSET then
        repeat
          if BankAccount.IsLinkedToBankStatementServiceProvider then begin
            TempUnlinkedBankAccount := BankAccount;
            TempUnlinkedBankAccount.INSERT;
          end;
        until BankAccount.NEXT = 0;
    END;

    LOCAL PROCEDURE SelectBankLinkingService@38() : Text;
    VAR
      TempNameValueBuffer@1002 : TEMPORARY Record "Name/Value Buffer";
      OptionStr@1001 : Text;
      OptionNo@1000 : Integer;
    BEGIN
      OnGetStatementProvidersEvent(TempNameValueBuffer);

      if TempNameValueBuffer.ISEMPTY then
        exit(''); // Action should not be visible in this case so should not occur

      if (TempNameValueBuffer.COUNT = 1) or (not GUIALLOWED) then
        exit(TempNameValueBuffer.Name);

      TempNameValueBuffer.FINDSET;
      repeat
        OptionStr += STRSUBSTNO('%1,',TempNameValueBuffer.Value);
      until TempNameValueBuffer.NEXT = 0;
      OptionStr += CancelTxt;

      OptionNo := STRMENU(OptionStr);
      if (OptionNo = 0) or (OptionNo = TempNameValueBuffer.COUNT + 1) then
        exit;

      TempNameValueBuffer.SETRANGE(Value,SELECTSTR(OptionNo,OptionStr));
      TempNameValueBuffer.FINDFIRST;

      exit(TempNameValueBuffer.Name);
    END;

    [External]
    PROCEDURE IsAutoLogonPossible@28() : Boolean;
    VAR
      AutoLogonPossible@1000 : Boolean;
    BEGIN
      AutoLogonPossible := true;
      OnCheckAutoLogonPossibleEvent(Rec,AutoLogonPossible);
      exit(AutoLogonPossible)
    END;

    LOCAL PROCEDURE ScheduleBankStatementDownload@18();
    VAR
      JobQueueEntry@1002 : Record "Job Queue Entry";
    BEGIN
      if not IsLinkedToBankStatementServiceProvider then
        ERROR(BankAccNotLinkedErr);
      if not IsAutoLogonPossible then
        ERROR(AutoLogonNotPossibleErr);

      JobQueueEntry.ScheduleRecurrentJobQueueEntry(JobQueueEntry."Object Type to Run"::Codeunit,
        CODEUNIT::"Automatic Import of Bank Stmt.",RECORDID);
      JobQueueEntry."Timeout (sec.)" := 1800;
      JobQueueEntry.Description :=
        COPYSTR(STRSUBSTNO(BankStmtScheduledDownloadDescTxt,Name),1,MAXSTRLEN(JobQueueEntry.Description));
      JobQueueEntry."Notify On Success" := false;
      JobQueueEntry."No. of Minutes between Runs" := 121;
      JobQueueEntry.MODIFY;
      if CONFIRM(JobQEntriesCreatedQst) then
        ShowBankStatementDownloadJobQueueEntry;
    END;

    LOCAL PROCEDURE UnscheduleBankStatementDownload@20();
    VAR
      JobQueueEntry@1002 : Record "Job Queue Entry";
    BEGIN
      SetAutomaticImportJobQueueEntryFilters(JobQueueEntry);
      if not JobQueueEntry.ISEMPTY then
        JobQueueEntry.DELETEALL;
    END;

    [External]
    PROCEDURE CreateNewAccount@42(OnlineBankAccLink@1000 : Record "Online Bank Acc. Link");
    BEGIN
      INIT;
      VALIDATE("Bank Account No.",OnlineBankAccLink."Bank Account No.");
      VALIDATE(Name,OnlineBankAccLink.Name);
      VALIDATE("Currency Code",OnlineBankAccLink."Currency Code");
      VALIDATE(Contact,OnlineBankAccLink.Contact);
    END;

    LOCAL PROCEDURE ShowBankStatementDownloadJobQueueEntry@19();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
    BEGIN
      SetAutomaticImportJobQueueEntryFilters(JobQueueEntry);
      if JobQueueEntry.FINDFIRST then
        PAGE.RUN(PAGE::"Job Queue Entry Card",JobQueueEntry);
    END;

    LOCAL PROCEDURE SetAutomaticImportJobQueueEntryFilters@21(VAR JobQueueEntry@1000 : Record "Job Queue Entry");
    BEGIN
      JobQueueEntry.SETRANGE("Object Type to Run",JobQueueEntry."Object Type to Run"::Codeunit);
      JobQueueEntry.SETRANGE("Object ID to Run",CODEUNIT::"Automatic Import of Bank Stmt.");
      JobQueueEntry.SETRANGE("Record ID to Process",RECORDID);
    END;

    [External]
    PROCEDURE GetOnlineFeedStatementStatus@44(VAR OnlineFeedStatus@1000 : Option;VAR Linked@1001 : Boolean);
    BEGIN
      Linked := false;
      OnlineFeedStatus := OnlineFeedStatementStatus::"Not Linked";
      if IsLinkedToBankStatementServiceProvider then begin
        Linked := true;
        OnlineFeedStatus := OnlineFeedStatementStatus::Linked;
        if IsScheduledBankStatement then
          OnlineFeedStatus := OnlineFeedStatementStatus::"Linked and Auto. Bank Statement Enabled";
      end;
    END;

    LOCAL PROCEDURE IsScheduledBankStatement@43() : Boolean;
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
    BEGIN
      JobQueueEntry.SETRANGE("Record ID to Process",RECORDID);
      exit(JobQueueEntry.FINDFIRST);
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnCheckLinkedToStatementProviderEvent@22(VAR BankAccount@1000 : Record "Bank Account";VAR IsLinked@1002 : Boolean);
    BEGIN
      // The subscriber of this event should answer whether the bank account is linked to a bank statement provider service
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnCheckAutoLogonPossibleEvent@23(VAR BankAccount@1000 : Record "Bank Account";VAR AutoLogonPossible@1001 : Boolean);
    BEGIN
      // The subscriber of this event should answer whether the bank account can be logged on to without multi-factor authentication
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnUnlinkStatementProviderEvent@24(VAR BankAccount@1000 : Record "Bank Account";VAR Handled@1002 : Boolean);
    BEGIN
      // The subscriber of this event should unlink the bank account from a bank statement provider service
    END;

    [Integration]
    [External]
    PROCEDURE OnMarkAccountLinkedEvent@41(VAR OnlineBankAccLink@1000 : Record "Online Bank Acc. Link";VAR BankAccount@1001 : Record "Bank Account");
    BEGIN
      // The subscriber of this event should Mark the account linked to a bank statement provider service
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnSimpleLinkStatementProviderEvent@40(VAR OnlineBankAccLink@1000 : Record "Online Bank Acc. Link";VAR StatementProvider@1002 : Text);
    BEGIN
      // The subscriber of this event should link the bank account to a bank statement provider service
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnLinkStatementProviderEvent@25(VAR BankAccount@1000 : Record "Bank Account";VAR StatementProvider@1002 : Text);
    BEGIN
      // The subscriber of this event should link the bank account to a bank statement provider service
    END;

    [Integration(TRUE)]
    [External]
    LOCAL PROCEDURE OnGetDataExchangeDefinitionEvent@26(VAR DataExchDefCodeResponse@1001 : Code[20];VAR Handled@1000 : Boolean);
    BEGIN
      // This event should retrieve the data exchange definition format for processing the online feeds
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnUpdateBankAccountLinkingEvent@34(VAR BankAccount@1000 : Record "Bank Account";VAR StatementProvider@1001 : Text);
    BEGIN
      // This event should handle updating of the single or multiple bank accounts
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnGetStatementProvidersEvent@36(VAR TempNameValueBuffer@1002 : TEMPORARY Record "Name/Value Buffer");
    BEGIN
      // The subscriber of this event should insert a unique identifier (Name) and friendly name of the provider (Value)
    END;

    BEGIN
    END.
  }
}

