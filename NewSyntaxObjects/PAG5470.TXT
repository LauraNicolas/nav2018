OBJECT Page 5470 Item Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=items];
    SourceTable=Item;
    DelayedInsert=true;
    PageType=API;
    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     GraphCollectionMgtItem@1002 : Codeunit "Graph Collection Mgt - Item";
                   BEGIN
                     GraphCollectionMgtItem.InsertItem(Rec,TempFieldSet,BaseUnitOfMeasureJSONText,ItemCategoryJSONText);

                     SetCalculatedFields;
                     exit(false);
                   END;

    OnModifyRecord=VAR
                     Item@1001 : Record Item;
                     GraphCollectionMgtItem@1000 : Codeunit "Graph Collection Mgt - Item";
                   BEGIN
                     Item.SETRANGE(Id,Id);
                     Item.FINDFIRST;

                     GraphCollectionMgtItem.ProcessComplexTypes(
                       Rec,
                       BaseUnitOfMeasureJSONText,
                       ItemCategoryJSONText
                       );

                     if "No." = Item."No." then
                       MODIFY(true)
                     else begin
                       Item.TRANSFERFIELDS(Rec,false);
                       Item.RENAME("No.");
                       TRANSFERFIELDS(Item,true);
                     end;

                     SetCalculatedFields;

                     exit(false);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 18  ;0   ;Container ;
                Name=Container18;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 16  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                ImplicitType=GUID }

    { 15  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                ImplicitType=Code20 }

    { 14  ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName];
                ToolTipML=ENU=Specifies the Description for the Item.;
                ApplicationArea=#All;
                SourceExpr=Description;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Description));
                           END;

                ImplicitType=Text50 }

    { 11  ;2   ;Field     ;
                Name=type;
                CaptionML=[@@@={Locked};
                           ENU=Type];
                ToolTipML=ENU=Specifies the Type for the Item. Possible values are Inventory and Service.;
                ApplicationArea=#All;
                SourceExpr=Type;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Type));
                           END;

                ImplicitType=Option }

    { 4   ;2   ;Field     ;
                Name=blocked;
                CaptionML=[@@@={Locked};
                           ENU=Blocked];
                ToolTipML=ENU=Specifies whether the item is blocked.;
                ApplicationArea=#All;
                SourceExpr=Blocked;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Blocked));
                           END;

                ImplicitType=Boolean }

    { 1   ;2   ;Field     ;
                Name=baseUnitOfMeasureId;
                CaptionML=[@@@={Locked};
                           ENU=BaseUnitOfMeasureId];
                ApplicationArea=#All;
                SourceExpr="Unit of Measure Id";
                OnValidate=BEGIN
                             if "Unit of Measure Id" = BlankGUID then
                               "Base Unit of Measure" := ''
                             else begin
                               UnitOfMeasure.SETRANGE(Id,"Unit of Measure Id");
                               if not UnitOfMeasure.FINDFIRST then
                                 ERROR(UnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr);

                               "Base Unit of Measure" := UnitOfMeasure.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Unit of Measure Id"));
                             RegisterFieldSet(FIELDNO("Base Unit of Measure"));
                           END;

                ImplicitType=GUID }

    { 20  ;2   ;Field     ;
                Name=baseUnitOfMeasure;
                CaptionML=[@@@={Locked};
                           ENU=BaseUnitOfMeasure];
                ToolTipML=ENU=Specifies the Base Unit of Measure.;
                ApplicationArea=#All;
                SourceExpr=BaseUnitOfMeasureJSONText;
                OnValidate=VAR
                             UnitOfMeasureFromJSON@1000 : Record "Unit of Measure";
                           BEGIN
                             RegisterFieldSet(FIELDNO("Unit of Measure Id"));
                             RegisterFieldSet(FIELDNO("Base Unit of Measure"));

                             if BaseUnitOfMeasureJSONText = 'null' then
                               exit;

                             GraphCollectionMgtItem.ParseJSONToUnitOfMeasure(BaseUnitOfMeasureJSONText,UnitOfMeasureFromJSON);

                             if (UnitOfMeasure.Code <> '') and
                                (UnitOfMeasure.Code <> UnitOfMeasureFromJSON.Code)
                             then
                               ERROR(UnitOfMeasureValuesDontMatchErr);
                           END;

                ODataEDMType=ITEM-UOM;
                ImplicitType=Text }

    { 6   ;2   ;Field     ;
                Name=gtin;
                CaptionML=[@@@={Locked};
                           ENU=GTIN];
                ApplicationArea=#All;
                SourceExpr=GTIN;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(GTIN));
                           END;

                ImplicitType=Code14 }

    { 22  ;2   ;Field     ;
                Name=itemCategory;
                CaptionML=[@@@={Locked};
                           ENU=ItemCategory];
                ToolTipML=ENU=Specifies the Category for the Item.;
                ApplicationArea=#All;
                SourceExpr=ItemCategoryJSONText;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Item Category Code"));
                           END;

                ODataEDMType=ITEM-CATEGORY;
                ImplicitType=Text }

    { 23  ;2   ;Field     ;
                Name=inventory;
                CaptionML=[@@@={Locked};
                           ENU=Inventory];
                ToolTipML=ENU=Specifies the inventory for the item.;
                ApplicationArea=#All;
                SourceExpr=InventoryValue;
                OnValidate=BEGIN
                             VALIDATE(Inventory,InventoryValue);
                             RegisterFieldSet(FIELDNO(Inventory));
                           END;

                ImplicitType=Decimal }

    { 10  ;2   ;Field     ;
                Name=unitPrice;
                CaptionML=[@@@={Locked};
                           ENU=UnitPrice];
                ApplicationArea=#All;
                SourceExpr="Unit Price";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Unit Price"));
                           END;

                ImplicitType=Decimal }

    { 24  ;2   ;Field     ;
                Name=priceIncludesTax;
                CaptionML=[@@@={Locked};
                           ENU=PriceIncludesTax];
                ApplicationArea=#All;
                SourceExpr="Price Includes VAT";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Price Includes VAT"));
                           END;

                ImplicitType=Boolean }

    { 25  ;2   ;Field     ;
                Name=unitCost;
                CaptionML=[@@@={Locked};
                           ENU=UnitCost];
                ApplicationArea=#All;
                SourceExpr="Unit Cost";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Unit Cost"));
                           END;

                ImplicitType=Decimal }

    { 3   ;2   ;Field     ;
                Name=taxGroupId;
                CaptionML=[@@@={Locked};
                           ENU=TaxGroupId];
                ToolTipML=ENU=Specifies the ID of the tax group.;
                ApplicationArea=#All;
                SourceExpr="Tax Group Id";
                OnValidate=BEGIN
                             if "Tax Group Id" = BlankGUID then
                               "Tax Group Code" := ''
                             else begin
                               TaxGroup.SETRANGE(Id,"Tax Group Id");
                               if not TaxGroup.FINDFIRST then
                                 ERROR(TaxGroupIdDoesNotMatchATaxGroupErr);

                               "Tax Group Code" := TaxGroup.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Tax Group Code"));
                             RegisterFieldSet(FIELDNO("Tax Group Id"));
                           END;

                ImplicitType=GUID }

    { 2   ;2   ;Field     ;
                Name=taxGroupCode;
                CaptionML=[@@@={Locked};
                           ENU=TaxGroupCode];
                ApplicationArea=#All;
                SourceExpr="Tax Group Code";
                OnValidate=BEGIN
                             if TaxGroup.Code <> '' then begin
                               if TaxGroup.Code <> "Tax Group Code" then
                                 ERROR(TaxGroupValuesDontMatchErr);
                               exit;
                             end;

                             if "Tax Group Code" = '' then
                               "Tax Group Id" := BlankGUID
                             else begin
                               if not TaxGroup.GET("Tax Group Code") then
                                 ERROR(TaxGroupCodeDoesNotMatchATaxGroupErr);

                               "Tax Group Id" := TaxGroup.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Tax Group Code"));
                             RegisterFieldSet(FIELDNO("Tax Group Id"));
                           END;

                ImplicitType=Code20 }

    { 19  ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last DateTime Modified";
                Editable=FALSE;
                ImplicitType=DateTime }

  }
  CODE
  {
    VAR
      TempFieldSet@1011 : TEMPORARY Record Field;
      UnitOfMeasure@1004 : Record "Unit of Measure";
      TaxGroup@1008 : Record "Tax Group";
      GraphCollectionMgtItem@1001 : Codeunit "Graph Collection Mgt - Item";
      BaseUnitOfMeasureJSONText@1002 : Text;
      ItemCategoryJSONText@1003 : Text;
      InventoryValue@1000 : Decimal;
      UnitOfMeasureValuesDontMatchErr@1007 : TextConst '@@@={Locked};ENU=The unit of measure values do not match to a specific Unit of Measure.';
      UnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr@1006 : TextConst '@@@={Locked};ENU=The "unitOfMeasureId" does not match to a Unit of Measure.';
      BlankGUID@1005 : GUID;
      TaxGroupValuesDontMatchErr@1012 : TextConst '@@@={Locked};ENU=The tax group values do not match to a specific Tax Group.';
      TaxGroupIdDoesNotMatchATaxGroupErr@1010 : TextConst '@@@={Locked};ENU=The "taxGroupId" does not match to a Tax Group.';
      TaxGroupCodeDoesNotMatchATaxGroupErr@1009 : TextConst '@@@={Locked};ENU=The "taxGroupCode" does not match to a Tax Group.';

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphCollectionMgtItem@1000 : Codeunit "Graph Collection Mgt - Item";
    BEGIN
      // UOM
      BaseUnitOfMeasureJSONText := GraphCollectionMgtItem.ItemUnitOfMeasureToJSON(Rec,"Base Unit of Measure");

      // Category
      ItemCategoryJSONText := GraphCollectionMgtItem.ItemCategoryToJSON("Item Category Code");

      // Inventory
      CALCFIELDS(Inventory);
      InventoryValue := Inventory;
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(BaseUnitOfMeasureJSONText);
      CLEAR(ItemCategoryJSONText);
      CLEAR(InventoryValue);
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      if TempFieldSet.GET(DATABASE::Item,FieldNo) then
        exit;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Item;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(true);
    END;

    BEGIN
    END.
  }
}

