OBJECT Codeunit 99000838 Prod. Order Comp.-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd,
                TableData "Action Message Entry"=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved';
      Text003@1002 : TextConst 'ENU=must not be changed when a quantity is reserved';
      Text004@1003 : TextConst 'ENU=Codeunit is not initialized correctly.';
      CreateReservEntry@1005 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1006 : Codeunit "Reservation Engine Mgt.";
      ReservMgt@1007 : Codeunit "Reservation Management";
      Blocked@1008 : Boolean;
      SetFromType@1009 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry",Service,Job';
      SetFromSubtype@1010 : Integer;
      SetFromID@1011 : Code[20];
      SetFromBatchName@1012 : Code[10];
      SetFromProdOrderLine@1013 : Integer;
      SetFromRefNo@1014 : Integer;
      SetFromVariantCode@1015 : Code[10];
      SetFromLocationCode@1016 : Code[10];
      SetFromSerialNo@1018 : Code[20];
      SetFromLotNo@1019 : Code[20];
      SetFromQtyPerUOM@1020 : Decimal;
      DeleteItemTracking@1017 : Boolean;

    [External]
    PROCEDURE CreateReservation@1(ProdOrderComp@1000 : Record "Prod. Order Component";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1005 : Code[20];ForLotNo@1004 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text004);

      ProdOrderComp.TESTFIELD("Item No.");
      ProdOrderComp.TESTFIELD("Due Date");
      ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
      if ABS(ProdOrderComp."Remaining Qty. (Base)") < ABS(ProdOrderComp."Reserved Qty. (Base)") + QuantityBase then
        ERROR(
          Text000,
          ABS(ProdOrderComp."Remaining Qty. (Base)") - ABS(ProdOrderComp."Reserved Qty. (Base)"));

      ProdOrderComp.TESTFIELD("Location Code",SetFromLocationCode);
      ProdOrderComp.TESTFIELD("Variant Code",SetFromVariantCode);
      if QuantityBase > 0 then
        ShipmentDate := ProdOrderComp."Due Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ProdOrderComp."Due Date";
      end;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Prod. Order Component",ProdOrderComp.Status,
        ProdOrderComp."Prod. Order No.",'',ProdOrderComp."Prod. Order Line No.",
        ProdOrderComp."Line No.",ProdOrderComp."Qty. per Unit of Measure",
        Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ProdOrderComp."Item No.",ProdOrderComp."Variant Code",ProdOrderComp."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    LOCAL PROCEDURE CreateBindingReservation@19(ProdOrderComp@1000 : Record "Prod. Order Component";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal);
    BEGIN
      CreateReservation(ProdOrderComp,Description,ExpectedReceiptDate,Quantity,QuantityBase,'','');
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@2(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    [External]
    PROCEDURE SetBinding@9(Binding@1000 : '" ","Order-to-Order"');
    BEGIN
      CreateReservEntry.SetBinding(Binding);
    END;

    [External]
    PROCEDURE FilterReservFor@12(VAR FilterReservEntry@1000 : Record "Reservation Entry";ProdOrderComp@1001 : Record "Prod. Order Component");
    BEGIN
      FilterReservEntry.SetSourceFilter(
        DATABASE::"Prod. Order Component",ProdOrderComp.Status,ProdOrderComp."Prod. Order No.",ProdOrderComp."Line No.",false);
      FilterReservEntry.SetSourceFilter2('',ProdOrderComp."Prod. Order Line No.");
    END;

    [External]
    PROCEDURE Caption@30(ProdOrderComp@1001 : Record "Prod. Order Component") CaptionText@1000 : Text[80];
    VAR
      ProdOrderLine@1002 : Record "Prod. Order Line";
    BEGIN
      ProdOrderLine.GET(
        ProdOrderComp.Status,
        ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.");
      CaptionText :=
        COPYSTR(
          STRSUBSTNO('%1 %2 %3 %4 %5',
            ProdOrderComp.Status,ProdOrderComp.TABLECAPTION,
            ProdOrderComp."Prod. Order No.",ProdOrderComp."Item No.",ProdOrderLine."Item No.")
          ,1,MAXSTRLEN(CaptionText));
    END;

    [External]
    PROCEDURE FindReservEntry@5(ProdOrderComp@1000 : Record "Prod. Order Component";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ProdOrderComp);
      exit(ReservEntry.FINDLAST);
    END;

    LOCAL PROCEDURE ReservEntryExist@11(ProdOrderComp@1000 : Record "Prod. Order Component") : Boolean;
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ProdOrderComp);
      exit(not ReservEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE VerifyChange@59(VAR NewProdOrderComp@1000 : Record "Prod. Order Component";VAR OldProdOrderComp@1001 : Record "Prod. Order Component");
    VAR
      ProdOrderComp@1005 : Record "Prod. Order Component";
      TempReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      if NewProdOrderComp.Status = NewProdOrderComp.Status::Finished then
        exit;
      if Blocked then
        exit;
      if NewProdOrderComp."Line No." = 0 then
        if not ProdOrderComp.GET(
             NewProdOrderComp.Status,
             NewProdOrderComp."Prod. Order No.",
             NewProdOrderComp."Prod. Order Line No.",
             NewProdOrderComp."Line No.")
        then
          exit;

      NewProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewProdOrderComp."Reserved Qty. (Base)" <> 0;

      if NewProdOrderComp."Due Date" = 0D then
        if ShowError then
          NewProdOrderComp.FIELDERROR("Due Date",Text002)
        else
          HasError := true;

      if NewProdOrderComp."Item No." <> OldProdOrderComp."Item No." then
        if ShowError then
          NewProdOrderComp.FIELDERROR("Item No.",Text003)
        else
          HasError := true;
      if NewProdOrderComp."Location Code" <> OldProdOrderComp."Location Code" then
        if ShowError then
          NewProdOrderComp.FIELDERROR("Location Code",Text003)
        else
          HasError := true;
      if (NewProdOrderComp."Bin Code" <> OldProdOrderComp."Bin Code") and
         (not ReservMgt.CalcIsAvailTrackedQtyInBin(
            NewProdOrderComp."Item No.",NewProdOrderComp."Bin Code",
            NewProdOrderComp."Location Code",NewProdOrderComp."Variant Code",
            DATABASE::"Prod. Order Component",NewProdOrderComp.Status,
            NewProdOrderComp."Prod. Order No.",'',NewProdOrderComp."Prod. Order Line No.",
            NewProdOrderComp."Line No."))
      then begin
        if ShowError then
          NewProdOrderComp.FIELDERROR("Bin Code",Text003);
        HasError := true;
      end;
      if NewProdOrderComp."Variant Code" <> OldProdOrderComp."Variant Code" then
        if ShowError then
          NewProdOrderComp.FIELDERROR("Variant Code",Text003)
        else
          HasError := true;
      if NewProdOrderComp."Line No." <> OldProdOrderComp."Line No." then
        HasError := true;

      if HasError then
        if (NewProdOrderComp."Item No." <> OldProdOrderComp."Item No.") or
           FindReservEntry(NewProdOrderComp,TempReservEntry)
        then begin
          if NewProdOrderComp."Item No." <> OldProdOrderComp."Item No." then begin
            ReservMgt.SetProdOrderComponent(OldProdOrderComp);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetProdOrderComponent(NewProdOrderComp);
          end else begin
            ReservMgt.SetProdOrderComponent(NewProdOrderComp);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewProdOrderComp."Remaining Qty. (Base)");
        end;

      if HasError or (NewProdOrderComp."Due Date" <> OldProdOrderComp."Due Date")
      then begin
        AssignForPlanning(NewProdOrderComp);
        if (NewProdOrderComp."Item No." <> OldProdOrderComp."Item No.") or
           (NewProdOrderComp."Variant Code" <> OldProdOrderComp."Variant Code") or
           (NewProdOrderComp."Location Code" <> OldProdOrderComp."Location Code")
        then
          AssignForPlanning(OldProdOrderComp);
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@4(VAR NewProdOrderComp@1000 : Record "Prod. Order Component";VAR OldProdOrderComp@1001 : Record "Prod. Order Component");
    VAR
      ProdOrderComp@1002 : Record "Prod. Order Component";
    BEGIN
      if Blocked then
        exit;

      with NewProdOrderComp do begin
        if Status = Status::Finished then
          exit;
        if "Line No." = OldProdOrderComp."Line No." then
          if "Remaining Qty. (Base)" = OldProdOrderComp."Remaining Qty. (Base)" then
            exit;
        if "Line No." = 0 then
          if not ProdOrderComp.GET(Status,"Prod. Order No.","Prod. Order Line No.","Line No.") then
            exit;
        ReservMgt.SetProdOrderComponent(NewProdOrderComp);
        if "Qty. per Unit of Measure" <> OldProdOrderComp."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        if "Remaining Qty. (Base)" * OldProdOrderComp."Remaining Qty. (Base)" < 0 then
          ReservMgt.DeleteReservEntries(true,0)
        else
          ReservMgt.DeleteReservEntries(false,"Remaining Qty. (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Remaining Qty. (Base)");
        AssignForPlanning(NewProdOrderComp);
      end;
    END;

    [External]
    PROCEDURE TransferPOCompToPOComp@31(VAR OldProdOrderComp@1000 : Record "Prod. Order Component";VAR NewProdOrderComp@1001 : Record "Prod. Order Component";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldProdOrderComp,OldReservEntry) then
        exit;

      OldReservEntry.Lock;

      NewProdOrderComp.TestItemFields(OldProdOrderComp."Item No.",OldProdOrderComp."Variant Code",OldProdOrderComp."Location Code");

      OldReservEntry.TransferReservations(
        OldReservEntry,OldProdOrderComp."Item No.",OldProdOrderComp."Variant Code",OldProdOrderComp."Location Code",
        TransferAll,TransferQty,NewProdOrderComp."Qty. per Unit of Measure",
        DATABASE::"Prod. Order Component",NewProdOrderComp.Status,NewProdOrderComp."Prod. Order No.",'',
        NewProdOrderComp."Prod. Order Line No.",NewProdOrderComp."Line No.");
    END;

    [External]
    PROCEDURE TransferPOCompToItemJnlLine@3(VAR OldProdOrderComp@1000 : Record "Prod. Order Component";VAR NewItemJnlLine@1001 : Record "Item Journal Line";TransferQty@1002 : Decimal);
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
      ItemTrackingFilterIsSet@1006 : Boolean;
      EndLoop@1005 : Boolean;
      TrackedQty@1004 : Decimal;
      UnTrackedQty@1008 : Decimal;
      xTransferQty@1007 : Decimal;
    BEGIN
      if not FindReservEntry(OldProdOrderComp,OldReservEntry) then
        exit;

      // Store initial values
      OldReservEntry.CALCSUMS("Quantity (Base)");
      TrackedQty := -OldReservEntry."Quantity (Base)";
      xTransferQty := TransferQty;

      OldReservEntry.Lock;

      // Handle Item Tracking on consumption:
      CLEAR(CreateReservEntry);
      if NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::Consumption then
        if NewItemJnlLine.TrackingExists then begin
          CreateReservEntry.SetNewSerialLotNo(NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.");
          // Try to match against Item Tracking on the prod. order line:
          OldReservEntry.SetTrackingFilterFromItemJnlLine(NewItemJnlLine);
          if OldReservEntry.ISEMPTY then
            OldReservEntry.ClearTrackingFilter
          else
            ItemTrackingFilterIsSet := true;
        end;

      NewItemJnlLine.TestItemFields(OldProdOrderComp."Item No.",OldProdOrderComp."Variant Code",OldProdOrderComp."Location Code");

      if TransferQty = 0 then
        exit;

      if ReservEngineMgt.InitRecordSet2(OldReservEntry,NewItemJnlLine."Serial No.",NewItemJnlLine."Lot No.") then
        repeat
          OldReservEntry.TestItemFields(OldProdOrderComp."Item No.",OldProdOrderComp."Variant Code",OldProdOrderComp."Location Code");

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              NewItemJnlLine."Entry Type",NewItemJnlLine."Journal Template Name",NewItemJnlLine."Journal Batch Name",0,
              NewItemJnlLine."Line No.",NewItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

          if ReservEngineMgt.NEXTRecord(OldReservEntry) = 0 then
            if ItemTrackingFilterIsSet then begin
              OldReservEntry.ClearTrackingFilter;
              ItemTrackingFilterIsSet := false;
              EndLoop := not ReservEngineMgt.InitRecordSet(OldReservEntry);
            end else
              EndLoop := true;
        until EndLoop or (TransferQty = 0);

      // Handle remaining transfer quantity
      if TransferQty <> 0 then begin
        TrackedQty -= (xTransferQty - TransferQty);
        UnTrackedQty := OldProdOrderComp."Remaining Qty. (Base)" - TrackedQty;
        if TransferQty > UnTrackedQty then begin
          ReservMgt.SetProdOrderComponent(OldProdOrderComp);
          ReservMgt.DeleteReservEntries(false,OldProdOrderComp."Remaining Qty. (Base)");
        end;
      end;
    END;

    [External]
    PROCEDURE DeleteLineConfirm@20(VAR ProdOrderComp@1000 : Record "Prod. Order Component") : Boolean;
    BEGIN
      with ProdOrderComp do begin
        if not ReservEntryExist(ProdOrderComp) then
          exit(true);

        ReservMgt.SetProdOrderComponent(ProdOrderComp);
        if ReservMgt.DeleteItemTrackingConfirm then
          DeleteItemTracking := true;
      end;

      exit(DeleteItemTracking);
    END;

    [External]
    PROCEDURE DeleteLine@6(VAR ProdOrderComp@1000 : Record "Prod. Order Component");
    BEGIN
      if Blocked then
        exit;

      with ProdOrderComp do begin
        CLEAR(ReservMgt);
        ReservMgt.SetProdOrderComponent(ProdOrderComp);
        if DeleteItemTracking then
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(true,0);
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(ProdOrderComp);
      end;
    END;

    LOCAL PROCEDURE AssignForPlanning@7(VAR ProdOrderComp@1000 : Record "Prod. Order Component");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      with ProdOrderComp do begin
        if Status = Status::Simulated then
          exit;
        if "Item No." <> '' then
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code","Due Date");
      end;
    END;

    [External]
    PROCEDURE Block@8(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    [External]
    PROCEDURE CallItemTracking@14(VAR ProdOrderComp@1000 : Record "Prod. Order Component");
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingDocMgt@1003 : Codeunit "Item Tracking Doc. Management";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      if ProdOrderComp.Status = ProdOrderComp.Status::Finished then
        ItemTrackingDocMgt.ShowItemTrackingForProdOrderComp(DATABASE::"Prod. Order Component",
          ProdOrderComp."Prod. Order No.",ProdOrderComp."Prod. Order Line No.",ProdOrderComp."Line No.")
      else begin
        ProdOrderComp.TESTFIELD("Item No.");
        TrackingSpecification.InitFromProdOrderComp(ProdOrderComp);
        ItemTrackingLines.SetSourceSpec(TrackingSpecification,ProdOrderComp."Due Date");
        ItemTrackingLines.SetInbound(ProdOrderComp.IsInbound);
        ItemTrackingLines.RUNMODAL;
      end;
    END;

    [External]
    PROCEDURE UpdateItemTrackingAfterPosting@15(ProdOrderComponent@1000 : Record "Prod. Order Component");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      CreateReservEntry@1002 : Codeunit "Create Reserv. Entry";
    BEGIN
      // Used for updating Quantity to Handle after posting;
      ReservEntry.SetSourceFilter(
        DATABASE::"Prod. Order Component",ProdOrderComponent.Status,ProdOrderComponent."Prod. Order No.",
        ProdOrderComponent."Line No.",true);
      ReservEntry.SetSourceFilter2('',ProdOrderComponent."Prod. Order Line No.");
      CreateReservEntry.UpdateItemTrackingAfterPosting(ReservEntry);
    END;

    [External]
    PROCEDURE BindToPurchase@10(ProdOrderComp@1000 : Record "Prod. Order Component";PurchLine@1001 : Record "Purchase Line";ReservQty@1002 : Decimal;ReservQtyBase@1003 : Decimal);
    VAR
      TrackingSpecification@1004 : Record "Tracking Specification";
      ReservationEntry@1005 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.",
        PurchLine."Variant Code",PurchLine."Location Code",PurchLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(ProdOrderComp,PurchLine.Description,PurchLine."Expected Receipt Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToProdOrder@13(ProdOrderComp@1003 : Record "Prod. Order Component";ProdOrderLine@1002 : Record "Prod. Order Line";ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record "Tracking Specification";
      ReservationEntry@1004 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Prod. Order Line",ProdOrderLine.Status,ProdOrderLine."Prod. Order No.",'',ProdOrderLine."Line No.",0,
        ProdOrderLine."Variant Code",ProdOrderLine."Location Code",ProdOrderLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(ProdOrderComp,ProdOrderLine.Description,ProdOrderLine."Ending Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToRequisition@16(ProdOrderComp@1003 : Record "Prod. Order Component";ReqLine@1002 : Record "Requisition Line";ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record "Tracking Specification";
      ReservationEntry@1004 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Requisition Line",
        0,ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name",0,ReqLine."Line No.",
        ReqLine."Variant Code",ReqLine."Location Code",ReqLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(ProdOrderComp,ReqLine.Description,ReqLine."Due Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToAssembly@17(ProdOrderComp@1003 : Record "Prod. Order Component";AsmHeader@1002 : Record "Assembly Header";ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record "Tracking Specification";
      ReservationEntry@1004 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Assembly Header",AsmHeader."Document Type",AsmHeader."No.",'',0,0,
        AsmHeader."Variant Code",AsmHeader."Location Code",AsmHeader."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(ProdOrderComp,AsmHeader.Description,AsmHeader."Due Date",ReservQty,ReservQtyBase);
    END;

    [External]
    PROCEDURE BindToTransfer@18(ProdOrderComp@1003 : Record "Prod. Order Component";TransLine@1002 : Record "Transfer Line";ReservQty@1001 : Decimal;ReservQtyBase@1000 : Decimal);
    VAR
      TrackingSpecification@1005 : Record "Tracking Specification";
      ReservationEntry@1004 : Record "Reservation Entry";
    BEGIN
      SetBinding(ReservationEntry.Binding::"Order-to-Order");
      TrackingSpecification.InitTrackingSpecification2(
        DATABASE::"Transfer Line",1,TransLine."Document No.",'',0,TransLine."Line No.",
        TransLine."Variant Code",TransLine."Transfer-to Code",TransLine."Qty. per Unit of Measure");
      CreateReservationSetFrom(TrackingSpecification);
      CreateBindingReservation(ProdOrderComp,TransLine.Description,TransLine."Receipt Date",ReservQty,ReservQtyBase);
    END;

    BEGIN
    END.
  }
}

