OBJECT Table 1797 Data Migration Error
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Data Migration Error;
  }
  FIELDS
  {
    { 1   ;   ;Id                  ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Id }
    { 2   ;   ;Migration Type      ;Text250       ;CaptionML=ENU=Migration Type }
    { 3   ;   ;Destination Table ID;Integer       ;CaptionML=ENU=Destination Table ID }
    { 4   ;   ;Source Staging Table Record ID;RecordID;
                                                   CaptionML=ENU=Source Staging Table Record ID }
    { 5   ;   ;Error Message       ;Text250       ;CaptionML=ENU=Error Message }
    { 6   ;   ;Scheduled For Retry ;Boolean       ;CaptionML=ENU=Scheduled For Retry }
  }
  KEYS
  {
    {    ;Id                                      ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE CreateEntry@1(MigrationType@1000 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1002 : RecordID);
    VAR
      DataMigrationError@1003 : Record "Data Migration Error";
    BEGIN
      INIT;
      if DataMigrationError.FINDLAST then
        Id := DataMigrationError.Id + 1
      else
        Id := 1;
      VALIDATE("Migration Type",MigrationType);
      VALIDATE("Destination Table ID",DestinationTableId);
      VALIDATE("Source Staging Table Record ID",SourceStagingTableRecordId);
      VALIDATE("Error Message",COPYSTR(GETLASTERRORTEXT,1,250));
      VALIDATE("Scheduled For Retry",false);
      INSERT(true);
    END;

    [External]
    PROCEDURE CreateEntryNoStagingTable@5(MigrationType@1000 : Text[250];DestinationTableId@1001 : Integer);
    VAR
      DummyRecordId@1002 : RecordID;
    BEGIN
      CreateEntry(MigrationType,DestinationTableId,DummyRecordId);
    END;

    [External]
    PROCEDURE ClearEntry@2(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1000 : RecordID);
    BEGIN
      if FindEntry(MigrationType,DestinationTableId,SourceStagingTableRecordId) then
        DELETE(true);
    END;

    [External]
    PROCEDURE ClearEntryNoStagingTable@7(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer);
    VAR
      DummyRecordId@1000 : RecordID;
    BEGIN
      ClearEntry(MigrationType,DestinationTableId,DummyRecordId);
    END;

    [External]
    PROCEDURE FindEntry@4(MigrationType@1002 : Text[250];DestinationTableId@1001 : Integer;SourceStagingTableRecordId@1000 : RecordID) : Boolean;
    BEGIN
      SETRANGE("Migration Type",MigrationType);
      SETRANGE("Destination Table ID",DestinationTableId);
      SETRANGE("Source Staging Table Record ID",SourceStagingTableRecordId);
      exit(FINDFIRST);
    END;

    [External]
    PROCEDURE Ignore@3();
    VAR
      DataMigrationStatusFacade@1000 : Codeunit "Data Migration Status Facade";
    BEGIN
      DataMigrationStatusFacade.IgnoreErrors("Migration Type","Destination Table ID",1);
      DELETE(true);
    END;

    BEGIN
    END.
  }
}

