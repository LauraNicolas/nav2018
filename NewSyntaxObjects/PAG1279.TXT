OBJECT Page 1279 Service Connections
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Service Connections;
    InsertAllowed=false;
    DeleteAllowed=false;
    LinksAllowed=false;
    SourceTable="Service Connection";
    PageType=List;
    SourceTableTemporary=true;
    OnOpenPage=BEGIN
                 ReloadServiceConnections;
               END;

    OnAfterGetRecord=BEGIN
                       SetStyle;
                     END;

    OnAfterGetCurrRecord=VAR
                           RefreshPressed@1000 : Boolean;
                         BEGIN
                           RefreshPressed := CurrRecordNo = "No.";
                           if RefreshPressed then
                             Refresh
                           else
                             CurrRecordNo := "No.";
                           SetupActive := "Page ID" <> 0;
                           SetStyle;
                         END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      Name=ActionContainer6;
                      ActionContainerType=RelatedInformation }
      { 5       ;1   ;Action    ;
                      Name=Setup;
                      ShortCutKey=Return;
                      CaptionML=ENU=Setup;
                      ToolTipML=ENU=Get a connection to a service up and running or manage an connection that is already working.;
                      ApplicationArea=#Basic,#Suite;
                      Enabled=SetupActive;
                      Image=Setup;
                      Scope=Repeater;
                      OnAction=BEGIN
                                 CallSetup;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                Name=Name;
                ToolTipML=ENU=Specifies the service. The description is based on the name of the setup page that opens when you choose the Setup.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Name;
                ImplicitType=Text250 }

    { 4   ;2   ;Field     ;
                Name=Host Name;
                ToolTipML=ENU=Specifies the name of the web service. This is typically a URL.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Host Name";
                Visible=False;
                ImplicitType=Text250 }

    { 10  ;2   ;Field     ;
                Name=Status;
                ToolTipML=ENU=Specifies if the service is enabled or disabled.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Status;
                StyleExpr=StyleExpression;
                ImplicitType=Option }

  }
  CODE
  {
    VAR
      SetupActive@1000 : Boolean;
      StyleExpression@1001 : Text;
      CurrRecordNo@1002 : Text;

    LOCAL PROCEDURE CallSetup@1();
    VAR
      AssistedSetup@1004 : Record "Assisted Setup";
      RecordRefVariant@1001 : Variant;
      RecordRef@1000 : RecordRef;
    BEGIN
      if not SetupActive then
        exit;
      RecordRef.GET("Record ID");
      if ((Status = Status::Error) or (Status = Status::Disabled)) and
         ("Assisted Setup Page ID" > 0) and
         AssistedSetup.GET("Assisted Setup Page ID") and
         (AssistedSetup.Status = AssistedSetup.Status::"Not Completed") and
         AssistedSetup.Visible
      then
        AssistedSetup.Run
      else begin
        RecordRef.GET("Record ID");
        RecordRefVariant := RecordRef;
        PAGE.RUNMODAL("Page ID",RecordRefVariant);
      end;
      ReloadServiceConnections;
      if GET(xRec."No.") then;
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE SetStyle@3();
    BEGIN
      case Status of
        Status::Disabled:
          StyleExpression := 'Standard';
        Status::Connected,Status::Enabled:
          StyleExpression := 'Favorable';
        Status::Error:
          StyleExpression := 'Unfavorable';
      end
    END;

    LOCAL PROCEDURE Refresh@5();
    BEGIN
      ReloadServiceConnections;
      CurrRecordNo := '';
      if GET(xRec."No.") then;
      CurrPage.ACTIVATE(true);
    END;

    LOCAL PROCEDURE ReloadServiceConnections@4();
    BEGIN
      DELETEALL;
      OnRegisterServiceConnection(Rec);
    END;

    BEGIN
    END.
  }
}

