OBJECT Table 5870 BOM Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=;
    DataCaptionFields="No.",Description;
    CaptionML=ENU=BOM Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=Entry No. }
    { 2   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=,Item,Machine Center,Work Center,Resource;
                                                   OptionString=,Item,"Machine Center","Work Center",Resource }
    { 3   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST("Machine Center")) "Machine Center"
                                                                 ELSE IF (Type=CONST("Work Center")) "Work Center"
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   CaptionML=ENU=No. }
    { 5   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 6   ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE ("Resource No."=FIELD("No."));
                                                   CaptionML=ENU=Unit of Measure Code }
    { 7   ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                   CaptionML=ENU=Variant Code }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 9   ;   ;Replenishment System;Option        ;CaptionML=ENU=Replenishment System;
                                                   OptionCaptionML=ENU=Purchase,Prod. Order,Transfer,Assembly;
                                                   OptionString=Purchase,"Prod. Order",Transfer,Assembly }
    { 10  ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
    { 11  ;   ;Is Leaf             ;Boolean       ;CaptionML=ENU=Is Leaf }
    { 13  ;   ;Bottleneck          ;Boolean       ;CaptionML=ENU=Bottleneck }
    { 15  ;   ;Routing No.         ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=ENU=Routing No. }
    { 16  ;   ;Production BOM No.  ;Code20        ;TableRelation="Production BOM Header";
                                                   CaptionML=ENU=Production BOM No. }
    { 20  ;   ;Lot Size            ;Decimal       ;AccessByPermission=TableData "Production Order"=R;
                                                   CaptionML=ENU=Lot Size;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 21  ;   ;Low-Level Code      ;Integer       ;CaptionML=ENU=Low-Level Code;
                                                   Editable=false }
    { 22  ;   ;Rounding Precision  ;Decimal       ;InitValue=1;
                                                   CaptionML=ENU=Rounding Precision;
                                                   DecimalPlaces=0:5 }
    { 30  ;   ;Qty. per Parent     ;Decimal       ;CaptionML=ENU=Qty. per Parent;
                                                   DecimalPlaces=0:5 }
    { 31  ;   ;Qty. per Top Item   ;Decimal       ;CaptionML=ENU=Qty. per Top Item;
                                                   DecimalPlaces=0:5 }
    { 32  ;   ;Able to Make Top Item;Decimal      ;CaptionML=ENU=Able to Make Top Item;
                                                   DecimalPlaces=0:5 }
    { 33  ;   ;Able to Make Parent ;Decimal       ;CaptionML=ENU=Able to Make Parent;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Available Quantity  ;Decimal       ;CaptionML=ENU=Available Quantity;
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Gross Requirement   ;Decimal       ;CaptionML=ENU=Gross Requirement;
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Scheduled Receipts  ;Decimal       ;CaptionML=ENU=Scheduled Receipts;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Unused Quantity     ;Decimal       ;CaptionML=ENU=Unused Quantity;
                                                   DecimalPlaces=0:5 }
    { 40  ;   ;Lead Time Calculation;DateFormula  ;CaptionML=ENU=Lead Time Calculation }
    { 41  ;   ;Lead-Time Offset    ;DateFormula   ;CaptionML=ENU=Lead-Time Offset }
    { 42  ;   ;Rolled-up Lead-Time Offset;Integer ;CaptionML=ENU=Rolled-up Lead-Time Offset }
    { 43  ;   ;Needed by Date      ;Date          ;CaptionML=ENU=Needed by Date }
    { 45  ;   ;Safety Lead Time    ;DateFormula   ;CaptionML=ENU=Safety Lead Time }
    { 50  ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2 }
    { 52  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5 }
    { 54  ;   ;Overhead Rate       ;Decimal       ;CaptionML=ENU=Overhead Rate;
                                                   AutoFormatType=2 }
    { 55  ;   ;Scrap %             ;Decimal       ;CaptionML=ENU=Scrap %;
                                                   BlankZero=true }
    { 56  ;   ;Scrap Qty. per Parent;Decimal      ;CaptionML=ENU=Scrap Qty. per Parent;
                                                   DecimalPlaces=0:5 }
    { 57  ;   ;Scrap Qty. per Top Item;Decimal    ;CaptionML=ENU=Scrap Qty. per Top Item;
                                                   DecimalPlaces=0:5 }
    { 59  ;   ;Resource Usage Type ;Option        ;CaptionML=ENU=Resource Usage Type;
                                                   OptionCaptionML=ENU=Direct,Fixed;
                                                   OptionString=Direct,Fixed }
    { 61  ;   ;Single-Level Material Cost;Decimal ;CaptionML=ENU=Single-Level Material Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true;
                                                   AutoFormatType=2 }
    { 62  ;   ;Single-Level Capacity Cost;Decimal ;CaptionML=ENU=Single-Level Capacity Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true;
                                                   AutoFormatType=2 }
    { 63  ;   ;Single-Level Subcontrd. Cost;Decimal;
                                                   AccessByPermission=TableData "Machine Center"=R;
                                                   CaptionML=ENU=Single-Level Subcontrd. Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true;
                                                   AutoFormatType=2 }
    { 64  ;   ;Single-Level Cap. Ovhd Cost;Decimal;CaptionML=ENU=Single-Level Cap. Ovhd Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true;
                                                   AutoFormatType=2 }
    { 65  ;   ;Single-Level Mfg. Ovhd Cost;Decimal;CaptionML=ENU=Single-Level Mfg. Ovhd Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true;
                                                   AutoFormatType=2 }
    { 66  ;   ;Single-Level Scrap Cost;Decimal    ;CaptionML=ENU=Single-Level Scrap Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true }
    { 71  ;   ;Rolled-up Material Cost;Decimal    ;CaptionML=ENU=Rolled-up Material Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 72  ;   ;Rolled-up Capacity Cost;Decimal    ;CaptionML=ENU=Rolled-up Capacity Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 73  ;   ;Rolled-up Subcontracted Cost;Decimal;
                                                   AccessByPermission=TableData "Machine Center"=R;
                                                   CaptionML=ENU=Rolled-up Subcontracted Cost;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 74  ;   ;Rolled-up Capacity Ovhd. Cost;Decimal;
                                                   CaptionML=ENU=Rolled-up Capacity Ovhd. Cost;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 75  ;   ;Rolled-up Mfg. Ovhd Cost;Decimal   ;CaptionML=ENU=Rolled-up Mfg. Ovhd Cost;
                                                   BlankZero=true;
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 76  ;   ;Rolled-up Scrap Cost;Decimal       ;CaptionML=ENU=Rolled-up Scrap Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true }
    { 81  ;   ;Total Cost          ;Decimal       ;CaptionML=ENU=Total Cost;
                                                   DecimalPlaces=2:5;
                                                   BlankZero=true }
    { 82  ;   ;BOM Unit of Measure Code;Code10    ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE ("Resource No."=FIELD("No."));
                                                   CaptionML=ENU=BOM Unit of Measure Code }
    { 83  ;   ;Qty. per BOM Line   ;Decimal       ;CaptionML=ENU=Qty. per BOM Line;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Low-Level Code"                         }
    {    ;Type,"No.",Indentation                  ;SumIndexFields="Able to Make Parent" }
    {    ;"Total Cost"                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1009 : Record "General Ledger Setup";
      Text001@1008 : TextConst 'ENU=The Low-level Code for Item %1 has not been calculated.';
      Text002@1007 : TextConst 'ENU=The Quantity per. field in the BOM for Item %1 has not been set.';
      Text003@1006 : TextConst 'ENU=Routing %1 has not been certified.';
      Text004@1005 : TextConst 'ENU=Production BOM %1 has not been certified.';
      Text005@1004 : TextConst 'ENU=Item %1 is not a BOM. Therefore, the Replenishment System field must be set to Purchase.';
      Text006@1003 : TextConst 'ENU=Replenishment System for Item %1 is Assembly, but the item is not an assembly BOM. Verify that this is correct.';
      Text007@1002 : TextConst 'ENU=Replenishment System for Item %1 is Prod. Order, but the item does not have a production BOM. Verify that this is correct.';
      Text008@1001 : TextConst 'ENU=Item %1 is a BOM, but the Replenishment System field is not set to Assembly or Prod. Order. Verify that the value is correct.';
      GLSetupRead@1010 : Boolean;

    [External]
    PROCEDURE TransferFromItem@4(VAR EntryNo@1003 : Integer;Item@1001 : Record Item;DemandDate@1002 : Date);
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      InitFromItem(Item);

      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Needed by Date" := DemandDate;
      Indentation := 0;

      INSERT(true);
    END;

    [External]
    PROCEDURE TransferFromAsmHeader@7(VAR EntryNo@1001 : Integer;AsmHeader@1003 : Record "Assembly Header");
    VAR
      BOMItem@1000 : Record Item;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(AsmHeader."Item No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Unit of Measure Code" := AsmHeader."Unit of Measure Code";
      "Location Code" := AsmHeader."Location Code";
      "Variant Code" := AsmHeader."Variant Code";
      "Needed by Date" := AsmHeader."Due Date";
      Indentation := 0;

      INSERT(true);
    END;

    [External]
    PROCEDURE TransferFromAsmLine@8(VAR EntryNo@1001 : Integer;AsmLine@1000 : Record "Assembly Line");
    VAR
      BOMItem@1002 : Record Item;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(AsmLine."No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := AsmLine."Quantity per";
      "Qty. per Top Item" := AsmLine."Quantity per";
      "Unit of Measure Code" := AsmLine."Unit of Measure Code";
      "Location Code" := AsmLine."Location Code";
      "Variant Code" := AsmLine."Variant Code";
      "Needed by Date" := AsmLine."Due Date";
      "Lead-Time Offset" := AsmLine."Lead-Time Offset";
      Indentation := 1;

      INSERT(true);
    END;

    [External]
    PROCEDURE TransferFromBOMComp@5(VAR EntryNo@1003 : Integer;BOMComp@1002 : Record "BOM Component";NewIndentation@1004 : Integer;ParentQtyPer@1001 : Decimal;ParentScrapQtyPer@1005 : Decimal;NeedByDate@1008 : Date;ParentLocationCode@1006 : Code[10]);
    VAR
      BOMItem@1000 : Record Item;
      BOMRes@1007 : Record Resource;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;

      case BOMComp.Type of
        BOMComp.Type::Item:
          begin
            BOMItem.GET(BOMComp."No.");
            InitFromItem(BOMItem);
          end;
        BOMComp.Type::Resource:
          begin
            BOMRes.GET(BOMComp."No.");
            InitFromRes(BOMRes);
            "Resource Usage Type" := BOMComp."Resource Usage Type";
          end;
      end;

      "Qty. per Parent" := BOMComp."Quantity per";
      "Qty. per Top Item" := ROUND(BOMComp."Quantity per" * ParentQtyPer,0.00001);

      "Scrap Qty. per Top Item" :=
        "Qty. per Top Item" - ROUND((ParentQtyPer - ParentScrapQtyPer) * "Qty. per Parent",0.00001);

      "Unit of Measure Code" := BOMComp."Unit of Measure Code";
      "Variant Code" := BOMComp."Variant Code";
      "Location Code" := ParentLocationCode;
      "Lead-Time Offset" := BOMComp."Lead-Time Offset";
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      INSERT(true);
    END;

    [External]
    PROCEDURE TransferFromProdComp@6(VAR EntryNo@1007 : Integer;ProdBOMLine@1000 : Record "Production BOM Line";NewIndentation@1003 : Integer;ParentQtyPer@1002 : Decimal;ParentScrapQtyPer@1006 : Decimal;ParentScrapPct@1017 : Decimal;NeedByDate@1001 : Date;ParentLocationCode@1005 : Code[10];ParentItem@1009 : Record Item;BOMQtyPerUOM@1008 : Decimal);
    VAR
      BOMItem@1004 : Record Item;
      UOMMgt@1010 : Codeunit "Unit of Measure Management";
      CostCalculationMgt@1020 : Codeunit "Cost Calculation Management";
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdBOMLine."No.");
      InitFromItem(BOMItem);

      if ParentItem."Lot Size" = 0 then
        ParentItem."Lot Size" := 1;

      "Qty. per Parent" :=
        CostCalculationMgt.CalcCompItemQtyBase(
          ProdBOMLine,WORKDATE,
          CostCalculationMgt.CalcQtyAdjdForBOMScrap(ParentItem."Lot Size",ParentScrapPct),ParentItem."Routing No.",true) /
        UOMMgt.GetQtyPerUnitOfMeasure(BOMItem,ProdBOMLine."Unit of Measure Code") /
        BOMQtyPerUOM / ParentItem."Lot Size";
      "Qty. per Top Item" := ROUND(ParentQtyPer * "Qty. per Parent",0.00001);
      "Qty. per Parent" := ROUND("Qty. per Parent",0.00001);

      "Scrap Qty. per Parent" := "Qty. per Parent" - (ProdBOMLine."Quantity per" / BOMQtyPerUOM);
      "Scrap Qty. per Top Item" :=
        "Qty. per Top Item" -
        ROUND((ParentQtyPer - ParentScrapQtyPer) * ("Qty. per Parent" - "Scrap Qty. per Parent"),0.00001);
      "Scrap Qty. per Parent" := ROUND("Scrap Qty. per Parent",0.00001);

      "Qty. per BOM Line" := ProdBOMLine."Quantity per";
      "Unit of Measure Code" := ProdBOMLine."Unit of Measure Code";
      "Variant Code" := ProdBOMLine."Variant Code";
      "Location Code" := ParentLocationCode;
      "Lead-Time Offset" := ProdBOMLine."Lead-Time Offset";
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      INSERT(true);
    END;

    [External]
    PROCEDURE TransferFromProdOrderLine@26(VAR EntryNo@1001 : Integer;ProdOrderLine@1003 : Record "Prod. Order Line");
    VAR
      BOMItem@1000 : Record Item;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdOrderLine."Item No.");
      InitFromItem(BOMItem);

      "Scrap %" := ProdOrderLine."Scrap %";
      "Production BOM No." := ProdOrderLine."Production BOM No.";
      "Qty. per Parent" := 1;
      "Qty. per Top Item" := 1;
      "Unit of Measure Code" := ProdOrderLine."Unit of Measure Code";
      "Variant Code" := ProdOrderLine."Variant Code";
      "Location Code" := ProdOrderLine."Location Code";
      "Needed by Date" := ProdOrderLine."Due Date";
      Indentation := 0;

      INSERT(true);
    END;

    [External]
    PROCEDURE TransferFromProdOrderComp@25(VAR EntryNo@1003 : Integer;ProdOrderComp@1000 : Record "Prod. Order Component");
    VAR
      BOMItem@1002 : Record Item;
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;
      Type := Type::Item;

      BOMItem.GET(ProdOrderComp."Item No.");
      InitFromItem(BOMItem);

      "Qty. per Parent" := ProdOrderComp."Quantity per";
      "Qty. per Top Item" := ProdOrderComp."Quantity per";
      "Unit of Measure Code" := ProdOrderComp."Unit of Measure Code";
      "Variant Code" := ProdOrderComp."Variant Code";
      "Location Code" := ProdOrderComp."Location Code";
      "Needed by Date" := ProdOrderComp."Due Date";
      "Lead-Time Offset" := ProdOrderComp."Lead-Time Offset";
      Indentation := 1;

      INSERT(true);
    END;

    [External]
    PROCEDURE TransferFromProdRouting@14(VAR EntryNo@1007 : Integer;RoutingLine@1000 : Record "Routing Line";NewIndentation@1005 : Integer;ParentQtyPer@1004 : Decimal;NeedByDate@1003 : Date;ParentLocationCode@1002 : Code[10]);
    VAR
      MachineCenter@1001 : Record "Machine Center";
      WorkCenter@1006 : Record "Work Center";
    BEGIN
      INIT;
      EntryNo += 1;
      "Entry No." := EntryNo;

      case RoutingLine.Type of
        RoutingLine.Type::"Machine Center":
          begin
            MachineCenter.GET(RoutingLine."No.");
            InitFromMachineCenter(MachineCenter);
          end;
        RoutingLine.Type::"Work Center":
          begin
            WorkCenter.GET(RoutingLine."No.");
            InitFromWorkCenter(WorkCenter);
          end;
      end;

      "Qty. per Parent" := CalcQtyPerParentFromProdRouting(RoutingLine);
      "Qty. per Top Item" := "Qty. per Parent" * ParentQtyPer;
      "Location Code" := ParentLocationCode;
      "Needed by Date" := NeedByDate;
      Indentation := NewIndentation;

      INSERT(true);
    END;

    LOCAL PROCEDURE InitFromItem@19(Item@1001 : Record Item);
    VAR
      SKU@1003 : Record "Stockkeeping Unit";
      VersionMgt@1000 : Codeunit VersionManagement;
      VersionCode@1002 : Code[20];
    BEGIN
      Type := Type::Item;
      "No." := Item."No.";
      Description := Item.Description;
      "Unit of Measure Code" := Item."Base Unit of Measure";

      "Production BOM No." := Item."Production BOM No.";
      "Routing No." := Item."Routing No.";
      if SKU.GET(GETFILTER("Location Code"),"No.",GETFILTER("Variant Code")) then
        "Replenishment System" := SKU."Replenishment System"
      else
        "Replenishment System" := Item."Replenishment System";
      if "Replenishment System" = "Replenishment System"::"Prod. Order" then begin
        VersionCode := VersionMgt.GetBOMVersion("Production BOM No.",WORKDATE,true);
        "BOM Unit of Measure Code" := VersionMgt.GetBOMUnitOfMeasure("Production BOM No.",VersionCode);
      end;

      "Lot Size" := Item."Lot Size";
      "Scrap %" := Item."Scrap %";
      "Indirect Cost %" := Item."Indirect Cost %";
      "Overhead Rate" := Item."Overhead Rate";
      "Low-Level Code" := Item."Low-Level Code";
      "Rounding Precision" := Item."Rounding Precision";
      "Lead Time Calculation" := Item."Lead Time Calculation";
      "Safety Lead Time" := Item."Safety Lead Time";

      SETRANGE("Location Code");
      SETRANGE("Variant Code");
    END;

    [External]
    PROCEDURE InitFromRes@3(Res@1000 : Record Resource);
    BEGIN
      Type := Type::Resource;
      "No." := Res."No.";
      Description := Res.Name;
      "Unit of Measure Code" := Res."Base Unit of Measure";
      "Replenishment System" := "Replenishment System"::Transfer;
      "Is Leaf" := true;
    END;

    [External]
    PROCEDURE InitFromMachineCenter@10(MachineCenter@1000 : Record "Machine Center");
    VAR
      WorkCenter@1001 : Record "Work Center";
    BEGIN
      Type := Type::"Machine Center";
      "No." := MachineCenter."No.";
      Description := MachineCenter.Name;
      if MachineCenter."Work Center No." <> '' then begin
        WorkCenter.GET(MachineCenter."Work Center No.");
        "Unit of Measure Code" := WorkCenter."Unit of Measure Code";
      end;

      "Replenishment System" := "Replenishment System"::Transfer;
      "Is Leaf" := true;
    END;

    [External]
    PROCEDURE InitFromWorkCenter@11(WorkCenter@1000 : Record "Work Center");
    BEGIN
      Type := Type::"Work Center";
      "No." := WorkCenter."No.";
      Description := WorkCenter.Name;
      "Unit of Measure Code" := WorkCenter."Unit of Measure Code";

      "Replenishment System" := "Replenishment System"::Transfer;
      "Is Leaf" := true;
    END;

    LOCAL PROCEDURE SetAbleToMakeToZeroIfNegative@1();
    BEGIN
      if "Able to Make Parent" < 0 then
        "Able to Make Parent" := 0;
      if "Able to Make Top Item" < 0 then
        "Able to Make Top Item" := 0;
    END;

    [External]
    PROCEDURE UpdateAbleToMake@2(AvailQty@1000 : Decimal);
    VAR
      Item@1001 : Record Item;
      UOMMgt@1002 : Codeunit "Unit of Measure Management";
      QtyPerUOM@1003 : Decimal;
    BEGIN
      QtyPerUOM := 1;
      if Type = Type::Item then begin
        Item.GET("No.");
        QtyPerUOM := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
      end;

      if "Is Leaf" then begin
        if "Qty. per Parent" <> 0 then
          "Able to Make Parent" := ROUND(AvailQty / ("Qty. per Parent" * QtyPerUOM),0.00001);
        if "Qty. per Top Item" <> 0 then
          "Able to Make Top Item" := ROUND(AvailQty / ("Qty. per Top Item" * QtyPerUOM),0.00001);
      end else
        if Indentation = 0 then begin
          "Able to Make Parent" := "Able to Make Parent";
          "Able to Make Top Item" := "Able to Make Top Item";
        end else begin
          if "Qty. per Parent" <> 0 then
            "Able to Make Parent" := ROUND((AvailQty + "Able to Make Parent") / ("Qty. per Parent" * QtyPerUOM),0.00001);
          if "Qty. per Top Item" <> 0 then
            "Able to Make Top Item" := ROUND(AvailQty / ("Qty. per Top Item" * QtyPerUOM) + "Able to Make Top Item",0.00001);
        end;

      SetAbleToMakeToZeroIfNegative;
    END;

    [External]
    PROCEDURE AddMaterialCost@20(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Material Cost" += SingleLvlCostAmt;
      "Rolled-up Material Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddCapacityCost@9(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Capacity Cost" += SingleLvlCostAmt;
      "Rolled-up Capacity Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddSubcontrdCost@18(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Subcontrd. Cost" += SingleLvlCostAmt;
      "Rolled-up Subcontracted Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddCapOvhdCost@17(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Cap. Ovhd Cost" += SingleLvlCostAmt;
      "Rolled-up Capacity Ovhd. Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddMfgOvhdCost@12(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Mfg. Ovhd Cost" += SingleLvlCostAmt;
      "Rolled-up Mfg. Ovhd Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE AddScrapCost@23(SingleLvlCostAmt@1001 : Decimal;RolledUpCostAmt@1000 : Decimal);
    BEGIN
      "Single-Level Scrap Cost" += SingleLvlCostAmt;
      "Rolled-up Scrap Cost" += RolledUpCostAmt;
    END;

    [External]
    PROCEDURE GetItemCosts@13();
    VAR
      Item@1000 : Record Item;
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      TESTFIELD(Type,Type::Item);
      Item.GET("No.");

      "Unit Cost" := Item."Unit Cost";
      "Single-Level Material Cost" := "Unit Cost";
      "Rolled-up Material Cost" := "Single-Level Material Cost";

      if "Qty. per Parent" <> 0 then
        "Single-Level Scrap Cost" := "Single-Level Material Cost" * "Scrap Qty. per Parent" / "Qty. per Parent";
      if "Qty. per Top Item" <> 0 then
        "Rolled-up Scrap Cost" := "Rolled-up Material Cost" * "Scrap Qty. per Top Item" / "Qty. per Top Item";
      RoundCosts(UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code") * "Qty. per Top Item");
    END;

    [External]
    PROCEDURE GetResCosts@15();
    VAR
      Res@1000 : Record Resource;
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      TESTFIELD(Type,Type::Resource);
      Res.GET("No.");

      "Unit Cost" := Res."Unit Cost";
      "Indirect Cost %" := Res."Indirect Cost %";

      "Single-Level Capacity Cost" := Res."Direct Unit Cost";
      "Single-Level Cap. Ovhd Cost" := Res."Unit Cost" - Res."Direct Unit Cost";

      "Rolled-up Capacity Cost" := Res."Direct Unit Cost";
      "Rolled-up Capacity Ovhd. Cost" := Res."Unit Cost" - Res."Direct Unit Cost";

      if "Resource Usage Type" = "Resource Usage Type"::Fixed then
        RoundCosts(UOMMgt.GetResQtyPerUnitOfMeasure(Res,"Unit of Measure Code") * "Qty. per Parent")
      else
        RoundCosts(UOMMgt.GetResQtyPerUnitOfMeasure(Res,"Unit of Measure Code") * "Qty. per Top Item");
    END;

    [External]
    PROCEDURE RoundCosts@77(ShareOfTotalCost@1003 : Decimal);
    BEGIN
      "Single-Level Material Cost" := RoundUnitAmt("Single-Level Material Cost",ShareOfTotalCost);
      "Single-Level Capacity Cost" := RoundUnitAmt("Single-Level Capacity Cost",ShareOfTotalCost);
      "Single-Level Subcontrd. Cost" := RoundUnitAmt("Single-Level Subcontrd. Cost",ShareOfTotalCost);
      "Single-Level Cap. Ovhd Cost" := RoundUnitAmt("Single-Level Cap. Ovhd Cost",ShareOfTotalCost);
      "Single-Level Mfg. Ovhd Cost" := RoundUnitAmt("Single-Level Mfg. Ovhd Cost",ShareOfTotalCost);
      "Single-Level Scrap Cost" := RoundUnitAmt("Single-Level Scrap Cost",ShareOfTotalCost);

      "Rolled-up Material Cost" := RoundUnitAmt("Rolled-up Material Cost",ShareOfTotalCost);
      "Rolled-up Capacity Cost" := RoundUnitAmt("Rolled-up Capacity Cost",ShareOfTotalCost);
      "Rolled-up Subcontracted Cost" := RoundUnitAmt("Rolled-up Subcontracted Cost",ShareOfTotalCost);
      "Rolled-up Capacity Ovhd. Cost" := RoundUnitAmt("Rolled-up Capacity Ovhd. Cost",ShareOfTotalCost);
      "Rolled-up Mfg. Ovhd Cost" := RoundUnitAmt("Rolled-up Mfg. Ovhd Cost",ShareOfTotalCost);
      "Rolled-up Scrap Cost" := RoundUnitAmt("Rolled-up Scrap Cost",ShareOfTotalCost);
    END;

    LOCAL PROCEDURE RoundUnitAmt@39(Amt@1001 : Decimal;ShareOfCost@1000 : Decimal) : Decimal;
    BEGIN
      GetGLSetup;
      exit(ROUND(Amt * ShareOfCost,GLSetup."Unit-Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE CalcOvhdCost@21();
    VAR
      Item@1002 : Record Item;
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
      LotSize@1000 : Decimal;
    BEGIN
      LotSize := 1;
      if "Lot Size" <> 0 then
        LotSize := "Lot Size";

      Item.GET("No.");

      "Overhead Rate" :=
        RoundUnitAmt("Overhead Rate",UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code") * "Qty. per Top Item");

      "Single-Level Mfg. Ovhd Cost" +=
        (("Single-Level Material Cost" +
          "Single-Level Capacity Cost" +
          "Single-Level Subcontrd. Cost" +
          "Single-Level Cap. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * LotSize);
      "Single-Level Mfg. Ovhd Cost" := RoundUnitAmt("Single-Level Mfg. Ovhd Cost",1);

      "Rolled-up Mfg. Ovhd Cost" +=
        (("Rolled-up Material Cost" +
          "Rolled-up Capacity Cost" +
          "Rolled-up Subcontracted Cost" +
          "Rolled-up Capacity Ovhd. Cost" +
          "Rolled-up Mfg. Ovhd Cost") *
         "Indirect Cost %" / 100) +
        ("Overhead Rate" * LotSize);
      "Rolled-up Mfg. Ovhd Cost" := RoundUnitAmt("Rolled-up Mfg. Ovhd Cost",1);
    END;

    [External]
    PROCEDURE CalcDirectCost@27() : Decimal;
    BEGIN
      exit(
        "Single-Level Material Cost" +
        "Single-Level Capacity Cost" +
        "Single-Level Subcontrd. Cost");
    END;

    [External]
    PROCEDURE CalcIndirectCost@24() : Decimal;
    BEGIN
      exit("Single-Level Mfg. Ovhd Cost" + "Single-Level Cap. Ovhd Cost");
    END;

    [External]
    PROCEDURE CalcUnitCost@16();
    BEGIN
      "Total Cost" := CalcDirectCost + CalcIndirectCost;
      "Unit Cost" := 0;
      if "Qty. per Top Item" <> 0 then
        "Unit Cost" := ROUND("Total Cost" / "Qty. per Top Item",0.00001);
    END;

    LOCAL PROCEDURE CalcQtyPerParentFromProdRouting@41(RoutingLine@1000 : Record "Routing Line") : Decimal;
    VAR
      WorkCenter@1008 : Record "Work Center";
      CalendarMgt@1001 : Codeunit CalendarManagement;
      BaseQty@1002 : Decimal;
      SetupTimeFactor@1003 : Decimal;
      RunTimeFactor@1004 : Decimal;
      WaitTimeFactor@1005 : Decimal;
      MoveTimeFactor@1006 : Decimal;
      CurrentTimeFactor@1007 : Decimal;
    BEGIN
      SetupTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Setup Time Unit of Meas. Code");
      RunTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Run Time Unit of Meas. Code");
      WaitTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Wait Time Unit of Meas. Code");
      MoveTimeFactor := CalendarMgt.TimeFactor(RoutingLine."Move Time Unit of Meas. Code");

      BaseQty :=
        RoutingLine."Setup Time" * SetupTimeFactor + RoutingLine."Run Time" * RunTimeFactor +
        RoutingLine."Wait Time" * WaitTimeFactor + RoutingLine."Move Time" * MoveTimeFactor;

      if "Unit of Measure Code" = '' then begin
        // select base UOM from Setup/Run/Wait/Move UOMs
        CurrentTimeFactor := SetupTimeFactor;
        "Unit of Measure Code" := RoutingLine."Setup Time Unit of Meas. Code";
        if CurrentTimeFactor > RunTimeFactor then begin
          CurrentTimeFactor := RunTimeFactor;
          "Unit of Measure Code" := RoutingLine."Run Time Unit of Meas. Code";
        end;
        if CurrentTimeFactor > WaitTimeFactor then begin
          CurrentTimeFactor := WaitTimeFactor;
          "Unit of Measure Code" := RoutingLine."Wait Time Unit of Meas. Code";
        end;
        if CurrentTimeFactor > MoveTimeFactor then begin
          CurrentTimeFactor := MoveTimeFactor;
          "Unit of Measure Code" := RoutingLine."Move Time Unit of Meas. Code";
        end;
      end;

      if not WorkCenter.GET(RoutingLine."Work Center No.") then
        WorkCenter.INIT;
      exit(ROUND(BaseQty / CalendarMgt.TimeFactor("Unit of Measure Code"),WorkCenter."Calendar Rounding Precision"));
    END;

    LOCAL PROCEDURE IsLowLevelOk@33(LogWarning@1000 : Boolean;VAR BOMWarningLog@1005 : Record "BOM Warning Log") : Boolean;
    VAR
      Item@1004 : Record Item;
    BEGIN
      if Type <> Type::Item then
        exit(true);
      if "No." = '' then
        exit(true);

      Item.GET("No.");
      if TraverseIsLowLevelOk(Item) then
        exit(true);

      if LogWarning then
        BOMWarningLog.SetWarning(STRSUBSTNO(Text001,Item."No."),DATABASE::Item,Item.GETPOSITION);
    END;

    LOCAL PROCEDURE TraverseIsLowLevelOk@36(ParentItem@1000 : Record Item) : Boolean;
    VAR
      ParentBOMBuffer@1001 : Record "BOM Buffer";
      ChildItem@1004 : Record Item;
    BEGIN
      if Type <> Type::Item then
        exit(true);
      if "No." = '' then
        exit(true);

      ParentItem.GET("No.");
      ParentBOMBuffer := Rec;
      while (NEXT <> 0) and (ParentBOMBuffer.Indentation < Indentation) do
        if (ParentBOMBuffer.Indentation + 1 = Indentation) and (Type = Type::Item) and ("No." <> '') then begin
          ChildItem.GET("No.");
          if ParentItem."Low-Level Code" >= ChildItem."Low-Level Code" then begin
            Rec := ParentBOMBuffer;
            exit(false);
          end;
        end;

      Rec := ParentBOMBuffer;
      exit(true);
    END;

    LOCAL PROCEDURE IsQtyPerOk@32(LogWarning@1000 : Boolean;VAR BOMWarningLog@1004 : Record "BOM Warning Log") : Boolean;
    VAR
      Item@1002 : Record Item;
      CopyOfBOMBuffer@1001 : Record "BOM Buffer";
      ProdBOMHeader@1005 : Record "Production BOM Header";
    BEGIN
      if "Qty. per Parent" <> 0 then
        exit(true);
      if "No." = '' then
        exit(true);
      if Indentation = 0 then
        exit(true);
      if Type in [Type::"Machine Center",Type::"Work Center"] then
        exit(true);

      if LogWarning then begin
        CopyOfBOMBuffer.COPY(Rec);
        RESET;
        SETRANGE(Indentation,0,Indentation);
        SETRANGE(Type,Type::Item);
        while (NEXT(-1) <> 0) and (Indentation >= CopyOfBOMBuffer.Indentation) do
          ;
        if "Entry No." <> CopyOfBOMBuffer."Entry No." then begin
          Item.GET("No.");
          Item.CALCFIELDS("Assembly BOM");
          if Item."Assembly BOM" then
            BOMWarningLog.SetWarning(STRSUBSTNO(Text002,Item."No."),DATABASE::Item,Item.GETPOSITION)
          else
            if ProdBOMHeader.GET(Item."Production BOM No.") then
              BOMWarningLog.SetWarning(STRSUBSTNO(Text002,Item."No."),DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION)
        end;
        COPY(CopyOfBOMBuffer);
      end;
    END;

    LOCAL PROCEDURE IsProdBOMOk@31(LogWarning@1001 : Boolean;VAR BOMWarningLog@1002 : Record "BOM Warning Log") : Boolean;
    VAR
      ProdBOMHeader@1000 : Record "Production BOM Header";
    BEGIN
      if "Production BOM No." = '' then
        exit(true);
      ProdBOMHeader.GET("Production BOM No.");
      if ProdBOMHeader.Status = ProdBOMHeader.Status::Certified then
        exit(true);

      if LogWarning then
        BOMWarningLog.SetWarning(STRSUBSTNO(Text004,ProdBOMHeader."No."),DATABASE::"Production BOM Header",ProdBOMHeader.GETPOSITION);
    END;

    LOCAL PROCEDURE IsRoutingOk@30(LogWarning@1000 : Boolean;VAR BOMWarningLog@1002 : Record "BOM Warning Log") : Boolean;
    VAR
      RoutingHeader@1001 : Record "Routing Header";
    BEGIN
      if "Routing No." = '' then
        exit(true);
      RoutingHeader.GET("Routing No.");
      if RoutingHeader.Status = RoutingHeader.Status::Certified then
        exit(true);

      if LogWarning then
        BOMWarningLog.SetWarning(STRSUBSTNO(Text003,RoutingHeader."No."),DATABASE::"Routing Header",RoutingHeader.GETPOSITION);
    END;

    LOCAL PROCEDURE IsReplenishmentOk@29(LogWarning@1000 : Boolean;VAR BOMWarningLog@1002 : Record "BOM Warning Log") : Boolean;
    VAR
      Item@1001 : Record Item;
    BEGIN
      if Type <> Type::Item then
        exit(true);
      if "No." = '' then
        exit(true);

      Item.GET("No.");
      if "Is Leaf" then begin
        if Item."Replenishment System" in ["Replenishment System"::Purchase,"Replenishment System"::Transfer] then
          exit(true);
        if LogWarning then
          BOMWarningLog.SetWarning(STRSUBSTNO(Text005,Item."No."),DATABASE::Item,Item.GETPOSITION);
      end else begin
        if Item."Replenishment System" in ["Replenishment System"::"Prod. Order","Replenishment System"::Assembly] then
          exit(IsBOMOk(LogWarning,BOMWarningLog));
        if LogWarning then
          BOMWarningLog.SetWarning(STRSUBSTNO(Text008,Item."No."),DATABASE::Item,Item.GETPOSITION);
      end;
    END;

    LOCAL PROCEDURE IsBOMOk@28(LogWarning@1001 : Boolean;VAR BOMWarningLog@1002 : Record "BOM Warning Log") : Boolean;
    VAR
      Item@1000 : Record Item;
    BEGIN
      if Type <> Type::Item then
        exit(true);
      if "No." = '' then
        exit(true);

      Item.GET("No.");
      case Item."Replenishment System" of
        Item."Replenishment System"::Assembly:
          begin
            Item.CALCFIELDS("Assembly BOM");
            if Item."Assembly BOM" then
              exit(true);
            if LogWarning then
              BOMWarningLog.SetWarning(STRSUBSTNO(Text006,Item."No."),DATABASE::Item,Item.GETPOSITION);
          end;
        Item."Replenishment System"::"Prod. Order":
          begin
            if Item."Production BOM No." <> '' then
              exit(true);
            if LogWarning then
              BOMWarningLog.SetWarning(STRSUBSTNO(Text007,Item."No."),DATABASE::Item,Item.GETPOSITION);
          end;
        else
          exit(true);
      end;
    END;

    [External]
    PROCEDURE IsLineOk@34(LogWarning@1000 : Boolean;VAR BOMWarningLog@1001 : Record "BOM Warning Log") : Boolean;
    BEGIN
      exit(
        IsLowLevelOk(LogWarning,BOMWarningLog) and
        IsQtyPerOk(LogWarning,BOMWarningLog) and
        IsProdBOMOk(LogWarning,BOMWarningLog) and
        IsRoutingOk(LogWarning,BOMWarningLog) and
        IsReplenishmentOk(LogWarning,BOMWarningLog));
    END;

    [External]
    PROCEDURE AreAllLinesOk@35(VAR BOMWarningLog@1000 : Record "BOM Warning Log") IsOk : Boolean;
    VAR
      CopyOfBOMBuffer@1001 : Record "BOM Buffer";
    BEGIN
      IsOk := true;
      CopyOfBOMBuffer.COPY(Rec);

      BOMWarningLog.RESET;
      BOMWarningLog.DELETEALL;

      RESET;
      if FINDSET then
        repeat
          if not IsLineOk(true,BOMWarningLog) then
            IsOk := false;
        until NEXT = 0;
      COPY(CopyOfBOMBuffer);
    END;

    LOCAL PROCEDURE GetGLSetup@37();
    BEGIN
      if GLSetupRead then
        exit;
      GLSetup.GET;
      GLSetupRead := true;
    END;

    [External]
    PROCEDURE SetLocationVariantFiltersFrom@38(VAR ItemFilter@1000 : Record Item);
    BEGIN
      SETFILTER("Location Code",ItemFilter.GETFILTER("Location Filter"));
      SETFILTER("Variant Code",ItemFilter.GETFILTER("Variant Filter"));
    END;

    BEGIN
    END.
  }
}

