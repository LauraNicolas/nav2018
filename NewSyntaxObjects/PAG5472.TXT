OBJECT Page 5472 Vendor Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=vendors];
    SourceTable=Vendor;
    DelayedInsert=true;
    PageType=API;
    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     Vendor@1002 : Record Vendor;
                     GraphMgtVendor@1000 : Codeunit "Graph Mgt - Vendor";
                     GraphMgtGeneralTools@1004 : Codeunit "Graph Mgt - General Tools";
                     RecRef@1003 : RecordRef;
                   BEGIN
                     Vendor.SETRANGE("No.","No.");
                     if not Vendor.ISEMPTY then
                       INSERT;

                     INSERT(true);

                     GraphMgtVendor.ProcessComplexTypes(Rec,PaymentTermsJSON,PaymentMethodJSON,PostalAddressJSON);

                     RecRef.GETTABLE(Rec);
                     GraphMgtGeneralTools.ProcessNewRecordFromAPI(RecRef,TempFieldSet,CURRENTDATETIME);
                     RecRef.SETTABLE(Rec);

                     MODIFY(true);
                     SetCalculatedFields;
                     exit(false);
                   END;

    OnModifyRecord=VAR
                     Vendor@1002 : Record Vendor;
                     GraphMgtGeneralTools@1001 : Codeunit "Graph Mgt - General Tools";
                     GraphMgtVendor@1000 : Codeunit "Graph Mgt - Vendor";
                   BEGIN
                     if xRec.Id <> Id then
                       GraphMgtGeneralTools.ErrorIdImmutable;
                     Vendor.SETRANGE(Id,Id);
                     Vendor.FINDFIRST;

                     GraphMgtVendor.ProcessComplexTypes(Rec,PaymentTermsJSON,PaymentMethodJSON,PostalAddressJSON);

                     if "No." = Vendor."No." then
                       MODIFY(true)
                     else begin
                       Vendor.TRANSFERFIELDS(Rec,false);
                       Vendor.RENAME("No.");
                       TRANSFERFIELDS(Vendor);
                     end;

                     SetCalculatedFields;
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 14  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                ImplicitType=GUID }

    { 13  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                ImplicitType=Code20 }

    { 12  ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName];
                ApplicationArea=#All;
                SourceExpr=Name;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Name));
                           END;

                ImplicitType=Text50 }

    { 7   ;2   ;Field     ;
                Name=address;
                CaptionML=[@@@={Locked};
                           ENU=Address];
                ToolTipML=ENU=Specifies the address for the vendor.;
                ApplicationArea=#All;
                SourceExpr=PostalAddressJSON;
                ODataEDMType=POSTALADDRESS;
                ImplicitType=Text }

    { 5   ;2   ;Field     ;
                Name=phoneNumber;
                CaptionML=[@@@={Locked};
                           ENU=PhoneNumber];
                ApplicationArea=#All;
                SourceExpr="Phone No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Phone No."));
                           END;

                ImplicitType=Text30 }

    { 4   ;2   ;Field     ;
                Name=email;
                CaptionML=[@@@={Locked};
                           ENU=Email];
                ApplicationArea=#All;
                SourceExpr="E-Mail";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("E-Mail"));
                           END;

                ImplicitType=Text80 }

    { 3   ;2   ;Field     ;
                Name=website;
                CaptionML=[@@@={Locked};
                           ENU=Website];
                ApplicationArea=#All;
                SourceExpr="Home Page";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Home Page"));
                           END;

                ImplicitType=Text80 }

    { 15  ;2   ;Field     ;
                Name=taxRegistrationNumber;
                CaptionML=[@@@={Locked};
                           ENU=TaxRegistrationNumber];
                ApplicationArea=#All;
                SourceExpr="VAT Registration No.";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("VAT Registration No."));
                           END;

                ImplicitType=Text20 }

    { 16  ;2   ;Field     ;
                Name=currencyId;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyId];
                ApplicationArea=#All;
                SourceExpr="Currency Id";
                OnValidate=BEGIN
                             if "Currency Id" = BlankGUID then
                               "Currency Code" := ''
                             else begin
                               Currency.SETRANGE(Id,"Currency Id");
                               if not Currency.FINDFIRST then
                                 ERROR(CurrencyIdDoesNotMatchACurrencyErr);

                               "Currency Code" := Currency.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=GUID }

    { 11  ;2   ;Field     ;
                Name=currencyCode;
                CaptionML=[@@@={Locked};
                           ENU=CurrencyCode];
                ApplicationArea=#All;
                SourceExpr=CurrencyCodeTxt;
                OnValidate=BEGIN
                             "Currency Code" :=
                               GraphMgtGeneralTools.TranslateCurrencyCodeToNAVCurrencyCode(
                                 LCYCurrencyCode,COPYSTR(CurrencyCodeTxt,1,MAXSTRLEN(LCYCurrencyCode)));

                             if Currency.Code <> '' then begin
                               if Currency.Code <> "Currency Code" then
                                 ERROR(CurrencyValuesDontMatchErr);
                               exit;
                             end;

                             if "Currency Code" = '' then
                               "Currency Id" := BlankGUID
                             else begin
                               if not Currency.GET("Currency Code") then
                                 ERROR(CurrencyCodeDoesNotMatchACurrencyErr);

                               "Currency Id" := Currency.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Currency Id"));
                             RegisterFieldSet(FIELDNO("Currency Code"));
                           END;

                ImplicitType=Text }

    { 17  ;2   ;Field     ;
                Name=irs1099Code;
                CaptionML=[@@@={Locked};
                           ENU=IRS1099Code];
                ApplicationArea=#All;
                SourceExpr=IRS1099Code;
                ImplicitType=Code10 }

    { 9   ;2   ;Field     ;
                Name=paymentTermsId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTermsId];
                ApplicationArea=#All;
                SourceExpr="Payment Terms Id";
                OnValidate=BEGIN
                             if "Payment Terms Id" = BlankGUID then
                               "Payment Terms Code" := ''
                             else begin
                               PaymentTerms.SETRANGE(Id,"Payment Terms Id");
                               if not PaymentTerms.FINDFIRST then
                                 ERROR(PaymentTermsIdDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Code" := PaymentTerms.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ImplicitType=GUID }

    { 8   ;2   ;Field     ;
                Name=paymentTerms;
                CaptionML=[@@@={Locked};
                           ENU=PaymentTerms];
                ToolTipML=ENU=Specifies the Payment Terms for the Customer.;
                ApplicationArea=#All;
                SourceExpr=PaymentTermsJSON;
                OnValidate=BEGIN
                             GraphMgtVendor.UpdatePaymentTerms(PaymentTermsJSON,Rec);

                             if PaymentTerms.Code <> '' then begin
                               if PaymentTerms.Code <> "Payment Terms Code" then
                                 ERROR(PaymentTermsValuesDontMatchErr);
                               exit;
                             end;

                             if "Payment Terms Code" = '' then
                               "Payment Terms Id" := BlankGUID
                             else begin
                               if not PaymentTerms.GET("Payment Terms Code") then
                                 ERROR(PaymentTermsCodeDoesNotMatchAPaymentTermsErr);

                               "Payment Terms Id" := PaymentTerms.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Terms Id"));
                             RegisterFieldSet(FIELDNO("Payment Terms Code"));
                           END;

                ODataEDMType=PAYMENTTERMSTYPE;
                ImplicitType=Text }

    { 10  ;2   ;Field     ;
                Name=paymentMethodId;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethodId];
                ApplicationArea=#All;
                SourceExpr="Payment Method Id";
                OnValidate=BEGIN
                             if "Payment Method Id" = BlankGUID then
                               "Payment Method Code" := ''
                             else begin
                               PaymentMethod.SETRANGE(Id,"Payment Method Id");
                               if not PaymentMethod.FINDFIRST then
                                 ERROR(PaymentMethodIdDoesNotMatchAPaymentMethodErr);

                               "Payment Method Code" := PaymentMethod.Code;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));
                           END;

                ImplicitType=GUID }

    { 18  ;2   ;Field     ;
                Name=paymentMethod;
                CaptionML=[@@@={Locked};
                           ENU=PaymentMethod];
                ToolTipML=ENU=Specifies the Payment Method for the Vendor.;
                ApplicationArea=#All;
                SourceExpr=PaymentMethodJSON;
                OnValidate=BEGIN
                             GraphMgtVendor.UpdatePaymentMethod(PaymentMethodJSON,Rec);

                             if PaymentMethod.Code <> '' then begin
                               if PaymentMethod.Code <> "Payment Method Code" then
                                 ERROR(PaymentMethodValuesDontMatchErr);
                               exit;
                             end;

                             if "Payment Method Code" = '' then
                               "Payment Method Id" := BlankGUID
                             else begin
                               if not PaymentMethod.GET("Payment Method Code") then
                                 ERROR(PaymentMethodCodeDoesNotMatchAPaymentMethodErr);

                               "Payment Method Id" := PaymentMethod.Id;
                             end;

                             RegisterFieldSet(FIELDNO("Payment Method Id"));
                             RegisterFieldSet(FIELDNO("Payment Method Code"));
                           END;

                ODataEDMType=PAYMENTMETHOD;
                ImplicitType=Text }

    { 22  ;2   ;Field     ;
                Name=taxLiable;
                CaptionML=[@@@={Locked};
                           ENU=TaxLiable];
                ApplicationArea=#All;
                SourceExpr="Tax Liable";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Tax Liable"));
                           END;

                ImplicitType=Boolean }

    { 23  ;2   ;Field     ;
                Name=blocked;
                CaptionML=[@@@={Locked};
                           ENU=Blocked];
                ApplicationArea=#All;
                SourceExpr=Blocked;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Blocked));
                           END;

                ImplicitType=Option }

    { 24  ;2   ;Field     ;
                Name=balance;
                CaptionML=[@@@={Locked};
                           ENU=Balance];
                ApplicationArea=#All;
                SourceExpr="Balance (LCY)";
                ImplicitType=Decimal }

    { 6   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified Date Time";
                ImplicitType=DateTime }

  }
  CODE
  {
    VAR
      Currency@1018 : Record Currency;
      PaymentTerms@1011 : Record "Payment Terms";
      PaymentMethod@1016 : Record "Payment Method";
      TempFieldSet@1003 : TEMPORARY Record Field;
      GraphMgtGeneralTools@1006 : Codeunit "Graph Mgt - General Tools";
      GraphMgtVendor@1012 : Codeunit "Graph Mgt - Vendor";
      LCYCurrencyCode@1007 : Code[10];
      CurrencyCodeTxt@1008 : Text;
      PaymentTermsJSON@1002 : Text;
      PaymentMethodJSON@1000 : Text;
      PostalAddressJSON@1004 : Text;
      IRS1099Code@1001 : Code[10];
      CurrencyValuesDontMatchErr@1021 : TextConst '@@@={Locked};ENU=The currency values do not match to a specific Currency.';
      CurrencyIdDoesNotMatchACurrencyErr@1020 : TextConst '@@@={Locked};ENU=The "currencyId" does not match to a Currency.';
      CurrencyCodeDoesNotMatchACurrencyErr@1019 : TextConst '@@@={Locked};ENU=The "currencyCode" does not match to a Currency.';
      PaymentTermsValuesDontMatchErr@1010 : TextConst '@@@={Locked};ENU=The payment terms values do not match to a specific Payment Terms.';
      PaymentTermsIdDoesNotMatchAPaymentTermsErr@1009 : TextConst '@@@={Locked};ENU=The "paymentTermsId" does not match to a Payment Terms.';
      PaymentTermsCodeDoesNotMatchAPaymentTermsErr@1005 : TextConst '@@@={Locked};ENU=The "paymentTermsCode" does not match to a Payment Terms.';
      PaymentMethodValuesDontMatchErr@1015 : TextConst '@@@={Locked};ENU=The payment method values do not match to a specific Payment Method.';
      PaymentMethodIdDoesNotMatchAPaymentMethodErr@1014 : TextConst '@@@={Locked};ENU=The "paymentMethodId" does not match to a Payment Method.';
      PaymentMethodCodeDoesNotMatchAPaymentMethodErr@1013 : TextConst '@@@={Locked};ENU=The "paymentMethodCode" does not match to a Payment Method.';
      BlankGUID@1017 : GUID;

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphMgtVendor@1000 : Codeunit "Graph Mgt - Vendor";
    BEGIN
      CALCFIELDS("Balance (LCY)");
      PaymentTermsJSON := GraphMgtVendor.PaymentTermsToJSON("Payment Terms Code");
      PaymentMethodJSON := GraphMgtVendor.PaymentMethodToJSON("Payment Method Code");
      PostalAddressJSON := GraphMgtVendor.PostalAddressToJSON(Rec);
      CurrencyCodeTxt := GraphMgtGeneralTools.TranslateNAVCurrencyCodeToCurrencyCode(LCYCurrencyCode,"Currency Code");
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(PaymentTermsJSON);
      CLEAR(PaymentMethodJSON);
      CLEAR(PostalAddressJSON);
      CLEAR(IRS1099Code);
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      if TempFieldSet.GET(DATABASE::Vendor,FieldNo) then
        exit;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Vendor;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(true);
    END;

    BEGIN
    END.
  }
}

