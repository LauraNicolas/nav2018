OBJECT Codeunit 5320 Exchange Web Services Client
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempExchangeFolder@1002 : TEMPORARY Record "Exchange Folder";
      ServiceOnClient@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ExchangeServiceWrapper" RUNONCLIENT;
      Text001@1003 : TextConst 'ENU=Connection to the Exchange server failed.';
      Text002@1004 : TextConst 'ENU=Folders with a path that exceeds 250 characters have been omitted.';
      ServiceOnServer@1005 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ExchangeServiceWrapper";
      LongPathsDetected@1001 : Boolean;

    [Internal]
    PROCEDURE GetPublicFolders@2(VAR ExchangeFolder@1000 : Record "Exchange Folder") : Boolean;
    BEGIN
      if not IsServiceValid then
        ERROR(Text001);

      if ISNULL(ServiceOnServer) then
        exit(GetPublicFoldersOnClient(ExchangeFolder));
      exit(GetPublicFoldersOnServer(ExchangeFolder));
    END;

    LOCAL PROCEDURE GetPublicFoldersOnClient@10(VAR ExchangeFolder@1000 : Record "Exchange Folder") FoundAny : Boolean;
    VAR
      ParentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfo" RUNONCLIENT;
      SubFolders@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfoEnumerator" RUNONCLIENT;
    BEGIN
      if ExchangeFolder.Cached then
        exit;

      if ExchangeFolder."Unique ID".HASVALUE then begin
        ParentInfo := ParentInfo.FolderInfo(ExchangeFolder.GetUniqueID,ExchangeFolder.FullPath);
        ExchangeFolder.Cached := true;
        ExchangeFolder.MODIFY;
      end;

      FoundAny := false;
      LongPathsDetected := false;

      SubFolders := ServiceOnClient.GetPublicFolders(ParentInfo,1000);

      if not ISNULL(SubFolders) then begin
        while SubFolders.MoveNextPage do
          while SubFolders.MoveNext do
            if STRLEN(SubFolders.Current.FullPath) > 250 then
              LongPathsDetected := true
            else
              if not TempExchangeFolder.GET(SubFolders.Current.FullPath) then
                if IsAllowedFolderType(SubFolders.Current.FolderClass) then begin
                  FoundAny := true;
                  with TempExchangeFolder do begin
                    INIT;
                    FullPath := SubFolders.Current.FullPath;
                    Depth := SubFolders.Current.Depth;
                    SetUniqueID(SubFolders.Current.UniqueId);
                    Name := SubFolders.Current.Name;
                    Cached := false;
                    INSERT;
                  end;
                end;
        if LongPathsDetected then
          MESSAGE(Text002);
        ReadBuffer(ExchangeFolder);
      end;

      if ISNULL(ServiceOnServer) then begin
        if ServiceOnServer.LastError <> '' then
          MESSAGE(ServiceOnServer.LastError);
      end else
        if ServiceOnServer.LastError <> '' then
          MESSAGE(ServiceOnServer.LastError);

      exit(FoundAny);
    END;

    LOCAL PROCEDURE GetPublicFoldersOnServer@11(VAR ExchangeFolder@1000 : Record "Exchange Folder") FoundAny : Boolean;
    VAR
      ParentInfo@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfo";
      SubFolders@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.FolderInfoEnumerator";
    BEGIN
      if ExchangeFolder.Cached then
        exit;

      if ExchangeFolder."Unique ID".HASVALUE then begin
        ParentInfo := ParentInfo.FolderInfo(ExchangeFolder.GetUniqueID,ExchangeFolder.FullPath);
        ExchangeFolder.Cached := true;
        ExchangeFolder.MODIFY;
      end;

      FoundAny := false;
      LongPathsDetected := false;

      SubFolders := ServiceOnServer.GetPublicFolders(ParentInfo,1000);

      if not ISNULL(SubFolders) then begin
        while SubFolders.MoveNextPage do
          while SubFolders.MoveNext do
            if STRLEN(SubFolders.Current.FullPath) > 250 then
              LongPathsDetected := true
            else
              if not TempExchangeFolder.GET(SubFolders.Current.FullPath) then
                if IsAllowedFolderType(SubFolders.Current.FolderClass) then begin
                  FoundAny := true;
                  with TempExchangeFolder do begin
                    INIT;
                    FullPath := SubFolders.Current.FullPath;
                    Depth := SubFolders.Current.Depth;
                    SetUniqueID(SubFolders.Current.UniqueId);
                    Name := SubFolders.Current.Name;
                    Cached := false;
                    INSERT;
                  end;
                end;
        if LongPathsDetected then
          MESSAGE(Text002);
        ReadBuffer(ExchangeFolder);
      end;

      if ISNULL(ServiceOnServer) then begin
        if ServiceOnServer.LastError <> '' then
          MESSAGE(ServiceOnServer.LastError);
      end else
        if ServiceOnServer.LastError <> '' then
          MESSAGE(ServiceOnServer.LastError);

      exit(FoundAny);
    END;

    [Internal]
    PROCEDURE InitializeOnClient@3(AutodiscoveryEmail@1000 : Text[250];ServiceUri@1001 : Text) : Boolean;
    VAR
      ServiceFactoryOnClient@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ServiceWrapperFactory" RUNONCLIENT;
    BEGIN
      if ISNULL(ServiceOnClient) then begin
        InvalidateService;
        ServiceOnClient := ServiceFactoryOnClient.CreateServiceWrapper;
      end;

      if ServiceUri <> '' then
        ServiceOnClient.ExchangeServiceUrl := ServiceUri;

      if ServiceOnClient.ExchangeServiceUrl = '' then
        exit(ServiceOnClient.AutodiscoverServiceUrl(AutodiscoveryEmail));
      exit(true);
    END;

    [Internal]
    PROCEDURE InitializeOnServer@8(AutodiscoveryEmail@1002 : Text[250];ServiceUri@1001 : Text;Credentials@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.NetworkCredential") : Boolean;
    VAR
      ServiceFactoryOnServer@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ServiceWrapperFactory";
    BEGIN
      if ISNULL(ServiceOnServer) then begin
        InvalidateService;
        ServiceOnServer := ServiceFactoryOnServer.CreateServiceWrapperWithCredentials(Credentials);
      end;

      if ServiceUri <> '' then
        ServiceOnServer.ExchangeServiceUrl := ServiceUri;

      if ServiceOnServer.ExchangeServiceUrl = '' then
        exit(ServiceOnServer.AutodiscoverServiceUrl(AutodiscoveryEmail));
      exit(true);
    END;

    [Internal]
    PROCEDURE FolderExists@1(UniqueID@1000 : Text) : Boolean;
    BEGIN
      if not IsServiceValid then
        ERROR(Text001);
      if ISNULL(ServiceOnServer) then
        exit(ServiceOnClient.FolderExists(UniqueID));
      exit(ServiceOnServer.FolderExists(UniqueID));
    END;

    [External]
    PROCEDURE ReadBuffer@6(VAR DestExchangeFolder@1000 : Record "Exchange Folder") : Boolean;
    BEGIN
      if TempExchangeFolder.FINDSET then
        repeat
          if not DestExchangeFolder.GET(TempExchangeFolder.FullPath) then begin
            TempExchangeFolder.CALCFIELDS("Unique ID");
            DestExchangeFolder.INIT;
            DestExchangeFolder.TRANSFERFIELDS(TempExchangeFolder);
            DestExchangeFolder.INSERT;
          end;
        until TempExchangeFolder.NEXT = 0
      else
        exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE IsAllowedFolderType@7(FolderClass@1000 : Text) : Boolean;
    BEGIN
      if FolderClass = '' then
        exit(true);

      if FolderClass = 'IPF.Note' then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE IsServiceValid@4() : Boolean;
    BEGIN
      if ISNULL(ServiceOnServer) and ISNULL(ServiceOnClient) then
        exit(false);

      if ISNULL(ServiceOnServer) then
        exit(ServiceOnClient.ExchangeServiceUrl <> '');
      exit(ServiceOnServer.ExchangeServiceUrl <> '');
    END;

    [External]
    PROCEDURE InvalidateService@5();
    BEGIN
      CLEAR(ServiceOnClient);
      CLEAR(ServiceOnServer);
    END;

    [Internal]
    PROCEDURE ValidateCredentialsOnServer@9() : Boolean;
    BEGIN
      exit(ServiceOnServer.ValidateCredentials);
    END;

    [Internal]
    PROCEDURE ValidateCredentialsOnClient@12() : Boolean;
    BEGIN
      exit(ServiceOnClient.ValidateCredentials);
    END;

    BEGIN
    END.
  }
}

