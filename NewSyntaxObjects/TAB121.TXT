OBJECT Table 121 Purch. Rcpt. Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Item Ledger Entry"=r,
                TableData "Value Entry"=r;
    OnDelete=VAR
               PurchDocLineComments@1000 : Record "Purch. Comment Line";
             BEGIN
               PurchDocLineComments.SETRANGE("Document Type",PurchDocLineComments."Document Type"::Receipt);
               PurchDocLineComments.SETRANGE("No.","Document No.");
               PurchDocLineComments.SETRANGE("Document Line No.","Line No.");
               if not PurchDocLineComments.ISEMPTY then
                 PurchDocLineComments.DELETEALL;
             END;

    CaptionML=ENU=Purch. Rcpt. Line;
    LookupPageID="Posted Purchase Receipt Lines";
    DrillDownPageID="Posted Purchase Receipt Lines";
  }
  FIELDS
  {
    { 2   ;   ;Buy-from Vendor No. ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Buy-from Vendor No.;
                                                   Editable=false }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Purch. Rcpt. Header";
                                                   CaptionML=ENU=Document No. }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 5   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,G/L Account,Item,,Fixed Asset,Charge (Item)";
                                                   OptionString=" ","G/L Account",Item,,"Fixed Asset","Charge (Item)" }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST("Fixed Asset")) "Fixed Asset"
                                                                 ELSE IF (Type=CONST("Charge (Item)")) "Item Charge";
                                                   CaptionML=ENU=No.;
                                                   CaptionClass=GetCaptionClass(FIELDNO("No.")) }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   CaptionML=ENU=Location Code }
    { 8   ;   ;Posting Group       ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group"
                                                                 ELSE IF (Type=CONST("Fixed Asset")) "FA Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=false }
    { 10  ;   ;Expected Receipt Date;Date         ;CaptionML=ENU=Expected Receipt Date }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=ENU=Unit of Measure }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Direct Unit Cost    ;Decimal       ;CaptionML=ENU=Direct Unit Cost;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=ENU=Unit Cost (LCY);
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=ENU=Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 31  ;   ;Unit Price (LCY)    ;Decimal       ;CaptionML=ENU=Unit Price (LCY);
                                                   AutoFormatType=2 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Invoice Disc. }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=ENU=Gross Weight;
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=ENU=Net Weight;
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=ENU=Units per Parcel;
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=ENU=Unit Volume;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Appl.-to Item Entry }
    { 39  ;   ;Item Rcpt. Entry No.;Integer       ;CaptionML=ENU=Item Rcpt. Entry No. }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 45  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Job No. }
    { 54  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 58  ;   ;Qty. Rcd. Not Invoiced;Decimal     ;AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                                                   CaptionML=ENU=Qty. Rcd. Not Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=ENU=Quantity Invoiced;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 65  ;   ;Order No.           ;Code20        ;AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                                                   CaptionML=ENU=Order No. }
    { 66  ;   ;Order Line No.      ;Integer       ;AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                                                   CaptionML=ENU=Order Line No. }
    { 68  ;   ;Pay-to Vendor No.   ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Pay-to Vendor No. }
    { 70  ;   ;Vendor Item No.     ;Text20        ;CaptionML=ENU=Vendor Item No. }
    { 71  ;   ;Sales Order No.     ;Code20        ;CaptionML=ENU=Sales Order No. }
    { 72  ;   ;Sales Order Line No.;Integer       ;CaptionML=ENU=Sales Order Line No. }
    { 74  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 75  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax" }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=ENU=Transaction Type }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=ENU=Transport Method }
    { 80  ;   ;Attached to Line No.;Integer       ;TableRelation="Purch. Rcpt. Line"."Line No." WHERE ("Document No."=FIELD("Document No."));
                                                   CaptionML=ENU=Attached to Line No. }
    { 81  ;   ;Entry Point         ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=ENU=Entry Point }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=ENU=Area }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=ENU=Transaction Specification }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 87  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code }
    { 88  ;   ;Use Tax             ;Boolean       ;CaptionML=ENU=Use Tax }
    { 89  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 90  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 91  ;   ;Currency Code       ;Code10        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Purch. Rcpt. Header"."Currency Code" WHERE ("No."=FIELD("Document No.")));
                                                   CaptionML=ENU=Currency Code;
                                                   Editable=false }
    { 97  ;   ;Blanket Order No.   ;Code20        ;TableRelation="Purchase Header"."No." WHERE ("Document Type"=CONST("Blanket Order"));
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Blanket Order No. }
    { 98  ;   ;Blanket Order Line No.;Integer     ;TableRelation="Purchase Line"."Line No." WHERE ("Document Type"=CONST("Blanket Order"),
                                                                                                   "Document No."=FIELD("Blanket Order No."));
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Blanket Order Line No. }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=ENU=VAT Base Amount;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   Editable=false;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 131 ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE ("Job No."=FIELD("Job No."));
                                                   CaptionML=ENU=Job Task No. }
    { 1002;   ;Job Line Type       ;Option        ;CaptionML=ENU=Job Line Type;
                                                   OptionCaptionML=ENU=" ,Budget,Billable,Both Budget and Billable";
                                                   OptionString=" ",Budget,Billable,"Both Budget and Billable" }
    { 1003;   ;Job Unit Price      ;Decimal       ;CaptionML=ENU=Job Unit Price;
                                                   BlankZero=true }
    { 1004;   ;Job Total Price     ;Decimal       ;CaptionML=ENU=Job Total Price;
                                                   BlankZero=true }
    { 1005;   ;Job Line Amount     ;Decimal       ;CaptionML=ENU=Job Line Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1006;   ;Job Line Discount Amount;Decimal   ;CaptionML=ENU=Job Line Discount Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1007;   ;Job Line Discount % ;Decimal       ;CaptionML=ENU=Job Line Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   BlankZero=true }
    { 1008;   ;Job Unit Price (LCY);Decimal       ;CaptionML=ENU=Job Unit Price (LCY);
                                                   BlankZero=true }
    { 1009;   ;Job Total Price (LCY);Decimal      ;CaptionML=ENU=Job Total Price (LCY);
                                                   BlankZero=true }
    { 1010;   ;Job Line Amount (LCY);Decimal      ;CaptionML=ENU=Job Line Amount (LCY);
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 1011;   ;Job Line Disc. Amount (LCY);Decimal;CaptionML=ENU=Job Line Disc. Amount (LCY);
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 1012;   ;Job Currency Factor ;Decimal       ;CaptionML=ENU=Job Currency Factor;
                                                   BlankZero=true }
    { 1013;   ;Job Currency Code   ;Code20        ;CaptionML=ENU=Job Currency Code }
    { 5401;   ;Prod. Order No.     ;Code20        ;TableRelation="Production Order"."No." WHERE (Status=FILTER(Released|Finished));
                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Prod. Order No. }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."));
                                                   CaptionML=ENU=Variant Code }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"),
                                                                                 "Item Filter"=FIELD("No."),
                                                                                 "Variant Filter"=FIELD("Variant Code"));
                                                   CaptionML=ENU=Bin Code }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=ENU=Unit of Measure Code }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=ENU=Qty. Invoiced (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5600;   ;FA Posting Date     ;Date          ;CaptionML=ENU=FA Posting Date }
    { 5601;   ;FA Posting Type     ;Option        ;CaptionML=ENU=FA Posting Type;
                                                   OptionCaptionML=ENU=" ,Acquisition Cost,Maintenance";
                                                   OptionString=" ","Acquisition Cost",Maintenance }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   CaptionML=ENU=Depreciation Book Code }
    { 5603;   ;Salvage Value       ;Decimal       ;CaptionML=ENU=Salvage Value;
                                                   AutoFormatType=1 }
    { 5605;   ;Depr. until FA Posting Date;Boolean;CaptionML=ENU=Depr. until FA Posting Date }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;CaptionML=ENU=Depr. Acquisition Cost }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   CaptionML=ENU=Maintenance Code }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   CaptionML=ENU=Insurance No. }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   CaptionML=ENU=Budgeted FA No. }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   CaptionML=ENU=Duplicate in Depreciation Book }
    { 5613;   ;Use Duplication List;Boolean       ;CaptionML=ENU=Use Duplication List }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=ENU=Responsibility Center }
    { 5705;   ;Cross-Reference No. ;Code20        ;AccessByPermission=TableData "Item Cross Reference"=R;
                                                   CaptionML=ENU=Cross-Reference No. }
    { 5706;   ;Unit of Measure (Cross Ref.);Code10;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."));
                                                   CaptionML=ENU=Unit of Measure (Cross Ref.) }
    { 5707;   ;Cross-Reference Type;Option        ;CaptionML=ENU=Cross-Reference Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bar Code";
                                                   OptionString=" ",Customer,Vendor,"Bar Code" }
    { 5708;   ;Cross-Reference Type No.;Code30    ;CaptionML=ENU=Cross-Reference Type No. }
    { 5709;   ;Item Category Code  ;Code20        ;TableRelation=IF (Type=CONST(Item)) "Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=ENU=Nonstock }
    { 5711;   ;Purchasing Code     ;Code10        ;TableRelation=Purchasing;
                                                   CaptionML=ENU=Purchasing Code }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE ("Item Category Code"=FIELD("Item Category Code"));
                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=Product Group Code }
    { 5714;   ;Special Order Sales No.;Code20     ;CaptionML=ENU=Special Order Sales No. }
    { 5715;   ;Special Order Sales Line No.;Integer;
                                                   CaptionML=ENU=Special Order Sales Line No. }
    { 5790;   ;Requested Receipt Date;Date        ;AccessByPermission=TableData "Order Promising Line"=R;
                                                   CaptionML=ENU=Requested Receipt Date }
    { 5791;   ;Promised Receipt Date;Date         ;CaptionML=ENU=Promised Receipt Date }
    { 5792;   ;Lead Time Calculation;DateFormula  ;AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                                                   CaptionML=ENU=Lead Time Calculation }
    { 5793;   ;Inbound Whse. Handling Time;DateFormula;
                                                   AccessByPermission=TableData Location=R;
                                                   CaptionML=ENU=Inbound Whse. Handling Time }
    { 5794;   ;Planned Receipt Date;Date          ;CaptionML=ENU=Planned Receipt Date }
    { 5795;   ;Order Date          ;Date          ;AccessByPermission=TableData "Purch. Rcpt. Header"=R;
                                                   CaptionML=ENU=Order Date }
    { 5811;   ;Item Charge Base Amount;Decimal    ;CaptionML=ENU=Item Charge Base Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCodeFromHeader }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=ENU=Correction;
                                                   Editable=false }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=ENU=Return Reason Code }
    { 99000750;;Routing No.        ;Code20        ;TableRelation="Routing Header";
                                                   CaptionML=ENU=Routing No. }
    { 99000751;;Operation No.      ;Code10        ;TableRelation="Prod. Order Routing Line"."Operation No." WHERE (Status=FILTER(Released..),
                                                                                                                   "Prod. Order No."=FIELD("Prod. Order No."),
                                                                                                                   "Routing No."=FIELD("Routing No."));
                                                   CaptionML=ENU=Operation No. }
    { 99000752;;Work Center No.    ;Code20        ;TableRelation="Work Center";
                                                   CaptionML=ENU=Work Center No. }
    { 99000754;;Prod. Order Line No.;Integer      ;TableRelation="Prod. Order Line"."Line No." WHERE (Status=FILTER(Released..),
                                                                                                      "Prod. Order No."=FIELD("Prod. Order No."));
                                                   CaptionML=ENU=Prod. Order Line No. }
    { 99000755;;Overhead Rate      ;Decimal       ;CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 99000759;;Routing Reference No.;Integer     ;CaptionML=ENU=Routing Reference No. }
  }
  KEYS
  {
    {    ;"Document No.","Line No."               ;Clustered=true }
    {    ;"Order No.","Order Line No."             }
    {    ;"Blanket Order No.","Blanket Order Line No." }
    {    ;"Item Rcpt. Entry No."                   }
    {    ;"Pay-to Vendor No."                      }
    {    ;"Buy-from Vendor No."                    }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Receipt No. %1:';
      Text001@1001 : TextConst 'ENU=The program cannot find this purchase line.';
      Currency@1005 : Record Currency;
      PurchRcptHeader@1004 : Record "Purch. Rcpt. Header";
      DimMgt@1003 : Codeunit DimensionManagement;
      CurrencyRead@1002 : Boolean;

    [External]
    PROCEDURE GetCurrencyCodeFromHeader@1() : Code[10];
    BEGIN
      if "Document No." = PurchRcptHeader."No." then
        exit(PurchRcptHeader."Currency Code");
      if PurchRcptHeader.GET("Document No.") then
        exit(PurchRcptHeader."Currency Code");
      exit('');
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    [External]
    PROCEDURE ShowItemTrackingLines@3();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit "Item Tracking Doc. Management";
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForShptRcptLine(DATABASE::"Purch. Rcpt. Line",0,"Document No.",'',0,"Line No.");
    END;

    [External]
    PROCEDURE InsertInvLineFromRcptLine@2(VAR PurchLine@1000 : Record "Purchase Line");
    VAR
      PurchInvHeader@1010 : Record "Purchase Header";
      PurchOrderHeader@1007 : Record "Purchase Header";
      PurchOrderLine@1005 : Record "Purchase Line";
      TempPurchLine@1003 : TEMPORARY Record "Purchase Line";
      TransferOldExtLines@1002 : Codeunit "Transfer Old Ext. Text Lines";
      ItemTrackingMgt@1004 : Codeunit "Item Tracking Management";
      LanguageManagement@1008 : Codeunit LanguageManagement;
      NextLineNo@1001 : Integer;
      ExtTextLine@1006 : Boolean;
    BEGIN
      SETRANGE("Document No.","Document No.");

      TempPurchLine := PurchLine;
      if PurchLine.FIND('+') then
        NextLineNo := PurchLine."Line No." + 10000
      else
        NextLineNo := 10000;

      if PurchInvHeader."No." <> TempPurchLine."Document No." then
        PurchInvHeader.GET(TempPurchLine."Document Type",TempPurchLine."Document No.");

      if PurchLine."Receipt No." <> "Document No." then begin
        PurchLine.INIT;
        PurchLine."Line No." := NextLineNo;
        PurchLine."Document Type" := TempPurchLine."Document Type";
        PurchLine."Document No." := TempPurchLine."Document No.";
        LanguageManagement.SetGlobalLanguageByCode(PurchInvHeader."Language Code");
        PurchLine.Description := STRSUBSTNO(Text000,"Document No.");
        LanguageManagement.RestoreGlobalLanguage;
        PurchLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      end;

      TransferOldExtLines.ClearLineNumbers;

      repeat
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        if PurchOrderLine.GET(
             PurchOrderLine."Document Type"::Order,"Order No.","Order Line No.")
        then begin
          if (PurchOrderHeader."Document Type" <> PurchOrderLine."Document Type"::Order) or
             (PurchOrderHeader."No." <> PurchOrderLine."Document No.")
          then
            PurchOrderHeader.GET(PurchOrderLine."Document Type"::Order,"Order No.");

          InitCurrency("Currency Code");

          if PurchInvHeader."Prices Including VAT" then begin
            if not PurchOrderHeader."Prices Including VAT" then
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          end else begin
            if PurchOrderHeader."Prices Including VAT" then
              PurchOrderLine."Direct Unit Cost" :=
                ROUND(
                  PurchOrderLine."Direct Unit Cost" / (1 + PurchOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          end;
        end else begin
          if ExtTextLine then begin
            PurchOrderLine.INIT;
            PurchOrderLine."Line No." := "Order Line No.";
            PurchOrderLine.Description := Description;
            PurchOrderLine."Description 2" := "Description 2";
          end else
            ERROR(Text001);
        end;
        PurchLine := PurchOrderLine;
        PurchLine."Line No." := NextLineNo;
        PurchLine."Document Type" := TempPurchLine."Document Type";
        PurchLine."Document No." := TempPurchLine."Document No.";
        PurchLine."Variant Code" := "Variant Code";
        PurchLine."Location Code" := "Location Code";
        PurchLine."Quantity (Base)" := 0;
        PurchLine.Quantity := 0;
        PurchLine."Outstanding Qty. (Base)" := 0;
        PurchLine."Outstanding Quantity" := 0;
        PurchLine."Quantity Received" := 0;
        PurchLine."Qty. Received (Base)" := 0;
        PurchLine."Quantity Invoiced" := 0;
        PurchLine."Qty. Invoiced (Base)" := 0;
        PurchLine.Amount := 0;
        PurchLine."Amount Including VAT" := 0;
        PurchLine."Sales Order No." := '';
        PurchLine."Sales Order Line No." := 0;
        PurchLine."Drop Shipment" := false;
        PurchLine."Special Order Sales No." := '';
        PurchLine."Special Order Sales Line No." := 0;
        PurchLine."Special Order" := false;
        PurchLine."Receipt No." := "Document No.";
        PurchLine."Receipt Line No." := "Line No.";
        PurchLine."Appl.-to Item Entry" := 0;
        if not ExtTextLine then begin
          PurchLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced");
          PurchLine.VALIDATE("Direct Unit Cost",PurchOrderLine."Direct Unit Cost");
          PurchOrderLine."Line Discount Amount" :=
            ROUND(
              PurchOrderLine."Line Discount Amount" * PurchLine.Quantity / PurchOrderLine.Quantity,
              Currency."Amount Rounding Precision");
          if PurchInvHeader."Prices Including VAT" then begin
            if not PurchOrderHeader."Prices Including VAT" then
              PurchOrderLine."Line Discount Amount" :=
                ROUND(
                  PurchOrderLine."Line Discount Amount" *
                  (1 + PurchOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          end else
            if PurchOrderHeader."Prices Including VAT" then
              PurchOrderLine."Line Discount Amount" :=
                ROUND(
                  PurchOrderLine."Line Discount Amount" /
                  (1 + PurchOrderLine."VAT %" / 100),Currency."Amount Rounding Precision");
          PurchLine.VALIDATE("Line Discount Amount",PurchOrderLine."Line Discount Amount");
          PurchLine."Line Discount %" := PurchOrderLine."Line Discount %";
          PurchLine.UpdatePrePaymentAmounts;
          if PurchOrderLine.Quantity = 0 then
            PurchLine.VALIDATE("Inv. Discount Amount",0)
          else
            PurchLine.VALIDATE(
              "Inv. Discount Amount",
              ROUND(
                PurchOrderLine."Inv. Discount Amount" * PurchLine.Quantity / PurchOrderLine.Quantity,
                Currency."Amount Rounding Precision"));
        end;

        PurchLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            "Line No.",
            NextLineNo,
            "Attached to Line No.");
        PurchLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
        PurchLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
        PurchLine."Dimension Set ID" := "Dimension Set ID";

        if "Sales Order No." = '' then
          PurchLine."Drop Shipment" := false
        else
          PurchLine."Drop Shipment" := true;

        PurchLine.INSERT;

        ItemTrackingMgt.CopyHandledItemTrkgToInvLine2(PurchOrderLine,PurchLine);

        NextLineNo := NextLineNo + 10000;
        if "Attached to Line No." = 0 then
          SETRANGE("Attached to Line No.","Line No.");
      until (NEXT = 0) or ("Attached to Line No." = 0);
    END;

    LOCAL PROCEDURE GetPurchInvLines@4(VAR TempPurchInvLine@1000 : TEMPORARY Record "Purch. Inv. Line");
    VAR
      PurchInvLine@1003 : Record "Purch. Inv. Line";
      ItemLedgEntry@1002 : Record "Item Ledger Entry";
      ValueEntry@1001 : Record "Value Entry";
    BEGIN
      TempPurchInvLine.RESET;
      TempPurchInvLine.DELETEALL;

      if Type <> Type::Item then
        exit;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      if ItemLedgEntry.FINDSET then begin
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        repeat
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          if ValueEntry.FINDSET then
            repeat
              if ValueEntry."Document Type" = ValueEntry."Document Type"::"Purchase Invoice" then
                if PurchInvLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") then begin
                  TempPurchInvLine.INIT;
                  TempPurchInvLine := PurchInvLine;
                  if TempPurchInvLine.INSERT then;
                end;
            until ValueEntry.NEXT = 0;
        until ItemLedgEntry.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CalcReceivedPurchNotReturned@6(VAR RemainingQty@1003 : Decimal;VAR RevUnitCostLCY@1005 : Decimal;ExactCostReverse@1006 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record "Item Ledger Entry";
      TotalCostLCY@1007 : Decimal;
      TotalQtyBase@1002 : Decimal;
    BEGIN
      RemainingQty := 0;
      if (Type <> Type::Item) or (Quantity <= 0) then begin
        RevUnitCostLCY := "Unit Cost (LCY)";
        exit;
      end;

      RevUnitCostLCY := 0;
      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      if ItemLedgEntry.FINDSET then
        repeat
          RemainingQty := RemainingQty + ItemLedgEntry."Remaining Quantity";
          if ExactCostReverse then begin
            ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + ItemLedgEntry.Quantity;
          end;
        until ItemLedgEntry.NEXT = 0;

      if ExactCostReverse and (RemainingQty <> 0) and (TotalQtyBase <> 0) then
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      else
        RevUnitCostLCY := "Unit Cost (LCY)";

      RemainingQty := CalcQty(RemainingQty);
    END;

    LOCAL PROCEDURE CalcQty@10(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      if "Qty. per Unit of Measure" = 0 then
        exit(QtyBase);
      exit(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    [External]
    PROCEDURE FilterPstdDocLnItemLedgEntries@5(VAR ItemLedgEntry@1000 : Record "Item Ledger Entry");
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Purchase Receipt");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    [External]
    PROCEDURE ShowItemPurchInvLines@9();
    VAR
      TempPurchInvLine@1001 : TEMPORARY Record "Purch. Inv. Line";
    BEGIN
      if Type = Type::Item then begin
        GetPurchInvLines(TempPurchInvLine);
        PAGE.RUNMODAL(PAGE::"Posted Purchase Invoice Lines",TempPurchInvLine);
      end;
    END;

    LOCAL PROCEDURE InitCurrency@7(CurrencyCode@1001 : Code[10]);
    BEGIN
      if (Currency.Code = CurrencyCode) and CurrencyRead then
        exit;

      if CurrencyCode <> '' then
        Currency.GET(CurrencyCode)
      else
        Currency.InitRoundingPrecision;
      CurrencyRead := true;
    END;

    [External]
    PROCEDURE ShowLineComments@11();
    VAR
      PurchCommentLine@1002 : Record "Purch. Comment Line";
    BEGIN
      PurchCommentLine.ShowComments(PurchCommentLine."Document Type"::Receipt,"Document No.","Line No.");
    END;

    [External]
    PROCEDURE InitFromPurchLine@12(PurchRcptHeader@1001 : Record "Purch. Rcpt. Header";PurchLine@1002 : Record "Purchase Line");
    VAR
      Factor@1000 : Decimal;
    BEGIN
      INIT;
      TRANSFERFIELDS(PurchLine);
      if ("No." = '') and (Type in [Type::"G/L Account"..Type::"Charge (Item)"]) then
        Type := Type::" ";
      "Posting Date" := PurchRcptHeader."Posting Date";
      "Document No." := PurchRcptHeader."No.";
      Quantity := PurchLine."Qty. to Receive";
      "Quantity (Base)" := PurchLine."Qty. to Receive (Base)";
      if ABS(PurchLine."Qty. to Invoice") > ABS(PurchLine."Qty. to Receive") then begin
        "Quantity Invoiced" := PurchLine."Qty. to Receive";
        "Qty. Invoiced (Base)" := PurchLine."Qty. to Receive (Base)";
      end else begin
        "Quantity Invoiced" := PurchLine."Qty. to Invoice";
        "Qty. Invoiced (Base)" := PurchLine."Qty. to Invoice (Base)";
      end;
      "Qty. Rcd. Not Invoiced" := Quantity - "Quantity Invoiced";
      if PurchLine."Document Type" = PurchLine."Document Type"::Order then begin
        "Order No." := PurchLine."Document No.";
        "Order Line No." := PurchLine."Line No.";
      end;
      if (PurchLine.Quantity <> 0) and ("Job No." <> '') then begin
        Factor := PurchLine."Qty. to Receive" / PurchLine.Quantity;
        if Factor <> 1 then
          UpdateJobPrices(Factor);
      end;

      OnAfterInitFromPurchLine(PurchRcptHeader,PurchLine,Rec);
    END;

    PROCEDURE FormatType@144() : Text;
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
    BEGIN
      if Type = Type::" " then
        exit(PurchaseLine.FormatType);

      exit(FORMAT(Type));
    END;

    LOCAL PROCEDURE UpdateJobPrices@13(Factor@1000 : Decimal);
    BEGIN
      "Job Total Price" :=
        ROUND("Job Total Price" * Factor,Currency."Amount Rounding Precision");
      "Job Total Price (LCY)" :=
        ROUND("Job Total Price (LCY)" * Factor,Currency."Amount Rounding Precision");
      "Job Line Amount" :=
        ROUND("Job Line Amount" * Factor,Currency."Amount Rounding Precision");
      "Job Line Amount (LCY)" :=
        ROUND("Job Line Amount (LCY)" * Factor,Currency."Amount Rounding Precision");
      "Job Line Discount Amount" :=
        ROUND("Job Line Discount Amount" * Factor,Currency."Amount Rounding Precision");
      "Job Line Disc. Amount (LCY)" :=
        ROUND("Job Line Disc. Amount (LCY)" * Factor,Currency."Amount Rounding Precision");
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record Field;
    BEGIN
      Field.GET(DATABASE::"Purch. Rcpt. Line",FieldNumber);
      exit(Field."Field Caption");
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    BEGIN
      case FieldNumber of
        FIELDNO("No."):
          exit(STRSUBSTNO('3,%1',GetFieldCaption(FieldNumber)));
      end;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInitFromPurchLine@8(PurchRcptHeader@1000 : Record "Purch. Rcpt. Header";PurchLine@1001 : Record "Purchase Line";VAR PurchRcptLine@1002 : Record "Purch. Rcpt. Line");
    BEGIN
    END;

    BEGIN
    END.
  }
}

