OBJECT Table 1051 Sorting Table
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Sorting Table;
  }
  FIELDS
  {
    { 1   ;   ;Integer             ;Integer       ;CaptionML=ENU=Integer }
    { 2   ;   ;Decimal             ;Decimal       ;CaptionML=ENU=Decimal }
    { 3   ;   ;Code                ;Code20        ;CaptionML=ENU=Code }
  }
  KEYS
  {
    {    ;Integer                                 ;SumIndexFields=Decimal;
                                                   Clustered=true }
    {    ;Decimal                                  }
    {    ;Code                                     }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      TempSortingTable@1001 : TEMPORARY Record "Sorting Table";
      CurrMaxRemAmount@1000 : Decimal;
      NextEntryNo@1002 : Integer;

    [Internal]
    PROCEDURE UpdateData@1003(VAR BusChartBuf@1015 : Record "Business Chart Buffer";ReminderLevel@1011 : Record "Reminder Level";ChargePerLine@1010 : Boolean;Currency@1009 : Code[10];RemAmountTxt@1012 : Text;MaxRemAmount@1002 : Decimal);
    VAR
      AddFeeSetup@1007 : Record "Additional Fee Setup";
      CurrencyExchangeRate@1013 : Record "Currency Exchange Rate";
      RemAmount@1005 : Decimal;
      XIndex@1004 : Integer;
      NextRangeStart@1001 : Decimal;
      CurrencyFactor@1000 : Decimal;
      MeasureA@1008 : Text;
      MeasureB@1006 : Text;
      MeasureC@1003 : Text;
      FixedFee@1019 : Decimal;
    BEGIN
      CurrencyFactor := 1;
      BusChartBuf.Initialize;
      MeasureA := FORMAT(ReminderLevel."Add. Fee Calculation Type"::Fixed);
      MeasureB := FORMAT(ReminderLevel."Add. Fee Calculation Type"::"Single Dynamic");
      MeasureC := FORMAT(ReminderLevel."Add. Fee Calculation Type"::"Accumulated Dynamic");

      BusChartBuf.AddMeasure(MeasureA,1,BusChartBuf."Data Type"::Decimal,BusChartBuf."Chart Type"::Line);
      BusChartBuf.AddMeasure(MeasureB,1,BusChartBuf."Data Type"::Decimal,BusChartBuf."Chart Type"::Line);
      BusChartBuf.AddMeasure(MeasureC,1,BusChartBuf."Data Type"::Decimal,BusChartBuf."Chart Type"::Line);
      BusChartBuf.SetXAxis(RemAmountTxt,BusChartBuf."Data Type"::Decimal);

      AddFeeSetup.SETRANGE("Reminder Terms Code",ReminderLevel."Reminder Terms Code");
      AddFeeSetup.SETRANGE("Reminder Level No.",ReminderLevel."No.");
      AddFeeSetup.SETRANGE("Charge Per Line",ChargePerLine);
      AddFeeSetup.SETRANGE("Currency Code",Currency);
      if (not AddFeeSetup.FINDSET) and (Currency <> '') then begin
        AddFeeSetup.SETRANGE("Currency Code",'');
        CurrencyFactor := CurrencyExchangeRate.ExchangeAmtLCYToFCY(
            TODAY,Currency,
            1,
            CurrencyExchangeRate.ExchangeRate(TODAY,Currency));
      end;
      CurrMaxRemAmount := MaxRemAmount / CurrencyFactor;
      RemAmount := 0;

      TempSortingTable.DELETEALL;
      NextEntryNo := 1;

      SetValuesAt(TempSortingTable,0);
      if AddFeeSetup.FINDSET then begin
        repeat
          // Add points for maximum values and just before the range change
          if AddFeeSetup."Threshold Remaining Amount" > 0 then begin
            RemAmount := AddFeeSetup."Threshold Remaining Amount" - 1;
            SetValuesAt(TempSortingTable,RemAmount);
          end;

          // Set at start value for range
          RemAmount := AddFeeSetup."Threshold Remaining Amount";
          SetValuesAt(TempSortingTable,RemAmount);

          if AddFeeSetup."Additional Fee %" > 0 then begin
            // Add points for miniumum and offset
            if (AddFeeSetup."Min. Additional Fee Amount" > 0) and
               (AddFeeSetup."Additional Fee Amount" < AddFeeSetup."Min. Additional Fee Amount")
            then begin
              NextRangeStart := 0;
              if AddFeeSetup.NEXT <> 0 then begin
                NextRangeStart := AddFeeSetup."Threshold Remaining Amount";
                AddFeeSetup.NEXT(-1);
              end;

              RemAmount :=
                AddFeeSetup."Threshold Remaining Amount" +
                (AddFeeSetup."Min. Additional Fee Amount" - AddFeeSetup."Additional Fee Amount") /
                (AddFeeSetup."Additional Fee %" / 100);
              if (NextRangeStart > RemAmount) or (NextRangeStart = 0) then
                SetValuesAt(TempSortingTable,RemAmount);
              RemAmount :=
                AddFeeSetup."Threshold Remaining Amount" + AddFeeSetup."Min. Additional Fee Amount" /
                (AddFeeSetup."Additional Fee %" / 100);
              if (NextRangeStart > RemAmount) or (NextRangeStart = 0) then
                SetValuesAt(TempSortingTable,RemAmount);
            end;

            // Find maximum threshold
            if AddFeeSetup."Max. Additional Fee Amount" > 0 then begin
              SetValuesAt(TempSortingTable,AddFeeSetup."Max. Additional Fee Amount" / (AddFeeSetup."Additional Fee %" / 100));
              SetValuesAt(
                TempSortingTable,AddFeeSetup."Threshold Remaining Amount" +
                (AddFeeSetup."Max. Additional Fee Amount" - AddFeeSetup."Additional Fee Amount") /
                (AddFeeSetup."Additional Fee %" / 100));
              SetValuesAt(
                TempSortingTable,AddFeeSetup."Threshold Remaining Amount" +
                (AddFeeSetup."Max. Additional Fee Amount" - AddFeeSetup."Min. Additional Fee Amount") /
                (AddFeeSetup."Additional Fee %" / 100));
              SetValuesAt(
                TempSortingTable,AddFeeSetup."Threshold Remaining Amount" + AddFeeSetup."Max. Additional Fee Amount" /
                (AddFeeSetup."Additional Fee %" / 100));
            end;
          end;
        until AddFeeSetup.NEXT = 0;

        // Add final entries
        RemAmount := RemAmount * 1.5;
        if RemAmount = 0 then
          RemAmount := 1000;
        SetValuesAt(TempSortingTable,RemAmount);
        if CurrMaxRemAmount > 0 then
          SetValuesAt(TempSortingTable,CurrMaxRemAmount);
      end else
        SetValuesAt(TempSortingTable,1000);

      // Add the points in order
      FixedFee := ReminderLevel.CalculateAdditionalFixedFee(Currency,ChargePerLine,TODAY);
      TempSortingTable.SETCURRENTKEY(Decimal);
      if TempSortingTable.FINDSET then
        repeat
          BusChartBuf.AddColumn(TempSortingTable.Decimal * CurrencyFactor);
          BusChartBuf.SetValue(MeasureA,XIndex,FixedFee);
          BusChartBuf.SetValue(
            MeasureB,XIndex,
            AddFeeSetup.GetAdditionalFeeFromSetup(ReminderLevel,
              TempSortingTable.Decimal * CurrencyFactor,Currency,ChargePerLine,1,TODAY));
          BusChartBuf.SetValue(
            MeasureC,XIndex,
            AddFeeSetup.GetAdditionalFeeFromSetup(ReminderLevel,
              TempSortingTable.Decimal * CurrencyFactor,Currency,ChargePerLine,2,TODAY));
          XIndex += 1;
        until TempSortingTable.NEXT = 0;
    END;

    LOCAL PROCEDURE SetValuesAt@1010(VAR TempSortingTable@1001 : TEMPORARY Record "Sorting Table";RemAmount@1000 : Decimal);
    BEGIN
      if (RemAmount > CurrMaxRemAmount) and (CurrMaxRemAmount > 0) then
        exit;
      TempSortingTable.INIT;
      TempSortingTable.Integer := NextEntryNo;
      NextEntryNo += 1;
      TempSortingTable.Decimal := RemAmount; // Used as buffer to store decimals and sort them later
      TempSortingTable.INSERT;
    END;

    BEGIN
    END.
  }
}

