OBJECT Table 5950 Service Order Allocation
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               ServOrderAlloc.RESET;
               if ServOrderAlloc.FIND('+') then
                 "Entry No." := ServOrderAlloc."Entry No." + 1
               else
                 "Entry No." := 1;
               TESTFIELD("Document No.");

               if ("Service Item Line No." <> 0) and
                  ("Resource No." <> '')
               then begin
                 CheckAllocationEntry;
                 if not HideDialog and ServHeader.GET("Document Type","Document No.") then
                   ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
               end;

               if Status = Status::Nonactive then begin
                 if ("Resource No." <> '') or
                    ("Resource Group No." <> '')
                 then
                   CheckAllocationEntry;

                 if ("Allocation Date" <> 0D) and
                    (("Resource No." <> '') or ("Resource Group No." <> ''))
                 then
                   VALIDATE(Status,Status::Active);
               end;
             END;

    OnModify=BEGIN
               TESTFIELD("Service Item Line No.");
               if not HideDialog and ServHeader.GET("Document Type","Document No.") then begin
                 ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,xRec."Service Item Line No.");
                 ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
               end;
               if Status = Status::Active then
                 if ("Resource No." = '') and
                    ("Resource Group No." = '')
                 then
                   ERROR(Text008,FIELDCAPTION("Resource No."),FIELDCAPTION("Resource Group No."));
               CheckAllocationEntry;

               if Status = Status::Nonactive then
                 if ("Allocation Date" <> 0D) and
                    (("Resource No." <> '') or ("Resource Group No." <> ''))
                 then
                   VALIDATE(Status,Status::Active);
             END;

    OnDelete=BEGIN
               if not HideDialog and ServHeader.GET("Document Type","Document No.") then
                 ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
             END;

    CaptionML=ENU=Service Order Allocation;
    LookupPageID="Service Order Allocations";
    DrillDownPageID="Service Order Allocations";
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Status              ;Option        ;OnValidate=BEGIN
                                                                case Status of
                                                                  Status::Canceled:
                                                                    begin
                                                                      CLEAR(ServLogMgt);
                                                                      ServLogMgt.ServHeaderCancelAllocation("Resource No.","Document Type","Document No.","Service Item Line No.");
                                                                    end;
                                                                  Status::Active:
                                                                    begin
                                                                      CLEAR(ServLogMgt);
                                                                      ServLogMgt.ServHeaderAllocation("Resource No.","Document Type","Document No.","Service Item Line No.");
                                                                    end;
                                                                  Status::"Reallocation Needed":
                                                                    begin
                                                                      CLEAR(ServLogMgt);
                                                                      ServLogMgt.ServHeaderReallocationNeeded("Resource No.","Document Type","Document No.","Service Item Line No.");
                                                                    end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Nonactive,Active,Finished,Canceled,Reallocation Needed;
                                                   OptionString=Nonactive,Active,Finished,Canceled,"Reallocation Needed";
                                                   Editable=false }
    { 3   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              ServOrderNo@1000 : Code[20];
                                                            BEGIN
                                                              ServOrderNo := "Document No.";
                                                              CLEAR(ServOrderMgt);
                                                              ServOrderMgt.ServHeaderLookup("Document Type",ServOrderNo);
                                                            END;

                                                   CaptionML=ENU=Document No.;
                                                   Editable=false }
    { 4   ;   ;Allocation Date     ;Date          ;OnValidate=BEGIN
                                                                if "Allocation Date" = 0D then
                                                                  if Status <> Status::Nonactive then
                                                                    ERROR(Text001,FIELDCAPTION("Allocation Date"),FIELDCAPTION(Status),Status);

                                                                if "Allocation Date" < WORKDATE then
                                                                  MESSAGE(Text002,FIELDCAPTION("Allocation Date"),"Allocation Date");
                                                              END;

                                                   CaptionML=ENU=Allocation Date }
    { 5   ;   ;Resource No.        ;Code20        ;TableRelation=Resource;
                                                   OnValidate=BEGIN
                                                                if "Resource No." <> '' then begin
                                                                  ServmgtSetup.GET;
                                                                  Res.GET("Resource No.");
                                                                  "Resource Group No." := Res."Resource Group No.";
                                                                  if ServmgtSetup."Resource Skills Option" = ServmgtSetup."Resource Skills Option"::"Warning Displayed"
                                                                  then
                                                                    if "Service Item Line No." <> 0 then begin
                                                                      ServItemLine.GET("Document Type","Document No.","Service Item Line No.");
                                                                      if not
                                                                         ServOrderAllocMgt.QualifiedForServiceItemLine(ServItemLine,"Resource No.")
                                                                      then
                                                                        ERROR(Text003,FIELDCAPTION("Resource No."),"Resource No.");
                                                                    end;

                                                                  if ServmgtSetup."Service Zones Option" = ServmgtSetup."Service Zones Option"::"Warning Displayed"
                                                                  then begin
                                                                    ServHeader.GET("Document Type","Document No.");
                                                                    Res."Service Zone Filter" := ServHeader."Service Zone Code";
                                                                    Res.CALCFIELDS("In Customer Zone");

                                                                    if not Res."In Customer Zone" then
                                                                      if not CONFIRM(
                                                                           STRSUBSTNO(
                                                                             Text004,
                                                                             FIELDCAPTION("Resource No."),
                                                                             "Resource No.",
                                                                             ServHeader.FIELDCAPTION("Service Zone Code"),
                                                                             ServHeader."Service Zone Code"),false)
                                                                      then
                                                                        ERROR('');
                                                                  end;

                                                                  if (Status = Status::"Reallocation Needed") or (Status = Status::Active) then
                                                                    CreateReallocationEntry;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Resource No. }
    { 6   ;   ;Resource Group No.  ;Code20        ;TableRelation="Resource Group";
                                                   OnValidate=BEGIN
                                                                if ("Resource Group No." <> '') and
                                                                   ("Resource Group No." <> xRec."Resource Group No.")
                                                                then begin
                                                                  if Res.GET("Resource No.") then
                                                                    if "Resource Group No." <> Res."Resource Group No." then
                                                                      "Resource No." := '';
                                                                  if (Status = Status::"Reallocation Needed") or (Status = Status::Active) then
                                                                    CreateReallocationEntry;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Resource Group No. }
    { 7   ;   ;Service Item Line No.;Integer      ;TableRelation="Service Item Line"."Line No." WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                       "Document No."=FIELD("Document No."));
                                                   OnValidate=BEGIN
                                                                if not HideDialog and ServHeader.GET("Document Type","Document No.") then
                                                                  ServOrderAllocMgt.CheckServiceItemLineFinished(ServHeader,"Service Item Line No.");
                                                                if ServItemLine.GET("Document Type","Document No.","Service Item Line No.") then begin
                                                                  "Service Item No." := ServItemLine."Service Item No.";
                                                                  "Service Item Serial No." := ServItemLine."Serial No.";
                                                                end else begin
                                                                  "Service Item No." := '';
                                                                  "Service Item Serial No." := '';
                                                                end;

                                                                CALCFIELDS("Service Item Description");
                                                              END;

                                                   CaptionML=ENU=Service Item Line No. }
    { 8   ;   ;Allocated Hours     ;Decimal       ;OnValidate=BEGIN
                                                                if "Allocated Hours" = 0 then
                                                                  if Status <> Status::Nonactive then
                                                                    ERROR(
                                                                      Text005,
                                                                      FIELDCAPTION("Allocated Hours"),FIELDCAPTION(Status),Status);
                                                              END;

                                                   CaptionML=ENU=Allocated Hours;
                                                   DecimalPlaces=0:5 }
    { 9   ;   ;Starting Time       ;Time          ;OnValidate=BEGIN
                                                                ValidateStartEndTime;
                                                              END;

                                                   CaptionML=ENU=Starting Time }
    { 10  ;   ;Finishing Time      ;Time          ;OnValidate=BEGIN
                                                                ValidateStartEndTime;
                                                              END;

                                                   CaptionML=ENU=Finishing Time }
    { 11  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 12  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 13  ;   ;Service Item No.    ;Code20        ;TableRelation="Service Item";
                                                   OnValidate=BEGIN
                                                                if "Service Item No." <> '' then begin
                                                                  ServItemLine.RESET;
                                                                  ServItemLine.SETRANGE("Document Type","Document Type");
                                                                  ServItemLine.SETRANGE("Document No.","Document No.");
                                                                  ServItemLine.SETRANGE("Service Item No.","Service Item No.");
                                                                  ServItemLine.FINDFIRST;
                                                                  VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              ServItemLine.RESET;
                                                              ServItemLine.SETRANGE("Document Type","Document Type");
                                                              ServItemLine.SETRANGE("Document No.","Document No.");
                                                              ServItemLine."Service Item No." := "Service Item No.";
                                                              if PAGE.RUNMODAL(0,ServItemLine) = ACTION::LookupOK then
                                                                VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                            END;

                                                   CaptionML=ENU=Service Item No. }
    { 14  ;   ;Posted              ;Boolean       ;CaptionML=ENU=Posted }
    { 15  ;   ;Service Item Description;Text50    ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Item Line".Description WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                             "Document No."=FIELD("Document No."),
                                                                                                             "Line No."=FIELD("Service Item Line No.")));
                                                   CaptionML=ENU=Service Item Description;
                                                   Editable=false }
    { 16  ;   ;Service Item Serial No.;Code20     ;OnValidate=BEGIN
                                                                if "Service Item Serial No." <> '' then begin
                                                                  ServItemLine.RESET;
                                                                  ServItemLine.SETRANGE("Document Type","Document Type");
                                                                  ServItemLine.SETRANGE("Document No.","Document No.");
                                                                  ServItemLine.SETRANGE("Serial No.","Service Item Serial No.");
                                                                  ServItemLine.FINDFIRST;
                                                                  VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              ServItemLine.RESET;
                                                              ServItemLine.SETRANGE("Document Type","Document Type");
                                                              ServItemLine.SETRANGE("Document No.","Document No.");
                                                              ServItemLine."Serial No." := "Service Item Serial No.";
                                                              if PAGE.RUNMODAL(0,ServItemLine) = ACTION::LookupOK then
                                                                VALIDATE("Service Item Line No.",ServItemLine."Line No.");
                                                            END;

                                                   CaptionML=ENU=Service Item Serial No. }
    { 17  ;   ;Repair Status       ;Code20        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Service Item Line"."Repair Status Code" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                                      "Document No."=FIELD("Document No."),
                                                                                                                      "Line No."=FIELD("Service Item Line No.")));
                                                   CaptionML=ENU=Repair Status;
                                                   Editable=false }
    { 18  ;   ;Service Started     ;Boolean       ;CaptionML=ENU=Service Started }
    { 19  ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order;
                                                   OptionString=Quote,Order;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;Status,"Document Type","Document No.","Service Item Line No.","Allocation Date","Starting Time",Posted;
                                                   SumIndexFields="Allocated Hours" }
    {    ;"Document Type","Document No.",Status,"Resource Group No.","Allocation Date","Starting Time",Posted;
                                                   SumIndexFields="Allocated Hours" }
    {    ;Status,"Document Type","Document No.","Service Item Line No.","Resource No.","Allocation Date","Starting Time",Posted;
                                                   SumIndexFields="Allocated Hours" }
    {    ;"Document Type","Document No.","Service Item Line No.","Allocation Date","Starting Time",Posted;
                                                   SumIndexFields="Allocated Hours" }
    {    ;"Resource No.","Document Type","Allocation Date",Status,Posted }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Only one %1 can be allocated to a %2.';
      Text001@1001 : TextConst 'ENU=%1 must be filled in when the %2 is %3.';
      Text002@1002 : TextConst 'ENU=The %1 %2 has expired.';
      Text003@1003 : TextConst 'ENU=%1 %2 is not qualified to carry out the service.';
      Text004@1004 : TextConst 'ENU=%1 %2 is not working in %3 %4.';
      Text005@1005 : TextConst 'ENU=%1 must be greater than 0 when the %2 is %3.';
      Text006@1006 : TextConst 'ENU=%1 cannot be greater than %2.';
      Text007@1007 : TextConst 'ENU=%1 with the field %2 selected cannot be found.';
      ServHeader@1008 : Record "Service Header";
      ServItemLine@1009 : Record "Service Item Line";
      ServmgtSetup@1010 : Record "Service Mgt. Setup";
      ServOrderAlloc@1011 : Record "Service Order Allocation";
      ServOrderAlloc2@1012 : Record "Service Order Allocation";
      Res@1013 : Record Resource;
      ResGr@1025 : Record "Resource Group";
      RepairStatus@1014 : Record "Repair Status";
      RepairStatus2@1015 : Record "Repair Status";
      ServOrderMgt@1017 : Codeunit ServOrderManagement;
      ServOrderAllocMgt@1018 : Codeunit ServAllocationManagement;
      ServLogMgt@1019 : Codeunit ServLogManagement;
      ReallocEntryReasons@1016 : Page "Reallocation Entry Reasons";
      ChangeServItemLine@1020 : Boolean;
      HideDialog@1022 : Boolean;
      RepairStatusCode@1021 : Code[10];
      Flag@1023 : Boolean;
      Text008@1024 : TextConst 'ENU=%1 and %2 cannot be blank at the same time.';

    LOCAL PROCEDURE ValidateStartEndTime@1();
    BEGIN
      if "Starting Time" = 000000T then
        exit;
      if "Finishing Time" = 000000T then
        exit;
      if "Starting Time" > "Finishing Time" then
        ERROR(Text006,FIELDCAPTION("Starting Time"),FIELDCAPTION("Finishing Time"));
    END;

    LOCAL PROCEDURE CreateReallocationEntry@2();
    BEGIN
      RepairStatus2.RESET;
      RepairStatus2.SETRANGE(Initial,true);
      if RepairStatus2.FINDFIRST then
        RepairStatusCode := RepairStatus2.Code;

      ChangeServItemLine := false;

      CLEAR(ReallocEntryReasons);
      ReallocEntryReasons.SETRECORD(Rec);
      ReallocEntryReasons.SETTABLEVIEW(Rec);
      ReallocEntryReasons.SetNewResource("Resource No.","Resource Group No.");

      Flag := false;
      if not HideDialog then
        Flag := ReallocEntryReasons.RUNMODAL = ACTION::Yes
      else
        Flag := true;
      if Flag then begin
        "Reason Code" := ReallocEntryReasons.ReturnReasonCode;
        ServOrderAlloc2 := Rec;
        ServOrderAlloc.RESET;
        if ServOrderAlloc.FIND('+') then
          ServOrderAlloc2."Entry No." := ServOrderAlloc."Entry No." + 1;
        CALCFIELDS("Repair Status");
        RepairStatus.GET("Repair Status");
        if Status = Status::Active then begin
          if RepairStatus.Initial then begin
            RepairStatus2.RESET;
            RepairStatus2.SETRANGE(Referred,true);
            if RepairStatus2.FINDFIRST then begin
              ChangeServItemLine := true;
              RepairStatusCode := RepairStatus2.Code;
              VALIDATE(Status,Status::Active);
              ServOrderAlloc2."Resource No." := xRec."Resource No.";
              ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
              ServOrderAlloc2."Reason Code" := xRec."Reason Code";
              if "Service Started" then
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
              else
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
              ServOrderAlloc2.INSERT;
            end else
              ERROR(
                Text007,
                RepairStatus.TABLECAPTION,RepairStatus.FIELDCAPTION(Referred));
          end else
            if RepairStatus."In Process" then begin
              RepairStatus2.RESET;
              RepairStatus2.SETRANGE("Partly Serviced",true);
              if RepairStatus2.FINDFIRST then begin
                RepairStatusCode := RepairStatus2.Code;
                ChangeServItemLine := true;
                VALIDATE(Status,Status::Active);
                ServOrderAlloc2."Resource No." := xRec."Resource No.";
                ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
                ServOrderAlloc2."Reason Code" := xRec."Reason Code";
                if "Service Started" then
                  ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
                else
                  ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
                ServOrderAlloc2.INSERT;
              end else
                ERROR(
                  Text007,
                  RepairStatus.TABLECAPTION,RepairStatus.FIELDCAPTION("Partly Serviced"));
            end else begin
              VALIDATE(Status,Status::Active);
              ServOrderAlloc2."Resource No." := xRec."Resource No.";
              ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
              ServOrderAlloc2."Reason Code" := xRec."Reason Code";
              if "Service Started" then
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
              else
                ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
              ServOrderAlloc2.INSERT;
            end;
        end else begin
          VALIDATE(Status,Status::Active);
          ServOrderAlloc2."Resource No." := xRec."Resource No.";
          ServOrderAlloc2."Resource Group No." := xRec."Resource Group No.";
          ServOrderAlloc2."Reason Code" := xRec."Reason Code";
          if "Service Started" then
            ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Finished)
          else
            ServOrderAlloc2.VALIDATE(Status,ServOrderAlloc2.Status::Canceled);
          ServOrderAlloc2.INSERT;
        end;
        if ChangeServItemLine then begin
          TESTFIELD("Service Item Line No.");
          ServItemLine.GET("Document Type","Document No.","Service Item Line No.");
          ServItemLine."Repair Status Code" := RepairStatusCode;
          ServItemLine.MODIFY(true);
        end;
      end else begin
        "Resource No." := xRec."Resource No.";
        "Resource Group No." := xRec."Resource Group No.";
        exit;
      end;
    END;

    [External]
    PROCEDURE SetHideDialog@3(HideDialog1@1000 : Boolean);
    BEGIN
      HideDialog := HideDialog1;
    END;

    LOCAL PROCEDURE CheckAllocationEntry@4();
    BEGIN
      if not HideDialog then begin
        ServOrderAlloc.RESET;
        ServOrderAlloc.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
        ServOrderAlloc.SETRANGE("Document Type","Document Type");
        ServOrderAlloc.SETRANGE("Document No.","Document No.");
        ServOrderAlloc.SETRANGE("Service Item Line No.","Service Item Line No.");
        ServOrderAlloc.SETFILTER("Entry No.",'<>%1',"Entry No.");
        ServOrderAlloc.SETFILTER(Status,'%1|%2',ServOrderAlloc.Status::Active,ServOrderAlloc.Status::"Reallocation Needed");
        if ServOrderAlloc.FIND('-') then
          repeat
            if ("Resource No." <> '') and
               (ServOrderAlloc."Resource No." <> '') and
               (ServOrderAlloc."Resource No." <> "Resource No.")
            then
              ERROR(Text000,Res.TABLECAPTION,ServItemLine.TABLECAPTION);

            if ("Resource Group No." <> '') and
               (ServOrderAlloc."Resource Group No." <> '') and
               (ServOrderAlloc."Resource Group No." <> "Resource Group No.")
            then
              ERROR(Text000,ResGr.TABLECAPTION,ServItemLine.TABLECAPTION);
          until ServOrderAlloc.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE SetFilters@5(ServiceItemLine@1000 : Record "Service Item Line");
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
      SETRANGE("Document Type",ServiceItemLine."Document Type");
      SETRANGE("Document No.",ServiceItemLine."Document No.");
      SETRANGE("Service Item Line No.",ServiceItemLine."Line No.");
      SETRANGE(Status,ServOrderAlloc.Status::Active);
    END;

    BEGIN
    END.
  }
}

