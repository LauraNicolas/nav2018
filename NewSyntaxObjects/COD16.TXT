OBJECT Codeunit 16 Gen. Jnl.-Show CT Entries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Gen. Journal Line";
    OnRun=BEGIN
            if not ("Document Type" in ["Document Type"::Payment,"Document Type"::Refund,"Document Type"::" "]) then
              exit;
            if not ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee]) then
              exit;

            SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);

            PAGE.RUN(PAGE::"Credit Transfer Reg. Entries",CreditTransferEntry);
          END;

  }
  CODE
  {
    VAR
      CreditTransferEntry@1000 : Record "Credit Transfer Entry";

    [External]
    PROCEDURE SetFiltersOnCreditTransferEntry@86(VAR GenJournalLine@1005 : Record "Gen. Journal Line";VAR CreditTransferEntry@1000 : Record "Credit Transfer Entry");
    VAR
      GeneralLedgerSetup@1001 : Record "General Ledger Setup";
      CustLedgerEntry@1002 : Record "Cust. Ledger Entry";
      VendorLedgerEntry@1003 : Record "Vendor Ledger Entry";
      EmployeeLedgerEntry@1006 : Record "Employee Ledger Entry";
      FoundCorrespondingLedgerEntry@1004 : Boolean;
    BEGIN
      with GenJournalLine do begin
        CreditTransferEntry.RESET;
        FoundCorrespondingLedgerEntry := false;
        case "Account Type" of
          "Account Type"::Vendor:
            begin
              CreditTransferEntry.SETRANGE("Account Type",CreditTransferEntry."Account Type"::Vendor);
              if "Applies-to Doc. No." <> '' then begin
                VendorLedgerEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                VendorLedgerEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                if VendorLedgerEntry.FINDFIRST then begin
                  CreditTransferEntry.SETRANGE("Applies-to Entry No.",VendorLedgerEntry."Entry No.");
                  FoundCorrespondingLedgerEntry := true;
                end;
              end;
            end;
          "Account Type"::Customer:
            begin
              CreditTransferEntry.SETRANGE("Account Type",CreditTransferEntry."Account Type"::Customer);
              if "Applies-to Doc. No." <> '' then begin
                CustLedgerEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                CustLedgerEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                if CustLedgerEntry.FINDFIRST then begin
                  CreditTransferEntry.SETRANGE("Applies-to Entry No.",CustLedgerEntry."Entry No.");
                  FoundCorrespondingLedgerEntry := true;
                end;
              end;
            end;
          "Account Type"::Employee:
            begin
              CreditTransferEntry.SETRANGE("Account Type",CreditTransferEntry."Account Type"::Employee);
              if "Applies-to Doc. No." <> '' then begin
                EmployeeLedgerEntry.SETRANGE("Document Type","Applies-to Doc. Type");
                EmployeeLedgerEntry.SETRANGE("Document No.","Applies-to Doc. No.");
                if EmployeeLedgerEntry.FINDFIRST then begin
                  CreditTransferEntry.SETRANGE("Applies-to Entry No.",EmployeeLedgerEntry."Entry No.");
                  FoundCorrespondingLedgerEntry := true;
                end;
              end;
            end;
        end;
        CreditTransferEntry.SETRANGE("Account No.","Account No.");
        if not FoundCorrespondingLedgerEntry then
          CreditTransferEntry.SETRANGE("Applies-to Entry No.",0);
        GeneralLedgerSetup.GET;
        CreditTransferEntry.SETFILTER(
          "Currency Code",'''%1''|''%2''',"Currency Code",GeneralLedgerSetup.GetCurrencyCode("Currency Code"));
        CreditTransferEntry.SETRANGE(Canceled,false);
      end;
    END;

    BEGIN
    END.
  }
}

