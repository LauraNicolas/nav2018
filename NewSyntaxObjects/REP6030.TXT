OBJECT Report 6030 Create Contract Invoices
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Create Contract Invoices;
    ProcessingOnly=true;
    OnInitReport=BEGIN
                   if not SetOptionsCalled then
                     PostingDate := WORKDATE;
                   NoOfInvoices := 0;
                 END;

  }
  DATASET
  {
    { 9952;    ;DataItem;Service Contract Header;
               DataItemTable="Service Contract Header";
               DataItemTableView=SORTING("Bill-to Customer No.","Contract Type","Combine Invoices","Next Invoice Date") WHERE("Contract Type"=CONST(Contract),Status=CONST(Signed),"Change Status"=CONST(Locked));
               OnPreDataItem=BEGIN
                               if CreateInvoices = CreateInvoices::"Print Only" then begin
                                 CLEAR(ContractInvoicingTest);
                                 ContractInvoicingTest.InitVariables(PostingDate,InvoiceToDate);
                                 ContractInvoicingTest.SETTABLEVIEW("Service Contract Header");
                                 ContractInvoicingTest.RUNMODAL;
                                 CurrReport.BREAK;
                               end;

                               if PostingDate = 0D then
                                 ERROR(Text000);

                               if not HideDialog then
                                 if PostingDate > WORKDATE then
                                   if not CONFIRM(Text001) then
                                     ERROR(Text002);

                               if InvoiceToDate = 0D then
                                 ERROR(Text003);

                               if not HideDialog then
                                 if InvoiceToDate > WORKDATE then
                                   if not CONFIRM(Text004) then
                                     ERROR(Text002);

                               LastCustomer := '';
                               LastContractCombined := false;
                               SETFILTER("Next Invoice Date",'<>%1&<=%2',0D,InvoiceToDate);
                               if GETFILTER("Invoice Period") <> '' then
                                 SETFILTER("Invoice Period",GETFILTER("Invoice Period") + '&<>%1',"Invoice Period"::None)
                               else
                                 SETFILTER("Invoice Period",'<>%1',"Invoice Period"::None);
                               ServContractMgt.CheckMultipleCurrenciesForCustomers("Service Contract Header");
                               Window.OPEN(
                                 Text005 +
                                 '@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

                               CounterTotal := COUNT;
                               Counter1 := 0;
                               Counter2 := 0;
                               CounterBreak := ROUND(CounterTotal / 100,1,'>');
                               Currency.InitRoundingPrecision;
                             END;

               OnAfterGetRecord=BEGIN
                                  Counter1 := Counter1 + 1;
                                  Counter2 := Counter2 + 1;
                                  if Counter2 >= CounterBreak then begin
                                    Counter2 := 0;
                                    Window.UPDATE(1,ROUND(Counter1 / CounterTotal * 10000,1));
                                  end;
                                  CLEAR(ServContractMgt);
                                  ServContractMgt.InitCodeUnit;
                                  ServContractHeader := "Service Contract Header";
                                  with ServContractHeader do begin
                                    TESTFIELD("Serv. Contract Acc. Gr. Code");
                                    ServContractAccGr.GET("Serv. Contract Acc. Gr. Code");
                                    ServContractAccGr.TESTFIELD("Non-Prepaid Contract Acc.");
                                    if Prepaid then
                                      ServContractAccGr.TESTFIELD("Prepaid Contract Acc.");
                                    Cust.GET("Customer No.");
                                    ResultDescription := '';
                                    ServContractMgt.GetNextInvoicePeriod(ServContractHeader,InvoiceFrom,InvoiceTo);
                                    ContractExist := CheckIfCombinationExists("Service Contract Header");
                                    if "Amount per Period" > 0 then begin
                                      if not ServContractMgt.CheckIfServiceExist(ServContractHeader) then
                                        ResultDescription := Text006;
                                      if ResultDescription = '' then begin
                                        InvoicedAmount := ROUND(
                                            ServContractMgt.CalcContractAmount(ServContractHeader,InvoiceFrom,InvoiceTo),
                                            Currency."Amount Rounding Precision");
                                        if InvoicedAmount = 0 then
                                          CurrReport.SKIP;
                                        if not "Combine Invoices" or (LastCustomer <> "Bill-to Customer No.") or not LastContractCombined
                                        then begin
                                          InvoiceNo := ServContractMgt.CreateServHeader(ServContractHeader,PostingDate,ContractExist);
                                          NoOfInvoices := NoOfInvoices + 1;
                                        end;
                                        ResultDescription := InvoiceNo;
                                        ServContractMgt.CreateAllServLines(InvoiceNo,ServContractHeader);
                                        LastCustomer := "Bill-to Customer No.";
                                        LastContractCombined := "Combine Invoices";
                                      end;
                                    end else
                                      if "Annual Amount" = 0 then
                                        ResultDescription := STRSUBSTNO(Text009,FIELDCAPTION("Annual Amount"))
                                      else
                                        ResultDescription := '';
                                  end;
                                  ServContractMgt.FinishCodeunit;
                                END;

               OnPostDataItem=BEGIN
                                if not HideDialog then begin
                                  if CreateInvoices = CreateInvoices::"Create Invoices" then
                                    if NoOfInvoices > 1 then
                                      MESSAGE(Text010,NoOfInvoices)
                                    else
                                      MESSAGE(Text011,NoOfInvoices);
                                end;
                              END;

               ReqFilterFields="Bill-to Customer No.","Contract No." }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=ENU=Posting Date;
                  ToolTipML=ENU=Specifies the date that you want to use as the posting date on the service invoices created.;
                  ApplicationArea=#Service;
                  SourceExpr=PostingDate }

      { 2   ;2   ;Field     ;
                  Name=InvoiceToDate;
                  CaptionML=ENU=Invoice to Date;
                  ToolTipML=ENU=Specifies the date up to which you want to invoice contracts. The batch job includes contracts with next invoice dates on or before this date.;
                  ApplicationArea=#Service;
                  SourceExpr=InvoiceToDate }

      { 5   ;2   ;Field     ;
                  Name=CreateInvoices;
                  CaptionML=ENU=Action;
                  ToolTipML=ENU=Specifies the desired action for service contracts that are due for invoicing.;
                  OptionCaptionML=ENU=Create Invoices,Print Only;
                  ApplicationArea=#Service;
                  SourceExpr=CreateInvoices }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You have not filled in the posting date.';
      Text001@1001 : TextConst 'ENU=The posting date is later than the work date.\\Confirm that this is the correct date.';
      Text002@1002 : TextConst 'ENU=The program has stopped the batch job at your request.';
      Text003@1003 : TextConst 'ENU=You must fill in the Invoice-to Date field.';
      Text004@1004 : TextConst 'ENU=The Invoice-to Date is later than the work date.\\Confirm that this is the correct date.';
      Text005@1005 : TextConst 'ENU=Creating contract invoices...\\';
      Text006@1006 : TextConst 'ENU=Service Order is missing.';
      Text009@1008 : TextConst 'ENU=%1 is missing.';
      Text010@1009 : TextConst 'ENU=%1 invoices were created.';
      Text011@1010 : TextConst 'ENU=%1 invoice was created.';
      Cust@1011 : Record Customer;
      ServContractHeader@1015 : Record "Service Contract Header";
      ServContractAccGr@1037 : Record "Service Contract Account Group";
      Currency@1007 : Record Currency;
      ContractInvoicingTest@1012 : Report "Contract Invoicing";
      ServContractMgt@1016 : Codeunit ServContractManagement;
      Window@1018 : Dialog;
      InvoicedAmount@1019 : Decimal;
      NoOfInvoices@1020 : Integer;
      CounterTotal@1022 : Integer;
      Counter1@1023 : Integer;
      Counter2@1024 : Integer;
      CounterBreak@1025 : Integer;
      ResultDescription@1026 : Text[80];
      InvoiceNo@1027 : Code[20];
      LastCustomer@1028 : Code[20];
      InvoiceFrom@1029 : Date;
      InvoiceTo@1030 : Date;
      PostingDate@1031 : Date;
      InvoiceToDate@1032 : Date;
      LastContractCombined@1034 : Boolean;
      CreateInvoices@1035 : '"Create Invoices","Print Only"';
      ContractExist@1036 : Boolean;
      HideDialog@1038 : Boolean;
      SetOptionsCalled@1039 : Boolean;

    LOCAL PROCEDURE CheckIfCombinationExists@1(FromServContract@1001 : Record "Service Contract Header") : Boolean;
    VAR
      ServContract2@1000 : Record "Service Contract Header";
    BEGIN
      ServContract2.SETCURRENTKEY("Customer No.","Bill-to Customer No.");
      ServContract2.SETFILTER("Contract No.",'<>%1',FromServContract."Contract No.");
      ServContract2.SETRANGE("Customer No.",FromServContract."Customer No.");
      ServContract2.SETRANGE("Bill-to Customer No.",FromServContract."Bill-to Customer No.");
      exit(ServContract2.FINDFIRST);
    END;

    PROCEDURE SetOptions@2(NewPostingDate@1000 : Date;NewInvoiceToDate@1001 : Date;NewCreateInvoices@1002 : '"Create Invoices","Print Only"');
    BEGIN
      SetOptionsCalled := true;
      PostingDate := NewPostingDate;
      InvoiceToDate := NewInvoiceToDate;
      CreateInvoices := NewCreateInvoices;
    END;

    PROCEDURE SetHideDialog@3(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

