OBJECT Table 901 Assembly Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
               VerifyReservationQuantity(Rec,xRec);
             END;

    OnModify=BEGIN
               WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);
               VerifyReservationChange(Rec,xRec);
             END;

    OnDelete=VAR
               WhseAssemblyRelease@1000 : Codeunit "Whse.-Assembly Release";
               AssemblyLineReserve@1001 : Codeunit "Assembly Line-Reserve";
             BEGIN
               TestStatusOpen;
               WhseValidateSourceLine.AssemblyLineDelete(Rec);
               WhseAssemblyRelease.DeleteLine(Rec);
               AssemblyLineReserve.DeleteLine(Rec);
               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);
             END;

    OnRename=BEGIN
               ERROR(Text002,TABLECAPTION);
             END;

    CaptionML=ENU=Assembly Line;
    LookupPageID="Assembly Lines";
    DrillDownPageID="Assembly Lines";
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,,,Blanket Order;
                                                   OptionString=Quote,Order,,,"Blanket Order" }
    { 2   ;   ;Document No.        ;Code20        ;TableRelation="Assembly Header"."No." WHERE ("Document Type"=FIELD("Document Type"));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Document No. }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 10  ;   ;Type                ;Option        ;OnValidate=BEGIN
                                                                TESTFIELD("Consumed Quantity",0);
                                                                VerifyReservationChange(Rec,xRec);
                                                                TestStatusOpen;

                                                                "No." := '';
                                                                "Variant Code" := '';
                                                                "Location Code" := '';
                                                                "Bin Code" := '';
                                                                InitResourceUsageType;
                                                                "Inventory Posting Group" := '';
                                                                "Gen. Prod. Posting Group" := '';
                                                                CLEAR("Lead-Time Offset");
                                                              END;

                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=" ,Item,Resource";
                                                   OptionString=" ",Item,Resource }
    { 11  ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(Item)) Item WHERE (Type=CONST(Inventory))
                                                                 ELSE IF (Type=CONST(Resource)) Resource;
                                                   OnValidate=BEGIN
                                                                TESTFIELD("Consumed Quantity",0);
                                                                CALCFIELDS("Reserved Quantity");
                                                                WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);
                                                                if "No." <> '' then
                                                                  CheckItemAvailable(FIELDNO("No."));
                                                                VerifyReservationChange(Rec,xRec);
                                                                TestStatusOpen;

                                                                if "No." <> xRec."No." then begin
                                                                  "Variant Code" := '';
                                                                  InitResourceUsageType;
                                                                end;

                                                                if "No." = '' then
                                                                  INIT
                                                                else begin
                                                                  GetHeader;
                                                                  "Due Date" := AssemblyHeader."Starting Date";
                                                                  case Type of
                                                                    Type::Item:
                                                                      begin
                                                                        "Location Code" := AssemblyHeader."Location Code";
                                                                        GetItemResource;
                                                                        Item.TESTFIELD("Inventory Posting Group");
                                                                        "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                        "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                        GetDefaultBin;
                                                                        Description := Item.Description;
                                                                        "Description 2" := Item."Description 2";
                                                                        "Unit Cost" := GetUnitCost;
                                                                        VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                        CreateDim(DATABASE::Item,"No.",AssemblyHeader."Dimension Set ID");
                                                                        Reserve := Item.Reserve;
                                                                        VALIDATE(Quantity);
                                                                        VALIDATE("Quantity to Consume",
                                                                          MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble")));
                                                                      end;
                                                                    Type::Resource:
                                                                      begin
                                                                        GetItemResource;
                                                                        Resource.TESTFIELD("Gen. Prod. Posting Group");
                                                                        "Gen. Prod. Posting Group" := Resource."Gen. Prod. Posting Group";
                                                                        "Inventory Posting Group" := '';
                                                                        Description := Resource.Name;
                                                                        "Description 2" := Resource."Name 2";
                                                                        "Unit Cost" := GetUnitCost;
                                                                        VALIDATE("Unit of Measure Code",Resource."Base Unit of Measure");
                                                                        CreateDim(DATABASE::Resource,"No.",AssemblyHeader."Dimension Set ID");
                                                                        VALIDATE(Quantity);
                                                                        VALIDATE("Quantity to Consume",
                                                                          MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble")));
                                                                      end;
                                                                  end
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE ("Item No."=FIELD("No."),
                                                                                                                  Code=FIELD("Variant Code"));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                TESTFIELD("Consumed Quantity",0);
                                                                CALCFIELDS("Reserved Quantity");
                                                                TESTFIELD("Reserved Quantity",0);
                                                                WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);
                                                                CheckItemAvailable(FIELDNO("Variant Code"));
                                                                VerifyReservationChange(Rec,xRec);
                                                                TestStatusOpen;

                                                                if "Variant Code" = '' then begin
                                                                  GetItemResource;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2"
                                                                end else begin
                                                                  ItemVariant.GET("No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                  "Description 2" := ItemVariant."Description 2";
                                                                end;

                                                                GetDefaultBin;
                                                                "Unit Cost" := GetUnitCost;
                                                                "Cost Amount" := CalcCostAmount(Quantity,"Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 13  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 14  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 18  ;   ;Lead-Time Offset    ;DateFormula   ;OnValidate=BEGIN
                                                                GetHeader;
                                                                ValidateLeadTimeOffset(AssemblyHeader,"Lead-Time Offset",true);
                                                              END;

                                                   CaptionML=ENU=Lead-Time Offset }
    { 19  ;   ;Resource Usage Type ;Option        ;OnValidate=BEGIN
                                                                if "Resource Usage Type" = xRec."Resource Usage Type" then
                                                                  exit;

                                                                if Type = Type::Resource then
                                                                  TESTFIELD("Resource Usage Type")
                                                                else
                                                                  TESTFIELD("Resource Usage Type","Resource Usage Type"::" ");

                                                                GetHeader;
                                                                VALIDATE(Quantity,CalcQuantity("Quantity per",AssemblyHeader.Quantity));
                                                              END;

                                                   CaptionML=ENU=Resource Usage Type;
                                                   OptionCaptionML=ENU=" ,Direct,Fixed";
                                                   OptionString=" ",Direct,Fixed }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                TESTFIELD(Type,Type::Item);
                                                                WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);
                                                                CheckItemAvailable(FIELDNO("Location Code"));
                                                                VerifyReservationChange(Rec,xRec);
                                                                TestStatusOpen;

                                                                GetDefaultBin;

                                                                "Unit Cost" := GetUnitCost;
                                                                "Cost Amount" := CalcCostAmount(Quantity,"Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 21  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 22  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 23  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=VAR
                                                                WMSManagement@1000 : Codeunit "WMS Management";
                                                                WhseIntegrationMgt@1001 : Codeunit "Whse. Integration Management";
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD(Type,Type::Item);
                                                                if "Bin Code" <> '' then begin
                                                                  TESTFIELD("Location Code");
                                                                  WMSManagement.FindBin("Location Code","Bin Code",'');
                                                                  WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Assembly Line",
                                                                    FIELDCAPTION("Bin Code"),
                                                                    "Location Code",
                                                                    "Bin Code",0);
                                                                  CheckBin;
                                                                end;
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit "WMS Management";
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              TESTFIELD(Type,Type::Item);
                                                              if Quantity > 0 then
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","No.","Variant Code",'',"Bin Code")
                                                              else
                                                                BinCode := WMSManagement.BinLookUp("Location Code","No.","Variant Code",'');

                                                              if BinCode <> '' then
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code }
    { 25  ;   ;Position            ;Code10        ;CaptionML=ENU=Position }
    { 26  ;   ;Position 2          ;Code10        ;CaptionML=ENU=Position 2 }
    { 27  ;   ;Position 3          ;Code10        ;CaptionML=ENU=Position 3 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;OnValidate=VAR
                                                                ItemLedgEntry@1000 : Record "Item Ledger Entry";
                                                              BEGIN
                                                                if "Appl.-to Item Entry" <> 0 then begin
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD(Quantity);
                                                                  if Quantity < 0 then
                                                                    FIELDERROR(Quantity,Text029);
                                                                  ItemLedgEntry.GET("Appl.-to Item Entry");
                                                                  ItemLedgEntry.TESTFIELD(Positive,true);
                                                                  "Location Code" := ItemLedgEntry."Location Code";
                                                                  if not ItemLedgEntry.Open then
                                                                    MESSAGE(Text042,"Appl.-to Item Entry");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-to Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Appl.-to Item Entry }
    { 39  ;   ;Appl.-from Item Entry;Integer      ;OnLookup=BEGIN
                                                              SelectItemEntry(FIELDNO("Appl.-from Item Entry"));
                                                            END;

                                                   AccessByPermission=TableData Item=R;
                                                   CaptionML=ENU=Appl.-from Item Entry;
                                                   MinValue=0 }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);

                                                                RoundQty(Quantity);
                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                InitRemainingQty;
                                                                InitQtyToConsume;

                                                                CheckItemAvailable(FIELDNO(Quantity));
                                                                VerifyReservationQuantity(Rec,xRec);

                                                                "Cost Amount" := CalcCostAmount(Quantity,"Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 41  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   Editable=false }
    { 42  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=ENU=Remaining Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 43  ;   ;Remaining Quantity (Base);Decimal  ;CaptionML=ENU=Remaining Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 44  ;   ;Consumed Quantity   ;Decimal       ;CaptionML=ENU=Consumed Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 45  ;   ;Consumed Quantity (Base);Decimal   ;CaptionML=ENU=Consumed Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 46  ;   ;Quantity to Consume ;Decimal       ;OnValidate=BEGIN
                                                                WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);
                                                                RoundQty("Quantity to Consume");
                                                                RoundQty("Remaining Quantity");
                                                                if "Quantity to Consume" > "Remaining Quantity" then
                                                                  ERROR(Text003,
                                                                    FIELDCAPTION("Quantity to Consume"),FIELDCAPTION("Remaining Quantity"),"Remaining Quantity");

                                                                VALIDATE("Quantity to Consume (Base)",CalcBaseQty("Quantity to Consume"));
                                                              END;

                                                   CaptionML=ENU=Quantity to Consume;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 47  ;   ;Quantity to Consume (Base);Decimal ;CaptionML=ENU=Quantity to Consume (Base);
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 48  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry".Quantity WHERE ("Source ID"=FIELD("Document No."),
                                                                                                        "Source Ref. No."=FIELD("Line No."),
                                                                                                        "Source Type"=CONST(901),
                                                                                                        "Source Subtype"=FIELD("Document Type"),
                                                                                                        "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 49  ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Reservation Entry"."Quantity (Base)" WHERE ("Source ID"=FIELD("Document No."),
                                                                                                                 "Source Ref. No."=FIELD("Line No."),
                                                                                                                 "Source Type"=CONST(901),
                                                                                                                 "Source Subtype"=FIELD("Document Type"),
                                                                                                                 "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 50  ;   ;Avail. Warning      ;Boolean       ;CaptionML=ENU=Avail. Warning;
                                                   Editable=false }
    { 51  ;   ;Substitution Available;Boolean     ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Item Substitution" WHERE (Type=CONST(Item),
                                                                                                "Substitute Type"=CONST(Item),
                                                                                                "No."=FIELD("No."),
                                                                                                "Variant Code"=FIELD("Variant Code")));
                                                   CaptionML=ENU=Substitution Available;
                                                   Editable=false }
    { 52  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                GetHeader;
                                                                ValidateDueDate(AssemblyHeader,"Due Date",true);
                                                              END;

                                                   CaptionML=ENU=Due Date }
    { 53  ;   ;Reserve             ;Option        ;OnValidate=BEGIN
                                                                if Reserve <> Reserve::Never then begin
                                                                  TESTFIELD(Type,Type::Item);
                                                                  TESTFIELD("No.");
                                                                end;

                                                                CALCFIELDS("Reserved Qty. (Base)");
                                                                if Reserve = Reserve::Never then
                                                                  TESTFIELD("Reserved Qty. (Base)",0);

                                                                if xRec.Reserve = Reserve::Always then begin
                                                                  GetItemResource;
                                                                  if Item.Reserve = Item.Reserve::Always then
                                                                    TESTFIELD(Reserve,Reserve::Always);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Reserve;
                                                   OptionCaptionML=ENU=Never,Optional,Always;
                                                   OptionString=Never,Optional,Always }
    { 60  ;   ;Quantity per        ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);
                                                                if Type = Type::" " then
                                                                  ERROR(Text99000002,FIELDCAPTION("Quantity per"),FIELDCAPTION(Type),Type::" ");
                                                                RoundQty("Quantity per");

                                                                GetHeader;
                                                                VALIDATE(Quantity,CalcQuantity("Quantity per",AssemblyHeader.Quantity));
                                                                VALIDATE(
                                                                  "Quantity to Consume",
                                                                  MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble")));
                                                              END;

                                                   CaptionML=ENU=Quantity per;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 61  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 62  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group }
    { 63  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 65  ;   ;Unit Cost           ;Decimal       ;OnValidate=VAR
                                                                SkuItemUnitCost@1000 : Decimal;
                                                              BEGIN
                                                                TESTFIELD("No.");
                                                                GetItemResource;
                                                                if Type = Type::Item then begin
                                                                  SkuItemUnitCost := GetUnitCost;
                                                                  if Item."Costing Method" = Item."Costing Method"::Standard then
                                                                    if "Unit Cost" <> SkuItemUnitCost then
                                                                      ERROR(
                                                                        Text99000002,
                                                                        FIELDCAPTION("Unit Cost"),Item.FIELDCAPTION("Costing Method"),Item."Costing Method");
                                                                end;

                                                                "Cost Amount" := CalcCostAmount(Quantity,"Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 67  ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 72  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 80  ;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE ("Item No."=FIELD("No."))
                                                                 ELSE IF (Type=CONST(Resource)) "Resource Unit of Measure".Code WHERE ("Resource No."=FIELD("No."));
                                                   OnValidate=VAR
                                                                UOMMgt@1001 : Codeunit "Unit of Measure Management";
                                                              BEGIN
                                                                WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);
                                                                TestStatusOpen;

                                                                GetItemResource;
                                                                case Type of
                                                                  Type::Item:
                                                                    "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                  Type::Resource:
                                                                    "Qty. per Unit of Measure" := UOMMgt.GetResQtyPerUnitOfMeasure(Resource,"Unit of Measure Code");
                                                                  else
                                                                    "Qty. per Unit of Measure" := 1;
                                                                end;

                                                                CheckItemAvailable(FIELDNO("Unit of Measure Code"));
                                                                "Unit Cost" := GetUnitCost;
                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=VAR
                                                                DimMgt@1000 : Codeunit DimensionManagement;
                                                              BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 7301;   ;Pick Qty.           ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding" WHERE ("Activity Type"=FILTER(<>"Put-away"),
                                                                                                                       "Source Type"=CONST(901),
                                                                                                                       "Source Subtype"=FIELD("Document Type"),
                                                                                                                       "Source No."=FIELD("Document No."),
                                                                                                                       "Source Line No."=FIELD("Line No."),
                                                                                                                       "Source Subline No."=CONST(0),
                                                                                                                       "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                       "Action Type"=FILTER(" "|Place),
                                                                                                                       "Original Breakbulk"=CONST(false),
                                                                                                                       "Breakbulk No."=CONST(0)));
                                                   CaptionML=ENU=Pick Qty.;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 7302;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE ("Activity Type"=FILTER(<>"Put-away"),
                                                                                                                              "Source Type"=CONST(901),
                                                                                                                              "Source Subtype"=FIELD("Document Type"),
                                                                                                                              "Source No."=FIELD("Document No."),
                                                                                                                              "Source Line No."=FIELD("Line No."),
                                                                                                                              "Source Subline No."=CONST(0),
                                                                                                                              "Unit of Measure Code"=FIELD("Unit of Measure Code"),
                                                                                                                              "Action Type"=FILTER(" "|Place),
                                                                                                                              "Original Breakbulk"=CONST(false),
                                                                                                                              "Breakbulk No."=CONST(0)));
                                                   CaptionML=ENU=Pick Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 7303;   ;Qty. Picked         ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. Picked (Base)" := CalcBaseQty("Qty. Picked");
                                                              END;

                                                   CaptionML=ENU=Qty. Picked;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 7304;   ;Qty. Picked (Base)  ;Decimal       ;CaptionML=ENU=Qty. Picked (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Document Type","Document No.","Line No.";
                                                   Clustered=true }
    {    ;"Document Type","Document No.",Type,"Location Code";
                                                   SumIndexFields="Cost Amount",Quantity }
    {    ;"Document Type",Type,"No.","Variant Code","Location Code","Due Date";
                                                   SumIndexFields="Remaining Quantity (Base)","Qty. Picked (Base)","Consumed Quantity (Base)" }
    {    ;Type,"No."                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Item@1003 : Record Item;
      Resource@1004 : Record Resource;
      Text001@1055 : TextConst 'ENU=Automatic reservation is not possible.\Do you want to reserve items manually?';
      Text002@1017 : TextConst 'ENU=You cannot rename an %1.';
      Text003@1012 : TextConst 'ENU=%1 cannot be higher than the %2, which is %3.';
      Text029@1010 : TextConst '@@@=starts with "Quantity";ENU=must be positive';
      Text042@1011 : TextConst 'ENU=When posting the Applied to Ledger Entry, %1 will be opened first.';
      Text99000002@1006 : TextConst 'ENU=You cannot change %1 when %2 is ''%3''.';
      AssemblyHeader@1002 : Record "Assembly Header";
      StockkeepingUnit@1005 : Record "Stockkeeping Unit";
      GLSetup@1000 : Record "General Ledger Setup";
      ItemSubstMgt@1007 : Codeunit "Item Subst.";
      WhseValidateSourceLine@1015 : Codeunit "Whse. Validate Source Line";
      AssemblyLineReserve@1056 : Codeunit "Assembly Line-Reserve";
      GLSetupRead@1001 : Boolean;
      StatusCheckSuspended@1016 : Boolean;
      TestReservationDateConflict@1057 : Boolean;
      SkipVerificationsThatChangeDatabase@1018 : Boolean;
      Text049@1019 : TextConst 'ENU=%1 cannot be later than %2 because the %3 is set to %4.';
      Text050@1020 : TextConst 'ENU=Due Date %1 is before work date %2.';

    [External]
    PROCEDURE InitRemainingQty@51();
    BEGIN
      "Remaining Quantity" := MaxValue(Quantity - "Consumed Quantity",0);
      "Remaining Quantity (Base)" := MaxValue("Quantity (Base)" - "Consumed Quantity (Base)",0);
    END;

    [External]
    PROCEDURE InitQtyToConsume@53();
    BEGIN
      GetHeader;
      "Quantity to Consume" :=
        MinValue(MaxQtyToConsume,CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble"));
      "Quantity to Consume (Base)" :=
        MinValue(
          MaxQtyToConsumeBase,
          CalcBaseQty(CalcQuantity("Quantity per",AssemblyHeader."Quantity to Assemble (Base)")));
    END;

    [External]
    PROCEDURE MaxQtyToConsume@7() : Decimal;
    BEGIN
      exit("Remaining Quantity");
    END;

    LOCAL PROCEDURE MaxQtyToConsumeBase@34() : Decimal;
    BEGIN
      exit("Remaining Quantity (Base)");
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      if Type = Type::Item then
        if (StockkeepingUnit."Location Code" = "Location Code") and
           (StockkeepingUnit."Item No." = "No.") and
           (StockkeepingUnit."Variant Code" = "Variant Code")
        then
          exit(true);
      if StockkeepingUnit.GET("Location Code","No.","Variant Code") then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE GetUnitCost@23() : Decimal;
    VAR
      UnitCost@1000 : Decimal;
    BEGIN
      GetItemResource;

      case Type of
        Type::Item:
          if GetSKU then
            UnitCost := StockkeepingUnit."Unit Cost" * "Qty. per Unit of Measure"
          else
            UnitCost := Item."Unit Cost" * "Qty. per Unit of Measure";
        Type::Resource:
          UnitCost := Resource."Unit Cost" * "Qty. per Unit of Measure";
      end;

      exit(RoundUnitAmount(UnitCost));
    END;

    LOCAL PROCEDURE CalcCostAmount@41(Qty@1000 : Decimal;UnitCost@1001 : Decimal) : Decimal;
    BEGIN
      exit(ROUND(Qty * UnitCost));
    END;

    LOCAL PROCEDURE RoundUnitAmount@59(UnitAmount@1000 : Decimal) : Decimal;
    BEGIN
      GetGLSetup;

      exit(ROUND(UnitAmount,GLSetup."Unit-Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE ShowReservation@8();
    VAR
      Reservation@1000 : Page Reservation;
    BEGIN
      if Type = Type::Item then begin
        TESTFIELD("No.");
        TESTFIELD(Reserve);
        CLEAR(Reservation);
        Reservation.SetAssemblyLine(Rec);
        Reservation.RUNMODAL;
      end;
    END;

    [External]
    PROCEDURE ShowReservationEntries@21(Modal@1000 : Boolean);
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReservEngineMgt@1003 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      if Type = Type::Item then begin
        TESTFIELD("No.");
        ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,true);
        AssemblyLineReserve.FilterReservFor(ReservEntry,Rec);
        if Modal then
          PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
        else
          PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
      end;
    END;

    [External]
    PROCEDURE UpdateAvailWarning@42() : Boolean;
    VAR
      ItemCheckAvail@1000 : Codeunit "Item-Check Avail.";
    BEGIN
      "Avail. Warning" := false;
      if Type = Type::Item then
        "Avail. Warning" := ItemCheckAvail.AsmOrderLineShowWarning(Rec);
      exit("Avail. Warning");
    END;

    LOCAL PROCEDURE CheckItemAvailable@49(CalledByFieldNo@1001 : Integer);
    VAR
      AssemblySetup@1002 : Record "Assembly Setup";
      ItemCheckAvail@1000 : Codeunit "Item-Check Avail.";
    BEGIN
      if not UpdateAvailWarning then
        exit;

      if "Document Type" <> "Document Type"::Order then
        exit;

      AssemblySetup.GET;
      if not AssemblySetup."Stockout Warning" then
        exit;

      if Reserve = Reserve::Always then
        exit;

      if (CalledByFieldNo = CurrFieldNo) or
         ((CalledByFieldNo = FIELDNO("No.")) and (CurrFieldNo <> 0)) or
         ((CalledByFieldNo = FIELDNO(Quantity)) and (CurrFieldNo = FIELDNO("Quantity per")))
      then
        if ItemCheckAvail.AssemblyLineCheck(Rec) then
          ItemCheckAvail.RaiseUpdateInterruptedError;
    END;

    [Internal]
    PROCEDURE ShowAvailabilityWarning@43();
    VAR
      ItemCheckAvail@1000 : Codeunit "Item-Check Avail.";
    BEGIN
      TESTFIELD(Type,Type::Item);

      if "Due Date" = 0D then begin
        GetHeader;
        if AssemblyHeader."Due Date" <> 0D then
          VALIDATE("Due Date",AssemblyHeader."Due Date")
        else
          VALIDATE("Due Date",WORKDATE);
      end;

      ItemCheckAvail.AssemblyLineCheck(Rec);
    END;

    LOCAL PROCEDURE CalcBaseQty@3(Qty@1000 : Decimal) : Decimal;
    VAR
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      exit(UOMMgt.CalcBaseQty(Qty,"Qty. per Unit of Measure"));
    END;

    LOCAL PROCEDURE CalcQtyFromBase@2(QtyBase@1000 : Decimal) : Decimal;
    VAR
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      exit(UOMMgt.CalcQtyFromBase(QtyBase,"Qty. per Unit of Measure"));
    END;

    [External]
    PROCEDURE IsInbound@97() : Boolean;
    BEGIN
      if "Document Type" in ["Document Type"::Order,"Document Type"::Quote,"Document Type"::"Blanket Order"] then
        exit("Quantity (Base)" < 0);

      exit(false);
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      AssemblyLineReserve@1000 : Codeunit "Assembly Line-Reserve";
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      AssemblyLineReserve.CallItemTracking(Rec);
    END;

    LOCAL PROCEDURE GetItemResource@1();
    BEGIN
      if Type = Type::Item then
        if Item."No." <> "No." then
          Item.GET("No.");
      if Type = Type::Resource then
        if Resource."No." <> "No." then
          Resource.GET("No.");
    END;

    LOCAL PROCEDURE GetGLSetup@11();
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true
      end
    END;

    LOCAL PROCEDURE GetLocation@7300(VAR Location@1002 : Record Location;LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE AutoReserve@148();
    VAR
      ReservMgt@1002 : Codeunit "Reservation Management";
      FullAutoReservation@1000 : Boolean;
    BEGIN
      if Type <> Type::Item then
        exit;

      TESTFIELD("No.");
      if Reserve <> Reserve::Always then
        exit;

      if "Remaining Quantity (Base)" <> 0 then begin
        TESTFIELD("Due Date");
        ReservMgt.SetAssemblyLine(Rec);
        ReservMgt.AutoReserve(FullAutoReservation,'',"Due Date","Remaining Quantity","Remaining Quantity (Base)");
        FIND;
        if not FullAutoReservation and (CurrFieldNo <> 0) then
          if CONFIRM(Text001,true) then begin
            COMMIT;
            ShowReservation;
            FIND;
          end;
      end;
    END;

    [External]
    PROCEDURE ReservationStatus@58() : Integer;
    VAR
      Status@1000 : '" ",Partial,Complete';
    BEGIN
      if (Reserve = Reserve::Never) or ("Remaining Quantity" = 0) then
        exit(Status::" ");

      CALCFIELDS("Reserved Quantity");
      if "Reserved Quantity" = 0 then begin
        if Reserve = Reserve::Always then
          exit(Status::Partial);
        exit(Status::" ");
      end;

      if "Reserved Quantity" < "Remaining Quantity" then
        exit(Status::Partial);

      exit(Status::Complete);
    END;

    [External]
    PROCEDURE SetTestReservationDateConflict@155(NewTestReservationDateConflict@1000 : Boolean);
    BEGIN
      TestReservationDateConflict := NewTestReservationDateConflict;
    END;

    LOCAL PROCEDURE GetHeader@4();
    BEGIN
      if (AssemblyHeader."No." <> "Document No.") and ("Document No." <> '') then
        AssemblyHeader.GET("Document Type","Document No.");
    END;

    [External]
    PROCEDURE ShowDimensions@25();
    VAR
      DimMgt@1000 : Codeunit DimensionManagement;
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Document Type","Document No.","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE CreateDim@26(Type1@1000 : Integer;No1@1001 : Code[20];HeaderDimensionSetID@1009 : Integer);
    VAR
      SourceCodeSetup@1006 : Record "Source Code Setup";
      AssemblySetup@1002 : Record "Assembly Setup";
      DimMgt@1003 : Codeunit DimensionManagement;
      TableID@1007 : ARRAY [10] OF Integer;
      No@1008 : ARRAY [10] OF Code[20];
      DimensionSetIDArr@1004 : ARRAY [10] OF Integer;
    BEGIN
      if SkipVerificationsThatChangeDatabase then
        exit;

      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      AssemblySetup.GET;
      case AssemblySetup."Copy Component Dimensions from" of
        AssemblySetup."Copy Component Dimensions from"::"Order Header":
          begin
            DimensionSetIDArr[1] :=
              DimMgt.GetRecDefaultDimID(
                Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Assembly,
                "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
                0,0);
            DimensionSetIDArr[2] := HeaderDimensionSetID;
          end;
        AssemblySetup."Copy Component Dimensions from"::"Item/Resource Card":
          begin
            DimensionSetIDArr[2] :=
              DimMgt.GetRecDefaultDimID(
                Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Assembly,
                "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",
                0,0);
            DimensionSetIDArr[1] := HeaderDimensionSetID;
          end;
      end;

      "Dimension Set ID" :=
        DimMgt.GetCombinedDimensionSetID(DimensionSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE UpdateDim@10(NewHeaderSetID@1002 : Integer;OldHeaderSetID@1000 : Integer);
    VAR
      DimMgt@1003 : Codeunit DimensionManagement;
    BEGIN
      "Dimension Set ID" := DimMgt.GetDeltaDimSetID("Dimension Set ID",NewHeaderSetID,OldHeaderSetID);
      DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1002 : Codeunit DimensionManagement;
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [Internal]
    PROCEDURE ShowItemSub@30();
    BEGIN
      ItemSubstMgt.ItemAssemblySubstGet(Rec);
    END;

    [External]
    PROCEDURE ShowAssemblyList@39();
    VAR
      BomComponent@1001 : Record "BOM Component";
    BEGIN
      TESTFIELD(Type,Type::Item);
      BomComponent.SETRANGE("Parent Item No.","No.");
      PAGE.RUN(PAGE::"Assembly BOM",BomComponent);
    END;

    [Internal]
    PROCEDURE ExplodeAssemblyList@9();
    VAR
      AssemblyLineManagement@1000 : Codeunit "Assembly Line Management";
    BEGIN
      AssemblyLineManagement.ExplodeAsmList(Rec);
    END;

    [External]
    PROCEDURE CalcQuantityPer@15(Qty@1000 : Decimal) : Decimal;
    BEGIN
      GetHeader;
      AssemblyHeader.TESTFIELD(Quantity);

      if FixedUsage then
        exit(Qty);

      exit(Qty / AssemblyHeader.Quantity);
    END;

    [External]
    PROCEDURE CalcQuantityFromBOM@20(LineType@1004 : Option;QtyPer@1000 : Decimal;HeaderQty@1001 : Decimal;HeaderQtyPerUOM@1003 : Decimal;LineResourceUsageType@1002 : Option) : Decimal;
    BEGIN
      if FixedUsage2(LineType,LineResourceUsageType) then
        exit(QtyPer);

      exit(QtyPer * HeaderQty * HeaderQtyPerUOM);
    END;

    LOCAL PROCEDURE CalcQuantity@115(LineQtyPer@1000 : Decimal;HeaderQty@1001 : Decimal) : Decimal;
    BEGIN
      exit(CalcQuantityFromBOM(Type,LineQtyPer,HeaderQty,1,"Resource Usage Type"));
    END;

    [External]
    PROCEDURE FilterLinesWithItemToPlan@33(VAR Item@1000 : Record Item;DocumentType@1002 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type",Type,"No.","Variant Code","Location Code");
      SETRANGE("Document Type",DocumentType);
      SETRANGE(Type,Type::Item);
      SETRANGE("No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Remaining Quantity (Base)",'<>0');
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@32(VAR Item@1000 : Record Item;DocumentType@1002 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE LinesWithItemToPlanExist@31(VAR Item@1000 : Record Item;DocumentType@1002 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      exit(not ISEMPTY);
    END;

    LOCAL PROCEDURE GetEarliestAvailDate@35(CompanyInfo@1001 : Record "Company Information";GrossRequirement@1002 : Decimal;ExcludeQty@1004 : Decimal;ExcludeDate@1005 : Date) : Date;
    VAR
      AvailableToPromise@1000 : Codeunit "Available to Promise";
      QtyAvailable@1003 : Decimal;
    BEGIN
      GetItemResource;
      SetItemFilter(Item);

      exit(
        AvailableToPromise.EarliestAvailabilityDate(
          Item,
          GrossRequirement,
          "Due Date",
          ExcludeQty,
          ExcludeDate,
          QtyAvailable,
          CompanyInfo."Check-Avail. Time Bucket",
          CompanyInfo."Check-Avail. Period Calc."));
    END;

    LOCAL PROCEDURE SelectItemEntry@44(CurrentFieldNo@1000 : Integer);
    VAR
      ItemLedgEntry@1001 : Record "Item Ledger Entry";
      AsmLine3@1002 : Record "Assembly Line";
    BEGIN
      ItemLedgEntry.SETRANGE("Item No.","No.");
      ItemLedgEntry.SETRANGE("Location Code","Location Code");
      ItemLedgEntry.SETRANGE("Variant Code","Variant Code");

      if CurrentFieldNo = FIELDNO("Appl.-to Item Entry") then begin
        ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
        ItemLedgEntry.SETRANGE(Positive,true);
        ItemLedgEntry.SETRANGE(Open,true);
      end else begin
        ItemLedgEntry.SETCURRENTKEY("Item No.",Positive);
        ItemLedgEntry.SETRANGE(Positive,false);
        ItemLedgEntry.SETFILTER("Shipped Qty. Not Returned",'<0');
      end;
      if PAGE.RUNMODAL(PAGE::"Item Ledger Entries",ItemLedgEntry) = ACTION::LookupOK then begin
        AsmLine3 := Rec;
        if CurrentFieldNo = FIELDNO("Appl.-to Item Entry") then
          AsmLine3.VALIDATE("Appl.-to Item Entry",ItemLedgEntry."Entry No.")
        else
          AsmLine3.VALIDATE("Appl.-from Item Entry",ItemLedgEntry."Entry No.");
        Rec := AsmLine3;
      end;
    END;

    [External]
    PROCEDURE SetItemFilter@45(VAR Item@1000 : Record Item);
    BEGIN
      if Type = Type::Item then begin
        Item.GET("No.");
        if "Due Date" = 0D then
          "Due Date" := WORKDATE;
        Item.SETRANGE("Date Filter",0D,"Due Date");
        Item.SETRANGE("Location Filter","Location Code");
        Item.SETRANGE("Variant Filter","Variant Code");
      end;
    END;

    LOCAL PROCEDURE CalcAvailQuantities@24(VAR Item@1001 : Record Item;VAR GrossRequirement@1002 : Decimal;VAR ScheduledReceipt@1004 : Decimal;VAR ExpectedInventory@1007 : Decimal;VAR AvailableInventory@1012 : Decimal;VAR EarliestDate@1010 : Date);
    VAR
      OldAssemblyLine@1011 : Record "Assembly Line";
      CompanyInfo@1008 : Record "Company Information";
      AvailableToPromise@1013 : Codeunit "Available to Promise";
      AvailabilityDate@1009 : Date;
      ReservedReceipt@1000 : Decimal;
      ReservedRequirement@1003 : Decimal;
      PeriodType@1006 : 'Day,Week,Month,Quarter,Year';
      LookaheadDateFormula@1005 : DateFormula;
    BEGIN
      SetItemFilter(Item);
      AvailableInventory := AvailableToPromise.CalcAvailableInventory(Item);
      ScheduledReceipt := AvailableToPromise.CalcScheduledReceipt(Item);
      ReservedReceipt := AvailableToPromise.CalcReservedReceipt(Item);
      ReservedRequirement := AvailableToPromise.CalcReservedRequirement(Item);
      GrossRequirement := AvailableToPromise.CalcGrossRequirement(Item);

      CompanyInfo.GET;
      LookaheadDateFormula := CompanyInfo."Check-Avail. Period Calc.";
      if FORMAT(LookaheadDateFormula) <> '' then begin
        AvailabilityDate := Item.GETRANGEMAX("Date Filter");
        PeriodType := CompanyInfo."Check-Avail. Time Bucket";

        GrossRequirement :=
          GrossRequirement +
          AvailableToPromise.CalculateLookahead(
            Item,PeriodType,
            AvailabilityDate + 1,
            AvailableToPromise.AdjustedEndingDate(CALCDATE(LookaheadDateFormula,AvailabilityDate),PeriodType));
      end;

      if OrderLineExists(OldAssemblyLine) then
        GrossRequirement := GrossRequirement - OldAssemblyLine."Remaining Quantity (Base)"
      else
        OldAssemblyLine.INIT;

      EarliestDate :=
        GetEarliestAvailDate(
          CompanyInfo,"Remaining Quantity (Base)",
          OldAssemblyLine."Remaining Quantity (Base)",OldAssemblyLine."Due Date");

      ExpectedInventory :=
        CalcExpectedInventory(AvailableInventory,ScheduledReceipt - ReservedReceipt,GrossRequirement - ReservedRequirement);

      AvailableInventory := CalcQtyFromBase(AvailableInventory);
      GrossRequirement := CalcQtyFromBase(GrossRequirement);
      ScheduledReceipt := CalcQtyFromBase(ScheduledReceipt);
      ExpectedInventory := CalcQtyFromBase(ExpectedInventory);
    END;

    LOCAL PROCEDURE CalcExpectedInventory@164(Inventory@1000 : Decimal;ScheduledReceipt@1002 : Decimal;GrossRequirement@1001 : Decimal) : Decimal;
    BEGIN
      exit(Inventory + ScheduledReceipt - GrossRequirement);
    END;

    [External]
    PROCEDURE CalcAvailToAssemble@47(AssemblyHeader@1012 : Record "Assembly Header";VAR Item@1008 : Record Item;VAR GrossRequirement@1007 : Decimal;VAR ScheduledReceipt@1005 : Decimal;VAR ExpectedInventory@1002 : Decimal;VAR AvailableInventory@1013 : Decimal;VAR EarliestDate@1000 : Date;VAR AbleToAssemble@1010 : Decimal);
    VAR
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      TESTFIELD("Quantity per");

      CalcAvailQuantities(
        Item,
        GrossRequirement,
        ScheduledReceipt,
        ExpectedInventory,
        AvailableInventory,
        EarliestDate);

      if ExpectedInventory < "Remaining Quantity (Base)" then begin
        if ExpectedInventory < 0 then
          AbleToAssemble := 0
        else
          AbleToAssemble := ROUND(ExpectedInventory / "Quantity per",UOMMgt.QtyRndPrecision,'<')
      end else begin
        AbleToAssemble := AssemblyHeader."Remaining Quantity";
        EarliestDate := 0D;
      end;
    END;

    LOCAL PROCEDURE MaxValue@70(Value@1000 : Decimal;Value2@1001 : Decimal) : Decimal;
    BEGIN
      if Value < Value2 then
        exit(Value2);

      exit(Value);
    END;

    LOCAL PROCEDURE MinValue@19(Value@1000 : Decimal;Value2@1001 : Decimal) : Decimal;
    BEGIN
      if Value < Value2 then
        exit(Value);

      exit(Value2);
    END;

    LOCAL PROCEDURE RoundQty@46(VAR Qty@1000 : Decimal);
    VAR
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      Qty := UOMMgt.RoundQty(Qty);
    END;

    [External]
    PROCEDURE FixedUsage@40() : Boolean;
    BEGIN
      exit(FixedUsage2(Type,"Resource Usage Type"));
    END;

    LOCAL PROCEDURE FixedUsage2@61(LineType@1004 : Option;LineResourceUsageType@1000 : Option) : Boolean;
    BEGIN
      if (LineType = Type::Resource) and (LineResourceUsageType = "Resource Usage Type"::Fixed) then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE InitResourceUsageType@342();
    BEGIN
      case Type of
        Type::" ",Type::Item:
          "Resource Usage Type" := "Resource Usage Type"::" ";
        Type::Resource:
          "Resource Usage Type" := "Resource Usage Type"::Direct;
      end;
    END;

    [External]
    PROCEDURE SignedXX@52(Value@1000 : Decimal) : Decimal;
    BEGIN
      case "Document Type" of
        "Document Type"::Quote,
        "Document Type"::Order,
        "Document Type"::"Blanket Order":
          exit(-Value);
      end;
    END;

    [External]
    PROCEDURE RowID1@48() : Text[250];
    VAR
      ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
    BEGIN
      exit(ItemTrackingMgt.ComposeRowID(DATABASE::"Assembly Line","Document Type","Document No.",'',0,"Line No."));
    END;

    LOCAL PROCEDURE CheckBin@54();
    VAR
      BinContent@1000 : Record "Bin Content";
      Bin@1001 : Record Bin;
      Location@1002 : Record Location;
    BEGIN
      if "Bin Code" <> '' then begin
        GetLocation(Location,"Location Code");
        if not Location."Directed Put-away and Pick" then
          exit;

        if BinContent.GET(
             "Location Code","Bin Code",
             "No.","Variant Code","Unit of Measure Code")
        then
          BinContent.CheckWhseClass(false)
        else begin
          Bin.GET("Location Code","Bin Code");
          Bin.CheckWhseClass("No.",false);
        end;
      end;
    END;

    [External]
    PROCEDURE GetDefaultBin@50();
    BEGIN
      TESTFIELD(Type,Type::Item);
      if (Quantity * xRec.Quantity > 0) and
         ("No." = xRec."No.") and
         ("Location Code" = xRec."Location Code") and
         ("Variant Code" = xRec."Variant Code")
      then
        exit;

      VALIDATE("Bin Code",FindBin);
    END;

    [External]
    PROCEDURE FindBin@12() NewBinCode : Code[20];
    VAR
      Location@1001 : Record Location;
      WMSManagement@1000 : Codeunit "WMS Management";
    BEGIN
      if ("Location Code" <> '') and ("No." <> '') then begin
        GetLocation(Location,"Location Code");
        NewBinCode := Location."To-Assembly Bin Code";
        if NewBinCode <> '' then
          exit;

        if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
          WMSManagement.GetDefaultBin("No.","Variant Code","Location Code",NewBinCode);
      end;
    END;

    LOCAL PROCEDURE TestStatusOpen@68();
    BEGIN
      if StatusCheckSuspended then
        exit;
      GetHeader;
      if Type in [Type::Item,Type::Resource] then
        AssemblyHeader.TESTFIELD(Status,AssemblyHeader.Status::Open);
    END;

    [External]
    PROCEDURE SuspendStatusCheck@56(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    [External]
    PROCEDURE CompletelyPicked@67() : Boolean;
    VAR
      Location@1000 : Record Location;
    BEGIN
      TESTFIELD(Type,Type::Item);
      GetLocation(Location,"Location Code");
      if Location."Require Shipment" then
        exit("Qty. Picked (Base)" - "Consumed Quantity (Base)" >= "Remaining Quantity (Base)");
      exit("Qty. Picked (Base)" - "Consumed Quantity (Base)" >= "Quantity to Consume (Base)");
    END;

    [External]
    PROCEDURE CalcQtyToPick@60() : Decimal;
    BEGIN
      CALCFIELDS("Pick Qty.");
      exit("Remaining Quantity" - (CalcQtyPickedNotConsumed + "Pick Qty."));
    END;

    [External]
    PROCEDURE CalcQtyToPickBase@62() : Decimal;
    BEGIN
      CALCFIELDS("Pick Qty. (Base)");
      exit("Remaining Quantity (Base)" - (CalcQtyPickedNotConsumedBase + "Pick Qty. (Base)"));
    END;

    [External]
    PROCEDURE CalcQtyPickedNotConsumed@14() : Decimal;
    BEGIN
      exit("Qty. Picked" - "Consumed Quantity");
    END;

    [External]
    PROCEDURE CalcQtyPickedNotConsumedBase@5() : Decimal;
    BEGIN
      exit("Qty. Picked (Base)" - "Consumed Quantity (Base)");
    END;

    [External]
    PROCEDURE ItemExists@65(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record Item;
    BEGIN
      if Type <> Type::Item then
        exit(false);

      if not Item2.GET(ItemNo) then
        exit(false);
      exit(true);
    END;

    [External]
    PROCEDURE ShowTracking@66();
    VAR
      OrderTracking@1000 : Page "Order Tracking";
    BEGIN
      OrderTracking.SetAsmLine(Rec);
      OrderTracking.RUNMODAL;
    END;

    LOCAL PROCEDURE OrderLineExists@57(VAR AssemblyLine@1000 : Record "Assembly Line") : Boolean;
    BEGIN
      exit(
        ("Document Type" = "Document Type"::Order) and
        AssemblyLine.GET("Document Type","Document No.","Line No.") and
        (AssemblyLine.Type = Type) and
        (AssemblyLine."No." = "No.") and
        (AssemblyLine."Location Code" = "Location Code") and
        (AssemblyLine."Variant Code" = "Variant Code") and
        (AssemblyLine."Bin Code" = "Bin Code"));
    END;

    [External]
    PROCEDURE VerifyReservationQuantity@63(VAR NewAsmLine@1002 : Record "Assembly Line";VAR OldAsmLine@1001 : Record "Assembly Line");
    BEGIN
      if SkipVerificationsThatChangeDatabase then
        exit;
      AssemblyLineReserve.VerifyQuantity(NewAsmLine,OldAsmLine);
    END;

    [External]
    PROCEDURE VerifyReservationChange@64(VAR NewAsmLine@1001 : Record "Assembly Line";VAR OldAsmLine@1000 : Record "Assembly Line");
    BEGIN
      if SkipVerificationsThatChangeDatabase then
        exit;
      AssemblyLineReserve.VerifyChange(NewAsmLine,OldAsmLine);
    END;

    [External]
    PROCEDURE VerifyReservationDateConflict@71(NewAsmLine@1001 : Record "Assembly Line");
    VAR
      ReservationCheckDateConfl@1000 : Codeunit "Reservation-Check Date Confl.";
    BEGIN
      if SkipVerificationsThatChangeDatabase then
        exit;
      ReservationCheckDateConfl.AssemblyLineCheck(NewAsmLine,(CurrFieldNo <> 0) or TestReservationDateConflict);
    END;

    [External]
    PROCEDURE SetSkipVerificationsThatChangeDatabase@69(State@1000 : Boolean);
    BEGIN
      SkipVerificationsThatChangeDatabase := State;
    END;

    [Internal]
    PROCEDURE ValidateDueDate@72(AsmHeader@1000 : Record "Assembly Header";NewDueDate@1001 : Date;ShowDueDateBeforeWorkDateMsg@1003 : Boolean);
    VAR
      MaxDate@1002 : Date;
    BEGIN
      "Due Date" := NewDueDate;
      TestStatusOpen;

      MaxDate := LatestPossibleDueDate(AsmHeader."Starting Date");
      if "Due Date" > MaxDate then
        ERROR(Text049,FIELDCAPTION("Due Date"),MaxDate,AsmHeader.FIELDCAPTION("Starting Date"),AsmHeader."Starting Date");

      if (xRec."Due Date" <> "Due Date") and (Quantity <> 0) then
        VerifyReservationDateConflict(Rec);

      CheckItemAvailable(FIELDNO("Due Date"));
      WhseValidateSourceLine.AssemblyLineVerifyChange(Rec,xRec);

      if ("Due Date" < WORKDATE) and ShowDueDateBeforeWorkDateMsg then
        MESSAGE(Text050,"Due Date",WORKDATE);
    END;

    [Internal]
    PROCEDURE ValidateLeadTimeOffset@74(AsmHeader@1001 : Record "Assembly Header";NewLeadTimeOffset@1000 : DateFormula;ShowDueDateBeforeWorkDateMsg@1003 : Boolean);
    VAR
      ZeroDF@1002 : DateFormula;
    BEGIN
      "Lead-Time Offset" := NewLeadTimeOffset;
      TestStatusOpen;

      if Type <> Type::Item then
        TESTFIELD("Lead-Time Offset",ZeroDF);
      ValidateDueDate(AsmHeader,LatestPossibleDueDate(AsmHeader."Starting Date"),ShowDueDateBeforeWorkDateMsg);
    END;

    LOCAL PROCEDURE LatestPossibleDueDate@73(HeaderStartingDate@1000 : Date) : Date;
    BEGIN
      exit(HeaderStartingDate - (CALCDATE("Lead-Time Offset",WORKDATE) - WORKDATE));
    END;

    [External]
    PROCEDURE TestItemFields@6(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      TESTFIELD(Type,Type::Item);
      TESTFIELD("No.",ItemNo);
      TESTFIELD("Variant Code",VariantCode);
      TESTFIELD("Location Code",LocationCode);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR AssemblyLine@1000 : Record "Assembly Line";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

