OBJECT Table 349 Dimension Value
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Dimension Code");
               TESTFIELD(Code);
               "Global Dimension No." := GetGlobalDimensionNo;

               if CostAccSetup.GET then begin
                 CostAccMgt.UpdateCostCenterFromDim(Rec,Rec,0);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,Rec,0);
               end;

               SetLastModifiedDateTime;
             END;

    OnModify=BEGIN
               if "Dimension Code" <> xRec."Dimension Code" then
                 "Global Dimension No." := GetGlobalDimensionNo;
               if CostAccSetup.GET then begin
                 CostAccMgt.UpdateCostCenterFromDim(Rec,xRec,1);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,xRec,1);
               end;

               SetLastModifiedDateTime;
             END;

    OnDelete=BEGIN
               if CheckIfDimValueUsed then
                 ERROR(Text000,GetCheckDimErr);

               DimValueComb.SETRANGE("Dimension 1 Code","Dimension Code");
               DimValueComb.SETRANGE("Dimension 1 Value Code",Code);
               DimValueComb.DELETEALL(true);

               DimValueComb.RESET;
               DimValueComb.SETRANGE("Dimension 2 Code","Dimension Code");
               DimValueComb.SETRANGE("Dimension 2 Value Code",Code);
               DimValueComb.DELETEALL(true);

               DefaultDim.SETRANGE("Dimension Code","Dimension Code");
               DefaultDim.SETRANGE("Dimension Value Code",Code);
               DefaultDim.DELETEALL(true);

               SelectedDim.SETRANGE("Dimension Code","Dimension Code");
               SelectedDim.SETRANGE("New Dimension Value Code",Code);
               SelectedDim.DELETEALL(true);

               AnalysisSelectedDim.SETRANGE("Dimension Code","Dimension Code");
               AnalysisSelectedDim.SETRANGE("New Dimension Value Code",Code);
               AnalysisSelectedDim.DELETEALL(true);
             END;

    OnRename=BEGIN
               RenameBudgEntryDim;
               RenameAnalysisViewEntryDim;
               RenameItemBudgEntryDim;
               RenameItemAnalysisViewEntryDim;

               if CostAccSetup.GET then begin
                 CostAccMgt.UpdateCostCenterFromDim(Rec,xRec,3);
                 CostAccMgt.UpdateCostObjectFromDim(Rec,xRec,3);
               end;

               SetLastModifiedDateTime;
             END;

    CaptionML=ENU=Dimension Value;
    LookupPageID="Dimension Value List";
  }
  FIELDS
  {
    { 1   ;   ;Dimension Code      ;Code20        ;TableRelation=Dimension;
                                                   CaptionML=ENU=Dimension Code;
                                                   NotBlank=true }
    { 2   ;   ;Code                ;Code20        ;OnValidate=BEGIN
                                                                if UPPERCASE(Code) = Text002 then
                                                                  ERROR(Text003,
                                                                    FIELDCAPTION(Code));
                                                              END;

                                                   CaptionML=ENU=Code;
                                                   NotBlank=true }
    { 3   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 4   ;   ;Dimension Value Type;Option        ;OnValidate=BEGIN
                                                                if ("Dimension Value Type" <> "Dimension Value Type"::Standard) and
                                                                   (xRec."Dimension Value Type" = xRec."Dimension Value Type"::Standard)
                                                                then
                                                                  if CheckIfDimValueUsed then
                                                                    ERROR(Text004,GetCheckDimErr);
                                                                Totaling := '';
                                                              END;

                                                   CaptionML=ENU=Dimension Value Type;
                                                   OptionCaptionML=ENU=Standard,Heading,Total,Begin-Total,End-Total;
                                                   OptionString=Standard,Heading,Total,"Begin-Total","End-Total" }
    { 5   ;   ;Totaling            ;Text250       ;TableRelation=IF ("Dimension Value Type"=CONST(Total)) "Dimension Value"."Dimension Code" WHERE ("Dimension Code"=FIELD("Dimension Code"));
                                                   OnValidate=BEGIN
                                                                if not ("Dimension Value Type" in
                                                                        ["Dimension Value Type"::Total,"Dimension Value Type"::"End-Total"]) and (Totaling <> '')
                                                                then
                                                                  FIELDERROR("Dimension Value Type");
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Totaling }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 7   ;   ;Consolidation Code  ;Code20        ;AccessByPermission=TableData "Business Unit"=R;
                                                   CaptionML=ENU=Consolidation Code }
    { 8   ;   ;Indentation         ;Integer       ;CaptionML=ENU=Indentation }
    { 9   ;   ;Global Dimension No.;Integer       ;CaptionML=ENU=Global Dimension No. }
    { 10  ;   ;Map-to IC Dimension Code;Code20    ;CaptionML=ENU=Map-to IC Dimension Code }
    { 11  ;   ;Map-to IC Dimension Value Code;Code20;
                                                   TableRelation="IC Dimension Value".Code WHERE ("Dimension Code"=FIELD("Map-to IC Dimension Code"));
                                                   CaptionML=ENU=Map-to IC Dimension Value Code }
    { 12  ;   ;Dimension Value ID  ;Integer       ;OnValidate=BEGIN
                                                                ERROR(Text006,FIELDCAPTION("Dimension Value ID"));
                                                              END;

                                                   AutoIncrement=true;
                                                   CaptionML=ENU=Dimension Value ID;
                                                   Editable=false }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 8001;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time }
  }
  KEYS
  {
    {    ;"Dimension Code",Code                   ;Clustered=true }
    {    ;Code,"Global Dimension No."              }
    {    ;Name                                     }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name                                }
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1\You cannot delete it.';
      Text002@1002 : TextConst 'ENU=(CONFLICT)';
      Text003@1003 : TextConst 'ENU=%1 can not be (CONFLICT). This name is used internally by the system.';
      Text004@1004 : TextConst 'ENU=%1\You cannot change the type.';
      Text005@1005 : TextConst 'ENU=This dimension value has been used in posted or budget entries.';
      DimSetEntry@1001 : Record "Dimension Set Entry";
      DimValueComb@1014 : Record "Dimension Value Combination";
      DefaultDim@1015 : Record "Default Dimension";
      SelectedDim@1016 : Record "Selected Dimension";
      AnalysisSelectedDim@1021 : Record "Analysis Selected Dimension";
      CostAccSetup@1008 : Record "Cost Accounting Setup";
      CostAccMgt@1007 : Codeunit "Cost Account Mgt";
      Text006@1006 : TextConst 'ENU=You cannot change the value of %1.';

    [External]
    PROCEDURE CheckIfDimValueUsed@1() : Boolean;
    BEGIN
      DimSetEntry.SETCURRENTKEY("Dimension Value ID");
      DimSetEntry.SETRANGE("Dimension Value ID","Dimension Value ID");
      exit(not DimSetEntry.ISEMPTY);
    END;

    LOCAL PROCEDURE GetCheckDimErr@2() : Text[250];
    BEGIN
      exit(Text005);
    END;

    LOCAL PROCEDURE RenameBudgEntryDim@3();
    VAR
      GLBudget@1002 : Record "G/L Budget Name";
      GLBudgetEntry@1003 : Record "G/L Budget Entry";
      GLBudgetEntry2@1001 : Record "G/L Budget Entry";
      BudgDimNo@1000 : Integer;
    BEGIN
      GLBudget.LOCKTABLE;
      if GLBudget.FIND('-') then
        repeat
        until GLBudget.NEXT = 0;
      for BudgDimNo := 1 to 4 do begin
        case true of
          BudgDimNo = 1:
            GLBudget.SETRANGE("Budget Dimension 1 Code","Dimension Code");
          BudgDimNo = 2:
            GLBudget.SETRANGE("Budget Dimension 2 Code","Dimension Code");
          BudgDimNo = 3:
            GLBudget.SETRANGE("Budget Dimension 3 Code","Dimension Code");
          BudgDimNo = 4:
            GLBudget.SETRANGE("Budget Dimension 4 Code","Dimension Code");
        end;
        if GLBudget.FIND('-') then begin
          GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.","Business Unit Code","Global Dimension 1 Code");
          repeat
            GLBudgetEntry.SETRANGE("Budget Name",GLBudget.Name);
            case true of
              BudgDimNo = 1:
                GLBudgetEntry.SETRANGE("Budget Dimension 1 Code",xRec.Code);
              BudgDimNo = 2:
                GLBudgetEntry.SETRANGE("Budget Dimension 2 Code",xRec.Code);
              BudgDimNo = 3:
                GLBudgetEntry.SETRANGE("Budget Dimension 3 Code",xRec.Code);
              BudgDimNo = 4:
                GLBudgetEntry.SETRANGE("Budget Dimension 4 Code",xRec.Code);
            end;
            if GLBudgetEntry.FIND('-') then
              repeat
                GLBudgetEntry2 := GLBudgetEntry;
                case true of
                  BudgDimNo = 1:
                    GLBudgetEntry2."Budget Dimension 1 Code" := Code;
                  BudgDimNo = 2:
                    GLBudgetEntry2."Budget Dimension 2 Code" := Code;
                  BudgDimNo = 3:
                    GLBudgetEntry2."Budget Dimension 3 Code" := Code;
                  BudgDimNo = 4:
                    GLBudgetEntry2."Budget Dimension 4 Code" := Code;
                end;
                GLBudgetEntry2.MODIFY;
              until GLBudgetEntry.NEXT = 0;
            GLBudgetEntry.RESET;
          until GLBudget.NEXT = 0;
        end;
        GLBudget.RESET;
      end;
    END;

    LOCAL PROCEDURE RenameAnalysisViewEntryDim@5();
    VAR
      AnalysisView@1001 : Record "Analysis View";
      AnalysisViewEntry@1002 : Record "Analysis View Entry";
      AnalysisViewEntry2@1003 : Record "Analysis View Entry";
      AnalysisViewBudgEntry@1004 : Record "Analysis View Budget Entry";
      AnalysisViewBudgEntry2@1005 : Record "Analysis View Budget Entry";
      DimensionNo@1000 : Integer;
    BEGIN
      AnalysisView.LOCKTABLE;
      if AnalysisView.FIND('-') then
        repeat
        until AnalysisView.NEXT = 0;

      for DimensionNo := 1 to 4 do begin
        case true of
          DimensionNo = 1:
            AnalysisView.SETRANGE("Dimension 1 Code","Dimension Code");
          DimensionNo = 2:
            AnalysisView.SETRANGE("Dimension 2 Code","Dimension Code");
          DimensionNo = 3:
            AnalysisView.SETRANGE("Dimension 3 Code","Dimension Code");
          DimensionNo = 4:
            AnalysisView.SETRANGE("Dimension 4 Code","Dimension Code");
        end;
        if AnalysisView.FIND('-') then
          repeat
            AnalysisViewEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            AnalysisViewBudgEntry.SETRANGE("Analysis View Code",AnalysisView.Code);
            case true of
              DimensionNo = 1:
                begin
                  AnalysisViewEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                end;
              DimensionNo = 2:
                begin
                  AnalysisViewEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                end;
              DimensionNo = 3:
                begin
                  AnalysisViewEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                end;
              DimensionNo = 4:
                begin
                  AnalysisViewEntry.SETRANGE("Dimension 4 Value Code",xRec.Code);
                  AnalysisViewBudgEntry.SETRANGE("Dimension 4 Value Code",xRec.Code);
                end;
            end;
            if AnalysisViewEntry.FIND('-') then
              repeat
                AnalysisViewEntry2 := AnalysisViewEntry;
                case true of
                  DimensionNo = 1:
                    AnalysisViewEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    AnalysisViewEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    AnalysisViewEntry2."Dimension 3 Value Code" := Code;
                  DimensionNo = 4:
                    AnalysisViewEntry2."Dimension 4 Value Code" := Code;
                end;
                AnalysisViewEntry.DELETE;
                AnalysisViewEntry2.INSERT;
              until AnalysisViewEntry.NEXT = 0;
            AnalysisViewEntry.RESET;
            if AnalysisViewBudgEntry.FIND('-') then
              repeat
                AnalysisViewBudgEntry2 := AnalysisViewBudgEntry;
                case true of
                  DimensionNo = 1:
                    AnalysisViewBudgEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    AnalysisViewBudgEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    AnalysisViewBudgEntry2."Dimension 3 Value Code" := Code;
                  DimensionNo = 4:
                    AnalysisViewBudgEntry2."Dimension 4 Value Code" := Code;
                end;
                AnalysisViewBudgEntry.DELETE;
                AnalysisViewBudgEntry2.INSERT;
              until AnalysisViewBudgEntry.NEXT = 0;
            AnalysisViewBudgEntry.RESET;
          until AnalysisView.NEXT = 0;
        AnalysisView.RESET;
      end;
    END;

    LOCAL PROCEDURE RenameItemBudgEntryDim@6();
    VAR
      ItemBudget@1003 : Record "Item Budget Name";
      ItemBudgetEntry@1002 : Record "Item Budget Entry";
      ItemBudgetEntry2@1001 : Record "Item Budget Entry";
      BudgDimNo@1000 : Integer;
    BEGIN
      ItemBudget.LOCKTABLE;
      if ItemBudget.FIND('-') then
        repeat
        until ItemBudget.NEXT = 0;

      for BudgDimNo := 1 to 3 do begin
        case true of
          BudgDimNo = 1:
            ItemBudget.SETRANGE("Budget Dimension 1 Code","Dimension Code");
          BudgDimNo = 2:
            ItemBudget.SETRANGE("Budget Dimension 2 Code","Dimension Code");
          BudgDimNo = 3:
            ItemBudget.SETRANGE("Budget Dimension 3 Code","Dimension Code");
        end;
        if ItemBudget.FIND('-') then begin
          ItemBudgetEntry.SETCURRENTKEY(
            "Analysis Area","Budget Name","Item No.","Source Type","Source No.",Date,"Location Code","Global Dimension 1 Code");
          repeat
            ItemBudgetEntry.SETRANGE("Analysis Area",ItemBudget."Analysis Area");
            ItemBudgetEntry.SETRANGE("Budget Name",ItemBudget.Name);
            case true of
              BudgDimNo = 1:
                ItemBudgetEntry.SETRANGE("Budget Dimension 1 Code",xRec.Code);
              BudgDimNo = 2:
                ItemBudgetEntry.SETRANGE("Budget Dimension 2 Code",xRec.Code);
              BudgDimNo = 3:
                ItemBudgetEntry.SETRANGE("Budget Dimension 3 Code",xRec.Code);
            end;
            if ItemBudgetEntry.FIND('-') then
              repeat
                ItemBudgetEntry2 := ItemBudgetEntry;
                case true of
                  BudgDimNo = 1:
                    ItemBudgetEntry2."Budget Dimension 1 Code" := Code;
                  BudgDimNo = 2:
                    ItemBudgetEntry2."Budget Dimension 2 Code" := Code;
                  BudgDimNo = 3:
                    ItemBudgetEntry2."Budget Dimension 3 Code" := Code;
                end;
                ItemBudgetEntry2.MODIFY;
              until ItemBudgetEntry.NEXT = 0;
            ItemBudgetEntry.RESET;
          until ItemBudget.NEXT = 0;
        end;
        ItemBudget.RESET;
      end;
    END;

    LOCAL PROCEDURE RenameItemAnalysisViewEntryDim@7();
    VAR
      ItemAnalysisView@1005 : Record "Item Analysis View";
      ItemAnalysisViewEntry@1004 : Record "Item Analysis View Entry";
      ItemAnalysisViewEntry2@1003 : Record "Item Analysis View Entry";
      ItemAnalysisViewBudgEntry@1002 : Record "Item Analysis View Budg. Entry";
      ItemAnalysisViewBudgEntry2@1001 : Record "Item Analysis View Budg. Entry";
      DimensionNo@1000 : Integer;
    BEGIN
      ItemAnalysisView.LOCKTABLE;
      if ItemAnalysisView.FIND('-') then
        repeat
        until ItemAnalysisView.NEXT = 0;

      for DimensionNo := 1 to 3 do begin
        case true of
          DimensionNo = 1:
            ItemAnalysisView.SETRANGE("Dimension 1 Code","Dimension Code");
          DimensionNo = 2:
            ItemAnalysisView.SETRANGE("Dimension 2 Code","Dimension Code");
          DimensionNo = 3:
            ItemAnalysisView.SETRANGE("Dimension 3 Code","Dimension Code");
        end;
        if ItemAnalysisView.FIND('-') then
          repeat
            ItemAnalysisViewEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
            ItemAnalysisViewEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
            ItemAnalysisViewBudgEntry.SETRANGE("Analysis Area",ItemAnalysisView."Analysis Area");
            ItemAnalysisViewBudgEntry.SETRANGE("Analysis View Code",ItemAnalysisView.Code);
            case true of
              DimensionNo = 1:
                begin
                  ItemAnalysisViewEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 1 Value Code",xRec.Code);
                end;
              DimensionNo = 2:
                begin
                  ItemAnalysisViewEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 2 Value Code",xRec.Code);
                end;
              DimensionNo = 3:
                begin
                  ItemAnalysisViewEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                  ItemAnalysisViewBudgEntry.SETRANGE("Dimension 3 Value Code",xRec.Code);
                end;
            end;
            if ItemAnalysisViewEntry.FIND('-') then
              repeat
                ItemAnalysisViewEntry2 := ItemAnalysisViewEntry;
                case true of
                  DimensionNo = 1:
                    ItemAnalysisViewEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    ItemAnalysisViewEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    ItemAnalysisViewEntry2."Dimension 3 Value Code" := Code;
                end;
                ItemAnalysisViewEntry.DELETE;
                ItemAnalysisViewEntry2.INSERT;
              until ItemAnalysisViewEntry.NEXT = 0;
            ItemAnalysisViewEntry.RESET;
            if ItemAnalysisViewBudgEntry.FIND('-') then
              repeat
                ItemAnalysisViewBudgEntry2 := ItemAnalysisViewBudgEntry;
                case true of
                  DimensionNo = 1:
                    ItemAnalysisViewBudgEntry2."Dimension 1 Value Code" := Code;
                  DimensionNo = 2:
                    ItemAnalysisViewBudgEntry2."Dimension 2 Value Code" := Code;
                  DimensionNo = 3:
                    ItemAnalysisViewBudgEntry2."Dimension 3 Value Code" := Code;
                end;
                ItemAnalysisViewBudgEntry.DELETE;
                ItemAnalysisViewBudgEntry2.INSERT;
              until ItemAnalysisViewBudgEntry.NEXT = 0;
            ItemAnalysisViewBudgEntry.RESET;
          until ItemAnalysisView.NEXT = 0;
        ItemAnalysisView.RESET;
      end;
    END;

    [External]
    PROCEDURE LookUpDimFilter@57(Dim@1000 : Code[20];VAR Text@1001 : Text) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
      DimValList@1003 : Page "Dimension Value List";
    BEGIN
      if Dim = '' then
        exit(false);
      DimValList.LOOKUPMODE(true);
      DimVal.SETRANGE("Dimension Code",Dim);
      DimValList.SETTABLEVIEW(DimVal);
      if DimValList.RUNMODAL = ACTION::LookupOK then begin
        Text := DimValList.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    [External]
    PROCEDURE LookupDimValue@24(DimCode@1000 : Code[20];VAR DimValueCode@1001 : Code[20]);
    VAR
      DimValue@1003 : Record "Dimension Value";
      DimValuesList@1002 : Page "Dimension Values";
    BEGIN
      DimValue.SETRANGE("Dimension Code",DimCode);
      DimValuesList.LOOKUPMODE := true;
      DimValuesList.SETTABLEVIEW(DimValue);
      if DimValue.GET(DimCode,DimValueCode) then
        DimValuesList.SETRECORD(DimValue);
      if DimValuesList.RUNMODAL = ACTION::LookupOK then begin
        DimValuesList.GETRECORD(DimValue);
        DimValueCode := DimValue.Code;
      end;
    END;

    LOCAL PROCEDURE GetGlobalDimensionNo@8() : Integer;
    VAR
      GeneralLedgerSetup@1000 : Record "General Ledger Setup";
    BEGIN
      GeneralLedgerSetup.GET;
      case "Dimension Code" of
        GeneralLedgerSetup."Global Dimension 1 Code":
          exit(1);
        GeneralLedgerSetup."Global Dimension 2 Code":
          exit(2);
        GeneralLedgerSetup."Shortcut Dimension 3 Code":
          exit(3);
        GeneralLedgerSetup."Shortcut Dimension 4 Code":
          exit(4);
        GeneralLedgerSetup."Shortcut Dimension 5 Code":
          exit(5);
        GeneralLedgerSetup."Shortcut Dimension 6 Code":
          exit(6);
        GeneralLedgerSetup."Shortcut Dimension 7 Code":
          exit(7);
        GeneralLedgerSetup."Shortcut Dimension 8 Code":
          exit(8);
        else
          exit(0);
      end;
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@39();
    BEGIN
      "Last Modified Date Time" := CURRENTDATETIME;
    END;

    BEGIN
    END.
  }
}

