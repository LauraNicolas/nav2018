OBJECT Codeunit 1508 Notification Lifecycle Handler
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NotificationLifecycleMgt@1000 : Codeunit "Notification Lifecycle Mgt.";

    [EventSubscriber(Table,37,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterSalesLineInsertSetRecId@2(VAR Rec@1000 : Record "Sales Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,37,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterSalesLineRenameUpdateRecId@3(VAR Rec@1000 : Record "Sales Line";VAR xRec@1001 : Record "Sales Line";RunTrigger@1002 : Boolean);
    BEGIN
      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,37,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterSalesLineDeleteRecall@4(VAR Rec@1000 : Record "Sales Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,false);
    END;

    [EventSubscriber(Table,83,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterItemJournalInsertSetRecId@20(VAR Rec@1000 : Record "Item Journal Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,83,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterItemJournalRenameUpdateRecId@19(VAR Rec@1000 : Record "Item Journal Line";VAR xRec@1001 : Record "Item Journal Line";RunTrigger@1002 : Boolean);
    BEGIN
      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,83,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterItemJournalDeleteRecall@18(VAR Rec@1000 : Record "Item Journal Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,false);
    END;

    [EventSubscriber(Table,5741,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterTransferLineInsertSetRecId@25(VAR Rec@1000 : Record "Transfer Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,5741,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterTransferLineRenameUpdateRecId@24(VAR Rec@1000 : Record "Transfer Line";VAR xRec@1001 : Record "Transfer Line";RunTrigger@1002 : Boolean);
    BEGIN
      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,5741,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterTransferLineDeleteRecall@23(VAR Rec@1000 : Record "Transfer Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,false);
    END;

    [EventSubscriber(Table,5902,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterServiceLineInsertSetRecId@30(VAR Rec@1000 : Record "Service Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,5902,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterServiceLineRenameUpdateRecId@29(VAR Rec@1000 : Record "Service Line";VAR xRec@1001 : Record "Service Line";RunTrigger@1002 : Boolean);
    BEGIN
      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,5902,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterServiceLineDeleteRecall@28(VAR Rec@1000 : Record "Service Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,false);
    END;

    [EventSubscriber(Table,1003,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterJobPlanningLineInsertSetRecId@34(VAR Rec@1000 : Record "Job Planning Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,1003,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterJobPlanningLineRenameUpdateRecId@33(VAR Rec@1000 : Record "Job Planning Line";VAR xRec@1001 : Record "Job Planning Line";RunTrigger@1002 : Boolean);
    BEGIN
      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,1003,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterJobPlanningLineDeleteRecall@32(VAR Rec@1000 : Record "Job Planning Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,false);
    END;

    [EventSubscriber(Table,901,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterAssemblyLineInsertSetRecId@37(VAR Rec@1000 : Record "Assembly Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,901,OnAfterRenameEvent)]
    LOCAL PROCEDURE OnAfterAssemblyLineRenameUpdateRecId@36(VAR Rec@1000 : Record "Assembly Line";VAR xRec@1001 : Record "Assembly Line";RunTrigger@1002 : Boolean);
    BEGIN
      NotificationLifecycleMgt.UpdateRecordID(xRec.RECORDID,Rec.RECORDID);
    END;

    [EventSubscriber(Table,901,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnAfterAssemblyLineDeleteRecall@35(VAR Rec@1000 : Record "Assembly Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.RecallNotificationsForRecord(Rec.RECORDID,false);
    END;

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterSalesHeaderInsertSetRecId@1(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,81,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterGenJnlLineInsertSetRecId@6(VAR Rec@1000 : Record "Gen. Journal Line";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Table,5965,OnAfterInsertEvent)]
    LOCAL PROCEDURE OnAfterServiceContractHeaderInsertSetRecId@9(VAR Rec@1000 : Record "Service Contract Header";RunTrigger@1001 : Boolean);
    BEGIN
      NotificationLifecycleMgt.SetRecordID(Rec.RECORDID);
    END;

    [EventSubscriber(Codeunit,312,OnNewCheckRemoveCustomerNotifications)]
    LOCAL PROCEDURE OnCustCheckCrLimitCheckRecallNotifs@5(RecId@1000 : RecordID;RecallCreditOverdueNotif@1002 : Boolean);
    VAR
      CustCheckCrLimit@1001 : Codeunit "Cust-Check Cr. Limit";
    BEGIN
      NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
        RecId,CustCheckCrLimit.GetCreditLimitNotificationId,true);
      if RecallCreditOverdueNotif then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          RecId,CustCheckCrLimit.GetOverdueBalanceNotificationId,true);
    END;

    [EventSubscriber(Table,83,OnBeforeValidateEvent,"Entry Type")]
    LOCAL PROCEDURE OnItemJournalLineUpdateEntryTypeRecallItemNotif@31(VAR Rec@1000 : Record "Item Journal Line";VAR xRec@1001 : Record "Item Journal Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if  (Rec."Entry Type" <> Rec."Entry Type"::Sale) and
         (xRec."Entry Type" <> Rec."Entry Type") and (CurrFieldNo = Rec.FIELDNO("Entry Type"))
      then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,83,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnItemJournalLineUpdateQtyTo0RecallItemNotif@7(VAR Rec@1000 : Record "Item Journal Line";VAR xRec@1001 : Record "Item Journal Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Quantity = 0) and (xRec.Quantity <> Rec.Quantity) and (CurrFieldNo = Rec.FIELDNO(Quantity)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnSalesLineUpdateTypeRecallItemNotif@43(VAR Rec@1000 : Record "Sales Line";VAR xRec@1001 : Record "Sales Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Type <> Rec.Type::Item) and (xRec.Type <> Rec.Type) and (CurrFieldNo = Rec.FIELDNO(Type)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,37,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnSalesLineUpdateQtyTo0RecallItemNotif@8(VAR Rec@1000 : Record "Sales Line";VAR xRec@1001 : Record "Sales Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Quantity = 0) and (xRec.Quantity <> Rec.Quantity) and (CurrFieldNo = Rec.FIELDNO(Quantity)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,5741,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnTransferLineUpdateQtyTo0RecallItemNotif@14(VAR Rec@1000 : Record "Transfer Line";VAR xRec@1001 : Record "Transfer Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Quantity = 0) and (xRec.Quantity <> Rec.Quantity) and (CurrFieldNo = Rec.FIELDNO(Quantity)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,5902,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnServiceLineUpdateTypeRecallItemNotif@49(VAR Rec@1000 : Record "Service Line";VAR xRec@1001 : Record "Service Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Type <> Rec.Type::Item) and (xRec.Type <> Rec.Type) and (CurrFieldNo = Rec.FIELDNO(Type)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,5902,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnServiceLineUpdateQtyTo0RecallItemNotif@16(VAR Rec@1000 : Record "Service Line";VAR xRec@1001 : Record "Service Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Quantity = 0) and (xRec.Quantity <> Rec.Quantity) and (CurrFieldNo = Rec.FIELDNO(Quantity)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,1003,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnJobPlanningLineUpdateTypeRecallItemNotif@12(VAR Rec@1000 : Record "Job Planning Line";VAR xRec@1001 : Record "Job Planning Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Type <> Rec.Type::Item) and (xRec.Type <> Rec.Type) and (CurrFieldNo = Rec.FIELDNO(Type)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,1003,OnBeforeValidateEvent,"Line Type")]
    LOCAL PROCEDURE OnJobPlanningLineUpdateLineTypeRecallItemNotif@10(VAR Rec@1000 : Record "Job Planning Line";VAR xRec@1001 : Record "Job Planning Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec."Line Type" = Rec."Line Type"::Billable) and
         (xRec."Line Type" <> Rec."Line Type") and (CurrFieldNo = Rec.FIELDNO("Line Type"))
      then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,1003,OnBeforeValidateEvent,Quantity)]
    LOCAL PROCEDURE OnJobPlanningLineUpdateQtyTo0RecallItemNotif@22(VAR Rec@1000 : Record "Job Planning Line";VAR xRec@1001 : Record "Job Planning Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Quantity = 0) and (xRec.Quantity <> Rec.Quantity) and (CurrFieldNo = Rec.FIELDNO(Quantity)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,901,OnBeforeValidateEvent,"Unit of Measure Code")]
    LOCAL PROCEDURE OnAssemblyLineUpdateUnitOfMeasureCodeRecallItemNotif@27(VAR Rec@1000 : Record "Assembly Line";VAR xRec@1001 : Record "Assembly Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (xRec."Unit of Measure Code" <> Rec."Unit of Measure Code") and (CurrFieldNo = Rec.FIELDNO("Unit of Measure Code")) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,901,OnBeforeValidateEvent,Type)]
    LOCAL PROCEDURE OnAssemblyLineUpdateTypeRecallItemNotif@11(VAR Rec@1000 : Record "Assembly Line";VAR xRec@1001 : Record "Assembly Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (Rec.Type <> Rec.Type::Item) and (xRec.Type <> Rec.Type) and (CurrFieldNo = Rec.FIELDNO(Type)) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    [EventSubscriber(Table,901,OnBeforeValidateEvent,"Quantity per")]
    LOCAL PROCEDURE OnAssemblyLineUpdateQuantityRecallItemNotif@21(VAR Rec@1000 : Record "Assembly Line";VAR xRec@1001 : Record "Assembly Line";CurrFieldNo@1002 : Integer);
    VAR
      ItemCheckAvail@1003 : Codeunit "Item-Check Avail.";
    BEGIN
      if (xRec."Quantity per" <> Rec."Quantity per") and (CurrFieldNo = Rec.FIELDNO("Quantity per")) then
        NotificationLifecycleMgt.RecallNotificationsForRecordWithAdditionalContext(
          Rec.RECORDID,ItemCheckAvail.GetItemAvailabilityNotificationId,true);
    END;

    BEGIN
    END.
  }
}

