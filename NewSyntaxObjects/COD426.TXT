OBJECT Codeunit 426 Payment Tolerance Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData Currency=r,
                TableData "Cust. Ledger Entry"=rim,
                TableData "Vendor Ledger Entry"=rim,
                TableData "Gen. Journal Line"=rim,
                TableData "General Ledger Setup"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CurrExchRate@1000 : Record "Currency Exchange Rate";
      ApplyingPostedEntries@1001 : Boolean;
      AccTypeOrBalAccTypeIsIncorrectErr@1002 : TextConst '@@@="%1 = Customer or Vendor";ENU=The value in either the Account Type field or the Bal. Account Type field is wrong.\\ The value must be %1.';

    [External]
    PROCEDURE PmtTolCust@10(VAR CustLedgEntry@1000 : Record "Cust. Ledger Entry") : Boolean;
    VAR
      GLSetup@1005 : Record "General Ledger Setup";
      Customer@1002 : Record Customer;
      AppliedAmount@1003 : Decimal;
      ApplyingAmount@1004 : Decimal;
      AmounttoApply@1011 : Decimal;
      PmtDiscAmount@1012 : Decimal;
      MaxPmtTolAmount@1006 : Decimal;
      CustEntryApplId@1008 : Code[50];
      ApplnRoundingPrecision@1010 : Decimal;
    BEGIN
      MaxPmtTolAmount := 0;
      PmtDiscAmount := 0;
      ApplyingAmount := 0;
      AmounttoApply := 0;
      AppliedAmount := 0;

      if Customer.GET(CustLedgEntry."Customer No.") then begin
        if Customer."Block Payment Tolerance" then
          exit(true);
      end else
        exit(false);

      GLSetup.GET;

      CustEntryApplId := USERID;
      if CustEntryApplId = '' then
        CustEntryApplId := '***';

      DelCustPmtTolAcc(CustLedgEntry,CustEntryApplId);
      CustLedgEntry.CALCFIELDS("Remaining Amount");
      CalcCustApplnAmount(
        CustLedgEntry,GLSetup,AppliedAmount,ApplyingAmount,AmounttoApply,PmtDiscAmount,
        MaxPmtTolAmount,CustEntryApplId,ApplnRoundingPrecision);

      if GLSetup."Pmt. Disc. Tolerance Warning" then
        if not ManagePaymentDiscToleranceWarningCustomer(CustLedgEntry,CustEntryApplId,AppliedAmount,AmounttoApply,'') then
          exit(false);

      if ABS(AmounttoApply) >= ABS(AppliedAmount - PmtDiscAmount - MaxPmtTolAmount) then begin
        AppliedAmount := AppliedAmount - PmtDiscAmount;
        if (ABS(AppliedAmount) > ABS(AmounttoApply)) and (AppliedAmount * PmtDiscAmount >= 0) then
          AppliedAmount := AmounttoApply;

        if ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <= ABS(MaxPmtTolAmount)) and
           (MaxPmtTolAmount <> 0) and ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <> 0)
           and (ABS(AppliedAmount + ApplyingAmount) > ApplnRoundingPrecision)
        then begin
          if GLSetup."Payment Tolerance Warning" then begin
            if CallPmtTolWarning(
                 CustLedgEntry."Posting Date",CustLedgEntry."Customer No.",CustLedgEntry."Document No.",
                 CustLedgEntry."Currency Code",ApplyingAmount,AppliedAmount)
            then begin
              if (AppliedAmount <> 0) and (ApplyingAmount <> 0) then
                PutCustPmtTolAmount(CustLedgEntry,ApplyingAmount,AppliedAmount,CustEntryApplId)
              else
                DelCustPmtTolAcc2(CustLedgEntry,CustEntryApplId);
            end else
              exit(false);
          end else
            PutCustPmtTolAmount(CustLedgEntry,ApplyingAmount,AppliedAmount,CustEntryApplId);
        end;
      end;
      exit(true);
    END;

    [External]
    PROCEDURE PmtTolVend@11(VAR VendLedgEntry@1000 : Record "Vendor Ledger Entry") : Boolean;
    VAR
      GLSetup@1006 : Record "General Ledger Setup";
      Vendor@1001 : Record Vendor;
      AppliedAmount@1005 : Decimal;
      ApplyingAmount@1004 : Decimal;
      AmounttoApply@1011 : Decimal;
      PmtDiscAmount@1012 : Decimal;
      MaxPmtTolAmount@1003 : Decimal;
      VendEntryApplID@1007 : Code[50];
      ApplnRoundingPrecision@1010 : Decimal;
    BEGIN
      MaxPmtTolAmount := 0;
      PmtDiscAmount := 0;
      ApplyingAmount := 0;
      AmounttoApply := 0;
      AppliedAmount := 0;
      if Vendor.GET(VendLedgEntry."Vendor No.") then begin
        if Vendor."Block Payment Tolerance" then
          exit(true);
      end else
        exit(false);

      GLSetup.GET;
      VendEntryApplID := USERID;
      if VendEntryApplID = '' then
        VendEntryApplID := '***';

      DelVendPmtTolAcc(VendLedgEntry,VendEntryApplID);
      VendLedgEntry.CALCFIELDS("Remaining Amount");
      CalcVendApplnAmount(
        VendLedgEntry,GLSetup,AppliedAmount,ApplyingAmount,AmounttoApply,PmtDiscAmount,
        MaxPmtTolAmount,VendEntryApplID,ApplnRoundingPrecision);

      if GLSetup."Pmt. Disc. Tolerance Warning" then
        if not ManagePaymentDiscToleranceWarningVendor(VendLedgEntry,VendEntryApplID,AppliedAmount,AmounttoApply,'') then
          exit(false);

      if ABS(AmounttoApply) >= ABS(AppliedAmount - PmtDiscAmount - MaxPmtTolAmount) then begin
        AppliedAmount := AppliedAmount - PmtDiscAmount;
        if (ABS(AppliedAmount) > ABS(AmounttoApply)) and (AppliedAmount * PmtDiscAmount >= 0) then
          AppliedAmount := AmounttoApply;

        if ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <= ABS(MaxPmtTolAmount)) and
           (MaxPmtTolAmount <> 0) and ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <> 0) and
           (ABS(AppliedAmount + ApplyingAmount) > ApplnRoundingPrecision)
        then begin
          if GLSetup."Payment Tolerance Warning" then begin
            if CallPmtTolWarning(
                 VendLedgEntry."Posting Date",VendLedgEntry."Vendor No.",VendLedgEntry."Document No.",
                 VendLedgEntry."Currency Code",ApplyingAmount,AppliedAmount)
            then begin
              if (AppliedAmount <> 0) and (ApplyingAmount <> 0) then
                PutVendPmtTolAmount(VendLedgEntry,ApplyingAmount,AppliedAmount,VendEntryApplID)
              else
                DelVendPmtTolAcc2(VendLedgEntry,VendEntryApplID);
            end else
              exit(false);
          end else
            PutVendPmtTolAmount(VendLedgEntry,ApplyingAmount,AppliedAmount,VendEntryApplID);
        end;
      end;
      exit(true);
    END;

    [External]
    PROCEDURE PmtTolGenJnl@16(VAR NewGenJnlLine@1000 : Record "Gen. Journal Line") : Boolean;
    VAR
      GenJnlLine@1016 : TEMPORARY Record "Gen. Journal Line";
    BEGIN
      GenJnlLine := NewGenJnlLine;

      if GenJnlLine."Check Printed" then
        exit(true);

      if GenJnlLine."Financial Void" then
        exit(true);

      if (GenJnlLine."Applies-to Doc. No." = '') and (GenJnlLine."Applies-to ID" = '') then
        exit(true);

      case true of
        (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer) or
        (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer):
          exit(SalesPmtTolGenJnl(GenJnlLine));
        (GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor) or
        (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor):
          exit(PurchPmtTolGenJnl(GenJnlLine));
      end;
    END;

    LOCAL PROCEDURE SalesPmtTolGenJnl@45(VAR GenJnlLine@1000 : Record "Gen. Journal Line") : Boolean;
    VAR
      NewCustLedgEntry@1007 : Record "Cust. Ledger Entry";
      GenJnlPostPreview@1005 : Codeunit "Gen. Jnl.-Post Preview";
      GenJnlLineApplID@1010 : Code[50];
    BEGIN
      if IsCustBlockPmtToleranceInGenJnlLine(GenJnlLine) then
        exit(false);

      GenJnlLineApplID := GetAppliesToID(GenJnlLine);

      NewCustLedgEntry."Posting Date" := GenJnlLine."Posting Date";
      NewCustLedgEntry."Document No." := GenJnlLine."Document No.";
      NewCustLedgEntry."Customer No." := GenJnlLine."Account No.";
      NewCustLedgEntry."Currency Code" := GenJnlLine."Currency Code";
      if GenJnlLine."Applies-to Doc. No." <> '' then
        NewCustLedgEntry."Applies-to Doc. No." := GenJnlLine."Applies-to Doc. No.";
      if not GenJnlPostPreview.IsActive then
        DelCustPmtTolAcc(NewCustLedgEntry,GenJnlLineApplID);
      NewCustLedgEntry.Amount := GenJnlLine.Amount;
      NewCustLedgEntry."Remaining Amount" := GenJnlLine.Amount;
      NewCustLedgEntry."Document Type" := GenJnlLine."Document Type";
      exit(
        PmtTolCustLedgEntry(NewCustLedgEntry,GenJnlLine."Account No.",GenJnlLine."Posting Date",
          GenJnlLine."Document No.",GenJnlLineApplID,GenJnlLine."Applies-to Doc. No.",
          GenJnlLine."Currency Code"));
    END;

    LOCAL PROCEDURE PurchPmtTolGenJnl@51(VAR GenJnlLine@1000 : Record "Gen. Journal Line") : Boolean;
    VAR
      NewVendLedgEntry@1008 : Record "Vendor Ledger Entry";
      GenJnlLineApplID@1010 : Code[50];
    BEGIN
      if IsVendBlockPmtToleranceInGenJnlLine(GenJnlLine) then
        exit(false);

      GenJnlLineApplID := GetAppliesToID(GenJnlLine);

      NewVendLedgEntry."Posting Date" := GenJnlLine."Posting Date";
      NewVendLedgEntry."Document No." := GenJnlLine."Document No.";
      NewVendLedgEntry."Vendor No." := GenJnlLine."Account No.";
      NewVendLedgEntry."Currency Code" := GenJnlLine."Currency Code";
      if GenJnlLine."Applies-to Doc. No." <> '' then
        NewVendLedgEntry."Applies-to Doc. No." := GenJnlLine."Applies-to Doc. No.";
      DelVendPmtTolAcc(NewVendLedgEntry,GenJnlLineApplID);
      NewVendLedgEntry.Amount := GenJnlLine.Amount;
      NewVendLedgEntry."Remaining Amount" := GenJnlLine.Amount;
      NewVendLedgEntry."Document Type" := GenJnlLine."Document Type";
      exit(
        PmtTolVendLedgEntry(
          NewVendLedgEntry,GenJnlLine."Account No.",GenJnlLine."Posting Date",
          GenJnlLine."Document No.",GenJnlLineApplID,GenJnlLine."Applies-to Doc. No.",
          GenJnlLine."Currency Code"));
    END;

    [External]
    PROCEDURE PmtTolPmtReconJnl@44(VAR NewBankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line") : Boolean;
    VAR
      BankAccReconciliationLine@1010 : Record "Bank Acc. Reconciliation Line";
    BEGIN
      BankAccReconciliationLine := NewBankAccReconciliationLine;

      case BankAccReconciliationLine."Account Type" of
        BankAccReconciliationLine."Account Type"::Customer:
          exit(SalesPmtTolPmtReconJnl(BankAccReconciliationLine));
        BankAccReconciliationLine."Account Type"::Vendor:
          exit(PurchPmtTolPmtReconJnl(BankAccReconciliationLine));
      end;
    END;

    LOCAL PROCEDURE SalesPmtTolPmtReconJnl@55(VAR BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line") : Boolean;
    VAR
      NewCustLedgEntry@1004 : Record "Cust. Ledger Entry";
    BEGIN
      BankAccReconciliationLine.TESTFIELD("Account Type",BankAccReconciliationLine."Account Type"::Customer);

      if IsCustBlockPmtTolerance(BankAccReconciliationLine."Account No.") then
        exit(false);

      NewCustLedgEntry."Posting Date" := BankAccReconciliationLine."Transaction Date";
      NewCustLedgEntry."Document No." := BankAccReconciliationLine."Document No.";
      NewCustLedgEntry."Customer No." := BankAccReconciliationLine."Account No.";
      DelCustPmtTolAcc(NewCustLedgEntry,BankAccReconciliationLine.GetAppliesToID);
      NewCustLedgEntry.Amount := -BankAccReconciliationLine."Statement Amount";
      NewCustLedgEntry."Remaining Amount" := -BankAccReconciliationLine."Statement Amount";
      NewCustLedgEntry."Document Type" := NewCustLedgEntry."Document Type"::Payment;

      exit(
        PmtTolCustLedgEntry(
          NewCustLedgEntry,BankAccReconciliationLine."Account No.",BankAccReconciliationLine."Transaction Date",
          BankAccReconciliationLine."Statement No.",BankAccReconciliationLine.GetAppliesToID,'',
          ''));
    END;

    LOCAL PROCEDURE PurchPmtTolPmtReconJnl@60(VAR BankAccReconciliationLine@1000 : Record "Bank Acc. Reconciliation Line") : Boolean;
    VAR
      NewVendLedgEntry@1003 : Record "Vendor Ledger Entry";
    BEGIN
      BankAccReconciliationLine.TESTFIELD("Account Type",BankAccReconciliationLine."Account Type"::Vendor);

      if IsVendBlockPmtTolerance(BankAccReconciliationLine."Account No.") then
        exit(false);

      NewVendLedgEntry."Posting Date" := BankAccReconciliationLine."Transaction Date";
      NewVendLedgEntry."Document No." := BankAccReconciliationLine."Document No.";
      NewVendLedgEntry."Vendor No." := BankAccReconciliationLine."Account No.";
      DelVendPmtTolAcc(NewVendLedgEntry,BankAccReconciliationLine.GetAppliesToID);
      NewVendLedgEntry.Amount := -BankAccReconciliationLine."Statement Amount";
      NewVendLedgEntry."Remaining Amount" := -BankAccReconciliationLine."Statement Amount";
      NewVendLedgEntry."Document Type" := NewVendLedgEntry."Document Type"::Payment;

      exit(
        PmtTolVendLedgEntry(
          NewVendLedgEntry,BankAccReconciliationLine."Account No.",BankAccReconciliationLine."Transaction Date",
          BankAccReconciliationLine."Statement No.",BankAccReconciliationLine.GetAppliesToID,'',
          ''));
    END;

    LOCAL PROCEDURE PmtTolCustLedgEntry@46(VAR NewCustLedgEntry@1008 : Record "Cust. Ledger Entry";AccountNo@1005 : Code[20];PostingDate@1004 : Date;DocNo@1003 : Code[20];AppliesToID@1002 : Code[50];AppliesToDocNo@1001 : Code[20];CurrencyCode@1000 : Code[10]) : Boolean;
    VAR
      GLSetup@1016 : Record "General Ledger Setup";
      AppliedAmount@1014 : Decimal;
      ApplyingAmount@1013 : Decimal;
      AmounttoApply@1012 : Decimal;
      PmtDiscAmount@1011 : Decimal;
      MaxPmtTolAmount@1010 : Decimal;
      ApplnRoundingPrecision@1009 : Decimal;
    BEGIN
      GLSetup.GET;
      CalcCustApplnAmount(
        NewCustLedgEntry,GLSetup,AppliedAmount,ApplyingAmount,AmounttoApply,PmtDiscAmount,
        MaxPmtTolAmount,AppliesToID,ApplnRoundingPrecision);

      if GLSetup."Pmt. Disc. Tolerance Warning" then
        if not ManagePaymentDiscToleranceWarningCustomer(NewCustLedgEntry,AppliesToID,AppliedAmount,AmounttoApply,AppliesToDocNo) then
          exit(false);

      if ABS(AmounttoApply) >= ABS(AppliedAmount - PmtDiscAmount - MaxPmtTolAmount) then begin
        AppliedAmount := AppliedAmount - PmtDiscAmount;
        if (ABS(AppliedAmount) > ABS(AmounttoApply)) and (AppliedAmount * PmtDiscAmount >= 0) then
          AppliedAmount := AmounttoApply;

        if ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <= ABS(MaxPmtTolAmount)) and
           (MaxPmtTolAmount <> 0) and ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <> 0) and
           (ABS(AppliedAmount + ApplyingAmount) > ApplnRoundingPrecision)
        then
          if GLSetup."Payment Tolerance Warning" then
            if CallPmtTolWarning(
                 PostingDate,AccountNo,DocNo,
                 CurrencyCode,ApplyingAmount,AppliedAmount)
            then begin
              if (AppliedAmount <> 0) and (ApplyingAmount <> 0) then
                PutCustPmtTolAmount(NewCustLedgEntry,ApplyingAmount,AppliedAmount,AppliesToID)
              else
                DelCustPmtTolAcc(NewCustLedgEntry,AppliesToID);
            end else begin
              DelCustPmtTolAcc(NewCustLedgEntry,AppliesToID);
              exit(false);
            end
          else
            PutCustPmtTolAmount(NewCustLedgEntry,ApplyingAmount,AppliedAmount,AppliesToID);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE PmtTolVendLedgEntry@49(VAR NewVendLedgEntry@1007 : Record "Vendor Ledger Entry";AccountNo@1005 : Code[20];PostingDate@1004 : Date;DocNo@1003 : Code[20];AppliesToID@1002 : Code[50];AppliesToDocNo@1001 : Code[20];CurrencyCode@1000 : Code[10]) : Boolean;
    VAR
      GLSetup@1016 : Record "General Ledger Setup";
      AppliedAmount@1014 : Decimal;
      ApplyingAmount@1013 : Decimal;
      AmounttoApply@1012 : Decimal;
      PmtDiscAmount@1011 : Decimal;
      MaxPmtTolAmount@1010 : Decimal;
      ApplnRoundingPrecision@1009 : Decimal;
    BEGIN
      GLSetup.GET;
      CalcVendApplnAmount(
        NewVendLedgEntry,GLSetup,AppliedAmount,ApplyingAmount,AmounttoApply,PmtDiscAmount,
        MaxPmtTolAmount,AppliesToID,ApplnRoundingPrecision);

      if GLSetup."Pmt. Disc. Tolerance Warning" then
        if not ManagePaymentDiscToleranceWarningVendor(NewVendLedgEntry,AppliesToID,AppliedAmount,AmounttoApply,AppliesToDocNo) then
          exit(false);

      if ABS(AmounttoApply) >= ABS(AppliedAmount - PmtDiscAmount - MaxPmtTolAmount) then begin
        AppliedAmount := AppliedAmount - PmtDiscAmount;
        if (ABS(AppliedAmount) > ABS(AmounttoApply)) and (AppliedAmount * PmtDiscAmount >= 0) then
          AppliedAmount := AmounttoApply;

        if ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <= ABS(MaxPmtTolAmount)) and
           (MaxPmtTolAmount <> 0) and ((ABS(AppliedAmount + ApplyingAmount) - ApplnRoundingPrecision) <> 0) and
           (ABS(AppliedAmount + ApplyingAmount) > ApplnRoundingPrecision)
        then
          if GLSetup."Payment Tolerance Warning" then
            if CallPmtTolWarning(
                 PostingDate,AccountNo,DocNo,CurrencyCode,ApplyingAmount,AppliedAmount)
            then begin
              if (AppliedAmount <> 0) and (ApplyingAmount <> 0) then
                PutVendPmtTolAmount(NewVendLedgEntry,ApplyingAmount,AppliedAmount,AppliesToID)
              else
                DelVendPmtTolAcc(NewVendLedgEntry,AppliesToID);
            end else begin
              DelVendPmtTolAcc(NewVendLedgEntry,AppliesToID);
              exit(false);
            end
          else
            PutVendPmtTolAmount(NewVendLedgEntry,ApplyingAmount,AppliedAmount,AppliesToID);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CalcCustApplnAmount@14(CustledgEntry@1000 : Record "Cust. Ledger Entry";GLSetup@1003 : Record "General Ledger Setup";VAR AppliedAmount@1001 : Decimal;VAR ApplyingAmount@1002 : Decimal;VAR AmounttoApply@1019 : Decimal;VAR PmtDiscAmount@1022 : Decimal;VAR MaxPmtTolAmount@1005 : Decimal;CustEntryApplID@1021 : Code[50];VAR ApplnRoundingPrecision@1017 : Decimal);
    VAR
      CurrExchRate@1020 : Record "Currency Exchange Rate";
      AppliedCustLedgEntry@1006 : Record "Cust. Ledger Entry";
      AppliedCustLedgEntryTemp@1011 : TEMPORARY Record "Cust. Ledger Entry";
      CustLedgEntry2@1013 : Record "Cust. Ledger Entry";
      ApplnCurrencyCode@1007 : Code[10];
      ApplnDate@1008 : Date;
      AmountRoundingPrecision@1012 : Decimal;
      TempAmount@1016 : Decimal;
      i@1014 : Integer;
      PositiveFilter@1015 : Boolean;
      SetPositiveFilter@1018 : Boolean;
      ApplnInMultiCurrency@1009 : Boolean;
      UseDisc@1023 : Boolean;
      RemainingPmtDiscPossible@1024 : Decimal;
      AvailableAmount@1025 : Decimal;
    BEGIN
      ApplnCurrencyCode := CustledgEntry."Currency Code";
      ApplnDate := CustledgEntry."Posting Date";
      ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision";
      AmountRoundingPrecision := GLSetup."Amount Rounding Precision";

      if CustEntryApplID <> '' then begin
        AppliedCustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive);
        AppliedCustLedgEntry.SETRANGE("Customer No.",CustledgEntry."Customer No.");
        AppliedCustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);
        AppliedCustLedgEntry.SETRANGE(Open,true);
        CustLedgEntry2 := CustledgEntry;
        PositiveFilter := CustledgEntry."Remaining Amount" < 0;
        AppliedCustLedgEntry.SETRANGE(Positive,PositiveFilter);
        if CustledgEntry."Entry No." <> 0 then
          AppliedCustLedgEntry.SETFILTER("Entry No.",'<>%1',CustledgEntry."Entry No.");

        // Find Application Rounding Precision
        GetCustApplicationRoundingPrecisionForAppliesToID(
          AppliedCustLedgEntry,ApplnRoundingPrecision,AmountRoundingPrecision,ApplnInMultiCurrency,ApplnCurrencyCode);

        if AppliedCustLedgEntry.FIND('-') then begin
          ApplyingAmount := CustledgEntry."Remaining Amount";
          TempAmount := CustledgEntry."Remaining Amount";
          AppliedCustLedgEntry.SETRANGE(Positive);
          AppliedCustLedgEntry.FIND('-');
          repeat
            UpdateCustAmountsForApplication(AppliedCustLedgEntry,CustledgEntry,AppliedCustLedgEntryTemp);
            CheckCustPaymentAmountsForAppliesToID(
              CustledgEntry,AppliedCustLedgEntry,AppliedCustLedgEntryTemp,MaxPmtTolAmount,AvailableAmount,TempAmount,
              ApplnRoundingPrecision);
          until AppliedCustLedgEntry.NEXT = 0;

          TempAmount := TempAmount + MaxPmtTolAmount;

          PositiveFilter := GetCustPositiveFilter(CustledgEntry."Document Type",TempAmount);
          SetPositiveFilter := true;
          AppliedCustLedgEntry.SETRANGE(Positive,PositiveFilter);
        end else
          AppliedCustLedgEntry.SETRANGE(Positive);

        if CustledgEntry."Entry No." <> 0 then
          AppliedCustLedgEntry.SETRANGE("Entry No.");

        for i := 1 to 2 do begin
          if SetPositiveFilter then begin
            if i = 2 then
              AppliedCustLedgEntry.SETRANGE(Positive,not PositiveFilter);
          end else
            i := 2;

          with AppliedCustLedgEntry do begin
            if FIND('-') then
              repeat
                CALCFIELDS("Remaining Amount");
                AppliedCustLedgEntryTemp := AppliedCustLedgEntry;
                if not ApplyingPostedEntries then
                  if "Currency Code" <> ApplnCurrencyCode then begin
                    "Remaining Amount" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");
                    "Remaining Pmt. Disc. Possible" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Pmt. Disc. Possible");
                    "Max. Payment Tolerance" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Max. Payment Tolerance");
                    "Amount to Apply" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Amount to Apply");
                  end;
                // Check Payment Discount
                UseDisc := false;
                if CheckCalcPmtDiscCust(
                     CustLedgEntry2,AppliedCustLedgEntry,ApplnRoundingPrecision,false,false) and
                   (((CustledgEntry.Amount > 0) and (i = 1)) or
                    (("Remaining Amount" < 0) and (i = 1)) or
                    (ABS(ABS(CustLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) >= ABS("Remaining Pmt. Disc. Possible" + "Max. Payment Tolerance")) or
                    (ABS(ABS(CustLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) <= ABS("Remaining Pmt. Disc. Possible" + MaxPmtTolAmount)))
                then begin
                  PmtDiscAmount := PmtDiscAmount + "Remaining Pmt. Disc. Possible";
                  UseDisc := true;
                end;

                // Check Payment Discount Tolerance
                if "Amount to Apply" = "Remaining Amount" then
                  AvailableAmount := CustLedgEntry2."Remaining Amount"
                else
                  AvailableAmount := -"Amount to Apply";
                if CheckPmtDiscTolCust(CustLedgEntry2."Posting Date",
                     CustledgEntry."Document Type",AvailableAmount,
                     AppliedCustLedgEntry,ApplnRoundingPrecision,MaxPmtTolAmount) and
                   (((CustledgEntry.Amount > 0) and (i = 1)) or
                    (("Remaining Amount" < 0) and (i = 1)) or
                    (ABS(ABS(CustLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) >= ABS("Remaining Pmt. Disc. Possible" + "Max. Payment Tolerance")) or
                    (ABS(ABS(CustLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) <= ABS("Remaining Pmt. Disc. Possible" + MaxPmtTolAmount)))
                then begin
                  PmtDiscAmount := PmtDiscAmount + "Remaining Pmt. Disc. Possible";
                  UseDisc := true;
                  "Accepted Pmt. Disc. Tolerance" := true;
                  if CustledgEntry."Currency Code" <> "Currency Code" then begin
                    RemainingPmtDiscPossible := "Remaining Pmt. Disc. Possible";
                    "Remaining Pmt. Disc. Possible" := AppliedCustLedgEntryTemp."Remaining Pmt. Disc. Possible";
                    "Max. Payment Tolerance" := AppliedCustLedgEntryTemp."Max. Payment Tolerance";
                  end;
                  MODIFY;
                  if CustledgEntry."Currency Code" <> "Currency Code" then
                    "Remaining Pmt. Disc. Possible" := RemainingPmtDiscPossible;
                end;

                if CustledgEntry."Entry No." <> "Entry No." then begin
                  MaxPmtTolAmount := ROUND(MaxPmtTolAmount,AmountRoundingPrecision);
                  PmtDiscAmount := ROUND(PmtDiscAmount,AmountRoundingPrecision);
                  AppliedAmount := AppliedAmount + ROUND("Remaining Amount",AmountRoundingPrecision);
                  if UseDisc then begin
                    AmounttoApply :=
                      AmounttoApply +
                      ROUND(
                        ABSMinTol(
                          "Remaining Amount" -
                          "Remaining Pmt. Disc. Possible",
                          "Amount to Apply",
                          MaxPmtTolAmount),
                        AmountRoundingPrecision);
                    CustLedgEntry2."Remaining Amount" :=
                      CustLedgEntry2."Remaining Amount" +
                      ROUND("Remaining Amount" - "Remaining Pmt. Disc. Possible",AmountRoundingPrecision)
                  end else begin
                    AmounttoApply := AmounttoApply + ROUND("Amount to Apply",AmountRoundingPrecision);
                    CustLedgEntry2."Remaining Amount" :=
                      CustLedgEntry2."Remaining Amount" + ROUND("Remaining Amount",AmountRoundingPrecision);
                  end;
                  if CustledgEntry."Remaining Amount" > 0 then begin
                    CustledgEntry."Remaining Amount" := CustledgEntry."Remaining Amount" + "Remaining Amount";
                    if CustledgEntry."Remaining Amount" < 0 then
                      CustledgEntry."Remaining Amount" := 0;
                  end;
                  if CustledgEntry."Remaining Amount" < 0 then begin
                    CustledgEntry."Remaining Amount" := CustledgEntry."Remaining Amount" + "Remaining Amount";
                    if CustledgEntry."Remaining Amount" > 0 then
                      CustledgEntry."Remaining Amount" := 0;
                  end;
                end else
                  ApplyingAmount := "Remaining Amount";
              until NEXT = 0;

            COMMIT;
          end;
        end;
      end else
        if CustledgEntry."Applies-to Doc. No." <> '' then begin
          AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open);
          AppliedCustLedgEntry.SETRANGE("Customer No.",CustledgEntry."Customer No.");
          AppliedCustLedgEntry.SETRANGE(Open,true);
          AppliedCustLedgEntry.SETRANGE("Document No.",CustledgEntry."Applies-to Doc. No.");
          if AppliedCustLedgEntry.FIND('-') then begin
            GetApplicationRoundingPrecisionForAppliesToDoc(
              AppliedCustLedgEntry."Currency Code",ApplnRoundingPrecision,AmountRoundingPrecision,ApplnCurrencyCode);
            UpdateCustAmountsForApplication(AppliedCustLedgEntry,CustledgEntry,AppliedCustLedgEntryTemp);
            CheckCustPaymentAmountsForAppliesToDoc(
              CustledgEntry,AppliedCustLedgEntry,AppliedCustLedgEntryTemp,MaxPmtTolAmount,ApplnRoundingPrecision,PmtDiscAmount,
              ApplnCurrencyCode);
            MaxPmtTolAmount := ROUND(MaxPmtTolAmount,AmountRoundingPrecision);
            PmtDiscAmount := ROUND(PmtDiscAmount,AmountRoundingPrecision);
            AppliedAmount := ROUND(AppliedCustLedgEntry."Remaining Amount",AmountRoundingPrecision);
            AmounttoApply := ROUND(AppliedCustLedgEntry."Amount to Apply",AmountRoundingPrecision);
          end;
          ApplyingAmount := CustledgEntry.Amount;
        end;
    END;

    LOCAL PROCEDURE CalcVendApplnAmount@27(VendledgEntry@1000 : Record "Vendor Ledger Entry";GLSetup@1003 : Record "General Ledger Setup";VAR AppliedAmount@1001 : Decimal;VAR ApplyingAmount@1002 : Decimal;VAR AmounttoApply@1017 : Decimal;VAR PmtDiscAmount@1022 : Decimal;VAR MaxPmtTolAmount@1005 : Decimal;VendEntryApplID@1021 : Code[50];VAR ApplnRoundingPrecision@1011 : Decimal);
    VAR
      CurrExchRate@1019 : Record "Currency Exchange Rate";
      AppliedVendLedgEntry@1018 : Record "Vendor Ledger Entry";
      AppliedVendLedgEntryTemp@1010 : TEMPORARY Record "Vendor Ledger Entry";
      VendLedgEntry2@1004 : Record "Vendor Ledger Entry";
      ApplnCurrencyCode@1015 : Code[10];
      ApplnDate@1014 : Date;
      AmountRoundingPrecision@1012 : Decimal;
      TempAmount@1009 : Decimal;
      i@1008 : Integer;
      PositiveFilter@1007 : Boolean;
      SetPositiveFilter@1006 : Boolean;
      ApplnInMultiCurrency@1013 : Boolean;
      RemainingPmtDiscPossible@1023 : Decimal;
      UseDisc@1024 : Boolean;
      AvailableAmount@1026 : Decimal;
    BEGIN
      ApplnCurrencyCode := VendledgEntry."Currency Code";
      ApplnDate := VendledgEntry."Posting Date";
      ApplnRoundingPrecision := GLSetup."Appln. Rounding Precision";
      AmountRoundingPrecision := GLSetup."Amount Rounding Precision";

      if VendEntryApplID <> '' then begin
        AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive);
        AppliedVendLedgEntry.SETRANGE("Vendor No.",VendledgEntry."Vendor No.");
        AppliedVendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID);
        AppliedVendLedgEntry.SETRANGE(Open,true);
        VendLedgEntry2 := VendledgEntry;
        PositiveFilter := VendledgEntry."Remaining Amount" > 0;
        AppliedVendLedgEntry.SETRANGE(Positive,not PositiveFilter);

        if VendledgEntry."Entry No." <> 0 then
          AppliedVendLedgEntry.SETFILTER("Entry No.",'<>%1',VendledgEntry."Entry No.");
        GetVendApplicationRoundingPrecisionForAppliesToID(AppliedVendLedgEntry,
          ApplnRoundingPrecision,AmountRoundingPrecision,ApplnInMultiCurrency,ApplnCurrencyCode);
        if AppliedVendLedgEntry.FIND('-') then begin
          ApplyingAmount := VendledgEntry."Remaining Amount";
          TempAmount := VendledgEntry."Remaining Amount";
          AppliedVendLedgEntry.SETRANGE(Positive);
          AppliedVendLedgEntry.FIND('-');
          repeat
            UpdateVendAmountsForApplication(AppliedVendLedgEntry,VendledgEntry,AppliedVendLedgEntryTemp);
            CheckVendPaymentAmountsForAppliesToID(
              VendledgEntry,AppliedVendLedgEntry,AppliedVendLedgEntryTemp,MaxPmtTolAmount,AvailableAmount,TempAmount,
              ApplnRoundingPrecision);
          until AppliedVendLedgEntry.NEXT = 0;

          TempAmount := TempAmount + MaxPmtTolAmount;
          PositiveFilter := GetVendPositiveFilter(VendledgEntry."Document Type",TempAmount);
          SetPositiveFilter := true;
          AppliedVendLedgEntry.SETRANGE(Positive,not PositiveFilter);
        end else
          AppliedVendLedgEntry.SETRANGE(Positive);

        if VendledgEntry."Entry No." <> 0 then
          AppliedVendLedgEntry.SETRANGE("Entry No.");

        for i := 1 to 2 do begin
          if SetPositiveFilter then begin
            if i = 2 then
              AppliedVendLedgEntry.SETRANGE(Positive,PositiveFilter);
          end else
            i := 2;

          with AppliedVendLedgEntry do begin
            if FIND('-') then
              repeat
                CALCFIELDS("Remaining Amount");
                AppliedVendLedgEntryTemp := AppliedVendLedgEntry;
                if not ApplyingPostedEntries then
                  if "Currency Code" <> ApplnCurrencyCode then begin
                    "Remaining Amount" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Amount");
                    "Remaining Pmt. Disc. Possible" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Remaining Pmt. Disc. Possible");
                    "Max. Payment Tolerance" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Max. Payment Tolerance");
                    "Amount to Apply" :=
                      CurrExchRate.ExchangeAmtFCYToFCY(
                        ApplnDate,"Currency Code",ApplnCurrencyCode,"Amount to Apply");
                  end;
                // Check Payment Discount
                UseDisc := false;
                if CheckCalcPmtDiscVend(
                     VendLedgEntry2,AppliedVendLedgEntry,ApplnRoundingPrecision,false,false) and
                   (((VendledgEntry.Amount < 0) and (i = 1)) or
                    (("Remaining Amount" > 0) and (i = 1)) or
                    (ABS(ABS(VendLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) >= ABS("Remaining Pmt. Disc. Possible" + "Max. Payment Tolerance")) or
                    (ABS(ABS(VendLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) <= ABS("Remaining Pmt. Disc. Possible" + MaxPmtTolAmount)))
                then begin
                  PmtDiscAmount := PmtDiscAmount + "Remaining Pmt. Disc. Possible";
                  UseDisc := true;
                end;

                // Check Payment Discount Tolerance
                if "Amount to Apply" = "Remaining Amount" then
                  AvailableAmount := VendLedgEntry2."Remaining Amount"
                else
                  AvailableAmount := -"Amount to Apply";

                if CheckPmtDiscTolVend(
                     VendLedgEntry2."Posting Date",VendledgEntry."Document Type",AvailableAmount,
                     AppliedVendLedgEntry,ApplnRoundingPrecision,MaxPmtTolAmount) and
                   (((VendledgEntry.Amount < 0) and (i = 1)) or
                    (("Remaining Amount" > 0) and (i = 1)) or
                    (ABS(ABS(VendLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) >= ABS("Remaining Pmt. Disc. Possible" + "Max. Payment Tolerance")) or
                    (ABS(ABS(VendLedgEntry2."Remaining Amount") + ApplnRoundingPrecision -
                       ABS("Remaining Amount")) <= ABS("Remaining Pmt. Disc. Possible" + MaxPmtTolAmount)))
                then begin
                  PmtDiscAmount := PmtDiscAmount + "Remaining Pmt. Disc. Possible";
                  UseDisc := true;
                  "Accepted Pmt. Disc. Tolerance" := true;
                  if VendledgEntry."Currency Code" <> "Currency Code" then begin
                    RemainingPmtDiscPossible := "Remaining Pmt. Disc. Possible";
                    "Remaining Pmt. Disc. Possible" := AppliedVendLedgEntryTemp."Remaining Pmt. Disc. Possible";
                    "Max. Payment Tolerance" := AppliedVendLedgEntryTemp."Max. Payment Tolerance";
                  end;
                  MODIFY;
                  if VendledgEntry."Currency Code" <> "Currency Code" then
                    "Remaining Pmt. Disc. Possible" := RemainingPmtDiscPossible;
                end;

                if VendledgEntry."Entry No." <> "Entry No." then begin
                  PmtDiscAmount := ROUND(PmtDiscAmount,AmountRoundingPrecision);
                  MaxPmtTolAmount := ROUND(MaxPmtTolAmount,AmountRoundingPrecision);
                  AppliedAmount := AppliedAmount + ROUND("Remaining Amount",AmountRoundingPrecision);
                  if UseDisc then begin
                    AmounttoApply :=
                      AmounttoApply +
                      ROUND(
                        ABSMinTol(
                          "Remaining Amount" -
                          "Remaining Pmt. Disc. Possible",
                          "Amount to Apply",
                          MaxPmtTolAmount),
                        AmountRoundingPrecision);
                    VendLedgEntry2."Remaining Amount" :=
                      VendLedgEntry2."Remaining Amount" +
                      ROUND("Remaining Amount" - "Remaining Pmt. Disc. Possible",AmountRoundingPrecision)
                  end else begin
                    AmounttoApply := AmounttoApply + ROUND("Amount to Apply",AmountRoundingPrecision);
                    VendLedgEntry2."Remaining Amount" :=
                      VendLedgEntry2."Remaining Amount" + ROUND("Remaining Amount",AmountRoundingPrecision);
                  end;
                  if VendledgEntry."Remaining Amount" > 0 then begin
                    VendledgEntry."Remaining Amount" := VendledgEntry."Remaining Amount" + "Remaining Amount";
                    if VendledgEntry."Remaining Amount" < 0 then
                      VendledgEntry."Remaining Amount" := 0;
                  end;
                  if VendledgEntry."Remaining Amount" < 0 then begin
                    VendledgEntry."Remaining Amount" := VendledgEntry."Remaining Amount" + "Remaining Amount";
                    if VendledgEntry."Remaining Amount" > 0 then
                      VendledgEntry."Remaining Amount" := 0;
                  end;
                end else
                  ApplyingAmount := "Remaining Amount";
              until NEXT = 0;

            COMMIT;
          end;
        end;
      end else
        if VendledgEntry."Applies-to Doc. No." <> '' then begin
          AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
          AppliedVendLedgEntry.SETRANGE("Vendor No.",VendledgEntry."Vendor No.");
          AppliedVendLedgEntry.SETRANGE(Open,true);
          AppliedVendLedgEntry.SETRANGE("Document No.",VendledgEntry."Applies-to Doc. No.");
          if AppliedVendLedgEntry.FIND('-') then begin
            GetApplicationRoundingPrecisionForAppliesToDoc(
              AppliedVendLedgEntry."Currency Code",ApplnRoundingPrecision,AmountRoundingPrecision,ApplnCurrencyCode);
            UpdateVendAmountsForApplication(AppliedVendLedgEntry,VendledgEntry,AppliedVendLedgEntryTemp);
            CheckVendPaymentAmountsForAppliesToDoc(VendledgEntry,AppliedVendLedgEntry,AppliedVendLedgEntryTemp,MaxPmtTolAmount,
              ApplnRoundingPrecision,PmtDiscAmount);
            PmtDiscAmount := ROUND(PmtDiscAmount,AmountRoundingPrecision);
            MaxPmtTolAmount := ROUND(MaxPmtTolAmount,AmountRoundingPrecision);
            AppliedAmount := ROUND(AppliedVendLedgEntry."Remaining Amount",AmountRoundingPrecision);
            AmounttoApply := ROUND(AppliedVendLedgEntry."Amount to Apply",AmountRoundingPrecision);
          end;
          ApplyingAmount := VendledgEntry.Amount;
        end;
    END;

    LOCAL PROCEDURE CheckPmtDiscTolCust@13(NewPostingdate@1003 : Date;NewDocType@1002 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';NewAmount@1001 : Decimal;OldCustLedgEntry@1000 : Record "Cust. Ledger Entry";ApplnRoundingPrecision@1004 : Decimal;MaxPmtTolAmount@1006 : Decimal) : Boolean;
    VAR
      ToleranceAmount@1005 : Decimal;
    BEGIN
      if ((NewDocType = NewDocType::Payment) and
          ((OldCustLedgEntry."Document Type" in [OldCustLedgEntry."Document Type"::Invoice,
                                                 OldCustLedgEntry."Document Type"::"Credit Memo"]) and
           (NewPostingdate > OldCustLedgEntry."Pmt. Discount Date") and
           (NewPostingdate <= OldCustLedgEntry."Pmt. Disc. Tolerance Date"))) or
         ((NewDocType = NewDocType::Refund) and
          ((OldCustLedgEntry."Document Type" = OldCustLedgEntry."Document Type"::"Credit Memo") and
           (NewPostingdate > OldCustLedgEntry."Pmt. Discount Date") and
           (NewPostingdate <= OldCustLedgEntry."Pmt. Disc. Tolerance Date")))
      then begin
        ToleranceAmount := (ABS(NewAmount) + ApplnRoundingPrecision) -
          ABS(OldCustLedgEntry."Remaining Amount" - OldCustLedgEntry."Remaining Pmt. Disc. Possible");
        exit((ToleranceAmount >= 0) or (ABS(MaxPmtTolAmount) >= ABS(ToleranceAmount)));
      end;
      exit(false);
    END;

    LOCAL PROCEDURE CheckPmtTolCust@12(NewDocType@1002 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';OldCustLedgEntry@1000 : Record "Cust. Ledger Entry") : Boolean;
    BEGIN
      if ((NewDocType = NewDocType::Payment) and
          (OldCustLedgEntry."Document Type" = OldCustLedgEntry."Document Type"::Invoice)) or
         ((NewDocType = NewDocType::Refund) and
          (OldCustLedgEntry."Document Type" = OldCustLedgEntry."Document Type"::"Credit Memo"))
      then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE CheckPmtDiscTolVend@8(NewPostingdate@1003 : Date;NewDocType@1002 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';NewAmount@1001 : Decimal;OldVendLedgEntry@1000 : Record "Vendor Ledger Entry";ApplnRoundingPrecision@1004 : Decimal;MaxPmtTolAmount@1005 : Decimal) : Boolean;
    VAR
      ToleranceAmount@1006 : Decimal;
    BEGIN
      if ((NewDocType = NewDocType::Payment) and
          ((OldVendLedgEntry."Document Type" in [OldVendLedgEntry."Document Type"::Invoice,
                                                 OldVendLedgEntry."Document Type"::"Credit Memo"]) and
           (NewPostingdate > OldVendLedgEntry."Pmt. Discount Date") and
           (NewPostingdate <= OldVendLedgEntry."Pmt. Disc. Tolerance Date"))) or
         ((NewDocType = NewDocType::Refund) and
          ((OldVendLedgEntry."Document Type" = OldVendLedgEntry."Document Type"::"Credit Memo") and
           (NewPostingdate > OldVendLedgEntry."Pmt. Discount Date") and
           (NewPostingdate <= OldVendLedgEntry."Pmt. Disc. Tolerance Date")))
      then begin
        ToleranceAmount := (ABS(NewAmount) + ApplnRoundingPrecision) -
          ABS(OldVendLedgEntry."Remaining Amount" - OldVendLedgEntry."Remaining Pmt. Disc. Possible");
        exit((ToleranceAmount >= 0) or (ABS(MaxPmtTolAmount) >= ABS(ToleranceAmount)));
      end;
      exit(false);
    END;

    LOCAL PROCEDURE CheckPmtTolVend@6(NewDocType@1002 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';OldVendLedgEntry@1000 : Record "Vendor Ledger Entry") : Boolean;
    BEGIN
      if ((NewDocType = NewDocType::Payment) and
          (OldVendLedgEntry."Document Type" = OldVendLedgEntry."Document Type"::Invoice)) or
         ((NewDocType = NewDocType::Refund) and
          (OldVendLedgEntry."Document Type" = OldVendLedgEntry."Document Type"::"Credit Memo"))
      then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE CallPmtDiscTolWarning@17(PostingDate@1007 : Date;No@1006 : Code[20];DocNo@1005 : Code[20];CurrencyCode@1004 : Code[10];Amount@1003 : Decimal;AppliedAmount@1002 : Decimal;PmtDiscAmount@1001 : Decimal;VAR RemainingAmountTest@1009 : Boolean) : Boolean;
    VAR
      PmtDiscTolWarning@1000 : Page "Payment Disc Tolerance Warning";
      ActionType@1008 : Integer;
    BEGIN
      if PmtDiscAmount = 0 then begin
        RemainingAmountTest := false;
        exit(true);
      end;
      PmtDiscTolWarning.SetValues(PostingDate,No,DocNo,CurrencyCode,Amount,AppliedAmount,PmtDiscAmount);
      PmtDiscTolWarning.LOOKUPMODE(true);
      if ACTION::Yes = PmtDiscTolWarning.RUNMODAL then begin
        PmtDiscTolWarning.GetValues(ActionType);
        if ActionType = 2 then
          RemainingAmountTest := true
        else
          RemainingAmountTest := false;
      end else
        exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE CallPmtTolWarning@18(PostingDate@1006 : Date;No@1005 : Code[20];DocNo@1004 : Code[20];CurrencyCode@1003 : Code[10];VAR Amount@1002 : Decimal;VAR AppliedAmount@1001 : Decimal) : Boolean;
    VAR
      PmtTolWarning@1008 : Page "Payment Tolerance Warning";
      ActionType@1007 : Integer;
    BEGIN
      PmtTolWarning.SetValues(PostingDate,No,DocNo,CurrencyCode,Amount,AppliedAmount,0);
      PmtTolWarning.LOOKUPMODE(true);
      if ACTION::Yes = PmtTolWarning.RUNMODAL then begin
        PmtTolWarning.GetValues(ActionType);
        if ActionType = 2 then begin
          Amount := 0;
          AppliedAmount := 0;
        end;
      end else
        exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE PutCustPmtTolAmount@15(CustledgEntry@1000 : Record "Cust. Ledger Entry";Amount@1001 : Decimal;AppliedAmount@1007 : Decimal;CustEntryApplID@1009 : Code[50]);
    VAR
      AppliedCustLedgEntry@1002 : Record "Cust. Ledger Entry";
      AppliedCustLedgEntryTemp@1013 : Record "Cust. Ledger Entry";
      Currency@1012 : Record Currency;
      Number@1004 : Integer;
      AcceptedTolAmount@1005 : Decimal;
      AcceptedEntryTolAmount@1011 : Decimal;
      TotalAmount@1006 : Decimal;
    BEGIN
      AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
      AppliedCustLedgEntry.SETRANGE("Customer No.",CustledgEntry."Customer No.");
      AppliedCustLedgEntry.SETRANGE(Open,true);

      if CustledgEntry."Applies-to Doc. No." <> '' then
        AppliedCustLedgEntry.SETRANGE("Document No.",CustledgEntry."Applies-to Doc. No.")
      else
        AppliedCustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);

      if CustledgEntry."Document Type" = CustledgEntry."Document Type"::Payment then
        AppliedCustLedgEntry.SETRANGE(Positive,true)
      else
        AppliedCustLedgEntry.SETRANGE(Positive,false);
      if AppliedCustLedgEntry.FINDSET(false,false) then
        repeat
          if AppliedCustLedgEntry."Max. Payment Tolerance" <> 0 then begin
            AppliedCustLedgEntry.CALCFIELDS(Amount);
            if CustledgEntry."Currency Code" <> AppliedCustLedgEntry."Currency Code" then
              AppliedCustLedgEntry.Amount :=
                CurrExchRate.ExchangeAmount(
                  AppliedCustLedgEntry.Amount,
                  AppliedCustLedgEntry."Currency Code",
                  CustledgEntry."Currency Code",CustledgEntry."Posting Date");
            TotalAmount := TotalAmount + AppliedCustLedgEntry.Amount;
          end;
        until AppliedCustLedgEntry.NEXT = 0;

      AppliedCustLedgEntry.LOCKTABLE;

      AcceptedTolAmount := Amount + AppliedAmount;
      Number := AppliedCustLedgEntry.COUNT;

      if AppliedCustLedgEntry.FIND('-') then
        repeat
          AppliedCustLedgEntry.CALCFIELDS("Remaining Amount");
          AppliedCustLedgEntryTemp := AppliedCustLedgEntry;
          if AppliedCustLedgEntry."Currency Code" = '' then begin
            Currency.INIT;
            Currency.Code := '';
            Currency.InitRoundingPrecision;
          end else
            if AppliedCustLedgEntry."Currency Code" <> Currency.Code then
              Currency.GET(AppliedCustLedgEntry."Currency Code");
          if Number <> 1 then begin
            AppliedCustLedgEntry.CALCFIELDS(Amount);
            if CustledgEntry."Currency Code" <> AppliedCustLedgEntry."Currency Code" then
              AppliedCustLedgEntry.Amount :=
                CurrExchRate.ExchangeAmount(
                  AppliedCustLedgEntry.Amount,
                  AppliedCustLedgEntry."Currency Code",
                  CustledgEntry."Currency Code",CustledgEntry."Posting Date");
            AcceptedEntryTolAmount := ROUND((AppliedCustLedgEntry.Amount / TotalAmount) * AcceptedTolAmount);
            TotalAmount := TotalAmount - AppliedCustLedgEntry.Amount;
            AcceptedTolAmount := AcceptedTolAmount - AcceptedEntryTolAmount;
            AppliedCustLedgEntry."Accepted Payment Tolerance" := AcceptedEntryTolAmount;
          end else begin
            AcceptedEntryTolAmount := AcceptedTolAmount;
            AppliedCustLedgEntry."Accepted Payment Tolerance" := AcceptedEntryTolAmount;
          end;
          AppliedCustLedgEntry."Max. Payment Tolerance" := AppliedCustLedgEntryTemp."Max. Payment Tolerance";
          AppliedCustLedgEntry."Amount to Apply" := AppliedCustLedgEntryTemp."Remaining Amount";
          AppliedCustLedgEntry.MODIFY;
          Number := Number - 1;
        until AppliedCustLedgEntry.NEXT = 0;

      COMMIT;
    END;

    LOCAL PROCEDURE PutVendPmtTolAmount@7(VendLedgEntry@1000 : Record "Vendor Ledger Entry";Amount@1009 : Decimal;AppliedAmount@1008 : Decimal;VendEntryApplID@1001 : Code[50]);
    VAR
      AppliedVendLedgEntry@1012 : Record "Vendor Ledger Entry";
      AppliedVendLedgEntryTemp@1013 : Record "Vendor Ledger Entry";
      Currency@1011 : Record Currency;
      Number@1006 : Integer;
      AcceptedTolAmount@1005 : Decimal;
      AcceptedEntryTolAmount@1003 : Decimal;
      TotalAmount@1004 : Decimal;
    BEGIN
      AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
      AppliedVendLedgEntry.SETRANGE("Vendor No.",VendLedgEntry."Vendor No.");
      AppliedVendLedgEntry.SETRANGE(Open,true);

      if VendLedgEntry."Applies-to Doc. No." <> '' then
        AppliedVendLedgEntry.SETRANGE("Document No.",VendLedgEntry."Applies-to Doc. No.")
      else
        AppliedVendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID);

      if VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Payment then
        AppliedVendLedgEntry.SETRANGE(Positive,false)
      else
        AppliedVendLedgEntry.SETRANGE(Positive,true);
      if AppliedVendLedgEntry.FINDSET(false,false) then
        repeat
          if AppliedVendLedgEntry."Max. Payment Tolerance" <> 0 then begin
            AppliedVendLedgEntry.CALCFIELDS(Amount);
            if VendLedgEntry."Currency Code" <> AppliedVendLedgEntry."Currency Code" then
              AppliedVendLedgEntry.Amount :=
                CurrExchRate.ExchangeAmount(
                  AppliedVendLedgEntry.Amount,
                  AppliedVendLedgEntry."Currency Code",
                  VendLedgEntry."Currency Code",VendLedgEntry."Posting Date");
            TotalAmount := TotalAmount + AppliedVendLedgEntry.Amount;
          end;
        until AppliedVendLedgEntry.NEXT = 0;

      AppliedVendLedgEntry.LOCKTABLE;

      AcceptedTolAmount := Amount + AppliedAmount;
      Number := AppliedVendLedgEntry.COUNT;

      if AppliedVendLedgEntry.FIND('-') then
        repeat
          AppliedVendLedgEntry.CALCFIELDS("Remaining Amount");
          AppliedVendLedgEntryTemp := AppliedVendLedgEntry;
          if AppliedVendLedgEntry."Currency Code" = '' then begin
            Currency.INIT;
            Currency.Code := '';
            Currency.InitRoundingPrecision;
          end else
            if AppliedVendLedgEntry."Currency Code" <> Currency.Code then
              Currency.GET(AppliedVendLedgEntry."Currency Code");
          if VendLedgEntry."Currency Code" <> AppliedVendLedgEntry."Currency Code" then
            AppliedVendLedgEntry."Max. Payment Tolerance" :=
              CurrExchRate.ExchangeAmount(
                AppliedVendLedgEntry."Max. Payment Tolerance",
                AppliedVendLedgEntry."Currency Code",
                VendLedgEntry."Currency Code",VendLedgEntry."Posting Date");
          if Number <> 1 then begin
            AppliedVendLedgEntry.CALCFIELDS(Amount);
            if VendLedgEntry."Currency Code" <> AppliedVendLedgEntry."Currency Code" then
              AppliedVendLedgEntry.Amount :=
                CurrExchRate.ExchangeAmount(
                  AppliedVendLedgEntry.Amount,
                  AppliedVendLedgEntry."Currency Code",
                  VendLedgEntry."Currency Code",VendLedgEntry."Posting Date");
            AcceptedEntryTolAmount := ROUND((AppliedVendLedgEntry.Amount / TotalAmount) * AcceptedTolAmount);
            TotalAmount := TotalAmount - AppliedVendLedgEntry.Amount;
            AcceptedTolAmount := AcceptedTolAmount - AcceptedEntryTolAmount;
            AppliedVendLedgEntry."Accepted Payment Tolerance" := AcceptedEntryTolAmount;
          end else begin
            AcceptedEntryTolAmount := AcceptedTolAmount;
            AppliedVendLedgEntry."Accepted Payment Tolerance" := AcceptedEntryTolAmount;
          end;
          AppliedVendLedgEntry."Max. Payment Tolerance" := AppliedVendLedgEntryTemp."Max. Payment Tolerance";
          AppliedVendLedgEntry."Amount to Apply" := AppliedVendLedgEntryTemp."Remaining Amount";
          AppliedVendLedgEntry.MODIFY;
          Number := Number - 1;
        until AppliedVendLedgEntry.NEXT = 0;

      COMMIT;
    END;

    LOCAL PROCEDURE DelCustPmtTolAcc@1(CustledgEntry@1004 : Record "Cust. Ledger Entry";CustEntryApplID@1000 : Code[50]);
    VAR
      AppliedCustLedgEntry@1001 : Record "Cust. Ledger Entry";
    BEGIN
      if CustledgEntry."Applies-to Doc. No." <> '' then begin
        AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        AppliedCustLedgEntry.SETRANGE("Customer No.",CustledgEntry."Customer No.");
        AppliedCustLedgEntry.SETRANGE(Open,true);
        AppliedCustLedgEntry.SETRANGE("Document No.",CustledgEntry."Applies-to Doc. No.");
        AppliedCustLedgEntry.LOCKTABLE;
        if AppliedCustLedgEntry.FIND('-') then begin
          AppliedCustLedgEntry."Accepted Payment Tolerance" := 0;
          AppliedCustLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
          AppliedCustLedgEntry.MODIFY;
          COMMIT;
        end;
      end;

      if CustEntryApplID <> '' then begin
        AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        AppliedCustLedgEntry.SETRANGE("Customer No.",CustledgEntry."Customer No.");
        AppliedCustLedgEntry.SETRANGE(Open,true);
        AppliedCustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);
        AppliedCustLedgEntry.LOCKTABLE;
        if AppliedCustLedgEntry.FIND('-') then begin
          repeat
            AppliedCustLedgEntry."Accepted Payment Tolerance" := 0;
            AppliedCustLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
            AppliedCustLedgEntry.MODIFY;
          until AppliedCustLedgEntry.NEXT = 0;
          COMMIT;
        end;
      end;
    END;

    LOCAL PROCEDURE DelVendPmtTolAcc@19(VendLedgEntry@1001 : Record "Vendor Ledger Entry";VendEntryApplID@1000 : Code[50]);
    VAR
      AppliedVendLedgEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      if VendLedgEntry."Applies-to Doc. No." <> '' then begin
        AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
        AppliedVendLedgEntry.SETRANGE("Vendor No.",VendLedgEntry."Vendor No.");
        AppliedVendLedgEntry.SETRANGE(Open,true);
        AppliedVendLedgEntry.SETRANGE("Document No.",VendLedgEntry."Applies-to Doc. No.");
        AppliedVendLedgEntry.LOCKTABLE;
        if AppliedVendLedgEntry.FIND('-') then begin
          AppliedVendLedgEntry."Accepted Payment Tolerance" := 0;
          AppliedVendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
          AppliedVendLedgEntry.MODIFY;
          COMMIT;
        end;
      end;

      if VendEntryApplID <> '' then begin
        AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
        AppliedVendLedgEntry.SETRANGE("Vendor No.",VendLedgEntry."Vendor No.");
        AppliedVendLedgEntry.SETRANGE(Open,true);
        AppliedVendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID);
        AppliedVendLedgEntry.LOCKTABLE;
        if AppliedVendLedgEntry.FIND('-') then begin
          repeat
            AppliedVendLedgEntry."Accepted Payment Tolerance" := 0;
            AppliedVendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
            AppliedVendLedgEntry.MODIFY;
          until AppliedVendLedgEntry.NEXT = 0;
          COMMIT;
        end;
      end;
    END;

    [External]
    PROCEDURE CalcGracePeriodCVLedgEntry@9(PmtTolGracePeriode@1004 : DateFormula);
    VAR
      Customer@1000 : Record Customer;
      CustLedgEntry@1001 : Record "Cust. Ledger Entry";
      Vendor@1002 : Record Vendor;
      VendLedgEntry@1003 : Record "Vendor Ledger Entry";
    BEGIN
      Customer.SETCURRENTKEY("No.");
      CustLedgEntry.LOCKTABLE;
      Customer.LOCKTABLE;
      if Customer.FIND('-') then
        repeat
          if not Customer."Block Payment Tolerance" then begin
            CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
            CustLedgEntry.SETRANGE("Customer No.",Customer."No.");
            CustLedgEntry.SETRANGE(Open,true);
            CustLedgEntry.SETFILTER("Document Type",'%1|%2',
              CustLedgEntry."Document Type"::Invoice,
              CustLedgEntry."Document Type"::"Credit Memo");

            if CustLedgEntry.FIND('-') then
              repeat
                if CustLedgEntry."Pmt. Discount Date" <> 0D then begin
                  if CustLedgEntry."Pmt. Discount Date" <> CustLedgEntry."Document Date" then
                    CustLedgEntry."Pmt. Disc. Tolerance Date" :=
                      CALCDATE(PmtTolGracePeriode,CustLedgEntry."Pmt. Discount Date")
                  else
                    CustLedgEntry."Pmt. Disc. Tolerance Date" :=
                      CustLedgEntry."Pmt. Discount Date";
                end else
                  CustLedgEntry."Pmt. Disc. Tolerance Date" := 0D;
                CustLedgEntry.MODIFY;
              until CustLedgEntry.NEXT = 0;
          end;
        until Customer.NEXT = 0;

      Vendor.SETCURRENTKEY("No.");
      VendLedgEntry.LOCKTABLE;
      Vendor.LOCKTABLE;
      if Vendor.FIND('-')then
        repeat
          if not Vendor."Block Payment Tolerance" then begin
            VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
            VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
            VendLedgEntry.SETRANGE(Open,true);
            VendLedgEntry.SETFILTER("Document Type",'%1|%2',
              VendLedgEntry."Document Type"::Invoice,
              VendLedgEntry."Document Type"::"Credit Memo");

            if VendLedgEntry.FIND('-') then
              repeat
                if VendLedgEntry."Pmt. Discount Date" <> 0D then begin
                  if VendLedgEntry."Pmt. Disc. Tolerance Date" <>
                     VendLedgEntry."Document Date"
                  then
                    VendLedgEntry."Pmt. Disc. Tolerance Date" :=
                      CALCDATE(PmtTolGracePeriode,VendLedgEntry."Pmt. Discount Date")
                  else
                    VendLedgEntry."Pmt. Disc. Tolerance Date" :=
                      VendLedgEntry."Pmt. Discount Date";
                end else
                  VendLedgEntry."Pmt. Disc. Tolerance Date" := 0D;
                VendLedgEntry.MODIFY;
              until VendLedgEntry.NEXT = 0;
          end;
        until Vendor.NEXT = 0;
    END;

    [External]
    PROCEDURE CalcTolCustLedgEntry@2(Customer@1000 : Record Customer);
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
      Currency@1003 : Record Currency;
      CustLedgEntry@1002 : Record "Cust. Ledger Entry";
    BEGIN
      GLSetup.GET;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
      CustLedgEntry.SETRANGE("Customer No.",Customer."No.");
      CustLedgEntry.SETRANGE(Open,true);
      CustLedgEntry.LOCKTABLE;
      if not CustLedgEntry.FIND('-') then
        exit;
      repeat
        if (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::Invoice) or
           (CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo")
        then begin
          CustLedgEntry.CALCFIELDS(Amount,"Amount (LCY)");
          if CustLedgEntry."Pmt. Discount Date" >= CustLedgEntry."Posting Date" then
            CustLedgEntry."Pmt. Disc. Tolerance Date" :=
              CALCDATE(GLSetup."Payment Discount Grace Period",CustLedgEntry."Pmt. Discount Date");
          if CustLedgEntry."Currency Code" = '' then begin
            if (GLSetup."Max. Payment Tolerance Amount" <
                ABS(GLSetup."Payment Tolerance %" / 100 * CustLedgEntry."Amount (LCY)")) or (GLSetup."Payment Tolerance %" = 0)
            then begin
              if (GLSetup."Max. Payment Tolerance Amount" = 0) and (GLSetup."Payment Tolerance %" > 0) then
                CustLedgEntry."Max. Payment Tolerance" :=
                  GLSetup."Payment Tolerance %" * CustLedgEntry."Amount (LCY)" / 100
              else
                if CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo" then
                  CustLedgEntry."Max. Payment Tolerance" := -GLSetup."Max. Payment Tolerance Amount"
                else
                  CustLedgEntry."Max. Payment Tolerance" := GLSetup."Max. Payment Tolerance Amount"
            end else
              CustLedgEntry."Max. Payment Tolerance" :=
                GLSetup."Payment Tolerance %" * CustLedgEntry."Amount (LCY)" / 100
          end else begin
            Currency.GET(CustLedgEntry."Currency Code");
            if (Currency."Max. Payment Tolerance Amount" <
                ABS(Currency."Payment Tolerance %" / 100 * CustLedgEntry.Amount)) or (Currency."Payment Tolerance %" = 0)
            then begin
              if (Currency."Max. Payment Tolerance Amount" = 0) and (Currency."Payment Tolerance %" > 0) then
                CustLedgEntry."Max. Payment Tolerance" :=
                  ROUND(Currency."Payment Tolerance %" * CustLedgEntry.Amount / 100,Currency."Amount Rounding Precision")
              else
                if CustLedgEntry."Document Type" = CustLedgEntry."Document Type"::"Credit Memo" then
                  CustLedgEntry."Max. Payment Tolerance" := -Currency."Max. Payment Tolerance Amount"
                else
                  CustLedgEntry."Max. Payment Tolerance" := Currency."Max. Payment Tolerance Amount"
            end else
              CustLedgEntry."Max. Payment Tolerance" :=
                ROUND(Currency."Payment Tolerance %" * CustLedgEntry.Amount / 100,Currency."Amount Rounding Precision");
          end;
        end;
        if ABS(CustLedgEntry.Amount) < ABS(CustLedgEntry."Max. Payment Tolerance") then
          CustLedgEntry."Max. Payment Tolerance" := CustLedgEntry.Amount;
        CustLedgEntry.MODIFY;
      until CustLedgEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DelTolCustLedgEntry@3(Customer@1000 : Record Customer);
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
      CustLedgEntry@1002 : Record "Cust. Ledger Entry";
    BEGIN
      GLSetup.GET;
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open);
      CustLedgEntry.SETRANGE("Customer No.",Customer."No.");
      CustLedgEntry.SETRANGE(Open,true);
      CustLedgEntry.LOCKTABLE;
      if not CustLedgEntry.FIND('-') then
        exit;
      repeat
        CustLedgEntry."Pmt. Disc. Tolerance Date" := 0D;
        CustLedgEntry."Max. Payment Tolerance" := 0;
        CustLedgEntry.MODIFY;
      until CustLedgEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CalcTolVendLedgEntry@5(Vendor@1000 : Record Vendor);
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
      Currency@1003 : Record Currency;
      VendLedgEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      GLSetup.GET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,true);
      VendLedgEntry.LOCKTABLE;
      if not VendLedgEntry.FIND('-') then
        exit;
      repeat
        if (VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice) or
           (VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo")
        then begin
          VendLedgEntry.CALCFIELDS(Amount,"Amount (LCY)");
          if VendLedgEntry."Pmt. Discount Date" >= VendLedgEntry."Posting Date" then
            VendLedgEntry."Pmt. Disc. Tolerance Date" :=
              CALCDATE(GLSetup."Payment Discount Grace Period",VendLedgEntry."Pmt. Discount Date");
          if VendLedgEntry."Currency Code" = '' then begin
            if (GLSetup."Max. Payment Tolerance Amount" <
                ABS(GLSetup."Payment Tolerance %" / 100 * VendLedgEntry."Amount (LCY)")) or (GLSetup."Payment Tolerance %" = 0)
            then begin
              if (GLSetup."Max. Payment Tolerance Amount" = 0) and (GLSetup."Payment Tolerance %" > 0) then
                VendLedgEntry."Max. Payment Tolerance" :=
                  GLSetup."Payment Tolerance %" * VendLedgEntry."Amount (LCY)" / 100
              else
                if VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" then
                  VendLedgEntry."Max. Payment Tolerance" := GLSetup."Max. Payment Tolerance Amount"
                else
                  VendLedgEntry."Max. Payment Tolerance" := -GLSetup."Max. Payment Tolerance Amount"
            end else
              VendLedgEntry."Max. Payment Tolerance" :=
                GLSetup."Payment Tolerance %" * VendLedgEntry."Amount (LCY)" / 100
          end else begin
            Currency.GET(VendLedgEntry."Currency Code");
            if (Currency."Max. Payment Tolerance Amount" <
                ABS(Currency."Payment Tolerance %" / 100 * VendLedgEntry.Amount)) or (Currency."Payment Tolerance %" = 0)
            then begin
              if (Currency."Max. Payment Tolerance Amount" = 0) and (Currency."Payment Tolerance %" > 0) then
                VendLedgEntry."Max. Payment Tolerance" :=
                  ROUND(Currency."Payment Tolerance %" * VendLedgEntry.Amount / 100,Currency."Amount Rounding Precision")
              else
                if VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo" then
                  VendLedgEntry."Max. Payment Tolerance" := Currency."Max. Payment Tolerance Amount"
                else
                  VendLedgEntry."Max. Payment Tolerance" := -Currency."Max. Payment Tolerance Amount"
            end else
              VendLedgEntry."Max. Payment Tolerance" :=
                ROUND(Currency."Payment Tolerance %" * VendLedgEntry.Amount / 100,Currency."Amount Rounding Precision");
          end;
        end;
        if ABS(VendLedgEntry.Amount) < ABS(VendLedgEntry."Max. Payment Tolerance") then
          VendLedgEntry."Max. Payment Tolerance" := VendLedgEntry.Amount;
        VendLedgEntry.MODIFY;
      until VendLedgEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DelTolVendLedgEntry@4(Vendor@1000 : Record Vendor);
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
      VendLedgEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      GLSetup.GET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open);
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,true);
      VendLedgEntry.LOCKTABLE;
      if not VendLedgEntry.FIND('-') then
        exit;
      repeat
        VendLedgEntry."Pmt. Disc. Tolerance Date" := 0D;
        VendLedgEntry."Max. Payment Tolerance" := 0;
        VendLedgEntry.MODIFY;
      until VendLedgEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE DelPmtTolApllnDocNo@20(GenJnlLine@1000 : Record "Gen. Journal Line";DocumentNo@1004 : Code[20]);
    VAR
      AppliedCustLedgEntry@1001 : Record "Cust. Ledger Entry";
      AppliedVendLedgEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      if (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer) or
         (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor)
      then
        CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);

      if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Customer then begin
        AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        AppliedCustLedgEntry.SETRANGE("Customer No.",GenJnlLine."Account No.");
        AppliedCustLedgEntry.SETRANGE(Open,true);
        AppliedCustLedgEntry.SETRANGE("Document No.",DocumentNo);
        AppliedCustLedgEntry.LOCKTABLE;
        if AppliedCustLedgEntry.FINDSET then begin
          repeat
            AppliedCustLedgEntry."Accepted Payment Tolerance" := 0;
            AppliedCustLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
            AppliedCustLedgEntry.MODIFY;
          until AppliedCustLedgEntry.NEXT = 0;
          COMMIT;
        end;
      end else
        if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Vendor then begin
          AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
          AppliedVendLedgEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
          AppliedVendLedgEntry.SETRANGE(Open,true);
          AppliedVendLedgEntry.SETRANGE("Document No.",DocumentNo);
          AppliedVendLedgEntry.LOCKTABLE;
          if AppliedVendLedgEntry.FINDSET then begin
            repeat
              AppliedVendLedgEntry."Accepted Payment Tolerance" := 0;
              AppliedVendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
              AppliedVendLedgEntry.MODIFY;
            until AppliedVendLedgEntry.NEXT = 0;
            COMMIT;
          end;
        end;
    END;

    LOCAL PROCEDURE ABSMinTol@21(Decimal1@1000 : Decimal;Decimal2@1001 : Decimal;Decimal1Tolerance@1002 : Decimal) : Decimal;
    BEGIN
      if ABS(Decimal1) - ABS(Decimal1Tolerance) < ABS(Decimal2) then
        exit(Decimal1);
      exit(Decimal2);
    END;

    LOCAL PROCEDURE DelCustPmtTolAcc2@22(CustledgEntry@1001 : Record "Cust. Ledger Entry";CustEntryApplID@1000 : Code[50]);
    VAR
      AppliedCustLedgEntry@1002 : Record "Cust. Ledger Entry";
    BEGIN
      if CustEntryApplID <> '' then begin
        AppliedCustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
        AppliedCustLedgEntry.SETRANGE("Customer No.",CustledgEntry."Customer No.");
        AppliedCustLedgEntry.SETRANGE(Open,true);
        AppliedCustLedgEntry.SETRANGE("Applies-to ID",CustEntryApplID);
        if CustledgEntry."Document Type" = CustledgEntry."Document Type"::Payment then
          AppliedCustLedgEntry.SETRANGE("Document Type",AppliedCustLedgEntry."Document Type"::Invoice);
        if CustledgEntry."Document Type" = CustledgEntry."Document Type"::Refund then
          AppliedCustLedgEntry.SETRANGE("Document Type",AppliedCustLedgEntry."Document Type"::"Credit Memo");

        AppliedCustLedgEntry.LOCKTABLE;

        if AppliedCustLedgEntry.FINDLAST then begin
          AppliedCustLedgEntry."Accepted Payment Tolerance" := 0;
          AppliedCustLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
          AppliedCustLedgEntry.MODIFY;
          COMMIT;
        end;
      end;
    END;

    LOCAL PROCEDURE DelVendPmtTolAcc2@23(VendLedgEntry@1001 : Record "Vendor Ledger Entry";VendEntryApplID@1000 : Code[50]);
    VAR
      AppliedVendLedgEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      if VendEntryApplID <> '' then begin
        AppliedVendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
        AppliedVendLedgEntry.SETRANGE("Vendor No.",VendLedgEntry."Vendor No.");
        AppliedVendLedgEntry.SETRANGE(Open,true);
        AppliedVendLedgEntry.SETRANGE("Applies-to ID",VendEntryApplID);
        if VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Payment then
          AppliedVendLedgEntry.SETRANGE("Document Type",AppliedVendLedgEntry."Document Type"::Invoice);
        if VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Refund then
          AppliedVendLedgEntry.SETRANGE("Document Type",AppliedVendLedgEntry."Document Type"::"Credit Memo");

        AppliedVendLedgEntry.LOCKTABLE;

        if AppliedVendLedgEntry.FINDLAST then begin
          AppliedVendLedgEntry."Accepted Payment Tolerance" := 0;
          AppliedVendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
          AppliedVendLedgEntry.MODIFY;
          COMMIT;
        end;
      end;
    END;

    LOCAL PROCEDURE GetCustApplicationRoundingPrecisionForAppliesToID@24(VAR AppliedCustLedgEntry@1001 : Record "Cust. Ledger Entry";VAR ApplnRoundingPrecision@1004 : Decimal;VAR AmountRoundingPrecision@1003 : Decimal;VAR ApplnInMultiCurrency@1002 : Boolean;ApplnCurrencyCode@1000 : Code[20]);
    BEGIN
      AppliedCustLedgEntry.SETFILTER("Currency Code",'<>%1',ApplnCurrencyCode);
      ApplnInMultiCurrency := not AppliedCustLedgEntry.ISEMPTY;
      AppliedCustLedgEntry.SETRANGE("Currency Code");

      GetAmountRoundingPrecision(ApplnRoundingPrecision,AmountRoundingPrecision,ApplnInMultiCurrency,ApplnCurrencyCode);
    END;

    LOCAL PROCEDURE GetVendApplicationRoundingPrecisionForAppliesToID@28(VAR AppliedVendLedgEntry@1001 : Record "Vendor Ledger Entry";VAR ApplnRoundingPrecision@1004 : Decimal;VAR AmountRoundingPrecision@1003 : Decimal;VAR ApplnInMultiCurrency@1002 : Boolean;ApplnCurrencyCode@1000 : Code[20]);
    BEGIN
      AppliedVendLedgEntry.SETFILTER("Currency Code",'<>%1',ApplnCurrencyCode);
      ApplnInMultiCurrency := not AppliedVendLedgEntry.ISEMPTY;
      AppliedVendLedgEntry.SETRANGE("Currency Code");

      GetAmountRoundingPrecision(ApplnRoundingPrecision,AmountRoundingPrecision,ApplnInMultiCurrency,ApplnCurrencyCode);
    END;

    LOCAL PROCEDURE GetApplicationRoundingPrecisionForAppliesToDoc@31(AppliedEntryCurrencyCode@1001 : Code[10];VAR ApplnRoundingPrecision@1004 : Decimal;VAR AmountRoundingPrecision@1003 : Decimal;ApplnCurrencyCode@1000 : Code[20]);
    VAR
      Currency@1002 : Record Currency;
    BEGIN
      if ApplnCurrencyCode = '' then begin
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
        if AppliedEntryCurrencyCode = '' then
          ApplnRoundingPrecision := 0;
      end else begin
        if ApplnCurrencyCode <> AppliedEntryCurrencyCode then begin
          Currency.GET(ApplnCurrencyCode);
          ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
        end else
          ApplnRoundingPrecision := 0;
      end;
      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    LOCAL PROCEDURE UpdateCustAmountsForApplication@25(VAR AppliedCustLedgEntry@1008 : Record "Cust. Ledger Entry";VAR CustLedgEntry@1009 : Record "Cust. Ledger Entry";VAR TempAppliedCustLedgEntry@1000 : TEMPORARY Record "Cust. Ledger Entry");
    BEGIN
      AppliedCustLedgEntry.CALCFIELDS("Remaining Amount");
      TempAppliedCustLedgEntry := AppliedCustLedgEntry;
      if not ApplyingPostedEntries then
        if CustLedgEntry."Currency Code" <> AppliedCustLedgEntry."Currency Code" then begin
          AppliedCustLedgEntry."Remaining Amount" :=
            CurrExchRate.ExchangeAmount(
              AppliedCustLedgEntry."Remaining Amount",AppliedCustLedgEntry."Currency Code",
              CustLedgEntry."Currency Code",CustLedgEntry."Posting Date");
          AppliedCustLedgEntry."Remaining Pmt. Disc. Possible" :=
            CurrExchRate.ExchangeAmount(
              AppliedCustLedgEntry."Remaining Pmt. Disc. Possible",
              AppliedCustLedgEntry."Currency Code",
              CustLedgEntry."Currency Code",CustLedgEntry."Posting Date");
          AppliedCustLedgEntry."Max. Payment Tolerance" :=
            CurrExchRate.ExchangeAmount(
              AppliedCustLedgEntry."Max. Payment Tolerance",
              AppliedCustLedgEntry."Currency Code",
              CustLedgEntry."Currency Code",CustLedgEntry."Posting Date");
          AppliedCustLedgEntry."Amount to Apply" :=
            CurrExchRate.ExchangeAmount(
              AppliedCustLedgEntry."Amount to Apply",
              AppliedCustLedgEntry."Currency Code",
              CustLedgEntry."Currency Code",CustLedgEntry."Posting Date");
        end;
    END;

    LOCAL PROCEDURE UpdateVendAmountsForApplication@32(VAR AppliedVendLedgEntry@1008 : Record "Vendor Ledger Entry";VAR VendLedgEntry@1009 : Record "Vendor Ledger Entry";VAR TempAppliedVendLedgEntry@1000 : TEMPORARY Record "Vendor Ledger Entry");
    BEGIN
      AppliedVendLedgEntry.CALCFIELDS("Remaining Amount");
      TempAppliedVendLedgEntry := AppliedVendLedgEntry;
      if not ApplyingPostedEntries then
        if VendLedgEntry."Currency Code" <> AppliedVendLedgEntry."Currency Code" then begin
          AppliedVendLedgEntry."Remaining Amount" :=
            CurrExchRate.ExchangeAmount(
              AppliedVendLedgEntry."Remaining Amount",AppliedVendLedgEntry."Currency Code",
              VendLedgEntry."Currency Code",VendLedgEntry."Posting Date");
          AppliedVendLedgEntry."Remaining Pmt. Disc. Possible" :=
            CurrExchRate.ExchangeAmount(
              AppliedVendLedgEntry."Remaining Pmt. Disc. Possible",
              AppliedVendLedgEntry."Currency Code",
              VendLedgEntry."Currency Code",VendLedgEntry."Posting Date");
          AppliedVendLedgEntry."Max. Payment Tolerance" :=
            CurrExchRate.ExchangeAmount(
              AppliedVendLedgEntry."Max. Payment Tolerance",
              AppliedVendLedgEntry."Currency Code",
              VendLedgEntry."Currency Code",VendLedgEntry."Posting Date");
          AppliedVendLedgEntry."Amount to Apply" :=
            CurrExchRate.ExchangeAmount(
              AppliedVendLedgEntry."Amount to Apply",
              AppliedVendLedgEntry."Currency Code",
              VendLedgEntry."Currency Code",VendLedgEntry."Posting Date");
        end;
    END;

    LOCAL PROCEDURE GetCustPositiveFilter@29(DocumentType@1002 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';TempAmount@1000 : Decimal) PositiveFilter : Boolean;
    BEGIN
      PositiveFilter := TempAmount <= 0;
      if ((TempAmount > 0) and (DocumentType = DocumentType::Refund) or (DocumentType = DocumentType::Invoice) or
          (DocumentType = DocumentType::"Credit Memo"))
      then
        PositiveFilter := true;
      exit(PositiveFilter);
    END;

    LOCAL PROCEDURE GetVendPositiveFilter@43(DocumentType@1002 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';TempAmount@1000 : Decimal) PositiveFilter : Boolean;
    BEGIN
      PositiveFilter := TempAmount >= 0;
      if ((TempAmount < 0) and (DocumentType = DocumentType::Refund) or (DocumentType = DocumentType::Invoice) or
          (DocumentType = DocumentType::"Credit Memo"))
      then
        PositiveFilter := true;
      exit(PositiveFilter);
    END;

    LOCAL PROCEDURE CheckCustPaymentAmountsForAppliesToID@26(CustLedgEntry@1000 : Record "Cust. Ledger Entry";VAR AppliedCustLedgEntry@1001 : Record "Cust. Ledger Entry";VAR TempAppliedCustLedgEntry@1007 : TEMPORARY Record "Cust. Ledger Entry";VAR MaxPmtTolAmount@1002 : Decimal;VAR AvailableAmount@1003 : Decimal;VAR TempAmount@1004 : Decimal;ApplnRoundingPrecision@1005 : Decimal);
    BEGIN
      // Check Payment Tolerance
      if CheckPmtTolCust(CustLedgEntry."Document Type",AppliedCustLedgEntry) then
        MaxPmtTolAmount := MaxPmtTolAmount + AppliedCustLedgEntry."Max. Payment Tolerance";

      // Check Payment Discount
      if CheckCalcPmtDiscCust(CustLedgEntry,AppliedCustLedgEntry,0,false,false) then
        AppliedCustLedgEntry."Remaining Amount" :=
          AppliedCustLedgEntry."Remaining Amount" - AppliedCustLedgEntry."Remaining Pmt. Disc. Possible";

      // Check Payment Discount Tolerance
      if AppliedCustLedgEntry."Amount to Apply" = AppliedCustLedgEntry."Remaining Amount" then
        AvailableAmount := TempAmount
      else
        AvailableAmount := -AppliedCustLedgEntry."Amount to Apply";
      if CheckPmtDiscTolCust(
           CustLedgEntry."Posting Date",CustLedgEntry."Document Type",AvailableAmount,AppliedCustLedgEntry,ApplnRoundingPrecision,
           MaxPmtTolAmount)
      then begin
        AppliedCustLedgEntry."Remaining Amount" :=
          AppliedCustLedgEntry."Remaining Amount" - AppliedCustLedgEntry."Remaining Pmt. Disc. Possible";
        AppliedCustLedgEntry."Accepted Pmt. Disc. Tolerance" := true;
        if CustLedgEntry."Currency Code" <> AppliedCustLedgEntry."Currency Code" then begin
          AppliedCustLedgEntry."Remaining Pmt. Disc. Possible" :=
            TempAppliedCustLedgEntry."Remaining Pmt. Disc. Possible";
          AppliedCustLedgEntry."Max. Payment Tolerance" :=
            TempAppliedCustLedgEntry."Max. Payment Tolerance";
        end;
        AppliedCustLedgEntry.MODIFY;
      end;
      TempAmount :=
        TempAmount +
        ABSMinTol(
          AppliedCustLedgEntry."Remaining Amount",
          AppliedCustLedgEntry."Amount to Apply",
          MaxPmtTolAmount);
    END;

    LOCAL PROCEDURE CheckVendPaymentAmountsForAppliesToID@30(VendLedgEntry@1000 : Record "Vendor Ledger Entry";VAR AppliedVendLedgEntry@1001 : Record "Vendor Ledger Entry";VAR TempAppliedVendLedgEntry@1007 : TEMPORARY Record "Vendor Ledger Entry";VAR MaxPmtTolAmount@1002 : Decimal;VAR AvailableAmount@1003 : Decimal;VAR TempAmount@1004 : Decimal;ApplnRoundingPrecision@1005 : Decimal);
    BEGIN
      // Check Payment Tolerance
      if CheckPmtTolVend(VendLedgEntry."Document Type",AppliedVendLedgEntry) then
        MaxPmtTolAmount := MaxPmtTolAmount + AppliedVendLedgEntry."Max. Payment Tolerance";

      // Check Payment Discount
      if CheckCalcPmtDiscVend(VendLedgEntry,AppliedVendLedgEntry,0,false,false) then
        AppliedVendLedgEntry."Remaining Amount" :=
          AppliedVendLedgEntry."Remaining Amount" - AppliedVendLedgEntry."Remaining Pmt. Disc. Possible";

      // Check Payment Discount Tolerance
      if AppliedVendLedgEntry."Amount to Apply" = AppliedVendLedgEntry."Remaining Amount" then
        AvailableAmount := TempAmount
      else
        AvailableAmount := -AppliedVendLedgEntry."Amount to Apply";
      if CheckPmtDiscTolVend(VendLedgEntry."Posting Date",VendLedgEntry."Document Type",AvailableAmount,
           AppliedVendLedgEntry,ApplnRoundingPrecision,MaxPmtTolAmount)
      then begin
        AppliedVendLedgEntry."Remaining Amount" :=
          AppliedVendLedgEntry."Remaining Amount" - AppliedVendLedgEntry."Remaining Pmt. Disc. Possible";
        AppliedVendLedgEntry."Accepted Pmt. Disc. Tolerance" := true;
        if VendLedgEntry."Currency Code" <> AppliedVendLedgEntry."Currency Code" then begin
          AppliedVendLedgEntry."Remaining Pmt. Disc. Possible" :=
            TempAppliedVendLedgEntry."Remaining Pmt. Disc. Possible";
          AppliedVendLedgEntry."Max. Payment Tolerance" :=
            TempAppliedVendLedgEntry."Max. Payment Tolerance";
        end;
        AppliedVendLedgEntry.MODIFY;
      end;
      TempAmount :=
        TempAmount +
        ABSMinTol(
          AppliedVendLedgEntry."Remaining Amount",
          AppliedVendLedgEntry."Amount to Apply",
          MaxPmtTolAmount);
    END;

    LOCAL PROCEDURE CheckCustPaymentAmountsForAppliesToDoc@38(CustLedgEntry@1000 : Record "Cust. Ledger Entry";VAR AppliedCustLedgEntry@1001 : Record "Cust. Ledger Entry";VAR TempAppliedCustLedgEntry@1003 : TEMPORARY Record "Cust. Ledger Entry";VAR MaxPmtTolAmount@1002 : Decimal;ApplnRoundingPrecision@1005 : Decimal;VAR PmtDiscAmount@1008 : Decimal;ApplnCurrencyCode@1009 : Code[20]);
    BEGIN
      // Check Payment Tolerance
      if CheckPmtTolCust(CustLedgEntry."Document Type",AppliedCustLedgEntry) and
         CheckCustLedgAmt(CustLedgEntry,AppliedCustLedgEntry,AppliedCustLedgEntry."Max. Payment Tolerance",ApplnRoundingPrecision)
      then
        MaxPmtTolAmount := MaxPmtTolAmount + AppliedCustLedgEntry."Max. Payment Tolerance";

      // Check Payment Discount
      if CheckCalcPmtDiscCust(CustLedgEntry,AppliedCustLedgEntry,0,false,false) and
         CheckCustLedgAmt(CustLedgEntry,AppliedCustLedgEntry,MaxPmtTolAmount,ApplnRoundingPrecision)
      then
        PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntry."Remaining Pmt. Disc. Possible";

      // Check Payment Discount Tolerance
      if CheckPmtDiscTolCust(
           CustLedgEntry."Posting Date",CustLedgEntry."Document Type",CustLedgEntry.Amount,AppliedCustLedgEntry,
           ApplnRoundingPrecision,MaxPmtTolAmount) and CheckCustLedgAmt(
           CustLedgEntry,AppliedCustLedgEntry,MaxPmtTolAmount,ApplnRoundingPrecision)
      then begin
        PmtDiscAmount := PmtDiscAmount + AppliedCustLedgEntry."Remaining Pmt. Disc. Possible";
        AppliedCustLedgEntry."Accepted Pmt. Disc. Tolerance" := true;
        if AppliedCustLedgEntry."Currency Code" <> ApplnCurrencyCode then begin
          AppliedCustLedgEntry."Max. Payment Tolerance" :=
            TempAppliedCustLedgEntry."Max. Payment Tolerance";
          AppliedCustLedgEntry."Remaining Pmt. Disc. Possible" :=
            TempAppliedCustLedgEntry."Remaining Pmt. Disc. Possible";
        end;
        AppliedCustLedgEntry.MODIFY;
        COMMIT;
      end;
    END;

    LOCAL PROCEDURE CheckVendPaymentAmountsForAppliesToDoc@35(VendLedgEntry@1000 : Record "Vendor Ledger Entry";VAR AppliedVendLedgEntry@1001 : Record "Vendor Ledger Entry";VAR TempAppliedVendLedgEntry@1003 : TEMPORARY Record "Vendor Ledger Entry";VAR MaxPmtTolAmount@1002 : Decimal;ApplnRoundingPrecision@1005 : Decimal;VAR PmtDiscAmount@1008 : Decimal);
    BEGIN
      // Check Payment Tolerance
      if CheckPmtTolVend(VendLedgEntry."Document Type",AppliedVendLedgEntry) and
         CheckVendLedgAmt(VendLedgEntry,AppliedVendLedgEntry,AppliedVendLedgEntry."Max. Payment Tolerance",ApplnRoundingPrecision)
      then
        MaxPmtTolAmount := MaxPmtTolAmount + AppliedVendLedgEntry."Max. Payment Tolerance";

      // Check Payment Discount
      if CheckCalcPmtDiscVend(
           VendLedgEntry,AppliedVendLedgEntry,0,false,false) and
         CheckVendLedgAmt(VendLedgEntry,AppliedVendLedgEntry,MaxPmtTolAmount,ApplnRoundingPrecision)
      then
        PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntry."Remaining Pmt. Disc. Possible";

      // Check Payment Discount Tolerance
      if CheckPmtDiscTolVend(
           VendLedgEntry."Posting Date",VendLedgEntry."Document Type",VendLedgEntry.Amount,
           AppliedVendLedgEntry,ApplnRoundingPrecision,MaxPmtTolAmount) and
         CheckVendLedgAmt(VendLedgEntry,AppliedVendLedgEntry,MaxPmtTolAmount,ApplnRoundingPrecision)
      then begin
        PmtDiscAmount := PmtDiscAmount + AppliedVendLedgEntry."Remaining Pmt. Disc. Possible";
        AppliedVendLedgEntry."Accepted Pmt. Disc. Tolerance" := true;
        if VendLedgEntry."Currency Code" <> AppliedVendLedgEntry."Currency Code" then begin
          AppliedVendLedgEntry."Remaining Pmt. Disc. Possible" := TempAppliedVendLedgEntry."Remaining Pmt. Disc. Possible";
          AppliedVendLedgEntry."Max. Payment Tolerance" := TempAppliedVendLedgEntry."Max. Payment Tolerance";
        end;
        AppliedVendLedgEntry.MODIFY;
        COMMIT;
      end;
    END;

    LOCAL PROCEDURE CheckCustLedgAmt@41(CustLedgEntry@1001 : Record "Cust. Ledger Entry";AppliedCustLedgEntry@1002 : Record "Cust. Ledger Entry";MaxPmtTolAmount@1000 : Decimal;ApplnRoundingPrecision@1003 : Decimal) : Boolean;
    BEGIN
      exit((ABS(CustLedgEntry.Amount) + ApplnRoundingPrecision >= ABS(AppliedCustLedgEntry."Remaining Amount" -
              AppliedCustLedgEntry."Remaining Pmt. Disc. Possible" - MaxPmtTolAmount)));
    END;

    LOCAL PROCEDURE CheckVendLedgAmt@42(VendLedgEntry@1004 : Record "Vendor Ledger Entry";AppliedVendLedgEntry@1003 : Record "Vendor Ledger Entry";MaxPmtTolAmount@1002 : Decimal;ApplnRoundingPrecision@1001 : Decimal) : Boolean;
    BEGIN
      exit((ABS(VendLedgEntry.Amount) + ApplnRoundingPrecision >= ABS(AppliedVendLedgEntry."Remaining Amount" -
              AppliedVendLedgEntry."Remaining Pmt. Disc. Possible" - MaxPmtTolAmount)));
    END;

    LOCAL PROCEDURE GetAmountRoundingPrecision@39(VAR ApplnRoundingPrecision@1003 : Decimal;VAR AmountRoundingPrecision@1002 : Decimal;ApplnInMultiCurrency@1001 : Boolean;ApplnCurrencyCode@1004 : Code[20]);
    VAR
      Currency@1000 : Record Currency;
    BEGIN
      if ApplnCurrencyCode = '' then begin
        Currency.INIT;
        Currency.Code := '';
        Currency.InitRoundingPrecision;
      end else begin
        if ApplnInMultiCurrency then
          Currency.GET(ApplnCurrencyCode)
        else
          Currency.INIT;
      end;
      ApplnRoundingPrecision := Currency."Appln. Rounding Precision";
      AmountRoundingPrecision := Currency."Amount Rounding Precision";
    END;

    [External]
    PROCEDURE ApplyPostedEntriesMode@47();
    BEGIN
      ApplyingPostedEntries := true;
    END;

    [External]
    PROCEDURE CalcRemainingPmtDisc@59(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf2@1002 : Record "CV Ledger Entry Buffer";GLSetup@1003 : Record "General Ledger Setup");
    BEGIN
      if ABS(NewCVLedgEntryBuf."Max. Payment Tolerance") > ABS(NewCVLedgEntryBuf."Remaining Amount") then
        NewCVLedgEntryBuf."Max. Payment Tolerance" := NewCVLedgEntryBuf."Remaining Amount";
      if (((NewCVLedgEntryBuf."Document Type" in [NewCVLedgEntryBuf."Document Type"::"Credit Memo",
                                                  NewCVLedgEntryBuf."Document Type"::Invoice]) and
           (OldCVLedgEntryBuf."Document Type" in [OldCVLedgEntryBuf."Document Type"::Invoice,
                                                  OldCVLedgEntryBuf."Document Type"::"Credit Memo"])) and
          ((OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0) and
           (NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0)) or
          ((OldCVLedgEntryBuf."Document Type" = OldCVLedgEntryBuf."Document Type"::"Credit Memo") and
           (OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" <> 0) and
           (NewCVLedgEntryBuf."Document Type" <> NewCVLedgEntryBuf."Document Type"::Refund)))
      then begin
        if OldCVLedgEntryBuf."Remaining Amount" <> 0 then
          OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" :=
            ROUND(OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" -
              (OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" *
               (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf."Remaining Amount") /
               OldCVLedgEntryBuf2."Remaining Amount"),GLSetup."Amount Rounding Precision");
        NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
          ROUND(NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" +
            (NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" *
             (OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf."Remaining Amount") /
             (NewCVLedgEntryBuf."Remaining Amount" -
              OldCVLedgEntryBuf2."Remaining Amount" + OldCVLedgEntryBuf."Remaining Amount")),
            GLSetup."Amount Rounding Precision");

        if NewCVLedgEntryBuf."Currency Code" = OldCVLedgEntryBuf2."Currency Code" then
          OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
            OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"
        else
          OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" :=
            OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible";
      end;

      if OldCVLedgEntryBuf."Document Type" in [OldCVLedgEntryBuf."Document Type"::Invoice,
                                               OldCVLedgEntryBuf."Document Type"::"Credit Memo"]
      then
        if ABS(OldCVLedgEntryBuf."Remaining Amount") < ABS(OldCVLedgEntryBuf."Max. Payment Tolerance") then
          OldCVLedgEntryBuf."Max. Payment Tolerance" := OldCVLedgEntryBuf."Remaining Amount";

      if not NewCVLedgEntryBuf.Open then begin
        NewCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0;
        NewCVLedgEntryBuf."Max. Payment Tolerance" := 0;
      end;

      if not OldCVLedgEntryBuf.Open then begin
        OldCVLedgEntryBuf."Remaining Pmt. Disc. Possible" := 0;
        OldCVLedgEntryBuf."Max. Payment Tolerance" := 0;
      end;
    END;

    [External]
    PROCEDURE CalcMaxPmtTolerance@40(DocumentType@1004 : '" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund';CurrencyCode@1000 : Code[10];Amount@1001 : Decimal;AmountLCY@1002 : Decimal;Sign@1005 : Decimal;VAR MaxPaymentTolerance@1003 : Decimal);
    VAR
      Currency@1010 : Record Currency;
      GLSetup@1011 : Record "General Ledger Setup";
      MaxPaymentToleranceAmount@1006 : Decimal;
      PaymentTolerancePct@1007 : Decimal;
      PaymentAmount@1009 : Decimal;
      AmountRoundingPrecision@1008 : Decimal;
    BEGIN
      if CurrencyCode = '' then begin
        GLSetup.GET;
        MaxPaymentToleranceAmount := GLSetup."Max. Payment Tolerance Amount";
        PaymentTolerancePct := GLSetup."Payment Tolerance %";
        AmountRoundingPrecision := GLSetup."Amount Rounding Precision";
        PaymentAmount := AmountLCY;
      end else begin
        Currency.GET(CurrencyCode);
        MaxPaymentToleranceAmount := Currency."Max. Payment Tolerance Amount";
        PaymentTolerancePct := Currency."Payment Tolerance %";
        AmountRoundingPrecision := Currency."Amount Rounding Precision";
        PaymentAmount := Amount;
      end;

      if (MaxPaymentToleranceAmount <
          ABS(PaymentTolerancePct / 100 * PaymentAmount)) or (PaymentTolerancePct = 0)
      then begin
        if (MaxPaymentToleranceAmount = 0) and (PaymentTolerancePct > 0) then
          MaxPaymentTolerance :=
            ROUND(PaymentTolerancePct * PaymentAmount / 100,AmountRoundingPrecision)
        else
          if DocumentType = DocumentType::"Credit Memo" then
            MaxPaymentTolerance := -MaxPaymentToleranceAmount * Sign
          else
            MaxPaymentTolerance := MaxPaymentToleranceAmount * Sign
      end else
        MaxPaymentTolerance :=
          ROUND(PaymentTolerancePct * PaymentAmount / 100,AmountRoundingPrecision);

      if ABS(MaxPaymentTolerance) > ABS(Amount) then
        MaxPaymentTolerance := Amount;
    END;

    [External]
    PROCEDURE CheckCalcPmtDisc@37(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCVLedgEntryBuf2@1002 : Record "CV Ledger Entry Buffer";ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1001 : Boolean;CheckAmount@1004 : Boolean) : Boolean;
    BEGIN
      if ((NewCVLedgEntryBuf."Document Type" in [NewCVLedgEntryBuf."Document Type"::Refund,
                                                 NewCVLedgEntryBuf."Document Type"::Payment]) and
          (((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::"Credit Memo") and
            (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) and
            (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date")) or
           ((OldCVLedgEntryBuf2."Document Type" = OldCVLedgEntryBuf2."Document Type"::Invoice) and
            (OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible" <> 0) and
            (NewCVLedgEntryBuf."Posting Date" <= OldCVLedgEntryBuf2."Pmt. Discount Date"))))
      then begin
        if CheckFilter then begin
          if CheckAmount then begin
            if (OldCVLedgEntryBuf2.GETFILTER(Positive) <> '') or
               (ABS(NewCVLedgEntryBuf."Remaining Amount") + ApplnRoundingPrecision >=
                ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible"))
            then
              exit(true);

            exit(false);
          end;

          exit(OldCVLedgEntryBuf2.GETFILTER(Positive) <> '');
        end;
        if CheckAmount then
          exit((ABS(NewCVLedgEntryBuf."Remaining Amount") + ApplnRoundingPrecision >=
                ABS(OldCVLedgEntryBuf2."Remaining Amount" - OldCVLedgEntryBuf2."Remaining Pmt. Disc. Possible")));

        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE CheckCalcPmtDiscCVCust@34(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldCustLedgEntry2@1002 : Record "Cust. Ledger Entry";ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1001 : Boolean) : Boolean;
    VAR
      OldCVLedgEntryBuf2@1004 : Record "CV Ledger Entry Buffer";
    BEGIN
      OldCustLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      OldCVLedgEntryBuf2.CopyFromCustLedgEntry(OldCustLedgEntry2);
      exit(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    [External]
    PROCEDURE CheckCalcPmtDiscCust@33(VAR NewCustLedgEntry@1000 : Record "Cust. Ledger Entry";VAR OldCustLedgEntry2@1002 : Record "Cust. Ledger Entry";ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1006 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";
      OldCVLedgEntryBuf2@1004 : Record "CV Ledger Entry Buffer";
    BEGIN
      NewCVLedgEntryBuf.CopyFromCustLedgEntry(NewCustLedgEntry);
      OldCustLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      OldCVLedgEntryBuf2.CopyFromCustLedgEntry(OldCustLedgEntry2);
      exit(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    [External]
    PROCEDURE CheckCalcPmtDiscGenJnlCust@36(GenJnlLine@1000 : Record "Gen. Journal Line";OldCustLedgEntry2@1002 : Record "Cust. Ledger Entry";ApplnRoundingPrecision@1004 : Decimal;CheckAmount@1005 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";
      OldCVLedgEntryBuf2@1003 : Record "CV Ledger Entry Buffer";
    BEGIN
      NewCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      NewCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      NewCVLedgEntryBuf."Remaining Amount" := GenJnlLine.Amount;
      OldCVLedgEntryBuf2.CopyFromCustLedgEntry(OldCustLedgEntry2);
      exit(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,false,CheckAmount));
    END;

    [External]
    PROCEDURE CheckCalcPmtDiscCVVend@57(VAR NewCVLedgEntryBuf@1000 : Record "CV Ledger Entry Buffer";VAR OldVendLedgEntry2@1002 : Record "Vendor Ledger Entry";ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1005 : Boolean;CheckAmount@1001 : Boolean) : Boolean;
    VAR
      OldCVLedgEntryBuf2@1004 : Record "CV Ledger Entry Buffer";
    BEGIN
      OldVendLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      OldCVLedgEntryBuf2.CopyFromVendLedgEntry(OldVendLedgEntry2);
      exit(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    [External]
    PROCEDURE CheckCalcPmtDiscVend@56(VAR NewVendLedgEntry@1000 : Record "Vendor Ledger Entry";VAR OldVendLedgEntry2@1002 : Record "Vendor Ledger Entry";ApplnRoundingPrecision@1003 : Decimal;CheckFilter@1006 : Boolean;CheckAmount@1005 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";
      OldCVLedgEntryBuf2@1004 : Record "CV Ledger Entry Buffer";
    BEGIN
      NewCVLedgEntryBuf.CopyFromVendLedgEntry(NewVendLedgEntry);
      OldVendLedgEntry2.COPYFILTER(Positive,OldCVLedgEntryBuf2.Positive);
      OldCVLedgEntryBuf2.CopyFromVendLedgEntry(OldVendLedgEntry2);
      exit(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,CheckFilter,CheckAmount));
    END;

    [External]
    PROCEDURE CheckCalcPmtDiscGenJnlVend@58(GenJnlLine@1000 : Record "Gen. Journal Line";OldVendLedgEntry2@1002 : Record "Vendor Ledger Entry";ApplnRoundingPrecision@1005 : Decimal;CheckAmount@1004 : Boolean) : Boolean;
    VAR
      NewCVLedgEntryBuf@1001 : Record "CV Ledger Entry Buffer";
      OldCVLedgEntryBuf2@1003 : Record "CV Ledger Entry Buffer";
    BEGIN
      NewCVLedgEntryBuf."Document Type" := GenJnlLine."Document Type";
      NewCVLedgEntryBuf."Posting Date" := GenJnlLine."Posting Date";
      NewCVLedgEntryBuf."Remaining Amount" := GenJnlLine.Amount;
      OldCVLedgEntryBuf2.CopyFromVendLedgEntry(OldVendLedgEntry2);
      exit(
        CheckCalcPmtDisc(
          NewCVLedgEntryBuf,OldCVLedgEntryBuf2,ApplnRoundingPrecision,false,CheckAmount));
    END;

    LOCAL PROCEDURE ManagePaymentDiscToleranceWarningCustomer@48(VAR NewCustLedgEntry@1011 : Record "Cust. Ledger Entry";GenJnlLineApplID@1009 : Code[50];VAR AppliedAmount@1008 : Decimal;VAR AmountToApply@1007 : Decimal;AppliesToDocNo@1005 : Code[20]) : Boolean;
    VAR
      AppliedCustLedgEntry@1001 : Record "Cust. Ledger Entry";
      RemainingAmountTest@1000 : Boolean;
    BEGIN
      with AppliedCustLedgEntry do begin
        SETCURRENTKEY("Customer No.","Applies-to ID",Open,Positive);
        SETRANGE("Customer No.",NewCustLedgEntry."Customer No.");
        if AppliesToDocNo <> '' then
          SETRANGE("Document No.",AppliesToDocNo)
        else
          SETRANGE("Applies-to ID",GenJnlLineApplID);
        SETRANGE(Open,true);
        SETRANGE("Accepted Pmt. Disc. Tolerance",true);
        if FINDSET then
          repeat
            CALCFIELDS("Remaining Amount");
            if CallPmtDiscTolWarning(
                 "Posting Date","Customer No.",
                 "Document No.","Currency Code",
                 "Remaining Amount",0,
                 "Remaining Pmt. Disc. Possible",RemainingAmountTest)
            then begin
              if RemainingAmountTest then begin
                "Accepted Pmt. Disc. Tolerance" := false;
                "Amount to Apply" := "Remaining Amount";
                MODIFY;
                COMMIT;
                if NewCustLedgEntry."Currency Code" <> "Currency Code" then
                  "Remaining Pmt. Disc. Possible" :=
                    CurrExchRate.ExchangeAmount(
                      "Remaining Pmt. Disc. Possible",
                      "Currency Code",
                      NewCustLedgEntry."Currency Code",
                      NewCustLedgEntry."Posting Date");
                AppliedAmount := AppliedAmount + "Remaining Pmt. Disc. Possible";
                AmountToApply := AmountToApply + "Remaining Pmt. Disc. Possible";
              end
            end else begin
              DelCustPmtTolAcc(NewCustLedgEntry,GenJnlLineApplID);
              exit(false);
            end;
          until NEXT = 0;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE ManagePaymentDiscToleranceWarningVendor@50(VAR NewVendLedgEntry@1010 : Record "Vendor Ledger Entry";GenJnlLineApplID@1009 : Code[50];VAR AppliedAmount@1008 : Decimal;VAR AmountToApply@1007 : Decimal;AppliesToDocNo@1005 : Code[20]) : Boolean;
    VAR
      AppliedVendLedgEntry@1001 : Record "Vendor Ledger Entry";
      RemainingAmountTest@1000 : Boolean;
    BEGIN
      with AppliedVendLedgEntry do begin
        SETCURRENTKEY("Vendor No.","Applies-to ID",Open,Positive);
        SETRANGE("Vendor No.",NewVendLedgEntry."Vendor No.");
        if AppliesToDocNo <> '' then
          SETRANGE("Document No.",AppliesToDocNo)
        else
          SETRANGE("Applies-to ID",GenJnlLineApplID);
        SETRANGE(Open,true);
        SETRANGE("Accepted Pmt. Disc. Tolerance",true);
        if FINDSET then
          repeat
            CALCFIELDS("Remaining Amount");
            if CallPmtDiscTolWarning(
                 "Posting Date","Vendor No.",
                 "Document No.","Currency Code",
                 "Remaining Amount",0,
                 "Remaining Pmt. Disc. Possible",RemainingAmountTest)
            then begin
              if RemainingAmountTest then begin
                "Accepted Pmt. Disc. Tolerance" := false;
                "Amount to Apply" := "Remaining Amount";
                MODIFY;
                COMMIT;
                if NewVendLedgEntry."Currency Code" <> "Currency Code" then
                  "Remaining Pmt. Disc. Possible" :=
                    CurrExchRate.ExchangeAmount(
                      "Remaining Pmt. Disc. Possible",
                      "Currency Code",
                      NewVendLedgEntry."Currency Code",NewVendLedgEntry."Posting Date");
                AppliedAmount := AppliedAmount + "Remaining Pmt. Disc. Possible";
                AmountToApply := AmountToApply + "Remaining Pmt. Disc. Possible";
              end
            end else begin
              DelVendPmtTolAcc(NewVendLedgEntry,GenJnlLineApplID);
              exit(false);
            end;
          until NEXT = 0;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE IsCustBlockPmtToleranceInGenJnlLine@52(VAR GenJnlLine@1000 : Record "Gen. Journal Line") : Boolean;
    BEGIN
      CheckAccountType(GenJnlLine,GenJnlLine."Account Type"::Customer);

      if GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Customer then
        CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);

      exit(IsCustBlockPmtTolerance(GenJnlLine."Account No."));
    END;

    LOCAL PROCEDURE IsVendBlockPmtToleranceInGenJnlLine@54(VAR GenJnlLine@1000 : Record "Gen. Journal Line") : Boolean;
    BEGIN
      CheckAccountType(GenJnlLine,GenJnlLine."Account Type"::Vendor);

      if GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::Vendor then
        CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",GenJnlLine);

      exit(IsVendBlockPmtTolerance(GenJnlLine."Account No."));
    END;

    LOCAL PROCEDURE IsCustBlockPmtTolerance@61(AccountNo@1001 : Code[20]) : Boolean;
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if not Customer.GET(AccountNo) then
        exit(false);
      if Customer."Block Payment Tolerance" then
        exit(false);
    END;

    LOCAL PROCEDURE IsVendBlockPmtTolerance@62(AccountNo@1001 : Code[20]) : Boolean;
    VAR
      Vendor@1000 : Record Vendor;
    BEGIN
      if not Vendor.GET(AccountNo) then
        exit(false);
      if Vendor."Block Payment Tolerance" then
        exit(false);
    END;

    LOCAL PROCEDURE CheckAccountType@68(GenJnlLine@1000 : Record "Gen. Journal Line";AccountType@1001 : Option);
    VAR
      DummyGenJnlLine@1002 : Record "Gen. Journal Line";
    BEGIN
      DummyGenJnlLine."Account Type" := AccountType;
      if not (AccountType in [GenJnlLine."Account Type",GenJnlLine."Bal. Account Type"]) then
        ERROR(AccTypeOrBalAccTypeIsIncorrectErr,DummyGenJnlLine."Account Type");
    END;

    LOCAL PROCEDURE GetAppliesToID@64(GenJnlLine@1000 : Record "Gen. Journal Line") : Code[50];
    BEGIN
      if GenJnlLine."Applies-to Doc. No." = '' then
        if GenJnlLine."Applies-to ID" <> '' then
          exit(GenJnlLine."Applies-to ID");
    END;

    BEGIN
    END.
  }
}

