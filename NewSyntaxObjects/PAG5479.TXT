OBJECT Page 5479 Customer Payments Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=customerPayments];
    SourceTable="Gen. Journal Line";
    DelayedInsert=true;
    PageType=ListPart;
    OnOpenPage=BEGIN
                 GraphMgtCustomerPayments.SetCustomerPaymentsFilters(Rec);
               END;

    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  CheckFilters;

                  ClearCalculatedFields;

                  "Document Type" := "Document Type"::Payment;
                  "Account Type" := "Account Type"::Customer;
                  "Applies-to Doc. Type" := "Applies-to Doc. Type"::Invoice;
                END;

    OnInsertRecord=VAR
                     TempGenJournalLine@1002 : TEMPORARY Record "Gen. Journal Line";
                   BEGIN
                     ProcessAppliesToInvoiceNumberAndId;

                     TempGenJournalLine.RESET;
                     TempGenJournalLine.COPY(Rec);

                     CLEAR(Rec);
                     GraphMgtCustomerPayments.SetCustomerPaymentsTemplateAndBatch(
                       Rec,LibraryAPIGeneralJournal.GetBatchNameFromId(TempGenJournalLine.GETFILTER("Journal Batch Id")));
                     LibraryAPIGeneralJournal.InitializeLine(
                       Rec,TempGenJournalLine."Line No.",TempGenJournalLine."Document No.",TempGenJournalLine."External Document No.");
                     TransferGeneratedFieldsFromInitializeLine(TempGenJournalLine);

                     GraphMgtCustomerPayments.SetCustomerPaymentsValues(Rec,TempGenJournalLine);

                     SetCalculatedFields;
                   END;

    OnModifyRecord=VAR
                     GenJournalLine@1000 : Record "Gen. Journal Line";
                   BEGIN
                     ProcessAppliesToInvoiceNumberAndId;

                     GenJournalLine.SETRANGE(Id,Id);
                     GenJournalLine.FINDFIRST;

                     if "Line No." = GenJournalLine."Line No." then
                       MODIFY(true)
                     else begin
                       GenJournalLine.TRANSFERFIELDS(Rec,false);
                       GenJournalLine.RENAME("Journal Template Name","Journal Batch Name","Line No.");
                       TRANSFERFIELDS(GenJournalLine,true);
                     end;

                     SetCalculatedFields;

                     exit(false);
                   END;

    OnAfterGetCurrRecord=BEGIN
                           if not FiltersChecked then begin
                             CheckFilters;
                             FiltersChecked := true;
                           end;
                         END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=<Control1>;
                CaptionML=ENU=<Control1>;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=<Control2>;
                CaptionML=ENU=<Control2>;
                GroupType=Repeater }

    { 8   ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                Editable=FALSE;
                ImplicitType=GUID }

    { 6   ;2   ;Field     ;
                Name=journalDisplayName;
                CaptionML=[@@@={Locked};
                           ENU=JournalDisplayName];
                ToolTipML=ENU=Specifies the Journal Batch Name of the Customer Payment;
                ApplicationArea=#All;
                SourceExpr=GlobalJournalDisplayNameTxt;
                OnValidate=BEGIN
                             ERROR(CannotEditBatchNameErr);
                           END;

                ImplicitType=Text }

    { 4   ;2   ;Field     ;
                Name=lineNumber;
                CaptionML=[@@@={Locked};
                           ENU=LineNumber];
                ApplicationArea=#All;
                SourceExpr="Line No.";
                ImplicitType=Integer }

    { 16  ;2   ;Field     ;
                Name=customerId;
                CaptionML=[@@@={Locked};
                           ENU=CustomerId];
                ApplicationArea=#All;
                SourceExpr="Customer Id";
                OnValidate=BEGIN
                             if "Customer Id" = BlankGUID then begin
                               "Account No." := '';
                               exit;
                             end;

                             Customer.SETRANGE(Id,"Customer Id");
                             if not Customer.FINDFIRST then
                               ERROR(CustomerIdDoesNotMatchACustomerErr);

                             "Account No." := Customer."No.";
                           END;

                ImplicitType=GUID }

    { 19  ;2   ;Field     ;
                Name=customerNumber;
                CaptionML=[@@@={Locked};
                           ENU=CustomerNumber];
                ApplicationArea=#All;
                SourceExpr="Account No.";
                OnValidate=BEGIN
                             if Customer."No." <> '' then begin
                               if Customer."No." <> "Account No." then
                                 ERROR(CustomerValuesDontMatchErr);
                               exit;
                             end;

                             if "Account No." = '' then begin
                               "Customer Id" := BlankGUID;
                               exit;
                             end;

                             if not Customer.GET("Account No.") then
                               ERROR(CustomerNumberDoesNotMatchACustomerErr);

                             "Customer Id" := Customer.Id;
                           END;

                ImplicitType=Code20 }

    { 10  ;2   ;Field     ;
                Name=contactId;
                CaptionML=[@@@={Locked};
                           ENU=ContactId];
                ApplicationArea=#All;
                SourceExpr="Contact Graph Id";
                OnValidate=VAR
                             CustomerOfContact@1001 : Record Customer;
                             ContactRecord@1002 : Record Contact;
                             GraphIntContact@1000 : Codeunit "Graph Int. - Contact";
                           BEGIN
                             if "Contact Graph Id" = '' then begin
                               if Customer."No." = '' then
                                 VALIDATE("Account No.",'');
                               exit;
                             end;

                             if not GraphIntContact.FindOrCreateCustomerFromGraphContactSafe("Contact Graph Id",CustomerOfContact,ContactRecord) then
                               exit;

                             if Customer."No." <> '' then begin
                               if CustomerOfContact."No." <> Customer."No." then
                                 ERROR(CustomerValuesDontMatchErr);
                               exit;
                             end;

                             VALIDATE("Customer Id",CustomerOfContact.Id);
                             VALIDATE("Account No.",CustomerOfContact."No.");
                           END;

                ImplicitType=Text250 }

    { 18  ;2   ;Field     ;
                Name=postingDate;
                CaptionML=[@@@={Locked};
                           ENU=PostingDate];
                ApplicationArea=#All;
                SourceExpr="Posting Date";
                ImplicitType=Date }

    { 12  ;2   ;Field     ;
                Name=documentNumber;
                CaptionML=[@@@={Locked};
                           ENU=DocumentNumber];
                ApplicationArea=#All;
                SourceExpr="Document No.";
                ImplicitType=Code20 }

    { 3   ;2   ;Field     ;
                Name=externalDocumentNumber;
                CaptionML=[@@@={Locked};
                           ENU=ExternalDocumentNumber];
                ApplicationArea=#All;
                SourceExpr="External Document No.";
                ImplicitType=Code35 }

    { 5   ;2   ;Field     ;
                Name=amount;
                CaptionML=[@@@={Locked};
                           ENU=Amount];
                ApplicationArea=#All;
                SourceExpr=Amount;
                ImplicitType=Decimal }

    { 11  ;2   ;Field     ;
                Name=appliesToInvoiceId;
                CaptionML=[@@@={Locked};
                           ENU=AppliesToInvoiceId];
                ToolTipML=ENU=Specifies the Applies-To Invoice Id field of the customer payment.;
                ApplicationArea=#All;
                SourceExpr=AppliesToInvoiceIdText;
                OnValidate=BEGIN
                             "Applies-to Invoice Id" := AppliesToInvoiceIdText;
                             if "Applies-to Invoice Id" = BlankGUID then begin
                               AppliesToInvoiceNumberText := '';
                               exit;
                             end;

                             SalesInvoiceHeader.RESET;
                             SalesInvoiceHeader.SETRANGE(Id,AppliesToInvoiceIdText);
                             if not SalesInvoiceHeader.FINDFIRST then
                               ERROR(AppliesToInvoiceIdDoesNotMatchAnInvoiceErr);

                             AppliesToInvoiceNumberText := SalesInvoiceHeader."No.";

                             if "Account No." = '' then begin
                               if SalesInvoiceHeader."Bill-to Customer No." <> '' then
                                 "Account No." := SalesInvoiceHeader."Bill-to Customer No."
                               else
                                 "Account No." := SalesInvoiceHeader."Sell-to Customer No.";
                             end;
                           END;

                ImplicitType=GUID }

    { 17  ;2   ;Field     ;
                Name=appliesToInvoiceNumber;
                CaptionML=[@@@={Locked};
                           ENU=AppliesToInvoiceNumber];
                ToolTipML=ENU=Specifies the Applies-To Invoice Id field of the customer payment.;
                ApplicationArea=#All;
                SourceExpr=AppliesToInvoiceNumberText;
                OnValidate=VAR
                             BlankGUID@1000 : GUID;
                           BEGIN
                             "Applies-to Doc. No." := AppliesToInvoiceNumberText;

                             if SalesInvoiceHeader."No." <> '' then begin
                               if SalesInvoiceHeader."No." <> AppliesToInvoiceNumberText then
                                 ERROR(AppliesToDocValuesDontMatchErr);
                               exit;
                             end;

                             if SalesInvoiceHeader.GET(AppliesToInvoiceNumberText) then begin
                               AppliesToInvoiceIdText := SalesInvoiceHeader.Id;
                               if "Account No." = '' then begin
                                 if SalesInvoiceHeader."Bill-to Customer No." <> '' then
                                   "Account No." := SalesInvoiceHeader."Bill-to Customer No."
                                 else
                                   "Account No." := SalesInvoiceHeader."Sell-to Customer No.";
                               end;
                             end else
                               AppliesToInvoiceIdText := BlankGUID;
                           END;

                ImplicitType=Code20 }

    { 7   ;2   ;Field     ;
                Name=description;
                CaptionML=[@@@={Locked};
                           ENU=Description];
                ApplicationArea=#All;
                SourceExpr=Description;
                ImplicitType=Text50 }

    { 13  ;2   ;Field     ;
                Name=comment;
                CaptionML=[@@@={Locked};
                           ENU=Comment];
                ApplicationArea=#All;
                SourceExpr=Comment;
                ImplicitType=Text250 }

    { 9   ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last Modified DateTime";
                Editable=FALSE;
                ImplicitType=DateTime }

  }
  CODE
  {
    VAR
      Customer@1007 : Record Customer;
      SalesInvoiceHeader@1008 : Record "Sales Invoice Header";
      GraphMgtCustomerPayments@1000 : Codeunit "Graph Mgt - Customer Payments";
      LibraryAPIGeneralJournal@1001 : Codeunit "Library API - General Journal";
      GlobalJournalDisplayNameTxt@1014 : Text;
      AppliesToInvoiceNumberText@1002 : Code[20];
      AppliesToInvoiceIdText@1003 : GUID;
      FiltersNotSpecifiedErr@1012 : TextConst '@@@={Locked};ENU=You must specify a journal batch ID or a journal ID to get a journal line.';
      CannotEditBatchNameErr@1015 : TextConst '@@@={Locked};ENU=The Journal Batch Display Name isn''t editable.';
      CustomerValuesDontMatchErr@1005 : TextConst '@@@={Locked};ENU=The customer values do not match to a specific Customer.';
      CustomerIdDoesNotMatchACustomerErr@1004 : TextConst '@@@={Locked};ENU=The "customerId" does not match to a Customer.';
      CustomerNumberDoesNotMatchACustomerErr@1006 : TextConst '@@@={Locked};ENU=The "customerNumber" does not match to a Customer.';
      AppliesToDocValuesDontMatchErr@1010 : TextConst '@@@={Locked};ENU=The AppliesToInvoice values do not match to the same Invoice.';
      AppliesToInvoiceIdDoesNotMatchAnInvoiceErr@1009 : TextConst '@@@={Locked};ENU=The "appliesToInvoiceId" should be the ID of an Open, Paid, Corrective, or Canceled Invoice.';
      FiltersChecked@1013 : Boolean;
      BlankGUID@1011 : GUID;

    LOCAL PROCEDURE TransferGeneratedFieldsFromInitializeLine@2(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
      if GenJournalLine."Document No." = '' then
        GenJournalLine."Document No." := "Document No.";
    END;

    LOCAL PROCEDURE SetCalculatedFields@6();
    BEGIN
      GlobalJournalDisplayNameTxt := "Journal Batch Name";
      AppliesToInvoiceNumberText := "Applies-to Doc. No.";
      AppliesToInvoiceIdText := "Applies-to Invoice Id";
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(GlobalJournalDisplayNameTxt);
      CLEAR(AppliesToInvoiceIdText);
      CLEAR(AppliesToInvoiceNumberText);
    END;

    LOCAL PROCEDURE ProcessAppliesToInvoiceNumberAndId@5();
    BEGIN
      if AppliesToInvoiceNumberText <> '' then
        "Applies-to Doc. No." := AppliesToInvoiceNumberText;
      "Applies-to Invoice Id" := AppliesToInvoiceIdText;
    END;

    LOCAL PROCEDURE CheckFilters@3();
    BEGIN
      if (GETFILTER("Journal Batch Id") = '') and
         (GETFILTER(Id) = '')
      then
        ERROR(FiltersNotSpecifiedErr);
    END;

    BEGIN
    END.
  }
}

