OBJECT Table 81 Gen. Journal Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Sales Invoice Header"=r,
                TableData "Data Exch. Field"=rimd;
    OnInsert=BEGIN
               GenJnlAlloc.LOCKTABLE;
               LOCKTABLE;

               SetLastModifiedDateTime;

               GenJnlTemplate.GET("Journal Template Name");
               GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
               "Copy VAT Setup to Jnl. Lines" := GenJnlBatch."Copy VAT Setup to Jnl. Lines";
               "Posting No. Series" := GenJnlBatch."Posting No. Series";
               "Check Printed" := false;

               ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
               ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
             END;

    OnModify=BEGIN
               SetLastModifiedDateTime;

               TESTFIELD("Check Printed",false);
               if ("Applies-to ID" = '') and (xRec."Applies-to ID" <> '') then
                 ClearCustVendApplnEntry;
             END;

    OnDelete=BEGIN
               ApprovalsMgmt.OnCancelGeneralJournalLineApprovalRequest(Rec);

               TESTFIELD("Check Printed",false);

               ClearCustVendApplnEntry;
               ClearAppliedGenJnlLine;
               DeletePaymentFileErrors;
               ClearDataExchangeEntries(false);

               GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
               GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
               GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
               GenJnlAlloc.DELETEALL;

               DeferralUtilities.DeferralCodeOnDelete(
                 DeferralDocType::"G/L",
                 "Journal Template Name",
                 "Journal Batch Name",0,'',"Line No.");

               VALIDATE("Incoming Document Entry No.",0);
             END;

    OnRename=BEGIN
               ApprovalsMgmt.RenameApprovalEntries(xRec.RECORDID,RECORDID);

               TESTFIELD("Check Printed",false);
             END;

    CaptionML=ENU=Gen. Journal Line;
  }
  FIELDS
  {
    { 1   ;   ;Journal Template Name;Code10       ;TableRelation="Gen. Journal Template";
                                                   CaptionML=ENU=Journal Template Name }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                if ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner","Account Type"::Employee]) and
                                                                   ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner","Bal. Account Type"::Employee])
                                                                then
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

                                                                if ("Account Type" = "Account Type"::Employee) and ("Currency Code" <> '') then
                                                                  ERROR(OnlyLocalCurrencyForEmployeeErr);

                                                                VALIDATE("Account No.",'');
                                                                VALIDATE(Description,'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                if "Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account","Account Type"::Employee] then begin
                                                                  VALIDATE("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                  VALIDATE("Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Gen. Prod. Posting Group",'');
                                                                end else
                                                                  if "Bal. Account Type" in [
                                                                                             "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"]
                                                                  then
                                                                    VALIDATE("Payment Terms Code",'');
                                                                UpdateSource;

                                                                if ("Account Type" <> "Account Type"::"Fixed Asset") and
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                then begin
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                end;
                                                                if xRec."Account Type" in
                                                                   [xRec."Account Type"::Customer,xRec."Account Type"::Vendor]
                                                                then begin
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                end;

                                                                if "Journal Template Name" <> '' then
                                                                  if "Account Type" = "Account Type"::"IC Partner" then begin
                                                                    GetTemplate;
                                                                    if GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany then
                                                                      FIELDERROR("Account Type");
                                                                  end;
                                                                if "Account Type" <> "Account Type"::Customer then
                                                                  VALIDATE("Credit Card No.",'');

                                                                VALIDATE("Deferral Code",'');
                                                              END;

                                                   CaptionML=ENU=Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee }
    { 4   ;   ;Account No.         ;Code20        ;TableRelation=IF ("Account Type"=CONST("G/L Account")) "G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                                                               Blocked=CONST(false))
                                                                                                                               ELSE IF ("Account Type"=CONST(Customer)) Customer
                                                                                                                               ELSE IF ("Account Type"=CONST(Vendor)) Vendor
                                                                                                                               ELSE IF ("Account Type"=CONST("Bank Account")) "Bank Account"
                                                                                                                               ELSE IF ("Account Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                                                                               ELSE IF ("Account Type"=CONST("IC Partner")) "IC Partner"
                                                                                                                               ELSE IF ("Account Type"=CONST(Employee)) Employee;
                                                   OnValidate=BEGIN
                                                                if "Account No." <> xRec."Account No." then begin
                                                                  ClearAppliedAutomatically;
                                                                  VALIDATE("Job No.",'');
                                                                end;

                                                                if xRec."Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"IC Partner"] then
                                                                  "IC Partner Code" := '';

                                                                if "Account No." = '' then begin
                                                                  CleanLine;
                                                                  exit;
                                                                end;

                                                                case "Account Type" of
                                                                  "Account Type"::"G/L Account":
                                                                    GetGLAccount;
                                                                  "Account Type"::Customer:
                                                                    GetCustomerAccount;
                                                                  "Account Type"::Vendor:
                                                                    GetVendorAccount;
                                                                  "Account Type"::Employee:
                                                                    GetEmployeeAccount;
                                                                  "Account Type"::"Bank Account":
                                                                    GetBankAccount;
                                                                  "Account Type"::"Fixed Asset":
                                                                    GetFAAccount;
                                                                  "Account Type"::"IC Partner":
                                                                    GetICPartnerAccount;
                                                                end;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);

                                                                case "Account Type" of
                                                                  "Account Type"::"G/L Account":
                                                                    UpdateAccountID;
                                                                  "Account Type"::Customer:
                                                                    UpdateCustomerID;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Account No. }
    { 5   ;   ;Posting Date        ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Document Date","Posting Date");
                                                                VALIDATE("Currency Code");

                                                                if ("Posting Date" <> xRec."Posting Date") and (Amount <> 0) then
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);

                                                                ValidateApplyRequirements(Rec);

                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;

                                                                if "Deferral Code" <> '' then
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=ENU=Posting Date;
                                                   ClosingDates=true }
    { 6   ;   ;Document Type       ;Option        ;OnValidate=VAR
                                                                Cust@1000 : Record Customer;
                                                                Vend@1001 : Record Vendor;
                                                              BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                                if "Account No." <> '' then
                                                                  case "Account Type" of
                                                                    "Account Type"::Customer:
                                                                      begin
                                                                        Cust.GET("Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",false);
                                                                      end;
                                                                    "Account Type"::Vendor:
                                                                      begin
                                                                        Vend.GET("Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",false);
                                                                      end;
                                                                  end;
                                                                if "Bal. Account No." <> '' then
                                                                  case "Bal. Account Type" of
                                                                    "Account Type"::Customer:
                                                                      begin
                                                                        Cust.GET("Bal. Account No.");
                                                                        Cust.CheckBlockedCustOnJnls(Cust,"Document Type",false);
                                                                      end;
                                                                    "Account Type"::Vendor:
                                                                      begin
                                                                        Vend.GET("Bal. Account No.");
                                                                        Vend.CheckBlockedVendOnJnls(Vend,"Document Type",false);
                                                                      end;
                                                                  end;
                                                                UpdateSalesPurchLCY;
                                                                ValidateApplyRequirements(Rec);
                                                                if not ("Document Type" in ["Document Type"::Payment,"Document Type"::Refund]) then
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 7   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 8   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;VAT %               ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    begin
                                                                      "VAT Amount" :=
                                                                        ROUND(Amount * "VAT %" / (100 + "VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "VAT Base Amount" :=
                                                                        ROUND(Amount - "VAT Amount",Currency."Amount Rounding Precision");
                                                                    end;
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    "VAT Amount" := Amount;
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    if ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) and
                                                                       "Use Tax"
                                                                    then begin
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                    end else begin
                                                                      "VAT Amount" :=
                                                                        Amount -
                                                                        SalesTaxCalculate.ReverseCalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable",
                                                                          "Posting Date",Amount,Quantity,"Currency Factor");
                                                                      if Amount - "VAT Amount" <> 0 then
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / (Amount - "VAT Amount"),0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                    end;
                                                                end;
                                                                "VAT Base Amount" := Amount - "VAT Amount";
                                                                "VAT Difference" := 0;

                                                                if "Currency Code" = '' then
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                else
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                if "Deferral Code" <> '' then
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=ENU=VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=false }
    { 11  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                                                                                                    Blocked=CONST(false))
                                                                                                                                    ELSE IF ("Bal. Account Type"=CONST(Customer)) Customer
                                                                                                                                    ELSE IF ("Bal. Account Type"=CONST(Vendor)) Vendor
                                                                                                                                    ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account"
                                                                                                                                    ELSE IF ("Bal. Account Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                                                                                    ELSE IF ("Bal. Account Type"=CONST("IC Partner")) "IC Partner"
                                                                                                                                    ELSE IF ("Bal. Account Type"=CONST(Employee)) Employee;
                                                   OnValidate=BEGIN
                                                                VALIDATE("Job No.",'');

                                                                if xRec."Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,
                                                                                                "Bal. Account Type"::"IC Partner"]
                                                                then
                                                                  "IC Partner Code" := '';

                                                                if "Bal. Account No." = '' then begin
                                                                  UpdateLineBalance;
                                                                  UpdateSource;
                                                                  CreateDim(
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DATABASE::Job,"Job No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  if not ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor]) then
                                                                    "Recipient Bank Account" := '';
                                                                  if xRec."Bal. Account No." <> '' then begin
                                                                    ClearBalancePostingGroups;
                                                                    "Bal. Tax Area Code" := '';
                                                                    "Bal. Tax Liable" := false;
                                                                    "Bal. Tax Group Code" := '';
                                                                  end;
                                                                  exit;
                                                                end;

                                                                case "Bal. Account Type" of
                                                                  "Bal. Account Type"::"G/L Account":
                                                                    GetGLBalAccount;
                                                                  "Bal. Account Type"::Customer:
                                                                    GetCustomerBalAccount;
                                                                  "Bal. Account Type"::Vendor:
                                                                    GetVendorBalAccount;
                                                                  "Bal. Account Type"::Employee:
                                                                    GetEmployeeBalAccount;
                                                                  "Bal. Account Type"::"Bank Account":
                                                                    GetBankBalAccount;
                                                                  "Bal. Account Type"::"Fixed Asset":
                                                                    GetFABalAccount;
                                                                  "Bal. Account Type"::"IC Partner":
                                                                    GetICPartnerBalAccount;
                                                                end;

                                                                VALIDATE("Currency Code");
                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                                UpdateLineBalance;
                                                                UpdateSource;
                                                                CreateDim(
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");

                                                                VALIDATE("IC Partner G/L Acc. No.",GetDefaultICPartnerGLAccNo);
                                                                ValidateApplyRequirements(Rec);
                                                              END;

                                                   CaptionML=ENU=Bal. Account No. }
    { 12  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                BankAcc@1000 : Record "Bank Account";
                                                              BEGIN
                                                                if "Bal. Account Type" = "Bal. Account Type"::"Bank Account" then begin
                                                                  if BankAcc.GET("Bal. Account No.") and (BankAcc."Currency Code" <> '')then
                                                                    BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                end;
                                                                if "Account Type" = "Account Type"::"Bank Account" then begin
                                                                  if BankAcc.GET("Account No.") and (BankAcc."Currency Code" <> '') then
                                                                    BankAcc.TESTFIELD("Currency Code","Currency Code");
                                                                end;
                                                                if ("Recurring Method" in
                                                                    ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]) and
                                                                   ("Currency Code" <> '')
                                                                then
                                                                  ERROR(
                                                                    Text001,
                                                                    FIELDCAPTION("Currency Code"),FIELDCAPTION("Recurring Method"),"Recurring Method");

                                                                if "Currency Code" <> '' then begin
                                                                  if ("Bal. Account Type" = "Bal. Account Type"::Employee) or ("Account Type" = "Account Type"::Employee) then
                                                                    ERROR(OnlyLocalCurrencyForEmployeeErr);
                                                                  GetCurrency;
                                                                  if ("Currency Code" <> xRec."Currency Code") or
                                                                     ("Posting Date" <> xRec."Posting Date") or
                                                                     (CurrFieldNo = FIELDNO("Currency Code")) or
                                                                     ("Currency Factor" = 0)
                                                                  then
                                                                    "Currency Factor" :=
                                                                      CurrExchRate.ExchangeRate("Posting Date","Currency Code");
                                                                end else
                                                                  "Currency Factor" := 0;
                                                                VALIDATE("Currency Factor");

                                                                if not CustVendAccountNosModified then
                                                                  if ("Currency Code" <> xRec."Currency Code") and (Amount <> 0) then
                                                                    PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                              END;

                                                   CaptionML=ENU=Currency Code }
    { 13  ;   ;Amount              ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                if "Currency Code" = '' then
                                                                  "Amount (LCY)" := Amount
                                                                else
                                                                  "Amount (LCY)" := ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        Amount,"Currency Factor"));

                                                                Amount := ROUND(Amount,Currency."Amount Rounding Precision");
                                                                if (CurrFieldNo <> 0) and
                                                                   (CurrFieldNo <> FIELDNO("Applies-to Doc. No.")) and
                                                                   ((("Account Type" = "Account Type"::Customer) and
                                                                     ("Account No." <> '') and (Amount > 0) and
                                                                     (CurrFieldNo <> FIELDNO("Bal. Account No."))) or
                                                                    (("Bal. Account Type" = "Bal. Account Type"::Customer) and
                                                                     ("Bal. Account No." <> '') and (Amount < 0) and
                                                                     (CurrFieldNo <> FIELDNO("Account No."))))
                                                                then
                                                                  CustCheckCreditLimit.GenJnlLineCheck(Rec);

                                                                VALIDATE("VAT %");
                                                                VALIDATE("Bal. VAT %");
                                                                UpdateLineBalance;
                                                                if "Deferral Code" <> '' then
                                                                  VALIDATE("Deferral Code");

                                                                if Amount <> xRec.Amount then begin
                                                                  if ("Applies-to Doc. No." <> '') or ("Applies-to ID" <> '') then
                                                                    SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                end;

                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 14  ;   ;Debit Amount        ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Debit Amount" := ROUND("Debit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Debit Amount" < 0;
                                                                if ("Credit Amount" = 0) or ("Debit Amount" <> 0) then begin
                                                                  Amount := "Debit Amount";
                                                                  VALIDATE(Amount);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Debit Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 15  ;   ;Credit Amount       ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Credit Amount" := ROUND("Credit Amount",Currency."Amount Rounding Precision");
                                                                Correction := "Credit Amount" < 0;
                                                                if ("Debit Amount" = 0) or ("Credit Amount" <> 0) then begin
                                                                  Amount := -"Credit Amount";
                                                                  VALIDATE(Amount);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Credit Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;OnValidate=BEGIN
                                                                if "Currency Code" = '' then begin
                                                                  Amount := "Amount (LCY)";
                                                                  VALIDATE(Amount);
                                                                end else begin
                                                                  if CheckFixedCurrency then begin
                                                                    GetCurrency;
                                                                    Amount := ROUND(
                                                                        CurrExchRate.ExchangeAmtLCYToFCY(
                                                                          "Posting Date","Currency Code",
                                                                          "Amount (LCY)","Currency Factor"),
                                                                        Currency."Amount Rounding Precision")
                                                                  end else begin
                                                                    TESTFIELD("Amount (LCY)");
                                                                    TESTFIELD(Amount);
                                                                    "Currency Factor" := Amount / "Amount (LCY)";
                                                                  end;

                                                                  VALIDATE("VAT %");
                                                                  VALIDATE("Bal. VAT %");
                                                                  UpdateLineBalance;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Amount (LCY);
                                                   AutoFormatType=1 }
    { 17  ;   ;Balance (LCY)       ;Decimal       ;CaptionML=ENU=Balance (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 18  ;   ;Currency Factor     ;Decimal       ;OnValidate=BEGIN
                                                                if ("Currency Code" = '') and ("Currency Factor" <> 0) then
                                                                  FIELDERROR("Currency Factor",STRSUBSTNO(Text002,FIELDCAPTION("Currency Code")));
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0;
                                                   Editable=false }
    { 19  ;   ;Sales/Purch. (LCY)  ;Decimal       ;CaptionML=ENU=Sales/Purch. (LCY);
                                                   AutoFormatType=1 }
    { 20  ;   ;Profit (LCY)        ;Decimal       ;CaptionML=ENU=Profit (LCY);
                                                   AutoFormatType=1 }
    { 21  ;   ;Inv. Discount (LCY) ;Decimal       ;CaptionML=ENU=Inv. Discount (LCY);
                                                   AutoFormatType=1 }
    { 22  ;   ;Bill-to/Pay-to No.  ;Code20        ;TableRelation=IF ("Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                if "Bill-to/Pay-to No." <> xRec."Bill-to/Pay-to No." then
                                                                  "Ship-to/Order Address Code" := '';
                                                                ReadGLSetup;
                                                                if GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Bill-to/Pay-to No." then
                                                                  UpdateCountryCodeAndVATRegNo("Bill-to/Pay-to No.");
                                                              END;

                                                   CaptionML=ENU=Bill-to/Pay-to No.;
                                                   Editable=false }
    { 23  ;   ;Posting Group       ;Code20        ;TableRelation=IF ("Account Type"=CONST(Customer)) "Customer Posting Group"
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) "Vendor Posting Group"
                                                                 ELSE IF ("Account Type"=CONST("Fixed Asset")) "FA Posting Group";
                                                   CaptionML=ENU=Posting Group;
                                                   Editable=false }
    { 24  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1),
                                                                                               Blocked=CONST(false));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 25  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2),
                                                                                               Blocked=CONST(false));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 26  ;   ;Salespers./Purch. Code;Code20      ;TableRelation="Salesperson/Purchaser";
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=ENU=Salespers./Purch. Code }
    { 29  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code;
                                                   Editable=false }
    { 30  ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry;
                                                   Editable=false }
    { 34  ;   ;On Hold             ;Code3         ;CaptionML=ENU=On Hold }
    { 35  ;   ;Applies-to Doc. Type;Option        ;OnValidate=BEGIN
                                                                if "Applies-to Doc. Type" <> xRec."Applies-to Doc. Type" then
                                                                  VALIDATE("Applies-to Doc. No.",'');
                                                              END;

                                                   CaptionML=ENU=Applies-to Doc. Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 36  ;   ;Applies-to Doc. No. ;Code20        ;OnValidate=VAR
                                                                CustLedgEntry@1000 : Record "Cust. Ledger Entry";
                                                                VendLedgEntry@1003 : Record "Vendor Ledger Entry";
                                                                TempGenJnlLine@1001 : TEMPORARY Record "Gen. Journal Line";
                                                              BEGIN
                                                                if "Applies-to Doc. No." <> xRec."Applies-to Doc. No." then
                                                                  ClearCustVendApplnEntry;

                                                                if ("Applies-to Doc. No." = '') and (xRec."Applies-to Doc. No." <> '') then begin
                                                                  PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");

                                                                  TempGenJnlLine := Rec;
                                                                  if (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) or
                                                                     (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor) or
                                                                     (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Employee)
                                                                  then
                                                                    CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

                                                                  case TempGenJnlLine."Account Type" of
                                                                    TempGenJnlLine."Account Type"::Customer:
                                                                      begin
                                                                        CustLedgEntry.SETCURRENTKEY("Document No.");
                                                                        CustLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                        if not (xRec."Applies-to Doc. Type" = "Document Type"::" ") then
                                                                          CustLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                        CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
                                                                        CustLedgEntry.SETRANGE(Open,true);
                                                                        if CustLedgEntry.FINDFIRST then begin
                                                                          if CustLedgEntry."Amount to Apply" <> 0 then  begin
                                                                            CustLedgEntry."Amount to Apply" := 0;
                                                                            CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
                                                                          end;
                                                                          "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                                                                          "Applies-to Ext. Doc. No." := '';
                                                                        end;
                                                                      end;
                                                                    TempGenJnlLine."Account Type"::Vendor:
                                                                      begin
                                                                        VendLedgEntry.SETCURRENTKEY("Document No.");
                                                                        VendLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                        if not (xRec."Applies-to Doc. Type" = "Document Type"::" ") then
                                                                          VendLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                        VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
                                                                        VendLedgEntry.SETRANGE(Open,true);
                                                                        if VendLedgEntry.FINDFIRST then begin
                                                                          if VendLedgEntry."Amount to Apply" <> 0 then  begin
                                                                            VendLedgEntry."Amount to Apply" := 0;
                                                                            CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
                                                                          end;
                                                                          "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                                                                        end;
                                                                        "Applies-to Ext. Doc. No." := '';
                                                                      end;
                                                                    TempGenJnlLine."Account Type"::Employee:
                                                                      begin
                                                                        EmplLedgEntry.SETCURRENTKEY("Document No.");
                                                                        EmplLedgEntry.SETRANGE("Document No.",xRec."Applies-to Doc. No.");
                                                                        if not (xRec."Applies-to Doc. Type" = "Document Type"::" ") then
                                                                          EmplLedgEntry.SETRANGE("Document Type",xRec."Applies-to Doc. Type");
                                                                        EmplLedgEntry.SETRANGE("Employee No.",TempGenJnlLine."Account No.");
                                                                        EmplLedgEntry.SETRANGE(Open,true);
                                                                        if EmplLedgEntry.FINDFIRST then begin
                                                                          if EmplLedgEntry."Amount to Apply" <> 0 then begin
                                                                            EmplLedgEntry."Amount to Apply" := 0;
                                                                            CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",EmplLedgEntry);
                                                                          end;
                                                                          "Exported to Payment File" := EmplLedgEntry."Exported to Payment File";
                                                                        end;
                                                                      end;
                                                                  end;
                                                                end;

                                                                if ("Applies-to Doc. No." <> xRec."Applies-to Doc. No.") and (Amount <> 0) then begin
                                                                  if xRec."Applies-to Doc. No." <> '' then
                                                                    PaymentToleranceMgt.DelPmtTolApllnDocNo(Rec,xRec."Applies-to Doc. No.");
                                                                  SetApplyToAmount;
                                                                  PaymentToleranceMgt.PmtTolGenJnl(Rec);
                                                                  xRec.ClearAppliedGenJnlLine;
                                                                end;

                                                                case "Account Type" of
                                                                  "Account Type"::Customer:
                                                                    GetCustLedgerEntry;
                                                                  "Account Type"::Vendor:
                                                                    GetVendLedgerEntry;
                                                                  "Account Type"::Employee:
                                                                    GetEmplLedgerEntry;
                                                                end;

                                                                ValidateApplyRequirements(Rec);
                                                                SetJournalLineFieldsFromApplication;

                                                                if "Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice then
                                                                  UpdateAppliesToInvoiceID;
                                                              END;

                                                   OnLookup=VAR
                                                              PaymentToleranceMgt@1001 : Codeunit "Payment Tolerance Management";
                                                              AccType@1002 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee';
                                                              AccNo@1003 : Code[20];
                                                            BEGIN
                                                              xRec.Amount := Amount;
                                                              xRec."Currency Code" := "Currency Code";
                                                              xRec."Posting Date" := "Posting Date";

                                                              GetAccTypeAndNo(Rec,AccType,AccNo);
                                                              CLEAR(CustLedgEntry);
                                                              CLEAR(VendLedgEntry);

                                                              case AccType of
                                                                AccType::Customer:
                                                                  LookUpAppliesToDocCust(AccNo);
                                                                AccType::Vendor:
                                                                  LookUpAppliesToDocVend(AccNo);
                                                                AccType::Employee:
                                                                  LookUpAppliesToDocEmpl(AccNo);
                                                              end;
                                                              SetJournalLineFieldsFromApplication;

                                                              if xRec.Amount <> 0 then
                                                                if not PaymentToleranceMgt.PmtTolGenJnl(Rec) then
                                                                  exit;

                                                              if "Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice then
                                                                UpdateAppliesToInvoiceID;
                                                            END;

                                                   CaptionML=ENU=Applies-to Doc. No. }
    { 38  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 39  ;   ;Pmt. Discount Date  ;Date          ;CaptionML=ENU=Pmt. Discount Date }
    { 40  ;   ;Payment Discount %  ;Decimal       ;CaptionML=ENU=Payment Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 42  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   OnValidate=BEGIN
                                                                if "Job No." = xRec."Job No." then
                                                                  exit;

                                                                SourceCodeSetup.GET;
                                                                if "Source Code" <> SourceCodeSetup."Job G/L WIP" then
                                                                  VALIDATE("Job Task No.",'');
                                                                if "Job No." = '' then begin
                                                                  CreateDim(
                                                                    DATABASE::Job,"Job No.",
                                                                    DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                    DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                    DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                    DATABASE::Campaign,"Campaign No.");
                                                                  exit;
                                                                end;

                                                                TESTFIELD("Account Type","Account Type"::"G/L Account");

                                                                if "Bal. Account No." <> '' then
                                                                  if not ("Bal. Account Type" in ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"]) then
                                                                    ERROR(Text016,FIELDCAPTION("Bal. Account Type"));

                                                                Job.GET("Job No.");
                                                                Job.TestBlocked;
                                                                "Job Currency Code" := Job."Currency Code";

                                                                CreateDim(
                                                                  DATABASE::Job,"Job No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
                                                                  DATABASE::Campaign,"Campaign No.");
                                                              END;

                                                   CaptionML=ENU=Job No. }
    { 43  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 44  ;   ;VAT Amount          ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",true);
                                                                if not ("VAT Calculation Type" in
                                                                        ["VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT"])
                                                                then
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("VAT Calculation Type"),
                                                                    "VAT Calculation Type"::"Normal VAT","VAT Calculation Type"::"Reverse Charge VAT");
                                                                if "VAT Amount" <> 0 then begin
                                                                  TESTFIELD("VAT %");
                                                                  TESTFIELD(Amount);
                                                                end;

                                                                GetCurrency;
                                                                "VAT Amount" := ROUND("VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                if "VAT Amount" * Amount < 0 then
                                                                  if "VAT Amount" > 0 then
                                                                    ERROR(Text011,FIELDCAPTION("VAT Amount"))
                                                                  else
                                                                    ERROR(Text012,FIELDCAPTION("VAT Amount"));

                                                                "VAT Base Amount" := Amount - "VAT Amount";

                                                                "VAT Difference" :=
                                                                  "VAT Amount" -
                                                                  ROUND(
                                                                    Amount * "VAT %" / (100 + "VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                if ABS("VAT Difference") > Currency."Max. VAT Difference Allowed" then
                                                                  ERROR(Text013,FIELDCAPTION("VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                if "Currency Code" = '' then
                                                                  "VAT Amount (LCY)" := "VAT Amount"
                                                                else
                                                                  "VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "VAT Amount","Currency Factor"));
                                                                "VAT Base Amount (LCY)" := "Amount (LCY)" - "VAT Amount (LCY)";

                                                                UpdateSalesPurchLCY;

                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;

                                                                if "Deferral Code" <> '' then
                                                                  VALIDATE("Deferral Code");
                                                              END;

                                                   CaptionML=ENU=VAT Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 45  ;   ;VAT Posting         ;Option        ;CaptionML=ENU=VAT Posting;
                                                   OptionCaptionML=ENU=Automatic VAT Entry,Manual VAT Entry;
                                                   OptionString="Automatic VAT Entry","Manual VAT Entry";
                                                   Editable=false }
    { 47  ;   ;Payment Terms Code  ;Code10        ;TableRelation="Payment Terms";
                                                   OnValidate=BEGIN
                                                                "Due Date" := 0D;
                                                                "Pmt. Discount Date" := 0D;
                                                                "Payment Discount %" := 0;
                                                                if ("Account Type" <> "Account Type"::"G/L Account") or
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account")
                                                                then
                                                                  case "Document Type" of
                                                                    "Document Type"::Invoice:
                                                                      if ("Payment Terms Code" <> '') and ("Document Date" <> 0D) then begin
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                        "Pmt. Discount Date" := CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                        "Payment Discount %" := PaymentTerms."Discount %";
                                                                      end;
                                                                    "Document Type"::"Credit Memo":
                                                                      if ("Payment Terms Code" <> '') and ("Document Date" <> 0D) then begin
                                                                        PaymentTerms.GET("Payment Terms Code");
                                                                        if PaymentTerms."Calc. Pmt. Disc. on Cr. Memos" then begin
                                                                          "Due Date" := CALCDATE(PaymentTerms."Due Date Calculation","Document Date");
                                                                          "Pmt. Discount Date" :=
                                                                            CALCDATE(PaymentTerms."Discount Date Calculation","Document Date");
                                                                          "Payment Discount %" := PaymentTerms."Discount %";
                                                                        end else
                                                                          "Due Date" := "Document Date";
                                                                      end;
                                                                    else
                                                                      "Due Date" := "Document Date";
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Payment Terms Code }
    { 48  ;   ;Applies-to ID       ;Code50        ;OnValidate=BEGIN
                                                                if ("Applies-to ID" <> xRec."Applies-to ID") and (xRec."Applies-to ID" <> '') then
                                                                  ClearCustVendApplnEntry;
                                                                SetJournalLineFieldsFromApplication;
                                                              END;

                                                   CaptionML=ENU=Applies-to ID }
    { 50  ;   ;Business Unit Code  ;Code20        ;TableRelation="Business Unit";
                                                   CaptionML=ENU=Business Unit Code }
    { 51  ;   ;Journal Batch Name  ;Code10        ;TableRelation="Gen. Journal Batch".Name WHERE ("Journal Template Name"=FIELD("Journal Template Name"));
                                                   OnValidate=BEGIN
                                                                UpdateJournalBatchID;
                                                              END;

                                                   CaptionML=ENU=Journal Batch Name }
    { 52  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 53  ;   ;Recurring Method    ;Option        ;OnValidate=BEGIN
                                                                if "Recurring Method" in
                                                                   ["Recurring Method"::"B  Balance","Recurring Method"::"RB Reversing Balance"]
                                                                then
                                                                  TESTFIELD("Currency Code",'');
                                                              END;

                                                   CaptionML=ENU=Recurring Method;
                                                   OptionCaptionML=ENU=" ,F  Fixed,V  Variable,B  Balance,RF Reversing Fixed,RV Reversing Variable,RB Reversing Balance";
                                                   OptionString=" ","F  Fixed","V  Variable","B  Balance","RF Reversing Fixed","RV Reversing Variable","RB Reversing Balance";
                                                   BlankZero=true }
    { 54  ;   ;Expiration Date     ;Date          ;CaptionML=ENU=Expiration Date }
    { 55  ;   ;Recurring Frequency ;DateFormula   ;CaptionML=ENU=Recurring Frequency }
    { 56  ;   ;Allocated Amt. (LCY);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Gen. Jnl. Allocation".Amount WHERE ("Journal Template Name"=FIELD("Journal Template Name"),
                                                                                                        "Journal Batch Name"=FIELD("Journal Batch Name"),
                                                                                                        "Journal Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Allocated Amt. (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 57  ;   ;Gen. Posting Type   ;Option        ;OnValidate=BEGIN
                                                                if "Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] then
                                                                  TESTFIELD("Gen. Posting Type","Gen. Posting Type"::" ");
                                                                if ("Gen. Posting Type" = "Gen. Posting Type"::Settlement) and (CurrFieldNo <> 0) then
                                                                  ERROR(Text006,"Gen. Posting Type");
                                                                CheckVATInAlloc;
                                                                if "Gen. Posting Type" > 0 then
                                                                  VALIDATE("VAT Prod. Posting Group");
                                                                if "Gen. Posting Type" <> "Gen. Posting Type"::Purchase then
                                                                  VALIDATE("Use Tax",false)
                                                              END;

                                                   CaptionML=ENU=Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale,Settlement";
                                                   OptionString=" ",Purchase,Sale,Settlement }
    { 58  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] then
                                                                  TESTFIELD("Gen. Bus. Posting Group",'');
                                                                if xRec."Gen. Bus. Posting Group" <> "Gen. Bus. Posting Group" then
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Gen. Bus. Posting Group") then
                                                                    VALIDATE("VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 59  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] then
                                                                  TESTFIELD("Gen. Prod. Posting Group",'');
                                                                if xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" then
                                                                  if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") then
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 60  ;   ;VAT Calculation Type;Option        ;CaptionML=ENU=VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax";
                                                   Editable=false }
    { 61  ;   ;EU 3-Party Trade    ;Boolean       ;CaptionML=ENU=EU 3-Party Trade;
                                                   Editable=false }
    { 62  ;   ;Allow Application   ;Boolean       ;InitValue=true;
                                                   CaptionML=ENU=Allow Application }
    { 63  ;   ;Bal. Account Type   ;Option        ;OnValidate=BEGIN
                                                                if ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset",
                                                                                       "Account Type"::"IC Partner","Account Type"::Employee]) and
                                                                   ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset",
                                                                                            "Bal. Account Type"::"IC Partner","Bal. Account Type"::Employee])
                                                                then
                                                                  ERROR(
                                                                    Text000,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));

                                                                if ("Bal. Account Type" = "Bal. Account Type"::Employee) and ("Currency Code" <> '') then
                                                                  ERROR(OnlyLocalCurrencyForEmployeeErr);

                                                                VALIDATE("Bal. Account No.",'');
                                                                VALIDATE("IC Partner G/L Acc. No.",'');
                                                                if "Bal. Account Type" in
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account","Bal. Account Type"::Employee]
                                                                then begin
                                                                  VALIDATE("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                  VALIDATE("Bal. Gen. Bus. Posting Group",'');
                                                                  VALIDATE("Bal. Gen. Prod. Posting Group",'');
                                                                end else
                                                                  if "Account Type" in [
                                                                                        "Bal. Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]
                                                                  then
                                                                    VALIDATE("Payment Terms Code",'');

                                                                UpdateSource;
                                                                if ("Account Type" <> "Account Type"::"Fixed Asset") and
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                then begin
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                end;
                                                                if xRec."Bal. Account Type" in
                                                                   [xRec."Bal. Account Type"::Customer,xRec."Bal. Account Type"::Vendor]
                                                                then begin
                                                                  "Bill-to/Pay-to No." := '';
                                                                  "Ship-to/Order Address Code" := '';
                                                                  "Sell-to/Buy-from No." := '';
                                                                  "VAT Registration No." := '';
                                                                end;
                                                                if ("Account Type" in [
                                                                                       "Account Type"::"G/L Account","Account Type"::"Bank Account","Account Type"::"Fixed Asset"]) and
                                                                   ("Bal. Account Type" in [
                                                                                            "Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account","Bal. Account Type"::"Fixed Asset"])
                                                                then
                                                                  VALIDATE("Payment Terms Code",'');

                                                                if "Bal. Account Type" = "Bal. Account Type"::"IC Partner" then begin
                                                                  GetTemplate;
                                                                  if GenJnlTemplate.Type <> GenJnlTemplate.Type::Intercompany then
                                                                    FIELDERROR("Bal. Account Type");
                                                                end;
                                                                if "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" then
                                                                  VALIDATE("Credit Card No.",'');
                                                              END;

                                                   CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee }
    { 64  ;   ;Bal. Gen. Posting Type;Option      ;OnValidate=BEGIN
                                                                if "Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] then
                                                                  TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::" ");
                                                                if ("Bal. Gen. Posting Type" = "Gen. Posting Type"::Settlement) and (CurrFieldNo <> 0) then
                                                                  ERROR(Text006,"Bal. Gen. Posting Type");
                                                                if "Bal. Gen. Posting Type" > 0 then
                                                                  VALIDATE("Bal. VAT Prod. Posting Group");

                                                                if ("Account Type" <> "Account Type"::"Fixed Asset") and
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
                                                                then begin
                                                                  "Depreciation Book Code" := '';
                                                                  VALIDATE("FA Posting Type","FA Posting Type"::" ");
                                                                end;
                                                                if "Bal. Gen. Posting Type" <> "Bal. Gen. Posting Type"::Purchase then
                                                                  VALIDATE("Bal. Use Tax",false);
                                                              END;

                                                   CaptionML=ENU=Bal. Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale,Settlement";
                                                   OptionString=" ",Purchase,Sale,Settlement }
    { 65  ;   ;Bal. Gen. Bus. Posting Group;Code20;TableRelation="Gen. Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] then
                                                                  TESTFIELD("Bal. Gen. Bus. Posting Group",'');
                                                                if xRec."Bal. Gen. Bus. Posting Group" <> "Bal. Gen. Bus. Posting Group" then
                                                                  if GenBusPostingGrp.ValidateVatBusPostingGroup(GenBusPostingGrp,"Bal. Gen. Bus. Posting Group") then
                                                                    VALIDATE("Bal. VAT Bus. Posting Group",GenBusPostingGrp."Def. VAT Bus. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Bal. Gen. Bus. Posting Group }
    { 66  ;   ;Bal. Gen. Prod. Posting Group;Code20;
                                                   TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"] then
                                                                  TESTFIELD("Bal. Gen. Prod. Posting Group",'');
                                                                if xRec."Bal. Gen. Prod. Posting Group" <> "Bal. Gen. Prod. Posting Group" then
                                                                  if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Bal. Gen. Prod. Posting Group") then
                                                                    VALIDATE("Bal. VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Bal. Gen. Prod. Posting Group }
    { 67  ;   ;Bal. VAT Calculation Type;Option   ;CaptionML=ENU=Bal. VAT Calculation Type;
                                                   OptionCaptionML=ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   OptionString="Normal VAT","Reverse Charge VAT","Full VAT","Sales Tax";
                                                   Editable=false }
    { 68  ;   ;Bal. VAT %          ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                case "Bal. VAT Calculation Type" of
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    begin
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND(-Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                      "Bal. VAT Base Amount" :=
                                                                        ROUND(-Amount - "Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    end;
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    "Bal. VAT Amount" := -Amount;
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    if ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) and
                                                                       "Bal. Use Tax"
                                                                    then begin
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                    end else begin
                                                                      "Bal. VAT Amount" :=
                                                                        -(Amount -
                                                                          SalesTaxCalculate.ReverseCalculateTax(
                                                                            "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                            "Posting Date",Amount,Quantity,"Currency Factor"));
                                                                      if Amount + "Bal. VAT Amount" <> 0 then
                                                                        "Bal. VAT %" := ROUND(100 * -"Bal. VAT Amount" / (Amount + "Bal. VAT Amount"),0.00001)
                                                                      else
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                    end;
                                                                end;
                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");
                                                                "Bal. VAT Difference" := 0;

                                                                if "Currency Code" = '' then
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                else
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=ENU=Bal. VAT %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=false }
    { 69  ;   ;Bal. VAT Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
                                                                GenJnlBatch.TESTFIELD("Allow VAT Difference",true);
                                                                if not ("Bal. VAT Calculation Type" in
                                                                        ["Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT"])
                                                                then
                                                                  ERROR(
                                                                    Text010,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                    "Bal. VAT Calculation Type"::"Normal VAT","Bal. VAT Calculation Type"::"Reverse Charge VAT");
                                                                if "Bal. VAT Amount" <> 0 then begin
                                                                  TESTFIELD("Bal. VAT %");
                                                                  TESTFIELD(Amount);
                                                                end;

                                                                GetCurrency;
                                                                "Bal. VAT Amount" :=
                                                                  ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision",Currency.VATRoundingDirection);

                                                                if "Bal. VAT Amount" * Amount > 0 then
                                                                  if "Bal. VAT Amount" > 0 then
                                                                    ERROR(Text011,FIELDCAPTION("Bal. VAT Amount"))
                                                                  else
                                                                    ERROR(Text012,FIELDCAPTION("Bal. VAT Amount"));

                                                                "Bal. VAT Base Amount" := -(Amount + "Bal. VAT Amount");

                                                                "Bal. VAT Difference" :=
                                                                  "Bal. VAT Amount" -
                                                                  ROUND(
                                                                    -Amount * "Bal. VAT %" / (100 + "Bal. VAT %"),
                                                                    Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                if ABS("Bal. VAT Difference") > Currency."Max. VAT Difference Allowed" then
                                                                  ERROR(
                                                                    Text013,FIELDCAPTION("Bal. VAT Difference"),Currency."Max. VAT Difference Allowed");

                                                                if "Currency Code" = '' then
                                                                  "Bal. VAT Amount (LCY)" := "Bal. VAT Amount"
                                                                else
                                                                  "Bal. VAT Amount (LCY)" :=
                                                                    ROUND(
                                                                      CurrExchRate.ExchangeAmtFCYToLCY(
                                                                        "Posting Date","Currency Code",
                                                                        "Bal. VAT Amount","Currency Factor"));
                                                                "Bal. VAT Base Amount (LCY)" := -("Amount (LCY)" + "Bal. VAT Amount (LCY)");

                                                                UpdateSalesPurchLCY;
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 70  ;   ;Bank Payment Type   ;Option        ;OnValidate=BEGIN
                                                                if ("Bank Payment Type" <> "Bank Payment Type"::" ") and
                                                                   ("Account Type" <> "Account Type"::"Bank Account") and
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"Bank Account")
                                                                then
                                                                  ERROR(
                                                                    Text007,
                                                                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
                                                                if ("Account Type" = "Account Type"::"Fixed Asset") and
                                                                   ("Bank Payment Type" <> "Bank Payment Type"::" ")
                                                                then
                                                                  FIELDERROR("Account Type");
                                                              END;

                                                   AccessByPermission=TableData "Bank Account"=R;
                                                   CaptionML=ENU=Bank Payment Type;
                                                   OptionCaptionML=ENU=" ,Computer Check,Manual Check,Electronic Payment,Electronic Payment-IAT";
                                                   OptionString=" ","Computer Check","Manual Check","Electronic Payment","Electronic Payment-IAT" }
    { 71  ;   ;VAT Base Amount     ;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "VAT Base Amount" := ROUND("VAT Base Amount",Currency."Amount Rounding Precision");
                                                                case "VAT Calculation Type" of
                                                                  "VAT Calculation Type"::"Normal VAT",
                                                                  "VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        "VAT Base Amount" * (1 + "VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "VAT Calculation Type"::"Full VAT":
                                                                    if "VAT Base Amount" <> 0 then
                                                                      FIELDERROR(
                                                                        "VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("VAT Calculation Type"),
                                                                          "VAT Calculation Type"));
                                                                  "VAT Calculation Type"::"Sales Tax":
                                                                    if ("Gen. Posting Type" = "Gen. Posting Type"::Purchase) and
                                                                       "Use Tax"
                                                                    then begin
                                                                      "VAT Amount" := 0;
                                                                      "VAT %" := 0;
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    end else begin
                                                                      "VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Tax Area Code","Tax Group Code","Tax Liable","Posting Date",
                                                                          "VAT Base Amount",Quantity,"Currency Factor");
                                                                      if "VAT Base Amount" <> 0 then
                                                                        "VAT %" := ROUND(100 * "VAT Amount" / "VAT Base Amount",0.00001)
                                                                      else
                                                                        "VAT %" := 0;
                                                                      "VAT Amount" :=
                                                                        ROUND("VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := "VAT Base Amount" + "VAT Amount";
                                                                    end;
                                                                end;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=VAT Base Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 72  ;   ;Bal. VAT Base Amount;Decimal       ;OnValidate=BEGIN
                                                                GetCurrency;
                                                                "Bal. VAT Base Amount" := ROUND("Bal. VAT Base Amount",Currency."Amount Rounding Precision");
                                                                case "Bal. VAT Calculation Type" of
                                                                  "Bal. VAT Calculation Type"::"Normal VAT",
                                                                  "Bal. VAT Calculation Type"::"Reverse Charge VAT":
                                                                    Amount :=
                                                                      ROUND(
                                                                        -"Bal. VAT Base Amount" * (1 + "Bal. VAT %" / 100),
                                                                        Currency."Amount Rounding Precision",Currency.VATRoundingDirection);
                                                                  "Bal. VAT Calculation Type"::"Full VAT":
                                                                    if "Bal. VAT Base Amount" <> 0 then
                                                                      FIELDERROR(
                                                                        "Bal. VAT Base Amount",
                                                                        STRSUBSTNO(
                                                                          Text008,FIELDCAPTION("Bal. VAT Calculation Type"),
                                                                          "Bal. VAT Calculation Type"));
                                                                  "Bal. VAT Calculation Type"::"Sales Tax":
                                                                    if ("Bal. Gen. Posting Type" = "Bal. Gen. Posting Type"::Purchase) and
                                                                       "Bal. Use Tax"
                                                                    then begin
                                                                      "Bal. VAT Amount" := 0;
                                                                      "Bal. VAT %" := 0;
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    end else begin
                                                                      "Bal. VAT Amount" :=
                                                                        SalesTaxCalculate.CalculateTax(
                                                                          "Bal. Tax Area Code","Bal. Tax Group Code","Bal. Tax Liable",
                                                                          "Posting Date","Bal. VAT Base Amount",Quantity,"Currency Factor");
                                                                      if "Bal. VAT Base Amount" <> 0 then
                                                                        "Bal. VAT %" := ROUND(100 * "Bal. VAT Amount" / "Bal. VAT Base Amount",0.00001)
                                                                      else
                                                                        "Bal. VAT %" := 0;
                                                                      "Bal. VAT Amount" :=
                                                                        ROUND("Bal. VAT Amount",Currency."Amount Rounding Precision");
                                                                      Amount := -"Bal. VAT Base Amount" - "Bal. VAT Amount";
                                                                    end;
                                                                end;
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Base Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 73  ;   ;Correction          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE(Amount);
                                                              END;

                                                   CaptionML=ENU=Correction }
    { 75  ;   ;Check Printed       ;Boolean       ;AccessByPermission=TableData "Check Ledger Entry"=R;
                                                   CaptionML=ENU=Check Printed;
                                                   Editable=false }
    { 76  ;   ;Document Date       ;Date          ;OnValidate=BEGIN
                                                                VALIDATE("Payment Terms Code");
                                                              END;

                                                   CaptionML=ENU=Document Date;
                                                   ClosingDates=true }
    { 77  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 78  ;   ;Source Type         ;Option        ;OnValidate=BEGIN
                                                                if ("Account Type" <> "Account Type"::"G/L Account") and ("Account No." <> '') or
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") and ("Bal. Account No." <> '')
                                                                then
                                                                  UpdateSource
                                                                else
                                                                  "Source No." := '';
                                                              END;

                                                   CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee";
                                                   OptionString=" ",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee }
    { 79  ;   ;Source No.          ;Code20        ;TableRelation=IF ("Source Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Source Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Source Type"=CONST("Bank Account")) "Bank Account"
                                                                 ELSE IF ("Source Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                 ELSE IF ("Source Type"=CONST(Employee)) Employee;
                                                   OnValidate=BEGIN
                                                                if ("Account Type" <> "Account Type"::"G/L Account") and ("Account No." <> '') or
                                                                   ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") and ("Bal. Account No." <> '')
                                                                then
                                                                  UpdateSource;
                                                              END;

                                                   CaptionML=ENU=Source No. }
    { 80  ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=Posting No. Series }
    { 82  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Tax Area Code }
    { 83  ;   ;Tax Liable          ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Tax Liable }
    { 84  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Tax Group Code }
    { 85  ;   ;Use Tax             ;Boolean       ;OnValidate=BEGIN
                                                                if not "Use Tax" then
                                                                  exit;
                                                                TESTFIELD("Gen. Posting Type","Gen. Posting Type"::Purchase);
                                                                VALIDATE("VAT %");
                                                              END;

                                                   CaptionML=ENU=Use Tax }
    { 86  ;   ;Bal. Tax Area Code  ;Code20        ;TableRelation="Tax Area";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Tax Area Code }
    { 87  ;   ;Bal. Tax Liable     ;Boolean       ;OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Tax Liable }
    { 88  ;   ;Bal. Tax Group Code ;Code20        ;TableRelation="Tax Group";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Tax Group Code }
    { 89  ;   ;Bal. Use Tax        ;Boolean       ;OnValidate=BEGIN
                                                                if not "Bal. Use Tax" then
                                                                  exit;
                                                                TESTFIELD("Bal. Gen. Posting Type","Bal. Gen. Posting Type"::Purchase);
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. Use Tax }
    { 90  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] then
                                                                  TESTFIELD("VAT Bus. Posting Group",'');

                                                                VALIDATE("VAT Prod. Posting Group");

                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                end
                                                              END;

                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 91  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Bank Account"] then
                                                                  TESTFIELD("VAT Prod. Posting Group",'');

                                                                CheckVATInAlloc;

                                                                "VAT %" := 0;
                                                                "VAT Calculation Type" := "VAT Calculation Type"::"Normal VAT";
                                                                if "Gen. Posting Type" <> 0 then begin
                                                                  if not VATPostingSetup.GET("VAT Bus. Posting Group","VAT Prod. Posting Group") then
                                                                    VATPostingSetup.INIT;
                                                                  "VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  case "VAT Calculation Type" of
                                                                    "VAT Calculation Type"::"Normal VAT":
                                                                      "VAT %" := VATPostingSetup."VAT %";
                                                                    "VAT Calculation Type"::"Full VAT":
                                                                      case "Gen. Posting Type" of
                                                                        "Gen. Posting Type"::Sale:
                                                                          TESTFIELD("Account No.",VATPostingSetup.GetSalesAccount(false));
                                                                        "Gen. Posting Type"::Purchase:
                                                                          TESTFIELD("Account No.",VATPostingSetup.GetPurchAccount(false));
                                                                      end;
                                                                  end;
                                                                end;
                                                                VALIDATE("VAT %");

                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                end
                                                              END;

                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 92  ;   ;Bal. VAT Bus. Posting Group;Code20 ;TableRelation="VAT Business Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account Type" in
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                then
                                                                  TESTFIELD("Bal. VAT Bus. Posting Group",'');

                                                                VALIDATE("Bal. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Bus. Posting Group }
    { 93  ;   ;Bal. VAT Prod. Posting Group;Code20;TableRelation="VAT Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if "Bal. Account Type" in
                                                                   ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Bank Account"]
                                                                then
                                                                  TESTFIELD("Bal. VAT Prod. Posting Group",'');

                                                                "Bal. VAT %" := 0;
                                                                "Bal. VAT Calculation Type" := "Bal. VAT Calculation Type"::"Normal VAT";
                                                                if "Bal. Gen. Posting Type" <> 0 then begin
                                                                  if not VATPostingSetup.GET("Bal. VAT Bus. Posting Group","Bal. VAT Prod. Posting Group") then
                                                                    VATPostingSetup.INIT;
                                                                  "Bal. VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
                                                                  case "Bal. VAT Calculation Type" of
                                                                    "Bal. VAT Calculation Type"::"Normal VAT":
                                                                      "Bal. VAT %" := VATPostingSetup."VAT %";
                                                                    "Bal. VAT Calculation Type"::"Full VAT":
                                                                      case "Bal. Gen. Posting Type" of
                                                                        "Bal. Gen. Posting Type"::Sale:
                                                                          TESTFIELD("Bal. Account No.",VATPostingSetup.GetSalesAccount(false));
                                                                        "Bal. Gen. Posting Type"::Purchase:
                                                                          TESTFIELD("Bal. Account No.",VATPostingSetup.GetPurchAccount(false));
                                                                      end;
                                                                  end;
                                                                end;
                                                                VALIDATE("Bal. VAT %");
                                                              END;

                                                   CaptionML=ENU=Bal. VAT Prod. Posting Group }
    { 95  ;   ;Additional-Currency Posting;Option ;CaptionML=ENU=Additional-Currency Posting;
                                                   OptionCaptionML=ENU=None,Amount Only,Additional-Currency Amount Only;
                                                   OptionString=None,"Amount Only","Additional-Currency Amount Only";
                                                   Editable=false }
    { 98  ;   ;FA Add.-Currency Factor;Decimal    ;CaptionML=ENU=FA Add.-Currency Factor;
                                                   DecimalPlaces=0:15;
                                                   MinValue=0 }
    { 99  ;   ;Source Currency Code;Code10        ;TableRelation=Currency;
                                                   CaptionML=ENU=Source Currency Code;
                                                   Editable=false }
    { 100 ;   ;Source Currency Amount;Decimal     ;AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Source Currency Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 101 ;   ;Source Curr. VAT Base Amount;Decimal;
                                                   AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Source Curr. VAT Base Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 102 ;   ;Source Curr. VAT Amount;Decimal    ;AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Source Curr. VAT Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 103 ;   ;VAT Base Discount % ;Decimal       ;CaptionML=ENU=VAT Base Discount %;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100;
                                                   Editable=false }
    { 104 ;   ;VAT Amount (LCY)    ;Decimal       ;CaptionML=ENU=VAT Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 105 ;   ;VAT Base Amount (LCY);Decimal      ;CaptionML=ENU=VAT Base Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 106 ;   ;Bal. VAT Amount (LCY);Decimal      ;CaptionML=ENU=Bal. VAT Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 107 ;   ;Bal. VAT Base Amount (LCY);Decimal ;CaptionML=ENU=Bal. VAT Base Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 108 ;   ;Reversing Entry     ;Boolean       ;CaptionML=ENU=Reversing Entry;
                                                   Editable=false }
    { 109 ;   ;Allow Zero-Amount Posting;Boolean  ;CaptionML=ENU=Allow Zero-Amount Posting;
                                                   Editable=false }
    { 110 ;   ;Ship-to/Order Address Code;Code10  ;TableRelation=IF ("Account Type"=CONST(Customer)) "Ship-to Address".Code WHERE ("Customer No."=FIELD("Bill-to/Pay-to No."))
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) "Order Address".Code WHERE ("Vendor No."=FIELD("Bill-to/Pay-to No."))
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) "Ship-to Address".Code WHERE ("Customer No."=FIELD("Bill-to/Pay-to No."))
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) "Order Address".Code WHERE ("Vendor No."=FIELD("Bill-to/Pay-to No."));
                                                   CaptionML=ENU=Ship-to/Order Address Code }
    { 111 ;   ;VAT Difference      ;Decimal       ;CaptionML=ENU=VAT Difference;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 112 ;   ;Bal. VAT Difference ;Decimal       ;CaptionML=ENU=Bal. VAT Difference;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 113 ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=ENU=IC Partner Code;
                                                   Editable=false }
    { 114 ;   ;IC Direction        ;Option        ;CaptionML=ENU=IC Direction;
                                                   OptionCaptionML=ENU=Outgoing,Incoming;
                                                   OptionString=Outgoing,Incoming }
    { 116 ;   ;IC Partner G/L Acc. No.;Code20     ;TableRelation="IC G/L Account";
                                                   OnValidate=VAR
                                                                ICGLAccount@1000 : Record "IC G/L Account";
                                                              BEGIN
                                                                if "Journal Template Name" <> '' then
                                                                  if "IC Partner G/L Acc. No." <> '' then begin
                                                                    GetTemplate;
                                                                    GenJnlTemplate.TESTFIELD(Type,GenJnlTemplate.Type::Intercompany);
                                                                    if ICGLAccount.GET("IC Partner G/L Acc. No.") then
                                                                      ICGLAccount.TESTFIELD(Blocked,false);
                                                                  end
                                                              END;

                                                   CaptionML=ENU=IC Partner G/L Acc. No. }
    { 117 ;   ;IC Partner Transaction No.;Integer ;CaptionML=ENU=IC Partner Transaction No.;
                                                   Editable=false }
    { 118 ;   ;Sell-to/Buy-from No.;Code20        ;TableRelation=IF ("Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) Vendor;
                                                   OnValidate=BEGIN
                                                                ReadGLSetup;
                                                                if GLSetup."Bill-to/Sell-to VAT Calc." = GLSetup."Bill-to/Sell-to VAT Calc."::"Sell-to/Buy-from No." then
                                                                  UpdateCountryCodeAndVATRegNo("Sell-to/Buy-from No.");
                                                              END;

                                                   CaptionML=ENU=Sell-to/Buy-from No. }
    { 119 ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1000 : Record "VAT Registration No. Format";
                                                              BEGIN
                                                                VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',0);
                                                              END;

                                                   CaptionML=ENU=VAT Registration No. }
    { 120 ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   OnValidate=BEGIN
                                                                VALIDATE("VAT Registration No.");
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 121 ;   ;Prepayment          ;Boolean       ;CaptionML=ENU=Prepayment }
    { 122 ;   ;Financial Void      ;Boolean       ;CaptionML=ENU=Financial Void;
                                                   Editable=false }
    { 123 ;   ;Copy VAT Setup to Jnl. Lines;Boolean;
                                                   InitValue=true;
                                                   CaptionML=ENU=Copy VAT Setup to Jnl. Lines;
                                                   Editable=false }
    { 165 ;   ;Incoming Document Entry No.;Integer;TableRelation="Incoming Document";
                                                   OnValidate=VAR
                                                                IncomingDocument@1000 : Record "Incoming Document";
                                                              BEGIN
                                                                if Description = '' then
                                                                  Description := COPYSTR(IncomingDocument.Description,1,MAXSTRLEN(Description));
                                                                if "Incoming Document Entry No." = xRec."Incoming Document Entry No." then
                                                                  exit;

                                                                if "Incoming Document Entry No." = 0 then
                                                                  IncomingDocument.RemoveReferenceToWorkingDocument(xRec."Incoming Document Entry No.")
                                                                else
                                                                  IncomingDocument.SetGenJournalLine(Rec);
                                                              END;

                                                   CaptionML=ENU=Incoming Document Entry No. }
    { 170 ;   ;Creditor No.        ;Code20        ;CaptionML=ENU=Creditor No.;
                                                   Numeric=true }
    { 171 ;   ;Payment Reference   ;Code50        ;CaptionML=ENU=Payment Reference;
                                                   Numeric=true }
    { 172 ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method";
                                                   OnValidate=BEGIN
                                                                UpdatePaymentMethodId;
                                                              END;

                                                   CaptionML=ENU=Payment Method Code }
    { 173 ;   ;Applies-to Ext. Doc. No.;Code35    ;CaptionML=ENU=Applies-to Ext. Doc. No. }
    { 288 ;   ;Recipient Bank Account;Code10      ;TableRelation=IF ("Account Type"=CONST(Customer)) "Customer Bank Account".Code WHERE ("Customer No."=FIELD("Account No."))
                                                                 ELSE IF ("Account Type"=CONST(Vendor)) "Vendor Bank Account".Code WHERE ("Vendor No."=FIELD("Account No."))
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) "Customer Bank Account".Code WHERE ("Customer No."=FIELD("Bal. Account No."))
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) "Vendor Bank Account".Code WHERE ("Vendor No."=FIELD("Bal. Account No."));
                                                   OnValidate=BEGIN
                                                                if "Recipient Bank Account" = '' then
                                                                  exit;
                                                                if ("Document Type" = "Document Type"::Invoice) and
                                                                   (("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor]) or
                                                                    ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]))
                                                                then
                                                                  "Recipient Bank Account" := '';
                                                              END;

                                                   CaptionML=ENU=Recipient Bank Account }
    { 289 ;   ;Message to Recipient;Text140       ;CaptionML=ENU=Message to Recipient }
    { 290 ;   ;Exported to Payment File;Boolean   ;CaptionML=ENU=Exported to Payment File;
                                                   Editable=false }
    { 291 ;   ;Has Payment Export Error;Boolean   ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Payment Jnl. Export Error Text" WHERE ("Journal Template Name"=FIELD("Journal Template Name"),
                                                                                                             "Journal Batch Name"=FIELD("Journal Batch Name"),
                                                                                                             "Journal Line No."=FIELD("Line No.")));
                                                   CaptionML=ENU=Has Payment Export Error;
                                                   Editable=false }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 827 ;   ;Credit Card No.     ;Code20        ;CaptionML=ENU=Credit Card No. }
    { 1001;   ;Job Task No.        ;Code20        ;TableRelation="Job Task"."Job Task No." WHERE ("Job No."=FIELD("Job No."));
                                                   OnValidate=BEGIN
                                                                if "Job Task No." <> xRec."Job Task No." then
                                                                  VALIDATE("Job Planning Line No.",0);
                                                                if "Job Task No." = '' then begin
                                                                  "Job Quantity" := 0;
                                                                  "Job Currency Factor" := 0;
                                                                  "Job Currency Code" := '';
                                                                  "Job Unit Price" := 0;
                                                                  "Job Total Price" := 0;
                                                                  "Job Line Amount" := 0;
                                                                  "Job Line Discount Amount" := 0;
                                                                  "Job Unit Cost" := 0;
                                                                  "Job Total Cost" := 0;
                                                                  "Job Line Discount %" := 0;

                                                                  "Job Unit Price (LCY)" := 0;
                                                                  "Job Total Price (LCY)" := 0;
                                                                  "Job Line Amount (LCY)" := 0;
                                                                  "Job Line Disc. Amount (LCY)" := 0;
                                                                  "Job Unit Cost (LCY)" := 0;
                                                                  "Job Total Cost (LCY)" := 0;
                                                                  exit;
                                                                end;

                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  CopyDimensionsFromJobTaskLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Job Task No. }
    { 1002;   ;Job Unit Price (LCY);Decimal       ;AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Unit Price (LCY);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 1003;   ;Job Total Price (LCY);Decimal      ;AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Total Price (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1004;   ;Job Quantity        ;Decimal       ;OnValidate=BEGIN
                                                                if JobTaskIsSet then begin
                                                                  if "Job Planning Line No." <> 0 then
                                                                    VALIDATE("Job Planning Line No.");
                                                                  CreateTempJobJnlLine;
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Quantity;
                                                   DecimalPlaces=0:5 }
    { 1005;   ;Job Unit Cost (LCY) ;Decimal       ;AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Unit Cost (LCY);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 1006;   ;Job Line Discount % ;Decimal       ;OnValidate=BEGIN
                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Discount %","Job Line Discount %");
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Line Discount %;
                                                   AutoFormatType=1 }
    { 1007;   ;Job Line Disc. Amount (LCY);Decimal;OnValidate=BEGIN
                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Discount Amount (LCY)","Job Line Disc. Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Job Line Disc. Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1008;   ;Job Unit Of Measure Code;Code10    ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Job Unit Of Measure Code }
    { 1009;   ;Job Line Type       ;Option        ;OnValidate=BEGIN
                                                                if "Job Planning Line No." <> 0 then
                                                                  ERROR(Text019,FIELDCAPTION("Job Line Type"),FIELDCAPTION("Job Planning Line No."));
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Line Type;
                                                   OptionCaptionML=ENU=" ,Budget,Billable,Both Budget and Billable";
                                                   OptionString=" ",Budget,Billable,"Both Budget and Billable" }
    { 1010;   ;Job Unit Price      ;Decimal       ;OnValidate=BEGIN
                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Unit Price","Job Unit Price");
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Unit Price;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1011;   ;Job Total Price     ;Decimal       ;AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Total Price;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1012;   ;Job Unit Cost       ;Decimal       ;AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Unit Cost;
                                                   Editable=false;
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1013;   ;Job Total Cost      ;Decimal       ;AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Total Cost;
                                                   Editable=false;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1014;   ;Job Line Discount Amount;Decimal   ;OnValidate=BEGIN
                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Discount Amount","Job Line Discount Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Line Discount Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1015;   ;Job Line Amount     ;Decimal       ;OnValidate=BEGIN
                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Amount","Job Line Amount");
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Line Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Job Currency Code" }
    { 1016;   ;Job Total Cost (LCY);Decimal       ;AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Total Cost (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1017;   ;Job Line Amount (LCY);Decimal      ;OnValidate=BEGIN
                                                                if JobTaskIsSet then begin
                                                                  CreateTempJobJnlLine;
                                                                  TempJobJnlLine.VALIDATE("Line Amount (LCY)","Job Line Amount (LCY)");
                                                                  UpdatePricesFromJobJnlLine;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Line Amount (LCY);
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 1018;   ;Job Currency Factor ;Decimal       ;CaptionML=ENU=Job Currency Factor }
    { 1019;   ;Job Currency Code   ;Code10        ;OnValidate=BEGIN
                                                                if ("Job Currency Code" <> xRec."Job Currency Code") or ("Job Currency Code" <> '') then
                                                                  if JobTaskIsSet then begin
                                                                    CreateTempJobJnlLine;
                                                                    UpdatePricesFromJobJnlLine;
                                                                  end;
                                                              END;

                                                   CaptionML=ENU=Job Currency Code }
    { 1020;   ;Job Planning Line No.;Integer      ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record "Job Planning Line";
                                                              BEGIN
                                                                if "Job Planning Line No." <> 0 then begin
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  JobPlanningLine.TESTFIELD("Job No.","Job No.");
                                                                  JobPlanningLine.TESTFIELD("Job Task No.","Job Task No.");
                                                                  JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::"G/L Account");
                                                                  JobPlanningLine.TESTFIELD("No.","Account No.");
                                                                  JobPlanningLine.TESTFIELD("Usage Link",true);
                                                                  JobPlanningLine.TESTFIELD("System-Created Entry",false);
                                                                  "Job Line Type" := JobPlanningLine."Line Type" + 1;
                                                                  VALIDATE("Job Remaining Qty.",JobPlanningLine."Remaining Qty." - "Job Quantity");
                                                                end else
                                                                  VALIDATE("Job Remaining Qty.",0);
                                                              END;

                                                   OnLookup=VAR
                                                              JobPlanningLine@1000 : Record "Job Planning Line";
                                                            BEGIN
                                                              JobPlanningLine.SETRANGE("Job No.","Job No.");
                                                              JobPlanningLine.SETRANGE("Job Task No.","Job Task No.");
                                                              JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::"G/L Account");
                                                              JobPlanningLine.SETRANGE("No.","Account No.");
                                                              JobPlanningLine.SETRANGE("Usage Link",true);
                                                              JobPlanningLine.SETRANGE("System-Created Entry",false);

                                                              if PAGE.RUNMODAL(0,JobPlanningLine) = ACTION::LookupOK then
                                                                VALIDATE("Job Planning Line No.",JobPlanningLine."Line No.");
                                                            END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Planning Line No.;
                                                   BlankZero=true }
    { 1030;   ;Job Remaining Qty.  ;Decimal       ;OnValidate=VAR
                                                                JobPlanningLine@1000 : Record "Job Planning Line";
                                                              BEGIN
                                                                if ("Job Remaining Qty." <> 0) and ("Job Planning Line No." = 0) then
                                                                  ERROR(Text018,FIELDCAPTION("Job Remaining Qty."),FIELDCAPTION("Job Planning Line No."));

                                                                if "Job Planning Line No." <> 0 then begin
                                                                  JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
                                                                  if JobPlanningLine.Quantity >= 0 then begin
                                                                    if "Job Remaining Qty." < 0 then
                                                                      "Job Remaining Qty." := 0;
                                                                  end else begin
                                                                    if "Job Remaining Qty." > 0 then
                                                                      "Job Remaining Qty." := 0;
                                                                  end;
                                                                end;
                                                              END;

                                                   AccessByPermission=TableData Job=R;
                                                   CaptionML=ENU=Job Remaining Qty.;
                                                   DecimalPlaces=0:5 }
    { 1200;   ;Direct Debit Mandate ID;Code35     ;TableRelation=IF ("Account Type"=CONST(Customer)) "SEPA Direct Debit Mandate" WHERE ("Customer No."=FIELD("Account No."));
                                                   OnValidate=VAR
                                                                SEPADirectDebitMandate@1000 : Record "SEPA Direct Debit Mandate";
                                                              BEGIN
                                                                if "Direct Debit Mandate ID" = '' then
                                                                  exit;
                                                                TESTFIELD("Account Type","Account Type"::Customer);
                                                                SEPADirectDebitMandate.GET("Direct Debit Mandate ID");
                                                                SEPADirectDebitMandate.TESTFIELD("Customer No.","Account No.");
                                                                "Recipient Bank Account" := SEPADirectDebitMandate."Customer Bank Account Code";
                                                              END;

                                                   CaptionML=ENU=Direct Debit Mandate ID }
    { 1220;   ;Data Exch. Entry No.;Integer       ;TableRelation="Data Exch.";
                                                   CaptionML=ENU=Data Exch. Entry No.;
                                                   Editable=false }
    { 1221;   ;Payer Information   ;Text50        ;CaptionML=ENU=Payer Information }
    { 1222;   ;Transaction Information;Text100    ;CaptionML=ENU=Transaction Information }
    { 1223;   ;Data Exch. Line No. ;Integer       ;CaptionML=ENU=Data Exch. Line No.;
                                                   Editable=false }
    { 1224;   ;Applied Automatically;Boolean      ;CaptionML=ENU=Applied Automatically }
    { 1700;   ;Deferral Code       ;Code10        ;TableRelation="Deferral Template"."Deferral Code";
                                                   OnValidate=VAR
                                                                DeferralUtilities@1002 : Codeunit "Deferral Utilities";
                                                              BEGIN
                                                                if "Deferral Code" <> '' then
                                                                  TESTFIELD("Account Type","Account Type"::"G/L Account");

                                                                DeferralUtilities.DeferralCodeOnValidate("Deferral Code",DeferralDocType::"G/L","Journal Template Name","Journal Batch Name",
                                                                  0,'',"Line No.",GetDeferralAmount,"Posting Date",Description,"Currency Code");
                                                              END;

                                                   CaptionML=ENU=Deferral Code }
    { 1701;   ;Deferral Line No.   ;Integer       ;CaptionML=ENU=Deferral Line No. }
    { 5050;   ;Campaign No.        ;Code20        ;TableRelation=Campaign;
                                                   OnValidate=BEGIN
                                                                CreateDim(
                                                                  DATABASE::Campaign,"Campaign No.",
                                                                  DimMgt.TypeToTableID1("Account Type"),"Account No.",
                                                                  DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
                                                                  DATABASE::Job,"Job No.",
                                                                  DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code");
                                                              END;

                                                   CaptionML=ENU=Campaign No. }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=ENU=Prod. Order No.;
                                                   Editable=false }
    { 5600;   ;FA Posting Date     ;Date          ;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=FA Posting Date }
    { 5601;   ;FA Posting Type     ;Option        ;OnValidate=BEGIN
                                                                if  not (("Account Type" = "Account Type"::"Fixed Asset") or
                                                                         ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")) and
                                                                   ("FA Posting Type" = "FA Posting Type"::" ")
                                                                then begin
                                                                  "FA Posting Date" := 0D;
                                                                  "Salvage Value" := 0;
                                                                  "No. of Depreciation Days" := 0;
                                                                  "Depr. until FA Posting Date" := false;
                                                                  "Depr. Acquisition Cost" := false;
                                                                  "Maintenance Code" := '';
                                                                  "Insurance No." := '';
                                                                  "Budgeted FA No." := '';
                                                                  "Duplicate in Depreciation Book" := '';
                                                                  "Use Duplication List" := false;
                                                                  "FA Reclassification Entry" := false;
                                                                  "FA Error Entry No." := 0;
                                                                end;

                                                                if "FA Posting Type" <> "FA Posting Type"::"Acquisition Cost" then
                                                                  TESTFIELD("Insurance No.",'');
                                                                if "FA Posting Type" <> "FA Posting Type"::Maintenance then
                                                                  TESTFIELD("Maintenance Code",'');
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=FA Posting Type;
                                                   OptionCaptionML=ENU=" ,Acquisition Cost,Depreciation,Write-Down,Appreciation,Custom 1,Custom 2,Disposal,Maintenance";
                                                   OptionString=" ","Acquisition Cost",Depreciation,"Write-Down",Appreciation,"Custom 1","Custom 2",Disposal,Maintenance }
    { 5602;   ;Depreciation Book Code;Code10      ;TableRelation="Depreciation Book";
                                                   OnValidate=VAR
                                                                FADeprBook@1000 : Record "FA Depreciation Book";
                                                              BEGIN
                                                                if "Depreciation Book Code" = '' then
                                                                  exit;

                                                                if ("Account No." <> '') and
                                                                   ("Account Type" = "Account Type"::"Fixed Asset")
                                                                then begin
                                                                  FADeprBook.GET("Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                end;

                                                                if ("Bal. Account No." <> '') and
                                                                   ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset")
                                                                then begin
                                                                  FADeprBook.GET("Bal. Account No.","Depreciation Book Code");
                                                                  "Posting Group" := FADeprBook."FA Posting Group";
                                                                end;
                                                                GetFAVATSetup;
                                                                GetFAAddCurrExchRate;
                                                              END;

                                                   CaptionML=ENU=Depreciation Book Code }
    { 5603;   ;Salvage Value       ;Decimal       ;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=Salvage Value;
                                                   AutoFormatType=1 }
    { 5604;   ;No. of Depreciation Days;Integer   ;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=No. of Depreciation Days;
                                                   BlankZero=true }
    { 5605;   ;Depr. until FA Posting Date;Boolean;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=Depr. until FA Posting Date }
    { 5606;   ;Depr. Acquisition Cost;Boolean     ;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=Depr. Acquisition Cost }
    { 5609;   ;Maintenance Code    ;Code10        ;TableRelation=Maintenance;
                                                   OnValidate=BEGIN
                                                                if "Maintenance Code" <> '' then
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::Maintenance);
                                                              END;

                                                   CaptionML=ENU=Maintenance Code }
    { 5610;   ;Insurance No.       ;Code20        ;TableRelation=Insurance;
                                                   OnValidate=BEGIN
                                                                if "Insurance No." <> '' then
                                                                  TESTFIELD("FA Posting Type","FA Posting Type"::"Acquisition Cost");
                                                              END;

                                                   CaptionML=ENU=Insurance No. }
    { 5611;   ;Budgeted FA No.     ;Code20        ;TableRelation="Fixed Asset";
                                                   OnValidate=VAR
                                                                FA@1000 : Record "Fixed Asset";
                                                              BEGIN
                                                                if "Budgeted FA No." <> '' then begin
                                                                  FA.GET("Budgeted FA No.");
                                                                  FA.TESTFIELD("Budgeted Asset",true);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Budgeted FA No. }
    { 5612;   ;Duplicate in Depreciation Book;Code10;
                                                   TableRelation="Depreciation Book";
                                                   OnValidate=BEGIN
                                                                "Use Duplication List" := false;
                                                              END;

                                                   CaptionML=ENU=Duplicate in Depreciation Book }
    { 5613;   ;Use Duplication List;Boolean       ;OnValidate=BEGIN
                                                                "Duplicate in Depreciation Book" := '';
                                                              END;

                                                   AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=Use Duplication List }
    { 5614;   ;FA Reclassification Entry;Boolean  ;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=FA Reclassification Entry }
    { 5615;   ;FA Error Entry No.  ;Integer       ;TableRelation="FA Ledger Entry";
                                                   CaptionML=ENU=FA Error Entry No.;
                                                   BlankZero=true }
    { 5616;   ;Index Entry         ;Boolean       ;CaptionML=ENU=Index Entry }
    { 5617;   ;Source Line No.     ;Integer       ;CaptionML=ENU=Source Line No. }
    { 5618;   ;Comment             ;Text250       ;CaptionML=ENU=Comment }
    { 5701;   ;Check Exported      ;Boolean       ;CaptionML=ENU=Check Exported }
    { 5702;   ;Check Transmitted   ;Boolean       ;CaptionML=ENU=Check Transmitted }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 8001;   ;Account Id          ;GUID          ;TableRelation="G/L Account".Id;
                                                   OnValidate=BEGIN
                                                                UpdateAccountNo;
                                                              END;

                                                   CaptionML=ENU=Account Id }
    { 8002;   ;Customer Id         ;GUID          ;TableRelation=Customer.Id;
                                                   OnValidate=BEGIN
                                                                UpdateCustomerNo;
                                                              END;

                                                   CaptionML=ENU=Customer Id }
    { 8003;   ;Applies-to Invoice Id;GUID         ;TableRelation="Sales Invoice Header".Id;
                                                   OnValidate=BEGIN
                                                                UpdateAppliesToInvoiceNo;
                                                              END;

                                                   CaptionML=ENU=Applies-to Invoice Id }
    { 8004;   ;Contact Graph Id    ;Text250       ;CaptionML=ENU=Contact Graph Id }
    { 8005;   ;Last Modified DateTime;DateTime    ;CaptionML=ENU=Last Modified DateTime }
    { 8006;   ;Journal Batch Id    ;GUID          ;TableRelation="Gen. Journal Batch".Id;
                                                   OnValidate=BEGIN
                                                                UpdateJournalBatchName;
                                                              END;

                                                   CaptionML=ENU=Journal Batch Id }
    { 8007;   ;Payment Method Id   ;GUID          ;TableRelation="Payment Method".Id;
                                                   OnValidate=BEGIN
                                                                UpdatePaymentMethodCode;
                                                              END;

                                                   CaptionML=ENU=Payment Method Id }
  }
  KEYS
  {
    {    ;"Journal Template Name","Journal Batch Name","Line No.";
                                                   SumIndexFields="Balance (LCY)";
                                                   MaintainSIFTIndex=false;
                                                   Clustered=true }
    {    ;"Journal Template Name","Journal Batch Name","Posting Date","Document No.";
                                                   MaintainSQLIndex=false }
    {    ;"Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No." }
    {    ;"Document No."                          ;MaintainSQLIndex=false }
    {    ;"Incoming Document Entry No."            }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a G/L Account or Bank Account.';
      Text001@1001 : TextConst 'ENU=You must not specify %1 when %2 is %3.';
      Text002@1002 : TextConst 'ENU=cannot be specified without %1';
      ChangeCurrencyQst@1003 : TextConst '@@@="%1=FromCurrencyCode, %2=ToCurrencyCode";ENU=The Currency Code in the Gen. Journal Line will be changed from %1 to %2.\\Do you want to continue?';
      UpdateInterruptedErr@1005 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      Text006@1006 : TextConst 'ENU=The %1 option can only be used internally in the system.';
      Text007@1007 : TextConst '@@@="%1=Account Type,%2=Balance Account Type";ENU=%1 or %2 must be a bank account.';
      Text008@1008 : TextConst 'ENU=" must be 0 when %1 is %2."';
      Text009@1009 : TextConst 'ENU=LCY';
      Text010@1010 : TextConst 'ENU=%1 must be %2 or %3.';
      Text011@1011 : TextConst 'ENU=%1 must be negative.';
      Text012@1012 : TextConst 'ENU=%1 must be positive.';
      Text013@1013 : TextConst 'ENU=The %1 must not be more than %2.';
      GenJnlTemplate@1014 : Record "Gen. Journal Template";
      GenJnlBatch@1015 : Record "Gen. Journal Batch";
      GenJnlLine@1016 : Record "Gen. Journal Line";
      Currency@1022 : Record Currency;
      CurrExchRate@1023 : Record "Currency Exchange Rate";
      PaymentTerms@1024 : Record "Payment Terms";
      CustLedgEntry@1025 : Record "Cust. Ledger Entry";
      VendLedgEntry@1026 : Record "Vendor Ledger Entry";
      EmplLedgEntry@1020 : Record "Employee Ledger Entry";
      GenJnlAlloc@1027 : Record "Gen. Jnl. Allocation";
      VATPostingSetup@1028 : Record "VAT Posting Setup";
      GenBusPostingGrp@1035 : Record "Gen. Business Posting Group";
      GenProdPostingGrp@1036 : Record "Gen. Product Posting Group";
      GLSetup@1037 : Record "General Ledger Setup";
      Job@1060 : Record Job;
      SourceCodeSetup@1017 : Record "Source Code Setup";
      TempJobJnlLine@1059 : TEMPORARY Record "Job Journal Line";
      NoSeriesMgt@1040 : Codeunit NoSeriesManagement;
      CustCheckCreditLimit@1041 : Codeunit "Cust-Check Cr. Limit";
      SalesTaxCalculate@1042 : Codeunit "Sales Tax Calculate";
      GenJnlApply@1043 : Codeunit "Gen. Jnl.-Apply";
      GenJnlShowCTEntries@1039 : Codeunit "Gen. Jnl.-Show CT Entries";
      CustEntrySetApplID@1044 : Codeunit "Cust. Entry-SetAppl.ID";
      VendEntrySetApplID@1045 : Codeunit "Vend. Entry-SetAppl.ID";
      EmplEntrySetApplID@1029 : Codeunit "Empl. Entry-SetAppl.ID";
      DimMgt@1046 : Codeunit DimensionManagement;
      PaymentToleranceMgt@1053 : Codeunit "Payment Tolerance Management";
      DeferralUtilities@1051 : Codeunit "Deferral Utilities";
      ApprovalsMgmt@1069 : Codeunit "Approvals Mgmt.";
      Window@1004 : Dialog;
      DeferralDocType@1050 : 'Purchase,Sales,"G/L"';
      CurrencyCode@1052 : Code[10];
      Text014@1054 : TextConst '@@@="%1=Caption of Table Customer, %2=Customer No, %3=Caption of field Bill-to Customer No, %4=Value of Bill-to customer no.";ENU=The %1 %2 has a %3 %4.\\Do you still want to use %1 %2 in this journal line?';
      TemplateFound@1056 : Boolean;
      Text015@1058 : TextConst 'ENU=You are not allowed to apply and post an entry to an entry with an earlier posting date.\\Instead, post %1 %2 and then apply it to %3 %4.';
      CurrencyDate@1061 : Date;
      Text016@1062 : TextConst 'ENU=%1 must be G/L Account or Bank Account.';
      HideValidationDialog@1064 : Boolean;
      Text018@1066 : TextConst 'ENU=%1 can only be set when %2 is set.';
      Text019@1067 : TextConst 'ENU=%1 cannot be changed when %2 is set.';
      GLSetupRead@1019 : Boolean;
      ExportAgainQst@1038 : TextConst 'ENU=One or more of the selected lines have already been exported. Do you want to export them again?';
      NothingToExportErr@1021 : TextConst 'ENU=There is nothing to export.';
      NotExistErr@1068 : TextConst '@@@="%1=Document number";ENU=Document number %1 does not exist or is already closed.';
      DocNoFilterErr@1047 : TextConst 'ENU=The document numbers cannot be renumbered while there is an active filter on the Document No. field.';
      DueDateMsg@1150 : TextConst 'ENU=This posting date will cause an overdue payment.';
      CalcPostDateMsg@1169 : TextConst 'ENU=Processing payment journal lines #1##########';
      NoEntriesToVoidErr@1018 : TextConst 'ENU=There are no entries to void.';
      OnlyLocalCurrencyForEmployeeErr@1030 : TextConst 'ENU=The value of the Currency Code field must be empty. General journal lines in foreign currency are not supported for employee account type.';

    [External]
    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      exit(
        ("Account No." = '') and (Amount = 0) and
        (("Bal. Account No." = '') or not "System-Created Entry"));
    END;

    [External]
    PROCEDURE UpdateLineBalance@2();
    BEGIN
      if ((Amount > 0) and (not Correction)) or
         ((Amount < 0) and Correction)
      then begin
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      end else
        if Amount <> 0 then begin
          "Debit Amount" := 0;
          "Credit Amount" := -Amount;
        end;
      if "Currency Code" = '' then
        "Amount (LCY)" := Amount;
      case true of
        ("Account No." <> '') and ("Bal. Account No." <> ''):
          "Balance (LCY)" := 0;
        "Bal. Account No." <> '':
          "Balance (LCY)" := -"Amount (LCY)";
        else
          "Balance (LCY)" := "Amount (LCY)";
      end;

      CLEAR(GenJnlAlloc);
      GenJnlAlloc.UpdateAllocations(Rec);

      UpdateSalesPurchLCY;

      if ("Deferral Code" <> '') and (Amount <> xRec.Amount) and ((Amount <> 0) and (xRec.Amount <> 0)) then
        VALIDATE("Deferral Code");
    END;

    [External]
    PROCEDURE SetUpNewLine@9(LastGenJnlLine@1000 : Record "Gen. Journal Line";Balance@1001 : Decimal;BottomLine@1002 : Boolean);
    BEGIN
      GenJnlTemplate.GET("Journal Template Name");
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      if GenJnlLine.FINDFIRST then begin
        "Posting Date" := LastGenJnlLine."Posting Date";
        "Document Date" := LastGenJnlLine."Posting Date";
        "Document No." := LastGenJnlLine."Document No.";
        if BottomLine and
           (Balance - LastGenJnlLine."Balance (LCY)" = 0) and
           not LastGenJnlLine.EmptyLine
        then
          IncrementDocumentNo;
      end else begin
        "Posting Date" := WORKDATE;
        "Document Date" := WORKDATE;
        if GenJnlBatch."No. Series" <> '' then begin
          CLEAR(NoSeriesMgt);
          "Document No." := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
        end;
      end;
      if GenJnlTemplate.Recurring then
        "Recurring Method" := LastGenJnlLine."Recurring Method";
      case GenJnlTemplate.Type of
        GenJnlTemplate.Type::Payments:
          begin
            "Account Type" := "Account Type"::Vendor;
            "Document Type" := "Document Type"::Payment;
          end;
        else begin
          "Account Type" := LastGenJnlLine."Account Type";
          "Document Type" := LastGenJnlLine."Document Type";
        end;
      end;
      "Source Code" := GenJnlTemplate."Source Code";
      "Reason Code" := GenJnlBatch."Reason Code";
      "Posting No. Series" := GenJnlBatch."Posting No. Series";
      "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
      if ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::"Fixed Asset"]) and
         ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::"Fixed Asset"])
      then
        "Account Type" := "Account Type"::"G/L Account";
      VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
      Description := '';
      if GenJnlBatch."Suggest Balancing Amount" then
        SuggestBalancingAmount(LastGenJnlLine,BottomLine);

      UpdateJournalBatchID;

      OnAfterSetupNewLine(Rec,GenJnlTemplate,GenJnlBatch,LastGenJnlLine,Balance,BottomLine);
    END;

    [External]
    PROCEDURE InitNewLine@94(PostingDate@1000 : Date;DocumentDate@1001 : Date;PostingDescription@1002 : Text[50];ShortcutDim1Code@1003 : Code[20];ShortcutDim2Code@1004 : Code[20];DimSetID@1005 : Integer;ReasonCode@1006 : Code[10]);
    BEGIN
      INIT;
      "Posting Date" := PostingDate;
      "Document Date" := DocumentDate;
      Description := PostingDescription;
      "Shortcut Dimension 1 Code" := ShortcutDim1Code;
      "Shortcut Dimension 2 Code" := ShortcutDim2Code;
      "Dimension Set ID" := DimSetID;
      "Reason Code" := ReasonCode;
    END;

    [External]
    PROCEDURE CheckDocNoOnLines@78();
    VAR
      GenJnlBatch@1002 : Record "Gen. Journal Batch";
      GenJnlLine@1001 : Record "Gen. Journal Line";
      LastDocNo@1003 : Code[20];
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      if not GenJnlLine.FINDSET then
        exit;
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      if GenJnlBatch."No. Series" = '' then
        exit;

      CLEAR(NoSeriesMgt);
      repeat
        GenJnlLine.CheckDocNoBasedOnNoSeries(LastDocNo,GenJnlBatch."No. Series",NoSeriesMgt);
        LastDocNo := GenJnlLine."Document No.";
      until GenJnlLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CheckDocNoBasedOnNoSeries@74(LastDocNo@1002 : Code[20];NoSeriesCode@1000 : Code[20];VAR NoSeriesMgtInstance@1001 : Codeunit NoSeriesManagement);
    BEGIN
      if NoSeriesCode = '' then
        exit;

      if (LastDocNo = '') or ("Document No." <> LastDocNo) then
        TESTFIELD("Document No.",NoSeriesMgtInstance.GetNextNo(NoSeriesCode,"Posting Date",false));
    END;

    [External]
    PROCEDURE RenumberDocumentNo@68();
    VAR
      GenJnlLine2@1006 : Record "Gen. Journal Line";
      DocNo@1003 : Code[20];
      FirstDocNo@1008 : Code[20];
      FirstTempDocNo@1009 : Code[20];
      LastTempDocNo@1010 : Code[20];
    BEGIN
      TESTFIELD("Check Printed",false);

      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      if GenJnlBatch."No. Series" = '' then
        exit;
      if GETFILTER("Document No.") <> '' then
        ERROR(DocNoFilterErr);
      CLEAR(NoSeriesMgt);
      FirstDocNo := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series","Posting Date");
      FirstTempDocNo := 'RENUMBERED-000000001';
      // step1 - renumber to non-existing document number
      DocNo := FirstTempDocNo;
      GenJnlLine2 := Rec;
      GenJnlLine2.RESET;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);
      LastTempDocNo := DocNo;

      // step2 - renumber to real document number (within Filter)
      DocNo := FirstDocNo;
      GenJnlLine2.COPYFILTERS(Rec);
      GenJnlLine2 := Rec;
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      // step3 - renumber to real document number (outside filter)
      DocNo := INCSTR(DocNo);
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Document No.",FirstTempDocNo,LastTempDocNo);
      RenumberDocNoOnLines(DocNo,GenJnlLine2);

      GET("Journal Template Name","Journal Batch Name","Line No.");
    END;

    LOCAL PROCEDURE RenumberDocNoOnLines@69(VAR DocNo@1000 : Code[20];VAR GenJnlLine2@1001 : Record "Gen. Journal Line");
    VAR
      LastGenJnlLine@1002 : Record "Gen. Journal Line";
      GenJnlLine3@1005 : Record "Gen. Journal Line";
      PrevDocNo@1004 : Code[20];
      FirstDocNo@1006 : Code[20];
      First@1003 : Boolean;
    BEGIN
      FirstDocNo := DocNo;
      with GenJnlLine2 do begin
        SETCURRENTKEY("Journal Template Name","Journal Batch Name","Document No.");
        SETRANGE("Journal Template Name","Journal Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        LastGenJnlLine.INIT;
        First := true;
        if FINDSET then begin
          repeat
            if "Document No." = FirstDocNo then
              exit;
            if not First and (("Document No." <> PrevDocNo) or ("Bal. Account No." <> '')) and not LastGenJnlLine.EmptyLine then
              DocNo := INCSTR(DocNo);
            PrevDocNo := "Document No.";
            if "Document No." <> '' then begin
              if "Applies-to ID" = "Document No." then
                RenumberAppliesToID(GenJnlLine2,"Document No.",DocNo);
              RenumberAppliesToDocNo(GenJnlLine2,"Document No.",DocNo);
            end;
            GenJnlLine3.GET("Journal Template Name","Journal Batch Name","Line No.");
            GenJnlLine3."Document No." := DocNo;
            GenJnlLine3.MODIFY;
            First := false;
            LastGenJnlLine := GenJnlLine2
          until NEXT = 0
        end
      end
    END;

    LOCAL PROCEDURE RenumberAppliesToID@70(GenJnlLine2@1002 : Record "Gen. Journal Line";OriginalAppliesToID@1000 : Code[50];NewAppliesToID@1001 : Code[50]);
    VAR
      CustLedgEntry@1003 : Record "Cust. Ledger Entry";
      CustLedgEntry2@1009 : Record "Cust. Ledger Entry";
      VendLedgEntry@1004 : Record "Vendor Ledger Entry";
      VendLedgEntry2@1010 : Record "Vendor Ledger Entry";
      AccType@1005 : Option;
      AccNo@1006 : Code[20];
    BEGIN
      GetAccTypeAndNo(GenJnlLine2,AccType,AccNo);
      case AccType of
        "Account Type"::Customer:
          begin
            CustLedgEntry.SETRANGE("Customer No.",AccNo);
            CustLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            if CustLedgEntry.FINDSET then
              repeat
                CustLedgEntry2.GET(CustLedgEntry."Entry No.");
                CustLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry2);
              until CustLedgEntry.NEXT = 0;
          end;
        "Account Type"::Vendor:
          begin
            VendLedgEntry.SETRANGE("Vendor No.",AccNo);
            VendLedgEntry.SETRANGE("Applies-to ID",OriginalAppliesToID);
            if VendLedgEntry.FINDSET then
              repeat
                VendLedgEntry2.GET(VendLedgEntry."Entry No.");
                VendLedgEntry2."Applies-to ID" := NewAppliesToID;
                CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry2);
              until VendLedgEntry.NEXT = 0;
          end;
        else
          exit
      end;
      GenJnlLine2."Applies-to ID" := NewAppliesToID;
      GenJnlLine2.MODIFY;
    END;

    LOCAL PROCEDURE RenumberAppliesToDocNo@71(GenJnlLine2@1002 : Record "Gen. Journal Line";OriginalAppliesToDocNo@1001 : Code[20];NewAppliesToDocNo@1000 : Code[20]);
    BEGIN
      GenJnlLine2.RESET;
      GenJnlLine2.SETRANGE("Journal Template Name",GenJnlLine2."Journal Template Name");
      GenJnlLine2.SETRANGE("Journal Batch Name",GenJnlLine2."Journal Batch Name");
      GenJnlLine2.SETRANGE("Applies-to Doc. Type",GenJnlLine2."Document Type");
      GenJnlLine2.SETRANGE("Applies-to Doc. No.",OriginalAppliesToDocNo);
      GenJnlLine2.MODIFYALL("Applies-to Doc. No.",NewAppliesToDocNo);
    END;

    LOCAL PROCEDURE CheckVATInAlloc@1();
    BEGIN
      if "Gen. Posting Type" <> 0 then begin
        GenJnlAlloc.RESET;
        GenJnlAlloc.SETRANGE("Journal Template Name","Journal Template Name");
        GenJnlAlloc.SETRANGE("Journal Batch Name","Journal Batch Name");
        GenJnlAlloc.SETRANGE("Journal Line No.","Line No.");
        if GenJnlAlloc.FIND('-') then
          repeat
            GenJnlAlloc.CheckVAT(Rec);
          until GenJnlAlloc.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE SetCurrencyCode@4(AccType2@1000 : '"G/L Account",Customer,Vendor,"Bank Account"';AccNo2@1001 : Code[20]) : Boolean;
    VAR
      BankAcc@1002 : Record "Bank Account";
    BEGIN
      "Currency Code" := '';
      if AccNo2 <> '' then
        if AccType2 = AccType2::"Bank Account" then
          if BankAcc.GET(AccNo2) then
            "Currency Code" := BankAcc."Currency Code";
      exit("Currency Code" <> '');
    END;

    [External]
    PROCEDURE SetCurrencyFactor@130(CurrencyCode@1000 : Code[10];CurrencyFactor@1001 : Decimal);
    BEGIN
      "Currency Code" := CurrencyCode;
      if "Currency Code" = '' then
        "Currency Factor" := 1
      else
        "Currency Factor" := CurrencyFactor;
    END;

    LOCAL PROCEDURE GetCurrency@3();
    BEGIN
      if "Additional-Currency Posting" =
         "Additional-Currency Posting"::"Additional-Currency Amount Only"
      then begin
        if GLSetup."Additional Reporting Currency" = '' then
          ReadGLSetup;
        CurrencyCode := GLSetup."Additional Reporting Currency";
      end else
        CurrencyCode := "Currency Code";

      if CurrencyCode = '' then begin
        CLEAR(Currency);
        Currency.InitRoundingPrecision
      end else
        if CurrencyCode <> Currency.Code then begin
          Currency.GET(CurrencyCode);
          Currency.TESTFIELD("Amount Rounding Precision");
        end;
    END;

    [External]
    PROCEDURE UpdateSource@6();
    VAR
      SourceExists1@1000 : Boolean;
      SourceExists2@1001 : Boolean;
    BEGIN
      SourceExists1 := ("Account Type" <> "Account Type"::"G/L Account") and ("Account No." <> '');
      SourceExists2 := ("Bal. Account Type" <> "Bal. Account Type"::"G/L Account") and ("Bal. Account No." <> '');
      case true of
        SourceExists1 and not SourceExists2:
          begin
            "Source Type" := "Account Type";
            "Source No." := "Account No.";
          end;
        SourceExists2 and not SourceExists1:
          begin
            "Source Type" := "Bal. Account Type";
            "Source No." := "Bal. Account No.";
          end;
        else begin
          "Source Type" := "Source Type"::" ";
          "Source No." := '';
        end;
      end;
    END;

    LOCAL PROCEDURE CheckGLAcc@7(GLAcc@1000 : Record "G/L Account");
    BEGIN
      GLAcc.CheckGLAcc;
      if GLAcc."Direct Posting" or ("Journal Template Name" = '') or "System-Created Entry" then
        exit;
      if "Posting Date" <> 0D then
        if "Posting Date" = CLOSINGDATE("Posting Date") then
          exit;
      GLAcc.TESTFIELD("Direct Posting",true);
    END;

    LOCAL PROCEDURE CheckICPartner@128(ICPartnerCode@1000 : Code[20];AccountType@1001 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner"';AccountNo@1002 : Code[20]);
    VAR
      ICPartner@1003 : Record "IC Partner";
    BEGIN
      if ICPartnerCode <> '' then begin
        if GenJnlTemplate.GET("Journal Template Name") then;
        if (ICPartnerCode <> '') and ICPartner.GET(ICPartnerCode) then begin
          ICPartner.CheckICPartnerIndirect(FORMAT(AccountType),AccountNo);
          "IC Partner Code" := ICPartnerCode;
        end;
      end;
    END;

    [External]
    PROCEDURE GetFAAddCurrExchRate@8();
    VAR
      DeprBook@1000 : Record "Depreciation Book";
      FADeprBook@1003 : Record "FA Depreciation Book";
      FANo@1001 : Code[20];
      UseFAAddCurrExchRate@1002 : Boolean;
    BEGIN
      "FA Add.-Currency Factor" := 0;
      if ("FA Posting Type" <> "FA Posting Type"::" ") and
         ("Depreciation Book Code" <> '')
      then begin
        if "Account Type" = "Account Type"::"Fixed Asset" then
          FANo := "Account No.";
        if "Bal. Account Type" = "Bal. Account Type"::"Fixed Asset" then
          FANo := "Bal. Account No.";
        if FANo <> '' then begin
          DeprBook.GET("Depreciation Book Code");
          case "FA Posting Type" of
            "FA Posting Type"::"Acquisition Cost":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate - Acq. Cost";
            "FA Posting Type"::Depreciation:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Depr.";
            "FA Posting Type"::"Write-Down":
              UseFAAddCurrExchRate := DeprBook."Add-Curr Exch Rate -Write-Down";
            "FA Posting Type"::Appreciation:
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch. Rate - Apprec.";
            "FA Posting Type"::"Custom 1":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 1";
            "FA Posting Type"::"Custom 2":
              UseFAAddCurrExchRate := DeprBook."Add-Curr. Exch Rate - Custom 2";
            "FA Posting Type"::Disposal:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Disp.";
            "FA Posting Type"::Maintenance:
              UseFAAddCurrExchRate := DeprBook."Add.-Curr. Exch. Rate - Maint.";
          end;
          if UseFAAddCurrExchRate then begin
            FADeprBook.GET(FANo,"Depreciation Book Code");
            FADeprBook.TESTFIELD("FA Add.-Currency Factor");
            "FA Add.-Currency Factor" := FADeprBook."FA Add.-Currency Factor";
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE GetShowCurrencyCode@10(CurrencyCode@1000 : Code[10]) : Code[10];
    BEGIN
      if CurrencyCode <> '' then
        exit(CurrencyCode);

      exit(Text009);
    END;

    [External]
    PROCEDURE ClearCustVendApplnEntry@11();
    VAR
      TempCustLedgEntry@1000 : TEMPORARY Record "Cust. Ledger Entry";
      TempVendLedgEntry@1001 : TEMPORARY Record "Vendor Ledger Entry";
      TempEmplLedgEntry@1002 : TEMPORARY Record "Employee Ledger Entry";
      AccType@1004 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee';
      AccNo@1005 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      case AccType of
        AccType::Customer:
          if xRec."Applies-to ID" <> '' then begin
            if FindFirstCustLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID") then begin
              ClearCustApplnEntryFields;
              TempCustLedgEntry.DELETEALL;
              CustEntrySetApplID.SetApplId(CustLedgEntry,TempCustLedgEntry,'');
            end
          end else
            if xRec."Applies-to Doc. No." <> '' then
              if FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.") then begin
                ClearCustApplnEntryFields;
                CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
              end;
        AccType::Vendor:
          if xRec."Applies-to ID" <> '' then begin
            if FindFirstVendLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID") then begin
              ClearVendApplnEntryFields;
              TempVendLedgEntry.DELETEALL;
              VendEntrySetApplID.SetApplId(VendLedgEntry,TempVendLedgEntry,'');
            end
          end else
            if xRec."Applies-to Doc. No." <> '' then
              if FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.") then begin
                ClearVendApplnEntryFields;
                CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
              end;
        AccType::Employee:
          if xRec."Applies-to ID" <> '' then begin
            if FindFirstEmplLedgEntryWithAppliesToID(AccNo,xRec."Applies-to ID") then begin
              ClearEmplApplnEntryFields;
              TempEmplLedgEntry.DELETEALL;
              EmplEntrySetApplID.SetApplId(EmplLedgEntry,TempEmplLedgEntry,'');
            end
          end else
            if xRec."Applies-to Doc. No." <> '' then
              if FindFirstEmplLedgEntryWithAppliesToDocNo(AccNo,xRec."Applies-to Doc. No.") then begin
                ClearEmplApplnEntryFields;
                CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",EmplLedgEntry);
              end;
      end;
    END;

    LOCAL PROCEDURE ClearCustApplnEntryFields@56();
    BEGIN
      CustLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
      CustLedgEntry."Accepted Payment Tolerance" := 0;
      CustLedgEntry."Amount to Apply" := 0;
    END;

    LOCAL PROCEDURE ClearVendApplnEntryFields@57();
    BEGIN
      VendLedgEntry."Accepted Pmt. Disc. Tolerance" := false;
      VendLedgEntry."Accepted Payment Tolerance" := 0;
      VendLedgEntry."Amount to Apply" := 0;
    END;

    LOCAL PROCEDURE ClearEmplApplnEntryFields@193();
    BEGIN
      EmplLedgEntry."Amount to Apply" := 0;
    END;

    [External]
    PROCEDURE CheckFixedCurrency@12() : Boolean;
    VAR
      CurrExchRate@1000 : Record "Currency Exchange Rate";
    BEGIN
      CurrExchRate.SETRANGE("Currency Code","Currency Code");
      CurrExchRate.SETRANGE("Starting Date",0D,"Posting Date");

      if not CurrExchRate.FINDLAST then
        exit(false);

      if CurrExchRate."Relational Currency Code" = '' then
        exit(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      if CurrExchRate."Fix Exchange Rate Amount" <>
         CurrExchRate."Fix Exchange Rate Amount"::Both
      then
        exit(false);

      CurrExchRate.SETRANGE("Currency Code",CurrExchRate."Relational Currency Code");
      if CurrExchRate.FINDLAST then
        exit(
          CurrExchRate."Fix Exchange Rate Amount" =
          CurrExchRate."Fix Exchange Rate Amount"::Both);

      exit(false);
    END;

    [External]
    PROCEDURE CreateDim@13(Type1@1000 : Integer;No1@1001 : Code[20];Type2@1002 : Integer;No2@1003 : Code[20];Type3@1004 : Integer;No3@1005 : Code[20];Type4@1006 : Integer;No4@1007 : Code[20];Type5@1008 : Integer;No5@1009 : Code[20]);
    VAR
      TableID@1010 : ARRAY [10] OF Integer;
      No@1011 : ARRAY [10] OF Code[20];
    BEGIN
      TableID[1] := Type1;
      No[1] := No1;
      TableID[2] := Type2;
      No[2] := No2;
      TableID[3] := Type3;
      No[3] := No3;
      TableID[4] := Type4;
      No[4] := No4;
      TableID[5] := Type5;
      No[5] := No5;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@14(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",false);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@18(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      TESTFIELD("Check Printed",false);
      DimMgt.LookupDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimMgt.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE ShowDimensions@26();
    BEGIN
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',"Journal Template Name","Journal Batch Name","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE GetFAVATSetup@17();
    VAR
      LocalGLAcc@1000 : Record "G/L Account";
      FAPostingGr@1001 : Record "FA Posting Group";
      FABalAcc@1002 : Boolean;
    BEGIN
      if CurrFieldNo = 0 then
        exit;
      if ("Account Type" <> "Account Type"::"Fixed Asset") and
         ("Bal. Account Type" <> "Bal. Account Type"::"Fixed Asset")
      then
        exit;
      FABalAcc := ("Bal. Account Type" = "Bal. Account Type"::"Fixed Asset");
      if not FABalAcc then begin
        ClearPostingGroups;
        "Tax Group Code" := '';
        VALIDATE("VAT Prod. Posting Group");
      end;
      if FABalAcc then begin
        ClearBalancePostingGroups;
        "Bal. Tax Group Code" := '';
        VALIDATE("Bal. VAT Prod. Posting Group");
      end;
      if "Copy VAT Setup to Jnl. Lines" then
        if (("FA Posting Type" = "FA Posting Type"::"Acquisition Cost") or
            ("FA Posting Type" = "FA Posting Type"::Disposal) or
            ("FA Posting Type" = "FA Posting Type"::Maintenance)) and
           ("Posting Group" <> '')
        then
          if FAPostingGr.GET("Posting Group") then begin
            case "FA Posting Type" of
              "FA Posting Type"::"Acquisition Cost":
                LocalGLAcc.GET(FAPostingGr.GetAcquisitionCostAccount);
              "FA Posting Type"::Disposal:
                LocalGLAcc.GET(FAPostingGr.GetAcquisitionCostAccountOnDisposal);
              "FA Posting Type"::Maintenance:
                LocalGLAcc.GET(FAPostingGr.GetMaintenanceExpenseAccount);
            end;
            LocalGLAcc.CheckGLAcc;
            if not FABalAcc then begin
              "Gen. Posting Type" := LocalGLAcc."Gen. Posting Type";
              "Gen. Bus. Posting Group" := LocalGLAcc."Gen. Bus. Posting Group";
              "Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
              "VAT Bus. Posting Group" := LocalGLAcc."VAT Bus. Posting Group";
              "VAT Prod. Posting Group" := LocalGLAcc."VAT Prod. Posting Group";
              "Tax Group Code" := LocalGLAcc."Tax Group Code";
              VALIDATE("VAT Prod. Posting Group");
            end else begin;
              "Bal. Gen. Posting Type" := LocalGLAcc."Gen. Posting Type";
              "Bal. Gen. Bus. Posting Group" := LocalGLAcc."Gen. Bus. Posting Group";
              "Bal. Gen. Prod. Posting Group" := LocalGLAcc."Gen. Prod. Posting Group";
              "Bal. VAT Bus. Posting Group" := LocalGLAcc."VAT Bus. Posting Group";
              "Bal. VAT Prod. Posting Group" := LocalGLAcc."VAT Prod. Posting Group";
              "Bal. Tax Group Code" := LocalGLAcc."Tax Group Code";
              VALIDATE("Bal. VAT Prod. Posting Group");
            end;
          end;
    END;

    LOCAL PROCEDURE GetFADeprBook@114();
    VAR
      FASetup@1000 : Record "FA Setup";
      FADeprBook@1001 : Record "FA Depreciation Book";
      DefaultFADeprBook@1002 : Record "FA Depreciation Book";
    BEGIN
      if "Depreciation Book Code" = '' then begin
        FASetup.GET;

        DefaultFADeprBook.SETRANGE("FA No.","Account No.");
        DefaultFADeprBook.SETRANGE("Default FA Depreciation Book",true);

        case true of
          DefaultFADeprBook.FINDFIRST:
            "Depreciation Book Code" := DefaultFADeprBook."Depreciation Book Code";
          FADeprBook.GET("Account No.",FASetup."Default Depr. Book"):
            "Depreciation Book Code" := FASetup."Default Depr. Book";
          else
            "Depreciation Book Code" := '';
        end;
      end;

      if "Depreciation Book Code" <> '' then begin
        FADeprBook.GET("Account No.","Depreciation Book Code");
        "Posting Group" := FADeprBook."FA Posting Group";
      end;
    END;

    [External]
    PROCEDURE GetTemplate@16();
    BEGIN
      if not TemplateFound then
        GenJnlTemplate.GET("Journal Template Name");
      TemplateFound := true;
    END;

    LOCAL PROCEDURE UpdateSalesPurchLCY@19();
    BEGIN
      "Sales/Purch. (LCY)" := 0;
      if (not "System-Created Entry") and ("Document Type" in ["Document Type"::Invoice,"Document Type"::"Credit Memo"]) then begin
        if ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor]) and ("Bal. Account No." <> '') then
          "Sales/Purch. (LCY)" := "Amount (LCY)" + "Bal. VAT Amount (LCY)";
        if ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) and ("Account No." <> '') then
          "Sales/Purch. (LCY)" := -("Amount (LCY)" - "VAT Amount (LCY)");
      end;
    END;

    [Internal]
    PROCEDURE LookUpAppliesToDocCust@35(AccNo@1000 : Code[20]);
    VAR
      ApplyCustEntries@1002 : Page "Apply Customer Entries";
    BEGIN
      CLEAR(CustLedgEntry);
      CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive,"Due Date");
      if AccNo <> '' then
        CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,true);
      if "Applies-to Doc. No." <> '' then begin
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if CustLedgEntry.ISEMPTY then begin
          CustLedgEntry.SETRANGE("Document Type");
          CustLedgEntry.SETRANGE("Document No.");
        end;
      end;
      if "Applies-to ID" <> '' then begin
        CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        if CustLedgEntry.ISEMPTY then
          CustLedgEntry.SETRANGE("Applies-to ID");
      end;
      if "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " then begin
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        if CustLedgEntry.ISEMPTY then
          CustLedgEntry.SETRANGE("Document Type");
      end;
      if Amount <> 0 then begin
        CustLedgEntry.SETRANGE(Positive,Amount < 0);
        if CustLedgEntry.ISEMPTY then
          CustLedgEntry.SETRANGE(Positive);
      end;
      ApplyCustEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
      ApplyCustEntries.SETRECORD(CustLedgEntry);
      ApplyCustEntries.LOOKUPMODE(true);
      if ApplyCustEntries.RUNMODAL = ACTION::LookupOK then begin
        ApplyCustEntries.GETRECORD(CustLedgEntry);
        if AccNo = '' then begin
          AccNo := CustLedgEntry."Customer No.";
          if "Bal. Account Type" = "Bal. Account Type"::Customer then
            VALIDATE("Bal. Account No.",AccNo)
          else
            VALIDATE("Account No.",AccNo);
        end;
        SetAmountWithCustLedgEntry;
        "Applies-to Doc. Type" := CustLedgEntry."Document Type";
        "Applies-to Doc. No." := CustLedgEntry."Document No.";
        "Applies-to ID" := '';
      end;
    END;

    [Internal]
    PROCEDURE LookUpAppliesToDocVend@36(AccNo@1000 : Code[20]);
    VAR
      ApplyVendEntries@1001 : Page "Apply Vendor Entries";
    BEGIN
      CLEAR(VendLedgEntry);
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      if AccNo <> '' then
        VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,true);
      if "Applies-to Doc. No." <> '' then begin
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if VendLedgEntry.ISEMPTY then begin
          VendLedgEntry.SETRANGE("Document Type");
          VendLedgEntry.SETRANGE("Document No.");
        end;
      end;
      if "Applies-to ID" <> '' then begin
        VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        if VendLedgEntry.ISEMPTY then
          VendLedgEntry.SETRANGE("Applies-to ID");
      end;
      if "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " then begin
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        if VendLedgEntry.ISEMPTY then
          VendLedgEntry.SETRANGE("Document Type");
      end;
      if  "Applies-to Doc. No." <> ''then begin
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if VendLedgEntry.ISEMPTY then
          VendLedgEntry.SETRANGE("Document No.");
      end;
      if Amount <> 0 then begin
        VendLedgEntry.SETRANGE(Positive,Amount < 0);
        if VendLedgEntry.ISEMPTY then;
        VendLedgEntry.SETRANGE(Positive);
      end;
      ApplyVendEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
      ApplyVendEntries.SETRECORD(VendLedgEntry);
      ApplyVendEntries.LOOKUPMODE(true);
      if ApplyVendEntries.RUNMODAL = ACTION::LookupOK then begin
        ApplyVendEntries.GETRECORD(VendLedgEntry);
        if AccNo = '' then begin
          AccNo := VendLedgEntry."Vendor No.";
          if "Bal. Account Type" = "Bal. Account Type"::Vendor then
            VALIDATE("Bal. Account No.",AccNo)
          else
            VALIDATE("Account No.",AccNo);
        end;
        SetAmountWithVendLedgEntry;
        "Applies-to Doc. Type" := VendLedgEntry."Document Type";
        "Applies-to Doc. No." := VendLedgEntry."Document No.";
        "Applies-to ID" := '';
      end;
    END;

    [Internal]
    PROCEDURE LookUpAppliesToDocEmpl@171(AccNo@1000 : Code[20]);
    VAR
      ApplyEmplEntries@1001 : Page "Apply Employee Entries";
    BEGIN
      CLEAR(EmplLedgEntry);
      EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
      if AccNo <> '' then
        EmplLedgEntry.SETRANGE("Employee No.",AccNo);
      EmplLedgEntry.SETRANGE(Open,true);
      if "Applies-to Doc. No." <> '' then begin
        EmplLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        EmplLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if EmplLedgEntry.ISEMPTY then begin
          EmplLedgEntry.SETRANGE("Document Type");
          EmplLedgEntry.SETRANGE("Document No.");
        end;
      end;
      if "Applies-to ID" <> '' then begin
        EmplLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        if EmplLedgEntry.ISEMPTY then
          EmplLedgEntry.SETRANGE("Applies-to ID");
      end;
      if "Applies-to Doc. Type" <> "Applies-to Doc. Type"::" " then begin
        EmplLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        if EmplLedgEntry.ISEMPTY then
          EmplLedgEntry.SETRANGE("Document Type");
      end;
      if  "Applies-to Doc. No." <> '' then begin
        EmplLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if EmplLedgEntry.ISEMPTY then
          EmplLedgEntry.SETRANGE("Document No.");
      end;
      if Amount <> 0 then begin
        EmplLedgEntry.SETRANGE(Positive,Amount < 0);
        if EmplLedgEntry.ISEMPTY then;
        EmplLedgEntry.SETRANGE(Positive);
      end;
      ApplyEmplEntries.SetGenJnlLine(Rec,GenJnlLine.FIELDNO("Applies-to Doc. No."));
      ApplyEmplEntries.SETTABLEVIEW(EmplLedgEntry);
      ApplyEmplEntries.SETRECORD(EmplLedgEntry);
      ApplyEmplEntries.LOOKUPMODE(true);
      if ApplyEmplEntries.RUNMODAL = ACTION::LookupOK then begin
        ApplyEmplEntries.GETRECORD(EmplLedgEntry);
        if AccNo = '' then begin
          AccNo := EmplLedgEntry."Employee No.";
          if "Bal. Account Type" = "Bal. Account Type"::Employee then
            VALIDATE("Bal. Account No.",AccNo)
          else
            VALIDATE("Account No.",AccNo);
        end;
        SetAmountWithEmplLedgEntry;
        "Applies-to Doc. Type" := EmplLedgEntry."Document Type";
        "Applies-to Doc. No." := EmplLedgEntry."Document No.";
        "Applies-to ID" := '';
      end;
    END;

    [External]
    PROCEDURE SetApplyToAmount@20();
    BEGIN
      case "Account Type" of
        "Account Type"::Customer:
          begin
            CustLedgEntry.SETCURRENTKEY("Document No.");
            CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
            CustLedgEntry.SETRANGE("Customer No.","Account No.");
            CustLedgEntry.SETRANGE(Open,true);
            if CustLedgEntry.FIND('-') then
              if CustLedgEntry."Amount to Apply" = 0 then begin
                CustLedgEntry.CALCFIELDS("Remaining Amount");
                CustLedgEntry."Amount to Apply" := CustLedgEntry."Remaining Amount";
                CODEUNIT.RUN(CODEUNIT::"Cust. Entry-Edit",CustLedgEntry);
              end;
          end;
        "Account Type"::Vendor:
          begin
            VendLedgEntry.SETCURRENTKEY("Document No.");
            VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
            VendLedgEntry.SETRANGE("Vendor No.","Account No.");
            VendLedgEntry.SETRANGE(Open,true);
            if VendLedgEntry.FIND('-') then
              if VendLedgEntry."Amount to Apply" = 0 then  begin
                VendLedgEntry.CALCFIELDS("Remaining Amount");
                VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
                CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
              end;
          end;
        "Account Type"::Employee:
          begin
            EmplLedgEntry.SETCURRENTKEY("Document No.");
            EmplLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
            EmplLedgEntry.SETRANGE("Employee No.","Account No.");
            EmplLedgEntry.SETRANGE(Open,true);
            if EmplLedgEntry.FIND('-') then
              if EmplLedgEntry."Amount to Apply" = 0 then begin
                EmplLedgEntry.CALCFIELDS("Remaining Amount");
                EmplLedgEntry."Amount to Apply" := EmplLedgEntry."Remaining Amount";
                CODEUNIT.RUN(CODEUNIT::"Empl. Entry-Edit",EmplLedgEntry);
              end;
          end;
      end;
    END;

    [External]
    PROCEDURE ValidateApplyRequirements@21(TempGenJnlLine@1000 : TEMPORARY Record "Gen. Journal Line");
    BEGIN
      if (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Customer) or
         (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor) or
         (TempGenJnlLine."Bal. Account Type" = TempGenJnlLine."Bal. Account Type"::Vendor)
      then
        CODEUNIT.RUN(CODEUNIT::"Exchange Acc. G/L Journal Line",TempGenJnlLine);

      case TempGenJnlLine."Account Type" of
        TempGenJnlLine."Account Type"::Customer:
          if TempGenJnlLine."Applies-to ID" <> '' then begin
            CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
            CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
            CustLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
            CustLedgEntry.SETRANGE(Open,true);
            if CustLedgEntry.FIND('-') then
              repeat
                if TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" then
                  ERROR(
                    Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                    CustLedgEntry."Document Type",CustLedgEntry."Document No.");
              until CustLedgEntry.NEXT = 0;
          end else
            if TempGenJnlLine."Applies-to Doc. No." <> '' then begin
              CustLedgEntry.SETCURRENTKEY("Document No.");
              CustLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
              if TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " then
                CustLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
              CustLedgEntry.SETRANGE("Customer No.",TempGenJnlLine."Account No.");
              CustLedgEntry.SETRANGE(Open,true);
              if CustLedgEntry.FIND('-') then
                if TempGenJnlLine."Posting Date" < CustLedgEntry."Posting Date" then
                  ERROR(
                    Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                    CustLedgEntry."Document Type",CustLedgEntry."Document No.");
            end;
        TempGenJnlLine."Account Type"::Vendor:
          if TempGenJnlLine."Applies-to ID" <> '' then begin
            VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
            VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
            VendLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
            VendLedgEntry.SETRANGE(Open,true);
            repeat
              if TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" then
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            until VendLedgEntry.NEXT = 0;
            if VendLedgEntry.FIND('-') then
              ;
          end else
            if TempGenJnlLine."Applies-to Doc. No." <> '' then begin
              VendLedgEntry.SETCURRENTKEY("Document No.");
              VendLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
              if TempGenJnlLine."Applies-to Doc. Type" <> TempGenJnlLine."Applies-to Doc. Type"::" " then
                VendLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
              VendLedgEntry.SETRANGE("Vendor No.",TempGenJnlLine."Account No.");
              VendLedgEntry.SETRANGE(Open,true);
              if VendLedgEntry.FIND('-') then
                if TempGenJnlLine."Posting Date" < VendLedgEntry."Posting Date" then
                  ERROR(
                    Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                    VendLedgEntry."Document Type",VendLedgEntry."Document No.");
            end;
        TempGenJnlLine."Account Type"::Employee:
          if TempGenJnlLine."Applies-to ID" <> '' then begin
            EmplLedgEntry.SETCURRENTKEY("Employee No.","Applies-to ID",Open);
            EmplLedgEntry.SETRANGE("Employee No.",TempGenJnlLine."Account No.");
            EmplLedgEntry.SETRANGE("Applies-to ID",TempGenJnlLine."Applies-to ID");
            EmplLedgEntry.SETRANGE(Open,true);
            repeat
              if TempGenJnlLine."Posting Date" < EmplLedgEntry."Posting Date" then
                ERROR(
                  Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                  EmplLedgEntry."Document Type",EmplLedgEntry."Document No.");
            until EmplLedgEntry.NEXT = 0;
            if EmplLedgEntry.FIND('-') then
              ;
          end else
            if TempGenJnlLine."Applies-to Doc. No." <> '' then begin
              EmplLedgEntry.SETCURRENTKEY("Document No.");
              EmplLedgEntry.SETRANGE("Document No.",TempGenJnlLine."Applies-to Doc. No.");
              if TempGenJnlLine."Applies-to Doc. Type" <> EmplLedgEntry."Applies-to Doc. Type"::" " then
                EmplLedgEntry.SETRANGE("Document Type",TempGenJnlLine."Applies-to Doc. Type");
              EmplLedgEntry.SETRANGE("Employee No.",TempGenJnlLine."Account No.");
              EmplLedgEntry.SETRANGE(Open,true);
              if EmplLedgEntry.FIND('-') then
                if TempGenJnlLine."Posting Date" < EmplLedgEntry."Posting Date" then
                  ERROR(
                    Text015,TempGenJnlLine."Document Type",TempGenJnlLine."Document No.",
                    EmplLedgEntry."Document Type",EmplLedgEntry."Document No.");
            end;
      end;
    END;

    LOCAL PROCEDURE UpdateCountryCodeAndVATRegNo@25(No@1000 : Code[20]);
    VAR
      Cust@1001 : Record Customer;
      Vend@1002 : Record Vendor;
    BEGIN
      if No = '' then begin
        "Country/Region Code" := '';
        "VAT Registration No." := '';
        exit;
      end;

      ReadGLSetup;
      case true of
        ("Account Type" = "Account Type"::Customer) or ("Bal. Account Type" = "Bal. Account Type"::Customer):
          begin
            Cust.GET(No);
            "Country/Region Code" := Cust."Country/Region Code";
            "VAT Registration No." := Cust."VAT Registration No.";
          end;
        ("Account Type" = "Account Type"::Vendor) or ("Bal. Account Type" = "Bal. Account Type"::Vendor):
          begin
            Vend.GET(No);
            "Country/Region Code" := Vend."Country/Region Code";
            "VAT Registration No." := Vend."VAT Registration No.";
          end;
      end;
    END;

    [External]
    PROCEDURE JobTaskIsSet@28() : Boolean;
    BEGIN
      exit(("Job No." <> '') and ("Job Task No." <> '') and ("Account Type" = "Account Type"::"G/L Account"));
    END;

    [Internal]
    PROCEDURE CreateTempJobJnlLine@27();
    VAR
      TmpJobJnlOverallCurrencyFactor@1001 : Decimal;
    BEGIN
      OnBeforeCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo);

      TESTFIELD("Posting Date");
      CLEAR(TempJobJnlLine);
      TempJobJnlLine.DontCheckStdCost;
      TempJobJnlLine.VALIDATE("Job No.","Job No.");
      TempJobJnlLine.VALIDATE("Job Task No.","Job Task No.");
      if CurrFieldNo <> FIELDNO("Posting Date") then
        TempJobJnlLine.VALIDATE("Posting Date","Posting Date")
      else
        TempJobJnlLine.VALIDATE("Posting Date",xRec."Posting Date");
      TempJobJnlLine.VALIDATE(Type,TempJobJnlLine.Type::"G/L Account");
      if "Job Currency Code" <> '' then begin
        if "Posting Date" = 0D then
          CurrencyDate := WORKDATE
        else
          CurrencyDate := "Posting Date";

        if "Currency Code" = "Job Currency Code" then
          "Job Currency Factor" := "Currency Factor"
        else
          "Job Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Job Currency Code");
        TempJobJnlLine.SetCurrencyFactor("Job Currency Factor");
      end;
      TempJobJnlLine.VALIDATE("No.","Account No.");
      TempJobJnlLine.VALIDATE(Quantity,"Job Quantity");

      if "Currency Factor" = 0 then begin
        if "Job Currency Factor" = 0 then
          TmpJobJnlOverallCurrencyFactor := 1
        else
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor";
      end else begin
        if "Job Currency Factor" = 0 then
          TmpJobJnlOverallCurrencyFactor := 1 / "Currency Factor"
        else
          TmpJobJnlOverallCurrencyFactor := "Job Currency Factor" / "Currency Factor"
      end;

      if "Job Quantity" <> 0 then
        TempJobJnlLine.VALIDATE("Unit Cost",((Amount - "VAT Amount") * TmpJobJnlOverallCurrencyFactor) / "Job Quantity");

      if (xRec."Account No." = "Account No.") and (xRec."Job Task No." = "Job Task No.") and ("Job Unit Price" <> 0) then begin
        if TempJobJnlLine."Cost Factor" = 0 then
          TempJobJnlLine."Unit Price" := xRec."Job Unit Price";
        TempJobJnlLine."Line Amount" := xRec."Job Line Amount";
        TempJobJnlLine."Line Discount %" := xRec."Job Line Discount %";
        TempJobJnlLine."Line Discount Amount" := xRec."Job Line Discount Amount";
        TempJobJnlLine.VALIDATE("Unit Price");
      end;

      OnAfterCreateTempJobJnlLine(TempJobJnlLine,Rec,xRec,CurrFieldNo);
    END;

    [External]
    PROCEDURE UpdatePricesFromJobJnlLine@22();
    BEGIN
      "Job Unit Price" := TempJobJnlLine."Unit Price";
      "Job Total Price" := TempJobJnlLine."Total Price";
      "Job Line Amount" := TempJobJnlLine."Line Amount";
      "Job Line Discount Amount" := TempJobJnlLine."Line Discount Amount";
      "Job Unit Cost" := TempJobJnlLine."Unit Cost";
      "Job Total Cost" := TempJobJnlLine."Total Cost";
      "Job Line Discount %" := TempJobJnlLine."Line Discount %";

      "Job Unit Price (LCY)" := TempJobJnlLine."Unit Price (LCY)";
      "Job Total Price (LCY)" := TempJobJnlLine."Total Price (LCY)";
      "Job Line Amount (LCY)" := TempJobJnlLine."Line Amount (LCY)";
      "Job Line Disc. Amount (LCY)" := TempJobJnlLine."Line Discount Amount (LCY)";
      "Job Unit Cost (LCY)" := TempJobJnlLine."Unit Cost (LCY)";
      "Job Total Cost (LCY)" := TempJobJnlLine."Total Cost (LCY)";

      OnAfterUpdatePricesFromJobJnlLine(Rec,TempJobJnlLine);
    END;

    [External]
    PROCEDURE SetHideValidation@23(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE GetDefaultICPartnerGLAccNo@1058() : Code[20];
    VAR
      GLAcc@1001 : Record "G/L Account";
      GLAccNo@1002 : Code[20];
    BEGIN
      if "IC Partner Code" <> '' then begin
        if "Account Type" = "Account Type"::"G/L Account" then
          GLAccNo := "Account No."
        else
          GLAccNo := "Bal. Account No.";
        if GLAcc.GET(GLAccNo) then
          exit(GLAcc."Default IC Partner G/L Acc. No")
      end;
    END;

    [External]
    PROCEDURE IsApplied@30() : Boolean;
    BEGIN
      if "Applies-to Doc. No." <> '' then
        exit(true);
      if "Applies-to ID" <> '' then
        exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE DataCaption@29() : Text[250];
    VAR
      GenJnlBatch@1000 : Record "Gen. Journal Batch";
    BEGIN
      if GenJnlBatch.GET("Journal Template Name","Journal Batch Name") then
        exit(GenJnlBatch.Name + '-' + GenJnlBatch.Description);
    END;

    LOCAL PROCEDURE ReadGLSetup@31();
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
      end;
    END;

    [External]
    PROCEDURE GetCustLedgerEntry@33();
    BEGIN
      if ("Account Type" = "Account Type"::Customer) and ("Account No." = '') and
         ("Applies-to Doc. No." <> '') and (Amount = 0)
      then begin
        CustLedgEntry.RESET;
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        CustLedgEntry.SETRANGE(Open,true);
        if not CustLedgEntry.FINDFIRST then
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",CustLedgEntry."Customer No.");
        CustLedgEntry.CALCFIELDS("Remaining Amount");

        if "Posting Date" <= CustLedgEntry."Pmt. Discount Date" then
          Amount := -(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible")
        else
          Amount := -CustLedgEntry."Remaining Amount";

        if "Currency Code" <> CustLedgEntry."Currency Code" then
          UpdateCurrencyCode(CustLedgEntry."Currency Code");

        SetAppliesToFields(
          CustLedgEntry."Document Type",CustLedgEntry."Document No.",CustLedgEntry."External Document No.");

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        if GenJnlBatch."Bal. Account No." <> '' then begin
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        end else
          VALIDATE(Amount);
      end;
    END;

    [External]
    PROCEDURE GetVendLedgerEntry@37();
    BEGIN
      if ("Account Type" = "Account Type"::Vendor) and ("Account No." = '') and
         ("Applies-to Doc. No." <> '') and (Amount = 0)
      then begin
        VendLedgEntry.RESET;
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        VendLedgEntry.SETRANGE(Open,true);
        if not VendLedgEntry.FINDFIRST then
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",VendLedgEntry."Vendor No.");
        VendLedgEntry.CALCFIELDS("Remaining Amount");

        if "Posting Date" <= VendLedgEntry."Pmt. Discount Date" then
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        else
          Amount := -VendLedgEntry."Remaining Amount";

        if "Currency Code" <> VendLedgEntry."Currency Code" then
          UpdateCurrencyCode(VendLedgEntry."Currency Code");

        SetAppliesToFields(
          VendLedgEntry."Document Type",VendLedgEntry."Document No.",VendLedgEntry."External Document No.");

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        if GenJnlBatch."Bal. Account No." <> '' then begin
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        end else
          VALIDATE(Amount);
      end;
    END;

    [External]
    PROCEDURE GetEmplLedgerEntry@183();
    BEGIN
      if ("Account Type" = "Account Type"::Employee) and ("Account No." = '') and
         ("Applies-to Doc. No." <> '') and (Amount = 0)
      then begin
        EmplLedgEntry.RESET;
        EmplLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        EmplLedgEntry.SETRANGE(Open,true);
        if not EmplLedgEntry.FINDFIRST then
          ERROR(NotExistErr,"Applies-to Doc. No.");

        VALIDATE("Account No.",EmplLedgEntry."Employee No.");
        EmplLedgEntry.CALCFIELDS("Remaining Amount");

        Amount := -EmplLedgEntry."Remaining Amount";

        SetAppliesToFields(EmplLedgEntry."Document Type",EmplLedgEntry."Document No.",'');

        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
        if GenJnlBatch."Bal. Account No." <> '' then begin
          "Bal. Account Type" := GenJnlBatch."Bal. Account Type";
          VALIDATE("Bal. Account No.",GenJnlBatch."Bal. Account No.");
        end else
          VALIDATE(Amount);
      end;
    END;

    LOCAL PROCEDURE UpdateCurrencyCode@143(NewCurrencyCode@1000 : Code[10]);
    VAR
      FromCurrencyCode@1002 : Code[10];
      ToCurrencyCode@1001 : Code[10];
    BEGIN
      FromCurrencyCode := GetShowCurrencyCode("Currency Code");
      ToCurrencyCode := GetShowCurrencyCode(NewCurrencyCode);
      if not CONFIRM(ChangeCurrencyQst,true,FromCurrencyCode,ToCurrencyCode) then
        ERROR(UpdateInterruptedErr);
      VALIDATE("Currency Code",CurrencyCode);
    END;

    LOCAL PROCEDURE SetAppliesToFields@140(DocType@1000 : Option;DocNo@1001 : Code[20];ExtDocNo@1002 : Code[35]);
    BEGIN
      "Document Type" := "Document Type"::Payment;
      "Applies-to Doc. Type" := DocType;
      "Applies-to Doc. No." := DocNo;
      "Applies-to ID" := '';
      if ("Applies-to Doc. Type" = "Applies-to Doc. Type"::Invoice) and
         ("Document Type" = "Document Type"::Payment)
      then
        "External Document No." := ExtDocNo;
      "Bal. Account Type" := "Bal. Account Type"::"G/L Account";
    END;

    LOCAL PROCEDURE CustVendAccountNosModified@32() : Boolean;
    BEGIN
      exit(
        (("Bal. Account No." <> xRec."Bal. Account No.") and
         ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor])) or
        (("Account No." <> xRec."Account No.") and
         ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor])))
    END;

    LOCAL PROCEDURE CheckPaymentTolerance@34();
    BEGIN
      if Amount <> 0 then
        if ("Bal. Account No." <> xRec."Bal. Account No.") or ("Account No." <> xRec."Account No.") then
          PaymentToleranceMgt.PmtTolGenJnl(Rec);
    END;

    [External]
    PROCEDURE IncludeVATAmount@38() : Boolean;
    BEGIN
      exit(
        ("VAT Posting" = "VAT Posting"::"Manual VAT Entry") and
        ("VAT Calculation Type" <> "VAT Calculation Type"::"Reverse Charge VAT"));
    END;

    [Internal]
    PROCEDURE ConvertAmtFCYToLCYForSourceCurrency@39(Amount@1000 : Decimal) : Decimal;
    VAR
      Currency@1001 : Record Currency;
      CurrExchRate@1003 : Record "Currency Exchange Rate";
      CurrencyFactor@1002 : Decimal;
    BEGIN
      if (Amount = 0) or ("Source Currency Code" = '') then
        exit(Amount);

      Currency.GET("Source Currency Code");
      CurrencyFactor := CurrExchRate.ExchangeRate("Posting Date","Source Currency Code");
      exit(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            "Posting Date","Source Currency Code",Amount,CurrencyFactor),
          Currency."Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE MatchSingleLedgerEntry@40();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Match General Journal Lines",Rec);
    END;

    [External]
    PROCEDURE GetStyle@41() : Text;
    BEGIN
      if "Applied Automatically" then
        exit('Favorable')
    END;

    [External]
    PROCEDURE GetOverdueDateInteractions@75(VAR OverdueWarningText@1001 : Text) : Text;
    VAR
      DueDate@1000 : Date;
    BEGIN
      DueDate := GetAppliesToDocDueDate;
      OverdueWarningText := '';
      if (DueDate <> 0D) and (DueDate < "Posting Date") then begin
        OverdueWarningText := DueDateMsg;
        exit('Unfavorable');
      end;
      exit('');
    END;

    [External]
    PROCEDURE ClearDataExchangeEntries@42(DeleteHeaderEntries@1002 : Boolean);
    VAR
      DataExchField@1001 : Record "Data Exch. Field";
      GenJournalLine@1000 : Record "Gen. Journal Line";
    BEGIN
      DataExchField.DeleteRelatedRecords("Data Exch. Entry No.","Data Exch. Line No.");

      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETRANGE("Data Exch. Entry No.","Data Exch. Entry No.");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      if GenJournalLine.ISEMPTY or DeleteHeaderEntries then
        DataExchField.DeleteRelatedRecords("Data Exch. Entry No.",0);
    END;

    [External]
    PROCEDURE ClearAppliedGenJnlLine@49();
    VAR
      GenJournalLine@1000 : Record "Gen. Journal Line";
    BEGIN
      if "Applies-to Doc. No." = '' then
        exit;
      GenJournalLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine.SETFILTER("Line No.",'<>%1',"Line No.");
      GenJournalLine.SETRANGE("Document Type","Applies-to Doc. Type");
      GenJournalLine.SETRANGE("Document No.","Applies-to Doc. No.");
      GenJournalLine.MODIFYALL("Applied Automatically",false);
      GenJournalLine.MODIFYALL("Account Type",GenJournalLine."Account Type"::"G/L Account");
      GenJournalLine.MODIFYALL("Account No.",'');
    END;

    [Internal]
    PROCEDURE GetIncomingDocumentURL@50() : Text[1000];
    VAR
      IncomingDocument@1000 : Record "Incoming Document";
    BEGIN
      if "Incoming Document Entry No." = 0 then
        exit('');

      IncomingDocument.GET("Incoming Document Entry No.");
      exit(IncomingDocument.GetURL);
    END;

    [External]
    PROCEDURE InsertPaymentFileError@64(Text@1001 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record "Payment Jnl. Export Error Text";
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,Text,'','');
    END;

    [External]
    PROCEDURE InsertPaymentFileErrorWithDetails@83(ErrorText@1001 : Text;AddnlInfo@1002 : Text;ExtSupportInfo@1003 : Text);
    VAR
      PaymentJnlExportErrorText@1000 : Record "Payment Jnl. Export Error Text";
    BEGIN
      PaymentJnlExportErrorText.CreateNew(Rec,ErrorText,AddnlInfo,ExtSupportInfo);
    END;

    [External]
    PROCEDURE DeletePaymentFileBatchErrors@67();
    VAR
      PaymentJnlExportErrorText@1000 : Record "Payment Jnl. Export Error Text";
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlBatchErrors(Rec);
    END;

    [External]
    PROCEDURE DeletePaymentFileErrors@61();
    VAR
      PaymentJnlExportErrorText@1000 : Record "Payment Jnl. Export Error Text";
    BEGIN
      PaymentJnlExportErrorText.DeleteJnlLineErrors(Rec);
    END;

    [External]
    PROCEDURE HasPaymentFileErrors@24() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record "Payment Jnl. Export Error Text";
    BEGIN
      exit(PaymentJnlExportErrorText.JnlLineHasErrors(Rec));
    END;

    [External]
    PROCEDURE HasPaymentFileErrorsInBatch@65() : Boolean;
    VAR
      PaymentJnlExportErrorText@1000 : Record "Payment Jnl. Export Error Text";
    BEGIN
      exit(PaymentJnlExportErrorText.JnlBatchHasErrors(Rec));
    END;

    LOCAL PROCEDURE UpdateDescription@43(Name@1000 : Text[50]);
    BEGIN
      if not IsAdHocDescription then
        Description := Name;
    END;

    LOCAL PROCEDURE IsAdHocDescription@44() : Boolean;
    VAR
      GLAccount@1000 : Record "G/L Account";
      Customer@1001 : Record Customer;
      Vendor@1002 : Record Vendor;
      BankAccount@1003 : Record "Bank Account";
      FixedAsset@1004 : Record "Fixed Asset";
      ICPartner@1005 : Record "IC Partner";
      Employee@1006 : Record Employee;
    BEGIN
      if Description = '' then
        exit(false);
      if xRec."Account No." = '' then
        exit(true);

      case xRec."Account Type" of
        xRec."Account Type"::"G/L Account":
          exit(GLAccount.GET(xRec."Account No.") and (GLAccount.Name <> Description));
        xRec."Account Type"::Customer:
          exit(Customer.GET(xRec."Account No.") and (Customer.Name <> Description));
        xRec."Account Type"::Vendor:
          exit(Vendor.GET(xRec."Account No.") and (Vendor.Name <> Description));
        xRec."Account Type"::"Bank Account":
          exit(BankAccount.GET(xRec."Account No.") and (BankAccount.Name <> Description));
        xRec."Account Type"::"Fixed Asset":
          exit(FixedAsset.GET(xRec."Account No.") and (FixedAsset.Description <> Description));
        xRec."Account Type"::"IC Partner":
          exit(ICPartner.GET(xRec."Account No.") and (ICPartner.Name <> Description));
        xRec."Account Type"::Employee:
          exit(Employee.GET(xRec."Account No.") and (Employee.FullName <> Description));
      end;
      exit(false);
    END;

    [External]
    PROCEDURE GetAppliesToDocEntryNo@63() : Integer;
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
      VendLedgEntry@1001 : Record "Vendor Ledger Entry";
      AccType@1003 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      case AccType of
        AccType::Customer:
          begin
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            exit(CustLedgEntry."Entry No.");
          end;
        AccType::Vendor:
          begin
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            exit(VendLedgEntry."Entry No.");
          end;
        AccType::Employee:
          begin
            GetAppliesToDocEmplLedgEntry(EmplLedgEntry,AccNo);
            exit(EmplLedgEntry."Entry No.");
          end;
      end;
    END;

    [External]
    PROCEDURE GetAppliesToDocDueDate@62() : Date;
    VAR
      CustLedgEntry@1000 : Record "Cust. Ledger Entry";
      VendLedgEntry@1001 : Record "Vendor Ledger Entry";
      AccType@1003 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset"';
      AccNo@1002 : Code[20];
    BEGIN
      GetAccTypeAndNo(Rec,AccType,AccNo);
      case AccType of
        AccType::Customer:
          begin
            GetAppliesToDocCustLedgEntry(CustLedgEntry,AccNo);
            exit(CustLedgEntry."Due Date");
          end;
        AccType::Vendor:
          begin
            GetAppliesToDocVendLedgEntry(VendLedgEntry,AccNo);
            exit(VendLedgEntry."Due Date");
          end;
      end;
    END;

    LOCAL PROCEDURE GetAppliesToDocCustLedgEntry@60(VAR CustLedgEntry@1000 : Record "Cust. Ledger Entry";AccNo@1001 : Code[20]);
    BEGIN
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,true);
      if "Applies-to Doc. No." <> '' then begin
        CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        CustLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if CustLedgEntry.FINDFIRST then;
      end else
        if "Applies-to ID" <> '' then begin
          CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          if CustLedgEntry.FINDFIRST then;
        end;
    END;

    LOCAL PROCEDURE GetAppliesToDocVendLedgEntry@53(VAR VendLedgEntry@1000 : Record "Vendor Ledger Entry";AccNo@1001 : Code[20]);
    BEGIN
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,true);
      if "Applies-to Doc. No." <> '' then begin
        VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        VendLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if VendLedgEntry.FINDFIRST then;
      end else
        if "Applies-to ID" <> '' then begin
          VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          if VendLedgEntry.FINDFIRST then;
        end;
    END;

    LOCAL PROCEDURE GetAppliesToDocEmplLedgEntry@180(VAR EmplLedgEntry@1000 : Record "Employee Ledger Entry";AccNo@1001 : Code[20]);
    BEGIN
      EmplLedgEntry.SETRANGE("Employee No.",AccNo);
      EmplLedgEntry.SETRANGE(Open,true);
      if "Applies-to Doc. No." <> '' then begin
        EmplLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
        EmplLedgEntry.SETRANGE("Document No.","Applies-to Doc. No.");
        if EmplLedgEntry.FINDFIRST then;
      end else
        if "Applies-to ID" <> '' then begin
          EmplLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
          if EmplLedgEntry.FINDFIRST then;
        end;
    END;

    LOCAL PROCEDURE SetJournalLineFieldsFromApplication@51();
    VAR
      AccType@1005 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee';
      AccNo@1004 : Code[20];
    BEGIN
      "Exported to Payment File" := false;
      GetAccTypeAndNo(Rec,AccType,AccNo);
      case AccType of
        AccType::Customer:
          if "Applies-to ID" <> '' then begin
            if FindFirstCustLedgEntryWithAppliesToID(AccNo,"Applies-to ID") then begin
              CustLedgEntry.SETRANGE("Exported to Payment File",true);
              "Exported to Payment File" := CustLedgEntry.FINDFIRST;
            end
          end else
            if "Applies-to Doc. No." <> '' then
              if FindFirstCustLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") then begin
                "Exported to Payment File" := CustLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := CustLedgEntry."External Document No.";
              end;
        AccType::Vendor:
          if "Applies-to ID" <> '' then begin
            if FindFirstVendLedgEntryWithAppliesToID(AccNo,"Applies-to ID") then begin
              VendLedgEntry.SETRANGE("Exported to Payment File",true);
              "Exported to Payment File" := VendLedgEntry.FINDFIRST;
            end
          end else
            if "Applies-to Doc. No." <> '' then
              if FindFirstVendLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") then begin
                "Exported to Payment File" := VendLedgEntry."Exported to Payment File";
                "Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";
              end;
        AccType::Employee:
          if "Applies-to ID" <> '' then begin
            if FindFirstEmplLedgEntryWithAppliesToID(AccNo,"Applies-to ID") then begin
              EmplLedgEntry.SETRANGE("Exported to Payment File",true);
              "Exported to Payment File" := EmplLedgEntry.FINDFIRST;
            end
          end else
            if "Applies-to Doc. No." <> '' then
              if FindFirstEmplLedgEntryWithAppliesToDocNo(AccNo,"Applies-to Doc. No.") then
                "Exported to Payment File" := EmplLedgEntry."Exported to Payment File";
      end;
    END;

    LOCAL PROCEDURE GetAccTypeAndNo@52(GenJnlLine2@1002 : Record "Gen. Journal Line";VAR AccType@1000 : Option;VAR AccNo@1001 : Code[20]);
    BEGIN
      if GenJnlLine2."Bal. Account Type" in
         [GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor,GenJnlLine2."Bal. Account Type"::Employee]
      then begin
        AccType := GenJnlLine2."Bal. Account Type";
        AccNo := GenJnlLine2."Bal. Account No.";
      end else begin
        AccType := GenJnlLine2."Account Type";
        AccNo := GenJnlLine2."Account No.";
      end;
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToID@54(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Customer No.","Applies-to ID",Open);
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      CustLedgEntry.SETRANGE(Open,true);
      exit(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstCustLedgEntryWithAppliesToDocNo@55(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20]) : Boolean;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Document No.");
      CustLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      CustLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      CustLedgEntry.SETRANGE("Customer No.",AccNo);
      CustLedgEntry.SETRANGE(Open,true);
      exit(CustLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToID@58(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Applies-to ID",Open);
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      VendLedgEntry.SETRANGE(Open,true);
      exit(VendLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstVendLedgEntryWithAppliesToDocNo@59(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20]) : Boolean;
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Document No.");
      VendLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      VendLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      VendLedgEntry.SETRANGE("Vendor No.",AccNo);
      VendLedgEntry.SETRANGE(Open,true);
      exit(VendLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstEmplLedgEntryWithAppliesToID@191(AccNo@1000 : Code[20];AppliesToID@1001 : Code[50]) : Boolean;
    BEGIN
      EmplLedgEntry.RESET;
      EmplLedgEntry.SETCURRENTKEY("Employee No.","Applies-to ID",Open);
      EmplLedgEntry.SETRANGE("Employee No.",AccNo);
      EmplLedgEntry.SETRANGE("Applies-to ID",AppliesToID);
      EmplLedgEntry.SETRANGE(Open,true);
      exit(EmplLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE FindFirstEmplLedgEntryWithAppliesToDocNo@190(AccNo@1000 : Code[20];AppliestoDocNo@1001 : Code[20]) : Boolean;
    BEGIN
      EmplLedgEntry.RESET;
      EmplLedgEntry.SETCURRENTKEY("Document No.");
      EmplLedgEntry.SETRANGE("Document No.",AppliestoDocNo);
      EmplLedgEntry.SETRANGE("Document Type","Applies-to Doc. Type");
      EmplLedgEntry.SETRANGE("Employee No.",AccNo);
      EmplLedgEntry.SETRANGE(Open,true);
      exit(EmplLedgEntry.FINDFIRST)
    END;

    LOCAL PROCEDURE ClearPostingGroups@45();
    BEGIN
      "Gen. Posting Type" := "Gen. Posting Type"::" ";
      "Gen. Bus. Posting Group" := '';
      "Gen. Prod. Posting Group" := '';
      "VAT Bus. Posting Group" := '';
      "VAT Prod. Posting Group" := '';

      OnAfterClearPostingGroups(Rec);
    END;

    LOCAL PROCEDURE ClearBalancePostingGroups@48();
    BEGIN
      "Bal. Gen. Posting Type" := "Bal. Gen. Posting Type"::" ";
      "Bal. Gen. Bus. Posting Group" := '';
      "Bal. Gen. Prod. Posting Group" := '';
      "Bal. VAT Bus. Posting Group" := '';
      "Bal. VAT Prod. Posting Group" := '';

      OnAfterClearBalPostingGroups(Rec);
    END;

    LOCAL PROCEDURE CleanLine@66();
    BEGIN
      UpdateLineBalance;
      UpdateSource;
      CreateDim(
        DimMgt.TypeToTableID1("Account Type"),"Account No.",
        DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
        DATABASE::Job,"Job No.",
        DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
        DATABASE::Campaign,"Campaign No.");
      if not ("Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor]) then
        "Recipient Bank Account" := '';
      if xRec."Account No." <> '' then begin
        ClearPostingGroups;
        "Tax Area Code" := '';
        "Tax Liable" := false;
        "Tax Group Code" := '';
        "Bill-to/Pay-to No." := '';
        "Ship-to/Order Address Code" := '';
        "Sell-to/Buy-from No." := '';
        UpdateCountryCodeAndVATRegNo('');
      end;

      case "Account Type" of
        "Account Type"::"G/L Account":
          UpdateAccountID;
        "Account Type"::Customer:
          UpdateCustomerID;
      end;
    END;

    LOCAL PROCEDURE ReplaceDescription@84() : Boolean;
    BEGIN
      if "Bal. Account No." = '' then
        exit(true);
      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      exit(GenJnlBatch."Bal. Account No." <> '');
    END;

    [External]
    PROCEDURE IsExportedToPaymentFile@1020() : Boolean;
    BEGIN
      exit(IsPaymentJournallLineExported or IsAppliedToVendorLedgerEntryExported);
    END;

    [External]
    PROCEDURE IsPaymentJournallLineExported@80() : Boolean;
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
      OldFilterGroup@1000 : Integer;
      HasExportedLines@1002 : Boolean;
    BEGIN
      with GenJnlLine do begin
        COPYFILTERS(Rec);
        OldFilterGroup := FILTERGROUP;
        FILTERGROUP := 10;
        SETRANGE("Exported to Payment File",true);
        HasExportedLines := not ISEMPTY;
        SETRANGE("Exported to Payment File");
        FILTERGROUP := OldFilterGroup;
      end;
      exit(HasExportedLines);
    END;

    [External]
    PROCEDURE IsAppliedToVendorLedgerEntryExported@79() : Boolean;
    VAR
      GenJnlLine@1001 : Record "Gen. Journal Line";
      VendLedgerEntry@1002 : Record "Vendor Ledger Entry";
    BEGIN
      GenJnlLine.COPYFILTERS(Rec);

      if GenJnlLine.FINDSET then
        repeat
          if GenJnlLine.IsApplied then begin
            VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
            if GenJnlLine."Applies-to Doc. No." <> '' then begin
              VendLedgerEntry.SETRANGE("Document Type",GenJnlLine."Applies-to Doc. Type");
              VendLedgerEntry.SETRANGE("Document No.",GenJnlLine."Applies-to Doc. No.");
            end;
            if GenJnlLine."Applies-to ID" <> '' then
              VendLedgerEntry.SETRANGE("Applies-to ID",GenJnlLine."Applies-to ID");
            VendLedgerEntry.SETRANGE("Exported to Payment File",true);
            if not VendLedgerEntry.ISEMPTY then
              exit(true);
          end;

          VendLedgerEntry.RESET;
          VendLedgerEntry.SETRANGE("Vendor No.",GenJnlLine."Account No.");
          VendLedgerEntry.SETRANGE("Applies-to Doc. Type",GenJnlLine."Document Type");
          VendLedgerEntry.SETRANGE("Applies-to Doc. No.",GenJnlLine."Document No.");
          VendLedgerEntry.SETRANGE("Exported to Payment File",true);
          if not VendLedgerEntry.ISEMPTY then
            exit(true);
        until GenJnlLine.NEXT = 0;

      exit(false);
    END;

    LOCAL PROCEDURE ClearAppliedAutomatically@72();
    BEGIN
      if CurrFieldNo <> 0 then
        "Applied Automatically" := false;
    END;

    [External]
    PROCEDURE SetPostingDateAsDueDate@77(DueDate@1002 : Date;DateOffset@1000 : DateFormula) : Boolean;
    VAR
      NewPostingDate@1001 : Date;
    BEGIN
      if DueDate = 0D then
        exit(false);

      NewPostingDate := CALCDATE(DateOffset,DueDate);
      if NewPostingDate < WORKDATE then begin
        VALIDATE("Posting Date",WORKDATE);
        exit(true);
      end;

      VALIDATE("Posting Date",NewPostingDate);
      exit(false);
    END;

    [External]
    PROCEDURE CalculatePostingDate@76();
    VAR
      GenJnlLine@1000 : Record "Gen. Journal Line";
      EmptyDateFormula@1001 : DateFormula;
    BEGIN
      GenJnlLine.COPY(Rec);
      GenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      GenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");

      if GenJnlLine.FINDSET then begin
        Window.OPEN(CalcPostDateMsg);
        repeat
          EVALUATE(EmptyDateFormula,'<0D>');
          GenJnlLine.SetPostingDateAsDueDate(GenJnlLine.GetAppliesToDocDueDate,EmptyDateFormula);
          GenJnlLine.MODIFY(true);
          Window.UPDATE(1,GenJnlLine."Document No.");
        until GenJnlLine.NEXT = 0;
        Window.CLOSE;
      end;
    END;

    [Internal]
    PROCEDURE ImportBankStatement@73();
    VAR
      ProcessGenJnlLines@1000 : Codeunit "Process Gen. Journal  Lines";
    BEGIN
      ProcessGenJnlLines.ImportBankStatement(Rec);
    END;

    [External]
    PROCEDURE ExportPaymentFile@81();
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      if not FINDSET then
        ERROR(NothingToExportErr);
      SETRANGE("Journal Template Name","Journal Template Name");
      SETRANGE("Journal Batch Name","Journal Batch Name");
      TESTFIELD("Check Printed",false);

      GenJnlBatch.GET("Journal Template Name","Journal Batch Name");
      GenJnlBatch.TESTFIELD("Bal. Account Type",GenJnlBatch."Bal. Account Type"::"Bank Account");
      GenJnlBatch.TESTFIELD("Bal. Account No.");

      CheckDocNoOnLines;
      if IsExportedToPaymentFile then
        if not CONFIRM(ExportAgainQst) then
          exit;
      BankAcc.GET(GenJnlBatch."Bal. Account No.");
      if BankAcc.GetPaymentExportCodeunitID > 0 then
        CODEUNIT.RUN(BankAcc.GetPaymentExportCodeunitID,Rec)
      else
        CODEUNIT.RUN(CODEUNIT::"Exp. Launcher Gen. Jnl.",Rec);
    END;

    [External]
    PROCEDURE TotalExportedAmount@85() : Decimal;
    VAR
      CreditTransferEntry@1000 : Record "Credit Transfer Entry";
    BEGIN
      if not ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee]) then
        exit(0);
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      CreditTransferEntry.CALCSUMS("Transfer Amount");
      exit(CreditTransferEntry."Transfer Amount");
    END;

    [External]
    PROCEDURE DrillDownExportedAmount@95();
    VAR
      CreditTransferEntry@1000 : Record "Credit Transfer Entry";
    BEGIN
      if not ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee]) then
        exit;
      GenJnlShowCTEntries.SetFiltersOnCreditTransferEntry(Rec,CreditTransferEntry);
      PAGE.RUN(PAGE::"Credit Transfer Reg. Entries",CreditTransferEntry);
    END;

    LOCAL PROCEDURE CopyDimensionsFromJobTaskLine@82();
    BEGIN
      "Dimension Set ID" := TempJobJnlLine."Dimension Set ID";
      "Shortcut Dimension 1 Code" := TempJobJnlLine."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := TempJobJnlLine."Shortcut Dimension 2 Code";
    END;

    [External]
    PROCEDURE CopyDocumentFields@129(DocType@1004 : Option;DocNo@1003 : Code[20];ExtDocNo@1002 : Text[35];SourceCode@1001 : Code[10];NoSeriesCode@1000 : Code[20]);
    BEGIN
      "Document Type" := DocType;
      "Document No." := DocNo;
      "External Document No." := ExtDocNo;
      "Source Code" := SourceCode;
      if NoSeriesCode <> '' then
        "Posting No. Series" := NoSeriesCode;
    END;

    [External]
    PROCEDURE CopyCustLedgEntry@134(CustLedgerEntry@1000 : Record "Cust. Ledger Entry");
    BEGIN
      "Document Type" := CustLedgerEntry."Document Type";
      Description := CustLedgerEntry.Description;
      "Shortcut Dimension 1 Code" := CustLedgerEntry."Global Dimension 1 Code";
      "Shortcut Dimension 2 Code" := CustLedgerEntry."Global Dimension 2 Code";
      "Dimension Set ID" := CustLedgerEntry."Dimension Set ID";
      "Posting Group" := CustLedgerEntry."Customer Posting Group";
      "Source Type" := "Source Type"::Customer;
      "Source No." := CustLedgerEntry."Customer No.";

      OnAfterCopyGenJnlLineFromCustLedgEntry(CustLedgEntry,Rec);
    END;

    [External]
    PROCEDURE CopyFromGenJnlAllocation@113(GenJnlAlloc@1000 : Record "Gen. Jnl. Allocation");
    BEGIN
      "Account No." := GenJnlAlloc."Account No.";
      "Shortcut Dimension 1 Code" := GenJnlAlloc."Shortcut Dimension 1 Code";
      "Shortcut Dimension 2 Code" := GenJnlAlloc."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlAlloc."Dimension Set ID";
      "Gen. Posting Type" := GenJnlAlloc."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GenJnlAlloc."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GenJnlAlloc."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GenJnlAlloc."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GenJnlAlloc."VAT Prod. Posting Group";
      "Tax Area Code" := GenJnlAlloc."Tax Area Code";
      "Tax Liable" := GenJnlAlloc."Tax Liable";
      "Tax Group Code" := GenJnlAlloc."Tax Group Code";
      "Use Tax" := GenJnlAlloc."Use Tax";
      "VAT Calculation Type" := GenJnlAlloc."VAT Calculation Type";
      "VAT Amount" := GenJnlAlloc."VAT Amount";
      "VAT Base Amount" := GenJnlAlloc.Amount - GenJnlAlloc."VAT Amount";
      "VAT %" := GenJnlAlloc."VAT %";
      "Source Currency Amount" := GenJnlAlloc."Additional-Currency Amount";
      Amount := GenJnlAlloc.Amount;
      "Amount (LCY)" := GenJnlAlloc.Amount;

      OnAfterCopyGenJnlLineFromGenJnlAllocation(GenJnlAlloc,Rec);
    END;

    [External]
    PROCEDURE CopyFromInvoicePostBuffer@112(InvoicePostBuffer@1001 : Record "Invoice Post. Buffer");
    BEGIN
      "Account No." := InvoicePostBuffer."G/L Account";
      "System-Created Entry" := InvoicePostBuffer."System-Created Entry";
      "Gen. Bus. Posting Group" := InvoicePostBuffer."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := InvoicePostBuffer."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := InvoicePostBuffer."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := InvoicePostBuffer."VAT Prod. Posting Group";
      "Tax Area Code" := InvoicePostBuffer."Tax Area Code";
      "Tax Liable" := InvoicePostBuffer."Tax Liable";
      "Tax Group Code" := InvoicePostBuffer."Tax Group Code";
      "Use Tax" := InvoicePostBuffer."Use Tax";
      Quantity := InvoicePostBuffer.Quantity;
      "VAT %" := InvoicePostBuffer."VAT %";
      "VAT Calculation Type" := InvoicePostBuffer."VAT Calculation Type";
      "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
      "Job No." := InvoicePostBuffer."Job No.";
      "Deferral Code" := InvoicePostBuffer."Deferral Code";
      "Deferral Line No." := InvoicePostBuffer."Deferral Line No.";
      Amount := InvoicePostBuffer.Amount;
      "Source Currency Amount" := InvoicePostBuffer."Amount (ACY)";
      "VAT Base Amount" := InvoicePostBuffer."VAT Base Amount";
      "Source Curr. VAT Base Amount" := InvoicePostBuffer."VAT Base Amount (ACY)";
      "VAT Amount" := InvoicePostBuffer."VAT Amount";
      "Source Curr. VAT Amount" := InvoicePostBuffer."VAT Amount (ACY)";
      "VAT Difference" := InvoicePostBuffer."VAT Difference";

      OnAfterCopyGenJnlLineFromInvPostBuffer(InvoicePostBuffer,Rec);
    END;

    [External]
    PROCEDURE CopyFromInvoicePostBufferFA@111(InvoicePostBuffer@1001 : Record "Invoice Post. Buffer");
    BEGIN
      "Account Type" := "Account Type"::"Fixed Asset";
      "FA Posting Date" := InvoicePostBuffer."FA Posting Date";
      "Depreciation Book Code" := InvoicePostBuffer."Depreciation Book Code";
      "Salvage Value" := InvoicePostBuffer."Salvage Value";
      "Depr. until FA Posting Date" := InvoicePostBuffer."Depr. until FA Posting Date";
      "Depr. Acquisition Cost" := InvoicePostBuffer."Depr. Acquisition Cost";
      "Maintenance Code" := InvoicePostBuffer."Maintenance Code";
      "Insurance No." := InvoicePostBuffer."Insurance No.";
      "Budgeted FA No." := InvoicePostBuffer."Budgeted FA No.";
      "Duplicate in Depreciation Book" := InvoicePostBuffer."Duplicate in Depreciation Book";
      "Use Duplication List" := InvoicePostBuffer."Use Duplication List";

      OnAfterCopyGenJnlLineFromInvPostBufferFA(InvoicePostBuffer,Rec);
    END;

    [External]
    PROCEDURE CopyFromPrepmtInvoiceBuffer@110(PrepmtInvLineBuffer@1001 : Record "Prepayment Inv. Line Buffer");
    BEGIN
      "Account No." := PrepmtInvLineBuffer."G/L Account No.";
      "Gen. Bus. Posting Group" := PrepmtInvLineBuffer."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := PrepmtInvLineBuffer."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := PrepmtInvLineBuffer."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := PrepmtInvLineBuffer."VAT Prod. Posting Group";
      "Tax Area Code" := PrepmtInvLineBuffer."Tax Area Code";
      "Tax Liable" := PrepmtInvLineBuffer."Tax Liable";
      "Tax Group Code" := PrepmtInvLineBuffer."Tax Group Code";
      "Use Tax" := false;
      "VAT Calculation Type" := PrepmtInvLineBuffer."VAT Calculation Type";
      "Job No." := PrepmtInvLineBuffer."Job No.";
      Amount := PrepmtInvLineBuffer.Amount;
      "Source Currency Amount" := PrepmtInvLineBuffer."Amount (ACY)";
      "VAT Base Amount" := PrepmtInvLineBuffer."VAT Base Amount";
      "Source Curr. VAT Base Amount" := PrepmtInvLineBuffer."VAT Base Amount (ACY)";
      "VAT Amount" := PrepmtInvLineBuffer."VAT Amount";
      "Source Curr. VAT Amount" := PrepmtInvLineBuffer."VAT Amount (ACY)";
      "VAT Difference" := PrepmtInvLineBuffer."VAT Difference";

      OnAfterCopyGenJnlLineFromPrepmtInvBuffer(PrepmtInvLineBuffer,Rec);
    END;

    [External]
    PROCEDURE CopyFromPurchHeader@109(PurchHeader@1001 : Record "Purchase Header");
    BEGIN
      "Source Currency Code" := PurchHeader."Currency Code";
      "Currency Factor" := PurchHeader."Currency Factor";
      Correction := PurchHeader.Correction;
      "VAT Base Discount %" := PurchHeader."VAT Base Discount %";
      "Sell-to/Buy-from No." := PurchHeader."Buy-from Vendor No.";
      "Bill-to/Pay-to No." := PurchHeader."Pay-to Vendor No.";
      "Country/Region Code" := PurchHeader."VAT Country/Region Code";
      "VAT Registration No." := PurchHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Vendor;
      "Source No." := PurchHeader."Pay-to Vendor No.";
      "Posting No. Series" := PurchHeader."Posting No. Series";
      "IC Partner Code" := PurchHeader."Pay-to IC Partner Code";
      "Ship-to/Order Address Code" := PurchHeader."Order Address Code";
      "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
      "On Hold" := PurchHeader."On Hold";
      if "Account Type" = "Account Type"::Vendor then
        "Posting Group" := PurchHeader."Vendor Posting Group";

      OnAfterCopyGenJnlLineFromPurchHeader(PurchHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromPurchHeaderPrepmt@127(PurchHeader@1000 : Record "Purchase Header");
    BEGIN
      "Source Currency Code" := PurchHeader."Currency Code";
      "VAT Base Discount %" := PurchHeader."VAT Base Discount %";
      "Bill-to/Pay-to No." := PurchHeader."Pay-to Vendor No.";
      "Country/Region Code" := PurchHeader."VAT Country/Region Code";
      "VAT Registration No." := PurchHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Vendor;
      "Source No." := PurchHeader."Pay-to Vendor No.";
      "IC Partner Code" := PurchHeader."Buy-from IC Partner Code";
      "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
      "System-Created Entry" := true;
      Prepayment := true;

      OnAfterCopyGenJnlLineFromPurchHeaderPrepmt(PurchHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromPurchHeaderPrepmtPost@137(PurchHeader@1000 : Record "Purchase Header";UsePmtDisc@1001 : Boolean);
    BEGIN
      "Account Type" := "Account Type"::Vendor;
      "Account No." := PurchHeader."Pay-to Vendor No.";
      SetCurrencyFactor(PurchHeader."Currency Code",PurchHeader."Currency Factor");
      "Source Currency Code" := PurchHeader."Currency Code";
      "Bill-to/Pay-to No." := PurchHeader."Pay-to Vendor No.";
      "Sell-to/Buy-from No." := PurchHeader."Buy-from Vendor No.";
      "Salespers./Purch. Code" := PurchHeader."Purchaser Code";
      "Source Type" := "Source Type"::Customer;
      "Source No." := PurchHeader."Pay-to Vendor No.";
      "IC Partner Code" := PurchHeader."Buy-from IC Partner Code";
      "System-Created Entry" := true;
      Prepayment := true;
      "Due Date" := PurchHeader."Prepayment Due Date";
      "Payment Terms Code" := PurchHeader."Payment Terms Code";
      if UsePmtDisc then begin
        "Pmt. Discount Date" := PurchHeader."Prepmt. Pmt. Discount Date";
        "Payment Discount %" := PurchHeader."Prepmt. Payment Discount %";
      end;

      OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost(PurchHeader,Rec,UsePmtDisc);
    END;

    [External]
    PROCEDURE CopyFromPurchHeaderApplyTo@107(PurchHeader@1001 : Record "Purchase Header");
    BEGIN
      "Applies-to Doc. Type" := PurchHeader."Applies-to Doc. Type";
      "Applies-to Doc. No." := PurchHeader."Applies-to Doc. No.";
      "Applies-to ID" := PurchHeader."Applies-to ID";
      "Allow Application" := PurchHeader."Bal. Account No." = '';

      OnAfterCopyGenJnlLineFromPurchHeaderApplyTo(PurchHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromPurchHeaderPayment@104(PurchHeader@1001 : Record "Purchase Header");
    BEGIN
      "Due Date" := PurchHeader."Due Date";
      "Payment Terms Code" := PurchHeader."Payment Terms Code";
      "Pmt. Discount Date" := PurchHeader."Pmt. Discount Date";
      "Payment Discount %" := PurchHeader."Payment Discount %";
      "Creditor No." := PurchHeader."Creditor No.";
      "Payment Reference" := PurchHeader."Payment Reference";
      "Payment Method Code" := PurchHeader."Payment Method Code";

      OnAfterCopyGenJnlLineFromPurchHeaderPayment(PurchHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromSalesHeader@103(SalesHeader@1001 : Record "Sales Header");
    BEGIN
      "Source Currency Code" := SalesHeader."Currency Code";
      "Currency Factor" := SalesHeader."Currency Factor";
      "VAT Base Discount %" := SalesHeader."VAT Base Discount %";
      Correction := SalesHeader.Correction;
      "EU 3-Party Trade" := SalesHeader."EU 3-Party Trade";
      "Sell-to/Buy-from No." := SalesHeader."Sell-to Customer No.";
      "Bill-to/Pay-to No." := SalesHeader."Bill-to Customer No.";
      "Country/Region Code" := SalesHeader."VAT Country/Region Code";
      "VAT Registration No." := SalesHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Customer;
      "Source No." := SalesHeader."Bill-to Customer No.";
      "Posting No. Series" := SalesHeader."Posting No. Series";
      "Ship-to/Order Address Code" := SalesHeader."Ship-to Code";
      "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
      "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
      "On Hold" := SalesHeader."On Hold";
      if "Account Type" = "Account Type"::Customer then
        "Posting Group" := SalesHeader."Customer Posting Group";

      OnAfterCopyGenJnlLineFromSalesHeader(SalesHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromSalesHeaderPrepmt@119(SalesHeader@1000 : Record "Sales Header");
    BEGIN
      "Source Currency Code" := SalesHeader."Currency Code";
      "VAT Base Discount %" := SalesHeader."VAT Base Discount %";
      "EU 3-Party Trade" := SalesHeader."EU 3-Party Trade";
      "Bill-to/Pay-to No." := SalesHeader."Bill-to Customer No.";
      "Country/Region Code" := SalesHeader."VAT Country/Region Code";
      "VAT Registration No." := SalesHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Customer;
      "Source No." := SalesHeader."Bill-to Customer No.";
      "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
      "VAT Posting" := "VAT Posting"::"Manual VAT Entry";
      "System-Created Entry" := true;
      Prepayment := true;

      OnAfterCopyGenJnlLineFromSalesHeaderPrepmt(SalesHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromSalesHeaderPrepmtPost@138(SalesHeader@1000 : Record "Sales Header";UsePmtDisc@1001 : Boolean);
    BEGIN
      "Account Type" := "Account Type"::Customer;
      "Account No." := SalesHeader."Bill-to Customer No.";
      SetCurrencyFactor(SalesHeader."Currency Code",SalesHeader."Currency Factor");
      "Source Currency Code" := SalesHeader."Currency Code";
      "Sell-to/Buy-from No." := SalesHeader."Sell-to Customer No.";
      "Bill-to/Pay-to No." := SalesHeader."Bill-to Customer No.";
      "Salespers./Purch. Code" := SalesHeader."Salesperson Code";
      "Source Type" := "Source Type"::Customer;
      "Source No." := SalesHeader."Bill-to Customer No.";
      "IC Partner Code" := SalesHeader."Sell-to IC Partner Code";
      "System-Created Entry" := true;
      Prepayment := true;
      "Due Date" := SalesHeader."Prepayment Due Date";
      "Payment Terms Code" := SalesHeader."Prepmt. Payment Terms Code";
      if UsePmtDisc then begin
        "Pmt. Discount Date" := SalesHeader."Prepmt. Pmt. Discount Date";
        "Payment Discount %" := SalesHeader."Prepmt. Payment Discount %";
      end;

      OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost(SalesHeader,Rec,UsePmtDisc);
    END;

    [External]
    PROCEDURE CopyFromSalesHeaderApplyTo@100(SalesHeader@1001 : Record "Sales Header");
    BEGIN
      "Applies-to Doc. Type" := SalesHeader."Applies-to Doc. Type";
      "Applies-to Doc. No." := SalesHeader."Applies-to Doc. No.";
      "Applies-to ID" := SalesHeader."Applies-to ID";
      "Allow Application" := SalesHeader."Bal. Account No." = '';

      OnAfterCopyGenJnlLineFromSalesHeaderApplyTo(SalesHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromSalesHeaderPayment@99(SalesHeader@1001 : Record "Sales Header");
    BEGIN
      "Due Date" := SalesHeader."Due Date";
      "Payment Terms Code" := SalesHeader."Payment Terms Code";
      "Payment Method Code" := SalesHeader."Payment Method Code";
      "Pmt. Discount Date" := SalesHeader."Pmt. Discount Date";
      "Payment Discount %" := SalesHeader."Payment Discount %";
      "Direct Debit Mandate ID" := SalesHeader."Direct Debit Mandate ID";

      OnAfterCopyGenJnlLineFromSalesHeaderPayment(SalesHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromServiceHeader@98(ServiceHeader@1001 : Record "Service Header");
    BEGIN
      "Source Currency Code" := ServiceHeader."Currency Code";
      Correction := ServiceHeader.Correction;
      "VAT Base Discount %" := ServiceHeader."VAT Base Discount %";
      "Sell-to/Buy-from No." := ServiceHeader."Customer No.";
      "Bill-to/Pay-to No." := ServiceHeader."Bill-to Customer No.";
      "Country/Region Code" := ServiceHeader."VAT Country/Region Code";
      "VAT Registration No." := ServiceHeader."VAT Registration No.";
      "Source Type" := "Source Type"::Customer;
      "Source No." := ServiceHeader."Bill-to Customer No.";
      "Posting No. Series" := ServiceHeader."Posting No. Series";
      "Ship-to/Order Address Code" := ServiceHeader."Ship-to Code";
      "EU 3-Party Trade" := ServiceHeader."EU 3-Party Trade";
      "Salespers./Purch. Code" := ServiceHeader."Salesperson Code";

      OnAfterCopyGenJnlLineFromServHeader(ServiceHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromServiceHeaderApplyTo@97(ServiceHeader@1001 : Record "Service Header");
    BEGIN
      "Applies-to Doc. Type" := ServiceHeader."Applies-to Doc. Type";
      "Applies-to Doc. No." := ServiceHeader."Applies-to Doc. No.";
      "Applies-to ID" := ServiceHeader."Applies-to ID";
      "Allow Application" := ServiceHeader."Bal. Account No." = '';

      OnAfterCopyGenJnlLineFromServHeaderApplyTo(ServiceHeader,Rec);
    END;

    [External]
    PROCEDURE CopyFromServiceHeaderPayment@96(ServiceHeader@1001 : Record "Service Header");
    BEGIN
      "Due Date" := ServiceHeader."Due Date";
      "Payment Terms Code" := ServiceHeader."Payment Terms Code";
      "Payment Method Code" := ServiceHeader."Payment Method Code";
      "Pmt. Discount Date" := ServiceHeader."Pmt. Discount Date";
      "Payment Discount %" := ServiceHeader."Payment Discount %";

      OnAfterCopyGenJnlLineFromServHeaderPayment(ServiceHeader,Rec);
    END;

    LOCAL PROCEDURE SetAmountWithCustLedgEntry@102();
    BEGIN
      if "Currency Code" <> CustLedgEntry."Currency Code" then
        CheckModifyCurrencyCode(GenJnlLine."Account Type"::Customer,CustLedgEntry."Currency Code");
      if Amount = 0 then begin
        CustLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,false),
          CustLedgEntry."Amount to Apply",CustLedgEntry."Remaining Amount",CustLedgEntry."Remaining Pmt. Disc. Possible");
      end;
    END;

    LOCAL PROCEDURE SetAmountWithVendLedgEntry@91();
    BEGIN
      if "Currency Code" <> VendLedgEntry."Currency Code" then
        CheckModifyCurrencyCode("Account Type"::Vendor,VendLedgEntry."Currency Code");
      if Amount = 0 then begin
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(
          PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,false),
          VendLedgEntry."Amount to Apply",VendLedgEntry."Remaining Amount",VendLedgEntry."Remaining Pmt. Disc. Possible");
      end;
    END;

    LOCAL PROCEDURE SetAmountWithEmplLedgEntry@176();
    BEGIN
      if Amount = 0 then begin
        EmplLedgEntry.CALCFIELDS("Remaining Amount");
        SetAmountWithRemaining(false,EmplLedgEntry."Amount to Apply",EmplLedgEntry."Remaining Amount",0.0);
      end;
    END;

    [External]
    PROCEDURE CheckModifyCurrencyCode@105(AccountType@1000 : Option;CustVendLedgEntryCurrencyCode@1001 : Code[10]);
    BEGIN
      if Amount = 0 then
        UpdateCurrencyCode(CustVendLedgEntryCurrencyCode)
      else
        GenJnlApply.CheckAgainstApplnCurrency(
          "Currency Code",CustVendLedgEntryCurrencyCode,AccountType,true);
    END;

    LOCAL PROCEDURE SetAmountWithRemaining@101(CalcPmtDisc@1000 : Boolean;AmountToApply@1001 : Decimal;RemainingAmount@1002 : Decimal;RemainingPmtDiscPossible@1003 : Decimal);
    BEGIN
      if AmountToApply <> 0 then
        if CalcPmtDisc and (ABS(AmountToApply) >= ABS(RemainingAmount - RemainingPmtDiscPossible)) then
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        else
          Amount := -AmountToApply
      else
        if CalcPmtDisc then
          Amount := -(RemainingAmount - RemainingPmtDiscPossible)
        else
          Amount := -RemainingAmount;
      if "Bal. Account Type" in ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor] then
        Amount := -Amount;
      VALIDATE(Amount);
    END;

    [External]
    PROCEDURE IsOpenedFromBatch@87() : Boolean;
    VAR
      GenJournalBatch@1002 : Record "Gen. Journal Batch";
      TemplateFilter@1001 : Text;
      BatchFilter@1000 : Text;
    BEGIN
      BatchFilter := GETFILTER("Journal Batch Name");
      if BatchFilter <> '' then begin
        TemplateFilter := GETFILTER("Journal Template Name");
        if TemplateFilter <> '' then
          GenJournalBatch.SETFILTER("Journal Template Name",TemplateFilter);
        GenJournalBatch.SETFILTER(Name,BatchFilter);
        GenJournalBatch.FINDFIRST;
      end;

      exit((("Journal Batch Name" <> '') and ("Journal Template Name" = '')) or (BatchFilter <> ''));
    END;

    [External]
    PROCEDURE GetDeferralAmount@88() DeferralAmount : Decimal;
    BEGIN
      if "VAT Base Amount" <> 0 then
        DeferralAmount := "VAT Base Amount"
      else
        DeferralAmount := Amount;
    END;

    [Internal]
    PROCEDURE ShowDeferrals@108(PostingDate@1000 : Date;CurrencyCode@1001 : Code[10]) : Boolean;
    VAR
      DeferralUtilities@1002 : Codeunit "Deferral Utilities";
    BEGIN
      exit(
        DeferralUtilities.OpenLineScheduleEdit(
          "Deferral Code",GetDeferralDocType,"Journal Template Name","Journal Batch Name",0,'',"Line No.",
          GetDeferralAmount,PostingDate,Description,CurrencyCode));
    END;

    [External]
    PROCEDURE GetDeferralDocType@106() : Integer;
    BEGIN
      exit(DeferralDocType::"G/L");
    END;

    [External]
    PROCEDURE IsForPurchase@86() : Boolean;
    BEGIN
      if ("Account Type" = "Account Type"::Vendor) or ("Bal. Account Type" = "Bal. Account Type"::Vendor) then
        exit(true);

      exit(false);
    END;

    [External]
    PROCEDURE IsForSales@89() : Boolean;
    BEGIN
      if ("Account Type" = "Account Type"::Customer) or ("Bal. Account Type" = "Bal. Account Type"::Customer) then
        exit(true);

      exit(false);
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckGenJournalLinePostRestrictions@90();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnCheckGenJournalLinePrintCheckRestrictions@92();
    BEGIN
    END;

    [Integration(TRUE)]
    [External]
    PROCEDURE OnMoveGenJournalLine@93(ToRecordID@1000 : RecordID);
    BEGIN
    END;

    LOCAL PROCEDURE IncrementDocumentNo@120();
    VAR
      NoSeriesLine@1001 : Record "No. Series Line";
    BEGIN
      if GenJnlBatch."No. Series" <> '' then begin
        NoSeriesMgt.SetNoSeriesLineFilter(NoSeriesLine,GenJnlBatch."No. Series","Posting Date");
        if NoSeriesLine."Increment-by No." > 1 then
          NoSeriesMgt.IncrementNoText("Document No.",NoSeriesLine."Increment-by No.")
        else
          "Document No." := INCSTR("Document No.");
      end else
        "Document No." := INCSTR("Document No.");
    END;

    [External]
    PROCEDURE NeedCheckZeroAmount@196() : Boolean;
    BEGIN
      exit(
        ("Account No." <> '') and
        not "System-Created Entry" and
        not "Allow Zero-Amount Posting" and
        ("Account Type" <> "Account Type"::"Fixed Asset"));
    END;

    [External]
    PROCEDURE IsRecurring@199() : Boolean;
    VAR
      GenJournalTemplate@1000 : Record "Gen. Journal Template";
    BEGIN
      if "Journal Template Name" <> '' then
        if GenJournalTemplate.GET("Journal Template Name") then
          exit(GenJournalTemplate.Recurring);

      exit(false);
    END;

    LOCAL PROCEDURE SuggestBalancingAmount@46(LastGenJnlLine@1001 : Record "Gen. Journal Line";BottomLine@1003 : Boolean);
    VAR
      GenJournalLine@1000 : Record "Gen. Journal Line";
    BEGIN
      if "Document No." = '' then
        exit;
      if GETFILTERS <> '' then
        exit;

      GenJournalLine.SETRANGE("Journal Template Name",LastGenJnlLine."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",LastGenJnlLine."Journal Batch Name");
      if BottomLine then
        GenJournalLine.SETFILTER("Line No.",'<=%1',LastGenJnlLine."Line No.")
      else
        GenJournalLine.SETFILTER("Line No.",'<%1',LastGenJnlLine."Line No.");

      if GenJournalLine.FINDLAST then begin
        if BottomLine then begin
          GenJournalLine.SETRANGE("Document No.",LastGenJnlLine."Document No.");
          GenJournalLine.SETRANGE("Posting Date",LastGenJnlLine."Posting Date");
        end else begin
          GenJournalLine.SETRANGE("Document No.",GenJournalLine."Document No.");
          GenJournalLine.SETRANGE("Posting Date",GenJournalLine."Posting Date");
        end;
        GenJournalLine.SETRANGE("Bal. Account No.",'');
        if GenJournalLine.FINDFIRST then begin
          GenJournalLine.CALCSUMS(Amount);
          "Document No." := GenJournalLine."Document No.";
          "Posting Date" := GenJournalLine."Posting Date";
          VALIDATE(Amount,-GenJournalLine.Amount);
        end;
      end;
    END;

    LOCAL PROCEDURE GetGLAccount@146();
    VAR
      GLAcc@1000 : Record "G/L Account";
    BEGIN
      GLAcc.GET("Account No.");
      CheckGLAcc(GLAcc);
      if ReplaceDescription and (not GLAcc."Omit Default Descr. in Jnl.") then
        UpdateDescription(GLAcc.Name)
      else
        if GLAcc."Omit Default Descr. in Jnl." then
          Description := '';
      if ("Bal. Account No." = '') or
         ("Bal. Account Type" in
          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
      then begin
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      end;
      if "Bal. Account No." = '' then
        "Currency Code" := '';
      if "Copy VAT Setup to Jnl. Lines" then begin
        "Gen. Posting Type" := GLAcc."Gen. Posting Type";
        "Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
        "Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
        "VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
        "VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
      end;
      "Tax Area Code" := GLAcc."Tax Area Code";
      "Tax Liable" := GLAcc."Tax Liable";
      "Tax Group Code" := GLAcc."Tax Group Code";
      if "Posting Date" <> 0D then
        if "Posting Date" = CLOSINGDATE("Posting Date") then
          ClearPostingGroups;
      VALIDATE("Deferral Code",GLAcc."Default Deferral Template Code");

      OnAfterAccountNoOnValidateGetGLAccount(Rec,GLAcc);
    END;

    LOCAL PROCEDURE GetGLBalAccount@121();
    VAR
      GLAcc@1000 : Record "G/L Account";
    BEGIN
      GLAcc.GET("Bal. Account No.");
      CheckGLAcc(GLAcc);
      if "Account No." = '' then begin
        Description := GLAcc.Name;
        "Currency Code" := '';
      end;
      if ("Account No." = '') or
         ("Account Type" in
          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
      then begin
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      end;
      if "Copy VAT Setup to Jnl. Lines" then begin
        "Bal. Gen. Posting Type" := GLAcc."Gen. Posting Type";
        "Bal. Gen. Bus. Posting Group" := GLAcc."Gen. Bus. Posting Group";
        "Bal. Gen. Prod. Posting Group" := GLAcc."Gen. Prod. Posting Group";
        "Bal. VAT Bus. Posting Group" := GLAcc."VAT Bus. Posting Group";
        "Bal. VAT Prod. Posting Group" := GLAcc."VAT Prod. Posting Group";
      end;
      "Bal. Tax Area Code" := GLAcc."Tax Area Code";
      "Bal. Tax Liable" := GLAcc."Tax Liable";
      "Bal. Tax Group Code" := GLAcc."Tax Group Code";
      if "Posting Date" <> 0D then
        if "Posting Date" = CLOSINGDATE("Posting Date") then
          ClearBalancePostingGroups;

      OnAfterAccountNoOnValidateGetGLBalAccount(Rec,GLAcc);
    END;

    LOCAL PROCEDURE GetCustomerAccount@47();
    VAR
      Cust@1000 : Record Customer;
    BEGIN
      Cust.GET("Account No.");
      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",false);
      CheckICPartner(Cust."IC Partner Code","Account Type","Account No.");
      UpdateDescription(Cust.Name);
      "Payment Method Code" := Cust."Payment Method Code";
      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account Code");
      "Posting Group" := Cust."Customer Posting Group";
      "Salespers./Purch. Code" := Cust."Salesperson Code";
      "Payment Terms Code" := Cust."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Account No.");
      VALIDATE("Sell-to/Buy-from No.","Account No.");
      if not SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
        "Currency Code" := Cust."Currency Code";
      ClearPostingGroups;
      if (Cust."Bill-to Customer No." <> '') and (Cust."Bill-to Customer No." <> "Account No.") and
         not HideValidationDialog
      then
        if not CONFIRM(Text014,false,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
             Cust."Bill-to Customer No.")
        then
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;

      OnAfterAccountNoOnValidateGetCustomerAccount(Rec,Cust);
    END;

    LOCAL PROCEDURE GetCustomerBalAccount@122();
    VAR
      Cust@1000 : Record Customer;
    BEGIN
      Cust.GET("Bal. Account No.");
      Cust.CheckBlockedCustOnJnls(Cust,"Document Type",false);
      CheckICPartner(Cust."IC Partner Code","Bal. Account Type","Bal. Account No.");
      if "Account No." = '' then
        Description := Cust.Name;
      "Payment Method Code" := Cust."Payment Method Code";
      VALIDATE("Recipient Bank Account",Cust."Preferred Bank Account Code");
      "Posting Group" := Cust."Customer Posting Group";
      "Salespers./Purch. Code" := Cust."Salesperson Code";
      "Payment Terms Code" := Cust."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
      if ("Account No." = '') or ("Account Type" = "Account Type"::"G/L Account") then
        "Currency Code" := Cust."Currency Code";
      if ("Account Type" = "Account Type"::"Bank Account") and ("Currency Code" = '') then
        "Currency Code" := Cust."Currency Code";
      ClearBalancePostingGroups;
      if (Cust."Bill-to Customer No." <> '') and (Cust."Bill-to Customer No." <> "Bal. Account No.") then
        if not CONFIRM(Text014,false,Cust.TABLECAPTION,Cust."No.",Cust.FIELDCAPTION("Bill-to Customer No."),
             Cust."Bill-to Customer No.")
        then
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;

      OnAfterAccountNoOnValidateGetCustomerBalAccount(Rec,Cust);
    END;

    LOCAL PROCEDURE GetVendorAccount@115();
    VAR
      Vend@1000 : Record Vendor;
    BEGIN
      Vend.GET("Account No.");
      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",false);
      CheckICPartner(Vend."IC Partner Code","Account Type","Account No.");
      UpdateDescription(Vend.Name);
      "Payment Method Code" := Vend."Payment Method Code";
      "Creditor No." := Vend."Creditor No.";

      OnGenJnlLineGetVendorAccount(Vend);

      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account Code");
      "Posting Group" := Vend."Vendor Posting Group";
      "Salespers./Purch. Code" := Vend."Purchaser Code";
      "Payment Terms Code" := Vend."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Account No.");
      VALIDATE("Sell-to/Buy-from No.","Account No.");
      if not SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
        "Currency Code" := Vend."Currency Code";
      ClearPostingGroups;
      if (Vend."Pay-to Vendor No." <> '') and (Vend."Pay-to Vendor No." <> "Account No.") and
         not HideValidationDialog
      then
        if not CONFIRM(Text014,false,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
             Vend."Pay-to Vendor No.")
        then
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;

      OnAfterAccountNoOnValidateGetVendorAccount(Rec,Vend);
    END;

    LOCAL PROCEDURE GetEmployeeAccount@188();
    VAR
      Employee@1000 : Record Employee;
    BEGIN
      Employee.GET("Account No.");
      UpdateDescriptionWithEmployeeName(Employee);
      "Posting Group" := Employee."Employee Posting Group";
      "Salespers./Purch. Code" := Employee."Salespers./Purch. Code";
      "Currency Code" := '';
      ClearPostingGroups;

      OnAfterAccountNoOnValidateGetEmployeeAccount(Rec,Employee);
    END;

    LOCAL PROCEDURE GetVendorBalAccount@123();
    VAR
      Vend@1000 : Record Vendor;
    BEGIN
      Vend.GET("Bal. Account No.");
      Vend.CheckBlockedVendOnJnls(Vend,"Document Type",false);
      CheckICPartner(Vend."IC Partner Code","Bal. Account Type","Bal. Account No.");
      if "Account No." = '' then
        Description := Vend.Name;
      "Payment Method Code" := Vend."Payment Method Code";
      VALIDATE("Recipient Bank Account",Vend."Preferred Bank Account Code");
      "Posting Group" := Vend."Vendor Posting Group";
      "Salespers./Purch. Code" := Vend."Purchaser Code";
      "Payment Terms Code" := Vend."Payment Terms Code";
      VALIDATE("Bill-to/Pay-to No.","Bal. Account No.");
      VALIDATE("Sell-to/Buy-from No.","Bal. Account No.");
      if ("Account No." = '') or ("Account Type" = "Account Type"::"G/L Account") then
        "Currency Code" := Vend."Currency Code";
      if ("Account Type" = "Account Type"::"Bank Account") and ("Currency Code" = '') then
        "Currency Code" := Vend."Currency Code";
      ClearBalancePostingGroups;
      if (Vend."Pay-to Vendor No." <> '') and (Vend."Pay-to Vendor No." <> "Bal. Account No.") and
         not HideValidationDialog
      then
        if not CONFIRM(Text014,false,Vend.TABLECAPTION,Vend."No.",Vend.FIELDCAPTION("Pay-to Vendor No."),
             Vend."Pay-to Vendor No.")
        then
          ERROR('');
      VALIDATE("Payment Terms Code");
      CheckPaymentTolerance;

      OnAfterAccountNoOnValidateGetVendorBalAccount(Rec,Vend);
    END;

    LOCAL PROCEDURE GetEmployeeBalAccount@177();
    VAR
      Employee@1000 : Record Employee;
    BEGIN
      Employee.GET("Bal. Account No.");
      if "Account No." = '' then
        UpdateDescriptionWithEmployeeName(Employee);
      "Posting Group" := Employee."Employee Posting Group";
      "Salespers./Purch. Code" := Employee."Salespers./Purch. Code";
      "Currency Code" := '';
      ClearBalancePostingGroups;

      OnAfterAccountNoOnValidateGetEmployeeBalAccount(Rec,Employee);
    END;

    LOCAL PROCEDURE GetBankAccount@116();
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      BankAcc.GET("Account No.");
      BankAcc.TESTFIELD(Blocked,false);
      if ReplaceDescription then
        UpdateDescription(BankAcc.Name);
      if ("Bal. Account No." = '') or
         ("Bal. Account Type" in
          ["Bal. Account Type"::"G/L Account","Bal. Account Type"::"Bank Account"])
      then begin
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      end;
      if BankAcc."Currency Code" = '' then begin
        if "Bal. Account No." = '' then
          "Currency Code" := '';
      end else
        if SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
          BankAcc.TESTFIELD("Currency Code","Currency Code")
        else
          "Currency Code" := BankAcc."Currency Code";
      ClearPostingGroups;

      OnAfterAccountNoOnValidateGetBankAccount(Rec,BankAcc);
    END;

    LOCAL PROCEDURE GetBankBalAccount@124();
    VAR
      BankAcc@1000 : Record "Bank Account";
    BEGIN
      BankAcc.GET("Bal. Account No.");
      BankAcc.TESTFIELD(Blocked,false);
      if "Account No." = '' then
        Description := BankAcc.Name;

      if ("Account No." = '') or
         ("Account Type" in
          ["Account Type"::"G/L Account","Account Type"::"Bank Account"])
      then begin
        "Posting Group" := '';
        "Salespers./Purch. Code" := '';
        "Payment Terms Code" := '';
      end;
      if BankAcc."Currency Code" = '' then begin
        if "Account No." = '' then
          "Currency Code" := '';
      end else
        if SetCurrencyCode("Bal. Account Type","Bal. Account No.") then
          BankAcc.TESTFIELD("Currency Code","Currency Code")
        else
          "Currency Code" := BankAcc."Currency Code";
      ClearBalancePostingGroups;

      OnAfterAccountNoOnValidateGetBankBalAccount(Rec,BankAcc);
    END;

    LOCAL PROCEDURE GetFAAccount@117();
    VAR
      FA@1000 : Record "Fixed Asset";
    BEGIN
      FA.GET("Account No.");
      FA.TESTFIELD(Blocked,false);
      FA.TESTFIELD(Inactive,false);
      FA.TESTFIELD("Budgeted Asset",false);
      UpdateDescription(FA.Description);
      GetFADeprBook;
      GetFAVATSetup;
      GetFAAddCurrExchRate;

      OnAfterAccountNoOnValidateGetFAAccount(Rec,FA);
    END;

    LOCAL PROCEDURE GetFABalAccount@125();
    VAR
      FA@1000 : Record "Fixed Asset";
    BEGIN
      FA.GET("Bal. Account No.");
      FA.TESTFIELD(Blocked,false);
      FA.TESTFIELD(Inactive,false);
      FA.TESTFIELD("Budgeted Asset",false);
      if "Account No." = '' then
        Description := FA.Description;
      GetFADeprBook;
      GetFAVATSetup;
      GetFAAddCurrExchRate;

      OnAfterAccountNoOnValidateGetFABalAccount(Rec,FA);
    END;

    LOCAL PROCEDURE GetICPartnerAccount@118();
    VAR
      ICPartner@1000 : Record "IC Partner";
    BEGIN
      ICPartner.GET("Account No.");
      ICPartner.CheckICPartner;
      UpdateDescription(ICPartner.Name);
      if ("Bal. Account No." = '') or ("Bal. Account Type" = "Bal. Account Type"::"G/L Account") then
        "Currency Code" := ICPartner."Currency Code";
      if ("Bal. Account Type" = "Bal. Account Type"::"Bank Account") and ("Currency Code" = '') then
        "Currency Code" := ICPartner."Currency Code";
      ClearPostingGroups;
      "IC Partner Code" := "Account No.";

      OnAfterAccountNoOnValidateGetICPartnerAccount(Rec,ICPartner);
    END;

    LOCAL PROCEDURE GetICPartnerBalAccount@126();
    VAR
      ICPartner@1000 : Record "IC Partner";
    BEGIN
      ICPartner.GET("Bal. Account No.");
      if "Account No." = '' then
        Description := ICPartner.Name;

      if ("Account No." = '') or ("Account Type" = "Account Type"::"G/L Account") then
        "Currency Code" := ICPartner."Currency Code";
      if ("Account Type" = "Account Type"::"Bank Account") and ("Currency Code" = '') then
        "Currency Code" := ICPartner."Currency Code";
      ClearBalancePostingGroups;
      "IC Partner Code" := "Bal. Account No.";

      OnAfterAccountNoOnValidateGetICPartnerBalAccount(Rec,ICPartner);
    END;

    [External]
    PROCEDURE CreateFAAcquisitionLines@131(VAR FAGenJournalLine@1008 : Record "Gen. Journal Line");
    VAR
      BalancingGenJnlLine@1006 : Record "Gen. Journal Line";
      LocalGLAcc@1001 : Record "G/L Account";
      FAPostingGr@1000 : Record "FA Posting Group";
    BEGIN
      TESTFIELD("Journal Template Name");
      TESTFIELD("Journal Batch Name");
      TESTFIELD("Posting Date");
      TESTFIELD("Account Type");
      TESTFIELD("Account No.");
      TESTFIELD("Posting Date");

      // Creating Fixed Asset Line
      FAGenJournalLine.INIT;
      FAGenJournalLine.VALIDATE("Journal Template Name","Journal Template Name");
      FAGenJournalLine.VALIDATE("Journal Batch Name","Journal Batch Name");
      FAGenJournalLine.VALIDATE("Line No.",GetNewLineNo("Journal Template Name","Journal Batch Name"));
      FAGenJournalLine.VALIDATE("Document Type","Document Type");
      FAGenJournalLine.VALIDATE("Document No.",GenerateLineDocNo("Journal Batch Name","Posting Date","Journal Template Name"));
      FAGenJournalLine.VALIDATE("Account Type","Account Type");
      FAGenJournalLine.VALIDATE("Account No.","Account No.");
      FAGenJournalLine.VALIDATE(Amount,Amount);
      FAGenJournalLine.VALIDATE("Posting Date","Posting Date");
      FAGenJournalLine.VALIDATE("FA Posting Type","FA Posting Type"::"Acquisition Cost");
      FAGenJournalLine.VALIDATE("External Document No.","External Document No.");
      FAGenJournalLine.INSERT(true);

      // Creating Balancing Line
      BalancingGenJnlLine.COPY(FAGenJournalLine);
      BalancingGenJnlLine.VALIDATE("Account Type","Bal. Account Type");
      BalancingGenJnlLine.VALIDATE("Account No.","Bal. Account No.");
      BalancingGenJnlLine.VALIDATE(Amount,-Amount);
      BalancingGenJnlLine.VALIDATE("Line No.",GetNewLineNo("Journal Template Name","Journal Batch Name"));
      BalancingGenJnlLine.INSERT(true);

      FAGenJournalLine.TESTFIELD("Posting Group");

      // Inserting additional fields in Fixed Asset line required for acquisition
      if FAPostingGr.GET(FAGenJournalLine."Posting Group") then begin
        LocalGLAcc.GET(FAPostingGr."Acquisition Cost Account");
        LocalGLAcc.CheckGLAcc;
        FAGenJournalLine.VALIDATE("Gen. Posting Type",LocalGLAcc."Gen. Posting Type");
        FAGenJournalLine.VALIDATE("Gen. Bus. Posting Group",LocalGLAcc."Gen. Bus. Posting Group");
        FAGenJournalLine.VALIDATE("Gen. Prod. Posting Group",LocalGLAcc."Gen. Prod. Posting Group");
        FAGenJournalLine.VALIDATE("VAT Bus. Posting Group",LocalGLAcc."VAT Bus. Posting Group");
        FAGenJournalLine.VALIDATE("VAT Prod. Posting Group",LocalGLAcc."VAT Prod. Posting Group");
        FAGenJournalLine.VALIDATE("Tax Group Code",LocalGLAcc."Tax Group Code");
        FAGenJournalLine.VALIDATE("VAT Prod. Posting Group");
        FAGenJournalLine.MODIFY(true)
      end;

      // Inserting Source Code
      if "Source Code" = '' then begin
        GenJnlTemplate.GET("Journal Template Name");
        FAGenJournalLine.VALIDATE("Source Code",GenJnlTemplate."Source Code");
        FAGenJournalLine.MODIFY(true);
        BalancingGenJnlLine.VALIDATE("Source Code",GenJnlTemplate."Source Code");
        BalancingGenJnlLine.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE GenerateLineDocNo@132(BatchName@1004 : Code[10];PostingDate@1002 : Date;TemplateName@1005 : Code[20]) DocumentNo : Code[20];
    VAR
      GenJournalBatch@1000 : Record "Gen. Journal Batch";
      NoSeriesManagement@1003 : Codeunit NoSeriesManagement;
    BEGIN
      GenJournalBatch.GET(TemplateName,BatchName);
      if GenJournalBatch."No. Series" <> '' then
        DocumentNo := NoSeriesManagement.TryGetNextNo(GenJournalBatch."No. Series",PostingDate);
    END;

    LOCAL PROCEDURE GetFilterAccountNo@133() : Code[20];
    BEGIN
      if GETFILTER("Account No.") <> '' then
        if GETRANGEMIN("Account No.") = GETRANGEMAX("Account No.") then
          exit(GETRANGEMAX("Account No."));
    END;

    [External]
    PROCEDURE SetAccountNoFromFilter@135();
    VAR
      AccountNo@1000 : Code[20];
    BEGIN
      AccountNo := GetFilterAccountNo;
      if AccountNo = '' then begin
        FILTERGROUP(2);
        AccountNo := GetFilterAccountNo;
        FILTERGROUP(0);
      end;
      if AccountNo <> '' then
        "Account No." := AccountNo;
    END;

    [External]
    PROCEDURE GetNewLineNo@136(TemplateName@1000 : Code[10];BatchName@1001 : Code[10]) : Integer;
    VAR
      GenJournalLine@1002 : Record "Gen. Journal Line";
    BEGIN
      GenJournalLine.VALIDATE("Journal Template Name",TemplateName);
      GenJournalLine.VALIDATE("Journal Batch Name",BatchName);
      GenJournalLine.SETRANGE("Journal Template Name",TemplateName);
      GenJournalLine.SETRANGE("Journal Batch Name",BatchName);
      if GenJournalLine.FINDLAST then
        exit(GenJournalLine."Line No." + 10000);
      exit(10000);
    END;

    PROCEDURE VoidPaymentFile@139();
    VAR
      TempGenJnlLine@1000 : TEMPORARY Record "Gen. Journal Line";
      GenJournalLine2@1002 : Record "Gen. Journal Line";
      VoidTransmitElecPmnts@1001 : Report "Void/Transmit Elec. Pmnts";
    BEGIN
      TempGenJnlLine.RESET;
      TempGenJnlLine := Rec;
      TempGenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      TempGenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      GenJournalLine2.COPYFILTERS(TempGenJnlLine);
      GenJournalLine2.SETFILTER("Document Type",'Payment|Refund');
      GenJournalLine2.SETFILTER("Bank Payment Type",'Electronic Payment|Electronic Payment-IAT');
      GenJournalLine2.SETRANGE("Exported to Payment File",true);
      GenJournalLine2.SETRANGE("Check Transmitted",false);
      if not GenJournalLine2.FINDFIRST then
        ERROR(NoEntriesToVoidErr);

      CLEAR(VoidTransmitElecPmnts);
      VoidTransmitElecPmnts.SetUsageType(1);   // Void
      VoidTransmitElecPmnts.SETTABLEVIEW(TempGenJnlLine);
      if "Account Type" = "Account Type"::"Bank Account" then
        VoidTransmitElecPmnts.SetBankAccountNo("Account No.")
      else
        if "Bal. Account Type" = "Bal. Account Type"::"Bank Account" then
          VoidTransmitElecPmnts.SetBankAccountNo("Bal. Account No.");
      VoidTransmitElecPmnts.RUNMODAL;
    END;

    PROCEDURE TransmitPaymentFile@142();
    VAR
      TempGenJnlLine@1000 : TEMPORARY Record "Gen. Journal Line";
      VoidTransmitElecPmnts@1001 : Report "Void/Transmit Elec. Pmnts";
    BEGIN
      TempGenJnlLine.RESET;
      TempGenJnlLine := Rec;
      TempGenJnlLine.SETRANGE("Journal Template Name","Journal Template Name");
      TempGenJnlLine.SETRANGE("Journal Batch Name","Journal Batch Name");
      CLEAR(VoidTransmitElecPmnts);
      VoidTransmitElecPmnts.SetUsageType(2);   // Transmit
      VoidTransmitElecPmnts.SETTABLEVIEW(TempGenJnlLine);
      if "Account Type" = "Account Type"::"Bank Account" then
        VoidTransmitElecPmnts.SetBankAccountNo("Account No.")
      else
        if "Bal. Account Type" = "Bal. Account Type"::"Bank Account" then
          VoidTransmitElecPmnts.SetBankAccountNo("Bal. Account No.");
      VoidTransmitElecPmnts.RUNMODAL;
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSetupNewLine@161(VAR GenJournalLine@1000 : Record "Gen. Journal Line";GenJournalTemplate@1001 : Record "Gen. Journal Template";GenJournalBatch@1002 : Record "Gen. Journal Batch";LastGenJournalLine@1003 : Record "Gen. Journal Line";Balance@1004 : Decimal;BottomLine@1005 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromCustLedgEntry@181(CustLedgerEntry@1000 : Record "Cust. Ledger Entry";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromGenJnlAllocation@182(GenJnlAllocation@1000 : Record "Gen. Jnl. Allocation";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromSalesHeader@160(SalesHeader@1001 : Record "Sales Header";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromSalesHeaderPrepmt@195(SalesHeader@1000 : Record "Sales Header";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromSalesHeaderPrepmtPost@197(SalesHeader@1000 : Record "Sales Header";VAR GenJournalLine@1001 : Record "Gen. Journal Line";UsePmtDisc@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromSalesHeaderApplyTo@200(SalesHeader@1000 : Record "Sales Header";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromSalesHeaderPayment@201(SalesHeader@1000 : Record "Sales Header";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromPurchHeader@141(PurchaseHeader@1001 : Record "Purchase Header";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromPurchHeaderPrepmt@186(PurchaseHeader@1001 : Record "Purchase Header";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromPurchHeaderPrepmtPost@187(PurchaseHeader@1000 : Record "Purchase Header";VAR GenJournalLine@1001 : Record "Gen. Journal Line";UsePmtDisc@1002 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromPurchHeaderApplyTo@192(PurchaseHeader@1000 : Record "Purchase Header";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromPurchHeaderPayment@194(PurchaseHeader@1000 : Record "Purchase Header";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromServHeader@163(ServiceHeader@1001 : Record "Service Header";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromServHeaderApplyTo@203(ServiceHeader@1001 : Record "Service Header";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromServHeaderPayment@204(ServiceHeader@1001 : Record "Service Header";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromInvPostBuffer@144(InvoicePostBuffer@1001 : Record "Invoice Post. Buffer";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromInvPostBufferFA@184(InvoicePostBuffer@1000 : Record "Invoice Post. Buffer";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyGenJnlLineFromPrepmtInvBuffer@148(PrepmtInvLineBuffer@1001 : Record "Prepayment Inv. Line Buffer";VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetGLAccount@145(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR GLAccount@1001 : Record "G/L Account");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetGLBalAccount@147(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR GLAccount@1001 : Record "G/L Account");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetCustomerAccount@149(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR Customer@1001 : Record Customer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetCustomerBalAccount@152(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR Customer@1001 : Record Customer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetVendorAccount@150(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR Vendor@1001 : Record Vendor);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetVendorBalAccount@153(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR Vendor@1001 : Record Vendor);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetEmployeeAccount@189(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR Employee@1001 : Record Employee);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetEmployeeBalAccount@179(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR Employee@1001 : Record Employee);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetBankAccount@155(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR BankAccount@1001 : Record "Bank Account");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetBankBalAccount@154(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR BankAccount@1001 : Record "Bank Account");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetFAAccount@157(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR FixedAsset@1001 : Record "Fixed Asset");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetFABalAccount@156(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR FixedAsset@1001 : Record "Fixed Asset");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetICPartnerAccount@159(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR ICPartner@1001 : Record "IC Partner");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterAccountNoOnValidateGetICPartnerBalAccount@158(VAR GenJournalLine@1000 : Record "Gen. Journal Line";VAR ICPartner@1001 : Record "IC Partner");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateTempJobJnlLine@151(VAR JobJournalLine@1003 : Record "Job Journal Line";GenJournalLine@1002 : Record "Gen. Journal Line";xGenJournalLine@1001 : Record "Gen. Journal Line";CurrFieldNo@1000 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateTempJobJnlLine@162(VAR JobJournalLine@1003 : Record "Job Journal Line";GenJournalLine@1000 : Record "Gen. Journal Line";xGenJournalLine@1002 : Record "Gen. Journal Line";CurrFieldNo@1001 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUpdatePricesFromJobJnlLine@166(VAR GenJournalLine@1000 : Record "Gen. Journal Line";JobJournalLine@1001 : Record "Job Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@164(VAR GenJournalLine@1000 : Record "Gen. Journal Line";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterClearPostingGroups@168(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterClearBalPostingGroups@169(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    BEGIN
    END;

    LOCAL PROCEDURE SetLastModifiedDateTime@1165();
    VAR
      DateFilterCalc@1000 : Codeunit "DateFilter-Calc";
    BEGIN
      "Last Modified DateTime" := DateFilterCalc.ConvertToUtcDateTime(CURRENTDATETIME);
    END;

    PROCEDURE UpdateAccountID@1166();
    VAR
      GLAccount@1000 : Record "G/L Account";
    BEGIN
      if "Account Type" <> "Account Type"::"G/L Account" then
        exit;

      if "Account No." = '' then begin
        CLEAR("Account Id");
        exit;
      end;

      if not GLAccount.GET("Account No.") then
        exit;

      "Account Id" := GLAccount.Id;
    END;

    LOCAL PROCEDURE UpdateAccountNo@1164();
    VAR
      GLAccount@1001 : Record "G/L Account";
    BEGIN
      if ISNULLGUID("Account Id") then
        exit;

      GLAccount.SETRANGE(Id,"Account Id");
      if not GLAccount.FINDFIRST then
        exit;

      "Account No." := GLAccount."No.";
    END;

    PROCEDURE UpdateCustomerID@175();
    VAR
      Customer@1000 : Record Customer;
    BEGIN
      if "Account Type" <> "Account Type"::Customer then
        exit;

      if "Account No." = '' then begin
        CLEAR("Customer Id");
        exit;
      end;

      if not Customer.GET("Account No.") then
        exit;

      "Customer Id" := Customer.Id;
    END;

    LOCAL PROCEDURE UpdateCustomerNo@174();
    VAR
      Customer@1001 : Record Customer;
    BEGIN
      if ISNULLGUID("Customer Id") then
        exit;

      Customer.SETRANGE(Id,"Customer Id");
      if not Customer.FINDFIRST then
        exit;

      "Account No." := Customer."No.";
    END;

    PROCEDURE UpdateAppliesToInvoiceID@167();
    VAR
      SalesInvoiceHeader@1000 : Record "Sales Invoice Header";
    BEGIN
      if "Applies-to Doc. Type" <> "Applies-to Doc. Type"::Invoice then
        exit;

      if "Applies-to Doc. No." = '' then begin
        CLEAR("Applies-to Invoice Id");
        exit;
      end;

      if not SalesInvoiceHeader.GET("Applies-to Doc. No.") then
        exit;

      "Applies-to Invoice Id" := SalesInvoiceHeader.Id;
    END;

    LOCAL PROCEDURE UpdateAppliesToInvoiceNo@165();
    VAR
      SalesInvoiceHeader@1001 : Record "Sales Invoice Header";
    BEGIN
      if ISNULLGUID("Applies-to Invoice Id") then
        exit;

      SalesInvoiceHeader.SETRANGE(Id,"Applies-to Invoice Id");
      if not SalesInvoiceHeader.FINDFIRST then
        exit;

      "Applies-to Doc. No." := SalesInvoiceHeader."No.";
    END;

    PROCEDURE UpdateGraphContactId@170();
    VAR
      Customer@1003 : Record Customer;
      Contact@1002 : Record Contact;
      GraphIntContact@1001 : Codeunit "Graph Int. - Contact";
      GraphID@1000 : Text[250];
    BEGIN
      if ISNULLGUID("Customer Id") then
        CLEAR("Contact Graph Id");

      Customer.SETRANGE(Id,"Customer Id");
      if not Customer.FINDFIRST then
        CLEAR("Contact Graph Id");

      if not GraphIntContact.FindGraphContactIdFromCustomer(GraphID,Customer,Contact) then
        CLEAR("Contact Graph Id");

      "Contact Graph Id" := GraphID;
    END;

    PROCEDURE UpdateJournalBatchID@173();
    VAR
      GenJournalBatch@1000 : Record "Gen. Journal Batch";
    BEGIN
      if not GenJournalBatch.GET("Journal Template Name","Journal Batch Name") then
        exit;

      "Journal Batch Id" := GenJournalBatch.Id;
    END;

    LOCAL PROCEDURE UpdateJournalBatchName@172();
    VAR
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
    BEGIN
      GenJournalBatch.SETRANGE(Id,"Journal Batch Id");
      if not GenJournalBatch.FINDFIRST then
        exit;

      "Journal Batch Name" := GenJournalBatch.Name;
    END;

    PROCEDURE UpdatePaymentMethodId@198();
    VAR
      PaymentMethod@1000 : Record "Payment Method";
    BEGIN
      if "Payment Method Code" = '' then begin
        CLEAR("Payment Method Id");
        exit;
      end;

      if not PaymentMethod.GET("Payment Method Code") then
        exit;

      "Payment Method Id" := PaymentMethod.Id;
    END;

    LOCAL PROCEDURE UpdatePaymentMethodCode@185();
    VAR
      PaymentMethod@1001 : Record "Payment Method";
    BEGIN
      if ISNULLGUID("Payment Method Id") then
        exit;

      PaymentMethod.SETRANGE(Id,"Payment Method Id");
      if not PaymentMethod.FINDFIRST then
        exit;

      "Payment Method Code" := PaymentMethod.Code;
    END;

    LOCAL PROCEDURE UpdateDescriptionWithEmployeeName@178(Employee@1000 : Record Employee);
    BEGIN
      if STRLEN(Employee.FullName) <= MAXSTRLEN(Description) then
        UpdateDescription(COPYSTR(Employee.FullName,1,MAXSTRLEN(Description)))
      else
        UpdateDescription(Employee.Initials);
    END;

    [Integration(TRUE)]
    PROCEDURE OnGenJnlLineGetVendorAccount@1217(Vendor@1213 : Record Vendor);
    BEGIN
    END;

    BEGIN
    END.
  }
}

