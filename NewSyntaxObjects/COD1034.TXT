OBJECT Codeunit 1034 Job Planning Line - Calendar
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Job Planning Line";
    OnRun=VAR
            LocalJobPlanningLine@1000 : Record "Job Planning Line";
          BEGIN
            LocalJobPlanningLine.SETVIEW(GETVIEW);
            LocalJobPlanningLine.SETFILTER("Line Type",'%1|%2',"Line Type"::Budget,"Line Type"::"Both Budget and Billable");
            LocalJobPlanningLine.SETRANGE(Type,Type::Resource);
            LocalJobPlanningLine.SETFILTER("No.",'<>''''');
            if LocalJobPlanningLine.FINDSET then begin
              repeat
                SetPlanningLine(LocalJobPlanningLine);
                CreateAndSend;
              until LocalJobPlanningLine.NEXT = 0;
            end;
          END;

  }
  CODE
  {
    VAR
      JobPlanningLineCalendar@1012 : Record "Job Planning Line - Calendar";
      JobPlanningLine@1000 : Record "Job Planning Line";
      Job@1001 : Record Job;
      JobTask@1002 : Record "Job Task";
      Contact@1004 : Record Contact;
      Customer@1003 : Record Customer;
      ProjectManagerResource@1005 : Record Resource;
      AdditionalResourcesTxt@1009 : TextConst 'ENU=Additional Resources';
      SetPlanningLineErr@1008 : TextConst 'ENU=You must specify a job planning line before you can send the appointment.';
      DateTimeFormatTxt@1010 : TextConst '@@@={Locked};ENU=<Year4><Month,2><Day,2>T<Hours24,2><Minutes,2><Seconds,2>';
      ProdIDTxt@1011 : TextConst '@@@={Locked};ENU=//Microsoft Corporation//Dynamics 365//EN';
      Resource@1006 : Record Resource;

    [External]
    PROCEDURE SetPlanningLine@4(NewJobPlanningLine@1000 : Record "Job Planning Line");
    BEGIN
      JobPlanningLine := NewJobPlanningLine;
      UpdateJob;
      UpdateJobTask;
      UpdateResource;
    END;

    [Internal]
    PROCEDURE CreateAndSend@13();
    VAR
      TempEmailItem@1000 : TEMPORARY Record "Email Item";
    BEGIN
      if JobPlanningLine."No." = '' then
        ERROR(SetPlanningLineErr);

      if JobPlanningLineCalendar.ShouldSendCancellation(JobPlanningLine) then
        if CreateCancellation(TempEmailItem) then
          TempEmailItem.Send(true);

      if JobPlanningLineCalendar.ShouldSendRequest(JobPlanningLine) then
        if CreateRequest(TempEmailItem) then
          TempEmailItem.Send(true);
    END;

    [Internal]
    PROCEDURE CreateRequest@14(VAR TempEmailItem@1002 : TEMPORARY Record "Email Item") : Boolean;
    VAR
      Email@1000 : Text[80];
    BEGIN
      if JobPlanningLine."No." = '' then
        ERROR(SetPlanningLineErr);

      Email := GetResourceEmail(JobPlanningLine."No.");

      if Email <> '' then begin
        JobPlanningLineCalendar.InsertOrUpdate(JobPlanningLine);
        GenerateEmail(TempEmailItem,Email,false);
        exit(true);
      end;
    END;

    [Internal]
    PROCEDURE CreateCancellation@7(VAR TempEmailItem@1002 : TEMPORARY Record "Email Item") : Boolean;
    VAR
      Email@1001 : Text[80];
    BEGIN
      if JobPlanningLine."No." = '' then
        ERROR(SetPlanningLineErr);

      if not JobPlanningLineCalendar.HasBeenSent(JobPlanningLine) then
        exit(false);

      Email := GetResourceEmail(JobPlanningLineCalendar."Resource No.");
      if Email <> '' then begin
        GenerateEmail(TempEmailItem,Email,true);
        JobPlanningLineCalendar.DELETE;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE GenerateEmail@15(VAR TempEmailItem@1000 : TEMPORARY Record "Email Item";RecipientEmail@1007 : Text[80];Cancel@1001 : Boolean);
    VAR
      TempBlob@1006 : Record TempBlob;
      FileMgt@1005 : Codeunit "File Management";
      Stream@1004 : OutStream;
      ICS@1003 : Text;
      FilePath@1002 : Text;
    BEGIN
      ICS := GenerateICS(Cancel);
      TempBlob.Blob.CREATEOUTSTREAM(Stream);
      Stream.WRITE(ICS);

      FilePath := FileMgt.ServerTempFileName('.ics');
      FileMgt.BLOBExportToServerFile(TempBlob,FilePath);

      TempEmailItem.Init;
      TempEmailItem.Subject := JobTask.Description;
      TempEmailItem."Attachment File Path" := COPYSTR(FilePath,1,250);
      TempEmailItem."Attachment Name" := STRSUBSTNO('%1.ics',JobTask.TABLECAPTION);
      TempEmailItem."Send to" := RecipientEmail;
    END;

    LOCAL PROCEDURE GenerateICS@33(Cancel@1007 : Boolean) ICS : Text;
    VAR
      StringBuilder@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.StringBuilder";
      Location@1003 : Text;
      Summary@1002 : Text;
      Status@1008 : Text;
      Method@1009 : Text;
      Description@1001 : Text;
    BEGIN
      Location := STRSUBSTNO('%1, %2, %3',Customer.Address,Customer.City,Customer."Country/Region Code");
      Summary := STRSUBSTNO('%1:%2:%3',JobPlanningLine."Job No.",JobPlanningLine."Job Task No.",JobPlanningLine."Line No.");

      if Cancel then begin
        Method := 'CANCEL';
        Status := 'CANCELLED';
      end else begin
        Method := 'REQUEST';
        Status := 'CONFIRMED';
      end;
      Description := GetDescription;

      StringBuilder := StringBuilder.StringBuilder;
      with StringBuilder do begin
        AppendLine('BEGIN:VCALENDAR');
        AppendLine('VERSION:2.0');
        AppendLine('PRODID:-' + ProdIDTxt);
        AppendLine('METHOD:' + Method);
        AppendLine('BEGIN:VEVENT');
        AppendLine('UID:' + DELCHR(JobPlanningLineCalendar.UID,'<>','{}'));
        AppendLine('ORGANIZER:' + GetOrganizer);
        AppendLine('LOCATION:' + Location);
        AppendLine('DTSTART:' + GetStartDate);
        AppendLine('DTEND:' + GetEndDate);
        AppendLine('SUMMARY:' + Summary);
        AppendLine('DESCRIPTION:' + Description);
        AppendLine('X-ALT-DESC;FMTTYPE=' + GetHtmlDescription(Description));
        AppendLine('SEQUENCE:' + FORMAT(JobPlanningLineCalendar.Sequence));
        AppendLine('STATUS:' + Status);
        AppendLine('END:VEVENT');
        AppendLine('END:VCALENDAR');
      end;

      ICS := StringBuilder.ToString;
    END;

    LOCAL PROCEDURE GetAdditionalResources@11() AdditionalResources : Text;
    VAR
      LocalJobPlanningLine@1000 : Record "Job Planning Line";
      LocalResource@1001 : Record Resource;
    BEGIN
      // Get all resources for the same job task.
      with LocalJobPlanningLine do begin
        SETRANGE("Job No.",JobPlanningLine."Job No.");
        SETRANGE("Job Task No.",JobPlanningLine."Job Task No.");
        SETRANGE(Type,Type::Resource);
        SETFILTER("Line Type",'%1|%2',"Line Type"::Budget,"Line Type"::"Both Budget and Billable");
        SETFILTER("No.",'<>%1&<>''''',Resource."No.");
        if FINDSET then begin
          AdditionalResources += '\n\n' + AdditionalResourcesTxt + ':';
          repeat
            LocalResource.GET("No.");
            AdditionalResources += STRSUBSTNO('\n    (%1) %2 - %3',
                "Line Type",LocalResource.Name,Description);
          until NEXT = 0;
        end;
      end;
    END;

    LOCAL PROCEDURE GetDescription@28() AppointmentDescription : Text;
    VAR
      AppointmentFormat@1002 : Text;
    BEGIN
      AppointmentFormat := Job.TABLECAPTION + ': %1 - %2\r\n';
      AppointmentFormat += JobTask.TABLECAPTION + ': %3 - %4\n\n';
      if Customer.Name <> '' then
        AppointmentFormat += STRSUBSTNO('%1: %2\n',Customer.TABLECAPTION,Customer.Name);
      AppointmentFormat += Contact.TABLECAPTION + ': %5\n';
      AppointmentFormat += Contact.FIELDCAPTION("Phone No.") + ': %6\n\n';
      AppointmentFormat += Resource.TABLECAPTION + ': (%7) %8 - %9';
      AppointmentDescription := STRSUBSTNO(AppointmentFormat,
          Job."No.",Job.Description,
          JobTask."Job Task No.",JobTask.Description,
          Contact.Name,Contact."Phone No.",
          JobPlanningLine."Line Type",Resource.Name,JobPlanningLine.Description);

      AppointmentDescription += GetAdditionalResources;
      if ProjectManagerResource.Name <> '' then
        AppointmentDescription += STRSUBSTNO('\n\n%1: %2',
            Job.FIELDCAPTION("Project Manager"),ProjectManagerResource.Name);
    END;

    LOCAL PROCEDURE GetHtmlDescription@6(Description@1000 : Text) HtmlAppointDescription : Text;
    VAR
      RegEx@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
    BEGIN
      HtmlAppointDescription := RegEx.Replace(Description,'\\r','');
      HtmlAppointDescription := RegEx.Replace(HtmlAppointDescription,'\\n','<br>');
      HtmlAppointDescription := 'text/html:<html><body>' + HtmlAppointDescription + '</html></body>';
    END;

    LOCAL PROCEDURE GetOrganizer@17() : Text;
    VAR
      SMTPMailSetup@1000 : Record "SMTP Mail Setup";
      ProjectManagerUser@1001 : Record User;
    BEGIN
      ProjectManagerUser.SETRANGE("User Name",ProjectManagerResource."Time Sheet Owner User ID");
      if ProjectManagerUser.FINDFIRST then
        if ProjectManagerUser."Authentication Email" <> '' then
          exit(ProjectManagerUser."Authentication Email");

      SMTPMailSetup.GET;
      exit(SMTPMailSetup."User ID");
    END;

    LOCAL PROCEDURE GetStartDate@8() StartDateTime : Text;
    VAR
      StartDate@1000 : Date;
      StartTime@1002 : Time;
    BEGIN
      StartDate := JobPlanningLine."Planning Date";
      if JobPlanningLine.Quantity < 12 then
        EVALUATE(StartTime,FORMAT(8));

      StartDateTime := FORMAT(CREATEDATETIME(StartDate,StartTime),0,DateTimeFormatTxt);
    END;

    LOCAL PROCEDURE GetEndDate@9() EndDateTime : Text;
    VAR
      StartDate@1001 : Date;
      EndTime@1004 : Time;
      Duration@1000 : Decimal;
      Days@1002 : Integer;
    BEGIN
      Duration := JobPlanningLine.Quantity;
      StartDate := JobPlanningLine."Planning Date";
      if Duration < 12 then
        EVALUATE(EndTime,FORMAT(8 + Duration))
      else
        Days := ROUND(Duration / 24,1,'>');

      EndDateTime := FORMAT(CREATEDATETIME(StartDate + Days,EndTime),0,DateTimeFormatTxt);
    END;

    LOCAL PROCEDURE GetResourceEmail@12(ResourceNo@1000 : Code[20]) : Text[80];
    VAR
      LocalResource@1001 : Record Resource;
      LocalUser@1002 : Record User;
    BEGIN
      LocalResource.GET(ResourceNo);
      LocalUser.SETRANGE("User Name",LocalResource."Time Sheet Owner User ID");
      if LocalUser.FINDFIRST then
        exit(LocalUser."Authentication Email");
    END;

    LOCAL PROCEDURE UpdateJob@1();
    BEGIN
      if Job."No." <> JobPlanningLine."Job No." then begin
        Job.GET(JobPlanningLine."Job No.");
        Customer.GET(Job."Bill-to Customer No.");
        Contact.GET(Customer."Primary Contact No.");
        if Job."Project Manager" <> '' then
          ProjectManagerResource.GET(Job."Project Manager");
      end;
    END;

    LOCAL PROCEDURE UpdateJobTask@2();
    BEGIN
      if (JobTask."Job Task No." <> JobPlanningLine."Job Task No.") or (JobTask."Job No." <> JobPlanningLine."Job No.") then
        JobTask.GET(JobPlanningLine."Job No.",JobPlanningLine."Job Task No.");
    END;

    LOCAL PROCEDURE UpdateResource@3();
    BEGIN
      if JobPlanningLine."No." <> Resource."No." then
        if JobPlanningLine."No." <> '' then
          Resource.GET(JobPlanningLine."No.");
    END;

    [EventSubscriber(Table,1003,OnAfterDeleteEvent)]
    LOCAL PROCEDURE OnDeletePlanningLine@5(VAR Rec@1000 : Record "Job Planning Line";RunTrigger@1001 : Boolean);
    VAR
      LocalJobPlanningLineCalendar@1003 : Record "Job Planning Line - Calendar";
    BEGIN
      if RunTrigger then
        if LocalJobPlanningLineCalendar.HasBeenSent(Rec) then begin
          SetPlanningLine(Rec);
          CreateAndSend;
        end;
    END;

    BEGIN
    END.
  }
}

