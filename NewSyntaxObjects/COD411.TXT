OBJECT Codeunit 411 Dimension Buffer Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DimensionIDBuffer@1002 : TEMPORARY Record "Dimension ID Buffer";
      TempDimBuf@1000 : TEMPORARY Record "Dimension Buffer";
      TempDimEntryBuf@1001 : TEMPORARY Record "Dimension Entry Buffer";
      NextDimBufNo@1004 : Integer;

    [External]
    PROCEDURE InsertDimensions@2(VAR DimBuf@1000 : Record "Dimension Buffer") : Integer;
    VAR
      NewEntryNo@1001 : Integer;
    BEGIN
      if DimBuf.FIND('-') then begin
        TempDimBuf.RESET;
        if TempDimBuf.FIND('+') then
          NewEntryNo := TempDimBuf."Entry No." + 1
        else
          NewEntryNo := 1;
        InsertDimensionsUsingEntryNo(DimBuf,NewEntryNo);
        exit(NewEntryNo);
      end;
      exit(0);
    END;

    [External]
    PROCEDURE InsertDimensionsUsingEntryNo@6(VAR DimBuf@1000 : Record "Dimension Buffer";EntryNo@1001 : Integer);
    VAR
      DimCount@1002 : Integer;
    BEGIN
      DimCount := DimBuf.COUNT;
      if DimBuf.FIND('-') then
        repeat
          TempDimBuf.INIT;
          TempDimBuf := DimBuf;
          TempDimBuf."Entry No." := EntryNo;
          TempDimBuf."No. Of Dimensions" := DimCount;
          TempDimBuf.INSERT;
        until DimBuf.NEXT = 0;
    END;

    [External]
    PROCEDURE FindDimensions@3(VAR DimBuf@1000 : Record "Dimension Buffer") : Integer;
    BEGIN
      exit(FindDimensionsKnownDimBufCount(DimBuf,DimBuf.COUNT));
    END;

    [External]
    PROCEDURE FindDimensionsKnownDimBufCount@14(VAR DimBuf@1000 : Record "Dimension Buffer";DimBufCount@1002 : Integer) : Integer;
    VAR
      Found@1003 : Boolean;
      EndOfDimBuf@1004 : Boolean;
      EndOfTempDimBuf@1005 : Boolean;
      PrevEntryNo@1001 : Integer;
    BEGIN
      if not DimBuf.FIND('-') then
        exit(0);

      TempDimBuf.RESET;
      TempDimBuf.SETCURRENTKEY("No. Of Dimensions");
      TempDimBuf.SETRANGE("No. Of Dimensions",DimBufCount);
      TempDimBuf.SETRANGE("Table ID",DimBuf."Table ID");
      TempDimBuf.SETRANGE("Dimension Code",DimBuf."Dimension Code");
      TempDimBuf.SETRANGE("Dimension Value Code",DimBuf."Dimension Value Code");
      if not TempDimBuf.FIND('-') then begin
        TempDimBuf.RESET;
        exit(0);
      end;
      if TempDimBuf."No. Of Dimensions" = 1 then begin
        TempDimBuf.RESET;
        exit(TempDimBuf."Entry No.");
      end;

      DimBuf.NEXT;
      while (not EndOfTempDimBuf) and (not Found) do begin
        PrevEntryNo := TempDimBuf."Entry No.";
        EndOfDimBuf := false;
        TempDimBuf.SETFILTER("Entry No.",'>=%1',TempDimBuf."Entry No.");
        repeat
          TempDimBuf.SETRANGE("Dimension Code",DimBuf."Dimension Code");
          TempDimBuf.SETRANGE("Dimension Value Code",DimBuf."Dimension Value Code");
          EndOfTempDimBuf := not TempDimBuf.FIND('-');
          if not EndOfTempDimBuf then
            EndOfDimBuf := DimBuf.NEXT = 0;
        until EndOfTempDimBuf or EndOfDimBuf or (PrevEntryNo <> TempDimBuf."Entry No.");
        if EndOfDimBuf and (PrevEntryNo = TempDimBuf."Entry No.") then
          Found := true
        else
          DimBuf.FIND('-');
      end;
      TempDimBuf.RESET;
      if Found then
        exit(TempDimBuf."Entry No.");

      exit(0);
    END;

    [External]
    PROCEDURE GetDimensions@4(EntryNo@1000 : Integer;VAR DimBuf@1001 : Record "Dimension Buffer") : Boolean;
    BEGIN
      TempDimBuf.SETRANGE("Entry No.",EntryNo);
      if not TempDimBuf.FIND('-') then
        exit(false);

      repeat
        DimBuf.INIT;
        DimBuf := TempDimBuf;
        DimBuf.INSERT;
      until TempDimBuf.NEXT = 0;
      exit(true);
    END;

    [External]
    PROCEDURE DeleteAllDimensions@5();
    BEGIN
      TempDimBuf.RESET;
      TempDimBuf.DELETEALL;
    END;

    [External]
    PROCEDURE CollectDimEntryNo@1(VAR SelectedDim@1000 : Record "Selected Dimension";DimSetID@1001 : Integer;EntryNo@1002 : Integer;ForgetDimEntryNo@1003 : Integer;DoCollect@1004 : Boolean;VAR DimEntryNo@1005 : Integer);
    VAR
      TempDimBuf@1007 : TEMPORARY Record "Dimension Buffer";
      DimSetEntry@1006 : Record "Dimension Set Entry";
    BEGIN
      if SelectedDim.FIND('-') then begin
        repeat
          if DimSetEntry.GET(DimSetID,SelectedDim."Dimension Code") then begin
            TempDimBuf."Dimension Code" := DimSetEntry."Dimension Code";
            TempDimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
            TempDimBuf.INSERT;
          end;
        until SelectedDim.NEXT = 0;
        DimEntryNo := FindDimensions(TempDimBuf);
        if DimEntryNo = 0 then
          DimEntryNo := InsertDimensions(TempDimBuf);
      end else
        DimEntryNo := 0;

      if (DimEntryNo <> ForgetDimEntryNo) and DoCollect then begin
        TempDimEntryBuf."No." := EntryNo;
        TempDimEntryBuf."Dimension Entry No." := DimEntryNo;
        TempDimEntryBuf.INSERT;
      end;
    END;

    [External]
    PROCEDURE FindFirstDimEntryNo@7(VAR DimEntryNo@1000 : Integer;VAR EntryNo@1001 : Integer) : Boolean;
    VAR
      Found@1002 : Boolean;
    BEGIN
      TempDimEntryBuf.SETCURRENTKEY("Dimension Entry No.");
      Found := TempDimEntryBuf.FIND('-');
      DimEntryNo := TempDimEntryBuf."Dimension Entry No.";
      EntryNo := TempDimEntryBuf."No.";
      exit(Found);
    END;

    [External]
    PROCEDURE NextDimEntryNo@8(VAR DimEntryNo@1000 : Integer;VAR EntryNo@1001 : Integer) : Boolean;
    VAR
      Found@1002 : Boolean;
    BEGIN
      Found := TempDimEntryBuf.NEXT <> 0;
      DimEntryNo := TempDimEntryBuf."Dimension Entry No.";
      EntryNo := TempDimEntryBuf."No.";
      exit(Found);
    END;

    [External]
    PROCEDURE DeleteAllDimEntryNo@9();
    BEGIN
      TempDimEntryBuf.DELETEALL;
    END;

    [External]
    PROCEDURE GetDimensionId@13(VAR Dimbuf@1000 : Record "Dimension Buffer") : Integer;
    VAR
      NewDimensionComb@1001 : Boolean;
    BEGIN
      if not Dimbuf.FINDFIRST then
        exit(0);

      if NextDimBufNo = 0 then
        NextDimBufNo := 1;

      NewDimensionComb := false;
      DimensionIDBuffer.ID := 0;
      repeat
        if NewDimensionComb then
          InsertDimIdBuf(Dimbuf)
        else
          if not DimensionIDBuffer.GET(DimensionIDBuffer.ID,Dimbuf."Dimension Code",Dimbuf."Dimension Value Code") then begin
            NewDimensionComb := true;
            InsertDimIdBuf(Dimbuf);
          end;
      until Dimbuf.NEXT = 0;

      exit(DimensionIDBuffer.ID);
    END;

    [External]
    PROCEDURE RetrieveDimensions@12(DimId@1000 : Integer;VAR DimBuf@1001 : Record "Dimension Buffer");
    BEGIN
      DimBuf.RESET;
      DimBuf.DELETEALL;

      if DimId = 0 then
        exit;

      DimensionIDBuffer.SETCURRENTKEY(ID);
      DimensionIDBuffer.SETRANGE(ID,DimId);
      repeat
        DimensionIDBuffer.FINDFIRST;
        DimBuf.INIT;
        DimBuf."Entry No." := DimId;
        DimBuf."Dimension Code" := DimensionIDBuffer."Dimension Code";
        DimBuf."Dimension Value Code" := DimensionIDBuffer."Dimension Value";
        DimBuf.INSERT;
        DimensionIDBuffer.SETRANGE(ID,DimensionIDBuffer."Parent ID");
      until DimensionIDBuffer."Parent ID" = 0;
    END;

    LOCAL PROCEDURE InsertDimIdBuf@15(VAR DimBuf@1000 : Record "Dimension Buffer");
    BEGIN
      DimensionIDBuffer."Parent ID" := DimensionIDBuffer.ID;
      DimensionIDBuffer."Dimension Code" := DimBuf."Dimension Code";
      DimensionIDBuffer."Dimension Value" := DimBuf."Dimension Value Code";
      DimensionIDBuffer.ID := NextDimBufNo;
      NextDimBufNo += 1;
      DimensionIDBuffer.INSERT;
    END;

    BEGIN
    END.
  }
}

