OBJECT Codeunit 99000833 Req. Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd,
                TableData "Action Message Entry"=rmd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved';
      Text003@1002 : TextConst 'ENU=must not be filled in when a quantity is reserved';
      Text004@1003 : TextConst 'ENU=must not be changed when a quantity is reserved';
      Text005@1004 : TextConst 'ENU=Codeunit is not initialized correctly.';
      CreateReservEntry@1006 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1007 : Codeunit "Reservation Engine Mgt.";
      ReservMgt@1008 : Codeunit "Reservation Management";
      Blocked@1009 : Boolean;
      SetFromType@1010 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry",Service,Job';
      SetFromSubtype@1011 : Integer;
      SetFromID@1012 : Code[20];
      SetFromBatchName@1013 : Code[10];
      SetFromProdOrderLine@1014 : Integer;
      SetFromRefNo@1015 : Integer;
      SetFromVariantCode@1016 : Code[10];
      SetFromLocationCode@1017 : Code[10];
      SetFromSerialNo@1019 : Code[20];
      SetFromLotNo@1020 : Code[20];
      SetFromQtyPerUOM@1021 : Decimal;

    [External]
    PROCEDURE CreateReservation@2(VAR ReqLine@1000 : Record "Requisition Line";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text005);

      ReqLine.TESTFIELD(Type,ReqLine.Type::Item);
      ReqLine.TESTFIELD("No.");
      ReqLine.TESTFIELD("Due Date");
      ReqLine.CALCFIELDS("Reserved Qty. (Base)");
      if ABS(ReqLine."Quantity (Base)") < ABS(ReqLine."Reserved Qty. (Base)") + QuantityBase then
        ERROR(
          Text000,
          ABS(ReqLine."Quantity (Base)") - ABS(ReqLine."Reserved Qty. (Base)"));

      ReqLine.TESTFIELD("Variant Code",SetFromVariantCode);
      ReqLine.TESTFIELD("Location Code",SetFromLocationCode);

      if QuantityBase < 0 then
        ShipmentDate := ReqLine."Due Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ReqLine."Due Date";
      end;

      if ReqLine."Planning Flexibility" <> ReqLine."Planning Flexibility"::Unlimited then
        CreateReservEntry.SetPlanningFlexibility(ReqLine."Planning Flexibility");

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Requisition Line",0,
        ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name",0,ReqLine."Line No.",
        ReqLine."Qty. per Unit of Measure",Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ReqLine."No.",ReqLine."Variant Code",ReqLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@3(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    [External]
    PROCEDURE FilterReservFor@11(VAR FilterReservEntry@1000 : Record "Reservation Entry";ReqLine@1001 : Record "Requisition Line");
    BEGIN
      FilterReservEntry.SetSourceFilter(DATABASE::"Requisition Line",0,ReqLine."Worksheet Template Name",ReqLine."Line No.",false);
      FilterReservEntry.SetSourceFilter2(ReqLine."Journal Batch Name",0);
    END;

    [External]
    PROCEDURE Caption@29(ReqLine@1001 : Record "Requisition Line") CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO(
          '%1 %2 %3',ReqLine."Worksheet Template Name",ReqLine."Journal Batch Name",ReqLine."No.");
    END;

    [External]
    PROCEDURE FindReservEntry@4(ReqLine@1000 : Record "Requisition Line";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ReqLine);
      exit(ReservEntry.FINDLAST);
    END;

    [External]
    PROCEDURE VerifyChange@60(VAR NewReqLine@1000 : Record "Requisition Line";VAR OldReqLine@1001 : Record "Requisition Line");
    VAR
      ReqLine@1005 : Record "Requisition Line";
      TempReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
    BEGIN
      if (NewReqLine.Type <> NewReqLine.Type::Item) and (OldReqLine.Type <> OldReqLine.Type::Item) then
        exit;
      if Blocked then
        exit;
      if NewReqLine."Line No." = 0 then
        if not ReqLine.GET(NewReqLine."Worksheet Template Name",NewReqLine."Journal Batch Name",NewReqLine."Line No.")
        then
          exit;

      NewReqLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewReqLine."Reserved Qty. (Base)" <> 0;

      if NewReqLine."Due Date" = 0D then
        if ShowError then
          NewReqLine.FIELDERROR("Due Date",Text002)
        else
          HasError := true;

      if NewReqLine."Sales Order No." <> '' then
        if ShowError then
          NewReqLine.FIELDERROR("Sales Order No.",Text003)
        else
          HasError := true;

      if NewReqLine."Sales Order Line No." <> 0 then
        if ShowError then
          NewReqLine.FIELDERROR("Sales Order Line No.",Text003)
        else
          HasError := true;

      if NewReqLine."Sell-to Customer No." <> '' then
        if ShowError then
          NewReqLine.FIELDERROR("Sell-to Customer No.",Text003)
        else
          HasError := true;

      if NewReqLine."Variant Code" <> OldReqLine."Variant Code" then
        if ShowError then
          NewReqLine.FIELDERROR("Variant Code",Text004)
        else
          HasError := true;

      if NewReqLine."No." <> OldReqLine."No." then
        if ShowError then
          NewReqLine.FIELDERROR("No.",Text004)
        else
          HasError := true;

      if NewReqLine."Location Code" <> OldReqLine."Location Code" then
        if ShowError then
          NewReqLine.FIELDERROR("Location Code",Text004)
        else
          HasError := true;
      VerifyBininReqLine(NewReqLine,OldReqLine,HasError);

      if HasError then
        if (NewReqLine."No." <> OldReqLine."No.") or
           FindReservEntry(NewReqLine,TempReservEntry)
        then begin
          if NewReqLine."No." <> OldReqLine."No." then begin
            ReservMgt.SetReqLine(OldReqLine);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetReqLine(NewReqLine);
          end else begin
            ReservMgt.SetReqLine(NewReqLine);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewReqLine."Quantity (Base)");
        end;

      if HasError or (NewReqLine."Due Date" <> OldReqLine."Due Date")
      then begin
        AssignForPlanning(NewReqLine);
        if (NewReqLine."No." <> OldReqLine."No.") or
           (NewReqLine."Variant Code" <> OldReqLine."Variant Code") or
           (NewReqLine."Location Code" <> OldReqLine."Location Code")
        then
          AssignForPlanning(OldReqLine);
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@1(VAR NewReqLine@1000 : Record "Requisition Line";VAR OldReqLine@1001 : Record "Requisition Line");
    VAR
      ReqLine@1002 : Record "Requisition Line";
    BEGIN
      if Blocked then
        exit;

      with NewReqLine do begin
        if "Line No." = OldReqLine."Line No." then
          if "Quantity (Base)" = OldReqLine."Quantity (Base)" then
            exit;
        if "Line No." = 0 then
          if not ReqLine.GET("Worksheet Template Name","Journal Batch Name","Line No.") then
            exit;
        ReservMgt.SetReqLine(NewReqLine);
        if "Qty. per Unit of Measure" <> OldReqLine."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        if "Quantity (Base)" * OldReqLine."Quantity (Base)" < 0 then
          ReservMgt.DeleteReservEntries(true,0)
        else
          ReservMgt.DeleteReservEntries(false,"Quantity (Base)");
        ReservMgt.ClearSurplus;
        ReservMgt.AutoTrack("Quantity (Base)");
        AssignForPlanning(NewReqLine);
      end;
    END;

    [External]
    PROCEDURE UpdatePlanningFlexibility@7(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      if FindReservEntry(ReqLine,ReservEntry) then
        ReservEntry.MODIFYALL("Planning Flexibility",ReqLine."Planning Flexibility");
    END;

    [External]
    PROCEDURE TransferReqLineToReqLine@10(VAR OldReqLine@1000 : Record "Requisition Line";VAR NewReqLine@1001 : Record "Requisition Line";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
      NewReservEntry@1006 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldReqLine,OldReservEntry) then
        exit;

      OldReservEntry.Lock;

      NewReqLine.TESTFIELD("No.",OldReqLine."No.");
      NewReqLine.TESTFIELD("Variant Code",OldReqLine."Variant Code");
      NewReqLine.TESTFIELD("Location Code",OldReqLine."Location Code");

      if TransferAll then begin
        OldReservEntry.SETRANGE("Source Subtype",0);
        OldReservEntry.TransferReservations(
          OldReservEntry,OldReqLine."No.",OldReqLine."Variant Code",OldReqLine."Location Code",
          TransferAll,TransferQty,NewReqLine."Qty. per Unit of Measure",
          DATABASE::"Requisition Line",0,NewReqLine."Worksheet Template Name",NewReqLine."Journal Batch Name",0,NewReqLine."Line No.");

        if OldReqLine."Ref. Order Type" <> OldReqLine."Ref. Order Type"::Transfer then
          exit;

        if NewReqLine."Order Promising ID" <> '' then begin
          OldReservEntry.SetSourceFilter(
            DATABASE::"Sales Line",NewReqLine."Order Promising Line No.",NewReqLine."Order Promising ID",
            NewReqLine."Order Promising Line ID",false);
          OldReservEntry.SETRANGE("Source Batch Name",'');
        end;
        OldReservEntry.SETRANGE("Source Subtype",1);
        if OldReservEntry.FINDSET then begin
          OldReservEntry.TESTFIELD("Qty. per Unit of Measure",NewReqLine."Qty. per Unit of Measure");
          repeat
            OldReservEntry.TESTFIELD("Item No.",OldReqLine."No.");
            OldReservEntry.TESTFIELD("Variant Code",OldReqLine."Variant Code");
            if NewReqLine."Order Promising ID" = '' then
              OldReservEntry.TESTFIELD("Location Code",OldReqLine."Transfer-from Code");

            NewReservEntry := OldReservEntry;
            NewReservEntry."Source ID" := NewReqLine."Worksheet Template Name";
            NewReservEntry."Source Batch Name" := NewReqLine."Journal Batch Name";
            NewReservEntry."Source Prod. Order Line" := 0;
            NewReservEntry."Source Ref. No." := NewReqLine."Line No.";

            NewReservEntry.UpdateActionMessageEntries(OldReservEntry);
          until OldReservEntry.NEXT = 0;
        end;
      end else
        OldReservEntry.TransferReservations(
          OldReservEntry,OldReqLine."No.",OldReqLine."Variant Code",OldReqLine."Location Code",
          TransferAll,TransferQty,NewReqLine."Qty. per Unit of Measure",
          DATABASE::"Requisition Line",0,NewReqLine."Worksheet Template Name",NewReqLine."Journal Batch Name",0,NewReqLine."Line No.");
    END;

    [External]
    PROCEDURE TransferReqLineToPurchLine@41(VAR OldReqLine@1000 : Record "Requisition Line";VAR PurchLine@1001 : Record "Purchase Line";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldReqLine,OldReservEntry) then
        exit;

      PurchLine.TESTFIELD("No.",OldReqLine."No.");
      PurchLine.TESTFIELD("Variant Code",OldReqLine."Variant Code");
      PurchLine.TESTFIELD("Location Code",OldReqLine."Location Code");

      OldReservEntry.TransferReservations(
        OldReservEntry,OldReqLine."No.",OldReqLine."Variant Code",OldReqLine."Location Code",
        TransferAll,TransferQty,PurchLine."Qty. per Unit of Measure",
        DATABASE::"Purchase Line",PurchLine."Document Type",PurchLine."Document No.",'',0,PurchLine."Line No.");
    END;

    [External]
    PROCEDURE TransferPlanningLineToPOLine@31(VAR OldReqLine@1000 : Record "Requisition Line";VAR NewProdOrderLine@1001 : Record "Prod. Order Line";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldReqLine,OldReservEntry) then
        exit;

      NewProdOrderLine.TESTFIELD("Item No.",OldReqLine."No.");
      NewProdOrderLine.TESTFIELD("Variant Code",OldReqLine."Variant Code");
      NewProdOrderLine.TESTFIELD("Location Code",OldReqLine."Location Code");

      OldReservEntry.TransferReservations(
        OldReservEntry,OldReqLine."No.",OldReqLine."Variant Code",OldReqLine."Location Code",
        TransferAll,TransferQty,NewProdOrderLine."Qty. per Unit of Measure",
        DATABASE::"Prod. Order Line",NewProdOrderLine.Status,NewProdOrderLine."Prod. Order No.",'',NewProdOrderLine."Line No.",0);
    END;

    [External]
    PROCEDURE TransferPlanningLineToAsmHdr@16(VAR OldReqLine@1000 : Record "Requisition Line";VAR NewAsmHeader@1001 : Record "Assembly Header";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(OldReqLine,OldReservEntry) then
        exit;

      NewAsmHeader.TESTFIELD("Item No.",OldReqLine."No.");
      NewAsmHeader.TESTFIELD("Variant Code",OldReqLine."Variant Code");
      NewAsmHeader.TESTFIELD("Location Code",OldReqLine."Location Code");

      OldReservEntry.TransferReservations(
        OldReservEntry,OldReqLine."No.",OldReqLine."Variant Code",OldReqLine."Location Code",
        TransferAll,TransferQty,NewAsmHeader."Qty. per Unit of Measure",
        DATABASE::"Assembly Header",NewAsmHeader."Document Type",NewAsmHeader."No.",'',0,0);
    END;

    [External]
    PROCEDURE TransferReqLineToTransLine@12(VAR ReqLine@1000 : Record "Requisition Line";VAR TransLine@1001 : Record "Transfer Line";TransferQty@1002 : Decimal;TransferAll@1003 : Boolean);
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
      NewReservEntry@1006 : Record "Reservation Entry";
      OrigTransferQty@1011 : Decimal;
      Status@1009 : 'Reservation,Tracking,Surplus,Prospect';
      Direction@1010 : 'Outbound,Inbound';
      Subtype@1012 : 'Outbound,Inbound';
    BEGIN
      if not FindReservEntry(ReqLine,OldReservEntry) then
        exit;

      OldReservEntry.Lock;

      TransLine.TESTFIELD("Item No.",ReqLine."No.");
      TransLine.TESTFIELD("Variant Code",ReqLine."Variant Code");
      TransLine.TESTFIELD("Transfer-to Code",ReqLine."Location Code");
      TransLine.TESTFIELD("Transfer-from Code",ReqLine."Transfer-from Code");

      if TransferAll then begin
        OldReservEntry.FINDSET;
        OldReservEntry.TESTFIELD("Qty. per Unit of Measure",TransLine."Qty. per Unit of Measure");

        repeat
          Direction := 1 - OldReservEntry."Source Subtype"; // Swap 0/1 (outbound/inbound)
          if (Direction = Direction::Inbound) or (OldReservEntry."Source Type" <> DATABASE::"Transfer Line") then
            OldReservEntry.TestItemFields(ReqLine."No.",ReqLine."Variant Code",ReqLine."Location Code")
          else
            OldReservEntry.TestItemFields(ReqLine."No.",ReqLine."Variant Code",ReqLine."Transfer-from Code");

          NewReservEntry := OldReservEntry;
          if Direction = Direction::Inbound then
            NewReservEntry.SetSource(
              DATABASE::"Transfer Line",1,TransLine."Document No.",TransLine."Line No.",'',TransLine."Derived From Line No.")
          else
            NewReservEntry.SetSource(
              DATABASE::"Transfer Line",0,TransLine."Document No.",TransLine."Line No.",'',TransLine."Derived From Line No.");

          NewReservEntry.UpdateActionMessageEntries(OldReservEntry);
        until (OldReservEntry.NEXT = 0);
      end else begin
        OrigTransferQty := TransferQty;

        for Subtype := Subtype::Outbound to Subtype::Inbound do begin
          OldReservEntry.SETRANGE("Source Subtype",Subtype);
          TransferQty := OrigTransferQty;
          if TransferQty = 0 then
            exit;

          for Status := Status::Reservation to Status::Prospect do begin
            OldReservEntry.SETRANGE("Reservation Status",Status);

            if OldReservEntry.FINDSET then
              repeat
                Direction := 1 - OldReservEntry."Source Subtype";  // Swap 0/1 (outbound/inbound)
                OldReservEntry.TESTFIELD("Item No.",ReqLine."No.");
                OldReservEntry.TESTFIELD("Variant Code",ReqLine."Variant Code");
                if Direction = Direction::Inbound then
                  OldReservEntry.TESTFIELD("Location Code",ReqLine."Location Code")
                else
                  OldReservEntry.TESTFIELD("Location Code",ReqLine."Transfer-from Code");

                TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Transfer Line",
                    Direction,TransLine."Document No.",'',TransLine."Derived From Line No.",
                    TransLine."Line No.",TransLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

              until (OldReservEntry.NEXT = 0) or (TransferQty = 0);
          end;
        end;
      end;
    END;

    LOCAL PROCEDURE AssignForPlanning@5(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      with ReqLine do begin
        if Type <> Type::Item then
          exit;
        if "No." <> '' then
          PlanningAssignment.ChkAssignOne("No.","Variant Code","Location Code",WORKDATE);
      end;
    END;

    [External]
    PROCEDURE Block@6(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    [External]
    PROCEDURE DeleteLine@8(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      ProdOrderComp@1001 : Record "Prod. Order Component";
      CalcReservEntry4@1002 : Record "Reservation Entry";
      ProdOrderCompReserv@1004 : Codeunit "Prod. Order Comp.-Reserve";
      QtyTracked@1003 : Decimal;
    BEGIN
      if Blocked then
        exit;

      with ReqLine do begin
        ReservMgt.SetReqLine(ReqLine);
        ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(true,0);
        CALCFIELDS("Reserved Qty. (Base)");
        AssignForPlanning(ReqLine);

        // Retracking of components:
        if ("Action Message" = "Action Message"::Cancel) and
           ("Planning Line Origin" = "Planning Line Origin"::Planning) and
           ("Ref. Order Type" = "Ref. Order Type"::"Prod. Order")
        then begin
          ProdOrderComp.SETCURRENTKEY(Status,"Prod. Order No.","Prod. Order Line No.");
          ProdOrderComp.SETRANGE(Status,"Ref. Order Status");
          ProdOrderComp.SETRANGE("Prod. Order No.","Ref. Order No.");
          ProdOrderComp.SETRANGE("Prod. Order Line No.","Ref. Line No.");
          if ProdOrderComp.FINDSET then
            repeat
              ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
              QtyTracked := ProdOrderComp."Reserved Qty. (Base)";
              CalcReservEntry4.RESET;
              CalcReservEntry4.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
              ProdOrderCompReserv.FilterReservFor(CalcReservEntry4,ProdOrderComp);
              CalcReservEntry4.SETFILTER("Reservation Status",'<>%1',CalcReservEntry4."Reservation Status"::Reservation);
              if CalcReservEntry4.FINDSET then
                repeat
                  QtyTracked := QtyTracked - CalcReservEntry4."Quantity (Base)";
                until CalcReservEntry4.NEXT = 0;
              ReservMgt.SetProdOrderComponent(ProdOrderComp);
              ReservMgt.DeleteReservEntries(QtyTracked = 0,QtyTracked);
              ReservMgt.AutoTrack(ProdOrderComp."Remaining Qty. (Base)");
            until ProdOrderComp.NEXT = 0;
        end
      end;
    END;

    [External]
    PROCEDURE UpdateDerivedTracking@9(VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReservEntry2@1002 : Record "Reservation Entry";
      ActionMessageEntry@1003 : Record "Action Message Entry";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      ActionMessageEntry.SETCURRENTKEY("Reservation Entry");

      with ReservEntry do begin
        SETFILTER("Expected Receipt Date",'<>%1',ReqLine."Due Date");
        case ReqLine."Ref. Order Type" of
          ReqLine."Ref. Order Type"::Purchase:
            SetSourceFilter(DATABASE::"Purchase Line",1,ReqLine."Ref. Order No.",ReqLine."Ref. Line No.",true);
          ReqLine."Ref. Order Type"::"Prod. Order":
            begin
              SetSourceFilter(DATABASE::"Prod. Order Line",ReqLine."Ref. Order Status",ReqLine."Ref. Order No.",-1,true);
              SETRANGE("Source Prod. Order Line",ReqLine."Ref. Line No.");
            end;
        end;

        if FINDSET then
          repeat
            ReservEntry2 := ReservEntry;
            ReservEntry2."Expected Receipt Date" := ReqLine."Due Date";
            ReservEntry2.MODIFY;
            if ReservEntry2.GET(ReservEntry2."Entry No.",not ReservEntry2.Positive) then begin
              ReservEntry2."Expected Receipt Date" := ReqLine."Due Date";
              ReservEntry2.MODIFY;
            end;
            ActionMessageEntry.SETRANGE("Reservation Entry","Entry No.");
            ActionMessageEntry.DELETEALL;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE CallItemTracking@14(VAR ReqLine@1003 : Record "Requisition Line");
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      TrackingSpecification.InitFromReqLine(ReqLine);
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,ReqLine."Due Date");
      ItemTrackingLines.RUNMODAL;
    END;

    LOCAL PROCEDURE VerifyBininReqLine@17(VAR NewReqLine@1001 : Record "Requisition Line";VAR OldReqLine@1000 : Record "Requisition Line";VAR HasError@1002 : Boolean);
    BEGIN
      if (NewReqLine.Type = NewReqLine.Type::Item) and (OldReqLine.Type = OldReqLine.Type::Item) then
        if (NewReqLine."Bin Code" <> OldReqLine."Bin Code") and
           (not ReservMgt.CalcIsAvailTrackedQtyInBin(
              NewReqLine."No.",NewReqLine."Bin Code",
              NewReqLine."Location Code",NewReqLine."Variant Code",
              DATABASE::"Requisition Line",0,
              NewReqLine."Worksheet Template Name",NewReqLine."Journal Batch Name",0,
              NewReqLine."Line No."))
        then
          HasError := true;

      if NewReqLine."Line No." <> OldReqLine."Line No." then
        HasError := true;
    END;

    BEGIN
    END.
  }
}

