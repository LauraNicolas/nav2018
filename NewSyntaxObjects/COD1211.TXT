OBJECT Codeunit 1211 Payment Export Gen. Jnl Check
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Gen. Journal Line";
    OnRun=BEGIN
            CheckPaymentExportGenJnl(Rec);
          END;

  }
  CODE
  {
    VAR
      EmptyPaymentDetailsErr@1002 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 or %2 must be used for payments.';
      SimultaneousPaymentDetailsErr@1000 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 and %2 cannot be used simultaneously for payments.';
      WrongBalAccountErr@1001 : TextConst '@@@="%1=Field;%1=Table;%3=Value;%4=Table;%5=Value";ENU=%1 for the %2 is different from %3 on %4: %5.';
      MustBeVendorEmployeeOrCustomerErr@1005 : TextConst 'ENU=The account must be a vendor, customer or employee account.';
      MustBeVendEmplPmtOrCustRefundErr@1008 : TextConst 'ENU=Only vendor and employee payments and customer refunds are allowed.';
      MustBePositiveErr@1011 : TextConst 'ENU=The amount must be positive.';
      FieldBlankErr@1007 : TextConst '@@@="%1=table name, %2=field name. Example: Customer must have a value in Name.";ENU=%1 must have a value in %2.';
      FieldKeyBlankErr@1006 : TextConst '@@@="%1=table name, %2=key field value, %3=field name. Example: Customer 10000 must have a value in Name.";ENU=%1 %2 must have a value in %3.';
      TempGenJournalBatch@1003 : TEMPORARY Record "Gen. Journal Batch";
      WrongBankPaymentTypeErr@1004 : TextConst '@@@="%1=Bank Payment Type field caption, %2=Electronic Payment bank payment type, %3=Electronic Payment-IAT bank payment type";ENU=%1 must be either %2 or %3.';

    LOCAL PROCEDURE CheckPaymentExportGenJnl@1213(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJnlBatch@1001 : Record "Gen. Journal Batch";
      Handled@1213 : Boolean;
    BEGIN
      with GenJournalLine do begin
        DeletePaymentFileErrors;
        GenJnlBatch.GET("Journal Template Name","Journal Batch Name");

        if not TempGenJournalBatch.GET("Journal Template Name","Journal Batch Name") then
          CheckGenJournalBatch(GenJournalLine,GenJnlBatch);

        if "Payment Method Code" = '' then
          AddFieldEmptyError(GenJournalLine,TABLECAPTION,FIELDCAPTION("Payment Method Code"),'');

        if ("Recipient Bank Account" <> '') and ("Creditor No." <> '') then
          InsertPaymentFileError(STRSUBSTNO(SimultaneousPaymentDetailsErr,
              FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));

        if "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" then
          InsertPaymentFileError(STRSUBSTNO(WrongBalAccountErr,FIELDCAPTION("Bal. Account Type"),
              TABLECAPTION,"Bal. Account Type"::"Bank Account",GenJnlBatch.TABLECAPTION,GenJnlBatch.Name));

        if "Bal. Account No." <> GenJnlBatch."Bal. Account No." then
          InsertPaymentFileError(STRSUBSTNO(WrongBalAccountErr,FIELDCAPTION("Bal. Account No."),
              TABLECAPTION,GenJnlBatch."Bal. Account No.",GenJnlBatch.TABLECAPTION,GenJnlBatch.Name));

        if Amount <= 0 then
          InsertPaymentFileError(MustBePositiveErr);

        if (("Account Type" = "Account Type"::"Bank Account") or
            ("Bal. Account Type" = "Bal. Account Type"::"Bank Account")) and
           (("Bank Payment Type" <> "Bank Payment Type"::"Electronic Payment") and
            ("Bank Payment Type" <> "Bank Payment Type"::"Electronic Payment-IAT"))
        then
          InsertPaymentFileError(STRSUBSTNO(WrongBankPaymentTypeErr,FIELDCAPTION("Bank Payment Type"),
              "Bank Payment Type"::"Electronic Payment","Bank Payment Type"::"Electronic Payment-IAT"));

        OnPaymentExportGenJnlCheck(GenJournalLine,Handled);
        if not Handled then begin
          if not ("Account Type" in ["Account Type"::Customer,"Account Type"::Vendor,"Account Type"::Employee])
          then
            InsertPaymentFileError(MustBeVendorEmployeeOrCustomerErr);

          if (("Account Type" = "Account Type"::Vendor) and
              ("Document Type" <> "Document Type"::Payment)) or
             (("Account Type" = "Account Type"::Customer) and
              ("Document Type" <> "Document Type"::Refund)) or
             (("Account Type" = "Account Type"::Employee) and
              ("Document Type" <> "Document Type"::Payment))
          then
            InsertPaymentFileError(MustBeVendEmplPmtOrCustRefundErr);

          if not ("Account Type" = "Account Type"::Employee) and
             ("Recipient Bank Account" = '') and ("Creditor No." = '')
          then
            InsertPaymentFileError(STRSUBSTNO(EmptyPaymentDetailsErr,
                FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));
        end;
      end;
    END;

    PROCEDURE AddFieldEmptyError@1(VAR GenJnlLine@1000 : Record "Gen. Journal Line";TableCaption@1001 : Text;FieldCaption@1002 : Text;KeyValue@1003 : Text);
    VAR
      ErrorText@1004 : Text;
    BEGIN
      if KeyValue = '' then
        ErrorText := STRSUBSTNO(FieldBlankErr,TableCaption,FieldCaption)
      else
        ErrorText := STRSUBSTNO(FieldKeyBlankErr,TableCaption,KeyValue,FieldCaption);
      GenJnlLine.InsertPaymentFileError(ErrorText);
    END;

    [External]
    PROCEDURE AddBatchEmptyError@19(VAR GenJnlLine@1000 : Record "Gen. Journal Line";FieldCaption@1003 : Text;KeyValue@1002 : Variant);
    VAR
      GenJnlBatch@1001 : Record "Gen. Journal Batch";
    BEGIN
      AddFieldEmptyError(GenJnlLine,GenJnlBatch.TABLECAPTION,FieldCaption,FORMAT(KeyValue));
    END;

    LOCAL PROCEDURE CheckGenJournalBatch@2(GenJournalLine@1001 : Record "Gen. Journal Line";GenJournalBatch@1000 : Record "Gen. Journal Batch");
    VAR
      BankAccount@1002 : Record "Bank Account";
    BEGIN
      TempGenJournalBatch := GenJournalBatch;
      TempGenJournalBatch.INSERT;

      GenJournalBatch.OnCheckGenJournalLineExportRestrictions;

      if not GenJournalBatch."Allow Payment Export" then
        AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Allow Payment Export"),'');

      if GenJournalBatch."Bal. Account Type" <> GenJournalBatch."Bal. Account Type"::"Bank Account" then
        AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Bal. Account Type"),GenJournalBatch."Bal. Account Type");

      if GenJournalBatch."Bal. Account No." = '' then
        AddBatchEmptyError(GenJournalLine,GenJournalBatch.FIELDCAPTION("Bal. Account No."),GenJournalBatch."Bal. Account No.");

      if BankAccount.GET(GenJournalBatch."Bal. Account No.") then
        if BankAccount."Payment Export Format" = '' then
          GenJournalLine.InsertPaymentFileError(
            STRSUBSTNO(FieldBlankErr,BankAccount.FIELDCAPTION("Payment Export Format"),BankAccount.TABLECAPTION));
    END;

    [Integration]
    LOCAL PROCEDURE OnPaymentExportGenJnlCheck@1215(VAR GenJournalLine@1213 : Record "Gen. Journal Line";VAR Handled@1217 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

