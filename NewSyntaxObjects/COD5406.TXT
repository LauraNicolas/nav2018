OBJECT Codeunit 5406 Output Jnl.-Expl. Route
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    TableNo="Item Journal Line";
    Permissions=TableData "Item Journal Line"=imd,
                TableData "Prod. Order Line"=r,
                TableData "Prod. Order Routing Line"=r;
    OnRun=VAR
            ProdOrderLine@1000 : Record "Prod. Order Line";
            ProdOrderRtngLine@1001 : Record "Prod. Order Routing Line";
            ItemJnlLine@1002 : Record "Item Journal Line";
            CostCalcMgt@1003 : Codeunit "Cost Calculation Management";
            ItemJnlLineReserve@1007 : Codeunit "Item Jnl. Line-Reserve";
            NextLineNo@1004 : Integer;
            LineSpacing@1005 : Integer;
            BaseQtyToPost@1006 : Decimal;
          BEGIN
            if ("Order Type" <> "Order Type"::Production) or ("Order No." = '') then
              exit;

            if not ItemJnlLineReserve.DeleteLineConfirm(Rec) then
              exit;

            ProdOrderLine.RESET;
            ProdOrderLine.SETRANGE(Status,ProdOrderLine.Status::Released);
            ProdOrderLine.SETRANGE("Prod. Order No.","Order No.");
            if "Order Line No." <> 0 then
              ProdOrderLine.SETRANGE("Line No.","Order Line No.");
            if "Item No." <> '' then
              ProdOrderLine.SETRANGE("Item No.","Item No.");
            if "Routing Reference No." <> 0 then
              ProdOrderLine.SETRANGE("Routing Reference No.","Routing Reference No.");
            if "Routing No." <> '' then
              ProdOrderLine.SETRANGE("Routing No.","Routing No.");

            ProdOrderRtngLine.SETRANGE(Status,ProdOrderRtngLine.Status::Released);
            ProdOrderRtngLine.SETRANGE("Prod. Order No.","Order No.");
            if "Operation No." <> '' then
              ProdOrderRtngLine.SETRANGE("Operation No.","Operation No.");
            ProdOrderRtngLine.SETFILTER("Routing Status",'<> %1',ProdOrderRtngLine."Routing Status"::Finished);
            ProdOrderRtngLine.SETRANGE("Flushing Method",ProdOrderRtngLine."Flushing Method"::Manual);

            // Clear fields in xRec to ensure that validation code regarding dimensions is executed:
            "Order Line No." := 0;
            "Item No." := '';
            "Routing Reference No." := 0;
            "Routing No." := '';

            ItemJnlLine := Rec;

            ItemJnlLine.SETRANGE(
              "Journal Template Name","Journal Template Name");
            ItemJnlLine.SETRANGE(
              "Journal Batch Name","Journal Batch Name");

            if ItemJnlLine.FIND('>') then begin
              LineSpacing :=
                (ItemJnlLine."Line No." - "Line No.") div
                (1 + ProdOrderLine.COUNT * ProdOrderRtngLine.COUNT);
              if LineSpacing = 0 then
                ERROR(Text000);
            end else
              LineSpacing := 10000;

            NextLineNo := "Line No.";

            if not ProdOrderLine.FIND('-') then
              ERROR(Text001);

            repeat
              ProdOrderRtngLine.SETRANGE("Routing No.",ProdOrderLine."Routing No.");
              ProdOrderRtngLine.SETRANGE("Routing Reference No.",ProdOrderLine."Routing Reference No.");
              if ProdOrderRtngLine.FIND('-') then begin
                repeat
                  BaseQtyToPost :=
                    CostCalcMgt.CalcQtyAdjdForRoutingScrap(
                      ProdOrderLine."Quantity (Base)",
                      ProdOrderRtngLine."Scrap Factor % (Accumulated)",
                      ProdOrderRtngLine."Fixed Scrap Qty. (Accum.)") -
                    CostCalcMgt.CalcActOutputQtyBase(ProdOrderLine,ProdOrderRtngLine);
                  if BaseQtyToPost > 0 then begin
                    InsertOutputJnlLine(
                      Rec,NextLineNo,LineSpacing,
                      ProdOrderLine."Line No.",
                      ProdOrderLine."Item No.",
                      ProdOrderLine."Variant Code",
                      ProdOrderLine."Location Code",
                      ProdOrderLine."Bin Code",
                      ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.",
                      ProdOrderRtngLine."Operation No.",
                      ProdOrderLine."Unit of Measure Code",
                      BaseQtyToPost / ProdOrderLine."Qty. per Unit of Measure",
                      (ProdOrderRtngLine."Next Operation No." = ''));
                    if ProdOrderRtngLine."Next Operation No." = '' then
                      ItemTrackingMgt.CopyItemTracking(ProdOrderLine.RowID1,LastItemJnlLine.RowID1,false);
                  end;
                until ProdOrderRtngLine.NEXT = 0;
              end else
                if ProdOrderLine."Remaining Quantity" > 0 then begin
                  InsertOutputJnlLine(
                    Rec,NextLineNo,LineSpacing,
                    ProdOrderLine."Line No.",
                    ProdOrderLine."Item No.",
                    ProdOrderLine."Variant Code",
                    ProdOrderLine."Location Code",
                    ProdOrderLine."Bin Code",
                    ProdOrderLine."Routing No.",ProdOrderLine."Routing Reference No.",'',
                    ProdOrderLine."Unit of Measure Code",
                    ProdOrderLine."Remaining Quantity",
                    true);
                  ItemTrackingMgt.CopyItemTracking(ProdOrderLine.RowID1,LastItemJnlLine.RowID1,false);
                end;
            until ProdOrderLine.NEXT = 0;

            ItemJnlLineReserve.DeleteLine(Rec);
            DELETE;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=There are not enough free line numbers to explode the route.';
      Text001@1001 : TextConst 'ENU=There is nothing to explode.';
      LastItemJnlLine@1003 : Record "Item Journal Line";
      ItemTrackingMgt@1002 : Codeunit "Item Tracking Management";

    LOCAL PROCEDURE InsertOutputJnlLine@2(ItemJnlLine@1000 : Record "Item Journal Line";VAR NextLineNo@1001 : Integer;LineSpacing@1002 : Integer;ProdOrderLineNo@1003 : Integer;ItemNo@1004 : Code[20];VariantCode@1010 : Code[10];LocationCode@1011 : Code[10];BinCode@1012 : Code[20];RoutingNo@1005 : Code[20];RoutingRefNo@1006 : Integer;OperationNo@1007 : Code[10];UnitOfMeasureCode@1008 : Code[10];QtyToPost@1009 : Decimal;LastOperation@1013 : Boolean);
    VAR
      DimMgt@1014 : Codeunit DimensionManagement;
    BEGIN
      NextLineNo := NextLineNo + LineSpacing;

      ItemJnlLine."Line No." := NextLineNo;
      ItemJnlLine.VALIDATE("Entry Type",ItemJnlLine."Entry Type"::Output);
      ItemJnlLine.VALIDATE("Order Line No.",ProdOrderLineNo);
      ItemJnlLine.VALIDATE("Item No.",ItemNo);
      ItemJnlLine.VALIDATE("Variant Code",VariantCode);
      ItemJnlLine.VALIDATE("Location Code",LocationCode);
      if BinCode <> '' then
        ItemJnlLine.VALIDATE("Bin Code",BinCode);
      ItemJnlLine.VALIDATE("Routing No.",RoutingNo);
      ItemJnlLine.VALIDATE("Routing Reference No.",RoutingRefNo);
      ItemJnlLine.VALIDATE("Operation No.",OperationNo);
      ItemJnlLine.VALIDATE("Unit of Measure Code",UnitOfMeasureCode);
      ItemJnlLine.VALIDATE("Setup Time",0);
      ItemJnlLine.VALIDATE("Run Time",0);
      if (LocationCode <> '') and LastOperation then
        ItemJnlLine.CheckWhse(LocationCode,QtyToPost);
      if ItemJnlLine.SubcontractingWorkCenterUsed then
        ItemJnlLine.VALIDATE("Output Quantity",0)
      else
        ItemJnlLine.VALIDATE("Output Quantity",QtyToPost);

      DimMgt.UpdateGlobalDimFromDimSetID(
        ItemJnlLine."Dimension Set ID",ItemJnlLine."Shortcut Dimension 1 Code",ItemJnlLine."Shortcut Dimension 2 Code");
      ItemJnlLine.INSERT;

      LastItemJnlLine := ItemJnlLine;
    END;

    BEGIN
    END.
  }
}

