OBJECT Table 7506 Filter Item Attributes Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               if ISNULLGUID(ID) then
                 ID := CREATEGUID;
             END;

    CaptionML=ENU=Filter Item Attributes Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Attribute           ;Text250       ;OnValidate=VAR
                                                                ItemAttribute@1001 : Record "Item Attribute";
                                                              BEGIN
                                                                if not FindItemAttributeCaseInsensitive(ItemAttribute) then
                                                                  ERROR(AttributeDoesntExistErr,Attribute);
                                                                CheckForDuplicate;
                                                                AdjustAttributeName(ItemAttribute);
                                                              END;

                                                   CaptionML=ENU=Attribute }
    { 2   ;   ;Value               ;Text250       ;OnValidate=VAR
                                                                ItemAttributeValue@1003 : Record "Item Attribute Value";
                                                                ItemAttribute@1002 : Record "Item Attribute";
                                                              BEGIN
                                                                if Value <> '' then
                                                                  if FindItemAttributeCaseSensitive(ItemAttribute) then
                                                                    if ItemAttribute.Type = ItemAttribute.Type::Option then
                                                                      if FindItemAttributeValueCaseInsensitive(ItemAttribute,ItemAttributeValue) then
                                                                        AdjustAttributeValue(ItemAttributeValue);
                                                              END;

                                                   CaptionML=ENU=Value }
    { 3   ;   ;ID                  ;GUID          ;CaptionML=ENU=ID }
  }
  KEYS
  {
    {    ;Attribute                               ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AttributeDoesntExistErr@1005 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute ''%1'' doesn''t exist.';
      AttributeValueAlreadySpecifiedErr@1001 : TextConst '@@@=%1 - attribute name;ENU=You have already specified a value for item attribute ''%1''.';

    [External]
    PROCEDURE ValueAssistEdit@1();
    VAR
      ItemAttribute@1000 : Record "Item Attribute";
      FilterItemsAssistEdit@1001 : Page "Filter Items - AssistEdit";
    BEGIN
      if FindItemAttributeCaseSensitive(ItemAttribute) then
        if ItemAttribute.Type = ItemAttribute.Type::Option then begin
          FilterItemsAssistEdit.SETRECORD(ItemAttribute);
          Value := COPYSTR(FilterItemsAssistEdit.LookupOptionValue(Value),1,MAXSTRLEN(Value));
          exit;
        end;

      FilterItemsAssistEdit.SETTABLEVIEW(ItemAttribute);
      FilterItemsAssistEdit.LOOKUPMODE(true);
      if FilterItemsAssistEdit.RUNMODAL = ACTION::LookupOK then
        Value := COPYSTR(FilterItemsAssistEdit.GenerateFilter,1,MAXSTRLEN(Value));
    END;

    LOCAL PROCEDURE FindItemAttributeCaseSensitive@2(VAR ItemAttribute@1000 : Record "Item Attribute") : Boolean;
    BEGIN
      ItemAttribute.SETRANGE(Name,Attribute);
      exit(ItemAttribute.FINDFIRST);
    END;

    LOCAL PROCEDURE FindItemAttributeCaseInsensitive@6(VAR ItemAttribute@1000 : Record "Item Attribute") : Boolean;
    VAR
      AttributeName@1001 : Text[250];
    BEGIN
      if FindItemAttributeCaseSensitive(ItemAttribute) then
        exit(true);

      AttributeName := LOWERCASE(Attribute);
      ItemAttribute.SETRANGE(Name);
      if ItemAttribute.FINDSET then
        repeat
          if LOWERCASE(ItemAttribute.Name) = AttributeName then
            exit(true);
        until ItemAttribute.NEXT = 0;

      exit(false);
    END;

    LOCAL PROCEDURE FindItemAttributeValueCaseInsensitive@3(VAR ItemAttribute@1000 : Record "Item Attribute";VAR ItemAttributeValue@1002 : Record "Item Attribute Value") : Boolean;
    VAR
      AttributeValue@1001 : Text[250];
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID",ItemAttribute.ID);
      ItemAttributeValue.SETRANGE(Value,Value);
      if ItemAttributeValue.FINDFIRST then
        exit(true);

      ItemAttributeValue.SETRANGE(Value);
      if ItemAttributeValue.FINDSET then begin
        AttributeValue := LOWERCASE(Value);
        repeat
          if LOWERCASE(ItemAttributeValue.Value) = AttributeValue then
            exit(true);
        until ItemAttributeValue.NEXT = 0;
      end;
      exit(false);
    END;

    LOCAL PROCEDURE CheckForDuplicate@34();
    VAR
      TempFilterItemAttributesBuffer@1001 : TEMPORARY Record "Filter Item Attributes Buffer";
      AttributeName@1003 : Text[250];
    BEGIN
      if ISEMPTY then
        exit;
      AttributeName := LOWERCASE(Attribute);
      TempFilterItemAttributesBuffer.COPY(Rec,true);
      if TempFilterItemAttributesBuffer.FINDSET then
        repeat
          if TempFilterItemAttributesBuffer.ID <> ID then
            if LOWERCASE(TempFilterItemAttributesBuffer.Attribute) = AttributeName then
              ERROR(AttributeValueAlreadySpecifiedErr,Attribute);
        until TempFilterItemAttributesBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE AdjustAttributeName@5(VAR ItemAttribute@1000 : Record "Item Attribute");
    BEGIN
      if Attribute <> ItemAttribute.Name then
        Attribute := ItemAttribute.Name;
    END;

    LOCAL PROCEDURE AdjustAttributeValue@12(VAR ItemAttributeValue@1000 : Record "Item Attribute Value");
    BEGIN
      if Value <> ItemAttributeValue.Value then
        Value := ItemAttributeValue.Value;
    END;

    BEGIN
    END.
  }
}

