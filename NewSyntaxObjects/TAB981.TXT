OBJECT Table 981 Payment Registration Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Payment Registration Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Ledger Entry No.    ;Integer       ;CaptionML=ENU=Ledger Entry No. }
    { 2   ;   ;Source No.          ;Code20        ;CaptionML=ENU=Source No. }
    { 3   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 4   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 5   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 6   ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 7   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 8   ;   ;Remaining Amount    ;Decimal       ;CaptionML=ENU=Remaining Amount }
    { 9   ;   ;Payment Made        ;Boolean       ;OnValidate=BEGIN
                                                                if not "Payment Made" then begin
                                                                  "Amount Received" := 0;
                                                                  "Date Received" := 0D;
                                                                  "Remaining Amount" := "Original Remaining Amount";
                                                                  exit;
                                                                end;

                                                                AutoFillDate;
                                                                if "Amount Received" = 0 then
                                                                  SuggestAmountReceivedBasedOnDate;
                                                                UpdateRemainingAmount;
                                                              END;

                                                   CaptionML=ENU=Payment Made }
    { 10  ;   ;Date Received       ;Date          ;OnValidate=BEGIN
                                                                if "Date Received" <> 0D then
                                                                  VALIDATE("Payment Made",true);
                                                              END;

                                                   CaptionML=ENU=Date Received }
    { 11  ;   ;Amount Received     ;Decimal       ;OnValidate=VAR
                                                                MaximumRemainingAmount@1000 : Decimal;
                                                              BEGIN
                                                                if "Limit Amount Received" then begin
                                                                  MaximumRemainingAmount := GetMaximumPaymentAmountBasedOnDate;
                                                                  if "Amount Received" > MaximumRemainingAmount then
                                                                    "Amount Received" := MaximumRemainingAmount;
                                                                end;

                                                                AutoFillDate;
                                                                "Payment Made" := true;
                                                                UpdateRemainingAmount;
                                                              END;

                                                   CaptionML=ENU=Amount Received }
    { 12  ;   ;Original Remaining Amount;Decimal  ;CaptionML=ENU=Original Remaining Amount }
    { 13  ;   ;Rem. Amt. after Discount;Decimal   ;CaptionML=ENU=Rem. Amt. after Discount }
    { 14  ;   ;Pmt. Discount Date  ;Date          ;OnValidate=BEGIN
                                                                if "Pmt. Discount Date" <> 0D then
                                                                  VALIDATE("Payment Made",true);
                                                              END;

                                                   CaptionML=ENU=Pmt. Discount Date }
    { 15  ;   ;Limit Amount Received;Boolean      ;CaptionML=ENU=Limit Amount Received }
    { 16  ;   ;Payment Method Code ;Code10        ;TableRelation="Payment Method" WHERE ("Use for Invoicing"=CONST(true));
                                                   CaptionML=ENU=Payment Method Code }
    { 17  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Bank Account;
                                                   OptionString="G/L Account","Bank Account" }
    { 18  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account";
                                                   CaptionML=ENU=Bal. Account No. }
  }
  KEYS
  {
    {    ;"Ledger Entry No."                      ;Clustered=true }
    {    ;"Due Date"                               }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DueDateMsg@1000 : TextConst 'ENU=The payment is overdue. You can calculate interest for late payments from customers by choosing the Finance Charge Memo button.';
      PmtDiscMsg@1001 : TextConst 'ENU=Payment Discount Date is earlier than Date Received. Payment will be registered as partial payment.';

    [External]
    PROCEDURE PopulateTable@1();
    VAR
      CustLedgerEntry@1000 : Record "Cust. Ledger Entry";
      Customer@1001 : Record Customer;
      PaymentRegistrationSetup@1002 : Record "Payment Registration Setup";
    BEGIN
      PaymentRegistrationSetup.GET(USERID);
      PaymentRegistrationSetup.TESTFIELD("Bal. Account No.");

      RESET;
      DELETEALL;

      CustLedgerEntry.SETFILTER("Document Type",'<>%1',CustLedgerEntry."Document Type"::Payment);
      CustLedgerEntry.SETRANGE(Open,true);
      if CustLedgerEntry.FINDSET then begin
        repeat
          CustLedgerEntry.CALCFIELDS("Remaining Amount");
          Customer.GET(CustLedgerEntry."Customer No.");

          INIT;
          "Ledger Entry No." := CustLedgerEntry."Entry No.";
          "Source No." := CustLedgerEntry."Customer No.";
          Name := Customer.Name;
          "Document No." := CustLedgerEntry."Document No.";
          "Document Type" := CustLedgerEntry."Document Type";
          Description := CustLedgerEntry.Description;
          "Due Date" := CustLedgerEntry."Due Date";
          "Remaining Amount" := CustLedgerEntry."Remaining Amount";
          "Original Remaining Amount" := CustLedgerEntry."Remaining Amount";
          "Pmt. Discount Date" := CustLedgerEntry."Pmt. Discount Date";
          "Rem. Amt. after Discount" := "Remaining Amount" - CustLedgerEntry."Remaining Pmt. Disc. Possible";
          "Payment Method Code" := GetO365DefalutPaymentMethodCode;
          "Bal. Account Type" := PaymentRegistrationSetup."Bal. Account Type";
          "Bal. Account No." := PaymentRegistrationSetup."Bal. Account No.";
          INSERT;
        until CustLedgerEntry.NEXT = 0;
      end;

      if FINDSET then;
    END;

    [External]
    PROCEDURE Navigate@3();
    VAR
      CustLedgerEntry@1001 : Record "Cust. Ledger Entry";
      Navigate@1000 : Page Navigate;
    BEGIN
      CustLedgerEntry.GET("Ledger Entry No.");
      Navigate.SetDoc(CustLedgerEntry."Posting Date",CustLedgerEntry."Document No.");
      Navigate.RUN;
    END;

    [External]
    PROCEDURE Reload@15();
    VAR
      TempDataSavePmtRegnBuf@1001 : TEMPORARY Record "Payment Registration Buffer";
      TempRecSavePmtRegnBuf@1000 : TEMPORARY Record "Payment Registration Buffer";
    BEGIN
      TempRecSavePmtRegnBuf.COPY(Rec,true);

      SaveUserValues(TempDataSavePmtRegnBuf);

      PopulateTable;

      RestoreUserValues(TempDataSavePmtRegnBuf);

      COPY(TempRecSavePmtRegnBuf);
      if GET("Ledger Entry No.") then;
    END;

    LOCAL PROCEDURE SaveUserValues@12(VAR TempSavePmtRegnBuf@1000 : TEMPORARY Record "Payment Registration Buffer");
    VAR
      TempWorkPmtRegnBuf@1001 : TEMPORARY Record "Payment Registration Buffer";
    BEGIN
      TempWorkPmtRegnBuf.COPY(Rec,true);
      TempWorkPmtRegnBuf.RESET;
      TempWorkPmtRegnBuf.SETRANGE("Payment Made",true);
      if TempWorkPmtRegnBuf.FINDSET then
        repeat
          TempSavePmtRegnBuf := TempWorkPmtRegnBuf;
          TempSavePmtRegnBuf.INSERT;
        until TempWorkPmtRegnBuf.NEXT = 0;
    END;

    LOCAL PROCEDURE RestoreUserValues@13(VAR TempSavePmtRegnBuf@1001 : TEMPORARY Record "Payment Registration Buffer");
    BEGIN
      if TempSavePmtRegnBuf.FINDSET then
        repeat
          if GET(TempSavePmtRegnBuf."Ledger Entry No.") then begin
            "Payment Made" := TempSavePmtRegnBuf."Payment Made";
            "Date Received" := TempSavePmtRegnBuf."Date Received";
            "Pmt. Discount Date" := TempSavePmtRegnBuf."Pmt. Discount Date";
            SuggestAmountReceivedBasedOnDate;
            "Remaining Amount" := TempSavePmtRegnBuf."Remaining Amount";
            "Amount Received" := TempSavePmtRegnBuf."Amount Received";
            MODIFY;
          end;
        until TempSavePmtRegnBuf.NEXT = 0;
    END;

    [External]
    PROCEDURE GetPmtDiscStyle@5() : Text;
    BEGIN
      if ("Pmt. Discount Date" < "Date Received") and ("Remaining Amount" <> 0) and ("Date Received" < "Due Date") then
        exit('Unfavorable');
      exit('');
    END;

    [External]
    PROCEDURE GetDueDateStyle@8() : Text;
    BEGIN
      if "Due Date" < "Date Received" then
        exit('Unfavorable');
      exit('');
    END;

    [External]
    PROCEDURE GetWarning@6() : Text;
    BEGIN
      if "Date Received" <= "Pmt. Discount Date" then
        exit('');

      if "Date Received" > "Due Date" then
        exit(DueDateMsg);

      if "Remaining Amount" <> 0 then
        exit(PmtDiscMsg);

      exit('');
    END;

    LOCAL PROCEDURE AutoFillDate@2();
    VAR
      PaymentRegistrationSetup@1000 : Record "Payment Registration Setup";
    BEGIN
      if "Date Received" = 0D then begin
        PaymentRegistrationSetup.GET(USERID);
        if PaymentRegistrationSetup."Auto Fill Date Received" then
          "Date Received" := WORKDATE;
      end;
    END;

    LOCAL PROCEDURE SuggestAmountReceivedBasedOnDate@4();
    BEGIN
      "Amount Received" := GetMaximumPaymentAmountBasedOnDate;
      if "Date Received" = 0D then
        exit;
      "Remaining Amount" := 0;
    END;

    LOCAL PROCEDURE GetMaximumPaymentAmountBasedOnDate@9() : Decimal;
    BEGIN
      if "Date Received" = 0D then
        exit(0);

      if "Date Received" <= "Pmt. Discount Date" then
        exit("Rem. Amt. after Discount");

      exit("Original Remaining Amount");
    END;

    LOCAL PROCEDURE GetO365DefalutPaymentMethodCode@10() : Code[10];
    VAR
      O365SalesInitialSetup@1000 : Record "O365 Sales Initial Setup";
    BEGIN
      if O365SalesInitialSetup.GET then
        exit(O365SalesInitialSetup."Default Payment Method Code");
    END;

    LOCAL PROCEDURE UpdateRemainingAmount@7();
    BEGIN
      if "Date Received" = 0D then
        exit;
      if ABS("Amount Received") >= ABS("Original Remaining Amount") then
        "Remaining Amount" := 0
      else
        if "Date Received" <= "Pmt. Discount Date" then begin
          if "Amount Received" >= "Rem. Amt. after Discount" then
            "Remaining Amount" := 0
          else
            "Remaining Amount" := "Original Remaining Amount" - "Amount Received";
        end else
          "Remaining Amount" := "Original Remaining Amount" - "Amount Received";
    END;

    BEGIN
    END.
  }
}

