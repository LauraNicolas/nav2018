OBJECT Codeunit 1371 Sales Batch Post Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Sales Header";
    EventSubscriberInstance=Manual;
    Permissions=TableData "Batch Processing Parameter"=rimd,
                TableData "Batch Processing Parameter Map"=rimd;
    OnRun=VAR
            SalesHeader@1000 : Record "Sales Header";
            SalesBatchPostMgt@1003 : Codeunit "Sales Batch Post Mgt.";
          BEGIN
            SalesHeader.COPY(Rec);

            BINDSUBSCRIPTION(SalesBatchPostMgt);
            SalesBatchPostMgt.SetPostingCodeunitId(PostingCodeunitId);
            SalesBatchPostMgt.SetBatchProcessor(BatchProcessingMgt);
            SalesBatchPostMgt.Code(SalesHeader);

            Rec := SalesHeader;
          END;

  }
  CODE
  {
    VAR
      BatchProcessingMgt@1001 : Codeunit "Batch Processing Mgt.";
      PostingCodeunitId@1000 : Integer;
      PostingDateIsNotSetErr@1002 : TextConst 'ENU=Enter the posting date.';

    PROCEDURE RunBatch@10(VAR SalesHeader@1009 : Record "Sales Header";ReplacePostingDate@1000 : Boolean;PostingDate@1001 : Date;ReplaceDocumentDate@1002 : Boolean;CalcInvoiceDiscount@1003 : Boolean;Ship@1004 : Boolean;Invoice@1005 : Boolean);
    VAR
      BatchPostParameterTypes@1006 : Codeunit "Batch Post Parameter Types";
      SalesBatchPostMgt@1008 : Codeunit "Sales Batch Post Mgt.";
    BEGIN
      if ReplacePostingDate and (PostingDate = 0D) then
        ERROR(PostingDateIsNotSetErr);

      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.Invoice,Invoice);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.Ship,Ship);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.CalcInvoiceDiscount,CalcInvoiceDiscount);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.PostingDate,PostingDate);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate);
      BatchProcessingMgt.AddParameter(BatchPostParameterTypes.ReplaceDocumentDate,ReplaceDocumentDate);

      SalesBatchPostMgt.SetBatchProcessor(BatchProcessingMgt);
      SalesBatchPostMgt.RUN(SalesHeader);
    END;

    PROCEDURE RunWithUI@12(VAR SalesHeader@1000 : Record "Sales Header";TotalCount@1001 : Integer;Question@1002 : Text);
    VAR
      TempErrorMessage@1005 : TEMPORARY Record "Error Message";
      SalesBatchPostMgt@1003 : Codeunit "Sales Batch Post Mgt.";
      ErrorMessages@1004 : Page "Error Messages";
    BEGIN
      if not CONFIRM(STRSUBSTNO(Question,SalesHeader.COUNT,TotalCount),true) then
        exit;

      SalesBatchPostMgt.SetBatchProcessor(BatchProcessingMgt);
      SalesBatchPostMgt.RUN(SalesHeader);
      BatchProcessingMgt.GetErrorMessages(TempErrorMessage);

      if TempErrorMessage.FINDFIRST then begin
        ErrorMessages.SetRecords(TempErrorMessage);
        ErrorMessages.RUN;
      end;
    END;

    PROCEDURE GetBatchProcessor@11(VAR ResultBatchProcessingMgt@1000 : Codeunit "Batch Processing Mgt.");
    BEGIN
      ResultBatchProcessingMgt := BatchProcessingMgt;
    END;

    PROCEDURE SetBatchProcessor@5(NewBatchProcessingMgt@1000 : Codeunit "Batch Processing Mgt.");
    BEGIN
      BatchProcessingMgt := NewBatchProcessingMgt;
    END;

    PROCEDURE Code@4(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      RecRef@1001 : RecordRef;
    BEGIN
      if PostingCodeunitId = 0 then
        PostingCodeunitId := CODEUNIT::"Sales-Post";

      RecRef.GETTABLE(SalesHeader);

      BatchProcessingMgt.SetProcessingCodeunit(PostingCodeunitId);
      BatchProcessingMgt.BatchProcess(RecRef);

      RecRef.SETTABLE(SalesHeader);
    END;

    LOCAL PROCEDURE PrepareSalesHeader@6(VAR SalesHeader@1000 : Record "Sales Header";VAR BatchConfirm@1001 : Option);
    VAR
      BatchPostParameterTypes@1002 : Codeunit "Batch Post Parameter Types";
      CalcInvoiceDiscont@1004 : Boolean;
      ReplacePostingDate@1005 : Boolean;
      PostingDate@1006 : Date;
    BEGIN
      BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.CalcInvoiceDiscount,CalcInvoiceDiscont);
      BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.ReplacePostingDate,ReplacePostingDate);
      BatchProcessingMgt.GetParameterDate(SalesHeader.RECORDID,BatchPostParameterTypes.PostingDate,PostingDate);

      if CalcInvoiceDiscont then
        CalculateInvoiceDiscount(SalesHeader);

      SalesHeader.BatchConfirmUpdateDeferralDate(BatchConfirm,ReplacePostingDate,PostingDate);

      BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.Ship,SalesHeader.Ship);
      BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.Invoice,SalesHeader.Invoice);
      BatchProcessingMgt.GetParameterBoolean(SalesHeader.RECORDID,BatchPostParameterTypes.Receive,SalesHeader.Receive);

      SalesHeader."Print Posted Documents" := false;
    END;

    PROCEDURE SetPostingCodeunitId@9(NewPostingCodeunitId@1000 : Integer);
    BEGIN
      PostingCodeunitId := NewPostingCodeunitId;
    END;

    LOCAL PROCEDURE CalculateInvoiceDiscount@7(VAR SalesHeader@1001 : Record "Sales Header");
    VAR
      SalesLine@1000 : Record "Sales Line";
      SalesCalcDiscount@1002 : Codeunit "Sales-Calc. Discount";
    BEGIN
      SalesLine.RESET;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      if SalesLine.FINDFIRST then
        if SalesCalcDiscount.RUN(SalesLine) then begin
          SalesHeader.GET(SalesHeader."Document Type",SalesHeader."No.");
          COMMIT;
        end;
    END;

    LOCAL PROCEDURE CanPostDocument@8(VAR SalesHeader@1000 : Record "Sales Header") : Boolean;
    VAR
      ApprovalsMgmt@1001 : Codeunit "Approvals Mgmt.";
    BEGIN
      if ApprovalsMgmt.IsSalesApprovalsWorkflowEnabled(SalesHeader) then
        exit(false);

      if SalesHeader.Status = SalesHeader.Status::"Pending Approval" then
        exit(false);

      if not SalesHeader.IsApprovedForPostingBatch then
        exit(false);

      exit(true);
    END;

    [EventSubscriber(Codeunit,1380,OnBeforeBatchProcessing)]
    LOCAL PROCEDURE PrepareSalesHeaderOnBeforeBatchProcessing@3(VAR RecRef@1000 : RecordRef;VAR BatchConfirm@1001 : Option);
    VAR
      SalesHeader@1002 : Record "Sales Header";
    BEGIN
      RecRef.SETTABLE(SalesHeader);
      PrepareSalesHeader(SalesHeader,BatchConfirm);
      RecRef.GETTABLE(SalesHeader);
    END;

    [EventSubscriber(Codeunit,1380,OnVerifyRecord)]
    LOCAL PROCEDURE CheckSalesHeaderOnVerifyRecord@1(VAR RecRef@1000 : RecordRef;VAR Result@1001 : Boolean);
    VAR
      SalesHeader@1002 : Record "Sales Header";
    BEGIN
      RecRef.SETTABLE(SalesHeader);
      Result := CanPostDocument(SalesHeader);
      RecRef.GETTABLE(SalesHeader);
    END;

    [EventSubscriber(Codeunit,1380,OnCustomProcessing)]
    LOCAL PROCEDURE HandleOnCustomProcessing@2(VAR RecRef@1000 : RecordRef;VAR Handled@1001 : Boolean);
    VAR
      SalesHeader@1003 : Record "Sales Header";
      SalesReceivablesSetup@1004 : Record "Sales & Receivables Setup";
      SalesPostViaJobQueue@1005 : Codeunit "Sales Post via Job Queue";
    BEGIN
      RecRef.SETTABLE(SalesHeader);

      SalesReceivablesSetup.GET;
      if SalesReceivablesSetup."Post with Job Queue" then begin
        SalesPostViaJobQueue.EnqueueSalesDoc(SalesHeader);
        RecRef.GETTABLE(SalesHeader);
        Handled := true;
      end;
    END;

    BEGIN
    END.
  }
}

