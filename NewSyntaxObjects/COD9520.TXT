OBJECT Codeunit 9520 Mail Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            if not IsEnabled then
              ERROR(MailingNotSupportedErr);
            if not DoSend then
              ERROR(MailWasNotSendErr);
          END;

  }
  CODE
  {
    VAR
      TempEmailItem@1001 : TEMPORARY Record "Email Item";
      SMTPMail@1010 : Codeunit "SMTP Mail";
      FileManagement@1009 : Codeunit "File Management";
      InvalidEmailAddressErr@1008 : TextConst 'ENU=The email address "%1" is not valid.';
      DoEdit@1007 : Boolean;
      HideMailDialog@1011 : Boolean;
      Cancelled@1016 : Boolean;
      MailSent@1017 : Boolean;
      MailingNotSupportedErr@1013 : TextConst 'ENU=The required email is not supported.';
      MailWasNotSendErr@1000 : TextConst 'ENU=The email was not sent.';
      FromAddressWasNotFoundErr@1003 : TextConst 'ENU=An email from address was not found. Contact an administrator.';
      SaveFileDialogTitleMsg@1005 : TextConst 'ENU=Save PDF file';
      SaveFileDialogFilterMsg@1004 : TextConst 'ENU=PDF Files (*.pdf)|*.pdf';
      OutlookSupported@1014 : Boolean;
      SMTPSupported@1015 : Boolean;
      CannotSendMailThenDownloadQst@1012 : TextConst 'ENU=Do you want to download the attachment?';
      CannotSendMailThenDownloadErr@1019 : TextConst 'ENU=You cannot send the email.\Verify that the email settings are correct.';
      OutlookNotAvailableContinueEditQst@1006 : TextConst 'ENU=Microsoft Outlook is not available.\\Do you want to continue to edit the email?';
      HideSMTPError@1002 : Boolean;
      EmailAttachmentTxt@1018 : TextConst '@@@={Locked};ENU=Email.html';

    LOCAL PROCEDURE RunMailDialog@7() : Boolean;
    VAR
      EmailDialog@1001 : Page "Email Dialog";
    BEGIN
      EmailDialog.SetValues(TempEmailItem,OutlookSupported,SMTPSupported);

      if not (EmailDialog.RUNMODAL = ACTION::OK) then begin
        Cancelled := true;
        exit(false);
      end;
      EmailDialog.GETRECORD(TempEmailItem);
      DoEdit := EmailDialog.GetDoEdit;
      exit(true);
    END;

    LOCAL PROCEDURE SendViaSMTP@5() : Boolean;
    BEGIN
      with TempEmailItem do begin
        SMTPMail.CreateMessage("From Name","From Address","Send to",Subject,GetBodyText,not "Plaintext Formatted");
        SMTPMail.AddAttachment("Attachment File Path","Attachment Name");
        if "Attachment File Path 2" <> '' then
          SMTPMail.AddAttachment("Attachment File Path 2","Attachment Name 2");
        if "Attachment File Path 3" <> '' then
          SMTPMail.AddAttachment("Attachment File Path 3","Attachment Name 3");
        if "Attachment File Path 4" <> '' then
          SMTPMail.AddAttachment("Attachment File Path 4","Attachment Name 4");
        if "Attachment File Path 5" <> '' then
          SMTPMail.AddAttachment("Attachment File Path 5","Attachment Name 5");
        if "Send CC" <> '' then
          SMTPMail.AddCC("Send CC");
        if "Send BCC" <> '' then
          SMTPMail.AddBCC("Send BCC");
      end;
      MailSent := SMTPMail.TrySend;
      if not MailSent and not HideSMTPError then
        ERROR(SMTPMail.GetLastSendMailErrorText);
      exit(MailSent);
    END;

    [External]
    PROCEDURE InitializeFrom@10(NewHideMailDialog@1001 : Boolean;NewHideSMTPError@1000 : Boolean);
    BEGIN
      SetHideMailDialog(NewHideMailDialog);
      SetHideSMTPError(NewHideSMTPError);
    END;

    [External]
    PROCEDURE SetHideMailDialog@22(NewHideMailDialog@1001 : Boolean);
    BEGIN
      HideMailDialog := NewHideMailDialog;
    END;

    [External]
    PROCEDURE SetHideSMTPError@23(NewHideSMTPError@1000 : Boolean);
    BEGIN
      HideSMTPError := NewHideSMTPError;
    END;

    LOCAL PROCEDURE SendMailOnWinClient@3() : Boolean;
    VAR
      Mail@1003 : Codeunit Mail;
      FileManagement@1006 : Codeunit "File Management";
      ClientAttachmentFilePath@1005 : Text;
      ClientAttachmentFullName@1009 : Text;
      BodyText@1000 : Text;
    BEGIN
      if Mail.TryInitializeOutlook then
        with TempEmailItem do begin
          if "Attachment File Path" <> '' then begin
            ClientAttachmentFilePath := DownloadPdfOnClient("Attachment File Path");
            ClientAttachmentFullName := FileManagement.MoveAndRenameClientFile(ClientAttachmentFilePath,"Attachment Name",'');
          end;
          BodyText := ImageBase64ToUrl(GetBodyText);
          if Mail.NewMessageAsync("Send to","Send CC","Send BCC",Subject,BodyText,ClientAttachmentFullName,not HideMailDialog) then begin
            FileManagement.DeleteClientFile(ClientAttachmentFullName);
            MailSent := true;
            exit(true)
          end;
        end;
      exit(false);
    END;

    LOCAL PROCEDURE DownloadPdfOnClient@1(ServerPdfFilePath@1000 : Text) : Text;
    VAR
      FileManagement@1003 : Codeunit "File Management";
      ClientPdfFilePath@1002 : Text;
    BEGIN
      ClientPdfFilePath := FileManagement.DownloadTempFile(ServerPdfFilePath);
      ERASE(ServerPdfFilePath);
      exit(ClientPdfFilePath);
    END;

    [External]
    PROCEDURE CheckValidEmailAddresses@8(Recipients@1000 : Text);
    VAR
      TmpRecipients@1001 : Text;
    BEGIN
      if Recipients = '' then
        ERROR(InvalidEmailAddressErr,Recipients);

      TmpRecipients := DELCHR(Recipients,'<>',';');
      while STRPOS(TmpRecipients,';') > 1 do begin
        CheckValidEmailAddress(COPYSTR(TmpRecipients,1,STRPOS(TmpRecipients,';') - 1));
        TmpRecipients := COPYSTR(TmpRecipients,STRPOS(TmpRecipients,';') + 1);
      end;
      CheckValidEmailAddress(TmpRecipients);
    END;

    [TryFunction]
    [External]
    PROCEDURE CheckValidEmailAddress@12(EmailAddress@1000 : Text);
    VAR
      i@1001 : Integer;
      NoOfAtSigns@1002 : Integer;
    BEGIN
      EmailAddress := DELCHR(EmailAddress,'<>');

      if EmailAddress = '' then
        ERROR(InvalidEmailAddressErr,EmailAddress);

      if (EmailAddress[1] = '@') or (EmailAddress[STRLEN(EmailAddress)] = '@') then
        ERROR(InvalidEmailAddressErr,EmailAddress);

      for i := 1 to STRLEN(EmailAddress) do begin
        if EmailAddress[i] = '@' then
          NoOfAtSigns := NoOfAtSigns + 1
        else
          if EmailAddress[i] = ' ' then
            ERROR(InvalidEmailAddressErr,EmailAddress);
      end;

      if NoOfAtSigns <> 1 then
        ERROR(InvalidEmailAddressErr,EmailAddress);
    END;

    [TryFunction]
    [External]
    PROCEDURE ValidateEmailAddressField@27(VAR EmailAddress@1000 : Text);
    BEGIN
      EmailAddress := DELCHR(EmailAddress,'<>');

      if EmailAddress = '' then
        exit;

      CheckValidEmailAddress(EmailAddress);
    END;

    [External]
    PROCEDURE IsSMTPEnabled@6() : Boolean;
    BEGIN
      exit(SMTPMail.IsEnabled);
    END;

    [External]
    PROCEDURE IsEnabled@11() : Boolean;
    BEGIN
      OutlookSupported := false;
      SMTPSupported := false;
      if IsSMTPEnabled then
        SMTPSupported := true;

      if not FileManagement.CanRunDotNetOnClient then
        exit(SMTPSupported);

      // Assume Outlook is supported - a false check takes long time.
      OutlookSupported := true;
      exit(true);
    END;

    [External]
    PROCEDURE IsCancelled@14() : Boolean;
    BEGIN
      exit(Cancelled);
    END;

    [External]
    PROCEDURE IsSent@15() : Boolean;
    BEGIN
      exit(MailSent);
    END;

    PROCEDURE Send@4(ParmEmailItem@1000 : Record "Email Item") : Boolean;
    BEGIN
      TempEmailItem := ParmEmailItem;
      QualifyFromAddress;
      MailSent := false;
      exit(DoSend);
    END;

    LOCAL PROCEDURE DoSend@13() : Boolean;
    BEGIN
      if not CanSend then
        exit(true);
      Cancelled := true;
      if not HideMailDialog then begin
        if RunMailDialog then
          Cancelled := false
        else
          exit(true);
        if OutlookSupported then
          if DoEdit then begin
            if SendMailOnWinClient then
              exit(true);
            OutlookSupported := false;
            if not SMTPSupported then
              exit(false);
            if CONFIRM(OutlookNotAvailableContinueEditQst) then
              exit(DoSend);
          end
      end;
      if SMTPSupported then
        exit(SendViaSMTP);

      exit(false);
    END;

    LOCAL PROCEDURE QualifyFromAddress@2();
    VAR
      TempPossibleEmailNameValueBuffer@1000 : TEMPORARY Record "Name/Value Buffer";
      MailForEmails@1001 : Codeunit Mail;
    BEGIN
      if TempEmailItem."From Address" <> '' then
        exit;

      MailForEmails.CollectCurrentUserEmailAddresses(TempPossibleEmailNameValueBuffer);
      if SMTPSupported then begin
        if IsConfiguredForO365 then
          if AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'SMTPSetup') then
            exit;

        if AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'UserSetup') then
          exit;
        if AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'ContactEmail') then
          exit;
        if AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'AuthEmail') then
          exit;
        if AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'AD') then
          exit;
        if AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'SMTPSetup') then
          exit;
      end;
      if TempPossibleEmailNameValueBuffer.ISEMPTY then begin
        if FileManagement.IsWebClient then
          ERROR(FromAddressWasNotFoundErr);
        TempEmailItem."From Address" := '';
        exit;
      end;

      if AssignFromAddressIfExist(TempPossibleEmailNameValueBuffer,'') then
        exit;
    END;

    LOCAL PROCEDURE AssignFromAddressIfExist@9(VAR TempPossibleEmailNameValueBuffer@1000 : TEMPORARY Record "Name/Value Buffer";FilteredName@1002 : Text) : Boolean;
    BEGIN
      if FilteredName <> '' then
        TempPossibleEmailNameValueBuffer.SETFILTER(Name,FilteredName);
      if not TempPossibleEmailNameValueBuffer.ISEMPTY then begin
        TempPossibleEmailNameValueBuffer.FINDFIRST;
        if TempPossibleEmailNameValueBuffer.Value <> '' then begin
          TempEmailItem."From Address" := TempPossibleEmailNameValueBuffer.Value;
          exit(true);
        end;
      end;

      TempPossibleEmailNameValueBuffer.RESET;
      exit(false);
    END;

    PROCEDURE SendMailOrDownload@17(TempEmailItem@1002 : TEMPORARY Record "Email Item";HideMailDialog@1000 : Boolean);
    VAR
      MailManagement@1001 : Codeunit "Mail Management";
      OfficeMgt@1003 : Codeunit "Office Management";
    BEGIN
      MailManagement.InitializeFrom(HideMailDialog,CURRENTCLIENTTYPE <> CLIENTTYPE::Background);
      if MailManagement.IsEnabled then
        if MailManagement.Send(TempEmailItem) then begin
          MailSent := MailManagement.IsSent;
          DeleteTempAttachments(TempEmailItem);
          exit;
        end;

      if not GUIALLOWED or (OfficeMgt.IsAvailable and not OfficeMgt.IsPopOut) then
        ERROR(CannotSendMailThenDownloadErr);

      if not CONFIRM(STRSUBSTNO('%1\\%2',CannotSendMailThenDownloadErr,CannotSendMailThenDownloadQst)) then
        exit;

      DownloadPdfAttachment(TempEmailItem);
    END;

    [Internal]
    PROCEDURE DownloadPdfAttachment@16(TempEmailItem@1000 : TEMPORARY Record "Email Item");
    VAR
      FileManagement@1002 : Codeunit "File Management";
    BEGIN
      with TempEmailItem do
        if "Attachment File Path" <> '' then
          FileManagement.DownloadHandler("Attachment File Path",SaveFileDialogTitleMsg,'',SaveFileDialogFilterMsg,"Attachment Name")
        else
          if "Body File Path" <> '' then
            FileManagement.DownloadHandler("Body File Path",SaveFileDialogTitleMsg,'',SaveFileDialogFilterMsg,EmailAttachmentTxt);
    END;

    PROCEDURE ImageBase64ToUrl@18(BodyText@1007 : Text) : Text;
    VAR
      Regex@1006 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.RegularExpressions.Regex";
      Convert@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      MemoryStream@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.MemoryStream";
      SearchText@1003 : Text;
      Base64@1002 : Text;
      MediaId@1000 : GUID;
    BEGIN
      SearchText := '(.*<img src=\")data:image\/[a-z]+;base64,([a-zA-Z0-9\/+=]+)(\".*)';
      Regex := Regex.Regex(SearchText);
      while Regex.IsMatch(BodyText) do begin
        Base64 := Regex.Replace(BodyText,'$2',1);
        MemoryStream := MemoryStream.MemoryStream(Convert.FromBase64String(Base64));
        MediaId := IMPORTSTREAMWITHURLACCESS(MemoryStream,CREATEGUID,20160);
        BodyText := Regex.Replace(BodyText,'$1' + GETDOCUMENTURL(MediaId) + '$3',1);
      end;
      exit(BodyText);
    END;

    LOCAL PROCEDURE IsConfiguredForO365@19() : Boolean;
    VAR
      SMTPMailSetup@1000 : Record "SMTP Mail Setup";
    BEGIN
      SMTPMailSetup.GET;
      exit(SMTPMail.IsOffice365Setup(SMTPMailSetup));
    END;

    LOCAL PROCEDURE DeleteTempAttachments@20(VAR EmailItem@1000 : Record "Email Item");
    BEGIN
      if TryDeleteTempAttachment(EmailItem."Attachment File Path 2") then;
      if TryDeleteTempAttachment(EmailItem."Attachment File Path 3") then;
      if TryDeleteTempAttachment(EmailItem."Attachment File Path 4") then;
      if TryDeleteTempAttachment(EmailItem."Attachment File Path 5") then;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryDeleteTempAttachment@21(VAR FilePath@1000 : Text[250]);
    VAR
      FileManagement@1001 : Codeunit "File Management";
    BEGIN
      if FilePath = '' then
        exit;
      FileManagement.DeleteServerFile(FilePath);
      FilePath := '';
    END;

    PROCEDURE GetSenderEmailAddress@24() : Text[250];
    BEGIN
      if not IsEnabled then
        exit('');
      QualifyFromAddress;
      exit(TempEmailItem."From Address");
    END;

    LOCAL PROCEDURE CanSend@25() : Boolean;
    VAR
      CancelSending@1000 : Boolean;
    BEGIN
      OnBeforeDoSending(CancelSending);
      exit(not CancelSending);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeDoSending@26(VAR CancelSending@1000 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

