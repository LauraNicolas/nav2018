OBJECT Page 2802 Native - Item Entity
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=[@@@={Locked};
               ENU=invoicingItems];
    SourceTable=Item;
    DelayedInsert=true;
    PageType=List;
    OnAfterGetRecord=BEGIN
                       SetCalculatedFields;
                     END;

    OnNewRecord=BEGIN
                  ClearCalculatedFields;
                END;

    OnInsertRecord=VAR
                     GraphCollectionMgtItem@1002 : Codeunit "Graph Collection Mgt - Item";
                   BEGIN
                     GraphCollectionMgtItem.InsertItem(Rec,TempFieldSet,BaseUnitOfMeasureJSONText,ItemCategoryJSONText);

                     SetCalculatedFields;
                     exit(false);
                   END;

    OnModifyRecord=VAR
                     Item@1001 : Record Item;
                   BEGIN
                     Item.SETRANGE(Id,Id);
                     Item.FINDFIRST;

                     if "No." = Item."No." then
                       MODIFY(true)
                     else begin
                       Item.TRANSFERFIELDS(Rec,false);
                       Item.RENAME("No.");
                       TRANSFERFIELDS(Item,true);
                     end;

                     SetCalculatedFields;

                     exit(false);
                   END;

    ODataKeyFields=Id;
  }
  CONTROLS
  {
    { 18  ;0   ;Container ;
                Name=Container18;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 16  ;2   ;Field     ;
                Name=id;
                CaptionML=[@@@={Locked};
                           ENU=Id];
                ApplicationArea=#All;
                SourceExpr=Id;
                ImplicitType=GUID }

    { 15  ;2   ;Field     ;
                Name=number;
                CaptionML=[@@@={Locked};
                           ENU=Number];
                ApplicationArea=#All;
                SourceExpr="No.";
                ImplicitType=Code20 }

    { 14  ;2   ;Field     ;
                Name=displayName;
                CaptionML=[@@@={Locked};
                           ENU=DisplayName];
                ToolTipML=ENU=Specifies the Description for the Item.;
                ApplicationArea=#All;
                SourceExpr=Description;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Description));
                           END;

                ImplicitType=Text50 }

    { 11  ;2   ;Field     ;
                Name=type;
                CaptionML=[@@@={Locked};
                           ENU=Type];
                ToolTipML=ENU=Specifies the Type for the Item. Possible values are Inventory and Service.;
                ApplicationArea=#All;
                SourceExpr=Type;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Type));
                           END;

                ImplicitType=Option }

    { 4   ;2   ;Field     ;
                Name=blocked;
                CaptionML=[@@@={Locked};
                           ENU=Blocked];
                ToolTipML=ENU=Specifies whether the item is blocked.;
                ApplicationArea=#All;
                SourceExpr=Blocked;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(Blocked));
                           END;

                ImplicitType=Boolean }

    { 9   ;2   ;Field     ;
                Name=baseUnitOfMeasureId;
                CaptionML=ENU=BaseUnitOfMeasureId;
                ToolTipML=ENU=Specifies the ID of the base unit of measure.;
                ApplicationArea=#All;
                SourceExpr=BaseUnitOfMeasureId;
                OnValidate=BEGIN
                             ValidateUnitOfMeasure.SETRANGE(Id,BaseUnitOfMeasureId);
                             if not ValidateUnitOfMeasure.FINDFIRST then
                               ERROR(BaseUnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr);

                             "Base Unit of Measure" := ValidateUnitOfMeasure.Code;

                             RegisterFieldSet(FIELDNO("Base Unit of Measure"));
                           END;

                ImplicitType=GUID }

    { 8   ;2   ;Field     ;
                Name=baseUnitOfMeasureIntStdCode;
                CaptionML=ENU=BaseUnitOfMeasureInternationalStandardCode;
                ToolTipML=ENU=Specifies the international standard code of the base unit of measure.;
                ApplicationArea=#All;
                SourceExpr=BaseUnitOfMeasureInternationalStandardCode;
                OnValidate=BEGIN
                             if ValidateUnitOfMeasure."International Standard Code" <> '' then begin
                               if ValidateUnitOfMeasure."International Standard Code" <> BaseUnitOfMeasureInternationalStandardCode then
                                 ERROR(BaseUnitOfMeasureValuesDontMatchErr);
                               exit;
                             end;

                             ValidateUnitOfMeasure.SETRANGE("International Standard Code",BaseUnitOfMeasureInternationalStandardCode);
                             if not ValidateUnitOfMeasure.FINDFIRST then
                               ERROR(BaseUnitOfMeasureIntStdCodeDoesNotMatchAUnitOfMeasureErr);
                             if ValidateUnitOfMeasure.COUNT > 1 then
                               ERROR(BaseUnitOfMeasureIntStdCodeMatchesManyUnitsOfMeasureErr);

                             "Base Unit of Measure" := ValidateUnitOfMeasure.Code;

                             RegisterFieldSet(FIELDNO("Base Unit of Measure"));
                           END;

                ImplicitType=Code10 }

    { 6   ;2   ;Field     ;
                Name=gtin;
                CaptionML=[@@@={Locked};
                           ENU=GTIN];
                ApplicationArea=#All;
                SourceExpr=GTIN;
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO(GTIN));
                           END;

                ImplicitType=Code14 }

    { 23  ;2   ;Field     ;
                Name=inventory;
                CaptionML=[@@@={Locked};
                           ENU=Inventory];
                ToolTipML=ENU=Specifies the inventory for the item.;
                ApplicationArea=#All;
                SourceExpr=InventoryValue;
                OnValidate=BEGIN
                             VALIDATE(Inventory,InventoryValue);
                             RegisterFieldSet(FIELDNO(Inventory));
                           END;

                ImplicitType=Decimal }

    { 10  ;2   ;Field     ;
                Name=unitPrice;
                CaptionML=[@@@={Locked};
                           ENU=UnitPrice];
                ApplicationArea=#All;
                SourceExpr="Unit Price";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Unit Price"));
                           END;

                ImplicitType=Decimal }

    { 24  ;2   ;Field     ;
                Name=priceIncludesTax;
                CaptionML=[@@@={Locked};
                           ENU=PriceIncludesTax];
                ApplicationArea=#All;
                SourceExpr="Price Includes VAT";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Price Includes VAT"));
                           END;

                ImplicitType=Boolean }

    { 25  ;2   ;Field     ;
                Name=unitCost;
                CaptionML=[@@@={Locked};
                           ENU=UnitCost];
                ApplicationArea=#All;
                SourceExpr="Unit Cost";
                OnValidate=BEGIN
                             RegisterFieldSet(FIELDNO("Unit Cost"));
                           END;

                ImplicitType=Decimal }

    { 7   ;2   ;Field     ;
                Name=taxGroupId;
                CaptionML=[@@@={Locked};
                           ENU=TaxGroupId];
                ToolTipML=ENU=Specifies the ID of the tax group or VAT group.;
                ApplicationArea=#All;
                SourceExpr=TaxGroupId;
                OnValidate=VAR
                             ValidateVATProdPostingGroup@1002 : Record "VAT Product Posting Group";
                             ValidateTaxGroup@1001 : Record "Tax Group";
                           BEGIN
                             if TaxGroupId = BlankGUID then begin
                               TaxGroupCode := '';
                               "Tax Group Code" := '';
                               "Tax Group Id" := BlankGUID;
                               "VAT Prod. Posting Group" := '';
                               exit;
                             end;

                             if GeneralLedgerSetup.UseVat then begin
                               ValidateVATProdPostingGroup.SETRANGE(Id,TaxGroupId);
                               if not ValidateVATProdPostingGroup.FINDFIRST then
                                 ERROR(VATGroupIdDoesNotMatchAVATGroupErr);

                               TaxGroupCode := ValidateVATProdPostingGroup.Code;
                               "VAT Prod. Posting Group" := TaxGroupCode;
                               RegisterFieldSet(FIELDNO("VAT Prod. Posting Group"));
                             end else begin
                               ValidateTaxGroup.SETRANGE(Id,TaxGroupId);
                               if not ValidateTaxGroup.FINDFIRST then
                                 ERROR(TaxGroupIdDoesNotMatchATaxGroupErr);

                               TaxGroupCode := ValidateTaxGroup.Code;
                               "Tax Group Code" := TaxGroupCode;
                               "Tax Group Id" := TaxGroupId;
                               RegisterFieldSet(FIELDNO("Tax Group Code"));
                               RegisterFieldSet(FIELDNO("Tax Group Id"));
                             end;
                           END;

                ImplicitType=GUID }

    { 1   ;2   ;Field     ;
                Name=taxGroupCode;
                CaptionML=[@@@={Locked};
                           ENU=TaxGroupCode];
                ToolTipML=ENU=Specifies the code of the tax group or VAT group.;
                ApplicationArea=#All;
                SourceExpr=TaxGroupCode;
                Editable=FALSE;
                ImplicitType=Code20 }

    { 5   ;2   ;Field     ;
                Name=taxable;
                CaptionML=[@@@={Locked};
                           ENU=Taxable];
                ToolTipML=ENU=Specifies the tax group code for the tax-detail entry.;
                ApplicationArea=#All;
                NotBlank=true;
                SourceExpr=Taxable;
                ImplicitType=Boolean;
                ShowMandatory=TRUE }

    { 19  ;2   ;Field     ;
                Name=lastModifiedDateTime;
                CaptionML=[@@@={Locked};
                           ENU=LastModifiedDateTime];
                ApplicationArea=#All;
                SourceExpr="Last DateTime Modified";
                Editable=FALSE;
                ImplicitType=DateTime }

  }
  CODE
  {
    VAR
      TempFieldSet@1011 : TEMPORARY Record Field;
      GeneralLedgerSetup@1006 : Record "General Ledger Setup";
      ValidateUnitOfMeasure@1007 : Record "Unit of Measure";
      BlankGUID@1001 : GUID;
      BaseUnitOfMeasureId@1008 : GUID;
      TaxGroupId@1017 : GUID;
      TaxGroupCode@1018 : Code[20];
      BaseUnitOfMeasureInternationalStandardCode@1005 : Code[10];
      BaseUnitOfMeasureJSONText@1002 : Text;
      ItemCategoryJSONText@1003 : Text;
      InventoryValue@1000 : Decimal;
      Taxable@1004 : Boolean;
      BaseUnitOfMeasureValuesDontMatchErr@1015 : TextConst '@@@={Locked};ENU=The base unit of measure values do not match to a specific Unit of Measure.';
      BaseUnitOfMeasureIdDoesNotMatchAUnitOfMeasureErr@1014 : TextConst '@@@={Locked};ENU=The "baseUnitOfMeasureId" does not match to a Unit of Measure.';
      BaseUnitOfMeasureIntStdCodeDoesNotMatchAUnitOfMeasureErr@1013 : TextConst '@@@={Locked};ENU=The "baseUnitOfMeasureIntStdCode" does not match to a Unit of Measure.';
      BaseUnitOfMeasureIntStdCodeMatchesManyUnitsOfMeasureErr@1016 : TextConst '@@@={Locked};ENU=The "baseUnitOfMeasureIntStdCode" matches to many Units of Measure.';
      TaxGroupIdDoesNotMatchATaxGroupErr@1010 : TextConst '@@@={Locked};ENU=The "taxGroupId" does not match a Tax Group.';
      VATGroupIdDoesNotMatchAVATGroupErr@1022 : TextConst '@@@={Locked};ENU=The "taxGroupId" does not match a VAT Product Posting Group.';

    LOCAL PROCEDURE SetCalculatedFields@6();
    VAR
      GraphCollectionMgtItem@1000 : Codeunit "Graph Collection Mgt - Item";
    BEGIN
      SetCalculatedUnitsOfMeasureFields;
      SetCalculatedTaxGroupFields;
      ItemCategoryJSONText := GraphCollectionMgtItem.ItemCategoryToJSON("Item Category Code");
      CALCFIELDS(Inventory);
      InventoryValue := Inventory;
    END;

    LOCAL PROCEDURE ClearCalculatedFields@10();
    BEGIN
      CLEAR(Id);
      CLEAR(BaseUnitOfMeasureId);
      CLEAR(BaseUnitOfMeasureInternationalStandardCode);
      CLEAR(BaseUnitOfMeasureJSONText);
      CLEAR(Taxable);
      CLEAR(TaxGroupCode);
      CLEAR(TaxGroupId);
      CLEAR(ItemCategoryJSONText);
      CLEAR(InventoryValue);
      TempFieldSet.DELETEALL;
    END;

    LOCAL PROCEDURE SetCalculatedUnitsOfMeasureFields@9();
    VAR
      UnitOfMeasure@1002 : Record "Unit of Measure";
      GraphCollectionMgtItem@1001 : Codeunit "Graph Collection Mgt - Item";
      EmptyGuid@1000 : GUID;
    BEGIN
      if UnitOfMeasure.GET("Base Unit of Measure") then begin
        BaseUnitOfMeasureId := UnitOfMeasure.Id;
        BaseUnitOfMeasureInternationalStandardCode := UnitOfMeasure."International Standard Code";
        BaseUnitOfMeasureJSONText := GraphCollectionMgtItem.ItemUnitOfMeasureToJSON(Rec,"Base Unit of Measure");
        exit;
      end;

      BaseUnitOfMeasureId := EmptyGuid;
      BaseUnitOfMeasureInternationalStandardCode := '';
      BaseUnitOfMeasureJSONText := '';
    END;

    LOCAL PROCEDURE SetCalculatedTaxGroupFields@12();
    VAR
      TaxGroup@1002 : Record "Tax Group";
      TaxSetup@1000 : Record "Tax Setup";
      VATProductPostingGroup@1003 : Record "VAT Product Posting Group";
      EmptyGuid@1001 : GUID;
    BEGIN
      if GeneralLedgerSetup.UseVat and VATProductPostingGroup.GET("VAT Prod. Posting Group") then begin
        TaxGroupCode := VATProductPostingGroup.Code;
        TaxGroupId := VATProductPostingGroup.Id;
        Taxable := true;
      end else
        if TaxGroup.GET("Tax Group Code") then begin
          "Tax Group Id" := TaxGroup.Id;
          TaxGroupId := "Tax Group Id";
          TaxGroupCode := "Tax Group Code";
          if TaxSetup.GET then
            Taxable := "Tax Group Code" <> TaxSetup."Non-Taxable Tax Group Code"
          else
            Taxable := false;
        end else begin
          TaxGroupId := EmptyGuid;
          TaxGroupCode := '';
          "Tax Group Id" := EmptyGuid;
          Taxable := false;
        end;
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer);
    BEGIN
      if TempFieldSet.GET(DATABASE::Item,FieldNo) then
        exit;

      TempFieldSet.INIT;
      TempFieldSet.TableNo := DATABASE::Item;
      TempFieldSet.VALIDATE("No.",FieldNo);
      TempFieldSet.INSERT(true);
    END;

    BEGIN
    END.
  }
}

