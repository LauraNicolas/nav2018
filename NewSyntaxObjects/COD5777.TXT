OBJECT Codeunit 5777 Whse. Validate Source Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="must not be changed when a %1 for this %2 exists: "';
      Text001@1002 : TextConst 'ENU=The %1 cannot be deleted when a related %2 exists.';
      Text002@1004 : TextConst 'ENU=You cannot post consumption for order no. %1 because a quantity of %2 remains to be picked.';
      WhseActivLine@1003 : Record "Warehouse Activity Line";
      TableCaptionValue@1001 : Text[100];

    [External]
    PROCEDURE SalesLineVerifyChange@1(VAR NewSalesLine@1000 : Record "Sales Line";VAR OldSalesLine@1001 : Record "Sales Line");
    BEGIN
      with NewSalesLine do
        if WhseLinesExist(
             DATABASE::"Sales Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        then begin
          if Type <> OldSalesLine.Type then
            FIELDERROR(
              Type,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "No." <> OldSalesLine."No." then
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Variant Code" <> OldSalesLine."Variant Code" then
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Location Code" <> OldSalesLine."Location Code" then
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Unit of Measure Code" <> OldSalesLine."Unit of Measure Code" then
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Drop Shipment" <> OldSalesLine."Drop Shipment" then
            FIELDERROR(
              "Drop Shipment",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Purchase Order No." <> OldSalesLine."Purchase Order No." then
            FIELDERROR(
              "Purchase Order No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Purch. Order Line No." <> OldSalesLine."Purch. Order Line No." then
            FIELDERROR(
              "Purch. Order Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Job No." <> OldSalesLine."Job No." then
            FIELDERROR(
              "Job No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if Quantity <> OldSalesLine.Quantity then
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Qty. to Ship" <> OldSalesLine."Qty. to Ship" then
            FIELDERROR(
              "Qty. to Ship",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Qty. to Assemble to Order" <> OldSalesLine."Qty. to Assemble to Order" then
            FIELDERROR(
              "Qty. to Assemble to Order",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Shipment Date" <> OldSalesLine."Shipment Date" then
            FIELDERROR(
              "Shipment Date",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        end;
    END;

    [External]
    PROCEDURE SalesLineDelete@2(VAR SalesLine@1000 : Record "Sales Line");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Sales Line",
           SalesLine."Document Type",
           SalesLine."Document No.",
           SalesLine."Line No.",
           0,
           SalesLine.Quantity)
      then
        ERROR(
          Text001,
          SalesLine.TABLECAPTION,
          TableCaptionValue);
    END;

    [External]
    PROCEDURE ServiceLineVerifyChange@15(VAR NewServiceLine@1000 : Record "Service Line";VAR OldServiceLine@1001 : Record "Service Line");
    VAR
      NewRecRef@1002 : RecordRef;
      OldRecRef@1003 : RecordRef;
    BEGIN
      if not WhseLinesExist(
           DATABASE::"Service Line",NewServiceLine."Document Type",NewServiceLine."Document No.",NewServiceLine."Line No.",0,
           NewServiceLine.Quantity)
      then
        exit;
      NewRecRef.GETTABLE(NewServiceLine);
      OldRecRef.GETTABLE(OldServiceLine);
      with NewServiceLine do begin
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Type));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("No."));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Location Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO(Quantity));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Variant Code"));
        VerifyFieldNotChanged(NewRecRef,OldRecRef,FIELDNO("Unit of Measure Code"));
      end;
    END;

    [External]
    PROCEDURE ServiceLineDelete@16(VAR ServiceLine@1000 : Record "Service Line");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Service Line",
           ServiceLine."Document Type",
           ServiceLine."Document No.",
           ServiceLine."Line No.",
           0,
           ServiceLine.Quantity)
      then
        ERROR(
          Text001,
          ServiceLine.TABLECAPTION,
          TableCaptionValue);
    END;

    LOCAL PROCEDURE VerifyFieldNotChanged@17(NewRecRef@1000 : RecordRef;OldRecRef@1001 : RecordRef;FieldNumber@1002 : Integer);
    VAR
      NewFieldRef@1004 : FieldRef;
      OldFieldRef@1003 : FieldRef;
    BEGIN
      NewFieldRef := NewRecRef.FIELD(FieldNumber);
      OldFieldRef := OldRecRef.FIELD(FieldNumber);
      if FORMAT(OldFieldRef.VALUE) <> FORMAT(NewFieldRef.VALUE) then
        NewFieldRef.FIELDERROR(STRSUBSTNO(Text000,TableCaptionValue,NewRecRef.CAPTION));
    END;

    [External]
    PROCEDURE PurchaseLineVerifyChange@3(VAR NewPurchLine@1000 : Record "Purchase Line";VAR OldPurchLine@1001 : Record "Purchase Line");
    BEGIN
      with NewPurchLine do
        if WhseLinesExist(
             DATABASE::"Purchase Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        then begin
          if Type <> OldPurchLine.Type then
            FIELDERROR(
              Type,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "No." <> OldPurchLine."No." then
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Variant Code" <> OldPurchLine."Variant Code" then
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Location Code" <> OldPurchLine."Location Code" then
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Unit of Measure Code" <> OldPurchLine."Unit of Measure Code" then
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Drop Shipment" <> OldPurchLine."Drop Shipment" then
            FIELDERROR(
              "Drop Shipment",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Sales Order No." <> OldPurchLine."Sales Order No." then
            FIELDERROR(
              "Sales Order No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Sales Order Line No." <> OldPurchLine."Sales Order Line No." then
            FIELDERROR(
              "Sales Order Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Special Order" <> OldPurchLine."Special Order" then
            FIELDERROR(
              "Special Order",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Special Order Sales No." <> OldPurchLine."Special Order Sales No." then
            FIELDERROR(
              "Special Order Sales No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Special Order Sales Line No." <> OldPurchLine."Special Order Sales Line No." then
            FIELDERROR(
              "Special Order Sales Line No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Job No." <> OldPurchLine."Job No." then
            FIELDERROR(
              "Job No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if Quantity <> OldPurchLine.Quantity then
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if "Qty. to Receive" <> OldPurchLine."Qty. to Receive" then
            FIELDERROR(
              "Qty. to Receive",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        end;
    END;

    [External]
    PROCEDURE PurchaseLineDelete@4(VAR PurchLine@1000 : Record "Purchase Line");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Purchase Line",
           PurchLine."Document Type",
           PurchLine."Document No.",
           PurchLine."Line No.",
           0,
           PurchLine.Quantity)
      then
        ERROR(
          Text001,
          PurchLine.TABLECAPTION,
          TableCaptionValue);
    END;

    [External]
    PROCEDURE TransLineVerifyChange@5(VAR NewTransLine@1000 : Record "Transfer Line";VAR OldTransLine@1001 : Record "Transfer Line");
    BEGIN
      with NewTransLine do begin
        if WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) then begin
          TransLineCommonVerification(NewTransLine,OldTransLine);
          if "Qty. to Ship" <> OldTransLine."Qty. to Ship" then
            FIELDERROR(
              "Qty. to Ship",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        end;

        if WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) then begin
          TransLineCommonVerification(NewTransLine,OldTransLine);
          if "Qty. to Receive" <> OldTransLine."Qty. to Receive" then
            FIELDERROR(
              "Qty. to Receive",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        end;
      end;
    END;

    LOCAL PROCEDURE TransLineCommonVerification@19(VAR NewTransLine@1001 : Record "Transfer Line";VAR OldTransLine@1000 : Record "Transfer Line");
    BEGIN
      with NewTransLine do begin
        if "Item No." <> OldTransLine."Item No." then
          FIELDERROR(
            "Item No.",
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));

        if "Variant Code" <> OldTransLine."Variant Code" then
          FIELDERROR(
            "Variant Code",
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));

        if "Unit of Measure Code" <> OldTransLine."Unit of Measure Code" then
          FIELDERROR(
            "Unit of Measure Code",
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));

        if Quantity <> OldTransLine.Quantity then
          FIELDERROR(
            Quantity,
            STRSUBSTNO(Text000,
              TableCaptionValue,
              TABLECAPTION));
      end;
    END;

    [External]
    PROCEDURE TransLineDelete@10(VAR NewTransLine@1000 : Record "Transfer Line");
    BEGIN
      with NewTransLine do begin
        if WhseLinesExist(DATABASE::"Transfer Line",0,"Document No.","Line No.",0,Quantity) then
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
        if WhseLinesExist(DATABASE::"Transfer Line",1,"Document No.","Line No.",0,Quantity) then
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
      end;
    END;

    [External]
    PROCEDURE WhseLinesExist@6(SourceType@1000 : Integer;SourceSubType@1001 : Option;SourceNo@1002 : Code[20];SourceLineNo@1003 : Integer;SourceSublineNo@1004 : Integer;SourceQty@1007 : Decimal) : Boolean;
    VAR
      WhseRcptLine@1006 : Record "Warehouse Receipt Line";
      WhseShptLine@1005 : Record "Warehouse Shipment Line";
    BEGIN
      if not WhseRcptLine.READPERMISSION then
        exit;
      if ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 1) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 5) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 1) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 5) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Transfer Line") and (SourceSubType = 1))
      then begin
        WhseRcptLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,true);
        if not WhseRcptLine.ISEMPTY then begin
          TableCaptionValue := WhseRcptLine.TABLECAPTION;
          exit(true);
        end;
      end;

      if ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 1) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Purchase Line") and (SourceSubType = 5) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 1) and (SourceQty >= 0)) or
         ((SourceType = DATABASE::"Sales Line") and (SourceSubType = 5) and (SourceQty < 0)) or
         ((SourceType = DATABASE::"Transfer Line") and (SourceSubType = 0)) or
         ((SourceType = DATABASE::"Service Line") and (SourceSubType = 1))
      then begin
        WhseShptLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,true);
        if not WhseShptLine.ISEMPTY then begin
          TableCaptionValue := WhseShptLine.TABLECAPTION;
          exit(true);
        end;
      end;

      WhseActivLine.SetSourceFilter(SourceType,SourceSubType,SourceNo,SourceLineNo,SourceSublineNo,true);
      if not WhseActivLine.ISEMPTY then begin
        TableCaptionValue := WhseActivLine.TABLECAPTION;
        exit(true);
      end;

      TableCaptionValue := '';
      exit(false);
    END;

    [External]
    PROCEDURE ProdComponentVerifyChange@9(VAR NewProdOrderComp@1000 : Record "Prod. Order Component";VAR OldProdOrderComp@1001 : Record "Prod. Order Component");
    BEGIN
      with NewProdOrderComp do
        if WhseLinesExist(
             DATABASE::"Prod. Order Component",
             Status,
             "Prod. Order No.",
             "Prod. Order Line No.",
             "Line No.",
             Quantity)
        then begin
          if Status <> OldProdOrderComp.Status then
            FIELDERROR(
              Status,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Prod. Order No." <> OldProdOrderComp."Prod. Order No." then
            FIELDERROR(
              "Prod. Order No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Prod. Order Line No." <> OldProdOrderComp."Prod. Order Line No." then
            FIELDERROR(
              "Prod. Order Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Line No." <> OldProdOrderComp."Line No." then
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Item No." <> OldProdOrderComp."Item No." then
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Variant Code" <> OldProdOrderComp."Variant Code" then
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Location Code" <> OldProdOrderComp."Location Code" then
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Unit of Measure Code" <> OldProdOrderComp."Unit of Measure Code" then
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Due Date" <> OldProdOrderComp."Due Date" then
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if Quantity <> OldProdOrderComp.Quantity then
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Quantity per" <> OldProdOrderComp."Quantity per" then
            FIELDERROR(
              "Quantity per",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Expected Quantity" <> OldProdOrderComp."Expected Quantity" then
            FIELDERROR(
              "Expected Quantity",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));
        end;
    END;

    [External]
    PROCEDURE ProdComponentDelete@7(VAR ProdOrderComp@1000 : Record "Prod. Order Component");
    BEGIN
      if WhseLinesExist(
           DATABASE::"Prod. Order Component",
           ProdOrderComp.Status,
           ProdOrderComp."Prod. Order No.",
           ProdOrderComp."Prod. Order Line No.",
           ProdOrderComp."Line No.",
           ProdOrderComp.Quantity)
      then
        ERROR(
          Text001,
          ProdOrderComp.TABLECAPTION,
          TableCaptionValue);
    END;

    [External]
    PROCEDURE ItemLineVerifyChange@11(VAR NewItemJnlLine@1000 : Record "Item Journal Line";VAR OldItemJnlLine@1001 : Record "Item Journal Line");
    VAR
      AssemblyLine@1006 : Record "Assembly Line";
      ProdOrderComp@1003 : Record "Prod. Order Component";
      Location@1005 : Record Location;
      LinesExist@1002 : Boolean;
      QtyChecked@1004 : Boolean;
      QtyRemainingToBePicked@1007 : Decimal;
    BEGIN
      with NewItemJnlLine do begin
        case "Entry Type" of
          "Entry Type"::"Assembly Consumption":
            begin
              TESTFIELD("Order Type","Order Type"::Assembly);
              if Location.GET("Location Code") and Location."Require Pick" and Location."Require Shipment" then
                if AssemblyLine.GET(AssemblyLine."Document Type"::Order,"Order No.","Order Line No.") and
                   (Quantity >= 0)
                then begin
                  QtyRemainingToBePicked := Quantity - AssemblyLine.CalcQtyPickedNotConsumed;
                  if QtyRemainingToBePicked > 0 then
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := true;
                end;

              LinesExist := false;
            end;
          "Entry Type"::Consumption:
            begin
              TESTFIELD("Order Type","Order Type"::Production);
              if Location.GET("Location Code") and Location."Require Pick" and Location."Require Shipment" then
                if ProdOrderComp.GET(
                     ProdOrderComp.Status::Released,
                     "Order No.","Order Line No.","Prod. Order Comp. Line No.") and
                   (ProdOrderComp."Flushing Method" = ProdOrderComp."Flushing Method"::Manual) and
                   (Quantity >= 0)
                then begin
                  QtyRemainingToBePicked :=
                    Quantity - CalcNextLevelProdOutput(ProdOrderComp) -
                    ProdOrderComp."Qty. Picked" + ProdOrderComp."Expected Quantity" - ProdOrderComp."Remaining Quantity";
                  if QtyRemainingToBePicked > 0 then
                    ERROR(Text002,"Order No.",QtyRemainingToBePicked);
                  QtyChecked := true;
                end;

              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Component",
                  3,
                  "Order No.",
                  "Order Line No.",
                  "Prod. Order Comp. Line No.",
                  Quantity);
            end;
          "Entry Type"::Output:
            begin
              TESTFIELD("Order Type","Order Type"::Production);
              LinesExist :=
                WhseLinesExist(
                  DATABASE::"Prod. Order Line",
                  3,
                  "Order No.",
                  "Order Line No.",
                  0,
                  Quantity);
            end;
          else
            LinesExist := false;
        end;

        if LinesExist then begin
          if ("Item No." <> OldItemJnlLine."Item No.") and
             (OldItemJnlLine."Item No." <> '')
          then
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if ("Variant Code" <> OldItemJnlLine."Variant Code") and
             (OldItemJnlLine."Variant Code" <> '')
          then
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if ("Location Code" <> OldItemJnlLine."Location Code") and
             (OldItemJnlLine."Location Code" <> '')
          then
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if ("Unit of Measure Code" <> OldItemJnlLine."Unit of Measure Code") and
             (OldItemJnlLine."Unit of Measure Code" <> '')
          then
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));

          if (Quantity <> OldItemJnlLine.Quantity) and
             (OldItemJnlLine.Quantity <> 0) and
             not QtyChecked
          then
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                TableCaptionValue,
                TABLECAPTION));
        end;
      end;
    END;

    [External]
    PROCEDURE ProdOrderLineVerifyChange@12(VAR NewProdOrderLine@1000 : Record "Prod. Order Line";VAR OldProdOrderLine@1001 : Record "Prod. Order Line");
    BEGIN
      with NewProdOrderLine do
        if WhseLinesExist(
             DATABASE::"Prod. Order Line",
             Status,
             "Prod. Order No.",
             "Line No.",
             0,
             Quantity)
        then begin
          if Status <> OldProdOrderLine.Status then
            FIELDERROR(
              Status,
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if "Prod. Order No." <> OldProdOrderLine."Prod. Order No." then
            FIELDERROR(
              "Prod. Order No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if "Line No." <> OldProdOrderLine."Line No." then
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if "Item No." <> OldProdOrderLine."Item No." then
            FIELDERROR(
              "Item No.",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if "Variant Code" <> OldProdOrderLine."Variant Code" then
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if "Location Code" <> OldProdOrderLine."Location Code" then
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if "Unit of Measure Code" <> OldProdOrderLine."Unit of Measure Code" then
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if "Due Date" <> OldProdOrderLine."Due Date" then
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));

          if Quantity <> OldProdOrderLine.Quantity then
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,WhseActivLine.TABLECAPTION,TABLECAPTION));
        end;
    END;

    [External]
    PROCEDURE ProdOrderLineDelete@8(VAR ProdOrderLine@1000 : Record "Prod. Order Line");
    BEGIN
      with ProdOrderLine do
        if WhseLinesExist(
             DATABASE::"Prod. Order Line",
             Status,
             "Prod. Order No.",
             "Line No.",
             0,
             Quantity)
        then
          ERROR(
            Text001,
            TABLECAPTION,
            TableCaptionValue);
    END;

    [External]
    PROCEDURE AssemblyLineVerifyChange@14(VAR NewAssemblyLine@1000 : Record "Assembly Line";VAR OldAssemblyLine@1001 : Record "Assembly Line");
    VAR
      Location@1002 : Record Location;
    BEGIN
      if OldAssemblyLine.Type <> OldAssemblyLine.Type::Item then
        exit;

      with NewAssemblyLine do
        if WhseLinesExist(
             DATABASE::"Assembly Line",
             "Document Type",
             "Document No.",
             "Line No.",
             0,
             Quantity)
        then begin
          if "Document Type" <> OldAssemblyLine."Document Type" then
            FIELDERROR(
              "Document Type",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Document No." <> OldAssemblyLine."Document No." then
            FIELDERROR(
              "Document No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Line No." <> OldAssemblyLine."Line No." then
            FIELDERROR(
              "Line No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "No." <> OldAssemblyLine."No." then
            FIELDERROR(
              "No.",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Variant Code" <> OldAssemblyLine."Variant Code" then
            FIELDERROR(
              "Variant Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Location Code" <> OldAssemblyLine."Location Code" then
            FIELDERROR(
              "Location Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Unit of Measure Code" <> OldAssemblyLine."Unit of Measure Code" then
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Due Date" <> OldAssemblyLine."Due Date" then
            FIELDERROR(
              "Due Date",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if Quantity <> OldAssemblyLine.Quantity then
            FIELDERROR(
              Quantity,
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if "Quantity per" <> OldAssemblyLine."Quantity per" then
            FIELDERROR(
              "Quantity per",
              STRSUBSTNO(Text000,
                WhseActivLine.TABLECAPTION,
                TABLECAPTION));

          if Location.GET("Location Code") and not Location."Require Shipment" then
            if "Quantity to Consume" <> OldAssemblyLine."Quantity to Consume" then
              FIELDERROR(
                "Quantity to Consume",
                STRSUBSTNO(Text000,
                  WhseActivLine.TABLECAPTION,
                  TABLECAPTION));
        end;
    END;

    [External]
    PROCEDURE AssemblyLineDelete@13(VAR AssemblyLine@1000 : Record "Assembly Line");
    BEGIN
      if AssemblyLine.Type <> AssemblyLine.Type::Item then
        exit;

      if WhseLinesExist(
           DATABASE::"Assembly Line",
           AssemblyLine."Document Type",
           AssemblyLine."Document No.",
           AssemblyLine."Line No.",
           0,
           AssemblyLine.Quantity)
      then
        ERROR(
          Text001,
          AssemblyLine.TABLECAPTION,
          TableCaptionValue);
    END;

    [External]
    PROCEDURE CalcNextLevelProdOutput@18(ProdOrderComp@1000 : Record "Prod. Order Component") : Decimal;
    VAR
      Item@1001 : Record Item;
      WhseEntry@1002 : Record "Warehouse Entry";
      ProdOrderLine@1003 : Record "Prod. Order Line";
      OutputBase@1004 : Decimal;
    BEGIN
      Item.GET(ProdOrderComp."Item No.");
      if Item."Replenishment System" = Item."Replenishment System"::Purchase then
        exit(0);

      ProdOrderLine.SETRANGE(Status,ProdOrderComp.Status);
      ProdOrderLine.SETRANGE("Prod. Order No.",ProdOrderComp."Prod. Order No.");
      ProdOrderLine.SETRANGE("Item No.",ProdOrderComp."Item No.");
      ProdOrderLine.SETRANGE("Planning Level Code",ProdOrderComp."Planning Level Code");
      if ProdOrderLine.FINDFIRST then begin
        WhseEntry.SetSourceFilter(
          DATABASE::"Item Journal Line",5,ProdOrderLine."Prod. Order No.",ProdOrderLine."Line No.",true); // Output Journal
        WhseEntry.SETRANGE("Reference No.",ProdOrderLine."Prod. Order No.");
        WhseEntry.SETRANGE("Item No.",ProdOrderLine."Item No.");
        WhseEntry.CALCSUMS(Quantity);
        OutputBase := WhseEntry.Quantity;
      end;

      exit(OutputBase);
    END;

    BEGIN
    END.
  }
}

