OBJECT Codeunit 99000835 Item Jnl. Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Reserved quantity cannot be greater than %1';
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved';
      Text003@1002 : TextConst 'ENU=must not be filled in when a quantity is reserved';
      Text004@1003 : TextConst 'ENU=must not be changed when a quantity is reserved';
      Text005@1004 : TextConst 'ENU=Codeunit is not initialized correctly.';
      ReservMgt@1006 : Codeunit "Reservation Management";
      CreateReservEntry@1007 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1008 : Codeunit "Reservation Engine Mgt.";
      Blocked@1009 : Boolean;
      SetFromType@1010 : '" ",Sales,"Requisition Line",Purchase,"Item Journal","BOM Journal","Item Ledger Entry",Service,Job';
      SetFromSubtype@1011 : Integer;
      SetFromID@1012 : Code[20];
      SetFromBatchName@1013 : Code[10];
      SetFromProdOrderLine@1014 : Integer;
      SetFromRefNo@1015 : Integer;
      SetFromVariantCode@1016 : Code[10];
      SetFromLocationCode@1017 : Code[10];
      SetFromSerialNo@1019 : Code[20];
      SetFromLotNo@1020 : Code[20];
      SetFromQtyPerUOM@1021 : Decimal;
      Text006@1022 : TextConst 'ENU=You cannot define item tracking on %1 %2';
      DeleteItemTracking@1005 : Boolean;

    [External]
    PROCEDURE CreateReservation@4(VAR ItemJnlLine@1000 : Record "Item Journal Line";Description@1001 : Text[50];ExpectedReceiptDate@1002 : Date;Quantity@1006 : Decimal;QuantityBase@1003 : Decimal;ForSerialNo@1004 : Code[20];ForLotNo@1005 : Code[20]);
    VAR
      ShipmentDate@1007 : Date;
    BEGIN
      if SetFromType = 0 then
        ERROR(Text005);

      ItemJnlLine.TESTFIELD("Item No.");
      ItemJnlLine.TESTFIELD("Posting Date");
      ItemJnlLine.CALCFIELDS("Reserved Qty. (Base)");
      if ABS(ItemJnlLine."Quantity (Base)") <
         ABS(ItemJnlLine."Reserved Qty. (Base)") + QuantityBase
      then
        ERROR(
          Text000,
          ABS(ItemJnlLine."Quantity (Base)") - ABS(ItemJnlLine."Reserved Qty. (Base)"));

      ItemJnlLine.TESTFIELD("Location Code",SetFromLocationCode);
      ItemJnlLine.TESTFIELD("Variant Code",SetFromVariantCode);

      if QuantityBase > 0 then
        ShipmentDate := ItemJnlLine."Posting Date"
      else begin
        ShipmentDate := ExpectedReceiptDate;
        ExpectedReceiptDate := ItemJnlLine."Posting Date";
      end;

      CreateReservEntry.CreateReservEntryFor(
        DATABASE::"Item Journal Line",
        ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
        ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",ItemJnlLine."Qty. per Unit of Measure",
        Quantity,QuantityBase,ForSerialNo,ForLotNo);
      CreateReservEntry.CreateReservEntryFrom(
        SetFromType,SetFromSubtype,SetFromID,SetFromBatchName,SetFromProdOrderLine,SetFromRefNo,
        SetFromQtyPerUOM,SetFromSerialNo,SetFromLotNo);
      CreateReservEntry.CreateReservEntry(
        ItemJnlLine."Item No.",ItemJnlLine."Variant Code",ItemJnlLine."Location Code",
        Description,ExpectedReceiptDate,ShipmentDate);

      SetFromType := 0;
    END;

    [External]
    PROCEDURE CreateReservationSetFrom@7(TrackingSpecificationFrom@1000 : Record "Tracking Specification");
    BEGIN
      with TrackingSpecificationFrom do begin
        SetFromType := "Source Type";
        SetFromSubtype := "Source Subtype";
        SetFromID := "Source ID";
        SetFromBatchName := "Source Batch Name";
        SetFromProdOrderLine := "Source Prod. Order Line";
        SetFromRefNo := "Source Ref. No.";
        SetFromVariantCode := "Variant Code";
        SetFromLocationCode := "Location Code";
        SetFromSerialNo := "Serial No.";
        SetFromLotNo := "Lot No.";
        SetFromQtyPerUOM := "Qty. per Unit of Measure";
      end;
    END;

    [External]
    PROCEDURE FilterReservFor@9(VAR FilterReservEntry@1000 : Record "Reservation Entry";ItemJnlLine@1001 : Record "Item Journal Line");
    BEGIN
      FilterReservEntry.SetSourceFilter(
        DATABASE::"Item Journal Line",ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",ItemJnlLine."Line No.",false);
      FilterReservEntry.SetSourceFilter2(ItemJnlLine."Journal Batch Name",0);
      FilterReservEntry.SetTrackingFilterFromItemJnlLine(ItemJnlLine);
    END;

    [External]
    PROCEDURE Caption@27(ItemJnlLine@1001 : Record "Item Journal Line") CaptionText@1000 : Text[80];
    BEGIN
      CaptionText :=
        STRSUBSTNO(
          '%1 %2 %3',ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name",
          ItemJnlLine."Item No.");
    END;

    [External]
    PROCEDURE FindReservEntry@1(ItemJnlLine@1000 : Record "Item Journal Line";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ItemJnlLine);

      exit(ReservEntry.FINDLAST);
    END;

    [External]
    PROCEDURE ReservEntryExist@11(ItemJnlLine@1000 : Record "Item Journal Line") : Boolean;
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,ItemJnlLine);
      ReservEntry.ClearTrackingFilter;
      exit(not ReservEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE VerifyChange@62(VAR NewItemJnlLine@1000 : Record "Item Journal Line";VAR OldItemJnlLine@1001 : Record "Item Journal Line");
    VAR
      ItemJnlLine@1005 : Record "Item Journal Line";
      TempReservEntry@1002 : Record "Reservation Entry";
      ItemTrackManagement@1006 : Codeunit "Item Tracking Management";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
      SNRequired@1007 : Boolean;
      LNRequired@1008 : Boolean;
      PointerChanged@1009 : Boolean;
    BEGIN
      if Blocked then
        exit;
      if NewItemJnlLine."Line No." = 0 then
        if not ItemJnlLine.GET(
             NewItemJnlLine."Journal Template Name",
             NewItemJnlLine."Journal Batch Name",
             NewItemJnlLine."Line No.")
        then
          exit;

      NewItemJnlLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewItemJnlLine."Reserved Qty. (Base)" <> 0;

      if NewItemJnlLine."Posting Date" = 0D then
        if ShowError then
          NewItemJnlLine.FIELDERROR("Posting Date",Text002)
        else
          HasError := true;

      if NewItemJnlLine."Drop Shipment" then
        if ShowError then
          NewItemJnlLine.FIELDERROR("Drop Shipment",Text003)
        else
          HasError := true;

      if NewItemJnlLine."Item No." <> OldItemJnlLine."Item No." then
        if ShowError then
          NewItemJnlLine.FIELDERROR("Item No.",Text004)
        else
          HasError := true;

      if NewItemJnlLine."Entry Type" <> OldItemJnlLine."Entry Type" then
        if ShowError then
          NewItemJnlLine.FIELDERROR("Entry Type",Text004)
        else
          HasError := true;

      if (NewItemJnlLine."Entry Type" = NewItemJnlLine."Entry Type"::Transfer) and
         (NewItemJnlLine."Quantity (Base)" < 0)
      then begin
        if NewItemJnlLine."New Location Code" <> OldItemJnlLine."Location Code" then
          if ShowError then
            NewItemJnlLine.FIELDERROR("New Location Code",Text004)
          else
            HasError := true;
        if NewItemJnlLine."New Bin Code" <> OldItemJnlLine."Bin Code" then begin
          ItemTrackManagement.CheckWhseItemTrkgSetup(NewItemJnlLine."Item No.",SNRequired,LNRequired,false);
          if SNRequired or LNRequired then
            if ShowError then
              NewItemJnlLine.FIELDERROR("New Bin Code",Text004)
            else
              HasError := true;
        end
      end else begin
        if NewItemJnlLine."Location Code" <> OldItemJnlLine."Location Code" then
          if ShowError then
            NewItemJnlLine.FIELDERROR("Location Code",Text004)
          else
            HasError := true;
        if (NewItemJnlLine."Bin Code" <> OldItemJnlLine."Bin Code") and
           (not ReservMgt.CalcIsAvailTrackedQtyInBin(
              NewItemJnlLine."Item No.",NewItemJnlLine."Bin Code",
              NewItemJnlLine."Location Code",NewItemJnlLine."Variant Code",
              DATABASE::"Item Journal Line",NewItemJnlLine."Entry Type",
              NewItemJnlLine."Journal Template Name",NewItemJnlLine."Journal Batch Name",
              0,NewItemJnlLine."Line No."))
        then begin
          if ShowError then
            NewItemJnlLine.FIELDERROR("Bin Code",Text004);
          HasError := true;
        end;
      end;
      if NewItemJnlLine."Variant Code" <> OldItemJnlLine."Variant Code" then
        if ShowError then
          NewItemJnlLine.FIELDERROR("Variant Code",Text004)
        else
          HasError := true;
      if NewItemJnlLine."Line No." <> OldItemJnlLine."Line No." then
        HasError := true;

      if HasError then begin
        FindReservEntry(NewItemJnlLine,TempReservEntry);
        TempReservEntry.ClearTrackingFilter;

        PointerChanged := (NewItemJnlLine."Item No." <> OldItemJnlLine."Item No.") or
          (NewItemJnlLine."Entry Type" <> OldItemJnlLine."Entry Type");

        if PointerChanged or
           (not TempReservEntry.ISEMPTY)
        then begin
          if PointerChanged then begin
            ReservMgt.SetItemJnlLine(OldItemJnlLine);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetItemJnlLine(NewItemJnlLine);
          end else begin
            ReservMgt.SetItemJnlLine(NewItemJnlLine);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewItemJnlLine."Quantity (Base)");
        end;
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@3(VAR NewItemJnlLine@1001 : Record "Item Journal Line";VAR OldItemJnlLine@1000 : Record "Item Journal Line");
    VAR
      ItemJnlLine@1002 : Record "Item Journal Line";
    BEGIN
      if Blocked then
        exit;

      with NewItemJnlLine do begin
        if "Line No." = OldItemJnlLine."Line No." then
          if "Quantity (Base)" = OldItemJnlLine."Quantity (Base)" then
            exit;
        if "Line No." = 0 then
          if not ItemJnlLine.GET("Journal Template Name","Journal Batch Name","Line No.") then
            exit;
        ReservMgt.SetItemJnlLine(NewItemJnlLine);
        if "Qty. per Unit of Measure" <> OldItemJnlLine."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        if "Quantity (Base)" * OldItemJnlLine."Quantity (Base)" < 0 then
          ReservMgt.DeleteReservEntries(true,0)
        else
          ReservMgt.DeleteReservEntries(false,"Quantity (Base)");
      end;
    END;

    [External]
    PROCEDURE TransferItemJnlToItemLedgEntry@34(VAR ItemJnlLine@1000 : Record "Item Journal Line";VAR ItemLedgEntry@1001 : Record "Item Ledger Entry";TransferQty@1002 : Decimal;SkipInventory@1003 : Boolean) : Boolean;
    VAR
      OldReservEntry@1004 : Record "Reservation Entry";
      OldReservEntry2@1005 : Record "Reservation Entry";
      Status@1006 : 'Reservation,Tracking,Surplus,Prospect';
      SkipThisRecord@1007 : Boolean;
    BEGIN
      if not FindReservEntry(ItemJnlLine,OldReservEntry) then
        exit(false);

      OldReservEntry.Lock;

      ItemLedgEntry.TESTFIELD("Item No.",ItemJnlLine."Item No.");
      ItemLedgEntry.TESTFIELD("Variant Code",ItemJnlLine."Variant Code");
      if ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer then begin
        ItemLedgEntry.TESTFIELD("Location Code",ItemJnlLine."New Location Code");
      end else
        ItemLedgEntry.TESTFIELD("Location Code",ItemJnlLine."Location Code");

      for Status := Status::Reservation to Status::Prospect do begin
        if TransferQty = 0 then
          exit(true);
        OldReservEntry.SETRANGE("Reservation Status",Status);

        if OldReservEntry.FINDSET then
          repeat
            OldReservEntry.TESTFIELD("Item No.",ItemJnlLine."Item No.");
            OldReservEntry.TESTFIELD("Variant Code",ItemJnlLine."Variant Code");

            if SkipInventory then
              if Status < Status::Surplus then begin
                OldReservEntry2.GET(OldReservEntry."Entry No.",not OldReservEntry.Positive);
                SkipThisRecord := OldReservEntry2."Source Type" = DATABASE::"Item Ledger Entry";
              end else
                SkipThisRecord := false;

            if not SkipThisRecord then begin
              if ItemJnlLine."Entry Type" = ItemJnlLine."Entry Type"::Transfer then begin
                if ItemLedgEntry.Quantity < 0 then
                  OldReservEntry.TESTFIELD("Location Code",ItemJnlLine."Location Code");
                CreateReservEntry.SetInbound(true);
              end else
                OldReservEntry.TESTFIELD("Location Code",ItemJnlLine."Location Code");

              TransferQty :=
                CreateReservEntry.TransferReservEntry(
                  DATABASE::"Item Ledger Entry",0,'','',0,
                  ItemLedgEntry."Entry No.",ItemLedgEntry."Qty. per Unit of Measure",
                  OldReservEntry,TransferQty);
            end else
              if Status = Status::Tracking then begin
                OldReservEntry2.DELETE;
                OldReservEntry.DELETE;
                ReservMgt.ModifyActionMessage(OldReservEntry."Entry No.",0,true);
              end;
          until (OldReservEntry.NEXT = 0) or (TransferQty = 0);
      end; // DO

      exit(true);
    END;

    [External]
    PROCEDURE RenameLine@10(VAR NewItemJnlLine@1000 : Record "Item Journal Line";VAR OldItemJnlLine@1001 : Record "Item Journal Line");
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Item Journal Line",
        OldItemJnlLine."Entry Type",
        OldItemJnlLine."Journal Template Name",
        OldItemJnlLine."Journal Batch Name",
        0,
        OldItemJnlLine."Line No.",
        NewItemJnlLine."Entry Type",
        NewItemJnlLine."Journal Template Name",
        NewItemJnlLine."Journal Batch Name",
        0,
        NewItemJnlLine."Line No.");
    END;

    [External]
    PROCEDURE DeleteLineConfirm@20(VAR ItemJnlLine@1000 : Record "Item Journal Line") : Boolean;
    BEGIN
      with ItemJnlLine do begin
        if not ReservEntryExist(ItemJnlLine) then
          exit(true);

        ReservMgt.SetItemJnlLine(ItemJnlLine);
        if ReservMgt.DeleteItemTrackingConfirm then
          DeleteItemTracking := true;
      end;

      exit(DeleteItemTracking);
    END;

    [External]
    PROCEDURE DeleteLine@2(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    BEGIN
      if Blocked then
        exit;

      with ItemJnlLine do begin
        ReservMgt.SetItemJnlLine(ItemJnlLine);
        if DeleteItemTracking then
          ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
        ReservMgt.DeleteReservEntries(true,0);
        CALCFIELDS("Reserved Qty. (Base)");
      end;
    END;

    [External]
    PROCEDURE AssignForPlanning@5(VAR ItemJnlLine@1000 : Record "Item Journal Line");
    VAR
      PlanningAssignment@1001 : Record "Planning Assignment";
    BEGIN
      if ItemJnlLine."Item No." <> '' then
        with ItemJnlLine do begin
          PlanningAssignment.ChkAssignOne("Item No.","Variant Code","Location Code","Posting Date");
          if "Entry Type" = "Entry Type"::Transfer then
            PlanningAssignment.ChkAssignOne("Item No.","Variant Code","New Location Code","Posting Date");
        end;
    END;

    [External]
    PROCEDURE Block@6(SetBlocked@1000 : Boolean);
    BEGIN
      Blocked := SetBlocked;
    END;

    [External]
    PROCEDURE CallItemTracking@14(VAR ItemJnlLine@1000 : Record "Item Journal Line";IsReclass@1003 : Boolean);
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ReservEntry@1004 : Record "Reservation Entry";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      ItemJnlLine.TESTFIELD("Item No.");
      if not ItemJnlLine.ItemPosting then begin
        ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
        FilterReservFor(ReservEntry,ItemJnlLine);
        ReservEntry.ClearTrackingFilter;
        if ReservEntry.ISEMPTY then
          ERROR(Text006,ItemJnlLine.FIELDCAPTION("Operation No."),ItemJnlLine."Operation No.");
      end;
      TrackingSpecification.InitFromItemJnlLine(ItemJnlLine);
      if IsReclass then
        ItemTrackingLines.SetFormRunMode(1);
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,ItemJnlLine."Posting Date");
      ItemTrackingLines.SetInbound(ItemJnlLine.IsInbound);
      ItemTrackingLines.RUNMODAL;
    END;

    [External]
    PROCEDURE RegisterBinContentItemTracking@1203(VAR ItemJournalLine@1003 : Record "Item Journal Line";VAR TempTrackingSpecification@1200 : TEMPORARY Record "Tracking Specification");
    VAR
      SourceTrackingSpecification@1202 : Record "Tracking Specification";
      ItemTrackingLines@1004 : Page "Item Tracking Lines";
      FormRunMode@1201 : ',Reclass,"Combined Ship/Rcpt","Drop Shipment",Transfer';
    BEGIN
      if not TempTrackingSpecification.FINDSET then
        exit;
      SourceTrackingSpecification.InitFromItemJnlLine(ItemJournalLine);

      CLEAR(ItemTrackingLines);
      ItemTrackingLines.SetFormRunMode(FormRunMode::Reclass);
      ItemTrackingLines.RegisterItemTrackingLines(
        SourceTrackingSpecification,ItemJournalLine."Posting Date",TempTrackingSpecification);
    END;

    BEGIN
    END.
  }
}

