OBJECT Table 156 Resource
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Name;
    OnInsert=BEGIN
               if "No." = '' then begin
                 ResSetup.GET;
                 ResSetup.TESTFIELD("Resource Nos.");
                 NoSeriesMgt.InitSeries(ResSetup."Resource Nos.",xRec."No. Series",0D,"No.","No. Series");
               end;

               if GETFILTER("Resource Group No.") <> '' then
                 if GETRANGEMIN("Resource Group No.") = GETRANGEMAX("Resource Group No.") then
                   VALIDATE("Resource Group No.",GETRANGEMIN("Resource Group No."));

               DimMgt.UpdateDefaultDim(
                 DATABASE::Resource,"No.",
                 "Global Dimension 1 Code","Global Dimension 2 Code");
             END;

    OnModify=BEGIN
               "Last Date Modified" := TODAY;
             END;

    OnDelete=BEGIN
               CheckJobPlanningLine;

               MoveEntries.MoveResEntries(Rec);

               ResCapacityEntry.SETCURRENTKEY("Resource No.");
               ResCapacityEntry.SETRANGE("Resource No.","No.");
               ResCapacityEntry.DELETEALL;

               ResCost.SETRANGE(Type,ResCost.Type::Resource);
               ResCost.SETRANGE(Code,"No.");
               ResCost.DELETEALL;

               ResPrice.SETRANGE(Type,ResPrice.Type::Resource);
               ResPrice.SETRANGE(Code,"No.");
               ResPrice.DELETEALL;

               CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Resource);
               CommentLine.SETRANGE("No.","No.");
               CommentLine.DELETEALL;

               ExtTextHeader.SETRANGE("Table Name",ExtTextHeader."Table Name"::Resource);
               ExtTextHeader.SETRANGE("No.","No.");
               ExtTextHeader.DELETEALL(true);

               ResSkill.RESET;
               ResSkill.SETRANGE(Type,ResSkill.Type::Resource);
               ResSkill.SETRANGE("No.","No.");
               ResSkill.DELETEALL;

               ResLoc.RESET;
               ResLoc.SETCURRENTKEY("Resource No.","Starting Date");
               ResLoc.SETRANGE("Resource No.","No.");
               ResLoc.DELETEALL;

               ResServZone.RESET;
               ResServZone.SETRANGE("Resource No.","No.");
               ResServZone.DELETEALL;

               ResUnitMeasure.RESET;
               ResUnitMeasure.SETRANGE("Resource No.","No.");
               ResUnitMeasure.DELETEALL;

               SalesOrderLine.SETCURRENTKEY(Type,"No.");
               SalesOrderLine.SETRANGE(Type,SalesOrderLine.Type::Resource);
               SalesOrderLine.SETRANGE("No.","No.");
               if SalesOrderLine.FINDFIRST then
                 ERROR(SalesDocumentExistsErr,"No.",SalesOrderLine."Document Type");

               if ExistUnprocessedTimeSheets then
                 ERROR(Text006,TABLECAPTION,"No.");

               DimMgt.DeleteDefaultDim(DATABASE::Resource,"No.");
             END;

    OnRename=VAR
               SalesLine@1000 : Record "Sales Line";
             BEGIN
               SalesLine.RenameNo(SalesLine.Type::Resource,xRec."No.","No.");

               "Last Date Modified" := TODAY;
             END;

    CaptionML=ENU=Resource;
    LookupPageID="Resource List";
    DrillDownPageID="Resource List";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;AltSearchField=Search Name;
                                                   OnValidate=BEGIN
                                                                if "No." <> xRec."No." then begin
                                                                  ResSetup.GET;
                                                                  NoSeriesMgt.TestManual(ResSetup."Resource Nos.");
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   CaptionML=ENU=No. }
    { 2   ;   ;Type                ;Option        ;CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=Person,Machine;
                                                   OptionString=Person,Machine }
    { 3   ;   ;Name                ;Text50        ;OnValidate=BEGIN
                                                                if ("Search Name" = UPPERCASE(xRec.Name)) or ("Search Name" = '') then
                                                                  "Search Name" := Name;
                                                              END;

                                                   CaptionML=ENU=Name }
    { 4   ;   ;Search Name         ;Code50        ;CaptionML=ENU=Search Name }
    { 5   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 6   ;   ;Address             ;Text50        ;CaptionML=ENU=Address }
    { 7   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 8   ;   ;City                ;Text30        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code".City
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code".City WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=City }
    { 9   ;   ;Social Security No. ;Text30        ;CaptionML=ENU=Social Security No. }
    { 10  ;   ;Job Title           ;Text30        ;CaptionML=ENU=Job Title }
    { 11  ;   ;Education           ;Text30        ;CaptionML=ENU=Education }
    { 12  ;   ;Contract Class      ;Text30        ;CaptionML=ENU=Contract Class }
    { 13  ;   ;Employment Date     ;Date          ;CaptionML=ENU=Employment Date }
    { 14  ;   ;Resource Group No.  ;Code20        ;TableRelation="Resource Group";
                                                   OnValidate=BEGIN
                                                                if "Resource Group No." = xRec."Resource Group No." then
                                                                  exit;

                                                                if xRec."Resource Group No." <> '' then
                                                                  if not
                                                                     CONFIRM(
                                                                       Text001,false,
                                                                       FIELDCAPTION("Resource Group No."))
                                                                  then begin
                                                                    "Resource Group No." := xRec."Resource Group No.";
                                                                    exit;
                                                                  end;

                                                                if xRec.GETFILTER("Resource Group No.") <> '' then
                                                                  SETFILTER("Resource Group No.","Resource Group No.");

                                                                // Resource Capacity Entries
                                                                ResCapacityEntry.SETCURRENTKEY("Resource No.");
                                                                ResCapacityEntry.SETRANGE("Resource No.","No.");
                                                                ResCapacityEntry.MODIFYALL("Resource Group No.","Resource Group No.");

                                                                PlanningLine.SETCURRENTKEY(Type,"No.");
                                                                PlanningLine.SETRANGE(Type,PlanningLine.Type::Resource);
                                                                PlanningLine.SETRANGE("No.","No.");
                                                                PlanningLine.SETRANGE("Schedule Line",true);
                                                                PlanningLine.MODIFYALL("Resource Group No.","Resource Group No.");
                                                              END;

                                                   CaptionML=ENU=Resource Group No. }
    { 16  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Global Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 17  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Global Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 18  ;   ;Base Unit of Measure;Code10        ;TableRelation="Unit of Measure";
                                                   OnValidate=VAR
                                                                UnitOfMeasure@1002 : Record "Unit of Measure";
                                                                ResUnitOfMeasure@1000 : Record "Resource Unit of Measure";
                                                              BEGIN
                                                                if "Base Unit of Measure" <> xRec."Base Unit of Measure" then begin
                                                                  TestNoEntriesExist(FIELDCAPTION("Base Unit of Measure"));

                                                                  if "Base Unit of Measure" <> '' then begin
                                                                    UnitOfMeasure.GET("Base Unit of Measure");
                                                                    if not ResUnitOfMeasure.GET("No.","Base Unit of Measure") then begin
                                                                      ResUnitOfMeasure.INIT;
                                                                      ResUnitOfMeasure.VALIDATE("Resource No.","No.");
                                                                      ResUnitOfMeasure.VALIDATE(Code,"Base Unit of Measure");
                                                                      ResUnitOfMeasure."Qty. per Unit of Measure" := 1;
                                                                      ResUnitOfMeasure.INSERT;
                                                                    end else begin
                                                                      if ResUnitOfMeasure."Qty. per Unit of Measure" <> 1 then
                                                                        ERROR(STRSUBSTNO(BaseUnitOfMeasureQtyMustBeOneErr,"Base Unit of Measure",ResUnitOfMeasure."Qty. per Unit of Measure"));
                                                                      ResUnitOfMeasure.TESTFIELD("Related to Base Unit of Meas.");
                                                                    end;
                                                                  end;
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Base Unit of Measure }
    { 19  ;   ;Direct Unit Cost    ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Indirect Cost %");
                                                              END;

                                                   CaptionML=ENU=Direct Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 20  ;   ;Indirect Cost %     ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Unit Cost",ROUND("Direct Unit Cost" * (1 + "Indirect Cost %" / 100)));
                                                              END;

                                                   CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=2:2 }
    { 21  ;   ;Unit Cost           ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 22  ;   ;Profit %            ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=ENU=Profit %;
                                                   DecimalPlaces=0:5 }
    { 23  ;   ;Price/Profit Calculation;Option    ;OnValidate=BEGIN
                                                                case "Price/Profit Calculation" of
                                                                  "Price/Profit Calculation"::"Profit=Price-Cost":
                                                                    if "Unit Price" <> 0 then
                                                                      "Profit %" := ROUND(100 * (1 - "Unit Cost" / "Unit Price"),0.00001)
                                                                    else
                                                                      "Profit %" := 0;
                                                                  "Price/Profit Calculation"::"Price=Cost+Profit":
                                                                    if "Profit %" < 100 then
                                                                      "Unit Price" := ROUND("Unit Cost" / (1 - "Profit %" / 100),0.00001);
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Price/Profit Calculation;
                                                   OptionCaptionML=ENU="Profit=Price-Cost,Price=Cost+Profit,No Relationship";
                                                   OptionString="Profit=Price-Cost","Price=Cost+Profit","No Relationship" }
    { 24  ;   ;Unit Price          ;Decimal       ;OnValidate=BEGIN
                                                                VALIDATE("Price/Profit Calculation");
                                                              END;

                                                   CaptionML=ENU=Unit Price;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 25  ;   ;Vendor No.          ;Code20        ;TableRelation=Vendor;
                                                   CaptionML=ENU=Vendor No. }
    { 26  ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 27  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Comment Line" WHERE ("Table Name"=CONST(Resource),
                                                                                           "No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 38  ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 39  ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Date Filter }
    { 40  ;   ;Unit of Measure Filter;Code10      ;FieldClass=FlowFilter;
                                                   TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Unit of Measure Filter }
    { 41  ;   ;Capacity            ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Res. Capacity Entry".Capacity WHERE ("Resource No."=FIELD("No."),
                                                                                                         Date=FIELD("Date Filter")));
                                                   CaptionML=ENU=Capacity;
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Qty. on Order (Job) ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Status=CONST(Order),
                                                                                                                "Schedule Line"=CONST(true),
                                                                                                                Type=CONST(Resource),
                                                                                                                "No."=FIELD("No."),
                                                                                                                "Planning Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Qty. on Order (Job);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 43  ;   ;Qty. Quoted (Job)   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Job Planning Line"."Quantity (Base)" WHERE (Status=CONST(Quote),
                                                                                                                "Schedule Line"=CONST(true),
                                                                                                                Type=CONST(Resource),
                                                                                                                "No."=FIELD("No."),
                                                                                                                "Planning Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Qty. Quoted (Job);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 44  ;   ;Usage (Qty.)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Res. Ledger Entry"."Quantity (Base)" WHERE ("Entry Type"=CONST(Usage),
                                                                                                                Chargeable=FIELD("Chargeable Filter"),
                                                                                                                "Unit of Measure Code"=FIELD("Unit of Measure Filter"),
                                                                                                                "Resource No."=FIELD("No."),
                                                                                                                "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Usage (Qty.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 45  ;   ;Usage (Cost)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Res. Ledger Entry"."Total Cost" WHERE ("Entry Type"=CONST(Usage),
                                                                                                           Chargeable=FIELD("Chargeable Filter"),
                                                                                                           "Unit of Measure Code"=FIELD("Unit of Measure Filter"),
                                                                                                           "Resource No."=FIELD("No."),
                                                                                                           "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Usage (Cost);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 46  ;   ;Usage (Price)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Res. Ledger Entry"."Total Price" WHERE ("Entry Type"=CONST(Usage),
                                                                                                            Chargeable=FIELD("Chargeable Filter"),
                                                                                                            "Unit of Measure Code"=FIELD("Unit of Measure Filter"),
                                                                                                            "Resource No."=FIELD("No."),
                                                                                                            "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Usage (Price);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 47  ;   ;Sales (Qty.)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Res. Ledger Entry"."Quantity (Base)" WHERE ("Entry Type"=CONST(Sale),
                                                                                                                 "Unit of Measure Code"=FIELD("Unit of Measure Filter"),
                                                                                                                 "Resource No."=FIELD("No."),
                                                                                                                 "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Sales (Qty.);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 48  ;   ;Sales (Cost)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Res. Ledger Entry"."Total Cost" WHERE ("Entry Type"=CONST(Sale),
                                                                                                            "Unit of Measure Code"=FIELD("Unit of Measure Filter"),
                                                                                                            "Resource No."=FIELD("No."),
                                                                                                            "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Sales (Cost);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 49  ;   ;Sales (Price)       ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=-Sum("Res. Ledger Entry"."Total Price" WHERE ("Entry Type"=CONST(Sale),
                                                                                                             "Unit of Measure Code"=FIELD("Unit of Measure Filter"),
                                                                                                             "Resource No."=FIELD("No."),
                                                                                                             "Posting Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Sales (Price);
                                                   Editable=false;
                                                   AutoFormatType=2 }
    { 50  ;   ;Chargeable Filter   ;Boolean       ;FieldClass=FlowFilter;
                                                   CaptionML=ENU=Chargeable Filter }
    { 51  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                if xRec."Gen. Prod. Posting Group" <> "Gen. Prod. Posting Group" then
                                                                  if GenProdPostingGrp.ValidateVatProdPostingGroup(GenProdPostingGrp,"Gen. Prod. Posting Group") then
                                                                    VALIDATE("VAT Prod. Posting Group",GenProdPostingGrp."Def. VAT Prod. Posting Group");
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 52  ;   ;Picture             ;BLOB          ;CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 53  ;   ;Post Code           ;Code20        ;TableRelation=IF ("Country/Region Code"=CONST('')) "Post Code"
                                                                 ELSE IF ("Country/Region Code"=FILTER(<>'')) "Post Code" WHERE ("Country/Region Code"=FIELD("Country/Region Code"));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) and GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Post Code }
    { 54  ;   ;County              ;Text30        ;CaptionML=ENU=County }
    { 55  ;   ;Automatic Ext. Texts;Boolean       ;CaptionML=ENU=Automatic Ext. Texts }
    { 56  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 57  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code }
    { 58  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 59  ;   ;Country/Region Code ;Code10        ;TableRelation="Country/Region";
                                                   CaptionML=ENU=Country/Region Code }
    { 60  ;   ;IC Partner Purch. G/L Acc. No.;Code20;
                                                   TableRelation="IC G/L Account";
                                                   CaptionML=ENU=IC Partner Purch. G/L Acc. No. }
    { 140 ;   ;Image               ;Media         ;CaptionML=ENU=Image }
    { 900 ;   ;Qty. on Assembly Order;Decimal     ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Assembly Line"."Remaining Quantity (Base)" WHERE ("Document Type"=CONST(Order),
                                                                                                                      Type=CONST(Resource),
                                                                                                                      "No."=FIELD("No."),
                                                                                                                      "Due Date"=FIELD("Date Filter")));
                                                   CaptionML=ENU=Qty. on Assembly Order;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 950 ;   ;Use Time Sheet      ;Boolean       ;OnValidate=BEGIN
                                                                if "Use Time Sheet" <> xRec."Use Time Sheet" then
                                                                  if ExistUnprocessedTimeSheets then
                                                                    ERROR(Text005,FIELDCAPTION("Use Time Sheet"));
                                                              END;

                                                   CaptionML=ENU=Use Time Sheet }
    { 951 ;   ;Time Sheet Owner User ID;Code50    ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                if "Time Sheet Owner User ID" <> xRec."Time Sheet Owner User ID" then begin
                                                                  if ExistUnprocessedTimeSheets then
                                                                    ERROR(Text005,FIELDCAPTION("Time Sheet Owner User ID"));

                                                                  if (Type = Type::Person) and ("Time Sheet Owner User ID" <> '') then
                                                                    TimeSheetMgt.CheckResourceTimeSheetOwner("Time Sheet Owner User ID","No.");
                                                                end;
                                                              END;

                                                   CaptionML=ENU=Time Sheet Owner User ID }
    { 952 ;   ;Time Sheet Approver User ID;Code50 ;TableRelation="User Setup";
                                                   OnValidate=BEGIN
                                                                if "Time Sheet Approver User ID" <> xRec."Time Sheet Approver User ID" then
                                                                  if ExistUnprocessedTimeSheets then
                                                                    ERROR(Text005,FIELDCAPTION("Time Sheet Approver User ID"));
                                                              END;

                                                   CaptionML=ENU=Time Sheet Approver User ID }
    { 1700;   ;Default Deferral Template Code;Code10;
                                                   TableRelation="Deferral Template"."Deferral Code";
                                                   CaptionML=ENU=Default Deferral Template Code }
    { 5900;   ;Qty. on Service Order;Decimal      ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Service Order Allocation"."Allocated Hours" WHERE (Posted=CONST(false),
                                                                                                                       "Resource No."=FIELD("No."),
                                                                                                                       "Allocation Date"=FIELD("Date Filter"),
                                                                                                                       Status=CONST(Active)));
                                                   CaptionML=ENU=Qty. on Service Order;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 5901;   ;Service Zone Filter ;Code10        ;TableRelation="Service Zone";
                                                   CaptionML=ENU=Service Zone Filter }
    { 5902;   ;In Customer Zone    ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Resource Service Zone" WHERE ("Resource No."=FIELD("No."),
                                                                                                    "Service Zone Code"=FIELD("Service Zone Filter")));
                                                   CaptionML=ENU=In Customer Zone;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"No."                                   ;Clustered=true }
    {    ;"Search Name"                            }
    {    ;"Gen. Prod. Posting Group"               }
    {    ;Name                                     }
    {    ;Type                                     }
    {    ;"Base Unit of Measure"                   }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"No.",Name,Type,"Base Unit of Measure"   }
    { 2   ;Brick               ;"No.",Name,Type,"Base Unit of Measure",Image }
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=Do you want to change %1?';
      ResSetup@1002 : Record "Resources Setup";
      Res@1003 : Record Resource;
      ResCapacityEntry@1004 : Record "Res. Capacity Entry";
      CommentLine@1006 : Record "Comment Line";
      ResCost@1007 : Record "Resource Cost";
      ResPrice@1008 : Record "Resource Price";
      SalesOrderLine@1009 : Record "Sales Line";
      ExtTextHeader@1010 : Record "Extended Text Header";
      PostCode@1011 : Record "Post Code";
      GenProdPostingGrp@1012 : Record "Gen. Product Posting Group";
      ResSkill@1016 : Record "Resource Skill";
      ResLoc@1017 : Record "Resource Location";
      ResServZone@1018 : Record "Resource Service Zone";
      ResUnitMeasure@1020 : Record "Resource Unit of Measure";
      PlanningLine@1005 : Record "Job Planning Line";
      NoSeriesMgt@1013 : Codeunit NoSeriesManagement;
      MoveEntries@1014 : Codeunit MoveEntries;
      DimMgt@1015 : Codeunit DimensionManagement;
      Text002@1019 : TextConst 'ENU=You cannot change %1 because there are ledger entries for this resource.';
      Text004@1022 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      TimeSheetMgt@1023 : Codeunit "Time Sheet Management";
      Text005@1024 : TextConst 'ENU=%1 cannot be changed since unprocessed time sheet lines exist for this resource.';
      Text006@1025 : TextConst '@@@=You cannot delete Resource LIFT since unprocessed time sheet lines exist for this resource.;ENU=You cannot delete %1 %2 because unprocessed time sheet lines exist for this resource.';
      BaseUnitOfMeasureQtyMustBeOneErr@1026 : TextConst '@@@="%1 Name of Unit of measure (e.g. BOX, PCS, KG...), %2 Qty. of %1 per base unit of measure ";ENU=The quantity per base unit of measure must be 1. %1 is set up with %2 per unit of measure.';
      CannotDeleteResourceErr@1027 : TextConst '@@@="%1 = Resource No.";ENU=You cannot delete resource %1 because it is used in one or more job planning lines.';
      SalesDocumentExistsErr@1028 : TextConst '@@@="%1 = Resource No.";ENU=You cannot delete resource %1 because there are one or more outstanding %2 that include this resource.';

    [External]
    PROCEDURE AssistEdit@2(OldRes@1000 : Record Resource) : Boolean;
    BEGIN
      with Res do begin
        Res := Rec;
        ResSetup.GET;
        ResSetup.TESTFIELD("Resource Nos.");
        if NoSeriesMgt.SelectSeries(ResSetup."Resource Nos.",OldRes."No. Series","No. Series") then begin
          ResSetup.GET;
          ResSetup.TESTFIELD("Resource Nos.");
          NoSeriesMgt.SetSeries("No.");
          Rec := Res;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@29(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimMgt.ValidateDimValueCode(FieldNumber,ShortcutDimCode);
      DimMgt.SaveDefaultDim(DATABASE::Resource,"No.",FieldNumber,ShortcutDimCode);
      MODIFY;
    END;

    [Internal]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record "Online Map Setup";
      MapMgt@1000 : Codeunit "Online Map Management";
    BEGIN
      if MapPoint.FINDFIRST then
        MapMgt.MakeSelection(DATABASE::Resource,GETPOSITION)
      else
        MESSAGE(Text004);
    END;

    [External]
    PROCEDURE GetUnitOfMeasureFilter@1(No@1000 : Code[20];UnitofMeasureCode@1002 : Code[10]) Filter : Text;
    VAR
      ResourceUnitOfMeasure@1001 : Record "Resource Unit of Measure";
    BEGIN
      ResourceUnitOfMeasure.GET(No,UnitofMeasureCode);
      if ResourceUnitOfMeasure."Related to Base Unit of Meas." then begin
        CLEAR(ResourceUnitOfMeasure);
        ResourceUnitOfMeasure.SETRANGE("Resource No.",No);
        ResourceUnitOfMeasure.SETRANGE("Related to Base Unit of Meas.",true);
        if ResourceUnitOfMeasure.FINDSET then begin
          repeat
            Filter := Filter + GetQuotedCode(ResourceUnitOfMeasure.Code) + '|';
          until ResourceUnitOfMeasure.NEXT = 0;
          Filter := DELSTR(Filter,STRLEN(Filter));
        end;
      end else
        Filter := GetQuotedCode(UnitofMeasureCode);
    END;

    LOCAL PROCEDURE ExistUnprocessedTimeSheets@9() : Boolean;
    VAR
      TimeSheetHeader@1001 : Record "Time Sheet Header";
      TimeSheetLine@1002 : Record "Time Sheet Line";
    BEGIN
      TimeSheetHeader.SETCURRENTKEY("Resource No.");
      TimeSheetHeader.SETRANGE("Resource No.","No.");
      if TimeSheetHeader.FINDSET then
        repeat
          TimeSheetLine.SETRANGE("Time Sheet No.",TimeSheetHeader."No.");
          TimeSheetLine.SETRANGE(Posted,false);
          if not TimeSheetLine.ISEMPTY then
            exit(true);
        until TimeSheetHeader.NEXT = 0;

      exit(false);
    END;

    [External]
    PROCEDURE CreateTimeSheets@3();
    VAR
      Resource@1000 : Record Resource;
    BEGIN
      TESTFIELD("Use Time Sheet",true);
      Resource.GET("No.");
      Resource.SETRECFILTER;
      REPORT.RUNMODAL(REPORT::"Create Time Sheets",true,false,Resource);
    END;

    LOCAL PROCEDURE GetQuotedCode@5(Code@1000 : Text) : Text;
    BEGIN
      exit(STRSUBSTNO('''%1''',Code));
    END;

    LOCAL PROCEDURE TestNoEntriesExist@4(CurrentFieldName@1001 : Text[100]);
    VAR
      ResLedgEntry@1000 : Record "Res. Ledger Entry";
    BEGIN
      ResLedgEntry.SETRANGE("Resource No.","No.");
      if not ResLedgEntry.ISEMPTY then
        ERROR(Text002,CurrentFieldName);
    END;

    LOCAL PROCEDURE CheckJobPlanningLine@34();
    VAR
      JobPlanningLine@1001 : Record "Job Planning Line";
    BEGIN
      JobPlanningLine.SETCURRENTKEY(Type,"No.");
      JobPlanningLine.SETRANGE(Type,JobPlanningLine.Type::Resource);
      JobPlanningLine.SETRANGE("No.","No.");
      if not JobPlanningLine.ISEMPTY then
        ERROR(CannotDeleteResourceErr,"No.");
    END;

    BEGIN
    END.
  }
}

