OBJECT Codeunit 5632 FA Jnl.-Post Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "FA Ledger Entry"=r,
                TableData "FA Register"=rm,
                TableData "Maintenance Ledger Entry"=r,
                TableData "Ins. Coverage Ledger Entry"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU="%2 must not be %3 in %4 %5 = %6 for %1."';
      Text001@1001 : TextConst 'ENU="%2 = %3 must be canceled first for %1."';
      Text002@1002 : TextConst 'ENU=%1 is not a %2.';
      FA@1003 : Record "Fixed Asset";
      FA2@1004 : Record "Fixed Asset";
      DeprBook@1005 : Record "Depreciation Book";
      FADeprBook@1006 : Record "FA Depreciation Book";
      FALedgEntry@1007 : Record "FA Ledger Entry";
      MaintenanceLedgEntry@1008 : Record "Maintenance Ledger Entry";
      FAInsertLedgEntry@1010 : Codeunit "FA Insert Ledger Entry";
      FAJnlCheckLine@1011 : Codeunit "FA Jnl.-Check Line";
      DuplicateDeprBook@1012 : Codeunit "Duplicate Depr. Book";
      CalculateDisposal@1013 : Codeunit "Calculate Disposal";
      CalculateDepr@1014 : Codeunit "Calculate Depreciation";
      CalculateAcqCostDepr@1015 : Codeunit "Calculate Acq. Cost Depr.";
      MakeFALedgEntry@1016 : Codeunit "Make FA Ledger Entry";
      MakeMaintenanceLedgEntry@1017 : Codeunit "Make Maintenance Ledger Entry";
      FANo@1019 : Code[20];
      BudgetNo@1020 : Code[20];
      DeprBookCode@1021 : Code[10];
      FAPostingType@1022 : '"Acquisition Cost",Depreciation,"Write-Down",Appreciation,"Custom 1","Custom 2",Disposal,Maintenance,"Salvage Value"';
      FAPostingDate@1023 : Date;
      Amount2@1024 : Decimal;
      SalvageValue@1025 : Decimal;
      DeprUntilDate@1026 : Boolean;
      DeprAcqCost@1027 : Boolean;
      ErrorEntryNo@1028 : Integer;
      ResultOnDisposal@1029 : Integer;
      Text003@1031 : TextConst 'ENU="%1 = %2 already exists for %5 (%3 = %4)."';

    [Internal]
    PROCEDURE FAJnlPostLine@11(FAJnlLine@1000 : Record "FA Journal Line";CheckLine@1001 : Boolean);
    BEGIN
      FAInsertLedgEntry.SetGLRegisterNo(0);
      with FAJnlLine do begin
        if "FA No." = '' then
          exit;
        if "Posting Date" = 0D then
          "Posting Date" := "FA Posting Date";
        if CheckLine then
          FAJnlCheckLine.CheckFAJnlLine(FAJnlLine);
        DuplicateDeprBook.DuplicateFAJnlLine(FAJnlLine);
        FANo := "FA No.";
        BudgetNo := "Budgeted FA No.";
        DeprBookCode := "Depreciation Book Code";
        FAPostingType := "FA Posting Type";
        FAPostingDate := "FA Posting Date";
        Amount2 := Amount;
        SalvageValue := "Salvage Value";
        DeprUntilDate := "Depr. until FA Posting Date";
        DeprAcqCost := "Depr. Acquisition Cost";
        ErrorEntryNo := "FA Error Entry No.";
        if "FA Posting Type" = "FA Posting Type"::Maintenance then begin
          MakeMaintenanceLedgEntry.CopyFromFAJnlLine(MaintenanceLedgEntry,FAJnlLine);
          MaintenanceCode;
        end else begin
          MakeFALedgEntry.CopyFromFAJnlLine(FALedgEntry,FAJnlLine);
          Code;
        end;
      end;
    END;

    [Internal]
    PROCEDURE GenJnlPostLine@12(GenJnlLine@1000 : Record "Gen. Journal Line";FAAmount@1001 : Decimal;VATAmount@1002 : Decimal;NextTransactionNo@1003 : Integer;NextGLEntryNo@1004 : Integer;GLRegisterNo@1005 : Integer);
    BEGIN
      FAInsertLedgEntry.SetGLRegisterNo(GLRegisterNo);
      FAInsertLedgEntry.DeleteAllGLAcc;
      with GenJnlLine do begin
        if "Account No." = '' then
          exit;
        if "FA Posting Date" = 0D then
          "FA Posting Date" := "Posting Date";
        if "Journal Template Name" = '' then
          Quantity := 0;
        DuplicateDeprBook.DuplicateGenJnlLine(GenJnlLine,FAAmount);
        FANo := "Account No.";
        BudgetNo := "Budgeted FA No.";
        DeprBookCode := "Depreciation Book Code";
        FAPostingType := "FA Posting Type" - 1;
        FAPostingDate := "FA Posting Date";
        Amount2 := FAAmount;
        SalvageValue := ConvertAmtFCYToLCYForSourceCurrency("Salvage Value");
        DeprUntilDate := "Depr. until FA Posting Date";
        DeprAcqCost := "Depr. Acquisition Cost";
        ErrorEntryNo := "FA Error Entry No.";
        if "FA Posting Type" = "FA Posting Type"::Maintenance then begin
          MakeMaintenanceLedgEntry.CopyFromGenJnlLine(MaintenanceLedgEntry,GenJnlLine);
          MaintenanceLedgEntry.Amount := FAAmount;
          MaintenanceLedgEntry."VAT Amount" := VATAmount;
          MaintenanceLedgEntry."Transaction No." := NextTransactionNo;
          MaintenanceLedgEntry."G/L Entry No." := NextGLEntryNo;
          MaintenanceCode;
        end else begin
          MakeFALedgEntry.CopyFromGenJnlLine(FALedgEntry,GenJnlLine);
          FALedgEntry.Amount := FAAmount;
          FALedgEntry."VAT Amount" := VATAmount;
          FALedgEntry."Transaction No." := NextTransactionNo;
          FALedgEntry."G/L Entry No." := NextGLEntryNo;
          Code;
        end;
      end;
    END;

    LOCAL PROCEDURE Code@1();
    BEGIN
      FA.LOCKTABLE;
      DeprBook.GET(DeprBookCode);
      FA.GET(FANo);
      FA.TESTFIELD(Blocked,false);
      FA.TESTFIELD(Inactive,false);
      FADeprBook.GET(FANo,DeprBookCode);
      MakeFALedgEntry.CopyFromFACard(FALedgEntry,FA,FADeprBook);
      FAInsertLedgEntry.SetLastEntryNo(true);
      if (FALedgEntry."FA Posting Group" = '') and (FALedgEntry."G/L Entry No." > 0) then begin
        FADeprBook.TESTFIELD("FA Posting Group");
        FALedgEntry."FA Posting Group" := FADeprBook."FA Posting Group";
      end;
      if DeprUntilDate then
        PostDeprUntilDate(FALedgEntry,0);
      if FAPostingType = FAPostingType::Disposal then
        PostDisposalEntry(FALedgEntry)
      else begin
        if PostBudget then
          SetBudgetAssetNo;
        if not DeprLine then begin
          FAInsertLedgEntry.SetOrgGenJnlLine(true);
          FAInsertLedgEntry.InsertFA(FALedgEntry);
          FAInsertLedgEntry.SetOrgGenJnlLine(false);
        end;
        PostSalvageValue(FALedgEntry);
      end;
      if DeprAcqCost then
        PostDeprUntilDate(FALedgEntry,1);
      FAInsertLedgEntry.SetLastEntryNo(false);
      if PostBudget then
        PostBudgetAsset;
    END;

    LOCAL PROCEDURE MaintenanceCode@13();
    BEGIN
      FA.LOCKTABLE;
      DeprBook.GET(DeprBookCode);
      FA.GET(FANo);
      FADeprBook.GET(FANo,DeprBookCode);
      MakeMaintenanceLedgEntry.CopyFromFACard(MaintenanceLedgEntry,FA,FADeprBook);
      if not DeprBook."Allow Identical Document No." and (MaintenanceLedgEntry."Journal Batch Name" <> '') then
        CheckMaintDocNo(MaintenanceLedgEntry);
      with MaintenanceLedgEntry do
        if ("FA Posting Group" = '') and ("G/L Entry No." > 0) then begin
          FADeprBook.TESTFIELD("FA Posting Group");
          "FA Posting Group" := FADeprBook."FA Posting Group";
        end;
      if PostBudget then
        SetBudgetAssetNo;
      FAInsertLedgEntry.SetOrgGenJnlLine(true);
      FAInsertLedgEntry.InsertMaintenance(MaintenanceLedgEntry);
      FAInsertLedgEntry.SetOrgGenJnlLine(false);
      if PostBudget then
        PostBudgetAsset;
    END;

    LOCAL PROCEDURE PostDisposalEntry@3(VAR FALedgEntry@1000 : Record "FA Ledger Entry");
    VAR
      MaxDisposalNo@1001 : Integer;
      SalesEntryNo@1002 : Integer;
      DisposalType@1003 : 'FirstDisposal,SecondDisposal,ErrorDisposal,LastErrorDisposal';
      OldDisposalMethod@1004 : '" ",Net,Gross';
      EntryAmounts@1005 : ARRAY [14] OF Decimal;
      EntryNumbers@1006 : ARRAY [14] OF Integer;
      i@1007 : Integer;
      j@1008 : Integer;
    BEGIN
      with FALedgEntry do begin
        "Disposal Calculation Method" := DeprBook."Disposal Calculation Method" + 1;
        CalculateDisposal.GetDisposalType(
          FANo,DeprBookCode,ErrorEntryNo,DisposalType,
          OldDisposalMethod,MaxDisposalNo,SalesEntryNo);
        if (MaxDisposalNo > 0) and
           ("Disposal Calculation Method" <> OldDisposalMethod)
        then
          ERROR(
            Text000,
            FAName,DeprBook.FIELDCAPTION("Disposal Calculation Method"),"Disposal Calculation Method",
            DeprBook.TABLECAPTION,DeprBook.FIELDCAPTION(Code),DeprBook.Code);
        if ErrorEntryNo = 0 then
          "Disposal Entry No." := MaxDisposalNo + 1
        else
          if SalesEntryNo <> ErrorEntryNo then
            ERROR(Text001,
              FAName,FIELDCAPTION("Disposal Entry No."),MaxDisposalNo);
        if DisposalType = DisposalType::FirstDisposal then
          PostReverseType(FALedgEntry);
        if DeprBook."Disposal Calculation Method" = DeprBook."Disposal Calculation Method"::Gross then
          FAInsertLedgEntry.SetOrgGenJnlLine(true);
        FAInsertLedgEntry.InsertFA(FALedgEntry);
        FAInsertLedgEntry.SetOrgGenJnlLine(false);
        "Automatic Entry" := true;
        FAInsertLedgEntry.SetNetdisposal(false);
        if (DeprBook."Disposal Calculation Method" =
            DeprBook."Disposal Calculation Method"::Net) and
           DeprBook."VAT on Net Disposal Entries"
        then
          FAInsertLedgEntry.SetNetdisposal(true);

        if DisposalType = DisposalType::FirstDisposal then begin
          CalculateDisposal.CalcGainLoss(FANo,DeprBookCode,EntryAmounts);
          for i := 1 to 14 do
            if EntryAmounts[i] <> 0 then begin
              "FA Posting Category" := CalculateDisposal.SetFAPostingCategory(i);
              "FA Posting Type" := CalculateDisposal.SetFAPostingType(i);
              Amount := EntryAmounts[i];
              if i = 1 then
                "Result on Disposal" := "Result on Disposal"::Gain;
              if i = 2 then
                "Result on Disposal" := "Result on Disposal"::Loss;
              if i > 2 then
                "Result on Disposal" := "Result on Disposal"::" ";
              if i = 10 then
                SetResultOnDisposal(FALedgEntry);
              FAInsertLedgEntry.InsertFA(FALedgEntry);
              PostAllocation(FALedgEntry);
            end;
        end;
        if DisposalType = DisposalType::SecondDisposal then begin
          CalculateDisposal.CalcSecondGainLoss(FANo,DeprBookCode,Amount,EntryAmounts);
          for i := 1 to 2 do
            if EntryAmounts[i] <> 0 then begin
              "FA Posting Category" := CalculateDisposal.SetFAPostingCategory(i);
              "FA Posting Type" := CalculateDisposal.SetFAPostingType(i);
              Amount := EntryAmounts[i];
              if i = 1 then
                "Result on Disposal" := "Result on Disposal"::Gain;
              if i = 2 then
                "Result on Disposal" := "Result on Disposal"::Loss;
              FAInsertLedgEntry.InsertFA(FALedgEntry);
              PostAllocation(FALedgEntry);
            end;
        end;
        if DisposalType in
           [DisposalType::ErrorDisposal,DisposalType::LastErrorDisposal]
        then begin
          CalculateDisposal.GetErrorDisposal(
            FANo,DeprBookCode,DisposalType = DisposalType::ErrorDisposal,MaxDisposalNo,
            EntryAmounts,EntryNumbers);
          if DisposalType = DisposalType::ErrorDisposal then
            j := 2
          else begin
            j := 14;
            ResultOnDisposal := CalcResultOnDisposal(FANo,DeprBookCode);
          end;
          for i := 1 to j do
            if EntryNumbers[i] <> 0 then begin
              Amount := EntryAmounts[i];
              "Entry No." := EntryNumbers[i];
              "FA Posting Category" := CalculateDisposal.SetFAPostingCategory(i);
              "FA Posting Type" := CalculateDisposal.SetFAPostingType(i);
              if i = 1 then
                "Result on Disposal" := "Result on Disposal"::Gain;
              if i = 2 then
                "Result on Disposal" := "Result on Disposal"::Loss;
              if i > 2 then
                "Result on Disposal" := "Result on Disposal"::" ";
              if i = 10 then
                "Result on Disposal" := ResultOnDisposal;
              FAInsertLedgEntry.InsertFA(FALedgEntry);
              PostAllocation(FALedgEntry);
            end;
        end;
        FAInsertLedgEntry.CorrectEntries;
        FAInsertLedgEntry.SetNetdisposal(false);
      end;
    END;

    LOCAL PROCEDURE PostDeprUntilDate@7(FALedgEntry@1000 : Record "FA Ledger Entry";Type@1001 : 'UntilDate,AcqCost');
    VAR
      DepreciationAmount@1002 : Decimal;
      Custom1Amount@1003 : Decimal;
      NumberOfDays@1004 : Integer;
      Custom1NumberOfDays@1005 : Integer;
      DummyEntryAmounts@1006 : ARRAY [4] OF Decimal;
    BEGIN
      with FALedgEntry do begin
        "Automatic Entry" := true;
        "FA No./Budgeted FA No." := '';
        "FA Posting Category" := "FA Posting Category"::" ";
        "No. of Depreciation Days" := 0;
        if Type = Type::UntilDate then
          CalculateDepr.Calculate(
            DepreciationAmount,Custom1Amount,NumberOfDays,Custom1NumberOfDays,
            FANo,DeprBookCode,FAPostingDate,DummyEntryAmounts,0D,0)
        else
          CalculateAcqCostDepr.DeprCalc(
            DepreciationAmount,Custom1Amount,FANo,DeprBookCode,
            Amount2 + SalvageValue,Amount2);
        if Custom1Amount <> 0 then begin
          "FA Posting Type" := "FA Posting Type"::"Custom 1";
          Amount := Custom1Amount;
          "No. of Depreciation Days" := Custom1NumberOfDays;
          FAInsertLedgEntry.InsertFA(FALedgEntry);
          if "G/L Entry No." > 0 then
            FAInsertLedgEntry.InsertBalAcc(FALedgEntry);
        end;
        if DepreciationAmount <> 0 then begin
          "FA Posting Type" := "FA Posting Type"::Depreciation;
          Amount := DepreciationAmount;
          "No. of Depreciation Days" := NumberOfDays;
          FAInsertLedgEntry.InsertFA(FALedgEntry);
          if "G/L Entry No." > 0 then
            FAInsertLedgEntry.InsertBalAcc(FALedgEntry);
        end;
      end;
    END;

    LOCAL PROCEDURE PostSalvageValue@4(FALedgEntry@1000 : Record "FA Ledger Entry");
    BEGIN
      if (SalvageValue = 0) or (FAPostingType <> FAPostingType::"Acquisition Cost") then
        exit;
      with FALedgEntry do begin
        "Entry No." := 0;
        "Automatic Entry" := true;
        Amount := SalvageValue;
        "FA Posting Type" := "FA Posting Type"::"Salvage Value";
        FAInsertLedgEntry.InsertFA(FALedgEntry);
      end;
    END;

    LOCAL PROCEDURE PostBudget@10() : Boolean;
    BEGIN
      exit(BudgetNo <> '');
    END;

    LOCAL PROCEDURE SetBudgetAssetNo@8();
    BEGIN
      FA2.GET(BudgetNo);
      if not FA2."Budgeted Asset" then begin
        FA."No." := FA2."No.";
        DeprBookCode := '';
        ERROR(Text002,FAName,FA.FIELDCAPTION("Budgeted Asset"));
      end;
      if FAPostingType = FAPostingType::Maintenance then
        MaintenanceLedgEntry."FA No./Budgeted FA No." := BudgetNo
      else
        FALedgEntry."FA No./Budgeted FA No." := BudgetNo;
    END;

    LOCAL PROCEDURE PostBudgetAsset@9();
    VAR
      FA2@1000 : Record "Fixed Asset";
      FAPostingType2@1001 : Integer;
    BEGIN
      FA2.GET(BudgetNo);
      FA2.TESTFIELD(Blocked,false);
      FA2.TESTFIELD(Inactive,false);
      if FAPostingType = FAPostingType::Maintenance then begin
        with MaintenanceLedgEntry do begin
          "Automatic Entry" := true;
          "G/L Entry No." := 0;
          "FA No./Budgeted FA No." := "FA No.";
          "FA No." := BudgetNo;
          Amount := -Amount2;
          FAInsertLedgEntry.InsertMaintenance(MaintenanceLedgEntry);
        end;
      end else
        with FALedgEntry do begin
          "Automatic Entry" := true;
          "G/L Entry No." := 0;
          "FA No./Budgeted FA No." := "FA No.";
          "FA No." := BudgetNo;
          if SalvageValue <> 0 then begin
            Amount := -SalvageValue;
            FAPostingType2 := "FA Posting Type";
            "FA Posting Type" := "FA Posting Type"::"Salvage Value";
            FAInsertLedgEntry.InsertFA(FALedgEntry);
            "FA Posting Type" := FAPostingType2;
          end;
          Amount := -Amount2;
          FAInsertLedgEntry.InsertFA(FALedgEntry);
        end;
    END;

    LOCAL PROCEDURE PostReverseType@6(FALedgEntry@1000 : Record "FA Ledger Entry");
    VAR
      EntryAmounts@1001 : ARRAY [4] OF Decimal;
      i@1002 : Integer;
    BEGIN
      CalculateDisposal.CalcReverseAmounts(FANo,DeprBookCode,EntryAmounts);
      FALedgEntry."FA Posting Category" := FALedgEntry."FA Posting Category"::" ";
      FALedgEntry."Automatic Entry" := true;
      for i := 1 to 4 do
        if EntryAmounts[i] <> 0 then begin
          FALedgEntry.Amount := EntryAmounts[i];
          FALedgEntry."FA Posting Type" := CalculateDisposal.SetReverseType(i);
          FAInsertLedgEntry.InsertFA(FALedgEntry);
          if FALedgEntry."G/L Entry No." > 0 then
            FAInsertLedgEntry.InsertBalAcc(FALedgEntry);
        end;
    END;

    LOCAL PROCEDURE PostGLBalAcc@20(FALedgEntry@1000 : Record "FA Ledger Entry";AllocatedPct@1001 : Decimal);
    BEGIN
      if AllocatedPct > 0 then begin
        FALedgEntry."Entry No." := 0;
        FALedgEntry."Automatic Entry" := true;
        FALedgEntry.Amount := -FALedgEntry.Amount;
        FALedgEntry.Correction := not FALedgEntry.Correction;
        FAInsertLedgEntry.InsertBalDisposalAcc(FALedgEntry);
        FALedgEntry.Correction := not FALedgEntry.Correction;
        FAInsertLedgEntry.InsertBalAcc(FALedgEntry);
      end;
    END;

    LOCAL PROCEDURE PostAllocation@17(VAR FALedgEntry@1000 : Record "FA Ledger Entry");
    VAR
      FAPostingGr@1001 : Record "FA Posting Group";
    BEGIN
      with FALedgEntry do begin
        if "G/L Entry No." = 0 then
          exit;
        case "FA Posting Type" of
          "FA Posting Type"::"Gain/Loss":
            if DeprBook."Disposal Calculation Method" = DeprBook."Disposal Calculation Method"::Net then begin
              FAPostingGr.GET("FA Posting Group");
              FAPostingGr.CALCFIELDS("Allocated Gain %","Allocated Loss %");
              if "Result on Disposal" = "Result on Disposal"::Gain then
                PostGLBalAcc(FALedgEntry,FAPostingGr."Allocated Gain %")
              else
                PostGLBalAcc(FALedgEntry,FAPostingGr."Allocated Loss %");
            end;
          "FA Posting Type"::"Book Value on Disposal":
            begin
              FAPostingGr.GET("FA Posting Group");
              FAPostingGr.CALCFIELDS("Allocated Book Value % (Gain)","Allocated Book Value % (Loss)");
              if "Result on Disposal" = "Result on Disposal"::Gain then
                PostGLBalAcc(FALedgEntry,FAPostingGr."Allocated Book Value % (Gain)")
              else
                PostGLBalAcc(FALedgEntry,FAPostingGr."Allocated Book Value % (Loss)");
            end;
        end;
      end;
    END;

    LOCAL PROCEDURE DeprLine@5() : Boolean;
    BEGIN
      exit((Amount2 = 0) and (FAPostingType = FAPostingType::Depreciation) and DeprUntilDate);
    END;

    [External]
    PROCEDURE FindFirstGLAcc@14(VAR FAGLPostBuf@1000 : Record "FA G/L Posting Buffer") : Boolean;
    BEGIN
      exit(FAInsertLedgEntry.FindFirstGLAcc(FAGLPostBuf));
    END;

    [External]
    PROCEDURE GetNextGLAcc@15(VAR FAGLPostBuf@1000 : Record "FA G/L Posting Buffer") : Integer;
    BEGIN
      exit(FAInsertLedgEntry.GetNextGLAcc(FAGLPostBuf));
    END;

    LOCAL PROCEDURE FAName@2() : Text[200];
    VAR
      DepreciationCalc@1000 : Codeunit "Depreciation Calculation";
    BEGIN
      exit(DepreciationCalc.FAName(FA,DeprBookCode));
    END;

    LOCAL PROCEDURE SetResultOnDisposal@16(VAR FALedgEntry@1000 : Record "FA Ledger Entry");
    VAR
      FADeprBook@1001 : Record "FA Depreciation Book";
    BEGIN
      FADeprBook."FA No." := FALedgEntry."FA No.";
      FADeprBook."Depreciation Book Code" := FALedgEntry."Depreciation Book Code";
      FADeprBook.CALCFIELDS("Gain/Loss");
      if FADeprBook."Gain/Loss" <= 0 then
        FALedgEntry."Result on Disposal" := FALedgEntry."Result on Disposal"::Gain
      else
        FALedgEntry."Result on Disposal" := FALedgEntry."Result on Disposal"::Loss;
    END;

    LOCAL PROCEDURE CalcResultOnDisposal@18(FANo@1000 : Code[20];DeprBookCode@1001 : Code[10]) : Integer;
    VAR
      FADeprBook@1002 : Record "FA Depreciation Book";
      FALedgEntry@1003 : Record "FA Ledger Entry";
    BEGIN
      FADeprBook."FA No." := FANo;
      FADeprBook."Depreciation Book Code" := DeprBookCode;
      FADeprBook.CALCFIELDS("Gain/Loss");
      if FADeprBook."Gain/Loss" <= 0 then
        exit(FALedgEntry."Result on Disposal"::Gain);

      exit(FALedgEntry."Result on Disposal"::Loss);
    END;

    LOCAL PROCEDURE CheckMaintDocNo@21(MaintenanceLedgEntry@1003 : Record "Maintenance Ledger Entry");
    VAR
      OldMaintenanceLedgEntry@1002 : Record "Maintenance Ledger Entry";
      FAJnlLine2@1000 : Record "FA Journal Line";
    BEGIN
      OldMaintenanceLedgEntry.SETCURRENTKEY("FA No.","Depreciation Book Code","Document No.");
      OldMaintenanceLedgEntry.SETRANGE("FA No.",MaintenanceLedgEntry."FA No.");
      OldMaintenanceLedgEntry.SETRANGE("Depreciation Book Code",MaintenanceLedgEntry."Depreciation Book Code");
      OldMaintenanceLedgEntry.SETRANGE("Document No.",MaintenanceLedgEntry."Document No.");
      if OldMaintenanceLedgEntry.FINDFIRST then begin
        FAJnlLine2."FA Posting Type" := FAJnlLine2."FA Posting Type"::Maintenance;
        ERROR(
          Text003,
          OldMaintenanceLedgEntry.FIELDCAPTION("Document No."),
          OldMaintenanceLedgEntry."Document No.",
          FAJnlLine2.FIELDCAPTION("FA Posting Type"),
          FAJnlLine2."FA Posting Type",
          FAName);
      end;
    END;

    [External]
    PROCEDURE UpdateRegNo@19(GLRegNo@1000 : Integer);
    VAR
      FAReg@1001 : Record "FA Register";
    BEGIN
      if FAReg.FINDLAST then begin
        FAReg."G/L Register No." := GLRegNo;
        FAReg.MODIFY;
      end;
    END;

    BEGIN
    END.
  }
}

