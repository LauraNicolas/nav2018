OBJECT Codeunit 5773 Whse.-Transfer Release
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Location@1000 : Record Location;
      WhseMgt@1001 : Codeunit "Whse. Management";
      CalledFromTransferOrder@1002 : Boolean;

    [External]
    PROCEDURE Release@1(TransHeader@1000 : Record "Transfer Header");
    VAR
      WhseRqst@1001 : Record "Warehouse Request";
    BEGIN
      with TransHeader do begin
        InitializeWhseRequest(WhseRqst,TransHeader,Status::Released);

        if Location.RequireReceive("Transfer-to Code") or Location.RequirePutaway("Transfer-to Code") then
          CreateInboundWhseRequest(WhseRqst,TransHeader);
        if Location.RequireShipment("Transfer-from Code") or Location.RequirePicking("Transfer-from Code") then
          CreateOutboundWhseRequest(WhseRqst,TransHeader);

        DeleteOpenWhseRequest("No.");
      end;
    END;

    [External]
    PROCEDURE Reopen@2(TransHeader@1000 : Record "Transfer Header");
    VAR
      WhseRqst@1001 : Record "Warehouse Request";
    BEGIN
      with TransHeader do begin
        if WhseRqst.GET(WhseRqst.Type::Inbound,"Transfer-to Code",DATABASE::"Transfer Line",1,"No.") then begin
          WhseRqst."Document Status" := Status::Open;
          WhseRqst.MODIFY;
        end;
        if WhseRqst.GET(WhseRqst.Type::Outbound,"Transfer-from Code",DATABASE::"Transfer Line",0,"No.") then begin
          WhseRqst."Document Status" := Status::Open;
          WhseRqst.MODIFY;
        end;
      end;
    END;

    PROCEDURE InitializeWhseRequest@7(VAR WarehouseRequest@1001 : Record "Warehouse Request";TransferHeader@1000 : Record "Transfer Header";DocumentStatus@1002 : Option);
    BEGIN
      with WarehouseRequest do begin
        "Source Type" := DATABASE::"Transfer Line";
        "Source No." := TransferHeader."No.";
        "Document Status" := DocumentStatus;
        "Destination Type" := "Destination Type"::Location;
        "External Document No." := TransferHeader."External Document No.";
      end;
    END;

    PROCEDURE CreateInboundWhseRequest@9(VAR WarehouseRequest@1001 : Record "Warehouse Request";TransferHeader@1000 : Record "Transfer Header");
    BEGIN
      with WarehouseRequest do begin
        CheckUnitOfMeasureCode(TransferHeader."No.");
        TransferHeader.SETRANGE("Location Filter",TransferHeader."Transfer-to Code");
        TransferHeader.CALCFIELDS("Completely Received");

        Type := Type::Inbound;
        "Source Subtype" := 1;
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Expected Receipt Date" := TransferHeader."Receipt Date";
        "Location Code" := TransferHeader."Transfer-to Code";
        "Completely Handled" := TransferHeader."Completely Received";
        "Shipment Method Code" := TransferHeader."Shipment Method Code";
        "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
        "Destination No." := TransferHeader."Transfer-to Code";
        if CalledFromTransferOrder then begin
          if MODIFY then;
        end else
          if not INSERT then
            MODIFY;
      end;
    END;

    PROCEDURE CreateOutboundWhseRequest@11(VAR WarehouseRequest@1001 : Record "Warehouse Request";TransferHeader@1000 : Record "Transfer Header");
    BEGIN
      with WarehouseRequest do begin
        CheckUnitOfMeasureCode(TransferHeader."No.");
        TransferHeader.SETRANGE("Location Filter",TransferHeader."Transfer-from Code");
        TransferHeader.CALCFIELDS("Completely Shipped");

        Type := Type::Outbound;
        "Source Subtype" := 0;
        "Source Document" := WhseMgt.GetSourceDocument("Source Type","Source Subtype");
        "Location Code" := TransferHeader."Transfer-from Code";
        "Completely Handled" := TransferHeader."Completely Shipped";
        "Shipment Method Code" := TransferHeader."Shipment Method Code";
        "Shipping Agent Code" := TransferHeader."Shipping Agent Code";
        "Shipping Advice" := TransferHeader."Shipping Advice";
        "Shipment Date" := TransferHeader."Shipment Date";
        "Destination No." := TransferHeader."Transfer-from Code";
        if not INSERT then
          MODIFY;
      end;
    END;

    LOCAL PROCEDURE DeleteOpenWhseRequest@13(TransferOrderNo@1000 : Code[20]);
    VAR
      WarehouseRequest@1001 : Record "Warehouse Request";
    BEGIN
      with WarehouseRequest do begin
        SETCURRENTKEY("Source Type","Source No.");
        SETRANGE("Source Type",DATABASE::"Transfer Line");
        SETRANGE("Source No.",TransferOrderNo);
        SETRANGE("Document Status","Document Status"::Open);
        if not ISEMPTY then
          DELETEALL(true);
      end;
    END;

    [External]
    PROCEDURE SetCallFromTransferOrder@3(CalledFromTransferOrder2@1000 : Boolean);
    BEGIN
      CalledFromTransferOrder := CalledFromTransferOrder2;
    END;

    LOCAL PROCEDURE CheckUnitOfMeasureCode@5(DocumentNo@1000 : Code[20]);
    VAR
      TransLine@1001 : Record "Transfer Line";
    BEGIN
      TransLine.SETRANGE("Document No.",DocumentNo);
      TransLine.SETRANGE("Unit of Measure Code",'');
      TransLine.SETFILTER("Item No.",'<>%1','');
      if TransLine.FINDFIRST then
        TransLine.TESTFIELD("Unit of Measure Code");
    END;

    BEGIN
    END.
  }
}

