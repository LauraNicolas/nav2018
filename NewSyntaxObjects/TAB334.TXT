OBJECT Table 334 Column Layout
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Column Layout;
  }
  FIELDS
  {
    { 1   ;   ;Column Layout Name  ;Code10        ;TableRelation="Column Layout Name";
                                                   CaptionML=ENU=Column Layout Name }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 3   ;   ;Column No.          ;Code10        ;CaptionML=ENU=Column No. }
    { 4   ;   ;Column Header       ;Text30        ;CaptionML=ENU=Column Header }
    { 5   ;   ;Column Type         ;Option        ;InitValue="Net Change";
                                                   CaptionML=ENU=Column Type;
                                                   OptionCaptionML=ENU=Formula,Net Change,Balance at Date,Beginning Balance,Year to Date,Rest of Fiscal Year,Entire Fiscal Year;
                                                   OptionString=Formula,"Net Change","Balance at Date","Beginning Balance","Year to Date","Rest of Fiscal Year","Entire Fiscal Year" }
    { 6   ;   ;Ledger Entry Type   ;Option        ;CaptionML=ENU=Ledger Entry Type;
                                                   OptionCaptionML=ENU=Entries,Budget Entries;
                                                   OptionString=Entries,"Budget Entries" }
    { 7   ;   ;Amount Type         ;Option        ;CaptionML=ENU=Amount Type;
                                                   OptionCaptionML=ENU=Net Amount,Debit Amount,Credit Amount;
                                                   OptionString="Net Amount","Debit Amount","Credit Amount" }
    { 8   ;   ;Formula             ;Code80        ;OnValidate=VAR
                                                                TempAccSchedLine@1000 : TEMPORARY Record "Acc. Schedule Line";
                                                              BEGIN
                                                                TempAccSchedLine.CheckFormula(Formula);
                                                              END;

                                                   CaptionML=ENU=Formula }
    { 9   ;   ;Comparison Date Formula;DateFormula;OnValidate=BEGIN
                                                                if FORMAT("Comparison Date Formula") <> '' then
                                                                  VALIDATE("Comparison Period Formula",'');
                                                              END;

                                                   CaptionML=ENU=Comparison Date Formula }
    { 10  ;   ;Show Opposite Sign  ;Boolean       ;CaptionML=ENU=Show Opposite Sign }
    { 11  ;   ;Show                ;Option        ;InitValue=Always;
                                                   CaptionML=ENU=Show;
                                                   OptionCaptionML=ENU=Always,Never,When Positive,When Negative;
                                                   OptionString=Always,Never,"When Positive","When Negative";
                                                   NotBlank=true }
    { 12  ;   ;Rounding Factor     ;Option        ;CaptionML=ENU=Rounding Factor;
                                                   OptionCaptionML=ENU=None,1,1000,1000000;
                                                   OptionString=None,"1","1000","1000000" }
    { 13  ;   ;Show Indented Lines ;Option        ;CaptionML=ENU=Show Indented Lines;
                                                   OptionCaptionML=ENU=All,Indented Only,Non-Indented Only;
                                                   OptionString=All,"Indented Only","Non-Indented Only" }
    { 14  ;   ;Comparison Period Formula;Code20   ;OnValidate=VAR
                                                                Steps@1000 : Integer;
                                                                RangeFromInt@1002 : Integer;
                                                                RangeToInt@1003 : Integer;
                                                                Type@1004 : '" ",Period,"Fiscal year","Fiscal Halfyear","Fiscal Quarter"';
                                                                RangeFromType@1006 : 'Int,CP,LP';
                                                                RangeToType@1007 : 'Int,CP,LP';
                                                              BEGIN
                                                                ParsePeriodFormula(
                                                                  "Comparison Period Formula",
                                                                  Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);
                                                                if "Comparison Period Formula" <> '' then
                                                                  CLEAR("Comparison Date Formula");
                                                              END;

                                                   CaptionML=ENU=Comparison Period Formula }
    { 15  ;   ;Business Unit Totaling;Text80      ;TableRelation="Business Unit";
                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=Business Unit Totaling }
    { 16  ;   ;Dimension 1 Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData Dimension=R;
                                                   CaptionML=ENU=Dimension 1 Totaling;
                                                   CaptionClass=GetCaptionClass(5) }
    { 17  ;   ;Dimension 2 Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData Dimension=R;
                                                   CaptionML=ENU=Dimension 2 Totaling;
                                                   CaptionClass=GetCaptionClass(6) }
    { 18  ;   ;Dimension 3 Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData "Dimension Combination"=R;
                                                   CaptionML=ENU=Dimension 3 Totaling;
                                                   CaptionClass=GetCaptionClass(7) }
    { 19  ;   ;Dimension 4 Totaling;Text80        ;ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   AccessByPermission=TableData "Dimension Combination"=R;
                                                   CaptionML=ENU=Dimension 4 Totaling;
                                                   CaptionClass=GetCaptionClass(8) }
    { 20  ;   ;Cost Center Totaling;Text80        ;CaptionML=ENU=Cost Center Totaling }
    { 21  ;   ;Cost Object Totaling;Text80        ;CaptionML=ENU=Cost Object Totaling }
  }
  KEYS
  {
    {    ;"Column Layout Name","Line No."         ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1003 : TextConst 'ENU=%1 is not a valid Period Formula';
      Text002@1002 : TextConst '@@@=Period;ENU=P';
      Text003@1001 : TextConst '@@@=Fiscal year;ENU=FY';
      Text004@1005 : TextConst '@@@=Current Period;ENU=CP';
      Text005@1004 : TextConst '@@@=Last period;ENU=LP';
      Text006@1014 : TextConst 'ENU=1,6,,Dimension 1 Filter';
      Text007@1013 : TextConst 'ENU=1,6,,Dimension 2 Filter';
      Text008@1012 : TextConst 'ENU=1,6,,Dimension 3 Filter';
      Text009@1011 : TextConst 'ENU=1,6,,Dimension 4 Filter';
      Text010@1010 : TextConst 'ENU=,, Totaling';
      Text011@1009 : TextConst 'ENU=1,5,,Dimension 1 Totaling';
      Text012@1008 : TextConst 'ENU=1,5,,Dimension 2 Totaling';
      Text013@1007 : TextConst 'ENU=1,5,,Dimension 3 Totaling';
      Text014@1006 : TextConst 'ENU=1,5,,Dimension 4 Totaling';
      Text015@1015 : TextConst 'ENU=The %1 refers to %2 %3, which does not exist. The field %4 on table %5 has now been deleted.';
      ColumnLayoutName@1016 : Record "Column Layout Name";
      AnalysisView@1017 : Record "Analysis View";
      GLSetup@1018 : Record "General Ledger Setup";
      HasGLSetup@1019 : Boolean;

    [External]
    PROCEDURE ParsePeriodFormula@26(Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : '" ",Period,"Fiscal Year"';VAR RangeFromType@1009 : 'Int,CP,LP';VAR RangeToType@1008 : 'Int,CP,LP';VAR RangeFromInt@1003 : Integer;VAR RangeToInt@1000 : Integer);
    VAR
      OriginalFormula@1004 : Code[20];
    BEGIN
      // <PeriodFormula> ::= <signed integer> <formula> | blank
      // <signed integer> ::= <sign> <positive integer> | blank
      // <sign> ::= + | - | blank
      // <positive integer> ::= <digit 1-9> <digits>
      // <digit 1-9> ::= 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
      // <digits> ::= 0 <digits> | <digit 1-9> <digits> | blank
      // <formula> ::= P | FY <range> | FH <range> | FQ <range>
      // <range> ::= blank | [<range2>]
      // <range2> ::= <index> .. <index> | <index>
      // <index> ::= <positive integer> | CP | LP

      OriginalFormula := Formula;
      Formula := DELCHR(Formula);

      if not ParseFormula(Formula,Steps,Type) then
        ERROR(Text001,OriginalFormula);

      if Type = Type::"Fiscal Year" then
        if not ParseRange(Formula,RangeFromType,RangeFromInt,RangeToType,RangeToInt) then
          ERROR(Text001,OriginalFormula);

      if Formula <> '' then
        ERROR(Text001,OriginalFormula);
    END;

    LOCAL PROCEDURE ParseFormula@5(VAR Formula@1002 : Code[20];VAR Steps@1001 : Integer;VAR Type@1006 : '" ",Period,"Fiscal year","Fiscal Halfyear","Fiscal Quarter"') : Boolean;
    BEGIN
      Steps := 0;
      Type := Type::" ";

      if Formula = '' then
        exit(true);

      if not ParseSignedInteger(Formula,Steps) then
        exit(false);

      if Formula = '' then
        exit(false);

      if not ParseType(Formula,Type) then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE ParseSignedInteger@1(VAR Formula@1000 : Code[20];VAR Int@1001 : Integer) : Boolean;
    BEGIN
      Int := 0;

      case COPYSTR(Formula,1,1) of
        '-':
          begin
            Formula := COPYSTR(Formula,2);
            if not ParseInt(Formula,Int,false) then
              exit(false);
            Int := -Int;
          end;
        '+':
          begin
            Formula := COPYSTR(Formula,2);
            if not ParseInt(Formula,Int,false) then
              exit(false);
          end;
        else begin
          if not ParseInt(Formula,Int,true) then
            exit(false);
        end;
      end;
      exit(true);
    END;

    LOCAL PROCEDURE ParseInt@2(VAR Formula@1001 : Code[20];VAR Int@1000 : Integer;AllowNotInt@1003 : Boolean) : Boolean;
    VAR
      IntegerStr@1002 : Code[20];
    BEGIN
      if COPYSTR(Formula,1,1) in ['1'..'9'] then
        repeat
          IntegerStr := IntegerStr + COPYSTR(Formula,1,1);
          Formula := COPYSTR(Formula,2);
          if Formula = '' then
            exit(false);
        until not (COPYSTR(Formula,1,1) in ['0'..'9'])
      else
        exit(AllowNotInt);
      EVALUATE(Int,IntegerStr);
      exit(true);
    END;

    LOCAL PROCEDURE ParseType@3(VAR Formula@1001 : Code[20];VAR Type@1000 : '" ",Period,"Fiscal Year"') : Boolean;
    BEGIN
      case ReadToken(Formula) of
        Text002:
          Type := Type::Period;
        Text003:
          Type := Type::"Fiscal Year";
        else
          exit(false);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE ParseRange@6(VAR Formula@1002 : Code[20];VAR FromType@1001 : 'Int,CP,LP';VAR FromInt@1004 : Integer;VAR ToType@1006 : 'Int,CP,LP';VAR ToInt@1005 : Integer) : Boolean;
    BEGIN
      FromType := FromType::CP;
      ToType := ToType::CP;

      if Formula = '' then
        exit(true);

      if not ParseToken(Formula,'[') then
        exit(false);

      if not ParseIndex(Formula,FromType,FromInt) then
        exit(false);
      if Formula = '' then
        exit(false);

      if COPYSTR(Formula,1,1) = '.' then begin
        if not ParseToken(Formula,'..') then
          exit(false);
        if not ParseIndex(Formula,ToType,ToInt) then
          exit(false);
      end else begin
        ToType := FromType;
        ToInt := FromInt;
      end;

      if not ParseToken(Formula,']') then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE ParseIndex@11(VAR Formula@1002 : Code[20];VAR IndexType@1001 : 'Int,CP,LP';VAR Index@1004 : Integer) : Boolean;
    BEGIN
      if Formula = '' then
        exit(false);

      if ParseInt(Formula,Index,false) then
        IndexType := IndexType::Int
      else
        case ReadToken(Formula) of
          Text004:
            IndexType := IndexType::CP;
          Text005:
            IndexType := IndexType::LP;
          else
            exit(false);
        end;

      exit(true);
    END;

    LOCAL PROCEDURE ParseToken@13(VAR Formula@1000 : Code[20];Token@1001 : Code[20]) : Boolean;
    BEGIN
      if COPYSTR(Formula,1,STRLEN(Token)) <> Token then
        exit(false);
      Formula := COPYSTR(Formula,STRLEN(Token) + 1);
      exit(true)
    END;

    LOCAL PROCEDURE ReadToken@7(VAR Formula@1000 : Code[20]) : Code[20];
    VAR
      Token@1001 : Code[20];
      p@1002 : Integer;
    BEGIN
      for p := 1 to STRLEN(Formula) do begin
        if COPYSTR(Formula,p,1) in ['[',']','.'] then begin
          Formula := COPYSTR(Formula,STRLEN(Token) + 1);
          exit(Token);
        end;
        Token := Token + COPYSTR(Formula,p,1);
      end;

      Formula := '';
      exit(Token);
    END;

    [Internal]
    PROCEDURE LookUpDimFilter@57(DimNo@1000 : Integer;VAR Text@1001 : Text[250]) : Boolean;
    VAR
      DimVal@1002 : Record "Dimension Value";
      CostAccSetup@1004 : Record "Cost Accounting Setup";
      DimValList@1003 : Page "Dimension Value List";
    BEGIN
      GetColLayoutSetup;
      if CostAccSetup.GET then;
      case DimNo of
        1:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 1 Code");
        2:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 2 Code");
        3:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 3 Code");
        4:
          DimVal.SETRANGE("Dimension Code",AnalysisView."Dimension 4 Code");
        5:
          DimVal.SETRANGE("Dimension Code",CostAccSetup."Cost Center Dimension");
        6:
          DimVal.SETRANGE("Dimension Code",CostAccSetup."Cost Object Dimension");
      end;
      DimValList.LOOKUPMODE(true);
      DimValList.SETTABLEVIEW(DimVal);
      if DimValList.RUNMODAL = ACTION::LookupOK then begin
        DimValList.GETRECORD(DimVal);
        Text := DimValList.GetSelectionFilter;
        exit(true);
      end;
      exit(false)
    END;

    LOCAL PROCEDURE GetCaptionClass@4(AnalysisViewDimType@1000 : Integer) : Text[250];
    BEGIN
      GetColLayoutSetup;
      case AnalysisViewDimType of
        1:
          begin
            if AnalysisView."Dimension 1 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 1 Code");

            exit(Text006);
          end;
        2:
          begin
            if AnalysisView."Dimension 2 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 2 Code");

            exit(Text007);
          end;
        3:
          begin
            if AnalysisView."Dimension 3 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 3 Code");

            exit(Text008);
          end;
        4:
          begin
            if AnalysisView."Dimension 4 Code" <> '' then
              exit('1,6,' + AnalysisView."Dimension 4 Code");

            exit(Text009);
          end;
        5:
          begin
            if AnalysisView."Dimension 1 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 1 Code" + Text010);

            exit(Text011);
          end;
        6:
          begin
            if AnalysisView."Dimension 2 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 2 Code" + Text010);

            exit(Text012);
          end;
        7:
          begin
            if AnalysisView."Dimension 3 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 3 Code" + Text010);

            exit(Text013);
          end;
        8:
          begin
            if AnalysisView."Dimension 4 Code" <> '' then
              exit('1,5,' + AnalysisView."Dimension 4 Code" + Text010);

            exit(Text014);
          end;
      end;
    END;

    LOCAL PROCEDURE GetColLayoutSetup@8();
    BEGIN
      if "Column Layout Name" <> ColumnLayoutName.Name then
        ColumnLayoutName.GET("Column Layout Name");
      if ColumnLayoutName."Analysis View Name" <> '' then
        if ColumnLayoutName."Analysis View Name" <> AnalysisView.Code then
          if not AnalysisView.GET(ColumnLayoutName."Analysis View Name") then begin
            MESSAGE(
              Text015,
              ColumnLayoutName.TABLECAPTION,AnalysisView.TABLECAPTION,ColumnLayoutName."Analysis View Name",
              ColumnLayoutName.FIELDCAPTION("Analysis View Name"),ColumnLayoutName.TABLECAPTION);
            ColumnLayoutName."Analysis View Name" := '';
            ColumnLayoutName.MODIFY;
          end;

      if ColumnLayoutName."Analysis View Name" = '' then begin
        if not HasGLSetup then begin
          GLSetup.GET;
          HasGLSetup := true;
        end;
        CLEAR(AnalysisView);
        AnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        AnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      end;
    END;

    [External]
    PROCEDURE GetPeriodName@9() : Code[10];
    BEGIN
      exit(Text002);
    END;

    BEGIN
    END.
  }
}

