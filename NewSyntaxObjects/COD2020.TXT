OBJECT Codeunit 2020 Image Analysis Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      HttpMessageHandler@1001 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpMessageHandler";
      Key@1002 : Text;
      Uri@1008 : Text;
      LimitType@1011 : 'Year,Month,Day,Hour';
      LimitValue@1012 : Integer;
      ImagePath@1003 : Text;
      SetMediaErr@1004 : TextConst 'ENU=There was a problem uploading the image file. Please try again.';
      CognitiveServicesErr@1005 : TextConst '@@@=%1: Error returned from called API. %2: HTTP status code of error;ENU=Could not contact the %1. %2 Status code: %3.';
      NoApiKeyUriErr@1006 : TextConst 'ENU=To analyze images, you must provide an API key and an API URI for Computer Vision.';
      NoImageErr@1007 : TextConst 'ENU=You haven''t uploaded an image to analyze.';
      LastError@1000 : Text;
      IsLastErrorUsageLimitError@1010 : Boolean;
      GenericErrorErr@1009 : TextConst 'ENU=There was an error in contacting the Computer Vision API. Please try again or contact an administrator.';
      ComputerVisionApiTxt@1013 : TextConst 'ENU=Computer Vision API';
      CustomVisionServiceTxt@1014 : TextConst 'ENU=Custom Vision Service';

    [External]
    PROCEDURE Initialize@1();
    VAR
      ImageAnalysisSetup@1000 : Record "Image Analysis Setup";
      AzureKeyVaultManagement@1002 : Codeunit "Azure Key Vault Management";
    BEGIN
      if not ImageAnalysisSetup.GET then begin
        ImageAnalysisSetup.INIT;
        ImageAnalysisSetup.INSERT;
      end;

      Key := ImageAnalysisSetup.GetApiKey;
      Uri := ImageAnalysisSetup."Api Uri";
      LimitType := ImageAnalysisSetup."Limit type";
      LimitValue := ImageAnalysisSetup."Limit value";

      if (Key = '') or (Uri = '') then
        AzureKeyVaultManagement.GetImageAnalysisCredentials(Key,Uri,LimitType,LimitValue);
    END;

    [External]
    PROCEDURE SetMedia@6(MediaId@1000 : GUID);
    VAR
      TenantMedia@1001 : Record "Tenant Media";
      FileManagement@1002 : Codeunit "File Management";
    BEGIN
      if TenantMedia.GET(MediaId) then begin
        ImagePath := FileManagement.ServerTempFileName('');
        TenantMedia.CALCFIELDS(Content);
        TenantMedia.Content.EXPORT(ImagePath);
      end else
        ERROR(SetMediaErr);
    END;

    [External]
    PROCEDURE SetImagePath@8(Path@1000 : Text);
    BEGIN
      ImagePath := Path;
    END;

    [External]
    PROCEDURE SetBlob@10(TempBlob@1000 : TEMPORARY Record TempBlob);
    VAR
      FileManagement@1001 : Codeunit "File Management";
    BEGIN
      ImagePath := FileManagement.ServerTempFileName('');
      FileManagement.BLOBExportToServerFile(TempBlob,ImagePath);
    END;

    [External]
    PROCEDURE AnalyzeTags@20(VAR ImageAnalysisResult@1000 : Codeunit "Image Analysis Result") : Boolean;
    VAR
      AnalysisType@1001 : 'Tags,Faces,Color';
    BEGIN
      exit(Analyze(ImageAnalysisResult,AnalysisType::Tags));
    END;

    [External]
    PROCEDURE AnalyzeColors@19(VAR ImageAnalysisResult@1000 : Codeunit "Image Analysis Result") : Boolean;
    VAR
      AnalysisType@1001 : 'Tags,Faces,Color';
    BEGIN
      exit(Analyze(ImageAnalysisResult,AnalysisType::Color));
    END;

    [External]
    PROCEDURE AnalyzeFaces@7(VAR ImageAnalysisResult@1000 : Codeunit "Image Analysis Result") : Boolean;
    VAR
      AnalysisType@1001 : 'Tags,Faces,Color';
    BEGIN
      exit(Analyze(ImageAnalysisResult,AnalysisType::Faces));
    END;

    LOCAL PROCEDURE Analyze@12(VAR ImageAnalysisResult@1000 : Codeunit "Image Analysis Result";AnalysisType@1001 : 'Tags,Faces,Color') : Boolean;
    VAR
      ImageAnalysisSetup@1016 : Record "Image Analysis Setup";
      JSONManagement@1013 : Codeunit "JSON Management";
      UsageLimitError@1017 : Text;
    BEGIN
      SetLastError('',false);
      OnBeforeImageAnalysis;

      if (Key = '') or (Uri = '') then
        SetLastError(NoApiKeyUriErr,false)
      else
        if ImagePath = '' then
          SetLastError(NoImageErr,false)
        else
          if ImageAnalysisSetup.IsUsageLimitReached(UsageLimitError,LimitValue,LimitType) then
            SetLastError(UsageLimitError,true)
          else
            if InvokeAnalysis(JSONManagement,AnalysisType) then
              ImageAnalysisSetup.Increment(LimitType)
            else
              if LastError = '' then
                SetLastError(GenericErrorErr,false);

      ImageAnalysisResult.SetJson(JSONManagement,AnalysisType);
      OnAfterImageAnalysis(ImageAnalysisResult);

      exit(not HasError);
    END;

    [TryFunction]
    LOCAL PROCEDURE InvokeAnalysis@18(VAR JSONManagement@1000 : Codeunit "JSON Management";AnalysisType@1015 : 'Tags,Faces,Color');
    VAR
      HttpClient@1013 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpClient";
      StreamContent@1012 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.StreamContent";
      HttpResponseMessage@1011 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpResponseMessage";
      HttpRequestHeaders@1010 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpRequestHeaders";
      MediaTypeWithQualityHeaderValue@1009 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.MediaTypeWithQualityHeaderValue";
      HttpContent@1008 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpContent";
      HttpContentHeaders@1007 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpContentHeaders";
      HttpHeaderValueCollection@1006 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.Headers.HttpHeaderValueCollection`1";
      ApiUri@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      Task@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Threading.Tasks.Task`1";
      File@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      FileStream@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream";
      JsonResult@1001 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      MessageText@1014 : Text;
      PostParameters@1016 : Text;
    BEGIN
      if ISNULL(HttpMessageHandler) then
        HttpClient := HttpClient.HttpClient
      else
        HttpClient := HttpClient.HttpClient(HttpMessageHandler);

      HttpClient.BaseAddress := ApiUri.Uri(Uri);

      HttpRequestHeaders := HttpClient.DefaultRequestHeaders;
      if HasCustomVisionUri then
        HttpRequestHeaders.TryAddWithoutValidation('Prediction-Key',Key)
      else begin
        HttpRequestHeaders.TryAddWithoutValidation('Ocp-Apim-Subscription-Key',Key);
        PostParameters := STRSUBSTNO('?visualFeatures=%1',FORMAT(AnalysisType));
      end;
      HttpHeaderValueCollection := HttpRequestHeaders.Accept;
      MediaTypeWithQualityHeaderValue :=
        MediaTypeWithQualityHeaderValue.MediaTypeWithQualityHeaderValue('application/json');
      HttpHeaderValueCollection.Add(MediaTypeWithQualityHeaderValue);

      FileStream := File.OpenRead(ImagePath);
      StreamContent := StreamContent.StreamContent(FileStream);
      HttpContentHeaders := StreamContent.Headers;
      HttpContentHeaders.Add('Content-Type','application/octet-stream');

      Task := HttpClient.PostAsync(PostParameters,StreamContent);

      HttpResponseMessage := Task.Result;
      HttpContent := HttpResponseMessage.Content;
      Task := HttpContent.ReadAsStringAsync;
      JSONManagement.InitializeObject(Task.Result);

      FileStream.Dispose;
      StreamContent.Dispose;
      HttpClient.Dispose;

      if not HttpResponseMessage.IsSuccessStatusCode then begin
        JSONManagement.GetJSONObject(JsonResult);
        JSONManagement.GetStringPropertyValueFromJObjectByName(JsonResult,'message',MessageText);
        if HasCustomVisionUri then
          SetLastError(STRSUBSTNO(CognitiveServicesErr,CustomVisionServiceTxt,MessageText,HttpResponseMessage.StatusCode),false)
        else
          SetLastError(STRSUBSTNO(CognitiveServicesErr,ComputerVisionApiTxt,MessageText,HttpResponseMessage.StatusCode),false);
        ERROR('');
      end;
    END;

    PROCEDURE SetHttpMessageHandler@49(NewHttpMessageHandler@1000 : DotNet "'System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'.System.Net.Http.HttpMessageHandler");
    BEGIN
      HttpMessageHandler := NewHttpMessageHandler;
    END;

    [External]
    PROCEDURE GetLastError@2(VAR Message@1000 : Text;VAR IsUsageLimitError@1001 : Boolean) : Boolean;
    BEGIN
      Message := LastError;
      IsUsageLimitError := IsLastErrorUsageLimitError;
      exit(HasError);
    END;

    LOCAL PROCEDURE SetLastError@4(ErrorMsg@1000 : Text;IsUsageLimitError@1001 : Boolean);
    BEGIN
      LastError := ErrorMsg;
      IsLastErrorUsageLimitError := IsUsageLimitError;
    END;

    [External]
    PROCEDURE HasError@13() : Boolean;
    BEGIN
      exit(LastError <> '');
    END;

    [External]
    PROCEDURE GetLimitParams@3(VAR LimitTypeOut@1001 : 'Year,Month,Day,Hour';VAR LimitValueOut@1000 : Integer);
    BEGIN
      LimitTypeOut := LimitType;
      LimitValueOut := LimitValue;
    END;

    LOCAL PROCEDURE HasCustomVisionUri@9() : Boolean;
    BEGIN
      exit(STRPOS(Uri,'/customvision/') <> 0);
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnBeforeImageAnalysis@5();
    BEGIN
    END;

    [Integration(TRUE)]
    LOCAL PROCEDURE OnAfterImageAnalysis@15(ImageAnalysisResult@1004 : Codeunit "Image Analysis Result");
    BEGIN
    END;

    BEGIN
    END.
  }
}

