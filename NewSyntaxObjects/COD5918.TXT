OBJECT Codeunit 5918 ServOrder-Check Response Time
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    TableNo="Job Queue Entry";
    OnRun=BEGIN
            ServMgtSetup.GET;
            ServMgtSetup.TESTFIELD("First Warning Within (Hours)");
            RepairStatus.SETRANGE(Initial,true);
            if not RepairStatus.FINDFIRST then
              ERROR(Text005,RepairStatus.TABLECAPTION,RepairStatus.FIELDCAPTION(Initial));
            CLEAR(ServItemLine);
            CLEAR(ServHeader);
            ServHeader.SETCURRENTKEY(Status,"Response Date","Response Time",Priority);
            ServHeader.SETRANGE(Status,ServHeader.Status::Pending);
            if ServHeader.FINDSET then
              repeat
                CheckDate1 := WORKDATE;
                CheckTime1 := TIME;
                CalculateCheckDate(CheckDate1,CheckTime1,ServMgtSetup."First Warning Within (Hours)");
                ServItemLine.SETCURRENTKEY("Document Type","Document No.","Response Date");
                ServItemLine.SETRANGE("Document Type",ServHeader."Document Type");
                ServItemLine.SETRANGE("Document No.",ServHeader."No.");
                ServItemLine.SETFILTER("Response Date",'>%1&<=%2',0D,CheckDate1);
                ServItemLine.SETFILTER("Repair Status Code",RepairStatus.Code);
                if ServItemLine.FINDSET then begin
                  if ServHeader."Responsibility Center" <> '' then
                    RespCenter.GET(ServHeader."Responsibility Center");

                  repeat
                    WarningStatus := CheckResponseTime(ServItemLine."Response Date",ServItemLine."Response Time");
                    if WarningStatus > ServHeader."Warning Status" then
                      case WarningStatus of
                        1:
                          if RespCenter."E-Mail" <> '' then
                            SendEMail(RespCenter."E-Mail")
                          else
                            SendEMail(ServMgtSetup."Send First Warning To");
                        2:
                          if RespCenter."E-Mail" <> '' then
                            SendEMail(RespCenter."E-Mail")
                          else
                            SendEMail(ServMgtSetup."Send Second Warning To");
                        3:
                          if RespCenter."E-Mail" <> '' then
                            SendEMail(RespCenter."E-Mail")
                          else
                            SendEMail(ServMgtSetup."Send Third Warning To");
                      end;

                  until ServItemLine.NEXT = 0;
                end;
              until ServHeader.NEXT = 0
            else  // No Pending ServiceHeaders -> deactivate the job queue entry.
              SetStatus(Status::"On Hold");
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=%1. Warning Message for Service Order %2';
      Text001@1001 : TextConst 'ENU=Check the response time for service order %1';
      ServHeader@1002 : Record "Service Header";
      ServItemLine@1003 : Record "Service Item Line";
      ServMgtSetup@1004 : Record "Service Mgt. Setup";
      RespCenter@1007 : Record "Responsibility Center";
      ServHour@1008 : Record "Service Hour";
      RepairStatus@1010 : Record "Repair Status";
      WarningStatus@1006 : Integer;
      CheckDate1@1011 : Date;
      CheckDate2@1014 : Date;
      CheckDate3@1015 : Date;
      CheckTime1@1016 : Time;
      CheckTime2@1017 : Time;
      CheckTime3@1018 : Time;
      Text004@1019 : TextConst 'ENU=Email address is missing.';
      Text005@1020 : TextConst 'ENU=%1 with the field %2 selected cannot be found.';

    LOCAL PROCEDURE CheckResponseTime@1(ResponseDate@1000 : Date;ResponseTime@1001 : Time) : Integer;
    BEGIN
      if ResponseDate = 0D then
        exit(0);

      if ServMgtSetup."Third Warning Within (Hours)" <> 0 then begin
        CheckDate3 := WORKDATE;
        CheckTime3 := TIME;
        CalculateCheckDate(CheckDate3,CheckTime3,ServMgtSetup."Third Warning Within (Hours)");
        if ResponseDate < CheckDate3 then
          exit(3);
        if ResponseDate = CheckDate3 then
          if ResponseTime < CheckTime3 then
            exit(3);
      end;

      if ServMgtSetup."Second Warning Within (Hours)" <> 0 then begin
        CheckDate2 := WORKDATE;
        CheckTime2 := TIME;
        CalculateCheckDate(CheckDate2,CheckTime2,ServMgtSetup."Second Warning Within (Hours)");
        if ResponseDate < CheckDate2 then
          exit(2);
        if ResponseDate = CheckDate2 then
          if ResponseTime < CheckTime2 then
            exit(2);
      end;

      if ResponseDate < CheckDate1 then
        exit(1);
      if ResponseDate = CheckDate1 then
        if ResponseTime < CheckTime1 then
          exit(1);

      exit(0);
    END;

    LOCAL PROCEDURE SendEMail@2(SendtoAddress@1000 : Text[80]);
    VAR
      ServEmailQueue@1001 : Record "Service Email Queue";
    BEGIN
      if SendtoAddress = '' then
        ERROR(Text004);

      ServHeader."Warning Status" := WarningStatus;
      ServHeader.MODIFY;

      ServEmailQueue.INIT;
      ServEmailQueue."To Address" := SendtoAddress;
      ServEmailQueue."Copy-to Address" := '';
      ServEmailQueue."Subject Line" := STRSUBSTNO(Text000,FORMAT(WarningStatus),ServHeader."No.");
      ServEmailQueue."Body Line" := STRSUBSTNO(Text001,ServHeader."No.");
      ServEmailQueue."Attachment Filename" := '';
      ServEmailQueue."Document Type" := ServEmailQueue."Document Type"::"Service Order";
      ServEmailQueue."Document No." := ServHeader."No.";
      ServEmailQueue.Status := ServEmailQueue.Status::" ";
      ServEmailQueue.INSERT(true);
      ServEmailQueue.ScheduleInJobQueue;
    END;

    LOCAL PROCEDURE CalculateCheckDate@3(VAR CheckDate@1000 : Date;VAR CheckTime@1007 : Time;HoursAhead@1001 : Decimal);
    VAR
      CalChange@1012 : Record "Customized Calendar Change";
      ServMgtSetup@1011 : Record "Service Mgt. Setup";
      CalendarMgmt@1013 : Codeunit "Calendar Management";
      TotTime@1002 : Decimal;
      LastTotTime@1003 : Decimal;
      HoursLeft@1004 : Decimal;
      HoursOnLastDay@1005 : Decimal;
      Holiday@1006 : Boolean;
      CalendarCustomized@1014 : Boolean;
      TempDate@1008 : Date;
      TempDay@1009 : Integer;
      NewDescription@1010 : Text[50];
    BEGIN
      ServMgtSetup.GET;
      ServMgtSetup.TESTFIELD("Base Calendar Code");
      CalendarCustomized :=
        CalendarMgmt.CustomizedChangesExist(CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code");
      ServHour.RESET;
      ServHour.SETRANGE("Service Contract No.",'');
      ServHour.SETRANGE("Service Contract Type",ServHour."Service Contract Type"::" ");
      TotTime := 0;
      LastTotTime := 0;
      TempDate := CheckDate;
      HoursLeft := HoursAhead * 3600000;
      repeat
        TempDay := DATE2DWY(TempDate,1) - 1;
        HoursOnLastDay := 0;
        ServHour.SETRANGE(Day,TempDay);
        if ServHour.FINDFIRST then begin
          if ServHour."Valid on Holidays" then
            Holiday := false
          else begin
            if CalendarCustomized then
              Holiday :=
                CalendarMgmt.CheckCustomizedDateStatus(
                  CalChange."Source Type"::Service,'','',ServMgtSetup."Base Calendar Code",TempDate,NewDescription)
            else
              Holiday := CalendarMgmt.CheckDateStatus(ServMgtSetup."Base Calendar Code",TempDate,NewDescription);
          end;
          if not Holiday then begin
            if TempDate = CheckDate then begin
              if CheckTime < ServHour."Ending Time" then
                if HoursLeft > CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",CheckTime) then begin
                  TotTime := TotTime + CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",CheckTime);
                  HoursOnLastDay := CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",CheckTime);
                end else begin
                  TotTime := TotTime + HoursLeft;
                  HoursOnLastDay := HoursLeft;
                end;
            end else
              if HoursLeft > CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",ServHour."Starting Time") then begin
                TotTime := TotTime + CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",ServHour."Starting Time");
                HoursOnLastDay := CalendarMgmt.CalcTimeDelta(ServHour."Ending Time",ServHour."Starting Time");
              end else begin
                TotTime := TotTime + HoursLeft;
                HoursOnLastDay := HoursLeft;
              end;
            if LastTotTime < TotTime then begin
              HoursLeft := HoursLeft - (TotTime - LastTotTime);
              LastTotTime := TotTime;
            end;
          end;
        end;
        TempDate := TempDate + 1;
      until HoursLeft <= 0;

      if TotTime > 0 then begin
        if CheckDate = TempDate - 1 then
          CheckTime := CheckTime + HoursOnLastDay
        else
          CheckTime := ServHour."Starting Time" + HoursOnLastDay;
        CheckDate := TempDate - 1;
      end;
    END;

    BEGIN
    END.
  }
}

