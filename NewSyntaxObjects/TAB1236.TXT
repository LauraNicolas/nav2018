OBJECT Table 1236 JSON Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=JSON Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Depth               ;Integer       ;CaptionML=ENU=Depth }
    { 3   ;   ;Token type          ;Option        ;CaptionML=ENU=Token type;
                                                   OptionCaptionML=ENU=None,Start Object,Start Array,Start Constructor,Property Name,Comment,Raw,Integer,Decimal,String,Boolean,Null,Undefined,End Object,End Array,End Constructor,Date,Bytes;
                                                   OptionString=None,"Start Object","Start Array","Start Constructor","Property Name",Comment,Raw,Integer,Decimal,String,Boolean,Null,Undefined,"End Object","End Array","End Constructor",Date,Bytes }
    { 4   ;   ;Value               ;Text250       ;CaptionML=ENU=Value }
    { 5   ;   ;Value Type          ;Text50        ;CaptionML=ENU=Value Type }
    { 6   ;   ;Path                ;Text250       ;CaptionML=ENU=Path }
    { 7   ;   ;Value BLOB          ;BLOB          ;CaptionML=ENU=Value BLOB }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DevMsgNotTemporaryErr@1000 : TextConst 'ENU=This function can only be used when the record is temporary.';

    PROCEDURE ReadFromText@2(JSONText@1000 : Text);
    VAR
      JSONTextReader@1003 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.JsonTextReader";
      StringReader@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StringReader";
      TokenType@1007 : Integer;
    BEGIN
      if not ISTEMPORARY then
        ERROR(DevMsgNotTemporaryErr);
      DELETEALL;
      JSONTextReader := JSONTextReader.JsonTextReader(StringReader.StringReader(JSONText));
      if JSONTextReader.Read then
        repeat
          INIT;
          "Entry No." += 1;
          Depth := JSONTextReader.Depth;
          TokenType := JSONTextReader.TokenType;
          "Token type" := TokenType;
          if ISNULL(JSONTextReader.Value) then
            Value := ''
          else
            SetValueWithoutModifying(FORMAT(JSONTextReader.Value));
          if ISNULL(JSONTextReader.ValueType) then
            "Value Type" := ''
          else
            "Value Type" := FORMAT(JSONTextReader.ValueType);
          Path := JSONTextReader.Path;
          INSERT;
        until not JSONTextReader.Read;
    END;

    PROCEDURE FindArray@1(VAR TempJSONBuffer@1000 : TEMPORARY Record "JSON Buffer";ArrayName@1001 : Text) : Boolean;
    BEGIN
      TempJSONBuffer.COPY(Rec,true);
      TempJSONBuffer.RESET;

      TempJSONBuffer.SETRANGE(Path,AppendPathToCurrent(ArrayName));
      if not TempJSONBuffer.FINDFIRST then
        exit(false);
      TempJSONBuffer.SETFILTER(Path,AppendPathToCurrent(ArrayName) + '[*');
      TempJSONBuffer.SETRANGE(Depth,TempJSONBuffer.Depth + 1);
      TempJSONBuffer.SETFILTER("Token type",'<>%1',"Token type"::"End Object");
      exit(TempJSONBuffer.FINDSET);
    END;

    PROCEDURE GetPropertyValue@4(VAR PropertyValue@1002 : Text;PropertyName@1000 : Text) : Boolean;
    VAR
      TempJSONBuffer@1001 : TEMPORARY Record "JSON Buffer";
    BEGIN
      TempJSONBuffer.COPY(Rec,true);
      TempJSONBuffer.RESET;

      TempJSONBuffer.SETFILTER(Path,Path + '*');
      TempJSONBuffer.SETRANGE("Token type","Token type"::"Property Name");
      TempJSONBuffer.SETRANGE(Value,PropertyName);
      if not TempJSONBuffer.FINDFIRST then
        exit;
      if TempJSONBuffer.GET(TempJSONBuffer."Entry No." + 1) then begin
        PropertyValue := TempJSONBuffer.GetValue;
        exit(true);
      end;
    END;

    PROCEDURE GetBooleanPropertyValue@6(VAR BooleanValue@1002 : Boolean;PropertyName@1000 : Text) : Boolean;
    VAR
      PropertyValue@1003 : Text;
    BEGIN
      if GetPropertyValue(PropertyValue,PropertyName) then
        exit(EVALUATE(BooleanValue,PropertyValue));
    END;

    PROCEDURE GetDatePropertyValue@7(VAR DateValue@1002 : Date;PropertyName@1000 : Text) : Boolean;
    VAR
      PropertyValue@1003 : Text;
    BEGIN
      if GetPropertyValue(PropertyValue,PropertyName) then
        exit(EVALUATE(DateValue,PropertyValue));
    END;

    PROCEDURE GetDecimalPropertyValue@5(VAR DecimalValue@1002 : Decimal;PropertyName@1000 : Text) : Boolean;
    VAR
      PropertyValue@1003 : Text;
    BEGIN
      if GetPropertyValue(PropertyValue,PropertyName) then
        exit(EVALUATE(DecimalValue,PropertyValue));
    END;

    LOCAL PROCEDURE AppendPathToCurrent@3(AppendPath@1000 : Text) : Text;
    BEGIN
      if Path <> '' then
        exit(Path + '.' + AppendPath);
      exit(AppendPath)
    END;

    PROCEDURE GetValue@16() : Text;
    VAR
      TempBlob@1000 : Record TempBlob;
      CR@1001 : Text[1];
    BEGIN
      CALCFIELDS("Value BLOB");
      if not "Value BLOB".HASVALUE then
        exit(Value);
      CR[1] := 10;
      TempBlob.Blob := "Value BLOB";
      exit(TempBlob.ReadAsText(CR,TEXTENCODING::Windows));
    END;

    PROCEDURE SetValue@17(NewValue@1001 : Text);
    BEGIN
      SetValueWithoutModifying(NewValue);
      MODIFY;
    END;

    PROCEDURE SetValueWithoutModifying@12(NewValue@1001 : Text);
    VAR
      TempBlob@1000 : Record TempBlob;
    BEGIN
      CLEAR("Value BLOB");
      Value := COPYSTR(NewValue,1,MAXSTRLEN(Value));
      if STRLEN(NewValue) <= MAXSTRLEN(Value) then
        exit; // No need to store anything in the blob
      if NewValue = '' then
        exit;
      TempBlob.WriteAsText(NewValue,TEXTENCODING::Windows);
      "Value BLOB" := TempBlob.Blob;
    END;

    BEGIN
    END.
  }
}

