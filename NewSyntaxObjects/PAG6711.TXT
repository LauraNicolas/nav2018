OBJECT Page 6711 OData Setup Wizard
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Reporting Data Setup;
    SourceTable="Tenant Web Service";
    PageType=NavigatePage;
    SourceTableTemporary=true;
    OnInit=BEGIN
             CheckPermissions;
             LoadTopBanners;
             CurrentPage := 1;
             ObjectTypeLookup := "Object Type"::Page;
             "Object Type" := "Object Type"::Page;
             EditInExcelVisible;
           END;

    OnOpenPage=BEGIN
                 INSERT;
               END;

    OnQueryClosePage=BEGIN
                       if not PublishFlag then
                         if CloseAction = ACTION::OK then
                           if not CONFIRM(NAVNotSetUpQst,false) then
                             exit(false);
                     END;

    ActionList=ACTIONS
    {
      { 5       ;    ;ActionContainer;
                      Name=ActionContainer5;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      Name=AddFiltersAction;
                      CaptionML=ENU=&Add Filters;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=True;
                      Enabled=CurrentPage = 4;
                      InFooterBar=true;
                      Image=Filter;
                      OnAction=BEGIN
                                 CLEAR(ChangeFields);
                                 ChangeFields := CurrPage.ODataColSubForm.PAGE.IncludeIsChanged;
                                 if ChangeFields then begin
                                   CLEAR(TempTenantWebServiceFilter);
                                   TempTenantWebServiceFilter.DELETEALL;
                                 end;

                                 CLEAR(TempTenantWebServiceColumns);
                                 if TempTenantWebServiceColumns.FINDFIRST then
                                   TempTenantWebServiceColumns.DELETEALL;

                                 CurrPage.ODataColSubForm.PAGE.GetColumns(TempTenantWebServiceColumns);
                                 if not TempTenantWebServiceColumns.FINDFIRST then
                                   ERROR(MissingFieldsErr);
                                 GetFilterText(TempTenantWebServiceColumns)
                               END;
                                }
      { 8       ;1   ;Action    ;
                      Name=BackAction;
                      CaptionML=ENU=&Back;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=(CurrentPage > 1) AND (CurrentPage < 5);
                      InFooterBar=true;
                      Image=PreviousRecord;
                      OnAction=BEGIN
                                 CurrentPage := CurrentPage - 1;
                                 CurrPage.UPDATE;
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=NextAction;
                      CaptionML=ENU=&Next;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=(CurrentPage >= 1) AND (CurrentPage < 4);
                      InFooterBar=true;
                      Image=NextRecord;
                      OnAction=BEGIN
                                 case CurrentPage of
                                   1,2:
                                     CurrentPage := CurrentPage + 1;
                                   3:
                                     begin
                                       if (ActionType = ActionType::"Create a new data set") and (ServiceNameEdit = '') then
                                         ERROR(MissingServiceNameErr);
                                       if (ActionType = ActionType::"Create a copy of an existing data set") and
                                          ((ServiceNameEdit = '') or (ServiceNameLookup = ''))
                                       then
                                         ERROR(MissingServiceNameErr);
                                       if (ActionType = ActionType::"Edit an existing data set") and (ServiceNameLookup = '') then
                                         ERROR(MissingServiceNameErr);
                                       if "Object ID" = 0 then
                                         ERROR(MissingObjectIDErr);

                                       CurrPage.UPDATE;
                                       CurrPage.ODataColSubForm.PAGE.InitColumns(ObjectTypeLookup,"Object ID",ActionType,ServiceNameLookup,ServiceNameEdit);
                                       CurrentPage := CurrentPage + 1;
                                     end;
                                 end;

                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 25      ;1   ;Action    ;
                      Name=PublishAction;
                      CaptionML=ENU=&Publish;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=CurrentPage = 4;
                      InFooterBar=true;
                      Image=Post;
                      OnAction=BEGIN
                                 if TempTenantWebServiceColumns.FINDFIRST then
                                   TempTenantWebServiceColumns.DELETEALL;
                                 CurrPage.ODataColSubForm.PAGE.GetColumns(TempTenantWebServiceColumns);
                                 if not TempTenantWebServiceColumns.FINDFIRST then
                                   ERROR(PublishWithoutFieldsErr);
                                 CopyTempTableToConcreteTable;
                                 oDataUrl := DisplayODataUrl;
                                 AssistedSetup.SetStatus(PAGE::"OData Setup Wizard",AssistedSetup.Status::Completed);
                                 PublishFlag := true;
                                 CurrentPage := CurrentPage + 1;
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 10      ;1   ;Action    ;
                      Name=FinishAction;
                      CaptionML=ENU=&Finish;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=CurrentPage = 5;
                      InFooterBar=true;
                      Image=Approve;
                      OnAction=BEGIN
                                 CurrPage.CLOSE;
                               END;
                                }
      { 36      ;1   ;Action    ;
                      Name=CreateExcelWorkBook;
                      CaptionML=ENU=&Excel;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Visible=(ExcelVisible = TRUE);
                      Enabled=(CurrentPage = 5);
                      InFooterBar=true;
                      OnAction=VAR
                                 ODataUtility@1000 : Codeunit ODataUtility;
                               BEGIN
                                 if (ActionType = ActionType::"Create a new data set") or (ActionType = ActionType::"Create a copy of an existing data set") then
                                   ODataUtility.GenerateExcelWorkBook(ObjectTypeLookup,ServiceNameEdit,true)
                                 else
                                   ODataUtility.GenerateExcelWorkBook(ObjectTypeLookup,ServiceNameLookup,true);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;    ;Container ;
                Name=Web Service Data Wizard;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Name=Group17;
                Visible=TopBannerVisible AND NOT (CurrentPage = 5);
                Editable=False;
                GroupType=Group }

    { 18  ;2   ;Field     ;
                Name=MediaResourcesStandard;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesStandard."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 19  ;1   ;Group     ;
                Name=Group19;
                Visible=TopBannerVisible AND (CurrentPage = 5);
                Editable=False;
                GroupType=Group }

    { 20  ;2   ;Field     ;
                Name=MediaResourcesDone;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MediaResourcesDone."Media Reference";
                Editable=FALSE;
                ShowCaption=false }

    { 12  ;1   ;Group     ;
                Name=Step1;
                Visible=CurrentPage = 1;
                GroupType=Group;
                InstructionalTextML= }

    { 6   ;2   ;Group     ;
                Name=Para1.1;
                CaptionML=ENU=Welcome to Reporting Data Setup;
                GroupType=Group;
                InstructionalTextML= }

    { 7   ;3   ;Group     ;
                Name=Para1.1.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=You can create data sets that you can use for building reports in Excel, Power BI or any other reporting tool that works with an OData data source. }

    { 29  ;2   ;Group     ;
                Name=Para1.2;
                CaptionML=ENU=Let's go!;
                GroupType=Group }

    { 30  ;3   ;Group     ;
                Name=Para1.2.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=Choose Next so you can create reporting data sets. }

    { 26  ;1   ;Group     ;
                Name=Step2;
                CaptionML=ENU="";
                Visible=CurrentPage = 2;
                GroupType=Group }

    { 4   ;2   ;Group     ;
                Name=Para2.1;
                CaptionML=ENU=I want to...;
                GroupType=Group }

    { 27  ;3   ;Field     ;
                Name=ActionType;
                OptionCaptionML=ENU=Create a new data set,Create a copy of an existing data set,Edit an existing data set;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ActionType;
                OnValidate=BEGIN
                             "Object ID" := 0;
                             ClearTables;
                             ClearObjectType;
                             ClearName;
                           END;

                ImplicitType=Option;
                ShowCaption=false }

    { 22  ;1   ;Group     ;
                Name=Step3;
                Visible=CurrentPage = 3;
                GroupType=Group;
                InstructionalTextML= }

    { 33  ;2   ;Group     ;
                Name=Para3.1;
                CaptionML=ENU=Select the data you would like to use for your reports and define a name for this data set.;
                GroupType=Group;
                InstructionalTextML= }

    { 28  ;3   ;Group     ;
                Name=Group28;
                Visible=ActionType > 0;
                GroupType=Group }

    { 13  ;4   ;Field     ;
                Name=NameLookup;
                Lookup=true;
                AssistEdit=false;
                CaptionML=ENU=Name;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ServiceNameLookup;
                OnValidate=VAR
                             TenantWebService@1000 : Record "Tenant Web Service";
                           BEGIN
                             TenantWebService.SETRANGE("Service Name",ServiceNameLookup);
                             if TenantWebService.FINDFIRST then begin
                               "Service Name" := ServiceNameLookup;
                               ObjectTypeLookup := TenantWebService."Object Type";
                               "Object Type" := ObjectTypeLookup;
                               "Object ID" := TenantWebService."Object ID";
                               if ActionType = ActionType::"Create a copy of an existing data set" then begin
                                 "Service Name" := ServiceNameEdit
                               end;
                             end else
                               ERROR(UseLookupErr);
                           END;

                OnLookup=VAR
                           TenantWebService@1000 : Record "Tenant Web Service";
                           TenantWebServicesLookup@1002 : Page "Tenant Web Services Lookup";
                         BEGIN
                           TenantWebServicesLookup.LOOKUPMODE := true;
                           if TenantWebServicesLookup.RUNMODAL = ACTION::LookupOK then begin
                             TenantWebServicesLookup.GETRECORD(TenantWebService);
                             ServiceNameLookup := TenantWebService."Service Name";
                             ObjectTypeLookup := TenantWebService."Object Type";
                             "Object ID" := TenantWebService."Object ID";
                           end;
                           "Service Name" := ServiceNameLookup;
                           "Object Type" := ObjectTypeLookup;
                           "Object ID" := TenantWebService."Object ID";
                           if ActionType = ActionType::"Create a copy of an existing data set" then begin
                             "Service Name" := ServiceNameEdit
                           end;
                           ClearTables;
                         END;

                ImplicitType=Text240 }

    { 32  ;3   ;Group     ;
                Name=Group32;
                Visible=ActionType < 2;
                GroupType=Group }

    { 14  ;4   ;Field     ;
                Name=ServiceNameEdit;
                ExtendedDatatype=None;
                CaptionML=ENU=New Name;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ServiceNameEdit;
                OnValidate=VAR
                             TenantWebService@1000 : Record "Tenant Web Service";
                           BEGIN
                             "Service Name" := ServiceNameEdit;
                             if not (ActionType = ActionType::"Edit an existing data set") then begin
                               TenantWebService.SETRANGE("Service Name","Service Name");
                               if TenantWebService.FINDFIRST then
                                 ERROR(DuplicateServiceNameErr);
                             end;
                           END;

                ImplicitType=Text240 }

    { 24  ;3   ;Field     ;
                Name=ObjectTypeLookup;
                CaptionML=ENU=Data Source Type;
                OptionCaptionML=ENU=,,,,,,,,Page,Query;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ObjectTypeLookup;
                Enabled=ActionType = 0;
                OnValidate=BEGIN
                             "Object Type" := ObjectTypeLookup;
                             if "Object Type" <> xRec."Object Type" then begin
                               ClearTables;
                               "Object ID" := 0;
                             end;
                           END;

                ImplicitType=Option }

    { 11  ;3   ;Field     ;
                Name=Object ID;
                Lookup=true;
                CaptionML=ENU=Data Source Id;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Object ID";
                Enabled=ActionType = 0;
                OnValidate=VAR
                             AllObjWithCaption@1000 : Record AllObjWithCaption;
                           BEGIN
                             if ObjectTypeLookup = ObjectTypeLookup::Page then begin
                               AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Page);
                               AllObjWithCaption.SETRANGE("Object ID","Object ID");
                               if AllObjWithCaption.FINDFIRST then
                                 if AllObjWithCaption."Object Subtype" <> 'List' then
                                   ERROR(InvalidPageTypeErr);
                             end;

                             if "Object ID" <> xRec."Object ID" then
                               ClearTables;
                           END;

                OnLookup=VAR
                           AllObjWithCaption@1000 : Record AllObjWithCaption;
                           AllObjectsWithCaption@1001 : Page "All Objects with Caption";
                         BEGIN
                           if ObjectTypeLookup = "Object Type"::Page then begin
                             AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Page);
                             AllObjWithCaption.SETRANGE("Object Subtype",'List')
                           end else
                             if ObjectTypeLookup = "Object Type"::Query then
                               AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Query);

                           AllObjectsWithCaption.SETTABLEVIEW(AllObjWithCaption);

                           AllObjectsWithCaption.LOOKUPMODE := true;
                           if AllObjectsWithCaption.RUNMODAL = ACTION::LookupOK then begin
                             AllObjectsWithCaption.GETRECORD(AllObjWithCaption);
                             if not ((AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page) or
                                     (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Query))
                             then
                               ERROR(InvalidObjectTypeErr);
                             if (AllObjWithCaption."Object Type" = AllObjWithCaption."Object Type"::Page) and
                                (AllObjWithCaption."Object Subtype" <> 'List')
                             then
                               ERROR(InvalidPageTypeErr);
                             "Object ID" := AllObjWithCaption."Object ID";
                             ObjectTypeLookup := AllObjWithCaption."Object Type";

                             if "Object ID" <> xRec."Object ID" then
                               ClearTables;
                           end;
                         END;

                ImplicitType=Integer }

    { 34  ;3   ;Field     ;
                Name=ObjectName;
                CaptionML=ENU=Data Source Name;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DisplayObjectName;
                Enabled=False }

    { 2   ;1   ;Group     ;
                Name=Step4;
                CaptionML=ENU="";
                Visible=CurrentPage = 4;
                GroupType=Group }

    { 35  ;2   ;Group     ;
                Name=Para4.1;
                CaptionML=ENU=Choose the Fields to include in your data set;
                GroupType=Group;
                InstructionalTextML=ENU=Changing fields will clear previously set filters. }

    { 3   ;3   ;Part      ;
                Name=ODataColSubForm;
                CaptionML=ENU=" ";
                ApplicationArea=#Basic,#Suite;
                PagePartID="OData Column Choose SubForm";
                PartType=Page }

    { 31  ;1   ;Group     ;
                Name=Step5;
                Visible=CurrentPage = 5;
                GroupType=Group;
                InstructionalTextML= }

    { 15  ;2   ;Group     ;
                Name=Para5.1;
                CaptionML=ENU=Success!;
                GroupType=Group;
                InstructionalTextML= }

    { 23  ;3   ;Group     ;
                Name=Para5.1.1;
                CaptionML=ENU="";
                GroupType=Group;
                InstructionalTextML=ENU=Your data set has been successfully created! }

    { 21  ;3   ;Field     ;
                Name=ODataUrl;
                ExtendedDatatype=URL;
                CaptionML=ENU=OData URL;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=oDataUrl;
                Editable=False;
                ImplicitType=Text }

  }
  CODE
  {
    VAR
      MediaRepositoryStandard@1005 : Record "Media Repository";
      MediaRepositoryDone@1004 : Record "Media Repository";
      MediaResourcesStandard@1026 : Record "Media Resources";
      MediaResourcesDone@1025 : Record "Media Resources";
      TempTenantWebServiceColumns@1001 : TEMPORARY Record "Tenant Web Service Columns";
      TempTenantWebServiceFilter@1003 : TEMPORARY Record "Tenant Web Service Filter";
      AssistedSetup@1020 : Record "Assisted Setup";
      CurrentPage@1000 : Integer;
      PublishFlag@1002 : Boolean;
      TopBannerVisible@1006 : Boolean;
      MissingServiceNameErr@1007 : TextConst 'ENU=Please enter a Name for the data set.';
      MissingObjectIDErr@1008 : TextConst 'ENU=Please enter a data source for the data set.';
      DuplicateServiceNameErr@1009 : TextConst 'ENU=This name already exists.';
      ChangeFields@1015 : Boolean;
      ActionType@1011 : '"Create a new data set","Create a copy of an existing data set","Edit an existing data set"';
      ServiceNameLookup@1010 : Text[240];
      ServiceNameEdit@1012 : Text[240];
      ObjectTypeLookup@1013 : ',,,,,,,,Page,Query';
      UseLookupErr@1014 : TextConst 'ENU=Use the lookup to select existing name.';
      oDataUrl@1016 : Text;
      MissingFieldsErr@1017 : TextConst 'ENU=Please select field(s) before adding a filter.';
      InvalidPageTypeErr@1018 : TextConst 'ENU=Invalid page Id. Only pages of type List are valid.';
      InvalidObjectTypeErr@1019 : TextConst 'ENU=Only objects of type page and query are allowed.';
      NAVNotSetUpQst@1021 : TextConst 'ENU=The data set has not been set up.\Are you sure you want to exit?';
      PublishWithoutFieldsErr@1022 : TextConst 'ENU=Please select field(s) before publishing the data set.';
      PermissionsErr@1023 : TextConst 'ENU=You do not have permissions to run this wizard.';
      ExcelVisible@1024 : Boolean;

    LOCAL PROCEDURE GetFilterText@2(VAR TempTenantWebServiceColumns@1016 : TEMPORARY Record "Tenant Web Service Columns") : Boolean;
    VAR
      AllObjWithCaption@1001 : Record AllObjWithCaption;
      ODataUtility@1018 : Codeunit ODataUtility;
      FieldRef@1012 : FieldRef;
      RecRef@1011 : RecordRef;
      FilterPage@1010 : FilterPageBuilder;
      DataItemDictionary@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.Dictionary`2";
      keyValuePair@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.KeyValuePair`2";
      ColumnList@1017 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      OldTableNo@1014 : Integer;
      FieldNo@1013 : Integer;
      FilterText@1004 : Text;
      FilterTextTemp@1007 : Text;
      FilterTextSource@1009 : Text;
    BEGIN
      if TempTenantWebServiceColumns.FINDFIRST then
        DataItemDictionary := DataItemDictionary.Dictionary;
      repeat
        if OldTableNo <> TempTenantWebServiceColumns."Data Item" then begin
          AllObjWithCaption.SETRANGE("Object ID",TempTenantWebServiceColumns."Data Item");
          AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
          if AllObjWithCaption.FINDFIRST then begin
            FilterPage.ADDTABLE(AllObjWithCaption."Object Caption",TempTenantWebServiceColumns."Data Item");

            if not DataItemDictionary.ContainsKey(AllObjWithCaption."Object ID") then
              DataItemDictionary.Add(AllObjWithCaption."Object ID",AllObjWithCaption."Object Caption");
          end;
        end;

        OldTableNo := TempTenantWebServiceColumns."Data Item";
      until TempTenantWebServiceColumns.NEXT = 0;

      foreach keyValuePair in DataItemDictionary do begin
        FilterText := '';
        FilterTextTemp := '';
        TempTenantWebServiceFilter.INIT;
        TempTenantWebServiceFilter.SETRANGE(TenantWebServiceID,RECORDID);
        TempTenantWebServiceFilter.SETRANGE("Data Item",keyValuePair.Key);

        if TempTenantWebServiceFilter.FIND('-') then
          FilterTextTemp := TempTenantWebServiceFilter.GetFilter;

        if (ActionType = ActionType::"Create a copy of an existing data set") or
           (ActionType = ActionType::"Edit an existing data set")
        then
          GetSourceFilterText(keyValuePair.Key,FilterTextSource);

        if (FilterTextSource <> '') and (FilterTextTemp = '') and (not ChangeFields) then
          FilterPage.SETVIEW(keyValuePair.Value,FilterTextSource)
        else
          if FilterTextTemp <> '' then
            FilterPage.SETVIEW(keyValuePair.Value,FilterTextTemp);
      end;

      OldTableNo := 0;
      if TempTenantWebServiceColumns.FINDFIRST then
        repeat
          if OldTableNo <> TempTenantWebServiceColumns."Data Item" then begin
            ColumnList := ColumnList.List;
            TempTenantWebServiceFilter.INIT;
            TempTenantWebServiceFilter.SETRANGE("Data Item",TempTenantWebServiceColumns."Data Item");

            if TempTenantWebServiceFilter.FIND('-') then
              FilterTextTemp := TempTenantWebServiceFilter.GetFilter;

            if (ActionType = ActionType::"Create a copy of an existing data set") or
               (ActionType = ActionType::"Edit an existing data set")
            then
              GetSourceFilterText(TempTenantWebServiceColumns."Data Item",FilterTextSource);

            if (FilterTextSource <> '') and (FilterTextTemp = '') and (not ChangeFields) then
              ODataUtility.GetColumnsFromFilter(Rec,FilterTextSource,ColumnList)
            else
              if FilterTextTemp <> '' then
                ODataUtility.GetColumnsFromFilter(Rec,FilterTextTemp,ColumnList);
          end;
          OldTableNo := TempTenantWebServiceColumns."Data Item";

          FieldNo := TempTenantWebServiceColumns."Field Number";
          AllObjWithCaption.SETRANGE("Object ID",TempTenantWebServiceColumns."Data Item");
          AllObjWithCaption.SETRANGE("Object Type",AllObjWithCaption."Object Type"::Table);
          if AllObjWithCaption.FINDFIRST then begin
            CLEAR(RecRef);
            RecRef.OPEN(AllObjWithCaption."Object ID");
            FieldRef := RecRef.FIELD(FieldNo);
            if not ColumnList.Contains(FieldRef.NAME) then
              FilterPage.ADDFIELD(AllObjWithCaption."Object Caption",FieldRef);
          end;
        until TempTenantWebServiceColumns.NEXT = 0;

      if FilterPage.RUNMODAL then begin
        CLEAR(TempTenantWebServiceFilter);
        TempTenantWebServiceFilter.DELETEALL;
        foreach keyValuePair in DataItemDictionary do begin
          CLEAR(TempTenantWebServiceFilter);
          FilterText := FilterPage.GETVIEW(keyValuePair.Value,true);
          TempTenantWebServiceFilter.INIT;
          TempTenantWebServiceFilter."Data Item" := keyValuePair.Key;
          TempTenantWebServiceFilter.TenantWebServiceID := RECORDID;
          TempTenantWebServiceFilter.SetFilter(FilterText);
          repeat
            TempTenantWebServiceFilter."Entry ID" := TempTenantWebServiceFilter."Entry ID" + 1;
          until TempTenantWebServiceFilter.INSERT(true);
        end;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LoadTopBanners@1();
    BEGIN
      if MediaRepositoryStandard.GET('AssistedSetup-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE)) and
         MediaRepositoryDone.GET('AssistedSetupDone-NoText-400px.png',FORMAT(CURRENTCLIENTTYPE))
      then
        if MediaResourcesStandard.GET(MediaRepositoryStandard."Media Resources Ref") and
           MediaResourcesDone.GET(MediaRepositoryDone."Media Resources Ref")
        then
          TopBannerVisible := MediaResourcesDone."Media Reference".HASVALUE;
    END;

    LOCAL PROCEDURE DisplayODataUrl@3() : Text;
    VAR
      TenantWebService@1001 : Record "Tenant Web Service";
      ODataUtility@1004 : Codeunit ODataUtility;
      ODataServiceRootUrl@1002 : Text;
      ODataUrl@1003 : Text;
      ObjectTypeParam@1000 : ',,,,,,,,Page,Query';
    BEGIN
      CLEAR(TenantWebService);
      TenantWebService.INIT;
      TenantWebService.VALIDATE("Object Type","Object Type");
      TenantWebService.VALIDATE("Object ID","Object ID");
      if (ActionType = ActionType::"Create a new data set") or (ActionType = ActionType::"Create a copy of an existing data set") then
        TenantWebService.VALIDATE("Service Name",ServiceNameEdit)
      else
        TenantWebService.VALIDATE("Service Name",ServiceNameLookup);

      TenantWebService.VALIDATE(Published,true);
      if "Object Type" = "Object Type"::Query then begin
        ODataServiceRootUrl := GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Query,"Object ID",TenantWebService);
        ODataUrl := ODataUtility.GenerateODataV4Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Query);
        exit(ODataUrl);
      end;
      if "Object Type" = "Object Type"::Page then begin
        ODataServiceRootUrl := GETURL(CLIENTTYPE::ODataV4,COMPANYNAME,OBJECTTYPE::Page,"Object ID",TenantWebService);
        ODataUrl := ODataUtility.GenerateODataV4Url(ODataServiceRootUrl,TenantWebService."Service Name",ObjectTypeParam::Page);
        exit(ODataUrl);
      end;
    END;

    LOCAL PROCEDURE CopyTempTableToConcreteTable@5();
    VAR
      TenantWebServiceColumns@1002 : Record "Tenant Web Service Columns";
      TenantWebServiceFilter@1001 : Record "Tenant Web Service Filter";
      TenantWebService@1000 : Record "Tenant Web Service";
      TenantWebServiceOData@1003 : Record "Tenant Web Service OData";
      SourceTenantWebServiceFilter@1007 : Record "Tenant Web Service Filter";
      SourceTenantWebService@1008 : Record "Tenant Web Service";
      ODataUtility@1004 : Codeunit ODataUtility;
      SelectText@1005 : Text;
      ODataV3FilterText@1006 : Text;
      ODataV4FilterText@1009 : Text;
    BEGIN
      TenantWebService.INIT;
      TenantWebService.VALIDATE("Object Type",ObjectTypeLookup);
      TenantWebService.VALIDATE("Object ID","Object ID");
      TenantWebService.VALIDATE(Published,true);
      if (ActionType = ActionType::"Create a new data set") or
         (ActionType = ActionType::"Create a copy of an existing data set")
      then begin
        TenantWebService.VALIDATE("Service Name",ServiceNameEdit);
        TenantWebService.INSERT(true)
      end else begin
        TenantWebService.VALIDATE("Service Name",ServiceNameLookup);
        TenantWebService.MODIFY(true);
      end;

      if TempTenantWebServiceColumns.FINDFIRST then begin
        if ActionType = ActionType::"Edit an existing data set" then begin
          TenantWebServiceColumns.INIT;
          TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
          TenantWebServiceColumns.DELETEALL;
        end;

        repeat
          TenantWebServiceColumns.TRANSFERFIELDS(TempTenantWebServiceColumns,true);
          TenantWebServiceColumns."Entry ID" := 0;
          TenantWebServiceColumns.TenantWebServiceID := TenantWebService.RECORDID;
          TenantWebServiceColumns.INSERT(true);
        until TempTenantWebServiceColumns.NEXT = 0;
      end;

      if TempTenantWebServiceFilter.FIND('-') then begin
        if ActionType = ActionType::"Edit an existing data set" then begin
          TenantWebServiceFilter.INIT;
          TenantWebServiceFilter.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
          TenantWebServiceFilter.DELETEALL;
        end;
        repeat
          TempTenantWebServiceFilter.CALCFIELDS(Filter);
          TenantWebServiceFilter.TRANSFERFIELDS(TempTenantWebServiceFilter,true);
          TenantWebServiceFilter."Entry ID" := 0;

          TenantWebServiceFilter.TenantWebServiceID := TenantWebService.RECORDID;

          TenantWebServiceFilter.INSERT(true);
        until TempTenantWebServiceFilter.NEXT = 0;
      end else
        if ActionType = ActionType::"Create a copy of an existing data set" then
          if SourceTenantWebService.GET(ObjectTypeLookup,ServiceNameLookup) then begin
            SourceTenantWebServiceFilter.SETRANGE(TenantWebServiceID,SourceTenantWebService.RECORDID);
            if SourceTenantWebServiceFilter.FINDSET then
              repeat
                SourceTenantWebServiceFilter.CALCFIELDS(Filter);
                TenantWebServiceFilter.TRANSFERFIELDS(SourceTenantWebServiceFilter,true);
                TenantWebServiceFilter."Entry ID" := 0;

                TenantWebServiceFilter.TenantWebServiceID := TenantWebService.RECORDID;

                TenantWebServiceFilter.INSERT(true);
              until SourceTenantWebServiceFilter.NEXT = 0;
          end;

      if (ActionType = ActionType::"Create a new data set") or
         (ActionType = ActionType::"Create a copy of an existing data set")
      then begin
        TenantWebServiceOData.VALIDATE(TenantWebServiceID,TenantWebService.RECORDID);
        ODataUtility.GenerateSelectText(ServiceNameEdit,ObjectTypeLookup,SelectText);
        ODataUtility.GenerateODataV3FilterText(ServiceNameEdit,ObjectTypeLookup,ODataV3FilterText);
        ODataUtility.GenerateODataV4FilterText(ServiceNameEdit,ObjectTypeLookup,ODataV4FilterText);
        TenantWebServiceOData.SetOdataSelectClause(SelectText);
        TenantWebServiceOData.SetOdataFilterClause(ODataV3FilterText);
        TenantWebServiceOData.SetOdataV4FilterClause(ODataV4FilterText);
        TenantWebServiceOData.INSERT(true)
      end else begin
        TenantWebServiceOData.VALIDATE(TenantWebServiceID,TenantWebService.RECORDID);
        ODataUtility.GenerateSelectText(ServiceNameLookup,ObjectTypeLookup,SelectText);
        ODataUtility.GenerateODataV3FilterText(ServiceNameLookup,ObjectTypeLookup,ODataV3FilterText);
        ODataUtility.GenerateODataV4FilterText(ServiceNameLookup,ObjectTypeLookup,ODataV4FilterText);
        TenantWebServiceOData.SetOdataSelectClause(SelectText);
        TenantWebServiceOData.SetOdataFilterClause(ODataV3FilterText);
        TenantWebServiceOData.SetOdataV4FilterClause(ODataV4FilterText);
        TenantWebServiceOData.MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE GetSourceFilterText@4(DataItem@1000 : Integer;VAR FilterTextParam@1003 : Text);
    VAR
      TenantWebService@1001 : Record "Tenant Web Service";
      TenantWebServiceFilter@1002 : Record "Tenant Web Service Filter";
    BEGIN
      TenantWebService.INIT;
      TenantWebService.SETRANGE("Object Type","Object Type");

      if ActionType = ActionType::"Create a copy of an existing data set" then
        TenantWebService.SETRANGE("Service Name",ServiceNameLookup)
      else
        TenantWebService.SETRANGE("Service Name","Service Name");

      if TenantWebService.FINDFIRST then begin
        TenantWebServiceFilter.INIT;
        TenantWebServiceFilter.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
        TenantWebServiceFilter.SETRANGE("Data Item",DataItem);
        if TenantWebServiceFilter.FINDFIRST then
          FilterTextParam := TenantWebServiceFilter.GetFilter;
      end;
    END;

    LOCAL PROCEDURE ClearTables@12();
    BEGIN
      CurrPage.ODataColSubForm.PAGE.DeleteColumns;
      TempTenantWebServiceColumns.DELETEALL;
      TempTenantWebServiceFilter.DELETEALL;
    END;

    LOCAL PROCEDURE ClearObjectType@16();
    BEGIN
      "Object Type" := "Object Type"::Page;
      ObjectTypeLookup := ObjectTypeLookup::Page;
    END;

    LOCAL PROCEDURE ClearName@18();
    BEGIN
      "Service Name" := '';
      ServiceNameEdit := '';
      CLEAR(ServiceNameLookup);
    END;

    LOCAL PROCEDURE DisplayObjectName@6() : Text;
    VAR
      AllObjWithCaption@1000 : Record AllObjWithCaption;
    BEGIN
      AllObjWithCaption.SETRANGE("Object Type","Object Type");
      AllObjWithCaption.SETRANGE("Object ID","Object ID");
      if AllObjWithCaption.FINDFIRST then
        exit(AllObjWithCaption."Object Name");
    END;

    LOCAL PROCEDURE CheckPermissions@7();
    VAR
      TenantWebService@1000 : Record "Tenant Web Service";
      TenantWebServiceOData@1001 : Record "Tenant Web Service OData";
      TenantWebServiceColumns@1002 : Record "Tenant Web Service Columns";
      TenantWebServiceFilter@1003 : Record "Tenant Web Service Filter";
    BEGIN
      if not TenantWebService.WRITEPERMISSION then
        ERROR(PermissionsErr);

      if not TenantWebService.READPERMISSION then
        ERROR(PermissionsErr);

      if not TempTenantWebServiceColumns.WRITEPERMISSION then
        ERROR(PermissionsErr);

      if not TenantWebServiceColumns.READPERMISSION then
        ERROR(PermissionsErr);

      if not TenantWebServiceFilter.WRITEPERMISSION then
        ERROR(PermissionsErr);

      if not TenantWebServiceFilter.READPERMISSION then
        ERROR(PermissionsErr);

      if not TenantWebServiceOData.WRITEPERMISSION then
        ERROR(PermissionsErr);

      if not TenantWebServiceOData.READPERMISSION then
        ERROR(PermissionsErr);
    END;

    [External]
    PROCEDURE EditInExcelVisible@8();
    BEGIN
      if CURRENTCLIENTTYPE = CLIENTTYPE::Web then
        ExcelVisible := true;
    END;

    BEGIN
    END.
  }
}

