OBJECT Table 17 G/L Entry
{
  OBJECT-PROPERTIES
  {
    Date=20161212D;
    Time=120000T;
    Version List=NAVW111.0,GLSN10.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified DateTime" := CURRENTDATETIME;
             END;

    OnModify=BEGIN
               "Last Modified DateTime" := CURRENTDATETIME;
             END;

    OnRename=BEGIN
               "Last Modified DateTime" := CURRENTDATETIME;
             END;

    CaptionML=ENU=G/L Entry;
    LookupPageID="General Ledger Entries";
    DrillDownPageID="General Ledger Entries";
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 3   ;   ;G/L Account No.     ;Code20        ;TableRelation="G/L Account";
                                                   OnValidate=BEGIN
                                                                UpdateAccountID;
                                                              END;

                                                   CaptionML=ENU=G/L Account No. }
    { 4   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date;
                                                   ClosingDates=true }
    { 5   ;   ;Document Type       ;Option        ;CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=" ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund";
                                                   OptionString=" ",Payment,Invoice,"Credit Memo","Finance Charge Memo",Reminder,Refund }
    { 6   ;   ;Document No.        ;Code20        ;OnLookup=VAR
                                                              IncomingDocument@1000 : Record "Incoming Document";
                                                            BEGIN
                                                              IncomingDocument.HyperlinkToDocument("Document No.","Posting Date");
                                                            END;

                                                   CaptionML=ENU=Document No. }
    { 7   ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 10  ;   ;Bal. Account No.    ;Code20        ;TableRelation=IF ("Bal. Account Type"=CONST("G/L Account")) "G/L Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Bal. Account Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Bal. Account Type"=CONST("Bank Account")) "Bank Account"
                                                                 ELSE IF ("Bal. Account Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                 ELSE IF ("Bal. Account Type"=CONST("IC Partner")) "IC Partner"
                                                                 ELSE IF ("Bal. Account Type"=CONST(Employee)) Employee;
                                                   CaptionML=ENU=Bal. Account No. }
    { 17  ;   ;Amount              ;Decimal       ;CaptionML=ENU=Amount;
                                                   AutoFormatType=1 }
    { 23  ;   ;Global Dimension 1 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   CaptionML=ENU=Global Dimension 1 Code;
                                                   CaptionClass='1,1,1' }
    { 24  ;   ;Global Dimension 2 Code;Code20     ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   CaptionML=ENU=Global Dimension 2 Code;
                                                   CaptionClass='1,1,2' }
    { 27  ;   ;User ID             ;Code50        ;TableRelation=User."User Name";
                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit "User Management";
                                                            BEGIN
                                                              UserMgt.LookupUserID("User ID");
                                                            END;

                                                   ValidateTableRelation=false;
                                                   TestTableRelation=false;
                                                   CaptionML=ENU=User ID }
    { 28  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=ENU=Source Code }
    { 29  ;   ;System-Created Entry;Boolean       ;CaptionML=ENU=System-Created Entry }
    { 30  ;   ;Prior-Year Entry    ;Boolean       ;CaptionML=ENU=Prior-Year Entry }
    { 41  ;   ;Job No.             ;Code20        ;TableRelation=Job;
                                                   CaptionML=ENU=Job No. }
    { 42  ;   ;Quantity            ;Decimal       ;CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;VAT Amount          ;Decimal       ;CaptionML=ENU=VAT Amount;
                                                   AutoFormatType=1 }
    { 45  ;   ;Business Unit Code  ;Code20        ;TableRelation="Business Unit";
                                                   CaptionML=ENU=Business Unit Code }
    { 46  ;   ;Journal Batch Name  ;Code10        ;CaptionML=ENU=Journal Batch Name }
    { 47  ;   ;Reason Code         ;Code10        ;TableRelation="Reason Code";
                                                   CaptionML=ENU=Reason Code }
    { 48  ;   ;Gen. Posting Type   ;Option        ;CaptionML=ENU=Gen. Posting Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Sale,Settlement";
                                                   OptionString=" ",Purchase,Sale,Settlement }
    { 49  ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 50  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 51  ;   ;Bal. Account Type   ;Option        ;CaptionML=ENU=Bal. Account Type;
                                                   OptionCaptionML=ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset,IC Partner,Employee;
                                                   OptionString="G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee }
    { 52  ;   ;Transaction No.     ;Integer       ;CaptionML=ENU=Transaction No. }
    { 53  ;   ;Debit Amount        ;Decimal       ;CaptionML=ENU=Debit Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 54  ;   ;Credit Amount       ;Decimal       ;CaptionML=ENU=Credit Amount;
                                                   BlankZero=true;
                                                   AutoFormatType=1 }
    { 55  ;   ;Document Date       ;Date          ;CaptionML=ENU=Document Date;
                                                   ClosingDates=true }
    { 56  ;   ;External Document No.;Code35       ;CaptionML=ENU=External Document No. }
    { 57  ;   ;Source Type         ;Option        ;CaptionML=ENU=Source Type;
                                                   OptionCaptionML=ENU=" ,Customer,Vendor,Bank Account,Fixed Asset,Employee";
                                                   OptionString=" ",Customer,Vendor,"Bank Account","Fixed Asset",Employee }
    { 58  ;   ;Source No.          ;Code20        ;TableRelation=IF ("Source Type"=CONST(Customer)) Customer
                                                                 ELSE IF ("Source Type"=CONST(Vendor)) Vendor
                                                                 ELSE IF ("Source Type"=CONST("Bank Account")) "Bank Account"
                                                                 ELSE IF ("Source Type"=CONST("Fixed Asset")) "Fixed Asset"
                                                                 ELSE IF ("Source Type"=CONST(Employee)) Employee;
                                                   CaptionML=ENU=Source No. }
    { 59  ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   CaptionML=ENU=No. Series }
    { 60  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 61  ;   ;Tax Liable          ;Boolean       ;CaptionML=ENU=Tax Liable }
    { 62  ;   ;Tax Group Code      ;Code20        ;TableRelation="Tax Group";
                                                   CaptionML=ENU=Tax Group Code }
    { 63  ;   ;Use Tax             ;Boolean       ;CaptionML=ENU=Use Tax }
    { 64  ;   ;VAT Bus. Posting Group;Code20      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=ENU=VAT Bus. Posting Group }
    { 65  ;   ;VAT Prod. Posting Group;Code20     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=ENU=VAT Prod. Posting Group }
    { 68  ;   ;Additional-Currency Amount;Decimal ;AccessByPermission=TableData Currency=R;
                                                   CaptionML=ENU=Additional-Currency Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 69  ;   ;Add.-Currency Debit Amount;Decimal ;CaptionML=ENU=Add.-Currency Debit Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 70  ;   ;Add.-Currency Credit Amount;Decimal;CaptionML=ENU=Add.-Currency Credit Amount;
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 71  ;   ;Close Income Statement Dim. ID;Integer;
                                                   CaptionML=ENU=Close Income Statement Dim. ID }
    { 72  ;   ;IC Partner Code     ;Code20        ;TableRelation="IC Partner";
                                                   CaptionML=ENU=IC Partner Code }
    { 73  ;   ;Reversed            ;Boolean       ;CaptionML=ENU=Reversed }
    { 74  ;   ;Reversed by Entry No.;Integer      ;TableRelation="G/L Entry";
                                                   CaptionML=ENU=Reversed by Entry No.;
                                                   BlankZero=true }
    { 75  ;   ;Reversed Entry No.  ;Integer       ;TableRelation="G/L Entry";
                                                   CaptionML=ENU=Reversed Entry No.;
                                                   BlankZero=true }
    { 76  ;   ;G/L Account Name    ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Account".Name WHERE ("No."=FIELD("G/L Account No.")));
                                                   CaptionML=ENU=G/L Account Name;
                                                   Editable=false }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 5400;   ;Prod. Order No.     ;Code20        ;CaptionML=ENU=Prod. Order No. }
    { 5600;   ;FA Entry Type       ;Option        ;AccessByPermission=TableData "Fixed Asset"=R;
                                                   CaptionML=ENU=FA Entry Type;
                                                   OptionCaptionML=ENU=" ,Fixed Asset,Maintenance";
                                                   OptionString=" ","Fixed Asset",Maintenance }
    { 5601;   ;FA Entry No.        ;Integer       ;TableRelation=IF ("FA Entry Type"=CONST("Fixed Asset")) "FA Ledger Entry"
                                                                 ELSE IF ("FA Entry Type"=CONST(Maintenance)) "Maintenance Ledger Entry";
                                                   CaptionML=ENU=FA Entry No.;
                                                   BlankZero=true }
    { 8001;   ;Account Id          ;GUID          ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Account".Id WHERE ("No."=FIELD("G/L Account No.")));
                                                   TableRelation="G/L Account".Id;
                                                   OnValidate=BEGIN
                                                                UpdateAccountNo;
                                                              END;

                                                   CaptionML=ENU=Account Id }
    { 8005;   ;Last Modified DateTime;DateTime    ;CaptionML=ENU=Last Modified DateTime;
                                                   Editable=false }
    { 70009200;;Source Name        ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("G/L Source Name"."Source Name" WHERE ("Source Type"=FIELD("Source Type"),
                                                                                                             "Source No."=FIELD("Source No.")));
                                                   CaptionML=ENU=Source Name;
                                                   Editable=false }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"G/L Account No.","Posting Date"        ;SumIndexFields=Amount,"Debit Amount","Credit Amount","Additional-Currency Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount" }
    {    ;"G/L Account No.","Global Dimension 1 Code","Global Dimension 2 Code","Posting Date";
                                                   SumIndexFields=Amount,"Debit Amount","Credit Amount","Additional-Currency Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount" }
    { false;"G/L Account No.","Business Unit Code","Posting Date";
                                                   SumIndexFields=Amount,"Debit Amount","Credit Amount","Additional-Currency Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount" }
    { false;"G/L Account No.","Business Unit Code","Global Dimension 1 Code","Global Dimension 2 Code","Posting Date";
                                                   SumIndexFields=Amount,"Debit Amount","Credit Amount","Additional-Currency Amount","Add.-Currency Debit Amount","Add.-Currency Credit Amount" }
    {    ;"Document No.","Posting Date"            }
    {    ;"Transaction No."                        }
    {    ;"IC Partner Code"                        }
    {    ;"G/L Account No.","Job No.","Posting Date";
                                                   SumIndexFields=Amount }
    {    ;"Posting Date","G/L Account No.","Dimension Set ID";
                                                   SumIndexFields=Amount }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;"Entry No.",Description,"G/L Account No.","Posting Date","Document Type","Document No." }
  }
  CODE
  {
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
      GLSetupRead@1002 : Boolean;

    [External]
    PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
      end;
      exit(GLSetup."Additional Reporting Currency");
    END;

    [External]
    PROCEDURE ShowValueEntries@8();
    VAR
      GLItemLedgRelation@1000 : Record "G/L - Item Ledger Relation";
      ValueEntry@1002 : Record "Value Entry";
      TempValueEntry@1001 : TEMPORARY Record "Value Entry";
    BEGIN
      GLItemLedgRelation.SETRANGE("G/L Entry No.","Entry No.");
      if GLItemLedgRelation.FINDSET then
        repeat
          ValueEntry.GET(GLItemLedgRelation."Value Entry No.");
          TempValueEntry.INIT;
          TempValueEntry := ValueEntry;
          TempValueEntry.INSERT;
        until GLItemLedgRelation.NEXT = 0;

      PAGE.RUNMODAL(0,TempValueEntry);
    END;

    [External]
    PROCEDURE ShowDimensions@2();
    VAR
      DimMgt@1000 : Codeunit DimensionManagement;
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",STRSUBSTNO('%1 %2',TABLECAPTION,"Entry No."));
    END;

    [External]
    PROCEDURE UpdateDebitCredit@3(Correction@1000 : Boolean);
    BEGIN
      if ((Amount > 0) and (not Correction)) or
         ((Amount < 0) and Correction)
      then begin
        "Debit Amount" := Amount;
        "Credit Amount" := 0
      end else begin
        "Debit Amount" := 0;
        "Credit Amount" := -Amount;
      end;

      if (("Additional-Currency Amount" > 0) and (not Correction)) or
         (("Additional-Currency Amount" < 0) and Correction)
      then begin
        "Add.-Currency Debit Amount" := "Additional-Currency Amount";
        "Add.-Currency Credit Amount" := 0
      end else begin
        "Add.-Currency Debit Amount" := 0;
        "Add.-Currency Credit Amount" := -"Additional-Currency Amount";
      end;
    END;

    [External]
    PROCEDURE CopyFromGenJnlLine@4(GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      "Posting Date" := GenJnlLine."Posting Date";
      "Document Date" := GenJnlLine."Document Date";
      "Document Type" := GenJnlLine."Document Type";
      "Document No." := GenJnlLine."Document No.";
      "External Document No." := GenJnlLine."External Document No.";
      Description := GenJnlLine.Description;
      "Business Unit Code" := GenJnlLine."Business Unit Code";
      "Global Dimension 1 Code" := GenJnlLine."Shortcut Dimension 1 Code";
      "Global Dimension 2 Code" := GenJnlLine."Shortcut Dimension 2 Code";
      "Dimension Set ID" := GenJnlLine."Dimension Set ID";
      "Source Code" := GenJnlLine."Source Code";
      if GenJnlLine."Account Type" = GenJnlLine."Account Type"::"G/L Account" then begin
        if GenJnlLine."Source Type" = GenJnlLine."Source Type"::Employee then
          "Source Type" := "Source Type"::Employee
        else
          "Source Type" := GenJnlLine."Source Type";
        "Source No." := GenJnlLine."Source No.";
      end else begin
        if GenJnlLine."Account Type" = GenJnlLine."Account Type"::Employee then
          "Source Type" := "Source Type"::Employee
        else
          "Source Type" := GenJnlLine."Account Type";
        "Source No." := GenJnlLine."Account No.";
      end;
      if (GenJnlLine."Account Type" = GenJnlLine."Account Type"::"IC Partner") or
         (GenJnlLine."Bal. Account Type" = GenJnlLine."Bal. Account Type"::"IC Partner")
      then
        "Source Type" := "Source Type"::" ";
      "Job No." := GenJnlLine."Job No.";
      Quantity := GenJnlLine.Quantity;
      "Journal Batch Name" := GenJnlLine."Journal Batch Name";
      "Reason Code" := GenJnlLine."Reason Code";
      "User ID" := USERID;
      "No. Series" := GenJnlLine."Posting No. Series";
      "IC Partner Code" := GenJnlLine."IC Partner Code";

      OnAfterCopyGLEntryFromGenJnlLine(Rec,GenJnlLine);
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromGLEntry@5(GLEntry@1000 : Record "G/L Entry");
    BEGIN
      "Gen. Posting Type" := GLEntry."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GLEntry."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GLEntry."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GLEntry."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GLEntry."VAT Prod. Posting Group";
      "Tax Area Code" := GLEntry."Tax Area Code";
      "Tax Liable" := GLEntry."Tax Liable";
      "Tax Group Code" := GLEntry."Tax Group Code";
      "Use Tax" := GLEntry."Use Tax";
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromVATEntry@96(VATEntry@1001 : Record "VAT Entry");
    BEGIN
      "Gen. Posting Type" := VATEntry.Type;
      "Gen. Bus. Posting Group" := VATEntry."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := VATEntry."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := VATEntry."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := VATEntry."VAT Prod. Posting Group";
      "Tax Area Code" := VATEntry."Tax Area Code";
      "Tax Liable" := VATEntry."Tax Liable";
      "Tax Group Code" := VATEntry."Tax Group Code";
      "Use Tax" := VATEntry."Use Tax";
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromGenJnlLine@19(GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      "Gen. Posting Type" := GenJnlLine."Gen. Posting Type";
      "Gen. Bus. Posting Group" := GenJnlLine."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := GenJnlLine."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := GenJnlLine."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := GenJnlLine."VAT Prod. Posting Group";
      "Tax Area Code" := GenJnlLine."Tax Area Code";
      "Tax Liable" := GenJnlLine."Tax Liable";
      "Tax Group Code" := GenJnlLine."Tax Group Code";
      "Use Tax" := GenJnlLine."Use Tax";
    END;

    [External]
    PROCEDURE CopyPostingGroupsFromDtldCVBuf@94(DtldCVLedgEntryBuf@1001 : Record "Detailed CV Ledg. Entry Buffer";GenPostingType@1002 : '" ",Purchase,Sale,Settlement');
    BEGIN
      "Gen. Posting Type" := GenPostingType;
      "Gen. Bus. Posting Group" := DtldCVLedgEntryBuf."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := DtldCVLedgEntryBuf."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := DtldCVLedgEntryBuf."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := DtldCVLedgEntryBuf."VAT Prod. Posting Group";
      "Tax Area Code" := DtldCVLedgEntryBuf."Tax Area Code";
      "Tax Liable" := DtldCVLedgEntryBuf."Tax Liable";
      "Tax Group Code" := DtldCVLedgEntryBuf."Tax Group Code";
      "Use Tax" := DtldCVLedgEntryBuf."Use Tax";
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterCopyGLEntryFromGenJnlLine@6(VAR GLEntry@1000 : Record "G/L Entry";VAR GenJournalLine@1001 : Record "Gen. Journal Line");
    BEGIN
    END;

    [External]
    PROCEDURE CopyFromDeferralPostBuffer@46(DeferralPostBuffer@1001 : Record "Deferral Post. Buffer");
    BEGIN
      "System-Created Entry" := DeferralPostBuffer."System-Created Entry";
      "Gen. Posting Type" := DeferralPostBuffer."Gen. Posting Type";
      "Gen. Bus. Posting Group" := DeferralPostBuffer."Gen. Bus. Posting Group";
      "Gen. Prod. Posting Group" := DeferralPostBuffer."Gen. Prod. Posting Group";
      "VAT Bus. Posting Group" := DeferralPostBuffer."VAT Bus. Posting Group";
      "VAT Prod. Posting Group" := DeferralPostBuffer."VAT Prod. Posting Group";
      "Tax Area Code" := DeferralPostBuffer."Tax Area Code";
      "Tax Liable" := DeferralPostBuffer."Tax Liable";
      "Tax Group Code" := DeferralPostBuffer."Tax Group Code";
      "Use Tax" := DeferralPostBuffer."Use Tax";
    END;

    PROCEDURE UpdateAccountID@1166();
    VAR
      GLAccount@1000 : Record "G/L Account";
    BEGIN
      if "G/L Account No." = '' then begin
        CLEAR("Account Id");
        exit;
      end;

      if not GLAccount.GET("G/L Account No.") then
        exit;

      "Account Id" := GLAccount.Id;
    END;

    LOCAL PROCEDURE UpdateAccountNo@1164();
    VAR
      GLAccount@1001 : Record "G/L Account";
    BEGIN
      if ISNULLGUID("Account Id") then
        exit;

      GLAccount.SETRANGE(Id,"Account Id");
      if not GLAccount.FINDFIRST then
        exit;

      "G/L Account No." := GLAccount."No.";
    END;

    BEGIN
    END.
  }
}

