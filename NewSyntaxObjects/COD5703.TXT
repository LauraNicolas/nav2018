OBJECT Codeunit 5703 Nonstock Item Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Item %1 already exists.';
      Text001@1001 : TextConst 'ENU=Item %1 is created.';
      Text002@1002 : TextConst 'ENU=You cannot enter a nonstock item on %1.';
      Text003@1003 : TextConst 'ENU=Creating item card for nonstock item\';
      Text004@1004 : TextConst 'ENU=Manufacturer Code    #1####\';
      Text005@1005 : TextConst 'ENU=Vendor               #2##################\';
      Text006@1006 : TextConst 'ENU=Vendor Item          #3##################\';
      Text007@1007 : TextConst 'ENU=Item No.             #4##################';
      NewItem@1008 : Record Item;
      ItemLedgEntry@1009 : Record "Item Ledger Entry";
      NonStock@1010 : Record "Nonstock Item";
      PurchLine@1012 : Record "Purchase Line";
      ItemVend@1014 : Record "Item Vendor";
      ServInvLine@1018 : Record "Service Line";
      SalesLine@1019 : Record "Sales Line";
      BOMComp@1024 : Record "BOM Component";
      ProdBOMLine@1025 : Record "Production BOM Line";
      ProdBOMHeader@1026 : Record "Production BOM Header";
      ProgWindow@1020 : Dialog;

    [External]
    PROCEDURE NonstockAutoItem@2(NonStock2@1000 : Record "Nonstock Item");
    BEGIN
      if NewItem.GET(NonStock2."Item No.") then
        ERROR(Text000,NonStock2."Item No.");

      NonStock2."Item No." :=
        GetNewItemNo(
          NonStock2,STRLEN(NonStock2."Vendor Item No."),STRLEN(NonStock2."Manufacturer Code"));
      NonStock2.MODIFY;
      InsertItemUnitOfMeasure(NonStock2."Unit of Measure",NonStock2."Item No.");

      NonStock2.TESTFIELD("Vendor No.");
      NonStock2.TESTFIELD("Vendor Item No.");
      NonStock2.TESTFIELD("Item Template Code");

      if NewItem.GET(NonStock2."Item No.") then
        ERROR(Text000,NonStock2."Item No.");

      CreateNewItem(NonStock2."Item No.",NonStock2);
      MESSAGE(Text001,NonStock2."Item No.");

      if CheckLicensePermission(DATABASE::"Item Vendor") then
        NonstockItemVend(NonStock2);
      if CheckLicensePermission(DATABASE::"Item Cross Reference") then
        NonstockItemCrossRef(NonStock2);
    END;

    LOCAL PROCEDURE NonstockItemVend@5(NonStock2@1000 : Record "Nonstock Item");
    BEGIN
      ItemVend.SETRANGE("Item No.",NonStock2."Item No.");
      ItemVend.SETRANGE("Vendor No.",NonStock2."Vendor No.");
      if ItemVend.FINDFIRST then
        exit;

      ItemVend."Item No." := NonStock2."Item No.";
      ItemVend."Vendor No." := NonStock2."Vendor No.";
      ItemVend."Vendor Item No." := NonStock2."Vendor Item No.";
      ItemVend.INSERT(true);
    END;

    LOCAL PROCEDURE NonstockItemCrossRef@7(VAR NonStock2@1000 : Record "Nonstock Item");
    VAR
      ItemCrossReference@1001 : Record "Item Cross Reference";
    BEGIN
      ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
      ItemCrossReference.SETRANGE("Unit of Measure",NonStock2."Unit of Measure");
      ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
      ItemCrossReference.SETRANGE("Cross-Reference Type No.",NonStock2."Vendor No.");
      ItemCrossReference.SETRANGE("Cross-Reference No.",NonStock2."Vendor Item No.");
      if not ItemCrossReference.FINDFIRST then begin
        ItemCrossReference.INIT;
        ItemCrossReference.VALIDATE("Item No.",NonStock2."Item No.");
        ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
        ItemCrossReference.VALIDATE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::Vendor);
        ItemCrossReference.VALIDATE("Cross-Reference Type No.",NonStock2."Vendor No.");
        ItemCrossReference.VALIDATE("Cross-Reference No.",NonStock2."Vendor Item No.");
        ItemCrossReference.INSERT;
      end;
      if NonStock2."Bar Code" <> '' then begin
        ItemCrossReference.RESET;
        ItemCrossReference.SETRANGE("Item No.",NonStock2."Item No.");
        ItemCrossReference.SETRANGE("Unit of Measure",NonStock2."Unit of Measure");
        ItemCrossReference.SETRANGE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
        ItemCrossReference.SETRANGE("Cross-Reference No.",NonStock2."Bar Code");
        if not ItemCrossReference.FINDFIRST then begin
          ItemCrossReference.INIT;
          ItemCrossReference.VALIDATE("Item No.",NonStock2."Item No.");
          ItemCrossReference.VALIDATE("Unit of Measure",NonStock2."Unit of Measure");
          ItemCrossReference.VALIDATE("Cross-Reference Type",ItemCrossReference."Cross-Reference Type"::"Bar Code");
          ItemCrossReference.VALIDATE("Cross-Reference No.",NonStock2."Bar Code");
          ItemCrossReference.INSERT;
        end;
      end;
    END;

    [External]
    PROCEDURE NonstockItemDel@8(VAR Item@1000 : Record Item);
    VAR
      ItemCrossReference@1001 : Record "Item Cross Reference";
    BEGIN
      ItemVend.SETRANGE("Item No.",Item."No.");
      ItemVend.SETRANGE("Vendor No.",Item."Vendor No.");
      ItemVend.DELETEALL;

      ItemCrossReference.SETRANGE("Item No.",Item."No.");
      ItemCrossReference.SETRANGE("Variant Code",Item."Variant Filter");
      ItemCrossReference.DELETEALL;

      NonStock.SETCURRENTKEY("Item No.");
      NonStock.SETRANGE("Item No.",Item."No.");
      if NonStock.FIND('-') then
        NonStock.MODIFYALL("Item No.",'');
    END;

    [External]
    PROCEDURE NonStockSales@1(VAR SalesLine2@1000 : Record "Sales Line");
    BEGIN
      if (SalesLine2."Document Type" in
          [SalesLine2."Document Type"::"Return Order",SalesLine2."Document Type"::"Credit Memo"])
      then
        ERROR(Text002,SalesLine2."Document Type");

      NonStock.GET(SalesLine2."No.");
      if NonStock."Item No." <> '' then begin
        SalesLine2."No." := NonStock."Item No.";
        exit;
      end;

      SalesLine2."No." :=
        GetNewItemNo(
          NonStock,STRLEN(NonStock."Vendor Item No."),STRLEN(NonStock."Manufacturer Code"));
      NonStock."Item No." := SalesLine2."No.";
      NonStock.MODIFY;
      InsertItemUnitOfMeasure(NonStock."Unit of Measure",SalesLine2."No.");

      NewItem.SETRANGE("No.",SalesLine2."No.");
      if NewItem.FINDFIRST then
        exit;

      ProgWindow.OPEN(Text003 +
        Text004 +
        Text005 +
        Text006 +
        Text007);
      ProgWindow.UPDATE(1,NonStock."Manufacturer Code");
      ProgWindow.UPDATE(2,NonStock."Vendor No.");
      ProgWindow.UPDATE(3,NonStock."Vendor Item No.");
      ProgWindow.UPDATE(4,SalesLine2."No.");

      CreateNewItem(SalesLine2."No.",NonStock);

      if CheckLicensePermission(DATABASE::"Item Vendor") then
        NonstockItemVend(NonStock);
      if CheckLicensePermission(DATABASE::"Item Cross Reference") then
        NonstockItemCrossRef(NonStock);

      ProgWindow.CLOSE;
    END;

    [External]
    PROCEDURE DelNonStockSales@28(VAR SalesLine2@1000 : Record "Sales Line");
    BEGIN
      if SalesLine2.Nonstock = false then
        exit;

      NewItem.GET(SalesLine2."No.");
      SalesLine2."No." := '';
      SalesLine2.MODIFY;

      DelNonStockItem(NewItem);
    END;

    [External]
    PROCEDURE DelNonStockPurch@4(VAR PurchLine2@1000 : Record "Purchase Line");
    BEGIN
      if PurchLine2.Nonstock = false then
        exit;

      NewItem.GET(PurchLine2."No.");
      PurchLine2."No." := '';
      PurchLine2.MODIFY;

      DelNonStockItem(NewItem);
    END;

    [External]
    PROCEDURE DelNonStockFSM@9(VAR ServInvLine2@1000 : Record "Service Line");
    BEGIN
      if ServInvLine2.Nonstock = false then
        exit;

      NewItem.GET(ServInvLine2."No.");
      ServInvLine2."No." := '';
      ServInvLine2.MODIFY;

      DelNonStockItem(NewItem);
    END;

    [External]
    PROCEDURE DelNonStockSalesArch@11(VAR SalesLineArchive2@1000 : Record "Sales Line Archive");
    BEGIN
      if NewItem.GET(SalesLineArchive2."No.") then begin
        SalesLineArchive2."No." := '';
        SalesLineArchive2.MODIFY;

        DelNonStockItem(NewItem);
      end;
    END;

    [External]
    PROCEDURE NonStockFSM@6(VAR ServInvLine2@1000 : Record "Service Line");
    BEGIN
      NonStock.GET(ServInvLine2."No.");
      if NonStock."Item No." <> '' then begin
        ServInvLine2."No." := NonStock."Item No.";
        exit;
      end;

      ServInvLine2."No." :=
        GetNewItemNo(
          NonStock,STRLEN(NonStock."Vendor Item No."),STRLEN(NonStock."Manufacturer Code"));
      NonStock."Item No." := ServInvLine2."No.";
      NonStock.MODIFY;
      InsertItemUnitOfMeasure(NonStock."Unit of Measure",ServInvLine2."No.");

      NewItem.SETRANGE("No.",ServInvLine2."No.");
      if NewItem.FINDFIRST then
        exit;

      ProgWindow.OPEN(Text003 +
        Text004 +
        Text005 +
        Text006 +
        Text007);
      ProgWindow.UPDATE(1,NonStock."Manufacturer Code");
      ProgWindow.UPDATE(2,NonStock."Vendor No.");
      ProgWindow.UPDATE(3,NonStock."Vendor Item No.");
      ProgWindow.UPDATE(4,ServInvLine2."No.");

      CreateNewItem(ServInvLine2."No.",NonStock);

      if CheckLicensePermission(DATABASE::"Item Vendor") then
        NonstockItemVend(NonStock);
      if CheckLicensePermission(DATABASE::"Item Cross Reference") then
        NonstockItemCrossRef(NonStock);

      ProgWindow.CLOSE;
    END;

    [External]
    PROCEDURE CreateItemFromNonstock@3(Nonstock2@1000 : Record "Nonstock Item");
    BEGIN
      if NewItem.GET(Nonstock2."Item No.") then
        ERROR(Text000,Nonstock2."Item No.");

      Nonstock2."Item No." :=
        GetNewItemNo(
          Nonstock2,STRLEN(Nonstock2."Vendor Item No."),STRLEN(Nonstock2."Manufacturer Code"));
      Nonstock2.MODIFY;
      InsertItemUnitOfMeasure(Nonstock2."Unit of Measure",Nonstock2."Item No.");

      Nonstock2.TESTFIELD("Vendor No.");
      Nonstock2.TESTFIELD("Vendor Item No.");
      Nonstock2.TESTFIELD("Item Template Code");

      if NewItem.GET(Nonstock2."Item No.") then
        ERROR(Text000,Nonstock2."Item No.");

      CreateNewItem(Nonstock2."Item No.",Nonstock2);

      if CheckLicensePermission(DATABASE::"Item Vendor") then
        NonstockItemVend(Nonstock2);
      if CheckLicensePermission(DATABASE::"Item Cross Reference") then
        NonstockItemCrossRef(Nonstock2);
    END;

    LOCAL PROCEDURE CheckLicensePermission@15(TableID@1000 : Integer) : Boolean;
    VAR
      LicensePermission@1001 : Record "License Permission";
    BEGIN
      LicensePermission.SETRANGE("Object Type",LicensePermission."Object Type"::TableData);
      LicensePermission.SETRANGE("Object Number",TableID);
      LicensePermission.SETFILTER("Insert Permission",'<>%1',LicensePermission."Insert Permission"::" ");
      exit(LicensePermission.FINDFIRST);
    END;

    LOCAL PROCEDURE DelNonStockItem@10(VAR Item@1000 : Record Item);
    VAR
      SalesLineArch@1002 : Record "Sales Line Archive";
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      if ItemLedgEntry.FINDFIRST then
        exit;

      SalesLine.SETCURRENTKEY(Type,"No.");
      SalesLine.SETRANGE(Type,SalesLine.Type::Item);
      SalesLine.SETRANGE("No.",Item."No.");
      if SalesLine.FINDFIRST then
        exit;

      PurchLine.SETCURRENTKEY(Type,"No.");
      PurchLine.SETRANGE(Type,PurchLine.Type::Item);
      PurchLine.SETRANGE("No.",Item."No.");
      if PurchLine.FINDFIRST then
        exit;

      ServInvLine.SETCURRENTKEY(Type,"No.");
      ServInvLine.SETRANGE(Type,ServInvLine.Type::Item);
      ServInvLine.SETRANGE("No.",Item."No.");
      if ServInvLine.FINDFIRST then
        exit;

      BOMComp.SETCURRENTKEY(Type,"No.");
      BOMComp.SETRANGE(Type,BOMComp.Type::Item);
      BOMComp.SETRANGE("No.",Item."No.");
      if BOMComp.FINDFIRST then
        exit;

      SalesLineArch.SETCURRENTKEY(Type,"No.");
      SalesLineArch.SETRANGE(Type,SalesLineArch.Type::Item);
      SalesLineArch.SETRANGE("No.",Item."No.");
      if not SalesLineArch.ISEMPTY then
        exit;

      ProdBOMLine.RESET;
      ProdBOMLine.SETCURRENTKEY(Type,"No.");
      ProdBOMLine.SETRANGE(Type,ProdBOMLine.Type::Item);
      ProdBOMLine.SETRANGE("No.",Item."No.");
      if ProdBOMLine.FIND('-') then
        repeat
          if ProdBOMHeader.GET(ProdBOMLine."Production BOM No.") and
             (ProdBOMHeader.Status = ProdBOMHeader.Status::Certified)
          then
            exit;
        until ProdBOMLine.NEXT = 0;

      NewItem.GET(Item."No.");
      if NewItem.DELETE(true) then begin
        NonStock.SETRANGE("Item No.",Item."No.");
        if NonStock.FIND('-') then
          repeat
            NonStock."Item No." := '';
            NonStock.MODIFY;
          until NonStock.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertItemUnitOfMeasure@12(UnitOfMeasureCode@1002 : Code[10];ItemNo@1003 : Code[20]);
    VAR
      UnitOfMeasure@1000 : Record "Unit of Measure";
      ItemUnitOfMeasure@1001 : Record "Item Unit of Measure";
    BEGIN
      if not UnitOfMeasure.GET(UnitOfMeasureCode) then begin
        UnitOfMeasure.Code := UnitOfMeasureCode;
        UnitOfMeasure.INSERT;
      end;
      if not ItemUnitOfMeasure.GET(ItemNo,UnitOfMeasureCode) then begin
        ItemUnitOfMeasure."Item No." := ItemNo;
        ItemUnitOfMeasure.Code := UnitOfMeasureCode;
        ItemUnitOfMeasure."Qty. per Unit of Measure" := 1;
        ItemUnitOfMeasure.INSERT;
      end;
    END;

    LOCAL PROCEDURE GetNewItemNo@45(NonstockItem@1000 : Record "Nonstock Item";Length1@1002 : Integer;Length2@1003 : Integer) NewItemNo : Code[20];
    VAR
      NonstockItemSetupMy@1001 : Record "Nonstock Item Setup";
    BEGIN
      NonstockItemSetupMy.GET;
      case NonstockItemSetupMy."No. Format" of
        NonstockItemSetupMy."No. Format"::"Vendor Item No.":
          NewItemNo := NonstockItem."Vendor Item No.";
        NonstockItemSetupMy."No. Format"::"Mfr. + Vendor Item No.":
          if NonstockItemSetupMy."No. Format Separator" = '' then begin
            if Length1 + Length2 <= 20 then
              EVALUATE(NewItemNo,NonstockItem."Manufacturer Code" + NonstockItem."Vendor Item No.")
            else
              EVALUATE(NewItemNo,NonstockItem."Manufacturer Code" + NonstockItem."Entry No.");
          end else begin
            if Length1 + Length2 < 20 then
              EVALUATE(
                NewItemNo,
                NonstockItem."Manufacturer Code" + NonstockItemSetupMy."No. Format Separator" + NonstockItem."Vendor Item No.")
            else
              EVALUATE(
                NewItemNo,
                NonstockItem."Manufacturer Code" + NonstockItemSetupMy."No. Format Separator" + NonstockItem."Entry No.");
          end;
        NonstockItemSetupMy."No. Format"::"Vendor Item No. + Mfr.":
          if NonstockItemSetupMy."No. Format Separator" = '' then begin
            if Length1 + Length2 <= 20 then
              EVALUATE(NewItemNo,NonstockItem."Vendor Item No." + NonstockItem."Manufacturer Code")
            else
              EVALUATE(NewItemNo,NonstockItem."Entry No." + NonstockItem."Manufacturer Code");
          end else begin
            if Length1 + Length2 < 20 then
              EVALUATE(
                NewItemNo,
                NonstockItem."Vendor Item No." + NonstockItemSetupMy."No. Format Separator" + NonstockItem."Manufacturer Code")
            else
              EVALUATE(
                NewItemNo,
                NonstockItem."Entry No." + NonstockItemSetupMy."No. Format Separator" + NonstockItem."Manufacturer Code");
          end;
        NonstockItemSetupMy."No. Format"::"Entry No.":
          NewItemNo := NonstockItem."Entry No.";
      end;
    END;

    LOCAL PROCEDURE CreateNewItem@75(ItemNo@1003 : Code[20];NonstockItem@1000 : Record "Nonstock Item");
    VAR
      Item@1001 : Record Item;
      DummyItemTemplate@1004 : Record "Item Template";
      ConfigTemplateHeader@1002 : Record "Config. Template Header";
    BEGIN
      Item.INIT;

      ConfigTemplateHeader.SETRANGE(Code,NonstockItem."Item Template Code");
      ConfigTemplateHeader.FINDFIRST;
      DummyItemTemplate.InitializeTempRecordFromConfigTemplate(DummyItemTemplate,ConfigTemplateHeader);
      Item."Inventory Posting Group" := DummyItemTemplate."Inventory Posting Group";
      Item."Costing Method" := DummyItemTemplate."Costing Method";
      Item."Gen. Prod. Posting Group" := DummyItemTemplate."Gen. Prod. Posting Group";
      Item."Tax Group Code" := DummyItemTemplate."Tax Group Code";
      Item."VAT Prod. Posting Group" := DummyItemTemplate."VAT Prod. Posting Group";

      Item."No." := ItemNo;
      Item.Description := NonstockItem.Description;
      Item.VALIDATE(Description,Item.Description);
      Item.VALIDATE("Base Unit of Measure",NonstockItem."Unit of Measure");
      Item."Unit Price" := NonstockItem."Unit Price";
      Item."Unit Cost" := NonstockItem."Negotiated Cost";
      Item."Last Direct Cost" := NonstockItem."Negotiated Cost";
      if Item."Costing Method" = Item."Costing Method"::Standard then
        Item."Standard Cost" := NonstockItem."Negotiated Cost";
      Item."Automatic Ext. Texts" := false;
      Item."Vendor No." := NonstockItem."Vendor No.";
      Item."Vendor Item No." := NonstockItem."Vendor Item No.";
      Item."Net Weight" := NonstockItem."Net Weight";
      Item."Gross Weight" := NonstockItem."Gross Weight";
      Item."Manufacturer Code" := NonstockItem."Manufacturer Code";
      Item."Item Category Code" := DummyItemTemplate."Item Category Code";
      Item."Product Group Code" := NonstockItem."Product Group Code";
      Item."Created From Nonstock Item" := true;
      Item.INSERT;
    END;

    BEGIN
    END.
  }
}

