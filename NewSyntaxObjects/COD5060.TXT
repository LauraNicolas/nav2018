OBJECT Codeunit 5060 DuplicateManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Duplicate Contacts were found. Would you like to process these?';
      RMSetup@1001 : Record "Marketing Setup";

    [External]
    PROCEDURE MakeContIndex@1(Cont@1000 : Record Contact);
    VAR
      DuplSearchStringSetup@1001 : Record "Duplicate Search String Setup";
    BEGIN
      RMSetup.GET;

      RemoveContIndex(Cont,true);

      if DuplSearchStringSetup.FIND('-') then
        repeat
          InsDuplContIndex(Cont,DuplSearchStringSetup);
        until DuplSearchStringSetup.NEXT = 0;

      InsDuplCont(Cont,RMSetup."Search Hit %");
    END;

    [External]
    PROCEDURE RemoveContIndex@2(Cont@1000 : Record Contact;KeepAccepted@1001 : Boolean);
    VAR
      DuplContSearchString@1002 : Record "Cont. Duplicate Search String";
      DuplCont@1003 : Record "Contact Duplicate";
    BEGIN
      DuplContSearchString.SETRANGE("Contact Company No.",Cont."No.");
      if DuplContSearchString.FINDFIRST then
        DuplContSearchString.DELETEALL;

      DuplCont.FILTERGROUP(-1);
      DuplCont.SETRANGE("Contact No.",Cont."No.");
      DuplCont.SETRANGE("Duplicate Contact No.",Cont."No.");
      DuplCont.FILTERGROUP(0);
      if KeepAccepted then
        DuplCont.SETRANGE("Separate Contacts",false);
      DuplCont.DELETEALL(true);
    END;

    [External]
    PROCEDURE DuplicateExist@5(Cont@1000 : Record Contact) : Boolean;
    VAR
      DuplCont@1001 : Record "Contact Duplicate";
    BEGIN
      RMSetup.GET;
      if not RMSetup."Autosearch for Duplicates" then
        exit(false);
      DuplCont.FILTERGROUP(-1);
      DuplCont.SETRANGE("Contact No.",Cont."No.");
      DuplCont.SETRANGE("Duplicate Contact No.",Cont."No.");
      DuplCont.FILTERGROUP(0);
      DuplCont.SETRANGE("Separate Contacts",false);
      exit(DuplCont.FIND('=<>'));
    END;

    [External]
    PROCEDURE LaunchDuplicateForm@7(Cont@1000 : Record Contact);
    VAR
      DuplCont@1001 : Record "Contact Duplicate";
    BEGIN
      if CONFIRM(Text000,true) then begin
        DuplCont.SETRANGE("Contact No.",Cont."No.");
        PAGE.RUNMODAL(PAGE::"Contact Duplicates",DuplCont);
      end
    END;

    LOCAL PROCEDURE InsDuplContIndex@4(Cont@1000 : Record Contact;DuplSearchStringSetup@1001 : Record "Duplicate Search String Setup");
    VAR
      DuplContSearchString@1002 : Record "Cont. Duplicate Search String";
      ContactRecRef@1003 : RecordRef;
    BEGIN
      ContactRecRef.GETTABLE(Cont);

      DuplContSearchString.INIT;
      DuplContSearchString."Contact Company No." := Cont."No.";
      DuplContSearchString."Field No." := DuplSearchStringSetup."Field No.";
      DuplContSearchString."Part of Field" := DuplSearchStringSetup."Part of Field";
      DuplContSearchString."Search String" :=
        ComposeIndexString(
          ContactRecRef,DuplContSearchString."Field No.",
          DuplSearchStringSetup."Part of Field",DuplSearchStringSetup.Length);

      if DuplContSearchString."Search String" <> '' then
        DuplContSearchString.INSERT;
    END;

    LOCAL PROCEDURE InsDuplCont@3(Cont@1000 : Record Contact;HitRatio@1001 : Integer);
    VAR
      DuplContSearchString@1002 : Record "Cont. Duplicate Search String";
      DuplContSearchString2@1003 : Record "Cont. Duplicate Search String";
      DuplCont@1004 : TEMPORARY Record "Contact Duplicate";
      DuplCont2@1005 : Record "Contact Duplicate";
      DuplSearchStringSetup@1006 : Record "Duplicate Search String Setup";
    BEGIN
      DuplContSearchString.SETRANGE("Contact Company No.",Cont."No.");
      if DuplContSearchString.FIND('-') then
        repeat
          DuplContSearchString2.SETCURRENTKEY("Field No.","Part of Field","Search String");
          DuplContSearchString2.SETRANGE("Field No.",DuplContSearchString."Field No.");
          DuplContSearchString2.SETRANGE("Part of Field",DuplContSearchString."Part of Field");
          DuplContSearchString2.SETRANGE("Search String",DuplContSearchString."Search String");
          DuplContSearchString2.SETFILTER("Contact Company No.",'<>%1',DuplContSearchString."Contact Company No.");
          if DuplContSearchString2.FIND('-') then
            repeat
              if DuplCont.GET(DuplContSearchString."Contact Company No.",DuplContSearchString2."Contact Company No.") then begin
                if not DuplCont."Separate Contacts" then begin
                  DuplCont."No. of Matching Strings" := DuplCont."No. of Matching Strings" + 1;
                  DuplCont.MODIFY;
                end;
              end else begin
                DuplCont."Contact No." := DuplContSearchString."Contact Company No.";
                DuplCont."Duplicate Contact No." := DuplContSearchString2."Contact Company No.";
                DuplCont."Separate Contacts" := false;
                DuplCont."No. of Matching Strings" := 1;
                DuplCont.INSERT;
              end;
            until DuplContSearchString2.NEXT = 0;
        until DuplContSearchString.NEXT = 0;

      DuplCont.SETFILTER("No. of Matching Strings",'>=%1',ROUND(DuplSearchStringSetup.COUNT * HitRatio / 100,1,'>'));
      if DuplCont.FIND('-') then begin
        repeat
          DuplCont2 := DuplCont;
          if not DuplCont2.GET(DuplCont."Contact No.",DuplCont."Duplicate Contact No.") and
             not DuplCont2.GET(DuplCont."Duplicate Contact No.",DuplCont."Contact No.")
          then
            DuplCont2.INSERT(true);
        until DuplCont.NEXT = 0;
        DuplCont.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE ComposeIndexString@6(VAR RecRef@1003 : RecordRef;FieldNo@1004 : Integer;Part@1001 : 'First,Last';ChrToCopy@1002 : Integer) : Text[10];
    VAR
      FieldRef@1005 : FieldRef;
      InString@1000 : Text[260];
    BEGIN
      FieldRef := RecRef.FIELD(FieldNo);
      InString := FORMAT(FieldRef.VALUE);
      InString := DELCHR(InString,'=',' +"&/,.;:-_(){}#!œ$\');

      if STRLEN(InString) < ChrToCopy then
        ChrToCopy := STRLEN(InString);

      if ChrToCopy > 0 then
        if Part = Part::First then
          InString := COPYSTR(InString,1,ChrToCopy)
        else
          InString := COPYSTR(InString,STRLEN(InString) - ChrToCopy + 1,ChrToCopy);

      exit(UPPERCASE(InString));
    END;

    BEGIN
    END.
  }
}

