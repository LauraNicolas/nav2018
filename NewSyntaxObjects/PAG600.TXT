OBJECT Page 600 IC Dimensions
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Intercompany Dimensions;
    SourceTable="IC Dimension";
    PageType=List;
    PromotedActionCategoriesML=ENU=New,Process,Report,Dimensions,Import/Export;
    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 15      ;1   ;ActionGroup;
                      Name=IC &Dimension;
                      CaptionML=ENU=IC &Dimension }
      { 16      ;2   ;Action    ;
                      Name=IC Dimension &Values;
                      CaptionML=ENU=IC Dimension &Values;
                      ApplicationArea=#Intercompany;
                      RunObject=Page "IC Dimension Values";
                      RunPageLink="Dimension Code"=FIELD(Code);
                      Promoted=true;
                      Image=ChangeDimensions;
                      PromotedCategory=Category4;
                      PromotedOnly=true }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 11      ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 17      ;2   ;Action    ;
                      Name=Map to Dim. with Same Code;
                      CaptionML=ENU=Map to Dim. with Same Code;
                      ToolTipML=ENU=Map the selected intercompany dimensions to dimensions with the same code.;
                      ApplicationArea=#Intercompany;
                      Promoted=true;
                      Image=MapDimensions;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      OnAction=VAR
                                 ICDimension@1001 : Record "IC Dimension";
                                 ICMapping@1000 : Codeunit "IC Mapping";
                               BEGIN
                                 CurrPage.SETSELECTIONFILTER(ICDimension);
                                 if ICDimension.FIND('-') and CONFIRM(Text000) then
                                   repeat
                                     ICMapping.MapIncomingICDimensions(ICDimension);
                                   until ICDimension.NEXT = 0;
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=Copy from Dimensions;
                      CaptionML=ENU=Copy from Dimensions;
                      ToolTipML=ENU=Creates intercompany dimensions for existing dimensions.;
                      ApplicationArea=#Intercompany;
                      Promoted=true;
                      Image=CopyDimensions;
                      PromotedCategory=Category4;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 CopyFromDimensions;
                               END;
                                }
      { 14      ;2   ;Separator ;
                      Name=Separator14 }
      { 18      ;2   ;Action    ;
                      Name=Import;
                      Ellipsis=true;
                      CaptionML=ENU=Import;
                      ToolTipML=ENU=Import intercompany dimensions from a file.;
                      ApplicationArea=#Intercompany;
                      Promoted=true;
                      Image=Import;
                      PromotedCategory=Category5;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 ImportFromXML;
                               END;
                                }
      { 19      ;2   ;Action    ;
                      Name=E&xport;
                      Ellipsis=true;
                      CaptionML=ENU=E&xport;
                      ToolTipML=ENU=Export intercompany dimensions to a file.;
                      ApplicationArea=#Intercompany;
                      Promoted=true;
                      Image=Export;
                      PromotedCategory=Category5;
                      PromotedOnly=true;
                      OnAction=BEGIN
                                 ExportToXML;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Code;
                ToolTipML=ENU=Specifies the intercompany dimension code.;
                ApplicationArea=#Intercompany;
                SourceExpr=Code;
                ImplicitType=Code20 }

    { 4   ;2   ;Field     ;
                Name=Name;
                ToolTipML=ENU=Specifies the intercompany dimension name;
                ApplicationArea=#Intercompany;
                SourceExpr=Name;
                ImplicitType=Text30 }

    { 6   ;2   ;Field     ;
                Name=Blocked;
                ToolTipML=ENU=Specifies if the record is blocked from being used.;
                ApplicationArea=#Intercompany;
                SourceExpr=Blocked;
                ImplicitType=Boolean }

    { 8   ;2   ;Field     ;
                Name=Map-to Dimension Code;
                ToolTipML=ENU=Specifies the code of the dimension in your company that this intercompany dimension corresponds to.;
                ApplicationArea=#Intercompany;
                SourceExpr="Map-to Dimension Code";
                ImplicitType=Code20 }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Are you sure you want to map the selected lines?';
      Text001@1004 : TextConst 'ENU=Select file to import into %1';
      Text002@1003 : TextConst 'ENU=ICDim.xml';
      Text004@1001 : TextConst 'ENU=Are you sure you want to copy from Dimensions?';
      Text005@1002 : TextConst 'ENU=Enter the file name.';
      Text006@1005 : TextConst 'ENU=XML Files (*.xml)|*.xml|All Files (*.*)|*.*';

    LOCAL PROCEDURE CopyFromDimensions@1();
    VAR
      Dim@1000 : Record Dimension;
      DimVal@1005 : Record "Dimension Value";
      ICDim@1001 : Record "IC Dimension";
      ICDimVal@1006 : Record "IC Dimension Value";
      ICDimValEmpty@1002 : Boolean;
      ICDimValExists@1003 : Boolean;
      PrevIndentation@1004 : Integer;
    BEGIN
      if not CONFIRM(Text004,false) then
        exit;

      ICDimVal.LOCKTABLE;
      ICDim.LOCKTABLE;
      Dim.SETRANGE(Blocked,false);
      if Dim.FIND('-') then
        repeat
          if not ICDim.GET(Dim.Code) then begin
            ICDim.INIT;
            ICDim.Code := Dim.Code;
            ICDim.Name := Dim.Name;
            ICDim.INSERT;
          end;

          ICDimValExists := false;
          DimVal.SETRANGE("Dimension Code",Dim.Code);
          ICDimVal.SETRANGE("Dimension Code",Dim.Code);
          ICDimValEmpty := not ICDimVal.FINDFIRST;
          if DimVal.FIND('-') then
            repeat
              if DimVal."Dimension Value Type" = DimVal."Dimension Value Type"::"End-Total" then
                PrevIndentation := PrevIndentation - 1;
              if not ICDimValEmpty then
                ICDimValExists := ICDimVal.GET(DimVal."Dimension Code",DimVal.Code);
              if not ICDimValExists and not DimVal.Blocked then begin
                ICDimVal.INIT;
                ICDimVal."Dimension Code" := DimVal."Dimension Code";
                ICDimVal.Code := DimVal.Code;
                ICDimVal.Name := DimVal.Name;
                ICDimVal."Dimension Value Type" := DimVal."Dimension Value Type";
                ICDimVal.Indentation := PrevIndentation;
                ICDimVal.INSERT;
              end;
              PrevIndentation := DimVal.Indentation;
              if DimVal."Dimension Value Type" = DimVal."Dimension Value Type"::"Begin-Total" then
                PrevIndentation := PrevIndentation + 1;
            until DimVal.NEXT = 0;
        until Dim.NEXT = 0;
    END;

    LOCAL PROCEDURE ImportFromXML@2();
    VAR
      CompanyInfo@1006 : Record "Company Information";
      ICDimIO@1002 : XMLport "IC Dimension Import/Export";
      IFile@1001 : File;
      IStr@1000 : InStream;
      FileName@1004 : Text[1024];
      StartFileName@1003 : Text[1024];
    BEGIN
      CompanyInfo.GET;

      StartFileName := CompanyInfo."IC Inbox Details";
      if StartFileName <> '' then begin
        if StartFileName[STRLEN(StartFileName)] <> '\' then
          StartFileName := StartFileName + '\';
        StartFileName := StartFileName + '*.xml';
      end;

      if not UPLOAD(STRSUBSTNO(Text001,TABLECAPTION),'',Text006,StartFileName,FileName) then
        ERROR(Text005);

      IFile.OPEN(FileName);
      IFile.CREATEINSTREAM(IStr);
      ICDimIO.SETSOURCE(IStr);
      ICDimIO.IMPORT;
    END;

    LOCAL PROCEDURE ExportToXML@3();
    VAR
      CompanyInfo@1006 : Record "Company Information";
      FileMgt@1000 : Codeunit "File Management";
      ICDimIO@1005 : XMLport "IC Dimension Import/Export";
      OFile@1002 : File;
      OStr@1001 : OutStream;
      FileName@1004 : Text;
      DefaultFileName@1003 : Text;
    BEGIN
      CompanyInfo.GET;

      DefaultFileName := CompanyInfo."IC Inbox Details";
      if DefaultFileName <> '' then
        if DefaultFileName[STRLEN(DefaultFileName)] <> '\' then
          DefaultFileName := DefaultFileName + '\';
      DefaultFileName := DefaultFileName + Text002;

      FileName := FileMgt.ServerTempFileName('xml');
      if FileName = '' then
        exit;

      OFile.CREATE(FileName);
      OFile.CREATEOUTSTREAM(OStr);
      ICDimIO.SETDESTINATION(OStr);
      ICDimIO.EXPORT;
      OFile.CLOSE;
      CLEAR(OStr);

      DOWNLOAD(FileName,'Export',TEMPORARYPATH,'',DefaultFileName);
    END;

    BEGIN
    END.
  }
}

