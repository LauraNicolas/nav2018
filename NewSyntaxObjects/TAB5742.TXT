OBJECT Table 5742 Transfer Route
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="Transfer-from Code","Transfer-to Code";
    CaptionML=ENU=Transfer Route;
  }
  FIELDS
  {
    { 1   ;   ;Transfer-from Code  ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   CaptionML=ENU=Transfer-from Code }
    { 2   ;   ;Transfer-to Code    ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   CaptionML=ENU=Transfer-to Code }
    { 4   ;   ;In-Transit Code     ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(true));
                                                   CaptionML=ENU=In-Transit Code }
    { 5   ;   ;Shipping Agent Code ;Code10        ;TableRelation="Shipping Agent";
                                                   OnValidate=BEGIN
                                                                if "Shipping Agent Code" <> xRec."Shipping Agent Code" then
                                                                  VALIDATE("Shipping Agent Service Code",'');
                                                              END;

                                                   AccessByPermission=TableData "Shipping Agent Services"=R;
                                                   CaptionML=ENU=Shipping Agent Code }
    { 6   ;   ;Shipping Agent Service Code;Code10 ;TableRelation="Shipping Agent Services".Code WHERE ("Shipping Agent Code"=FIELD("Shipping Agent Code"));
                                                   CaptionML=ENU=Shipping Agent Service Code }
  }
  KEYS
  {
    {    ;"Transfer-from Code","Transfer-to Code" ;Clustered=true }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text003@1003 : TextConst 'ENU=The receipt date must be greater or equal to the shipment date.';
      CalChange@1001 : Record "Customized Calendar Change";
      ShippingAgentServices@1006 : Record "Shipping Agent Services";
      CalendarMgmt@1000 : Codeunit "Calendar Management";
      HasTransferRoute@1007 : Boolean;
      HasShippingAgentService@1008 : Boolean;

    [External]
    PROCEDURE GetTransferRoute@3(TransferFromCode@1000 : Code[10];TransferToCode@1001 : Code[10];VAR InTransitCode@1002 : Code[10];VAR ShippingAgentCode@1003 : Code[10];VAR ShippingAgentServiceCode@1004 : Code[10]);
    VAR
      HasGotRecord@1005 : Boolean;
    BEGIN
      if ("Transfer-from Code" <> TransferFromCode) or
         ("Transfer-to Code" <> TransferToCode)
      then
        if GET(TransferFromCode,TransferToCode) then
          HasGotRecord := true;

      if HasGotRecord then begin
        InTransitCode := "In-Transit Code";
        ShippingAgentCode := "Shipping Agent Code";
        ShippingAgentServiceCode := "Shipping Agent Service Code";
      end else begin
        InTransitCode := '';
        ShippingAgentCode := '';
        ShippingAgentServiceCode := '';
      end;
    END;

    [External]
    PROCEDURE CalcReceiptDate@16(ShipmentDate@1000 : Date;VAR ReceiptDate@1001 : Date;ShippingTime@1002 : DateFormula;OutboundWhseTime@1003 : DateFormula;InboundWhseTime@1004 : DateFormula;TransferFromCode@1005 : Code[10];TransferToCode@1006 : Code[10];ShippingAgentCode@1007 : Code[10];ShippingAgentServiceCode@1008 : Code[10]);
    VAR
      PlannedReceiptDate@1010 : Date;
      PlannedShipmentDate@1009 : Date;
    BEGIN
      if ShipmentDate <> 0D then begin
        // The calculation will run through the following steps:
        // ShipmentDate -> PlannedShipmentDate -> PlannedReceiptDate -> ReceiptDate

        // Calc Planned Shipment Date forward from Shipment Date
        CalcPlanShipmentDateForward(
          ShipmentDate,PlannedShipmentDate,OutboundWhseTime,
          TransferFromCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Planned Receipt Date forward from Planned Shipment Date
        CalcPlannedReceiptDateForward(
          PlannedShipmentDate,PlannedReceiptDate,ShippingTime,
          TransferToCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Receipt Date forward from Planned Receipt Date
        CalcReceiptDateForward(PlannedReceiptDate,ReceiptDate,InboundWhseTime,TransferToCode);

        if ShipmentDate > ReceiptDate then
          ERROR(Text003);
      end else
        ReceiptDate := 0D;
    END;

    LOCAL PROCEDURE CalcPlanShipmentDateForward@13(ShipmentDate@1000 : Date;VAR PlannedShipmentDate@1001 : Date;OutboundWhseTime@1003 : DateFormula;TransferFromCode@1005 : Code[10];ShippingAgentCode@1007 : Code[10];ShippingAgentServiceCode@1008 : Code[10]);
    BEGIN
      // Calc Planned Shipment Date forward from Shipment Date

      if ShipmentDate <> 0D then begin
        if FORMAT(OutboundWhseTime) = '' then
          EVALUATE(OutboundWhseTime,'<0D>');

        PlannedShipmentDate :=
          CalendarMgmt.CalcDateBOC(
            FORMAT(OutboundWhseTime),
            ShipmentDate,
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            true);
      end else
        PlannedShipmentDate := 0D;
    END;

    [External]
    PROCEDURE CalcPlannedReceiptDateForward@12(PlannedShipmentDate@1000 : Date;VAR PlannedReceiptDate@1001 : Date;ShippingTime@1002 : DateFormula;TransferToCode@1006 : Code[10];ShippingAgentCode@1007 : Code[10];ShippingAgentServiceCode@1008 : Code[10]);
    BEGIN
      // Calc Planned Receipt Date forward from Planned Shipment Date

      if PlannedShipmentDate <> 0D then begin
        if FORMAT(ShippingTime) = '' then
          EVALUATE(ShippingTime,'<0D>');

        PlannedReceiptDate :=
          CalendarMgmt.CalcDateBOC(
            FORMAT(ShippingTime),
            PlannedShipmentDate,
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            true);
      end else
        PlannedReceiptDate := 0D;
    END;

    [External]
    PROCEDURE CalcReceiptDateForward@34(PlannedReceiptDate@1000 : Date;VAR ReceiptDate@1001 : Date;InboundWhseTime@1004 : DateFormula;TransferToCode@1006 : Code[10]);
    BEGIN
      // Calc Receipt Date forward from Planned Receipt Date

      if PlannedReceiptDate <> 0D then begin
        if FORMAT(InboundWhseTime) = '' then
          EVALUATE(InboundWhseTime,'<0D>');

        ReceiptDate :=
          CalendarMgmt.CalcDateBOC(
            FORMAT(InboundWhseTime),
            PlannedReceiptDate,
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            false);
      end else
        ReceiptDate := 0D;
    END;

    [External]
    PROCEDURE CalcShipmentDate@6(VAR ShipmentDate@1004 : Date;ReceiptDate@1003 : Date;ShippingTime@1002 : DateFormula;OutboundWhseTime@1001 : DateFormula;InboundWhseTime@1000 : DateFormula;TransferFromCode@1008 : Code[10];TransferToCode@1007 : Code[10];ShippingAgentCode@1006 : Code[10];ShippingAgentServiceCode@1005 : Code[10]);
    VAR
      PlannedReceiptDate@1009 : Date;
      PlannedShipmentDate@1010 : Date;
    BEGIN
      if ReceiptDate <> 0D then begin
        // The calculation will run through the following steps:
        // ShipmentDate <- PlannedShipmentDate <- PlannedReceiptDate <- ReceiptDate

        // Calc Planned Receipt Date backward from ReceiptDate
        CalcPlanReceiptDateBackward(
          PlannedReceiptDate,ReceiptDate,InboundWhseTime,
          TransferToCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Planned Shipment Date backward from Planned ReceiptDate
        CalcPlanShipmentDateBackward(
          PlannedShipmentDate,PlannedReceiptDate,ShippingTime,
          TransferFromCode,ShippingAgentCode,ShippingAgentServiceCode);

        // Calc Shipment Date backward from Planned Shipment Date
        CalcShipmentDateBackward(
          ShipmentDate,PlannedShipmentDate,OutboundWhseTime,TransferFromCode);
      end else
        ShipmentDate := 0D;
    END;

    [External]
    PROCEDURE CalcPlanReceiptDateBackward@1(VAR PlannedReceiptDate@1004 : Date;ReceiptDate@1003 : Date;InboundWhseTime@1000 : DateFormula;TransferToCode@1007 : Code[10];ShippingAgentCode@1006 : Code[10];ShippingAgentServiceCode@1005 : Code[10]);
    BEGIN
      // Calc Planned Receipt Date backward from ReceiptDate

      if ReceiptDate <> 0D then begin
        if FORMAT(InboundWhseTime) = '' then
          EVALUATE(InboundWhseTime,'<0D>');

        PlannedReceiptDate :=
          CalendarMgmt.CalcDateBOC2(
            FORMAT(InboundWhseTime),
            ReceiptDate,
            CalChange."Source Type"::Location,
            TransferToCode,
            '',
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            true);
      end else
        PlannedReceiptDate := 0D;
    END;

    [External]
    PROCEDURE CalcPlanShipmentDateBackward@7(VAR PlannedShipmentDate@1004 : Date;PlannedReceiptDate@1003 : Date;ShippingTime@1002 : DateFormula;TransferFromCode@1008 : Code[10];ShippingAgentCode@1006 : Code[10];ShippingAgentServiceCode@1005 : Code[10]);
    BEGIN
      // Calc Planned Shipment Date backward from Planned ReceiptDate

      if PlannedReceiptDate <> 0D then begin
        if FORMAT(ShippingTime) = '' then
          EVALUATE(ShippingTime,'<0D>');

        PlannedShipmentDate :=
          CalendarMgmt.CalcDateBOC2(
            FORMAT(ShippingTime),
            PlannedReceiptDate,
            CalChange."Source Type"::"Shipping Agent",
            ShippingAgentCode,
            ShippingAgentServiceCode,
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            true);
      end else
        PlannedShipmentDate := 0D;
    END;

    [External]
    PROCEDURE CalcShipmentDateBackward@10(VAR ShipmentDate@1004 : Date;PlannedShipmentDate@1003 : Date;OutboundWhseTime@1001 : DateFormula;TransferFromCode@1008 : Code[10]);
    BEGIN
      // Calc Shipment Date backward from Planned Shipment Date

      if PlannedShipmentDate <> 0D then begin
        if FORMAT(OutboundWhseTime) = '' then
          EVALUATE(OutboundWhseTime,'<0D>');

        ShipmentDate :=
          CalendarMgmt.CalcDateBOC2(
            FORMAT(OutboundWhseTime),
            PlannedShipmentDate,
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            CalChange."Source Type"::Location,
            TransferFromCode,
            '',
            false);
      end else
        ShipmentDate := 0D;
    END;

    [External]
    PROCEDURE GetShippingTime@2(TransferFromCode@1000 : Code[10];TransferToCode@1001 : Code[10];ShippingAgentCode@1002 : Code[10];ShippingAgentServiceCode@1003 : Code[10];VAR ShippingTime@1004 : DateFormula);
    BEGIN
      if (ShippingAgentServices."Shipping Agent Code" <> ShippingAgentCode) or
         (ShippingAgentServices.Code <> ShippingAgentServiceCode)
      then begin
        if ShippingAgentServices.GET(ShippingAgentCode,ShippingAgentServiceCode) then
          HasShippingAgentService := true;
      end else
        HasShippingAgentService := true;

      if HasShippingAgentService then
        ShippingTime := ShippingAgentServices."Shipping Time"
      else begin
        if ("Transfer-from Code" <> TransferFromCode) or
           ("Transfer-to Code" <> TransferToCode)
        then begin
          if GET(TransferFromCode,TransferToCode) then
            HasTransferRoute := true;
        end else
          HasTransferRoute := true;
        if HasTransferRoute and
           ShippingAgentServices.GET("Shipping Agent Code","Shipping Agent Service Code")
        then
          ShippingTime := ShippingAgentServices."Shipping Time"
        else
          EVALUATE(ShippingTime,'');
      end;
    END;

    BEGIN
    END.
  }
}

