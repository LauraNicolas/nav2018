OBJECT Codeunit 6700 O365 Sync. Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Service Password"=rimd;
    OnRun=BEGIN
            CODEUNIT.RUN(CODEUNIT::"Exchange Contact Sync.");
            CODEUNIT.RUN(CODEUNIT::"Booking Customer Sync.");
            CODEUNIT.RUN(CODEUNIT::"Booking Service Sync.");
          END;

  }
  CODE
  {
    VAR
      ProgressWindow@1009 : Dialog;
      BookingsConnectionID@1000 : Text;
      ConnectionErr@1006 : TextConst '@@@="%1 = User who cannot connect";ENU=%1 is unable to connect to Exchange. This may be due to a service outage or invalid credentials.';
      LoggingConstTxt@1001 : TextConst 'ENU=Contact synchronization.';
      O365RecordMissingErr@1002 : TextConst 'ENU=The Office 365 synchronization setup record is not configured correctly.';
      ExchangeConnectionID@1004 : Text;
      RegisterConnectionTxt@1005 : TextConst 'ENU=Register connection.';
      SetupO365Qst@1008 : TextConst 'ENU=Would you like to configure your connection to Office 365 now?';
      BookingsConnectionString@1010 : Text;
      ExchangeConnectionString@1011 : Text;
      GettingContactsTxt@1003 : TextConst 'ENU=Getting Exchange contacts.';
      GettingBookingCustomersTxt@1012 : TextConst 'ENU=Getting Booking customers.';
      GettingBookingServicesTxt@1013 : TextConst 'ENU=Getting Booking services.';
      NoUserAccessErr@1007 : TextConst '@@@="%1 = The Bookings company; %2 = The user";ENU=Could not connect to %1. Verify that %2 is an administrator in the Bookings mailbox.';

    [TryFunction]
    [Internal]
    PROCEDURE GetBookingMailboxes@21(BookingSync@1000 : Record "Booking Sync";VAR TempBookingMailbox@1002 : TEMPORARY Record "Booking Mailbox";MailboxName@1003 : Text);
    VAR
      BookingMailbox@1001 : Record "Booking Mailbox";
    BEGIN
      BookingSync."Booking Mailbox Address" := COPYSTR(MailboxName,1,80);
      RegisterBookingsConnection(BookingSync);
      TempBookingMailbox.RESET;
      TempBookingMailbox.DELETEALL;
      if BookingMailbox.FINDSET then
        repeat
          TempBookingMailbox.INIT;
          TempBookingMailbox.TRANSFERFIELDS(BookingMailbox);
          TempBookingMailbox.INSERT;
        until BookingMailbox.NEXT = 0;
    END;

    [Internal]
    PROCEDURE CreateExchangeConnection@17(VAR ExchangeSync@1000 : Record "Exchange Sync") Valid : Boolean;
    VAR
      User@1001 : Record User;
      AuthenticationEmail@1002 : Text[250];
    BEGIN
      IsO365Setup(false);
      if GetUser(User,ExchangeSync."User ID") then begin
        AuthenticationEmail := User."Authentication Email";
        Valid := ValidateExchangeConnection(AuthenticationEmail,ExchangeSync);
      end;
    END;

    [Internal]
    PROCEDURE IsO365Setup@8(AddOnTheFly@1000 : Boolean) : Boolean;
    VAR
      User@1001 : Record User;
      LocalExchangeSync@1003 : Record "Exchange Sync";
      AuthenticationEmail@1002 : Text[250];
      Password@1004 : Text;
      Token@1005 : Text;
    BEGIN
      with LocalExchangeSync do begin
        if GetUser(User,USERID) then
          AuthenticationEmail := User."Authentication Email";

        if not GET(USERID) or
           (AuthenticationEmail = '') or ("Folder ID" = '') or not GetPasswordOrToken(LocalExchangeSync,Password,Token)
        then begin
          if AddOnTheFly then begin
            if not OpenSetupWindow then
              ERROR(O365RecordMissingErr)
          end else
            ERROR(O365RecordMissingErr);
        end;
      end;

      exit(true);
    END;

    [External]
    PROCEDURE OpenSetupWindow@16() : Boolean;
    VAR
      ExchangeSyncSetup@1000 : Page "Exchange Sync. Setup";
    BEGIN
      if CONFIRM(SetupO365Qst,true) then
        exit(ExchangeSyncSetup.RUNMODAL = ACTION::OK);
    END;

    [EventSubscriber(Codeunit,2,OnCompanyInitialize)]
    LOCAL PROCEDURE SetupContactSyncJobQueue@22();
    VAR
      JobQueueEntry@1000 : Record "Job Queue Entry";
      TwentyFourHours@1001 : Integer;
    BEGIN
      with JobQueueEntry do begin
        SETRANGE("Object Type to Run","Object Type to Run"::Codeunit);
        SETRANGE("Object ID to Run",CODEUNIT::"O365 Sync. Management");

        if ISEMPTY then begin
          TwentyFourHours := 24 * 60;
          InitRecurringJob(TwentyFourHours);
          "Object Type to Run" := "Object Type to Run"::Codeunit;
          "Object ID to Run" := CODEUNIT::"O365 Sync. Management";
          CODEUNIT.RUN(CODEUNIT::"Job Queue - Enqueue",JobQueueEntry);
        end;
      end;
    END;

    [Internal]
    PROCEDURE SyncBookingCustomers@6(VAR BookingSync@1000 : Record "Booking Sync");
    VAR
      BookingCustomerSync@1003 : Codeunit "Booking Customer Sync.";
    BEGIN
      CheckUserAccess(BookingSync);
      ShowProgress(GettingBookingCustomersTxt);
      RegisterBookingsConnection(BookingSync);
      CloseProgress;
      BookingCustomerSync.SyncRecords(BookingSync);
    END;

    [Internal]
    PROCEDURE SyncBookingServices@13(VAR BookingSync@1000 : Record "Booking Sync");
    VAR
      BookingServiceSync@1003 : Codeunit "Booking Service Sync.";
    BEGIN
      CheckUserAccess(BookingSync);
      ShowProgress(GettingBookingServicesTxt);
      RegisterBookingsConnection(BookingSync);
      CloseProgress;
      BookingServiceSync.SyncRecords(BookingSync);
    END;

    [Internal]
    PROCEDURE SyncExchangeContacts@14(ExchangeSync@1003 : Record "Exchange Sync";FullSync@1001 : Boolean);
    VAR
      ExchangeContactSync@1000 : Codeunit "Exchange Contact Sync.";
    BEGIN
      ShowProgress(GettingContactsTxt);
      RegisterExchangeConnection(ExchangeSync);
      CloseProgress;
      ExchangeContactSync.SyncRecords(ExchangeSync,FullSync);
    END;

    [Internal]
    PROCEDURE LogActivityFailed@7(RecordID@1002 : Variant;UserID@1005 : Code[50];ActivityDescription@1001 : Text;ActivityMessage@1000 : Text);
    VAR
      ActivityLog@1003 : Record "Activity Log";
    BEGIN
      ActivityMessage := GETLASTERRORTEXT + ' ' + ActivityMessage;
      CLEARLASTERROR;

      ActivityLog.LogActivityForUser(RecordID,ActivityLog.Status::Failed,COPYSTR(LoggingConstTxt,1,30),
        ActivityDescription,ActivityMessage,UserID);
    END;

    [Internal]
    PROCEDURE BuildBookingsConnectionString@15(VAR BookingSync@1000 : Record "Booking Sync") ConnectionString : Text;
    VAR
      User@1003 : Record User;
      ExchangeSync@1001 : Record "Exchange Sync";
      ExchangeWebServicesServer@1004 : Codeunit "Exchange Web Services Server";
      Password@1002 : Text;
      Token@1005 : Text;
    BEGIN
      // Example connection string
      // {UserName}="user@user.onmicrosoft.com";{Password}="1234";{FolderID}="Dynamics NAV";{Uri}=https://outlook.office365.com/EWS/Exchange.asmx
      ExchangeSync.GET(BookingSync."User ID");
      if (not GetUser(User,BookingSync."User ID")) or
         (User."Authentication Email" = '') or
         (not GetPasswordOrToken(ExchangeSync,Password,Token))
      then
        ERROR(O365RecordMissingErr);

      ConnectionString :=
        STRSUBSTNO(
          '{UserName}=%1;{Password}=%2;{Token}=%3;{Mailbox}=%4;',
          User."Authentication Email",
          Password,
          Token,
          BookingSync."Booking Mailbox Address");

      if Token <> '' then
        ConnectionString := STRSUBSTNO('%1;{Uri}=%2',ConnectionString,ExchangeWebServicesServer.GetEndpoint);
    END;

    [Internal]
    PROCEDURE BuildExchangeConnectionString@1(VAR ExchangeSync@1000 : Record "Exchange Sync") ConnectionString : Text;
    VAR
      User@1001 : Record User;
      ExchangeWebServicesServer@1004 : Codeunit "Exchange Web Services Server";
      Token@1003 : Text;
      Password@1005 : Text;
    BEGIN
      // Example connection string
      // {UserName}="user@user.onmicrosoft.com";{Password}="1234";{FolderID}="Dynamics NAV";{Uri}=https://outlook.office365.com/EWS/Exchange.asmx
      if (not GetUser(User,ExchangeSync."User ID")) or
         (User."Authentication Email" = '') or
         (ExchangeSync."Folder ID" = '') or (not GetPasswordOrToken(ExchangeSync,Password,Token))
      then
        ERROR(O365RecordMissingErr);

      ConnectionString :=
        STRSUBSTNO(
          '{UserName}=%1;{Password}=%2;{Token}=%3;{FolderID}=%4;',
          User."Authentication Email",
          Password,
          Token,
          ExchangeSync."Folder ID");

      if Token <> '' then
        ConnectionString := STRSUBSTNO('%1;{Uri}=%2',ConnectionString,ExchangeWebServicesServer.GetEndpoint);
    END;

    [Internal]
    PROCEDURE RegisterBookingsConnection@20(BookingSync@1001 : Record "Booking Sync");
    VAR
      ExchangeSync@1002 : Record "Exchange Sync";
    BEGIN
      if ExchangeConnectionID <> '' then
        UnregisterConnection(ExchangeConnectionID);

      if BookingsConnectionReady(BookingSync) then
        exit;

      if BookingsConnectionID <> '' then
        UnregisterConnection(BookingsConnectionID);

      ExchangeSync.GET(BookingSync."User ID");
      BookingsConnectionID := CREATEGUID;

      if RegisterConnection(ExchangeSync,BookingsConnectionID,BookingsConnectionString) then
        SetConnection(ExchangeSync,BookingsConnectionID);
    END;

    [Internal]
    PROCEDURE RegisterExchangeConnection@25(ExchangeSync@1000 : Record "Exchange Sync");
    BEGIN
      if BookingsConnectionID <> '' then
        UnregisterConnection(BookingsConnectionID);

      if ExchangeConnectionReady(ExchangeSync) then
        exit;

      if ExchangeConnectionID <> '' then
        UnregisterConnection(ExchangeConnectionID);

      ExchangeConnectionID := CREATEGUID;
      if RegisterConnection(ExchangeSync,ExchangeConnectionID,ExchangeConnectionString) then
        SetConnection(ExchangeSync,ExchangeConnectionID);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryRegisterConnection@2(ConnectionID@1000 : GUID;ConnectionString@1001 : Text);
    BEGIN
      // Using a try function, as these may throw an exception under certain circumstances (improper credentials, broken connection)
      REGISTERTABLECONNECTION(TABLECONNECTIONTYPE::Exchange,ConnectionID,ConnectionString);
    END;

    LOCAL PROCEDURE RegisterConnection@24(ExchangeSync@1002 : Record "Exchange Sync";ConnectionID@1000 : GUID;ConnectionString@1001 : Text) Success : Boolean;
    BEGIN
      Success := TryRegisterConnection(ConnectionID,ConnectionString);
      if not Success then
        ConnectionFailure(ExchangeSync);
    END;

    [TryFunction]
    LOCAL PROCEDURE TrySetConnection@28(ConnectionID@1000 : GUID);
    BEGIN
      // Using a try function, as these may throw an exception under certain circumstances (improper credentials, broken connection)
      SETDEFAULTTABLECONNECTION(TABLECONNECTIONTYPE::Exchange,ConnectionID);
    END;

    LOCAL PROCEDURE SetConnection@3(ExchangeSync@1001 : Record "Exchange Sync";ConnectionID@1000 : GUID) Success : Boolean;
    BEGIN
      Success := TrySetConnection(ConnectionID);
      if not Success then
        ConnectionFailure(ExchangeSync);
    END;

    [TryFunction]
    LOCAL PROCEDURE UnregisterConnection@4(VAR ConnectionID@1000 : Text);
    BEGIN
      UNREGISTERTABLECONNECTION(TABLECONNECTIONTYPE::Exchange,ConnectionID);
      ConnectionID := '';
    END;

    LOCAL PROCEDURE ConnectionFailure@31(ExchangeSync@1000 : Record "Exchange Sync");
    BEGIN
      with ExchangeSync do begin
        LogActivityFailed(RECORDID,RegisterConnectionTxt,STRSUBSTNO(ConnectionErr,"User ID"),"User ID");
        if GUIALLOWED then begin
          CloseProgress;
          ERROR(STRSUBSTNO(ConnectionErr,"User ID"));
        end;
      end;
    END;

    [Internal]
    PROCEDURE ValidateExchangeConnection@10(AuthenticationEmail@1001 : Text[250];VAR ExchangeSync@1000 : Record "Exchange Sync") Valid : Boolean;
    VAR
      ExchangeWebServicesServer@1003 : Codeunit "Exchange Web Services Server";
      Credentials@1002 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.ExchangeCredentials";
    BEGIN
      CreateExchangeAccountCredentials(ExchangeSync,Credentials);
      Valid := ExchangeWebServicesServer.Initialize(AuthenticationEmail,ExchangeWebServicesServer.ProdEndpoint,Credentials,false);
      Valid := (Valid and ExchangeWebServicesServer.ValidCredentials);
    END;

    LOCAL PROCEDURE CreateExchangeAccountCredentials@11(VAR ExchangeSync@1001 : Record "Exchange Sync";VAR Credentials@1000 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.ExchangeCredentials");
    VAR
      User@1003 : Record User;
      WebCredentials@1008 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials";
      OAuthCredentials@1007 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.OAuthCredentials";
      AuthenticationEmail@1002 : Text[250];
      Token@1004 : Text;
      Password@1005 : Text;
    BEGIN
      with ExchangeSync do begin
        if GetUser(User,"User ID") then
          AuthenticationEmail := User."Authentication Email";
        if AuthenticationEmail = '' then
          ERROR(O365RecordMissingErr);
        if not GetPasswordOrToken(ExchangeSync,Password,Token) then
          ERROR(O365RecordMissingErr);

        if Token <> '' then
          Credentials := OAuthCredentials.OAuthCredentials(Token)
        else
          Credentials := WebCredentials.WebCredentials(AuthenticationEmail,Password);
      end;
    END;

    LOCAL PROCEDURE GetUser@12(VAR User@1001 : Record User;UserID@1000 : Text[50]) : Boolean;
    BEGIN
      User.SETRANGE("User Name",UserID);
      exit(User.FINDFIRST);
    END;

    [External]
    PROCEDURE ShowProgress@18(Message@1000 : Text);
    BEGIN
      if GUIALLOWED then begin
        CloseProgress;
        ProgressWindow.OPEN(Message);
      end;
    END;

    [External]
    PROCEDURE CloseProgress@19();
    BEGIN
      if GUIALLOWED then
        if TryCloseProgress then;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryCloseProgress@30();
    BEGIN
      ProgressWindow.CLOSE;
    END;

    LOCAL PROCEDURE BookingsConnectionReady@26(BookingSync@1000 : Record "Booking Sync") Ready : Boolean;
    VAR
      NewConnectionString@1001 : Text;
    BEGIN
      NewConnectionString := BuildBookingsConnectionString(BookingSync);
      Ready := (BookingsConnectionID <> '') and (NewConnectionString = BookingsConnectionString);
      BookingsConnectionString := NewConnectionString;
    END;

    LOCAL PROCEDURE ExchangeConnectionReady@27(ExchangeSync@1000 : Record "Exchange Sync") Ready : Boolean;
    VAR
      NewConnectionString@1001 : Text;
    BEGIN
      NewConnectionString := BuildExchangeConnectionString(ExchangeSync);
      Ready := (ExchangeConnectionID <> '') and (NewConnectionString = ExchangeConnectionString);
      ExchangeConnectionString := NewConnectionString;
    END;

    LOCAL PROCEDURE GetPasswordOrToken@23(ExchangeSync@1000 : Record "Exchange Sync";VAR Password@1001 : Text;VAR Token@1002 : Text) : Boolean;
    VAR
      ServicePassword@1003 : Record "Service Password";
      AzureADMgt@1004 : Codeunit "Azure AD Mgt.";
    BEGIN
      Token := AzureADMgt.GetAccessToken(AzureADMgt.GetO365Resource,AzureADMgt.GetO365ResourceName,false);

      if (Token = '') and not ISNULLGUID(ExchangeSync."Exchange Account Password Key") then
        if ServicePassword.GET(ExchangeSync."Exchange Account Password Key") then
          Password := ServicePassword.GetPassword;

      exit((Token <> '') or (Password <> ''));
    END;

    LOCAL PROCEDURE CheckUserAccess@5(BookingSync@1000 : Record "Booking Sync");
    VAR
      ExchangeSync@1004 : Record "Exchange Sync";
      ExchangeWebServicesServer@1003 : Codeunit "Exchange Web Services Server";
      Credentials@1005 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.ExchangeCredentials";
      ExchangeServiceFactory@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ServiceWrapperFactory";
      ExchangeService@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Exchange.ExchangeServiceWrapper";
    BEGIN
      ExchangeSync.GET(BookingSync."User ID");
      ExchangeService := ExchangeServiceFactory.CreateServiceWrapper2013;
      CreateExchangeAccountCredentials(ExchangeSync,Credentials);
      ExchangeService.SetNetworkCredential(Credentials);
      ExchangeService.ExchangeServiceUrl := ExchangeWebServicesServer.GetEndpoint;

      if not ExchangeService.CanAccessBookingMailbox(BookingSync."Booking Mailbox Address") then
        ERROR(NoUserAccessErr,BookingSync."Booking Mailbox Name",BookingSync."User ID");
    END;

    BEGIN
    END.
  }
}

