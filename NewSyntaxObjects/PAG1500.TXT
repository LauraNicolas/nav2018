OBJECT Page 1500 Workflows
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Workflows;
    SourceTable="Workflow Buffer";
    SourceTableView=WHERE(Template=CONST(false));
    PageType=List;
    SourceTableTemporary=true;
    RefreshOnActivate=true;
    PromotedActionCategoriesML=ENU=New,Process,Report,Manage,Flow;
    OnOpenPage=BEGIN
                 WorkflowSetup.InitWorkflow;
                 if not WorkflowBufferInitialized then
                   InitBufferForWorkflows(Rec);
               END;

    OnAfterGetRecord=VAR
                       WorkflowStep@1000 : Record "Workflow Step";
                       WorkflowMgt@1001 : Codeunit "Workflow Management";
                     BEGIN
                       RefreshTempWorkflowBuffer;
                       ExportEnabled := not ISEMPTY;
                       OnCondition := '';

                       if "Workflow Code" = '' then begin
                         DescriptionStyle := 'Strong';
                         ExternalLinkEnabled := false;
                       end else begin
                         DescriptionStyle := 'Standard';

                         // Enable/disable external links
                         CALCFIELDS("External Client ID");
                         ExternalLinkEnabled := not ISNULLGUID("External Client ID");

                         // Create the on condition display
                         WorkflowStep.SETRANGE("Workflow Code","Workflow Code");
                         WorkflowStep.SETRANGE("Entry Point",true);
                         if WorkflowStep.FINDFIRST then
                           OnCondition := WorkflowMgt.BuildConditionDisplay(WorkflowStep);
                       end
                     END;

    OnAfterGetCurrRecord=BEGIN
                           RefreshTempWorkflowBufferRow;
                         END;

    ActionList=ACTIONS
    {
      { 4       ;    ;ActionContainer;
                      Name=ActionContainer4;
                      ActionContainerType=ActionItems }
      { 23      ;1   ;ActionGroup;
                      Name=New;
                      CaptionML=ENU=New }
      { 17      ;2   ;Action    ;
                      Name=NewAction;
                      CaptionML=ENU=New;
                      ToolTipML=ENU=Create a new workflow.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=NewDocument;
                      PromotedCategory=New;
                      OnAction=VAR
                                 Workflow@1000 : Record Workflow;
                                 WorkflowPage@1001 : Page Workflow;
                               BEGIN
                                 if ISEMPTY then begin
                                   CLEAR(Rec);
                                   INSERT;
                                 end;
                                 Workflow.SETRANGE(Template,false);
                                 if Workflow.ISEMPTY then
                                   Workflow.INSERT;
                                 Workflow.FILTERGROUP := 2;
                                 WorkflowPage.SetOpenNew(true);
                                 WorkflowPage.SETTABLEVIEW(Workflow);
                                 WorkflowPage.SETRECORD(Workflow);
                                 WorkflowPage.RUN;
                               END;
                                }
      { 18      ;2   ;Action    ;
                      Name=CopyFromTemplate;
                      CaptionML=ENU=New Workflow from Template;
                      ToolTipML=ENU=Create a new workflow quickly using a template.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Copy;
                      PromotedCategory=New;
                      OnAction=VAR
                                 TempWorkflowBuffer@1000 : TEMPORARY Record "Workflow Buffer";
                               BEGIN
                                 if ISEMPTY then begin
                                   CLEAR(Rec);
                                   INSERT;
                                 end;
                                 if PAGE.RUNMODAL(PAGE::"Workflow Templates",TempWorkflowBuffer) = ACTION::LookupOK then begin
                                   CopyWorkflow(TempWorkflowBuffer);

                                   // If first workflow on an empty page
                                   if COUNT = 1 then
                                     Rec := TempWorkflowBuffer;

                                   RefreshTempWorkflowBuffer;
                                 end;
                               END;
                                }
      { 14      ;2   ;Action    ;
                      Name=CopyWorkflow;
                      CaptionML=ENU=Copy Workflow;
                      ToolTipML=ENU=Copy an existing workflow.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Enabled="Workflow Code" <> '';
                      PromotedIsBig=true;
                      Image=Copy;
                      PromotedCategory=New;
                      OnAction=BEGIN
                                 CopyWorkflow(Rec);
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      Name=Manage;
                      CaptionML=ENU=Manage }
      { 10      ;2   ;Action    ;
                      Name=EditAction;
                      ShortCutKey=Return;
                      CaptionML=ENU=Edit;
                      ToolTipML=ENU=Edit an existing workflow.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Enabled="Workflow Code" <> '';
                      PromotedIsBig=true;
                      Image=Edit;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 Workflow@1000 : Record Workflow;
                               BEGIN
                                 if Workflow.GET("Workflow Code") then
                                   PAGE.RUN(PAGE::Workflow,Workflow);
                               END;
                                }
      { 12      ;2   ;Action    ;
                      Name=ViewAction;
                      CaptionML=ENU=View;
                      ToolTipML=ENU=View an existing workflow.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled="Workflow Code" <> '';
                      PromotedIsBig=true;
                      Image=View;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 Workflow@1000 : Record Workflow;
                                 WorkflowPage@1001 : Page Workflow;
                               BEGIN
                                 Workflow.GET("Workflow Code");
                                 WorkflowPage.SETRECORD(Workflow);
                                 WorkflowPage.SetOpenView(true);
                                 WorkflowPage.RUN;
                               END;
                                }
      { 13      ;2   ;Action    ;
                      Name=DeleteAction;
                      CaptionML=ENU=Delete;
                      ToolTipML=ENU=Delete the record.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Enabled="Workflow Code" <> '';
                      PromotedIsBig=true;
                      Image=Delete;
                      PromotedCategory=Category4;
                      OnAction=BEGIN
                                 DELETE(true);
                                 CurrPage.UPDATE(false);
                               END;
                                }
      { 22      ;1   ;ActionGroup;
                      Name=Process;
                      CaptionML=ENU=Process }
      { 20      ;2   ;Action    ;
                      Name=ImportWorkflow;
                      CaptionML=ENU=Import from File;
                      ToolTipML=ENU=Import workflow from a file.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Import;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Workflow@1003 : Record Workflow;
                                 TempBlob@1000 : Record TempBlob;
                                 FileManagement@1001 : Codeunit "File Management";
                               BEGIN
                                 if FileManagement.BLOBImport(TempBlob,'') <> '' then begin
                                   Workflow.ImportFromBlob(TempBlob);
                                   RefreshTempWorkflowBuffer;
                                 end;
                               END;
                                }
      { 21      ;2   ;Action    ;
                      Name=ExportWorkflow;
                      CaptionML=ENU=Export to File;
                      ToolTipML=ENU=Export the workflow to a file that can be imported in another Dynamics 365 database.;
                      ApplicationArea=#Suite;
                      Promoted=true;
                      Enabled=ExportEnabled;
                      PromotedIsBig=true;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 Workflow@1003 : Record Workflow;
                                 TempBlob@1005 : Record TempBlob;
                                 FileManagement@1006 : Codeunit "File Management";
                                 Filter@1004 : Text;
                               BEGIN
                                 Filter := GetFilterFromSelection;
                                 if Filter = '' then
                                   exit;
                                 Workflow.SETFILTER(Code,Filter);
                                 Workflow.ExportToBlob(TempBlob);
                                 FileManagement.BLOBExport(TempBlob,'*.xml',true);
                               END;
                                }
      { 25      ;1   ;ActionGroup;
                      Name=Flow;
                      CaptionML=ENU=Flow }
      { 26      ;2   ;Action    ;
                      Name=WebhookClientLink;
                      CaptionML=ENU=View;
                      ToolTipML=ENU=View Flow Definition;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Enabled=ExternalLinkEnabled;
                      PromotedIsBig=true;
                      Image=Flow;
                      PromotedCategory=Category5;
                      Scope=Repeater;
                      OnAction=VAR
                                 WorkflowMgt@1001 : Codeunit "Workflow Management";
                               BEGIN
                                 CALCFIELDS("External Client Type");
                                 HYPERLINK(WorkflowMgt.GetWebhookClientLink("External Client ID","External Client Type"));
                               END;
                                }
      { 9       ;0   ;ActionContainer;
                      Name=ActionContainer9;
                      ActionContainerType=RelatedInformation }
      { 16      ;1   ;Action    ;
                      Name=ViewTemplates;
                      Ellipsis=true;
                      CaptionML=ENU=View Templates;
                      ToolTipML=ENU=View the existing workflow templates.;
                      ApplicationArea=#Suite;
                      RunObject=Page "Workflow Templates";
                      Image=ViewPage }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                IndentationColumnName=Indentation;
                IndentationControls=Description;
                ShowAsTree=true;
                GroupType=Repeater }

    { 11  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a description of the workflow.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Description;
                StyleExpr=DescriptionStyle;
                ImplicitType=Text100 }

    { 3   ;2   ;Field     ;
                Name=On Condition;
                CaptionML=ENU=On Condition;
                ToolTipML=ENU=Specifies the condition that moderates the workflow event that you specified in the Event Description field.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=OnCondition;
                ImplicitType=Text }

    { 15  ;2   ;Field     ;
                Name=Category Code;
                ToolTipML=ENU=Specifies the workflow type, such as Administration or Finance.;
                ApplicationArea=#Advanced;
                SourceExpr="Category Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 19  ;2   ;Field     ;
                Name=Workflow Code;
                ToolTipML=ENU=Specifies the workflow that the workflow step belongs to.;
                ApplicationArea=#Advanced;
                SourceExpr="Workflow Code";
                Visible=FALSE;
                ImplicitType=Code20 }

    { 5   ;2   ;Field     ;
                Name=Enabled;
                ToolTipML=ENU=Specifies if the workflow is enabled.;
                ApplicationArea=#Basic,#Suite;
                BlankZero=true;
                SourceExpr=Enabled;
                ImplicitType=Boolean }

    { 6   ;    ;Container ;
                Name=Container6;
                ContainerType=FactBoxArea }

    { 7   ;1   ;Part      ;
                Name=Part7;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

    { 8   ;1   ;Part      ;
                Name=Part8;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

  }
  CODE
  {
    VAR
      WorkflowSetup@1000 : Codeunit "Workflow Setup";
      DescriptionStyle@1002 : Text;
      ExportEnabled@1001 : Boolean;
      Refresh@1003 : Boolean;
      WorkflowBufferInitialized@1004 : Boolean;
      ExternalLinkEnabled@1005 : Boolean;
      OnCondition@1006 : Text;

    LOCAL PROCEDURE RefreshTempWorkflowBuffer@1();
    VAR
      Workflow@1001 : Record Workflow;
      TempWorkflowBuffer@1000 : TEMPORARY Record "Workflow Buffer";
      WorkflowCode@1004 : Code[20];
      CurrentWorkflowChanged@1002 : Boolean;
      WorkflowCountChanged@1003 : Boolean;
    BEGIN
      WorkflowCode := "Workflow Code";
      if Workflow.GET(WorkflowCode) then
        CurrentWorkflowChanged := ("Category Code" <> Workflow.Category) or (Description <> Workflow.Description)
      else
        CurrentWorkflowChanged := WorkflowCode <> '';

      Workflow.SETRANGE(Template,false);

      TempWorkflowBuffer.COPY(Rec,true);
      TempWorkflowBuffer.RESET;
      TempWorkflowBuffer.SETFILTER("Workflow Code",'<>%1','');
      TempWorkflowBuffer.SETRANGE(Template,false);

      WorkflowCountChanged := Workflow.COUNT <> TempWorkflowBuffer.COUNT;

      if CurrentWorkflowChanged or WorkflowCountChanged then begin
        InitBufferForWorkflows(Rec);
        Refresh := true;
      end;
    END;

    LOCAL PROCEDURE RefreshTempWorkflowBufferRow@9();
    VAR
      Workflow@1001 : Record Workflow;
    BEGIN
      if Refresh then begin
        CurrPage.UPDATE(false);
        Refresh := false;
        exit;
      end;

      if "Workflow Code" = '' then
        exit;

      Workflow.GET("Workflow Code");
      "Category Code" := Workflow.Category;
      Description := Workflow.Description;
      MODIFY;
    END;

    LOCAL PROCEDURE GetFilterFromSelection@3() Filter : Text;
    VAR
      TempWorkflowBuffer@1000 : TEMPORARY Record "Workflow Buffer";
    BEGIN
      TempWorkflowBuffer.COPY(Rec,true);
      CurrPage.SETSELECTIONFILTER(TempWorkflowBuffer);

      if TempWorkflowBuffer.FINDSET then
        repeat
          if TempWorkflowBuffer."Workflow Code" <> '' then
            if Filter = '' then
              Filter := TempWorkflowBuffer."Workflow Code"
            else
              Filter := STRSUBSTNO('%1|%2',Filter,TempWorkflowBuffer."Workflow Code");
        until TempWorkflowBuffer.NEXT = 0;
    END;

    [External]
    PROCEDURE SetWorkflowBufferRec@2(VAR TempWorkflowBuffer@1000 : TEMPORARY Record "Workflow Buffer");
    BEGIN
      WorkflowBufferInitialized := true;
      InitBufferForWorkflows(Rec);
      COPYFILTERS(TempWorkflowBuffer);
      if STRLEN(GETFILTER("Workflow Code")) > 0 then
        SETFILTER("Workflow Code",TempWorkflowBuffer.GETFILTER("Workflow Code") + '|''''');
      if FINDLAST then;
    END;

    BEGIN
    END.
  }
}

