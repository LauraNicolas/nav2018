OBJECT Codeunit 1299 Web Request Helper
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ConnectionErr@1001 : TextConst 'ENU=Connection to the remote service could not be established.\\';
      InvalidUriErr@1002 : TextConst 'ENU=The URI is not valid.';
      NonSecureUriErr@1004 : TextConst 'ENU=The URI is not secure.';
      ProcessingWindowMsg@1003 : TextConst 'ENU=Please wait while the server is processing your request.\This may take several minutes.';
      ServiceURLTxt@1000 : TextConst '@@@=Example: ServiceURL: http://www.contoso.com/;ENU=\\Service URL: %1.';
      GlobalHttpWebResponseError@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";

    [TryFunction]
    [External]
    PROCEDURE IsValidUri@6(Url@1001 : Text);
    VAR
      ResultUri@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      Uri@1000 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
      UriKind@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.UriKind";
    BEGIN
      if not Uri.IsWellFormedUriString(Url,UriKind.Absolute) then
        if not Uri.TryCreate(Url,UriKind.Absolute,ResultUri) then
          ERROR(InvalidUriErr);
    END;

    [TryFunction]
    [External]
    PROCEDURE IsValidUriWithoutProtocol@3(Url@1001 : Text);
    BEGIN
      if not IsValidUri(Url) then
        if not IsValidUri('http://' + Url) then
          ERROR(InvalidUriErr);
    END;

    [TryFunction]
    [External]
    PROCEDURE IsSecureHttpUrl@8(Url@1000 : Text);
    VAR
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IsValidUri(Url);
      Uri := Uri.Uri(Url);
      if Uri.Scheme <> 'https' then
        ERROR(NonSecureUriErr);
    END;

    [TryFunction]
    [External]
    PROCEDURE IsHttpUrl@2(Url@1000 : Text);
    VAR
      Uri@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Uri";
    BEGIN
      IsValidUri(Url);
      Uri := Uri.Uri(Url);
      if (Uri.Scheme <> 'http') and (Uri.Scheme <> 'https') then
        ERROR(InvalidUriErr);
    END;

    [TryFunction]
    [Internal]
    PROCEDURE GetWebResponse@1(VAR HttpWebRequest@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";VAR HttpWebResponse@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";VAR ResponseInStream@1002 : InStream;VAR HttpStatusCode@1005 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";VAR ResponseHeaders@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Specialized.NameValueCollection";ProgressDialogEnabled@1003 : Boolean);
    VAR
      ProcessingWindow@1000 : Dialog;
    BEGIN
      if ProgressDialogEnabled then
        ProcessingWindow.OPEN(ProcessingWindowMsg);

      CLEARLASTERROR;
      HttpWebResponse := HttpWebRequest.GetResponse;
      HttpWebResponse.GetResponseStream.CopyTo(ResponseInStream);
      HttpStatusCode := HttpWebResponse.StatusCode;
      ResponseHeaders := HttpWebResponse.Headers;

      if ProgressDialogEnabled then
        ProcessingWindow.CLOSE;
    END;

    [Internal]
    PROCEDURE GetWebResponseError@15(VAR WebException@1001 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebException";VAR ServiceURL@1006 : Text) : Text;
    VAR
      DotNetExceptionHandler@1000 : Codeunit "DotNet Exception Handler";
      WebExceptionStatus@1004 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.WebExceptionStatus";
      HttpStatusCode@1008 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpStatusCode";
      ErrorText@1009 : Text;
    BEGIN
      DotNetExceptionHandler.Collect;

      if not DotNetExceptionHandler.CastToType(WebException,GETDOTNETTYPE(WebException)) then
        DotNetExceptionHandler.Rethrow;

      if not ISNULL(WebException.Response) then
        if not ISNULL(WebException.Response.ResponseUri) then
          ServiceURL := STRSUBSTNO(ServiceURLTxt,WebException.Response.ResponseUri.AbsoluteUri);

      ErrorText := ConnectionErr + WebException.Message + ServiceURL;
      if not WebException.Status.Equals(WebExceptionStatus.ProtocolError) then
        exit(ErrorText);

      if ISNULL(WebException.Response) then
        DotNetExceptionHandler.Rethrow;

      GlobalHttpWebResponseError := WebException.Response;
      if not (GlobalHttpWebResponseError.StatusCode.Equals(HttpStatusCode.Found) or
              GlobalHttpWebResponseError.StatusCode.Equals(HttpStatusCode.InternalServerError))
      then
        exit(ErrorText);

      exit('');
    END;

    [TryFunction]
    PROCEDURE GetResponseText@11(Url@1004 : Text;AccessToken@1001 : Text;VAR ResponseText@1010 : Text);
    VAR
      TempBlob@1000 : Record TempBlob;
      HttpWebRequest@1002 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebRequest";
      HttpWebResponse@1003 : DotNet "'System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Net.HttpWebResponse";
      ResponseInputStream@1005 : InStream;
      ChunkText@1009 : Text;
    BEGIN
      HttpWebRequest := HttpWebRequest.Create(Url);
      HttpWebRequest.Method := 'GET';
      HttpWebRequest.ContentLength := 0;
      // add the access token to the authorization bearer header
      HttpWebRequest.Headers.Add('Authorization','Bearer ' + AccessToken);
      HttpWebResponse := HttpWebRequest.GetResponse;

      TempBlob.INIT;
      TempBlob.Blob.CREATEINSTREAM(ResponseInputStream);
      HttpWebResponse.GetResponseStream.CopyTo(ResponseInputStream);

      // the READTEXT() function apparently only reads a single line, so we must loop through the stream to get the contents of every line.
      while not ResponseInputStream.EOS do begin
        ResponseInputStream.READTEXT(ChunkText);
        ResponseText += ChunkText;
      end;

      HttpWebResponse.Close; // close connection
      HttpWebResponse.Dispose; // cleanup of IDisposable
    END;

    BEGIN
    END.
  }
}

