OBJECT Codeunit 1313 Correct Posted Purch. Invoice
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Purch. Inv. Header";
    Permissions=TableData "Purch. Inv. Header"=rm,
                TableData "Purch. Cr. Memo Hdr."=rm;
    OnRun=VAR
            PurchaseHeader@1001 : Record "Purchase Header";
            CopyDocMgt@1000 : Codeunit "Copy Document Mgt.";
            ItemJnlPostLine@1002 : Codeunit "Item Jnl.-Post Line";
            RedoApplications@1003 : Boolean;
          BEGIN
            RedoApplications := UnapplyCostApplication(ItemJnlPostLine,"No.");

            CLEAR(PurchaseHeader);
            PurchaseHeader."No." := '';
            PurchaseHeader."Document Type" := PurchaseHeader."Document Type"::"Credit Memo";
            PurchaseHeader.INSERT(true);
            CopyDocMgt.SetPropertiesForCreditMemoCorrection;
            CopyDocMgt.CopyPurchaseDocForInvoiceCancelling("No.",PurchaseHeader);
            PurchaseHeader."Vendor Cr. Memo No." := PurchaseHeader."No.";

            CODEUNIT.RUN(CODEUNIT::"Purch.-Post",PurchaseHeader);
            SetTrackInfoForCancellation(Rec);
            if RedoApplications then
              ItemJnlPostLine.RedoApplications;
            COMMIT;
          END;

  }
  CODE
  {
    VAR
      PostedInvoiceIsPaidCorrectErr@1000 : TextConst 'ENU=You cannot correct this posted purchase invoice because it is fully or partially paid.\\To reverse a paid purchase invoice, you must manually create a purchase credit memo.';
      PostedInvoiceIsPaidCCancelErr@1019 : TextConst 'ENU=You cannot cancel this posted purchase invoice because it is fully or partially paid.\\To reverse a paid purchase invoice, you must manually create a purchase credit memo.';
      AlreadyCorrectedErr@1001 : TextConst 'ENU=You cannot correct this posted purchase invoice because it has been canceled.';
      AlreadyCancelledErr@1005 : TextConst 'ENU=You cannot cancel this posted purchase invoice because it has already been canceled.';
      CorrCorrectiveDocErr@1045 : TextConst 'ENU=You cannot correct this posted purchase invoice because it represents a correction of a credit memo.';
      CancelCorrectiveDocErr@1044 : TextConst 'ENU=You cannot cancel this posted purchase invoice because it represents a correction of a credit memo.';
      VendorIsBlockedCorrectErr@1002 : TextConst '@@@="%1 = Customer name";ENU=You cannot correct this posted purchase invoice because vendor %1 is blocked.';
      VendorIsBlockedCancelErr@1016 : TextConst '@@@="%1 = Customer name";ENU=You cannot cancel this posted purchase invoice because vendor %1 is blocked.';
      ItemIsBlockedCorrectErr@1003 : TextConst '@@@="%1 = Item No. %2 = Item Description";ENU=You cannot correct this posted purchase invoice because item %1 %2 is blocked.';
      ItemIsBlockedCancelErr@1017 : TextConst '@@@="%1 = Item No. %2 = Item Description";ENU=You cannot cancel this posted purchase invoice because item %1 %2 is blocked.';
      AccountIsBlockedCorrectErr@1018 : TextConst '@@@="%1 = Table Caption %2 = Account number.";ENU=You cannot correct this posted purchase invoice because %1 %2 is blocked.';
      AccountIsBlockedCancelErr@1025 : TextConst '@@@="%1 = Table Caption %2 = Account number.";ENU=You cannot cancel this posted purchase invoice because %1 %2 is blocked.';
      NoFreeInvoiceNoSeriesCorrectErr@1004 : TextConst 'ENU=You cannot correct this posted purchase invoice because no unused invoice numbers are available. \\You must extend the range of the number series for purchase invoices.';
      NoFreeInvoiceNoSeriesCancelErr@1026 : TextConst 'ENU=You cannot cancel this posted purchase invoice because no unused invoice numbers are available. \\You must extend the range of the number series for purchase invoices.';
      NoFreeCMSeriesCorrectErr@1013 : TextConst 'ENU=You cannot correct this posted purchase invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.';
      NoFreeCMSeriesCancelErr@1027 : TextConst 'ENU=You cannot cancel this posted purchase invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.';
      NoFreePostCMSeriesCorrectErr@1028 : TextConst 'ENU=You cannot correct this posted purchase invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.';
      NoFreePostCMSeriesCancelErr@1029 : TextConst 'ENU=You cannot cancel this posted purchase invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.';
      PurchaseLineFromOrderCorrectErr@1006 : TextConst '@@@="%1 = Item no. %2 = Item description";ENU=You cannot correct this posted purchase invoice because item %1 %2 is used on a purchase order.';
      PurchaseLineFromOrderCancelErr@1030 : TextConst '@@@="%1 = Item no. %2 = Item description";ENU=You cannot cancel this posted purchase invoice because item %1 %2 is used on a purchase order.';
      ShippedQtyReturnedCorrectErr@1007 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted purchase invoice because item %1 %2 has already been fully or partially returned.';
      ShippedQtyReturnedCancelErr@1031 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted purchase invoice because item %1 %2 has already been fully or partially returned.';
      UsedInJobCorrectErr@1008 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted purchase invoice because item %1 %2 is used in a job.';
      UsedInJobCancelErr@1032 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted purchase invoice because item %1 %2 is used in a job.';
      PostingNotAllowedCorrectErr@1009 : TextConst 'ENU=You cannot correct this posted purchase invoice because it was posted in a posting period that is closed.';
      PostingNotAllowedCancelErr@1033 : TextConst 'ENU=You cannot cancel this posted purchase invoice because it was posted in a posting period that is closed.';
      InvoiceIsBasedOnOrderCorrectErr@1010 : TextConst 'ENU=You cannot correct this posted purchase invoice because the invoice is based on a purchase order.';
      InvoiceIsBasedOnOrderCancelErr@1034 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the invoice is based on a purchase order.';
      LineTypeNotAllowedCorrectErr@1012 : TextConst '@@@="%1 = Item no. %2 = Item description %3 = Item type.";ENU=You cannot correct this posted purchase invoice because the purchase invoice line for %1 %2 is of type %3, which is not allowed on a simplified purchase invoice.';
      LineTypeNotAllowedCancelErr@1036 : TextConst '@@@="%1 = Item no. %2 = Item description %3 = Item type.";ENU=You cannot cancel this posted purchase invoice because the purchase invoice line for %1 %2 is of type %3, which is not allowed on a simplified purchase invoice.';
      CancellingOnly@1014 : Boolean;
      InvalidDimCodeCorrectErr@1037 : TextConst '@@@="%1 = Table caption %2 = Account number %3 = Item no. %4 = Item description.";ENU=You cannot correct this posted purchase invoice because the dimension rule setup for account ''%1'' %2 prevents %3 %4 from being canceled.';
      InvalidDimCodeCancelErr@1038 : TextConst '@@@="%1 = Table caption %2 = Account number %3 = Item no. %4 = Item description.";ENU=You cannot cancel this posted purchase invoice because the dimension rule setup for account ''%1'' %2 prevents %3 %4 from being canceled.';
      InvalidDimCombinationCorrectErr@1023 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted purchase invoice because the dimension combination for item %1 %2 is not allowed.';
      InvalidDimCombinationCancelErr@1039 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted purchase invoice because the dimension combination for item %1 %2 is not allowed.';
      InvalidDimCombHeaderCorrectErr@1011 : TextConst 'ENU=You cannot correct this posted purchase invoice because the combination of dimensions on the invoice is blocked.';
      InvalidDimCombHeaderCancelErr@1035 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the combination of dimensions on the invoice is blocked.';
      ExternalDocCorrectErr@1015 : TextConst 'ENU=You cannot correct this posted purchase invoice because the external document number is required on the invoice.';
      ExternalDocCancelErr@1040 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the external document number is required on the invoice.';
      InventoryPostClosedCorrectErr@1041 : TextConst 'ENU=You cannot correct this posted purchase invoice because the posting inventory period is already closed.';
      InventoryPostClosedCancelErr@1042 : TextConst 'ENU=You cannot cancel this posted purchase invoice because the posting inventory period is already closed.';
      PostingCreditMemoFailedOpenPostedCMQst@1020 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is posted. Do you want to open the posted credit memo?';
      PostingCreditMemoFailedOpenCMQst@1021 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is created but not posted. Do you want to open the credit memo?';
      CreatingCreditMemoFailedNothingCreatedErr@1022 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1.';
      ErrorType@1024 : 'IsPaid,VendorBlocked,ItemBlocked,AccountBlocked,IsCorrected,IsCorrective,SerieNumInv,SerieNumCM,SerieNumPostCM,ItemIsReturned,FromOrder,PostingNotAllowed,LineFromOrder,WrongItemType,LineFromJob,DimErr,DimCombErr,DimCombHeaderErr,ExtDocErr,InventoryPostClosed';
      WrongDocumentTypeForCopyDocumentErr@1043 : TextConst 'ENU=You cannot correct or cancel this type of document.';

    [Internal]
    PROCEDURE CancelPostedInvoice@4(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header") : Boolean;
    BEGIN
      CancellingOnly := true;
      exit(CreateCreditMemo(PurchInvHeader));
    END;

    LOCAL PROCEDURE CreateCreditMemo@13(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header") : Boolean;
    VAR
      PurchaseHeader@1004 : Record "Purchase Header";
      PurchCrMemoHdr@1005 : Record "Purch. Cr. Memo Hdr.";
    BEGIN
      TestCorrectInvoiceIsAllowed(PurchInvHeader,CancellingOnly);
      if not CODEUNIT.RUN(CODEUNIT::"Correct Posted Purch. Invoice",PurchInvHeader) then begin
        PurchCrMemoHdr.SETRANGE("Applies-to Doc. No.",PurchInvHeader."No.");
        if PurchCrMemoHdr.FINDFIRST then begin
          if CONFIRM(STRSUBSTNO(PostingCreditMemoFailedOpenPostedCMQst,GETLASTERRORTEXT)) then
            PAGE.RUN(PAGE::"Posted Purchase Credit Memo",PurchCrMemoHdr);
        end else begin
          PurchaseHeader.SETRANGE("Applies-to Doc. No.",PurchInvHeader."No.");
          if PurchaseHeader.FINDFIRST then begin
            if CONFIRM(STRSUBSTNO(PostingCreditMemoFailedOpenCMQst,GETLASTERRORTEXT)) then
              PAGE.RUN(PAGE::"Purchase Credit Memo",PurchaseHeader);
          end else
            ERROR(CreatingCreditMemoFailedNothingCreatedErr,GETLASTERRORTEXT);
        end;
        exit(false);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CreateCopyDocument@16(VAR PurchInvHeader@1002 : Record "Purch. Inv. Header";VAR PurchaseHeader@1001 : Record "Purchase Header";DocumentType@1000 : Option;SkipCopyFromDescription@1004 : Boolean);
    VAR
      CopyDocMgt@1003 : Codeunit "Copy Document Mgt.";
    BEGIN
      CLEAR(PurchaseHeader);
      PurchaseHeader."Document Type" := DocumentType;
      PurchaseHeader."No." := '';
      PurchaseHeader.SetAllowSelectNoSeries;
      PurchaseHeader.INSERT(true);

      case DocumentType of
        PurchaseHeader."Document Type"::"Credit Memo":
          CopyDocMgt.SetPropertiesForCreditMemoCorrection;
        PurchaseHeader."Document Type"::Invoice:
          CopyDocMgt.SetPropertiesForInvoiceCorrection(SkipCopyFromDescription);
        else
          ERROR(WrongDocumentTypeForCopyDocumentErr);
      end;

      CopyDocMgt.CopyPurchaseDocForInvoiceCancelling(PurchInvHeader."No.",PurchaseHeader);
    END;

    [External]
    PROCEDURE CreateCreditMemoCopyDocument@11(VAR PurchInvHeader@1001 : Record "Purch. Inv. Header";VAR PurchaseHeader@1000 : Record "Purchase Header");
    BEGIN
      CreateCopyDocument(PurchInvHeader,PurchaseHeader,PurchaseHeader."Document Type"::"Credit Memo",false);
    END;

    [Internal]
    PROCEDURE CancelPostedInvoiceStartNewInvoice@1(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header";VAR PurchaseHeader@1002 : Record "Purchase Header");
    BEGIN
      CancellingOnly := false;

      if CreateCreditMemo(PurchInvHeader) then begin
        CreateCopyDocument(PurchInvHeader,PurchaseHeader,PurchaseHeader."Document Type"::Invoice,true);
        COMMIT;
      end;
    END;

    [External]
    PROCEDURE TestCorrectInvoiceIsAllowed@5(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header";Cancelling@1001 : Boolean);
    BEGIN
      CancellingOnly := Cancelling;

      PurchInvHeader.CALCFIELDS(Amount);
      PurchInvHeader.TESTFIELD(Amount);
      TestIfPostingIsAllowed(PurchInvHeader);
      TestIfInvoiceIsCorrectedOnce(PurchInvHeader);
      TestIfInvoiceIsNotCorrectiveDoc(PurchInvHeader);
      TestIfInvoiceIsPaid(PurchInvHeader);
      TestIfVendorIsBlocked(PurchInvHeader,PurchInvHeader."Buy-from Vendor No.");
      TestIfVendorIsBlocked(PurchInvHeader,PurchInvHeader."Pay-to Vendor No.");
      TestVendorDimension(PurchInvHeader,PurchInvHeader."Pay-to Vendor No.");
      TestDimensionOnHeader(PurchInvHeader);
      TestPurchaseLines(PurchInvHeader);
      TestIfAnyFreeNumberSeries(PurchInvHeader);
      TestIfInvoiceIsBasedOnOrder(PurchInvHeader);
      TestExternalDocument(PurchInvHeader);
      TestInventoryPostingClosed(PurchInvHeader);
    END;

    LOCAL PROCEDURE SetTrackInfoForCancellation@2(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      PurchCrMemoHdr@1001 : Record "Purch. Cr. Memo Hdr.";
      CancelledDocument@1002 : Record "Cancelled Document";
    BEGIN
      PurchCrMemoHdr.SETRANGE("Applies-to Doc. No.",PurchInvHeader."No.");
      if PurchCrMemoHdr.FINDLAST then
        CancelledDocument.InsertPurchInvToCrMemoCancelledDocument(PurchInvHeader."No.",PurchCrMemoHdr."No.");
    END;

    LOCAL PROCEDURE TestDimensionOnHeader@15(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      DimensionManagement@1001 : Codeunit DimensionManagement;
    BEGIN
      if not DimensionManagement.CheckDimIDComb(PurchInvHeader."Dimension Set ID") then
        ErrorHelperHeader(ErrorType::DimCombHeaderErr,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfVendorIsBlocked@9(PurchInvHeader@1000 : Record "Purch. Inv. Header";VendNo@1005 : Code[20]);
    VAR
      Vendor@1001 : Record Vendor;
    BEGIN
      Vendor.GET(VendNo);
      if Vendor.Blocked in [Vendor.Blocked::All] then
        ErrorHelperHeader(ErrorType::VendorBlocked,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestVendorDimension@3(PurchInvHeader@1000 : Record "Purch. Inv. Header";VendNo@1005 : Code[20]);
    VAR
      Vendor@1001 : Record Vendor;
      DimensionManagement@1004 : Codeunit DimensionManagement;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      Vendor.GET(VendNo);
      TableID[1] := DATABASE::Vendor;
      No[1] := Vendor."No.";
      if not DimensionManagement.CheckDimValuePosting(TableID,No,PurchInvHeader."Dimension Set ID") then
        ErrorHelperAccount(ErrorType::DimErr,Vendor.TABLECAPTION,Vendor."No.",Vendor."No.",Vendor.Name);
    END;

    LOCAL PROCEDURE TestPurchaseLines@6(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      PurchRcptLine@1004 : Record "Purch. Rcpt. Line";
      PurchInvLine@1001 : Record "Purch. Inv. Line";
      Item@1002 : Record Item;
      DimensionManagement@1007 : Codeunit DimensionManagement;
      ReceivedQtyNoReturned@1005 : Decimal;
      RevUnitCostLCY@1006 : Decimal;
      TableID@1013 : ARRAY [10] OF Integer;
      No@1014 : ARRAY [10] OF Code[20];
    BEGIN
      PurchInvLine.SETRANGE("Document No.",PurchInvHeader."No.");
      if PurchInvLine.FIND('-') then
        repeat
          if not IsCommentLine(PurchInvLine) then begin
            if PurchRcptLine.GET(PurchInvLine."Receipt No.",PurchInvLine."Receipt Line No.") then begin
              if PurchRcptLine."Order No." <> '' then
                ErrorHelperLine(ErrorType::LineFromOrder,PurchInvLine);
            end;

            if (not PurchInvLine.IsCancellationSupported) and NotInvRndAccount(PurchInvHeader."Vendor Posting Group",PurchInvLine) then
              ErrorHelperLine(ErrorType::WrongItemType,PurchInvLine);

            if PurchInvLine.Type = PurchInvLine.Type::Item then begin
              Item.GET(PurchInvLine."No.");

              if Item.Type <> Item.Type::Service then
                if (PurchInvLine.Quantity > 0) and (PurchInvLine."Job No." = '') and WasNotCancelled(PurchInvHeader."No.") then begin
                  PurchInvLine.CalcReceivedPurchNotReturned(ReceivedQtyNoReturned,RevUnitCostLCY,false);
                  if PurchInvLine.Quantity <> ReceivedQtyNoReturned then
                    ErrorHelperLine(ErrorType::ItemIsReturned,PurchInvLine);
                end;

              if Item.Blocked then
                ErrorHelperLine(ErrorType::ItemBlocked,PurchInvLine);

              TableID[1] := DATABASE::Item;
              No[1] := PurchInvLine."No.";
              if not DimensionManagement.CheckDimValuePosting(TableID,No,PurchInvLine."Dimension Set ID") then
                ErrorHelperAccount(ErrorType::DimErr,Item.TABLECAPTION,No[1],Item."No.",Item.Description);

              if Item.Type <> Item.Type::Service then
                TestInventoryPostingSetup(PurchInvLine);

              TestGenPostingSetup(PurchInvLine);
              TestVendorPostingGroup(PurchInvLine,PurchInvHeader."Vendor Posting Group");
              TestVATPostingSetup(PurchInvLine);

              if not DimensionManagement.CheckDimIDComb(PurchInvLine."Dimension Set ID") then
                ErrorHelperLine(ErrorType::DimCombErr,PurchInvLine);
            end;
          end;
        until PurchInvLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGLAccount@21(AccountNo@1000 : Code[20];PurchInvLine@1005 : Record "Purch. Inv. Line");
    VAR
      GLAccount@1001 : Record "G/L Account";
      Item@1006 : Record Item;
      DimensionManagement@1004 : Codeunit DimensionManagement;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      GLAccount.GET(AccountNo);
      if GLAccount.Blocked then
        ErrorHelperAccount(ErrorType::AccountBlocked,GLAccount.TABLECAPTION,AccountNo,'','');
      TableID[1] := DATABASE::"G/L Account";
      No[1] := AccountNo;
      Item.GET(PurchInvLine."No.");
      if not DimensionManagement.CheckDimValuePosting(TableID,No,PurchInvLine."Dimension Set ID") then
        ErrorHelperAccount(ErrorType::DimErr,GLAccount.TABLECAPTION,AccountNo,Item."No.",Item.Description);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsPaid@7(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    BEGIN
      PurchInvHeader.CALCFIELDS("Amount Including VAT");
      PurchInvHeader.CALCFIELDS("Remaining Amount");
      if PurchInvHeader."Amount Including VAT" <> PurchInvHeader."Remaining Amount" then
        ErrorHelperHeader(ErrorType::IsPaid,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsCorrectedOnce@10(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      CancelledDocument@1001 : Record "Cancelled Document";
    BEGIN
      if CancelledDocument.FindPurchCancelledInvoice(PurchInvHeader."No.") then
        ErrorHelperHeader(ErrorType::IsCorrected,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsNotCorrectiveDoc@32(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      CancelledDocument@1001 : Record "Cancelled Document";
    BEGIN
      if CancelledDocument.FindPurchCorrectiveInvoice(PurchInvHeader."No.") then
        ErrorHelperHeader(ErrorType::IsCorrective,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfPostingIsAllowed@12(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      GenJnlCheckLine@1001 : Codeunit "Gen. Jnl.-Check Line";
    BEGIN
      if GenJnlCheckLine.DateNotAllowed(PurchInvHeader."Posting Date") then
        ErrorHelperHeader(ErrorType::PostingNotAllowed,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfAnyFreeNumberSeries@14(PurchInvHeader@1003 : Record "Purch. Inv. Header");
    VAR
      PurchasesPayablesSetup@1001 : Record "Purchases & Payables Setup";
      NoSeriesManagement@1002 : Codeunit NoSeriesManagement;
      PostingDate@1000 : Date;
    BEGIN
      PostingDate := WORKDATE;
      PurchasesPayablesSetup.GET;

      if NoSeriesManagement.TryGetNextNo(PurchasesPayablesSetup."Credit Memo Nos.",PostingDate) = '' then
        ErrorHelperHeader(ErrorType::SerieNumCM,PurchInvHeader);

      if NoSeriesManagement.TryGetNextNo(PurchasesPayablesSetup."Posted Credit Memo Nos.",PostingDate) = '' then
        ErrorHelperHeader(ErrorType::SerieNumPostCM,PurchInvHeader);

      if (not CancellingOnly) and (NoSeriesManagement.TryGetNextNo(PurchasesPayablesSetup."Invoice Nos.",PostingDate) = '') then
        ErrorHelperHeader(ErrorType::SerieNumInv,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsBasedOnOrder@17(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    BEGIN
      if PurchInvHeader."Order No." <> '' then
        ErrorHelperHeader(ErrorType::FromOrder,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestExternalDocument@8(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      PurchasesPayablesSetup@1001 : Record "Purchases & Payables Setup";
    BEGIN
      PurchasesPayablesSetup.GET;
      if (PurchInvHeader."Vendor Invoice No." = '') and PurchasesPayablesSetup."Ext. Doc. No. Mandatory" then
        ErrorHelperHeader(ErrorType::ExtDocErr,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestInventoryPostingClosed@26(PurchInvHeader@1000 : Record "Purch. Inv. Header");
    VAR
      InventoryPeriod@1001 : Record "Inventory Period";
    BEGIN
      InventoryPeriod.SETRANGE(Closed,true);
      InventoryPeriod.SETFILTER("Ending Date",'>=%1',PurchInvHeader."Posting Date");
      if InventoryPeriod.FINDFIRST then
        ErrorHelperHeader(ErrorType::InventoryPostClosed,PurchInvHeader);
    END;

    LOCAL PROCEDURE TestGenPostingSetup@20(PurchInvLine@1000 : Record "Purch. Inv. Line");
    VAR
      GenPostingSetup@1001 : Record "General Posting Setup";
    BEGIN
      with GenPostingSetup do begin
        GET(PurchInvLine."Gen. Bus. Posting Group",PurchInvLine."Gen. Prod. Posting Group");
        TESTFIELD("Purch. Account");
        TestGLAccount("Purch. Account",PurchInvLine);
        TESTFIELD("Purch. Credit Memo Account");
        TestGLAccount("Purch. Credit Memo Account",PurchInvLine);
        TESTFIELD("Direct Cost Applied Account");
        TestGLAccount("Direct Cost Applied Account",PurchInvLine);
        TESTFIELD("Purch. Line Disc. Account");
        TestGLAccount("Purch. Line Disc. Account",PurchInvLine);
      end;
    END;

    LOCAL PROCEDURE TestVendorPostingGroup@27(PurchInvLine@1000 : Record "Purch. Inv. Line";VendorPostingGr@1002 : Code[20]);
    VAR
      VendorPostingGroup@1001 : Record "Vendor Posting Group";
    BEGIN
      with VendorPostingGroup do begin
        GET(VendorPostingGr);
        TESTFIELD("Payables Account");
        TestGLAccount("Payables Account",PurchInvLine);
      end;
    END;

    LOCAL PROCEDURE TestVATPostingSetup@29(PurchInvLine@1000 : Record "Purch. Inv. Line");
    VAR
      VATPostingSetup@1001 : Record "VAT Posting Setup";
    BEGIN
      with VATPostingSetup do begin
        GET(PurchInvLine."VAT Bus. Posting Group",PurchInvLine."VAT Prod. Posting Group");
        if "VAT Calculation Type" <> "VAT Calculation Type"::"Sales Tax" then begin
          TESTFIELD("Purchase VAT Account");
          TestGLAccount("Purchase VAT Account",PurchInvLine);
        end;
      end;
    END;

    LOCAL PROCEDURE TestInventoryPostingSetup@39(PurchInvLine@1000 : Record "Purch. Inv. Line");
    VAR
      InventoryPostingSetup@1001 : Record "Inventory Posting Setup";
    BEGIN
      with InventoryPostingSetup do begin
        GET(PurchInvLine."Location Code",PurchInvLine."Posting Group");
        TESTFIELD("Inventory Account");
        TestGLAccount("Inventory Account",PurchInvLine);
      end;
    END;

    LOCAL PROCEDURE IsCommentLine@18(PurchInvLine@1000 : Record "Purch. Inv. Line") : Boolean;
    BEGIN
      exit((PurchInvLine.Type = PurchInvLine.Type::" ") or (PurchInvLine."No." = ''));
    END;

    LOCAL PROCEDURE WasNotCancelled@31(InvNo@1000 : Code[20]) : Boolean;
    VAR
      PurchCrMemoHdr@1001 : Record "Purch. Cr. Memo Hdr.";
    BEGIN
      PurchCrMemoHdr.SETRANGE("Applies-to Doc. Type",PurchCrMemoHdr."Applies-to Doc. Type"::Invoice);
      PurchCrMemoHdr.SETRANGE("Applies-to Doc. No.",InvNo);
      exit(PurchCrMemoHdr.ISEMPTY);
    END;

    LOCAL PROCEDURE NotInvRndAccount@19(VendorPostingGroupCode@1000 : Code[20];PurchInvLine@1003 : Record "Purch. Inv. Line") : Boolean;
    VAR
      VendorPostingGroup@1001 : Record "Vendor Posting Group";
    BEGIN
      if PurchInvLine.Type <> PurchInvLine.Type::"G/L Account" then
        exit(true);

      VendorPostingGroup.GET(VendorPostingGroupCode);
      exit((VendorPostingGroup."Invoice Rounding Account" <> PurchInvLine."No.") or (not PurchInvLine."System-Created Entry"));
    END;

    LOCAL PROCEDURE UnapplyCostApplication@25(VAR ItemJnlPostLine@1001 : Codeunit "Item Jnl.-Post Line";InvNo@1000 : Code[20]) : Boolean;
    VAR
      TempItemLedgEntry@1003 : TEMPORARY Record "Item Ledger Entry";
      TempItemApplicationEntry@1002 : TEMPORARY Record "Item Application Entry";
    BEGIN
      FindItemLedgEntries(TempItemLedgEntry,InvNo);
      if FindAppliedInbndEntries(TempItemApplicationEntry,TempItemLedgEntry) then begin
        repeat
          ItemJnlPostLine.UnApply(TempItemApplicationEntry);
        until TempItemApplicationEntry.NEXT = 0;
        exit(true);
      end;
    END;

    LOCAL PROCEDURE FindItemLedgEntries@30(VAR ItemLedgEntry@1002 : Record "Item Ledger Entry";InvNo@1000 : Code[20]);
    VAR
      PurchInvLine@1001 : Record "Purch. Inv. Line";
    BEGIN
      with PurchInvLine do begin
        SETRANGE("Document No.",InvNo);
        SETRANGE(Type,Type::Item);
        if FINDSET then
          repeat
            GetItemLedgEntries(ItemLedgEntry,false);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE FindAppliedInbndEntries@28(VAR TempItemApplicationEntry@1000 : TEMPORARY Record "Item Application Entry";VAR ItemLedgEntry@1001 : Record "Item Ledger Entry") : Boolean;
    VAR
      ItemApplicationEntry@1002 : Record "Item Application Entry";
    BEGIN
      TempItemApplicationEntry.RESET;
      TempItemApplicationEntry.DELETEALL;
      if ItemLedgEntry.FINDSET then
        repeat
          if ItemApplicationEntry.AppliedOutbndEntryExists(ItemLedgEntry."Entry No.",true,false) then
            repeat
              TempItemApplicationEntry := ItemApplicationEntry;
              if not TempItemApplicationEntry.FIND then
                TempItemApplicationEntry.INSERT;
            until ItemApplicationEntry.NEXT = 0;
        until ItemLedgEntry.NEXT = 0;
      exit(TempItemApplicationEntry.FINDSET);
    END;

    LOCAL PROCEDURE ErrorHelperHeader@22(ErrorOption@1000 : Option;PurchInvHeader@1001 : Record "Purch. Inv. Header");
    VAR
      Vendor@1003 : Record Vendor;
    BEGIN
      if CancellingOnly then
        case ErrorOption of
          ErrorType::IsPaid:
            ERROR(PostedInvoiceIsPaidCCancelErr);
          ErrorType::VendorBlocked:
            begin
              Vendor.GET(PurchInvHeader."Pay-to Vendor No.");
              ERROR(VendorIsBlockedCancelErr,Vendor.Name);
            end;
          ErrorType::IsCorrected:
            ERROR(AlreadyCancelledErr);
          ErrorType::IsCorrective:
            ERROR(CancelCorrectiveDocErr);
          ErrorType::SerieNumInv:
            ERROR(NoFreeInvoiceNoSeriesCancelErr);
          ErrorType::SerieNumCM:
            ERROR(NoFreeCMSeriesCancelErr);
          ErrorType::SerieNumPostCM:
            ERROR(NoFreePostCMSeriesCancelErr);
          ErrorType::FromOrder:
            ERROR(InvoiceIsBasedOnOrderCancelErr);
          ErrorType::PostingNotAllowed:
            ERROR(PostingNotAllowedCancelErr);
          ErrorType::ExtDocErr:
            ERROR(ExternalDocCancelErr);
          ErrorType::InventoryPostClosed:
            ERROR(InventoryPostClosedCancelErr);
          ErrorType::DimCombHeaderErr:
            ERROR(InvalidDimCombHeaderCancelErr);
        end
      else
        case ErrorOption of
          ErrorType::IsPaid:
            ERROR(PostedInvoiceIsPaidCorrectErr);
          ErrorType::VendorBlocked:
            begin
              Vendor.GET(PurchInvHeader."Pay-to Vendor No.");
              ERROR(VendorIsBlockedCorrectErr,Vendor.Name);
            end;
          ErrorType::IsCorrected:
            ERROR(AlreadyCorrectedErr);
          ErrorType::IsCorrective:
            ERROR(CorrCorrectiveDocErr);
          ErrorType::SerieNumInv:
            ERROR(NoFreeInvoiceNoSeriesCorrectErr);
          ErrorType::SerieNumPostCM:
            ERROR(NoFreePostCMSeriesCorrectErr);
          ErrorType::SerieNumCM:
            ERROR(NoFreeCMSeriesCorrectErr);
          ErrorType::FromOrder:
            ERROR(InvoiceIsBasedOnOrderCorrectErr);
          ErrorType::PostingNotAllowed:
            ERROR(PostingNotAllowedCorrectErr);
          ErrorType::ExtDocErr:
            ERROR(ExternalDocCorrectErr);
          ErrorType::InventoryPostClosed:
            ERROR(InventoryPostClosedCorrectErr);
          ErrorType::DimCombHeaderErr:
            ERROR(InvalidDimCombHeaderCorrectErr);
        end;
    END;

    LOCAL PROCEDURE ErrorHelperLine@23(ErrorOption@1000 : Option;PurchInvLine@1001 : Record "Purch. Inv. Line");
    VAR
      Item@1002 : Record Item;
    BEGIN
      if CancellingOnly then
        case ErrorOption of
          ErrorType::ItemBlocked:
            begin
              Item.GET(PurchInvLine."No.");
              ERROR(ItemIsBlockedCancelErr,Item."No.",Item.Description);
            end;
          ErrorType::ItemIsReturned:
            begin
              Item.GET(PurchInvLine."No.");
              ERROR(ShippedQtyReturnedCancelErr,Item."No.",Item.Description);
            end;
          ErrorType::LineFromOrder:
            ERROR(PurchaseLineFromOrderCancelErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::WrongItemType:
            ERROR(LineTypeNotAllowedCancelErr,PurchInvLine."No.",PurchInvLine.Description,PurchInvLine.Type);
          ErrorType::LineFromJob:
            ERROR(UsedInJobCancelErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::DimCombErr:
            ERROR(InvalidDimCombinationCancelErr,PurchInvLine."No.",PurchInvLine.Description);
        end
      else
        case ErrorOption of
          ErrorType::ItemBlocked:
            begin
              Item.GET(PurchInvLine."No.");
              ERROR(ItemIsBlockedCorrectErr,Item."No.",Item.Description);
            end;
          ErrorType::ItemIsReturned:
            begin
              Item.GET(PurchInvLine."No.");
              ERROR(ShippedQtyReturnedCorrectErr,Item."No.",Item.Description);
            end;
          ErrorType::LineFromOrder:
            ERROR(PurchaseLineFromOrderCorrectErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::WrongItemType:
            ERROR(LineTypeNotAllowedCorrectErr,PurchInvLine."No.",PurchInvLine.Description,PurchInvLine.Type);
          ErrorType::LineFromJob:
            ERROR(UsedInJobCorrectErr,PurchInvLine."No.",PurchInvLine.Description);
          ErrorType::DimCombErr:
            ERROR(InvalidDimCombinationCorrectErr,PurchInvLine."No.",PurchInvLine.Description);
        end;
    END;

    LOCAL PROCEDURE ErrorHelperAccount@24(ErrorOption@1000 : Option;AccountNo@1001 : Code[20];AccountCaption@1002 : Text;No@1003 : Code[20];Name@1004 : Text);
    BEGIN
      if CancellingOnly then
        case ErrorOption of
          ErrorType::AccountBlocked:
            ERROR(AccountIsBlockedCancelErr,AccountCaption,AccountNo);
          ErrorType::DimErr:
            ERROR(InvalidDimCodeCancelErr,AccountCaption,AccountNo,No,Name);
        end
      else
        case ErrorOption of
          ErrorType::AccountBlocked:
            ERROR(AccountIsBlockedCorrectErr,AccountCaption,AccountNo);
          ErrorType::DimErr:
            ERROR(InvalidDimCodeCorrectErr,AccountCaption,AccountNo,No,Name);
        end;
    END;

    BEGIN
    END.
  }
}

