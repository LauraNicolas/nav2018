OBJECT Report 1095 Update Job Item Cost
{
  OBJECT-PROPERTIES
  {
    Date=20161025D;
    Time=120000T;
    Version List=NAVW110.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Job Ledger Entry"=rm,
                TableData "Value Entry"=rm;
    CaptionML=ENU=Update Job Item Cost;
    ProcessingOnly=true;
  }
  DATASET
  {
    { 8019;    ;DataItem;Job                 ;
               DataItemTable=Job;
               DataItemTableView=SORTING("No.") WHERE(Status=FILTER(<>Completed));
               OnPreDataItem=BEGIN
                               NoOfJobLedgEntry := 0;
                               LOCKTABLE;
                             END;

               OnPostDataItem=BEGIN
                                if not HideResult then begin
                                  if NoOfJobLedgEntry <> 0 then
                                    MESSAGE(STRSUBSTNO(Text001,NoOfJobLedgEntry))
                                  else
                                    MESSAGE(Text003);
                                end;
                              END;

               ReqFilterFields="No." }

    { 5612;1   ;DataItem;Job Ledger Entry    ;
               DataItemTable="Job Ledger Entry";
               DataItemTableView=SORTING(Type,"Entry Type","Country/Region Code","Source Code","Posting Date") WHERE(Type=FILTER(=Item),"Entry Type"=FILTER(=Usage));
               OnPreDataItem=BEGIN
                               LOCKTABLE;
                             END;

               ReqFilterFields="Posting Date";
               DataItemLink="Job No."=FIELD("No.") }

    { 7209;2   ;DataItem;Item Ledger Entry   ;
               DataItemTable="Item Ledger Entry";
               DataItemTableView=SORTING("Entry No.");
               OnPreDataItem=BEGIN
                               LOCKTABLE;
                             END;

               OnAfterGetRecord=VAR
                                  ValueEntry@1004 : Record "Value Entry";
                                  ValueEntry2@1003 : Record "Value Entry";
                                  JobLedgerEntryCostValue@1001 : Decimal;
                                  JobLedgerEntryCostValueACY@1002 : Decimal;
                                BEGIN
                                  ValueEntry.SETRANGE("Job No.","Job Ledger Entry"."Job No.");
                                  ValueEntry.SETRANGE("Job Task No.","Job Ledger Entry"."Job Task No.");
                                  ValueEntry.SETRANGE("Job Ledger Entry No.","Job Ledger Entry"."Entry No.");
                                  ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
                                  ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
                                  ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Invoice");

                                  if ValueEntry.ISEMPTY then begin
                                    CALCFIELDS("Cost Amount (Expected)","Cost Amount (Expected) (ACY)",
                                      "Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                                    JobLedgerEntryCostValue := "Cost Amount (Expected)" + "Cost Amount (Actual)";
                                    JobLedgerEntryCostValueACY := "Cost Amount (Expected) (ACY)" + "Cost Amount (Actual) (ACY)";
                                  end else begin
                                    ValueEntry.SETRANGE(Adjustment,false);
                                    if ValueEntry.FINDFIRST then begin
                                      JobLedgerEntryCostValue := ValueEntry."Cost Amount (Actual)";
                                      JobLedgerEntryCostValueACY := ValueEntry."Cost Amount (Actual) (ACY)";

                                      ValueEntry2.SETRANGE("Item Ledger Entry No.","Entry No.");
                                      ValueEntry2.SETRANGE("Document No.",ValueEntry."Document No.");
                                      ValueEntry2.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
                                      ValueEntry2.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Invoice");
                                      ValueEntry2.SETRANGE(Adjustment,true);
                                      ValueEntry2.CALCSUMS("Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                                      JobLedgerEntryCostValue += ValueEntry2."Cost Amount (Actual)";
                                      JobLedgerEntryCostValueACY += ValueEntry2."Cost Amount (Actual) (ACY)";

                                      ValueEntry2.SETRANGE("Job Ledger Entry No.",0);
                                      ValueEntry2.MODIFYALL("Job No.",ValueEntry."Job No.");
                                      ValueEntry2.MODIFYALL("Job Task No.",ValueEntry."Job Task No.");
                                      ValueEntry2.MODIFYALL("Job Ledger Entry No.",ValueEntry."Job Ledger Entry No.");
                                    end;
                                  end;
                                  PostTotalCostAdjustment("Job Ledger Entry",JobLedgerEntryCostValue,JobLedgerEntryCostValueACY);
                                END;

               DataItemLink="Entry No."=FIELD("Ledger Entry No.") }

    { 9714;3   ;DataItem;Job Planning Line   ;
               DataItemTable="Job Planning Line";
               DataItemTableView=SORTING("Job No.","Job Task No.","Line No.");
               OnPreDataItem=BEGIN
                               if NoOfJobLedgEntry = 0 then
                                 CurrReport.BREAK;
                               LOCKTABLE;
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Qty. Transferred to Invoice");
                                  if ("Qty. Transferred to Invoice" <> 0) or not "System-Created Entry" or ("Ledger Entry Type" <> "Ledger Entry Type"::Item) then
                                    CurrReport.SKIP;

                                  VALIDATE("Unit Cost (LCY)","Job Ledger Entry"."Unit Cost (LCY)");
                                  VALIDATE("Line Discount Amount (LCY)","Job Ledger Entry"."Line Discount Amount (LCY)");
                                  MODIFY;
                                  "Job Ledger Entry".VALIDATE("Unit Price","Unit Price");
                                  "Job Ledger Entry".VALIDATE("Unit Price (LCY)","Unit Price (LCY)");
                                  "Job Ledger Entry".VALIDATE("Total Price","Total Price");
                                  "Job Ledger Entry".VALIDATE("Total Price (LCY)","Total Price (LCY)");
                                  "Job Ledger Entry".VALIDATE("Line Amount (LCY)","Line Amount (LCY)");
                                  "Job Ledger Entry".VALIDATE("Line Amount","Line Amount");
                                  "Job Ledger Entry".MODIFY;
                                END;

               DataItemLink="Job No."=FIELD("Job No."),"Job Task No."=FIELD("Job Task No."),"Ledger Entry No."=FIELD("Entry No.") }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@="The Job Ledger Entry item costs have now been updated to equal the related item ledger entry actual costs.\\Number of Job Ledger Entries modified = 2.";ENU="The job ledger entry item costs have now been updated to equal the related item ledger entry actual costs.\\The number of job ledger entries modified = %1."';
      NoOfJobLedgEntry@1002 : Integer;
      Text003@1001 : TextConst 'ENU=There were no job ledger entries that needed to be updated.';
      HideResult@1004 : Boolean;

    PROCEDURE SetProperties@1(SuppressSummary@1000 : Boolean);
    BEGIN
      HideResult := SuppressSummary;
    END;

    LOCAL PROCEDURE UpdatePostedTotalCost@33(VAR JobLedgerEntry@1000 : Record "Job Ledger Entry";AdjustJobCost@1003 : Decimal;AdjustJobCostLCY@1004 : Decimal);
    VAR
      JobUsageLink@1001 : Record "Job Usage Link";
      JobPlanningLine@1002 : Record "Job Planning Line";
    BEGIN
      JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
      if JobUsageLink.FINDSET then
        repeat
          JobPlanningLine.GET(JobUsageLink."Job No.",JobUsageLink."Job Task No.",JobUsageLink."Line No.");
          JobPlanningLine.UpdatePostedTotalCost(AdjustJobCost,AdjustJobCostLCY);
          JobPlanningLine.MODIFY;
        until JobUsageLink.NEXT = 0;
    END;

    LOCAL PROCEDURE PostTotalCostAdjustment@2(VAR JobLedgEntry@1000 : Record "Job Ledger Entry";JobLedgerEntryCostValue@1001 : Decimal;JobLedgerEntryCostValueACY@1004 : Decimal);
    VAR
      AdjustJobCost@1003 : Decimal;
      AdjustJobCostLCY@1002 : Decimal;
    BEGIN
      if JobLedgEntry."Total Cost (LCY)" <> -JobLedgerEntryCostValue then begin
        // Update Total Costs
        AdjustJobCostLCY := -JobLedgerEntryCostValue - JobLedgEntry."Total Cost (LCY)";
        JobLedgEntry."Total Cost (LCY)" := -JobLedgerEntryCostValue;
        if JobLedgEntry."Currency Code" = '' then begin
          AdjustJobCost := -JobLedgerEntryCostValue - JobLedgEntry."Total Cost";
          JobLedgEntry."Total Cost" := -JobLedgerEntryCostValue
        end else begin
          AdjustJobCost := -JobLedgerEntryCostValue * JobLedgEntry."Currency Factor" - JobLedgEntry."Total Cost";
          JobLedgEntry."Total Cost" := -JobLedgerEntryCostValue * JobLedgEntry."Currency Factor";
        end;
        if JobLedgerEntryCostValueACY <> 0 then
          JobLedgEntry."Additional-Currency Total Cost" := -JobLedgerEntryCostValueACY;

        // Update Unit Costs
        JobLedgEntry."Unit Cost (LCY)" :=
          JobLedgEntry."Total Cost (LCY)" / JobLedgEntry.Quantity;
        JobLedgEntry."Unit Cost" :=
          JobLedgEntry."Total Cost" / JobLedgEntry.Quantity;

        JobLedgEntry.Adjusted := true;
        JobLedgEntry."DateTime Adjusted" := CURRENTDATETIME;
        JobLedgEntry.MODIFY;

        UpdatePostedTotalCost(JobLedgEntry,AdjustJobCost,AdjustJobCostLCY);

        NoOfJobLedgEntry += 1;
      end;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

