OBJECT Page 9188 Generic Chart Customization
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Generic Chart Customization;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable=Chart;
    PageType=Card;
    ShowFilter=false;
    OnAfterGetRecord=BEGIN
                       if not XMLRetrieved then begin
                         SetFieldValues;
                         EnableControls;
                       end;
                       XMLRetrieved := true;
                     END;

    ActionList=ACTIONS
    {
      { 17      ;    ;ActionContainer;
                      Name=ActionContainer17;
                      ActionContainerType=ActionItems }
      { 37      ;1   ;Action    ;
                      Name=E&xport Chart;
                      Ellipsis=true;
                      CaptionML=ENU=E&xport Chart;
                      ToolTipML=ENU=Export a generic chart in XML format. You can rename the file, modify the chart definition using an XML editor, and then import the new chart into another client.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 ExportChartDefinition;
                               END;
                                }
      { 41      ;1   ;Action    ;
                      Name=Copy Chart;
                      Ellipsis=true;
                      CaptionML=ENU=Copy Chart;
                      ToolTipML=ENU=Copy an existing chart to create a new generic chart.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Copy;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CopyGenericChart@1034 : Page "Copy Generic Chart";
                               BEGIN
                                 CALCFIELDS(BLOB);
                                 CopyGenericChart.SetSourceChart(Rec);
                                 CopyGenericChart.RUNMODAL;
                               END;
                                }
      { 14      ;    ;ActionContainer;
                      Name=Action;
                      CaptionML=ENU=Actions;
                      ActionContainerType=RelatedInformation }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 18  ;1   ;Group     ;
                Name=Measures (Y-Axis);
                CaptionML=ENU=Measures (Y-Axis);
                GroupType=Group;
                Layout=Rows }

    { 25  ;2   ;Group     ;
                Name=Group25;
                GroupType=GridLayout;
                Layout=Rows }

    { 19  ;3   ;Group     ;
                Name=Required Measure;
                CaptionML=ENU=Required Measure;
                GroupType=Group }

    { 20  ;4   ;Field     ;
                Name=Data Column;
                CaptionML=ENU=Data Column;
                ToolTipML=ENU=Specifies the field or query column that the y-axis is based on. The list of values that appears when you choose Data Column field is filtered by the ID of the data source that you select on the Data Source FastTab.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[1];
                Enabled=DataColumn1Enabled;
                Editable=DataColumn1Enabled;
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             ValidateDataColumn(1);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[1],DummyCaption,2,false);
                           ValidateDataColumn(1);
                         END;
                          }

    { 21  ;4   ;Field     ;
                Name=Aggregation;
                CaptionML=ENU=Aggregation;
                ToolTipML=ENU=Specifies how data on the y-axis is aggregated, such as by the sum or by the maximum values.;
                OptionCaptionML=ENU=None,Count,Sum,Min,Max,Avg;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[1];
                RowSpan=1;
                ColumnSpan=1;
                OnValidate=BEGIN
                             CheckAggregation(1);
                             UpdateChartDefinition;
                           END;
                            }

    { 22  ;4   ;Field     ;
                Name=ChartType;
                CaptionML=ENU=Graph Type;
                ToolTipML=ENU=Specifies how data is shown graphically in the chart, such as column, line, or pie.;
                OptionCaptionML=ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartType;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ImplicitType=Option }

    { 39  ;4   ;Field     ;
                Name=Caption;
                AssistEdit=false;
                CaptionML=ENU=Caption;
                ToolTipML=ENU=Specifies the caption that is shown next to the y-axis to describe the selected measure. You can enter captions in different languages by creating several lines with different language codes.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[1];
                Enabled=DataColumn1Enabled;
                Editable=DataColumn1Enabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.RequiredMeasureCode,GenericChartMgt.GetUserLanguage,MeasureCaption[1]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[1] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.RequiredMeasureCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 23  ;3   ;Group     ;
                Name=Optional Measure 1;
                CaptionML=ENU=Optional Measure;
                GroupType=Group }

    { 24  ;4   ;Field     ;
                Name=DataColumn[2];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[2];
                Enabled=OptionalMeasuresEnabled AND DataColumn2Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(2);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[2],DummyCaption,2,false);
                           ValidateDataColumn(2);
                         END;

                ShowCaption=false }

    { 26  ;4   ;Field     ;
                Name=Aggregation[2];
                OptionCaptionML=ENU=None,Count,Sum,Min,Max,Avg;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[2];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(2);
                             UpdateChartDefinition;
                           END;

                ShowCaption=false }

    { 27  ;4   ;Field     ;
                Name=ChartTypeReduced[2];
                OptionCaptionML=ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[2];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=false }

    { 40  ;4   ;Field     ;
                Name=MeasureCaption[2];
                AssistEdit=false;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[2];
                Enabled=OptionalMeasuresEnabled AND DataColumn2Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure1Code,GenericChartMgt.GetUserLanguage,MeasureCaption[2]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[2] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure1Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=false }

    { 28  ;3   ;Group     ;
                Name=Optional Measure 2;
                CaptionML=ENU=Optional Measure;
                GroupType=Group }

    { 29  ;4   ;Field     ;
                Name=DataColumn[3];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[3];
                Enabled=OptionalMeasuresEnabled AND DataColumn3Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(3);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[3],DummyCaption,2,false);
                           ValidateDataColumn(3);
                         END;

                ShowCaption=false }

    { 30  ;4   ;Field     ;
                Name=Aggregation[3];
                OptionCaptionML=ENU=None,Count,Sum,Min,Max,Avg;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[3];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(3);
                             UpdateChartDefinition;
                           END;

                ShowCaption=false }

    { 31  ;4   ;Field     ;
                Name=ChartTypeReduced[3];
                OptionCaptionML=ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[3];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=false }

    { 43  ;4   ;Field     ;
                Name=MeasureCaption[3];
                AssistEdit=false;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[3];
                Enabled=OptionalMeasuresEnabled AND DataColumn3Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure2Code,GenericChartMgt.GetUserLanguage,MeasureCaption[3]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[3] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure2Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=false }

    { 32  ;3   ;Group     ;
                Name=Optional Measure 3;
                CaptionML=ENU=Optional Measure;
                GroupType=Group }

    { 33  ;4   ;Field     ;
                Name=DataColumn[4];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[4];
                Enabled=OptionalMeasuresEnabled AND DataColumn4Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(4);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[4],DummyCaption,2,false);
                           ValidateDataColumn(4);
                         END;

                ShowCaption=false }

    { 34  ;4   ;Field     ;
                Name=Aggregation[4];
                OptionCaptionML=ENU=None,Count,Sum,Min,Max,Avg;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[4];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(4);
                             UpdateChartDefinition;
                           END;

                ShowCaption=false }

    { 35  ;4   ;Field     ;
                Name=ChartTypeReduced[4];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[4];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=false }

    { 45  ;4   ;Field     ;
                Name=MeasureCaption[4];
                AssistEdit=false;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[4];
                Enabled=OptionalMeasuresEnabled AND DataColumn4Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure3Code,GenericChartMgt.GetUserLanguage,MeasureCaption[4]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[4] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure3Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=false }

    { 7   ;3   ;Group     ;
                Name=Optional Measure 4;
                CaptionML=ENU=Optional Measure;
                GroupType=Group }

    { 6   ;4   ;Field     ;
                Name=DataColumn[5];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[5];
                Enabled=OptionalMeasuresEnabled AND DataColumn5Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(5);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[5],DummyCaption,2,false);
                           ValidateDataColumn(5);
                         END;

                ShowCaption=false }

    { 4   ;4   ;Field     ;
                Name=Aggregation[5];
                OptionCaptionML=ENU=None,Count,Sum,Min,Max,Avg;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[5];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(5);
                             UpdateChartDefinition;
                           END;

                ShowCaption=false }

    { 3   ;4   ;Field     ;
                Name=ChartTypeReduced[5];
                OptionCaptionML=ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[5];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=false }

    { 46  ;4   ;Field     ;
                Name=MeasureCaption[5];
                AssistEdit=false;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[5];
                Enabled=OptionalMeasuresEnabled AND DataColumn5Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure4Code,GenericChartMgt.GetUserLanguage,MeasureCaption[5]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[5] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure4Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=false }

    { 11  ;3   ;Group     ;
                Name=Optional Measure 5;
                CaptionML=ENU=Optional Measure;
                GroupType=Group }

    { 10  ;4   ;Field     ;
                Name=DataColumn[6];
                ApplicationArea=#Basic,#Suite;
                SourceExpr=DataColumn[6];
                Enabled=OptionalMeasuresEnabled AND DataColumn6Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             ValidateDataColumn(6);
                           END;

                OnLookup=BEGIN
                           GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[6],DummyCaption,2,false);
                           ValidateDataColumn(6);
                         END;

                ShowCaption=false }

    { 9   ;4   ;Field     ;
                Name=Aggregation[6];
                OptionCaptionML=ENU=None,Count,Sum,Min,Max,Avg;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Aggregation[6];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             CheckAggregation(6);
                             UpdateChartDefinition;
                           END;

                ShowCaption=false }

    { 8   ;4   ;Field     ;
                Name=ChartTypeReduced[6];
                OptionCaptionML=ENU=Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartTypeReduced[6];
                Enabled=OptionalMeasuresEnabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             UpdateChartDefinition;
                             EnableControls;
                           END;

                ShowCaption=false }

    { 47  ;4   ;Field     ;
                Name=MeasureCaption[6];
                AssistEdit=false;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MeasureCaption[6];
                Enabled=OptionalMeasuresEnabled AND DataColumn6Enabled;
                Editable=OptionalMeasuresEnabled;
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.OptionalMeasure5Code,GenericChartMgt.GetUserLanguage,MeasureCaption[6]);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               MeasureCaption[6] := GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.OptionalMeasure5Code);
                               UpdateChartDefinition;
                             END;

                ShowCaption=false }

    { 38  ;2   ;Field     ;
                Name=Y-Axis Title;
                AssistEdit=false;
                CaptionML=ENU=Y-Axis Title;
                ToolTipML=ENU=Specifies the text that is shown next to the y-axis on the generic chart. To specify y-axis titles in different languages, choose the AssistEdit button to open the Generic Chart Text Editor window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Y-Axis Title";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.YAxisTitleCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."Y-Axis Title");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."Y-Axis Title" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.YAxisTitleCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 15  ;2   ;Field     ;
                Name=Show Y-Axis Title;
                CaptionML=ENU=Show Y-Axis Title;
                ToolTipML=ENU=Specifies if the value in the Y-Axis Title field is shown on the generic chart.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Y-Axis Show Title";
                OnValidate=VAR
                             GenericChartMgt@1001 : Codeunit "Generic Chart Mgt";
                           BEGIN
                             GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,true);
                             UpdateChartDefinition;
                           END;
                            }

    { 12  ;1   ;Group     ;
                Name=<Control35>;
                CaptionML=ENU=Dimensions (X- and Z-Axes);
                GroupType=Group }

    { 49  ;2   ;Field     ;
                Name=X-Axis Field;
                CaptionML=ENU=X-Axis Field;
                ToolTipML=ENU=Specifies the field in the source object that is shown on the x-axis of the generic chart. The text is shown as a tooltip when you hover over the data element on the chart.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Field Name";
                OnValidate=BEGIN
                             ValidateDimension(1);
                           END;

                OnLookup=VAR
                           GenericChartMgt@1000 : Codeunit "Generic Chart Mgt";
                         BEGIN
                           with TempGenericChartSetup do
                             GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,"X-Axis Field ID","X-Axis Field Name","X-Axis Title",0,false);
                           TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage,
                             TempGenericChartSetup."X-Axis Title");
                           ValidateDimension(1);
                         END;
                          }

    { 42  ;2   ;Field     ;
                Name=X-Axis Title;
                AssistEdit=false;
                CaptionML=ENU=X-Axis Title;
                ToolTipML=ENU=Specifies the text that describes the data that is shown on the x-axis. The text is shown as a tooltip when you hover over the data element on the chart. To specify x-axis titles in different languages, choose the AssistEdit button to open the Generic Chart Text Editor window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Title";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."X-Axis Title");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."X-Axis Title" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.XAxisTitleCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 48  ;2   ;Field     ;
                Name=Show X-Axis Title;
                CaptionML=ENU=Show X-Axis Title;
                ToolTipML=ENU=Specifies if the value in the X-Axis Title field is shown on the generic chart.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Show Title";
                OnValidate=VAR
                             GenericChartMgt@1001 : Codeunit "Generic Chart Mgt";
                           BEGIN
                             GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,true);
                             UpdateChartDefinition;
                           END;
                            }

    { 13  ;2   ;Field     ;
                Name=Data Point X Label;
                AssistEdit=false;
                CaptionML=ENU=Data Point X Label;
                ToolTipML=ENU=Specifies the text describes the selected x-axis value in a tooltip when you hover over a data point. The data point label is shown in front of the data value.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."X-Axis Field Caption";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.XAxisCaptionCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."X-Axis Field Caption");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."X-Axis Field Caption" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.XAxisCaptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 16  ;2   ;Field     ;
                Name=Z-Axis Field;
                CaptionML=ENU=Z-Axis Field;
                ToolTipML=ENU=Specifies the field in the source object that is shown on the z-axis of the generic chart.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Z-Axis Field Name";
                Enabled=ZAxisEnabled;
                Editable=ZAxisEnabled;
                OnValidate=BEGIN
                             ValidateDimension(2);
                           END;

                OnLookup=VAR
                           GenericChartMgt@1000 : Codeunit "Generic Chart Mgt";
                         BEGIN
                           with TempGenericChartSetup do
                             GenericChartMgt.RetrieveFieldColumn(TempGenericChartSetup,"Z-Axis Field ID","Z-Axis Field Name","Z-Axis Title",0,false);
                           ValidateDimension(2);
                         END;
                          }

    { 5   ;2   ;Field     ;
                Name=Data Point Z Label;
                AssistEdit=false;
                CaptionML=ENU=Data Point Z Label;
                ToolTipML=ENU=Specifies the text that describes the z-axis value in a tooltip when you hover over a data point. The data point label is shown in front of the data value.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TempGenericChartSetup."Z-Axis Field Caption";
                OnValidate=BEGIN
                             TempGenericChartCaptionsBuf.SetCaption(GenericChartMgt.ZAxisCaptionCode,GenericChartMgt.GetUserLanguage,
                               TempGenericChartSetup."Z-Axis Field Caption");
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               TempGenericChartSetup."Z-Axis Field Caption" :=
                                 GenericChartMgt.TextMLAssistEdit(TempGenericChartCaptionsBuf,GenericChartMgt.ZAxisCaptionCode);
                               UpdateChartDefinition;
                             END;
                              }

    { 44  ;1   ;Group     ;
                Name=Chart Description;
                CaptionML=ENU=Chart Description;
                GroupType=Group }

    { 36  ;2   ;Field     ;
                Name=Description;
                AssistEdit=false;
                CaptionML=ENU=Description;
                ToolTipML=ENU=Specifies a description of the generic chart.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=ChartDescription;
                Editable=TitleEnabled;
                MultiLine=true;
                OnValidate=BEGIN
                             TempGenericChartMemoBuf.SetMemo(GenericChartMgt.DescriptionCode,GenericChartMgt.GetUserLanguage,ChartDescription);
                             UpdateChartDefinition;
                           END;

                OnAssistEdit=BEGIN
                               ChartDescription := GenericChartMgt.MemoMLAssistEdit(TempGenericChartMemoBuf,GenericChartMgt.DescriptionCode);
                               UpdateChartDefinition;
                             END;

                ImplicitType=Text }

    { 2   ;1   ;Part      ;
                Name=PreviewPart;
                CaptionML=ENU=Preview Part;
                ApplicationArea=#Basic,#Suite;
                PagePartID="Generic Chart Type Preview";
                PartType=Page }

  }
  CODE
  {
    VAR
      TempGenericChartSetup@1004 : TEMPORARY Record "Generic Chart Setup";
      TempGenericChartFilter@1020 : TEMPORARY Record "Generic Chart Filter";
      TempGenericChartYAxis@1001 : TEMPORARY Record "Generic Chart Y-Axis";
      TempGenericChartCaptionsBuf@1029 : TEMPORARY Record "Generic Chart Captions Buffer";
      TempGenericChartMemoBuf@1028 : TEMPORARY Record "Generic Chart Memo Buffer";
      GenericChartMgt@1016 : Codeunit "Generic Chart Mgt";
      DataColumn@1013 : ARRAY [6] OF Text[50];
      MeasureCaption@1024 : ARRAY [6] OF Text[250];
      Aggregation@1014 : ARRAY [6] OF 'None,Count,Sum,Min,Max,Avg';
      ChartType@1015 : 'Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,Pie,Doughnut,Range,Radar,Funnel';
      ChartTypeReduced@1003 : ARRAY [6] OF 'Column,Point,Line,ColumnStacked,ColumnStacked100,Area,AreaStacked,AreaStacked100,StepLine,,,Range';
      ChartDescription@1011 : Text;
      DummyInt@1017 : Integer;
      DummyCaption@1030 : Text[50];
      OptionalMeasuresEnabled@1005 : Boolean INDATASET;
      Text002@1006 : TextConst 'ENU=Field %1 is already assigned to a measure or dimension. Select a different field.';
      ZAxisEnabled@1008 : Boolean INDATASET;
      Text004@1018 : TextConst 'ENU=You can only select one Measure with aggregation type Count.';
      Text005@1019 : TextConst 'ENU=If you select Aggregation Count, the Data Column will be modified for this measure. Do you want to continue?';
      TitleEnabled@1002 : Boolean;
      XMLRetrieved@1000 : Boolean;
      DataColumn1Enabled@1007 : Boolean INDATASET;
      DataColumn2Enabled@1009 : Boolean INDATASET;
      DataColumn3Enabled@1010 : Boolean INDATASET;
      DataColumn4Enabled@1012 : Boolean INDATASET;
      DataColumn5Enabled@1022 : Boolean INDATASET;
      DataColumn6Enabled@1023 : Boolean INDATASET;

    LOCAL PROCEDURE SetFieldValues@6();
    BEGIN
      ClearAllVariables;
      GenericChartMgt.RetrieveXML(
        Rec,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartCaptionsBuf,TempGenericChartMemoBuf,TempGenericChartFilter);
      ChartDescription := TempGenericChartMemoBuf.GetMemo(GenericChartMgt.DescriptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."Y-Axis Title" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.YAxisTitleCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."X-Axis Field Caption" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.XAxisCaptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."X-Axis Title" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.XAxisTitleCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup."Z-Axis Field Caption" :=
        TempGenericChartCaptionsBuf.GetCaption(GenericChartMgt.ZAxisCaptionCode,GenericChartMgt.GetUserLanguage);
      TempGenericChartSetup.INSERT;
      FillMatrixWhenOpenPage;
      UpdateTempGenericChartYAXis;
      RefreshPreview;
    END;

    LOCAL PROCEDURE ValidateDataColumn@13(Index@1000 : Integer);
    VAR
      FieldAlreadyExists@1002 : Boolean;
      i@1001 : Integer;
    BEGIN
      GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,true);
      for i := 1 to ARRAYLEN(DataColumn) do begin
        if (DataColumn[i] <> '') and (Index <> i) then
          FieldAlreadyExists := (DataColumn[Index] = DataColumn[i]) or FieldAlreadyExists;
      end;

      if FieldAlreadyExists then
        ERROR(Text002,DataColumn[Index]);

      GenericChartMgt.CheckDataTypeAggregationCompliance(TempGenericChartSetup,DataColumn[Index],Aggregation[Index]);
      GenericChartMgt.ValidateFieldColumn(TempGenericChartSetup,DummyInt,DataColumn[1],DummyCaption,2,false,Aggregation[Index]);
      UpdateChartDefinition;
      EnableControls;
    END;

    LOCAL PROCEDURE ValidateDimension@14(Index@1000 : Integer);
    VAR
      DummyAggregation@1001 : 'None,Count,Sum,Min,Max,Avg';
    BEGIN
      GenericChartMgt.CheckSourceTypeID(TempGenericChartSetup,true);
      with TempGenericChartSetup do begin
        if ("X-Axis Field Name" <> '') and ("Z-Axis Field Name" <> '') and ("X-Axis Field Name" = "Z-Axis Field Name") then
          ERROR(Text002,DataColumn[Index]);
      end;
      with TempGenericChartSetup do
        case Index of
          1:
            GenericChartMgt.ValidateFieldColumn(
              TempGenericChartSetup,"X-Axis Field ID","X-Axis Field Name","X-Axis Title",0,false,DummyAggregation);
          2:
            GenericChartMgt.ValidateFieldColumn(
              TempGenericChartSetup,"Z-Axis Field ID","Z-Axis Field Name","Z-Axis Title",0,false,DummyAggregation);
        end;
      UpdateChartDefinition;
      EnableControls;
    END;

    LOCAL PROCEDURE UpdateTempGenericChartYAXis@2();
    VAR
      i@1000 : Integer;
      Count@1001 : Integer;
    BEGIN
      TempGenericChartYAxis.DELETEALL;

      if ChartCapableOfOptionalMeasures then
        Count := ARRAYLEN(DataColumn)
      else
        Count := 1;

      for i := 1 to Count do
        if AddYAxisMeasure(i) then begin
          CLEAR(TempGenericChartYAxis);
          TempGenericChartYAxis.ID := ID;
          TempGenericChartYAxis."Line No." := i * 10000;
          TempGenericChartYAxis."Y-Axis Measure Field Name" := DataColumn[i];
          TempGenericChartYAxis."Y-Axis Measure Field Caption" := MeasureCaption[i];
          GenericChartMgt.RetrieveFieldColumnIDFromName(
            TempGenericChartSetup."Source Type",TempGenericChartSetup."Source ID",TempGenericChartYAxis."Y-Axis Measure Field ID",
            DataColumn[i]);
          TempGenericChartYAxis.Aggregation := Aggregation[i];
          if i = 1 then
            TempGenericChartYAxis."Chart Type" := ChartType
          else
            TempGenericChartYAxis."Chart Type" := ChartTypeReduced[i];
          TempGenericChartYAxis.INSERT;
        end;
    END;

    LOCAL PROCEDURE FillMatrixWhenOpenPage@1();
    VAR
      i@1001 : Integer;
      CurrentCaptionCode@1002 : Code[10];
    BEGIN
      CLEAR(DataColumn);
      CLEAR(MeasureCaption);
      CLEAR(Aggregation);
      CLEAR(ChartType);
      i := 0;
      if TempGenericChartYAxis.FINDSET then begin
        CurrentCaptionCode := GenericChartMgt.RequiredMeasureCode;
        repeat
          i += 1;
          DataColumn[i] := TempGenericChartYAxis."Y-Axis Measure Field Name";
          MeasureCaption[i] := TempGenericChartCaptionsBuf.GetCaption(CurrentCaptionCode,GenericChartMgt.GetUserLanguage);
          Aggregation[i] := TempGenericChartYAxis.Aggregation;
          if i = 1 then
            ChartType := TempGenericChartYAxis."Chart Type"
          else
            ChartTypeReduced[i] := TempGenericChartYAxis."Chart Type";

          if CurrentCaptionCode = GenericChartMgt.RequiredMeasureCode then
            CurrentCaptionCode := GenericChartMgt.OptionalMeasure1Code
          else
            CurrentCaptionCode := INCSTR(CurrentCaptionCode)
        until TempGenericChartYAxis.NEXT = 0;
      end
    END;

    LOCAL PROCEDURE UpdateChartDefinition@5();
    BEGIN
      UpdateTempGenericChartYAXis;
      GenericChartMgt.SaveChanges(Rec,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter,
        TempGenericChartCaptionsBuf,TempGenericChartMemoBuf);
      EnableControls;
      RefreshPreview;
    END;

    LOCAL PROCEDURE RefreshPreview@8();
    VAR
      chartBuilder@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.BusinessChartBuilder";
    BEGIN
      chartBuilder := chartBuilder.Empty;
      GenericChartMgt.FillChartHelper(chartBuilder,TempGenericChartSetup,TempGenericChartYAxis,TempGenericChartFilter,
        TempGenericChartCaptionsBuf,TempGenericChartMemoBuf);
      CurrPage.PreviewPart.PAGE.SetChartDefinition(chartBuilder);
    END;

    LOCAL PROCEDURE ClearAllVariables@9();
    BEGIN
      TempGenericChartSetup.DELETEALL;
      TempGenericChartFilter.DELETEALL;
      TempGenericChartYAxis.DELETEALL;
      TempGenericChartCaptionsBuf.DELETEALL;
      TempGenericChartMemoBuf.DELETEALL;

      CLEAR(TempGenericChartFilter);
      CLEAR(TempGenericChartYAxis);
      CLEAR(TempGenericChartSetup);
      CLEAR(TempGenericChartCaptionsBuf);
      CLEAR(TempGenericChartMemoBuf);
      CLEAR(GenericChartMgt);
      CLEAR(DataColumn);
      CLEAR(MeasureCaption);
      CLEAR(Aggregation);
      CLEAR(ChartType);
      CLEAR(ChartTypeReduced);
      CLEAR(DummyInt);
      CLEAR(DummyCaption);
    END;

    LOCAL PROCEDURE ChartCapableOfOptionalMeasures@12() : Boolean;
    BEGIN
      exit(not (ChartType in [ChartType::Pie,ChartType::Doughnut,ChartType::Funnel,ChartType::Radar]));
    END;

    LOCAL PROCEDURE ExportChartDefinition@10();
    VAR
      TempBlob@1000 : Record TempBlob;
      FileMgt@1001 : Codeunit "File Management";
    BEGIN
      CALCFIELDS(BLOB);
      if BLOB.HASVALUE then begin
        TempBlob.Blob := BLOB;
        FileMgt.BLOBExport(TempBlob,'*.xml',true);
      end;
    END;

    LOCAL PROCEDURE EnableControls@17();
    BEGIN
      OptionalMeasuresEnabled := ChartCapableOfOptionalMeasures and (TempGenericChartSetup."Z-Axis Field Name" = '');
      ZAxisEnabled :=
        ChartCapableOfOptionalMeasures and
        (DataColumn[2] = '') and (DataColumn[3] = '') and (DataColumn[4] = '') and (DataColumn[5] = '') and (DataColumn[6] = '');
      TitleEnabled := true;
      DataColumn1Enabled := Aggregation[1] <> Aggregation[1]::Count;
      DataColumn2Enabled := Aggregation[2] <> Aggregation[2]::Count;
      DataColumn3Enabled := Aggregation[3] <> Aggregation[3]::Count;
      DataColumn4Enabled := Aggregation[4] <> Aggregation[4]::Count;
      DataColumn5Enabled := Aggregation[5] <> Aggregation[5]::Count;
      DataColumn6Enabled := Aggregation[6] <> Aggregation[6]::Count;
    END;

    LOCAL PROCEDURE AddYAxisMeasure@19(index@1000 : Integer) : Boolean;
    BEGIN
      if Aggregation[index] = Aggregation[index]::Count then
        exit(true);
      exit(DataColumn[index] <> '');
    END;

    LOCAL PROCEDURE CheckAggregation@30(index@1000 : Integer);
    VAR
      i@1001 : Integer;
      FieldOfTypeCountAlreadyExists@1002 : Boolean;
      CountColumnName@1003 : Text[50];
      ReplaceDataColumn@1004 : Boolean;
    BEGIN
      for i := 1 to ARRAYLEN(Aggregation) do begin
        if (Aggregation[i] = Aggregation[i]::Count) and (index <> i) then
          FieldOfTypeCountAlreadyExists := (Aggregation[index] = Aggregation[i]) or FieldOfTypeCountAlreadyExists;
      end;

      if FieldOfTypeCountAlreadyExists then
        ERROR(Text004);

      GenericChartMgt.CheckDataTypeAggregationCompliance(TempGenericChartSetup,DataColumn[index],Aggregation[index]);
      if Aggregation[index] = Aggregation[index]::Count then begin
        CountColumnName := GenericChartMgt.GetQueryCountColumnName(TempGenericChartSetup);
        if DataColumn[index] <> CountColumnName then begin
          ReplaceDataColumn := true;
          if DataColumn[index] <> '' then
            ReplaceDataColumn := CONFIRM(Text005,false);
          if ReplaceDataColumn then
            DataColumn[index] := CountColumnName
          else
            ERROR('');
        end;
      end;
    END;

    BEGIN
    END.
  }
}

