OBJECT Page 9504 Debugger Code Viewer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Debugger Code Viewer;
    LinksAllowed=false;
    SourceTable="Debugger Call Stack";
    PageType=CardPart;
    ShowFilter=false;
    OnFindRecord=VAR
                   CallStack@1001 : Record "Debugger Call Stack";
                   BreakpointCollection@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection";
                 BEGIN
                   if CallStack.ISEMPTY then begin
                     GetBreakpointCollection(ObjType,ObjectId,BreakpointCollection);
                     PaintBreakpoints(BreakpointCollection);
                     CurrBreakpointCollection := BreakpointCollection;

                     if LineNo <> -1 then begin
                       // Set line to -1 to remove the current line marker
                       LineNo := -1;
                       CurrPage.CodeViewer.UpdateLine(LineNo,true);
                     end;
                     exit(false);
                   end;

                   exit(FIND(Which));
                 END;

    OnAfterGetRecord=VAR
                       ObjectMetadata@1009 : Record "Object Metadata";
                       NAVAppObjectMetadata@1008 : Record "NAV App Object Metadata";
                       AllObj@1010 : Record AllObj;
                       CodeStream@1007 : InStream;
                       BreakpointCollection@1006 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection";
                       Code@1005 : BigText;
                       NewObjectType@1004 : Option;
                       NewObjectId@1003 : Integer;
                       NewCallstackId@1001 : Integer;
                       IsBreakAfterRunningCodeAction@1000 : Boolean;
                       NewLineNo@1002 : Integer;
                     BEGIN
                       NewObjectType := "Object Type";
                       NewObjectId := "Object ID";
                       NewCallstackId := ID;
                       NewLineNo := "Line No.";

                       if DebuggerManagement.IsBreakAfterCodeTrackingAction then begin
                         DebuggerManagement.ResetActionState;
                         BreakpointCollection := CurrBreakpointCollection;
                       end else
                         GetBreakpointCollection(NewObjectType,NewObjectId,BreakpointCollection);

                       IsBreakAfterRunningCodeAction := DebuggerManagement.IsBreakAfterRunningCodeAction;

                       if (ObjType <> NewObjectType) or
                          (ObjectId <> NewObjectId) or (CallstackId <> NewCallstackId) or IsBreakAfterRunningCodeAction
                       then begin
                         CallstackId := NewCallstackId;

                         if (ObjType <> NewObjectType) or (ObjectId <> NewObjectId) or IsBreakAfterRunningCodeAction then begin
                           ObjType := NewObjectType;
                           ObjectId := NewObjectId;

                           ObjectMetadata.INIT;
                           NAVAppObjectMetadata.INIT;

                           if AllObj.GET(ObjType,ObjectId) and not ISNULLGUID(AllObj."App Package ID") then begin
                             if NAVAppObjectMetadata.GET(AllObj."App Package ID",ObjType,ObjectId) then begin
                               NAVAppObjectMetadata.CALCFIELDS("User AL Code");
                               NAVAppObjectMetadata."User AL Code".CREATEINSTREAM(CodeStream,TEXTENCODING::UTF8);
                               Code.READ(CodeStream);

                               LineNo := NewLineNo;
                               CurrBreakpointCollection := BreakpointCollection;
                               CurrPage.CodeViewer.LoadCode(Code,NewLineNo,BreakpointCollection,(NewCallstackId = 1));
                             end
                           end else
                             if ObjectMetadata.GET(ObjType,ObjectId) then begin
                               ObjectMetadata.CALCFIELDS("User AL Code");
                               ObjectMetadata."User AL Code".CREATEINSTREAM(CodeStream,TEXTENCODING::UTF8);
                               Code.READ(CodeStream);

                               LineNo := NewLineNo;
                               CurrBreakpointCollection := BreakpointCollection;
                               CurrPage.CodeViewer.LoadCode(Code,NewLineNo,BreakpointCollection,(NewCallstackId = 1));
                             end;

                           if IsBreakAfterRunningCodeAction then
                             DebuggerManagement.ResetActionState;

                           // Refresh to update data caption on debugger page

                           DebuggerManagement.RefreshDebuggerTaskPage;

                           exit;
                         end;
                       end;

                       if NewLineNo <> LineNo then begin
                         LineNo := NewLineNo;
                         if ISNULL(BreakpointCollection) then
                           if ISNULL(CurrBreakpointCollection) then
                             CurrPage.CodeViewer.UpdateLine(NewLineNo,(NewCallstackId = 1))
                           else
                             CurrPage.CodeViewer.Update(NewLineNo,BreakpointCollection,(NewCallstackId = 1))
                         else
                           if not BreakpointCollection.Equals(CurrBreakpointCollection) then
                             CurrPage.CodeViewer.Update(NewLineNo,BreakpointCollection,(NewCallstackId = 1))
                           else
                             CurrPage.CodeViewer.UpdateLine(NewLineNo,(NewCallstackId = 1))
                       end else
                         PaintBreakpoints(BreakpointCollection);

                       CurrBreakpointCollection := BreakpointCollection;
                     END;

  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                Name=Container1;
                ContainerType=ContentArea }

    { 2   ;1   ;Field     ;
                Name=CodeViewer;
                CaptionML=ENU=Code Viewer;
                ToolTipML=ENU="Specifies the code at the point at which the debugger broke execution. In the code viewer, a yellow arrow in the margin identifies the current executing statement in the current function. ";
                ApplicationArea=#All;
                ControlAddIn=[Microsoft.Dynamics.Nav.Client.CodeViewer;PublicKeyToken=31bf3856ad364e35] }

  }
  CODE
  {
    VAR
      DebuggerManagement@1007 : Codeunit "Debugger Management";
      CurrBreakpointCollection@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection";
      Variables@1006 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.VariableCollection";
      ObjType@1001 : Option;
      ObjectId@1008 : Integer;
      CallstackId@1000 : Integer;
      Text001@1002 : TextConst '@@@=Shown when hovering over text in the code viewer that has no context as a variable.;ENU=The name ''%1'' does not exist in the current context.';
      LineNo@1003 : Integer;

    LOCAL PROCEDURE GetBreakpointCollection@1(ObjType@1000 : Integer;ObjectId@1001 : Integer;VAR BreakpointCollection@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection");
    VAR
      DebuggerBreakpoint@1003 : Record "Debugger Breakpoint";
    BEGIN
      with DebuggerBreakpoint do begin
        SETRANGE("Object Type",ObjType);
        SETRANGE("Object ID",ObjectId);

        if FINDSET then begin
          BreakpointCollection := BreakpointCollection.BreakpointCollection;
          repeat
            BreakpointCollection.AddBreakpoint("Line No.",Enabled,Condition);
          until NEXT = 0;
        end;
      end;
    END;

    [Internal]
    PROCEDURE ToggleBreakpoint@2();
    BEGIN
      UpdateBreakpoint(CurrPage.CodeViewer.CaretLine);
    END;

    LOCAL PROCEDURE UpdateBreakpoint@3(LineNo@1000 : Integer);
    VAR
      DebuggerBreakpoint@1001 : Record "Debugger Breakpoint";
    BEGIN
      if (ObjType = 0) or (ObjectId = 0) then
        exit;

      with DebuggerBreakpoint do begin
        INIT;
        "Object Type" := ObjType;
        "Object ID" := ObjectId;
        "Line No." := LineNo;
        if not INSERT(true) then begin
          SETRANGE("Object Type",ObjType);
          SETRANGE("Object ID",ObjectId);
          SETRANGE("Line No.","Line No.");
          SETRANGE("Column No.","Column No.");

          if FINDFIRST then begin
            if Enabled then
              DELETE(true)
            else begin
              Enabled := true;
              MODIFY(true);
            end
          end
        end
      end
    END;

    [Internal]
    PROCEDURE SetBreakpointCondition@4();
    VAR
      DebuggerBreakpoint@1000 : Record "Debugger Breakpoint";
      DebuggerBreakpointTemp@1001 : TEMPORARY Record "Debugger Breakpoint";
      IsNewRecord@1002 : Boolean;
    BEGIN
      if (ObjType = 0) or (ObjectId = 0) then
        exit;

      with DebuggerBreakpoint do begin
        INIT;
        "Object Type" := ObjType;
        "Object ID" := ObjectId;
        "Line No." := CurrPage.CodeViewer.CaretLine;

        IsNewRecord := INSERT(true);

        SETRANGE("Object Type",ObjType);
        SETRANGE("Object ID",ObjectId);
        SETRANGE("Line No.","Line No.");
        SETRANGE("Column No.","Column No.");

        if FINDFIRST then begin
          COMMIT;
          DebuggerBreakpointTemp := DebuggerBreakpoint;
          DebuggerBreakpointTemp.INSERT;
          if PAGE.RUNMODAL(PAGE::"Debugger Breakpoint Condition",DebuggerBreakpointTemp) = ACTION::LookupOK then begin
            Condition := DebuggerBreakpointTemp.Condition;
            MODIFY(true)
          end else
            if IsNewRecord then
              DELETE(true);
        end
      end
    END;

    LOCAL PROCEDURE GetVariables@6(VariableName@1000 : Text;LeftContext@1001 : Text;VAR Variables@1004 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.VariableCollection") Found : Boolean;
    VAR
      VariablesRec@1002 : Record "Debugger Variable";
      VariableValue@1005 : Text[1024];
      VariableWithoutQoutes@1003 : Text[1024];
      Global@1007 : Boolean;
    BEGIN
      Found := true;
      VariableWithoutQoutes := DebuggerManagement.RemoveQuotes(VariableName);
      Variables := Variables.VariableCollection;

      with VariablesRec do begin
        SETRANGE("Call Stack ID",CallstackId);
        SETRANGE(Name,VariableWithoutQoutes);

        if FINDSET then
          repeat
            if DebuggerManagement.ShouldBeInTooltip(Path,LeftContext) then begin
              if Value = '' then
                VariableValue := '<...>'
              else
                VariableValue := Value;

              Global := STRPOS(Path,'"<Globals>"') = 1;

              Variables.AddVariable(VariableName,Path,VariableValue,Type,Global);
            end
          until NEXT = 0;
      end;

      Found := Variables.Count <> 0;
    END;

    LOCAL PROCEDURE ShowTooltip@16(VariableName@1000 : Text;LeftContext@1001 : Text);
    VAR
      CallStack@1003 : Record "Debugger Call Stack";
      TooltipText@1002 : Text;
    BEGIN
      if CallStack.ISEMPTY then
        CurrPage.CodeViewer.ShowTooltip('')
      else
        if GetVariables(VariableName,LeftContext,Variables) then
          CurrPage.CodeViewer.ShowTooltip(Variables)
        else begin
          TooltipText := STRSUBSTNO(Text001,VariableName);
          CurrPage.CodeViewer.ShowTooltip(TooltipText);
        end;
    END;

    LOCAL PROCEDURE PaintBreakpoints@14(VAR BreakpointCollection@1000 : DotNet "'Microsoft.Dynamics.Nav.Client.CodeViewerTypes, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.CodeViewerTypes.BreakpointCollection");
    BEGIN
      if ISNULL(BreakpointCollection) then begin
        if not ISNULL(CurrBreakpointCollection) then
          CurrPage.CodeViewer.UpdateBreakpoints(BreakpointCollection);
      end else
        if not BreakpointCollection.Equals(CurrBreakpointCollection) then
          CurrPage.CodeViewer.UpdateBreakpoints(BreakpointCollection);
    END;

    EVENT CodeViewer@-2::SetBreakpoint@8(lineNo@1000 : Integer);
    BEGIN
      UpdateBreakpoint(lineNo);
      CurrPage.UPDATE;
    END;

    EVENT CodeViewer@-2::GetVariableValue@9(variableName@1001 : Text;leftContext@1000 : Text);
    BEGIN
      ShowTooltip(variableName,leftContext);
    END;

    EVENT CodeViewer@-2::AddWatch@10(variablePath@1000 : Text);
    BEGIN
      DebuggerManagement.AddWatch(variablePath,true);
    END;

    BEGIN
    END.
  }
}

