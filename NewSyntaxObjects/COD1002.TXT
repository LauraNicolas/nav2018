OBJECT Codeunit 1002 Job Create-Invoice
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Currency@1005 : Record Currency;
      SalesHeader@1001 : Record "Sales Header";
      SalesHeader2@1006 : Record "Sales Header";
      SalesLine@1000 : Record "Sales Line";
      TempJobPlanningLine@1017 : TEMPORARY Record "Job Planning Line";
      Text000@1008 : TextConst 'ENU=The lines were successfully transferred to an invoice.';
      Text001@1009 : TextConst 'ENU=The lines were not transferred to an invoice.';
      Text002@1010 : TextConst 'ENU=There was no %1 with a %2 larger than 0. No lines were transferred.';
      Text003@1011 : TextConst 'ENU=%1 may not be lower than %2 and may not exceed %3.';
      Text004@1015 : TextConst 'ENU=You must specify Invoice No. or New Invoice.';
      Text005@1014 : TextConst 'ENU=You must specify Credit Memo No. or New Invoice.';
      Text007@1012 : TextConst 'ENU=You must specify %1.';
      TransferExtendedText@1016 : Codeunit "Transfer Extended Text";
      JobInvCurrency@1002 : Boolean;
      UpdateExchangeRates@1019 : Boolean;
      Text008@1018 : TextConst 'ENU=The lines were successfully transferred to a credit memo.';
      Text009@1003 : TextConst 'ENU=The selected planning lines must have the same %1.';
      Text010@1004 : TextConst 'ENU=The currency dates on all planning lines will be updated based on the invoice posting date because there is a difference in currency exchange rates. Recalculations will be based on the Exch. Calculation setup for the Cost and Price values for the job. Do you want to continue?';
      Text011@1007 : TextConst 'ENU=The currency exchange rate on all planning lines will be updated based on the exchange rate on the sales invoice. Do you want to continue?';
      Text012@1013 : TextConst '@@@=The Sales Invoice Header 103001 does not exist in the system anymore. A printed copy of the document was created before deletion.;ENU=The %1 %2 does not exist anymore. A printed copy of the document was created before the document was deleted.';
      NoOfSalesLinesCreated@1020 : Integer;

    [Internal]
    PROCEDURE CreateSalesInvoice@9(VAR JobPlanningLine@1011 : Record "Job Planning Line";CrMemo@1000 : Boolean);
    VAR
      SalesHeader@1010 : Record "Sales Header";
      GetSalesInvoiceNo@1005 : Report "Job Transfer to Sales Invoice";
      GetSalesCrMemoNo@1009 : Report "Job Transfer to Credit Memo";
      Done@1004 : Boolean;
      NewInvoice@1003 : Boolean;
      PostingDate@1002 : Date;
      InvoiceNo@1001 : Code[20];
    BEGIN
      if not CrMemo then begin
        GetSalesInvoiceNo.SetCustomer(JobPlanningLine."Job No.");
        GetSalesInvoiceNo.RUNMODAL;
        GetSalesInvoiceNo.GetInvoiceNo(Done,NewInvoice,PostingDate,InvoiceNo);
      end else begin
        GetSalesCrMemoNo.SetCustomer(JobPlanningLine."Job No.");
        GetSalesCrMemoNo.RUNMODAL;
        GetSalesCrMemoNo.GetCreditMemoNo(Done,NewInvoice,PostingDate,InvoiceNo);
      end;

      if Done then begin
        if (PostingDate = 0D) and NewInvoice then
          ERROR(Text007,SalesHeader.FIELDCAPTION("Posting Date"));
        if (InvoiceNo = '') and not NewInvoice then begin
          if CrMemo then
            ERROR(Text005);
          ERROR(Text004);
        end;
        CreateSalesInvoiceLines(
          JobPlanningLine."Job No.",JobPlanningLine,InvoiceNo,NewInvoice,PostingDate,CrMemo);
      end;
    END;

    LOCAL PROCEDURE CreateSalesInvoiceLines@1(JobNo@1000 : Code[20];VAR JobPlanningLine@1004 : Record "Job Planning Line";InvoiceNo@1007 : Code[20];NewInvoice@1001 : Boolean;PostingDate@1006 : Date;CreditMemo@1008 : Boolean);
    VAR
      Cust@1003 : Record Customer;
      Job@1002 : Record Job;
      JobPlanningLineInvoice@1009 : Record "Job Planning Line Invoice";
      LineCounter@1005 : Integer;
    BEGIN
      CLEARALL;
      Job.GET(JobNo);
      if Job.Blocked = Job.Blocked::All then
        Job.TestBlocked;
      if Job."Currency Code" = '' then
        JobInvCurrency := Job."Invoice Currency Code" <> '';
      Job.TESTFIELD("Bill-to Customer No.");
      Cust.GET(Job."Bill-to Customer No.");
      if CreditMemo then
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::"Credit Memo"
      else
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::Invoice;

      if not NewInvoice then
        SalesHeader.GET(SalesHeader2."Document Type",InvoiceNo);

      if JobPlanningLine.FIND('-') then
        repeat
          if TransferLine(JobPlanningLine) then begin
            LineCounter := LineCounter + 1;
            if JobPlanningLine."Job No." <> JobNo then
              ERROR(Text009,JobPlanningLine.FIELDCAPTION("Job No."));
            if NewInvoice then
              TestExchangeRate(JobPlanningLine,PostingDate)
            else
              TestExchangeRate(JobPlanningLine,SalesHeader."Posting Date");
          end;
        until JobPlanningLine.NEXT = 0;

      if LineCounter = 0 then
        ERROR(Text002,
          JobPlanningLine.TABLECAPTION,
          JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));

      if NewInvoice then
        CreateSalesHeader(Job,PostingDate)
      else
        TestSalesHeader(SalesHeader,Job);
      if JobPlanningLine.FIND('-') then
        repeat
          if TransferLine(JobPlanningLine) then begin
            if JobPlanningLine.Type in [JobPlanningLine.Type::Resource,
                                        JobPlanningLine.Type::Item,
                                        JobPlanningLine.Type::"G/L Account"]
            then
              JobPlanningLine.TESTFIELD("No.");
            CreateSalesLine(JobPlanningLine);

            JobPlanningLineInvoice.InitFromJobPlanningLine(JobPlanningLine);
            if NewInvoice then
              JobPlanningLineInvoice.InitFromSales(SalesHeader,PostingDate,SalesLine."Line No.")
            else
              JobPlanningLineInvoice.InitFromSales(SalesHeader,SalesHeader."Posting Date",SalesLine."Line No.");
            JobPlanningLineInvoice.INSERT;

            JobPlanningLine.UpdateQtyToTransfer;
            JobPlanningLine.MODIFY;
          end;
        until JobPlanningLine.NEXT = 0;

      if NoOfSalesLinesCreated = 0 then
        ERROR(Text002,JobPlanningLine.TABLECAPTION,JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));

      COMMIT;

      if CreditMemo then
        MESSAGE(Text008)
      else
        MESSAGE(Text000);
    END;

    [External]
    PROCEDURE DeleteSalesInvoiceBuffer@10();
    BEGIN
      CLEARALL;
      TempJobPlanningLine.DELETEALL;
    END;

    [Internal]
    PROCEDURE CreateSalesInvoiceJobTask@7(VAR JobTask2@1000 : Record "Job Task";PostingDate@1006 : Date;InvoicePerTask@1007 : Boolean;VAR NoOfInvoices@1008 : Integer;VAR OldJobNo@1004 : Code[20];VAR OldJobTaskNo@1009 : Code[20];LastJobTask@1010 : Boolean);
    VAR
      Cust@1003 : Record Customer;
      Job@1002 : Record Job;
      JobTask@1011 : Record "Job Task";
      JobPlanningLine@1001 : Record "Job Planning Line";
      JobPlanningLineInvoice@1005 : Record "Job Planning Line Invoice";
    BEGIN
      CLEARALL;
      if not LastJobTask then begin
        JobTask := JobTask2;
        if JobTask."Job No." = '' then
          exit;
        if JobTask."Job Task No." = '' then
          exit;
        JobTask.FIND;
        if JobTask."Job Task Type" <> JobTask."Job Task Type"::Posting then
          exit;
        Job.GET(JobTask."Job No.");
      end;
      if LastJobTask then begin
        if not TempJobPlanningLine.FIND('-') then
          exit;
        Job.GET(TempJobPlanningLine."Job No.");
        JobTask.GET(TempJobPlanningLine."Job No.",TempJobPlanningLine."Job Task No.");
      end;
      Job.TESTFIELD("Bill-to Customer No.");
      if Job.Blocked = Job.Blocked::All then
        Job.TestBlocked;
      if Job."Currency Code" = '' then
        JobInvCurrency := Job."Invoice Currency Code" <> '';
      Cust.GET(Job."Bill-to Customer No.");

      if CreateNewInvoice(JobTask,InvoicePerTask,OldJobNo,OldJobTaskNo,LastJobTask) then begin
        Job.GET(TempJobPlanningLine."Job No.");
        Cust.GET(Job."Bill-to Customer No.");
        NoOfInvoices := NoOfInvoices + 1;
        SalesHeader2."Document Type" := SalesHeader2."Document Type"::Invoice;
        CreateSalesHeader(Job,PostingDate);
        if TempJobPlanningLine.FIND('-') then
          repeat
            Job.GET(TempJobPlanningLine."Job No.");
            JobInvCurrency := (Job."Currency Code" = '') and (Job."Invoice Currency Code" <> '');
            JobPlanningLine := TempJobPlanningLine;
            JobPlanningLine.FIND;
            if JobPlanningLine.Type in [JobPlanningLine.Type::Resource,
                                        JobPlanningLine.Type::Item,
                                        JobPlanningLine.Type::"G/L Account"]
            then
              JobPlanningLine.TESTFIELD("No.");
            TestExchangeRate(JobPlanningLine,PostingDate);
            CreateSalesLine(JobPlanningLine);

            JobPlanningLineInvoice."Job No." := JobPlanningLine."Job No.";
            JobPlanningLineInvoice."Job Task No." := JobPlanningLine."Job Task No.";
            JobPlanningLineInvoice."Job Planning Line No." := JobPlanningLine."Line No.";
            if SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice then
              JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::Invoice;
            if SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" then
              JobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type"::"Credit Memo";
            JobPlanningLineInvoice."Document No." := SalesHeader."No.";
            JobPlanningLineInvoice."Line No." := SalesLine."Line No.";
            JobPlanningLineInvoice."Quantity Transferred" := JobPlanningLine."Qty. to Transfer to Invoice";
            JobPlanningLineInvoice."Transferred Date" := PostingDate;
            JobPlanningLineInvoice.INSERT;

            JobPlanningLine.UpdateQtyToTransfer;
            JobPlanningLine.MODIFY;
          until TempJobPlanningLine.NEXT = 0;
        TempJobPlanningLine.DELETEALL;
      end;

      if LastJobTask then begin
        if NoOfSalesLinesCreated = 0 then
          ERROR(Text002,JobPlanningLine.TABLECAPTION,JobPlanningLine.FIELDCAPTION("Qty. to Transfer to Invoice"));
        exit;
      end;

      JobPlanningLine.RESET;
      JobPlanningLine.SETCURRENTKEY("Job No.","Job Task No.");
      JobPlanningLine.SETRANGE("Job No.",JobTask2."Job No.");
      JobPlanningLine.SETRANGE("Job Task No.",JobTask2."Job Task No.");
      JobPlanningLine.SETFILTER("Planning Date",JobTask2.GETFILTER("Planning Date Filter"));

      if JobPlanningLine.FIND('-') then
        repeat
          if TransferLine(JobPlanningLine) then begin
            TempJobPlanningLine := JobPlanningLine;
            TempJobPlanningLine.INSERT;
          end;
        until JobPlanningLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateNewInvoice@11(VAR JobTask@1003 : Record "Job Task";InvoicePerTask@1005 : Boolean;VAR OldJobNo@1000 : Code[20];VAR OldJobTaskNo@1001 : Code[20];LastJobTask@1002 : Boolean) : Boolean;
    VAR
      NewInvoice@1004 : Boolean;
    BEGIN
      if LastJobTask then
        NewInvoice := true
      else begin
        if OldJobNo <> '' then begin
          if InvoicePerTask then
            if (OldJobNo <> JobTask."Job No.") or (OldJobTaskNo <> JobTask."Job Task No.") then
              NewInvoice := true;
          if not InvoicePerTask then
            if OldJobNo <> JobTask."Job No." then
              NewInvoice := true;
        end;
        OldJobNo := JobTask."Job No.";
        OldJobTaskNo := JobTask."Job Task No.";
      end;
      if not TempJobPlanningLine.FIND('-') then
        NewInvoice := false;
      exit(NewInvoice);
    END;

    LOCAL PROCEDURE CreateSalesHeader@2(Job@1004 : Record Job;PostingDate@1001 : Date);
    VAR
      SalesSetup@1003 : Record "Sales & Receivables Setup";
      Cust@1000 : Record Customer;
    BEGIN
      SalesSetup.GET;
      SalesHeader.INIT;
      SalesHeader."Document Type" := SalesHeader2."Document Type";
      if SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice then
        SalesSetup.TESTFIELD("Invoice Nos.");
      if SalesHeader."Document Type" = SalesHeader."Document Type"::"Credit Memo" then
        SalesSetup.TESTFIELD("Credit Memo Nos.");
      SalesHeader."Posting Date" := PostingDate;
      OnBeforeInsertSalesHeader(SalesHeader,Job);
      SalesHeader.INSERT(true);
      Cust.GET(Job."Bill-to Customer No.");
      Cust.TESTFIELD("Bill-to Customer No.",'');
      SalesHeader.VALIDATE("Sell-to Customer No.",Job."Bill-to Customer No.");
      if Job."Currency Code" <> '' then
        SalesHeader.VALIDATE("Currency Code",Job."Currency Code")
      else
        SalesHeader.VALIDATE("Currency Code",Job."Invoice Currency Code");
      if PostingDate <> 0D then
        SalesHeader.VALIDATE("Posting Date",PostingDate);
      UpdateSalesHeader(SalesHeader,Job);
      OnBeforeModifySalesHeader(SalesHeader,Job);
      SalesHeader.MODIFY(true);
    END;

    LOCAL PROCEDURE CreateSalesLine@15(VAR JobPlanningLine@1000 : Record "Job Planning Line");
    VAR
      Job@1003 : Record Job;
      DimMgt@1001 : Codeunit DimensionManagement;
      Factor@1002 : Integer;
      DimSetIDArr@1004 : ARRAY [10] OF Integer;
    BEGIN
      Factor := 1;
      if SalesHeader2."Document Type" = SalesHeader2."Document Type"::"Credit Memo" then
        Factor := -1;
      TestTransferred(JobPlanningLine);
      JobPlanningLine.TESTFIELD("Planning Date");
      Job.GET(JobPlanningLine."Job No.");
      CLEAR(SalesLine);
      SalesLine."Document Type" := SalesHeader2."Document Type";
      SalesLine."Document No." := SalesHeader."No.";

      if (not JobInvCurrency) and (JobPlanningLine.Type <> JobPlanningLine.Type::Text) then begin
        SalesHeader.TESTFIELD("Currency Code",JobPlanningLine."Currency Code");
        if (Job."Currency Code" <> '') and (JobPlanningLine."Currency Factor" <> SalesHeader."Currency Factor") then begin
          if CONFIRM(Text011) then begin
            JobPlanningLine.VALIDATE("Currency Factor",SalesHeader."Currency Factor");
            JobPlanningLine.MODIFY;
          end else
            ERROR(Text001);
        end;
        SalesHeader.TESTFIELD("Currency Code",Job."Currency Code");
      end;
      if JobPlanningLine.Type = JobPlanningLine.Type::Text then
        SalesLine.VALIDATE(Type,SalesLine.Type::" ");
      if JobPlanningLine.Type = JobPlanningLine.Type::"G/L Account" then
        SalesLine.VALIDATE(Type,SalesLine.Type::"G/L Account");
      if JobPlanningLine.Type = JobPlanningLine.Type::Item then
        SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      if JobPlanningLine.Type = JobPlanningLine.Type::Resource then
        SalesLine.VALIDATE(Type,SalesLine.Type::Resource);

      SalesLine.VALIDATE("No.",JobPlanningLine."No.");
      SalesLine.VALIDATE("Gen. Prod. Posting Group",JobPlanningLine."Gen. Prod. Posting Group");
      SalesLine.VALIDATE("Location Code",JobPlanningLine."Location Code");
      SalesLine.VALIDATE("Work Type Code",JobPlanningLine."Work Type Code");
      SalesLine.VALIDATE("Variant Code",JobPlanningLine."Variant Code");

      if SalesLine.Type <> SalesLine.Type::" " then begin
        SalesLine.VALIDATE("Unit of Measure Code",JobPlanningLine."Unit of Measure Code");
        SalesLine.VALIDATE(Quantity,Factor * JobPlanningLine."Qty. to Transfer to Invoice");
        if JobInvCurrency then begin
          Currency.GET(SalesLine."Currency Code");
          SalesLine.VALIDATE("Unit Price",
            ROUND(JobPlanningLine."Unit Price" * SalesHeader."Currency Factor",
              Currency."Unit-Amount Rounding Precision"));
        end else
          SalesLine.VALIDATE("Unit Price",JobPlanningLine."Unit Price");
        SalesLine.VALIDATE("Unit Cost (LCY)",JobPlanningLine."Unit Cost (LCY)");
        SalesLine.VALIDATE("Line Discount %",JobPlanningLine."Line Discount %");
        SalesLine."Inv. Discount Amount" := 0;
        SalesLine."Inv. Disc. Amount to Invoice" := 0;
        SalesLine.UpdateAmounts;
      end;
      if not SalesHeader."Prices Including VAT" then
        SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
      SalesLine."Job No." := JobPlanningLine."Job No.";
      SalesLine."Job Task No." := JobPlanningLine."Job Task No.";
      if SalesLine."Job Task No." <> '' then begin
        DimSetIDArr[1] := SalesLine."Dimension Set ID";
        DimSetIDArr[2] :=
          DimMgt.CreateDimSetFromJobTaskDim(
            SalesLine."Job No.",SalesLine."Job Task No.",SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
        DimSetIDArr[3] := GetLedgEntryDimSetID(JobPlanningLine);
        DimSetIDArr[4] := GetJobLedgEntryDimSetID(JobPlanningLine);
        SalesLine."Dimension Set ID" :=
          DimMgt.GetCombinedDimensionSetID(
            DimSetIDArr,SalesLine."Shortcut Dimension 1 Code",SalesLine."Shortcut Dimension 2 Code");
      end;
      SalesLine.Description := JobPlanningLine.Description;
      SalesLine."Description 2" := JobPlanningLine."Description 2";
      SalesLine."Line No." := GetNextLineNo(SalesLine);
      OnBeforeInsertSalesLine(SalesLine,SalesHeader,Job,JobPlanningLine);
      SalesLine.INSERT(true);

      if SalesLine.Type <> SalesLine.Type::" " then
        NoOfSalesLinesCreated += 1;

      if SalesHeader."Prices Including VAT" and (SalesLine.Type <> SalesLine.Type::" ") then begin
        Currency.Initialize(SalesLine."Currency Code");
        SalesLine."Unit Price" :=
          ROUND(
            SalesLine."Unit Price" * (1 + (SalesLine."VAT %" / 100)),
            Currency."Unit-Amount Rounding Precision");
        if SalesLine.Quantity <> 0 then begin
          SalesLine."Line Discount Amount" :=
            ROUND(
              SalesLine.Quantity * SalesLine."Unit Price" * SalesLine."Line Discount %" / 100,
              Currency."Amount Rounding Precision");
          SalesLine.VALIDATE("Inv. Discount Amount",
            ROUND(
              SalesLine."Inv. Discount Amount" * (1 + (SalesLine."VAT %" / 100)),
              Currency."Amount Rounding Precision"));
        end;
        SalesLine.VALIDATE("Job Contract Entry No.",JobPlanningLine."Job Contract Entry No.");
        OnBeforeModifySalesLine(SalesLine,SalesHeader,Job,JobPlanningLine);
        SalesLine.MODIFY;
        JobPlanningLine."VAT Unit Price" := SalesLine."Unit Price";
        JobPlanningLine."VAT Line Discount Amount" := SalesLine."Line Discount Amount";
        JobPlanningLine."VAT Line Amount" := SalesLine."Line Amount";
        JobPlanningLine."VAT %" := SalesLine."VAT %";
      end;
      if TransferExtendedText.SalesCheckIfAnyExtText(SalesLine,false) then
        TransferExtendedText.InsertSalesExtText(SalesLine);
    END;

    LOCAL PROCEDURE TransferLine@16(VAR JobPlanningLine@1000 : Record "Job Planning Line") : Boolean;
    BEGIN
      with JobPlanningLine do begin
        if not "Contract Line" then
          exit(false);
        if Type = Type::Text then
          exit(true);
        exit("Qty. to Transfer to Invoice" <> 0);
      end;
    END;

    LOCAL PROCEDURE GetNextLineNo@20(SalesLine@1002 : Record "Sales Line") : Integer;
    VAR
      NextLineNo@1000 : Integer;
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      NextLineNo := 10000;
      if SalesLine.FINDLAST then
        NextLineNo := SalesLine."Line No." + 10000;
      exit(NextLineNo);
    END;

    LOCAL PROCEDURE TestTransferred@3(JobPlanningLine@1000 : Record "Job Planning Line");
    BEGIN
      with JobPlanningLine do begin
        CALCFIELDS("Qty. Transferred to Invoice");
        if Quantity > 0 then begin
          if ("Qty. to Transfer to Invoice" > 0) and ("Qty. to Transfer to Invoice" > (Quantity - "Qty. Transferred to Invoice")) or
             ("Qty. to Transfer to Invoice" < 0)
          then
            ERROR(Text003,FIELDCAPTION("Qty. to Transfer to Invoice"),0,Quantity - "Qty. Transferred to Invoice");
        end else begin
          if ("Qty. to Transfer to Invoice" > 0) or
             ("Qty. to Transfer to Invoice" < 0) and ("Qty. to Transfer to Invoice" < (Quantity - "Qty. Transferred to Invoice"))
          then
            ERROR(Text003,FIELDCAPTION("Qty. to Transfer to Invoice"),Quantity - "Qty. Transferred to Invoice",0);
        end;
      end;
    END;

    [External]
    PROCEDURE DeleteSalesLine@4(SalesLine@1000 : Record "Sales Line");
    VAR
      JobPlanningLineInvoice@1001 : Record "Job Planning Line Invoice";
      JobPlanningLine@1002 : Record "Job Planning Line";
    BEGIN
      with JobPlanningLineInvoice do begin
        case SalesLine."Document Type" of
          SalesLine."Document Type"::Invoice:
            SETRANGE("Document Type","Document Type"::Invoice);
          SalesLine."Document Type"::"Credit Memo":
            SETRANGE("Document Type","Document Type"::"Credit Memo");
        end;
        SETRANGE("Document No.",SalesLine."Document No.");
        SETRANGE("Line No.",SalesLine."Line No.");
        if FINDSET then
          repeat
            JobPlanningLine.GET("Job No.","Job Task No.","Job Planning Line No.");
            DELETE;
            JobPlanningLine.UpdateQtyToTransfer;
            JobPlanningLine.MODIFY;
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE FindInvoices@13(VAR TempJobPlanningLineInvoice@1002 : TEMPORARY Record "Job Planning Line Invoice";JobNo@1004 : Code[20];JobTaskNo@1005 : Code[20];JobPlanningLineNo@1006 : Integer;DetailLevel@1003 : 'All,"Per Job","Per Job Task","Per Job Planning Line"');
    VAR
      JobPlanningLineInvoice@1001 : Record "Job Planning Line Invoice";
      RecordFound@1000 : Boolean;
    BEGIN
      case DetailLevel of
        DetailLevel::All:
          begin
            if JobPlanningLineInvoice.FINDSET then
              TempJobPlanningLineInvoice := JobPlanningLineInvoice;
            exit;
          end;
        DetailLevel::"Per Job":
          JobPlanningLineInvoice.SETRANGE("Job No.",JobNo);
        DetailLevel::"Per Job Task":
          begin
            JobPlanningLineInvoice.SETRANGE("Job No.",JobNo);
            JobPlanningLineInvoice.SETRANGE("Job Task No.",JobTaskNo);
          end;
        DetailLevel::"Per Job Planning Line":
          begin
            JobPlanningLineInvoice.SETRANGE("Job No.",JobNo);
            JobPlanningLineInvoice.SETRANGE("Job Task No.",JobTaskNo);
            JobPlanningLineInvoice.SETRANGE("Job Planning Line No.",JobPlanningLineNo);
          end;
      end;

      TempJobPlanningLineInvoice.DELETEALL;
      if JobPlanningLineInvoice.FINDSET then begin
        repeat
          RecordFound := false;
          case DetailLevel of
            DetailLevel::"Per Job":
              if TempJobPlanningLineInvoice.GET(
                   JobNo,'',0,JobPlanningLineInvoice."Document Type",JobPlanningLineInvoice."Document No.",0)
              then
                RecordFound := true;
            DetailLevel::"Per Job Task":
              if TempJobPlanningLineInvoice.GET(
                   JobNo,JobTaskNo,0,JobPlanningLineInvoice."Document Type",JobPlanningLineInvoice."Document No.",0)
              then
                RecordFound := true;
            DetailLevel::"Per Job Planning Line":
              if TempJobPlanningLineInvoice.GET(
                   JobNo,JobTaskNo,JobPlanningLineNo,JobPlanningLineInvoice."Document Type",JobPlanningLineInvoice."Document No.",0)
              then
                RecordFound := true;
          end;

          if RecordFound then begin
            TempJobPlanningLineInvoice."Quantity Transferred" += JobPlanningLineInvoice."Quantity Transferred";
            TempJobPlanningLineInvoice."Invoiced Amount (LCY)" += JobPlanningLineInvoice."Invoiced Amount (LCY)";
            TempJobPlanningLineInvoice."Invoiced Cost Amount (LCY)" += JobPlanningLineInvoice."Invoiced Cost Amount (LCY)";
            TempJobPlanningLineInvoice.MODIFY;
          end else begin
            case DetailLevel of
              DetailLevel::"Per Job":
                TempJobPlanningLineInvoice."Job No." := JobNo;
              DetailLevel::"Per Job Task":
                begin
                  TempJobPlanningLineInvoice."Job No." := JobNo;
                  TempJobPlanningLineInvoice."Job Task No." := JobTaskNo;
                end;
              DetailLevel::"Per Job Planning Line":
                begin
                  TempJobPlanningLineInvoice."Job No." := JobNo;
                  TempJobPlanningLineInvoice."Job Task No." := JobTaskNo;
                  TempJobPlanningLineInvoice."Job Planning Line No." := JobPlanningLineNo;
                end;
            end;
            TempJobPlanningLineInvoice."Document Type" := JobPlanningLineInvoice."Document Type";
            TempJobPlanningLineInvoice."Document No." := JobPlanningLineInvoice."Document No.";
            TempJobPlanningLineInvoice."Quantity Transferred" := JobPlanningLineInvoice."Quantity Transferred";
            TempJobPlanningLineInvoice."Invoiced Amount (LCY)" := JobPlanningLineInvoice."Invoiced Amount (LCY)";
            TempJobPlanningLineInvoice."Invoiced Cost Amount (LCY)" := JobPlanningLineInvoice."Invoiced Cost Amount (LCY)";
            TempJobPlanningLineInvoice."Invoiced Date" := JobPlanningLineInvoice."Invoiced Date";
            TempJobPlanningLineInvoice."Transferred Date" := JobPlanningLineInvoice."Transferred Date";
            TempJobPlanningLineInvoice.INSERT;
          end;
        until JobPlanningLineInvoice.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE GetJobPlanningLineInvoices@14(JobPlanningLine@1000 : Record "Job Planning Line");
    VAR
      JobPlanningLineInvoice@1001 : Record "Job Planning Line Invoice";
    BEGIN
      CLEARALL;
      with JobPlanningLine do begin
        if "Line No." = 0 then
          exit;
        TESTFIELD("Job No.");
        TESTFIELD("Job Task No.");

        JobPlanningLineInvoice.SETRANGE("Job No.","Job No.");
        JobPlanningLineInvoice.SETRANGE("Job Task No.","Job Task No.");
        JobPlanningLineInvoice.SETRANGE("Job Planning Line No.","Line No.");
        if JobPlanningLineInvoice.COUNT = 1 then begin
          JobPlanningLineInvoice.FINDFIRST;
          OpenSalesInvoice(JobPlanningLineInvoice);
        end else
          PAGE.RUNMODAL(PAGE::"Job Invoices",JobPlanningLineInvoice);
      end;
    END;

    [External]
    PROCEDURE OpenSalesInvoice@5(JobPlanningLineInvoice@1004 : Record "Job Planning Line Invoice");
    VAR
      SalesHeader@1003 : Record "Sales Header";
      SalesInvHeader@1002 : Record "Sales Invoice Header";
      SalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header";
    BEGIN
      with JobPlanningLineInvoice do
        case "Document Type" of
          "Document Type"::Invoice:
            begin
              SalesHeader.GET(SalesHeader."Document Type"::Invoice,"Document No.");
              PAGE.RUNMODAL(PAGE::"Sales Invoice",SalesHeader);
            end;
          "Document Type"::"Credit Memo":
            begin
              SalesHeader.GET(SalesHeader."Document Type"::"Credit Memo","Document No.");
              PAGE.RUNMODAL(PAGE::"Sales Credit Memo",SalesHeader);
            end;
          "Document Type"::"Posted Invoice":
            begin
              if not SalesInvHeader.GET("Document No.") then
                ERROR(Text012,SalesInvHeader.TABLECAPTION,"Document No.");
              PAGE.RUNMODAL(PAGE::"Posted Sales Invoice",SalesInvHeader);
            end;
          "Document Type"::"Posted Credit Memo":
            begin
              if not SalesCrMemoHeader.GET("Document No.") then
                ERROR(Text012,SalesCrMemoHeader.TABLECAPTION,"Document No.");
              PAGE.RUNMODAL(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
            end;
        end;
    END;

    LOCAL PROCEDURE UpdateSalesHeader@6(VAR SalesHeader@1000 : Record "Sales Header";Job@1001 : Record Job);
    BEGIN
      SalesHeader."Bill-to Contact No." := Job."Bill-to Contact No.";
      SalesHeader."Bill-to Contact" := Job."Bill-to Contact";
      SalesHeader."Bill-to Name" := Job."Bill-to Name";
      SalesHeader."Bill-to Address" := Job."Bill-to Address";
      SalesHeader."Bill-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Bill-to City" := Job."Bill-to City";
      SalesHeader."Bill-to Post Code" := Job."Bill-to Post Code";

      SalesHeader."Sell-to Contact No." := Job."Bill-to Contact No.";
      SalesHeader."Sell-to Contact" := Job."Bill-to Contact";
      SalesHeader."Sell-to Customer Name" := Job."Bill-to Name";
      SalesHeader."Sell-to Address" := Job."Bill-to Address";
      SalesHeader."Sell-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Sell-to City" := Job."Bill-to City";
      SalesHeader."Sell-to Post Code" := Job."Bill-to Post Code";

      SalesHeader."Ship-to Contact" := Job."Bill-to Contact";
      SalesHeader."Ship-to Name" := Job."Bill-to Name";
      SalesHeader."Ship-to Address" := Job."Bill-to Address";
      SalesHeader."Ship-to Address 2" := Job."Bill-to Address 2";
      SalesHeader."Ship-to City" := Job."Bill-to City";
      SalesHeader."Ship-to Post Code" := Job."Bill-to Post Code";
    END;

    LOCAL PROCEDURE TestSalesHeader@8(VAR SalesHeader@1000 : Record "Sales Header";VAR Job@1001 : Record Job);
    BEGIN
      SalesHeader.TESTFIELD("Bill-to Customer No.",Job."Bill-to Customer No.");
      SalesHeader.TESTFIELD("Sell-to Customer No.",Job."Bill-to Customer No.");

      if Job."Currency Code" <> '' then
        SalesHeader.TESTFIELD("Currency Code",Job."Currency Code")
      else
        SalesHeader.TESTFIELD("Currency Code",Job."Invoice Currency Code");
    END;

    LOCAL PROCEDURE TestExchangeRate@12(VAR JobPlanningLine@1001 : Record "Job Planning Line";PostingDate@1000 : Date);
    VAR
      CurrencyExchangeRate@1002 : Record "Currency Exchange Rate";
    BEGIN
      if JobPlanningLine."Currency Code" <> '' then
        if (CurrencyExchangeRate.ExchangeRate(PostingDate,JobPlanningLine."Currency Code") <> JobPlanningLine."Currency Factor")
        then begin
          if not UpdateExchangeRates then
            UpdateExchangeRates := CONFIRM(Text010,true);

          if UpdateExchangeRates then begin
            JobPlanningLine."Currency Date" := PostingDate;
            JobPlanningLine."Document Date" := PostingDate;
            JobPlanningLine.VALIDATE("Currency Date");
            JobPlanningLine."Last Date Modified" := TODAY;
            JobPlanningLine."User ID" := USERID;
            JobPlanningLine.MODIFY(true);
          end else
            ERROR('');
        end;
    END;

    LOCAL PROCEDURE GetLedgEntryDimSetID@17(JobPlanningLine@1000 : Record "Job Planning Line") : Integer;
    VAR
      ResLedgEntry@1001 : Record "Res. Ledger Entry";
      ItemLedgEntry@1002 : Record "Item Ledger Entry";
      GLEntry@1003 : Record "G/L Entry";
    BEGIN
      if JobPlanningLine."Ledger Entry No." = 0 then
        exit(0);

      case JobPlanningLine."Ledger Entry Type" of
        JobPlanningLine."Ledger Entry Type"::Resource:
          begin
            ResLedgEntry.GET(JobPlanningLine."Ledger Entry No.");
            exit(ResLedgEntry."Dimension Set ID");
          end;
        JobPlanningLine."Ledger Entry Type"::Item:
          begin
            ItemLedgEntry.GET(JobPlanningLine."Ledger Entry No.");
            exit(ItemLedgEntry."Dimension Set ID");
          end;
        JobPlanningLine."Ledger Entry Type"::"G/L Account":
          begin
            GLEntry.GET(JobPlanningLine."Ledger Entry No.");
            exit(GLEntry."Dimension Set ID");
          end;
        else
          exit(0);
      end;
    END;

    LOCAL PROCEDURE GetJobLedgEntryDimSetID@21(JobPlanningLine@1000 : Record "Job Planning Line") : Integer;
    VAR
      JobLedgerEntry@1001 : Record "Job Ledger Entry";
    BEGIN
      if JobPlanningLine."Job Ledger Entry No." = 0 then
        exit(0);

      if JobLedgerEntry.GET(JobPlanningLine."Job Ledger Entry No.") then
        exit(JobLedgerEntry."Dimension Set ID");

      exit(0);
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertSalesHeader@19(VAR SalesHeader@1001 : Record "Sales Header";Job@1000 : Record Job);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifySalesHeader@24(VAR SalesHeader@1000 : Record "Sales Header";Job@1001 : Record Job);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertSalesLine@22(VAR SalesLine@1003 : Record "Sales Line";SalesHeader@1002 : Record "Sales Header";Job@1001 : Record Job;JobPlanningLine@1000 : Record "Job Planning Line");
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeModifySalesLine@23(VAR SalesLine@1000 : Record "Sales Line";SalesHeader@1001 : Record "Sales Header";Job@1002 : Record Job;JobPlanningLine@1003 : Record "Job Planning Line");
    BEGIN
    END;

    BEGIN
    END.
  }
}

