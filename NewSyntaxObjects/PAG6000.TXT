OBJECT Page 6000 Dispatch Board
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Dispatch Board;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Service Header";
    SourceTableView=SORTING(Status,"Response Date","Response Time",Priority);
    DataCaptionFields=Status;
    PageType=Worksheet;
    OnOpenPage=BEGIN
                 if UserMgt.GetServiceFilter <> '' then begin
                   FILTERGROUP(2);
                   SETRANGE("Responsibility Center",UserMgt.GetServiceFilter);
                   FILTERGROUP(0);
                 end;
                 SetAllFilters;

                 if ISEMPTY then begin
                   ServOrderFilter := '';
                   SetServOrderFilter;
                 end;
               END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 59      ;1   ;ActionGroup;
                      Name=&Dispatch Board;
                      CaptionML=ENU=&Dispatch Board;
                      Image=ServiceMan }
      { 60      ;2   ;Action    ;
                      Name=&Show Document;
                      ShortCutKey=Shift+F7;
                      CaptionML=ENU=&Show Document;
                      ToolTipML=ENU=Open the document that the information on the line comes from.;
                      ApplicationArea=#Service;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=View;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 PageManagement@1000 : Codeunit "Page Management";
                               BEGIN
                                 PageManagement.PageRunModal(Rec);
                               END;
                                }
      { 8       ;1   ;ActionGroup;
                      Name=Pla&nning;
                      CaptionML=ENU=Pla&nning;
                      Image=Planning }
      { 9       ;2   ;Action    ;
                      Name=Resource &Allocations;
                      CaptionML=ENU=Resource &Allocations;
                      ToolTipML=ENU=View or allocate resources, such as technicians or resource groups to service items. The allocation can be made by resource number or resource group number, allocation date and allocated hours. You can also reallocate and cancel allocations. You can only have one active allocation per service item.;
                      ApplicationArea=#Service;
                      RunObject=Page "Resource Allocations";
                      RunPageView=SORTING(Status,"Document Type","Document No.","Service Item Line No.","Allocation Date","Starting Time",Posted)
                                  WHERE(Status=FILTER(<>Canceled));
                      RunPageLink="Document Type"=FIELD("Document Type"),
                                  "Document No."=FIELD("No.");
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=ResourcePlanning;
                      PromotedCategory=Process }
      { 55      ;2   ;Action    ;
                      Name=Demand Overview;
                      CaptionML=ENU=Demand Overview;
                      ToolTipML=ENU=Get an overview of demand for your items when planning sales, production, jobs, or service management and when they will be available.;
                      ApplicationArea=#Service;
                      Image=Forecast;
                      OnAction=VAR
                                 DemandOverview@1000 : Page "Demand Overview";
                               BEGIN
                                 DemandOverview.SetCalculationParameter(true);
                                 DemandOverview.Initialize(0D,4,'','','');
                                 DemandOverview.RUNMODAL;
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 47      ;1   ;ActionGroup;
                      Name=&Print;
                      CaptionML=ENU=&Print;
                      Image=Print }
      { 48      ;2   ;Action    ;
                      Name=Print &Dispatch Board;
                      Ellipsis=true;
                      CaptionML=ENU=Print &Dispatch Board;
                      ApplicationArea=#Service;
                      Image=Print;
                      OnAction=BEGIN
                                 REPORT.RUN(REPORT::"Dispatch Board",true,true,Rec);
                               END;
                                }
      { 49      ;2   ;Action    ;
                      Name=Print Service &Order;
                      Ellipsis=true;
                      CaptionML=ENU=Print Service &Order;
                      ApplicationArea=#Service;
                      Image=Print;
                      OnAction=BEGIN
                                 CLEAR(ServHeader);
                                 ServHeader.SETRANGE("Document Type","Document Type");
                                 ServHeader.SETRANGE("No.","No.");
                                 REPORT.RUN(REPORT::"Service Order",true,true,ServHeader);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 22  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 24  ;2   ;Field     ;
                Name=ResourceFilter;
                CaptionML=ENU=Resource Filter;
                ToolTipML=ENU=Specifies the filter that displays an overview of documents with service item lines that a certain resource is allocated to.;
                ApplicationArea=#Service;
                SourceExpr=ResourceFilter;
                OnValidate=BEGIN
                             SetResourceFilter;
                             ResourceFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           Res.RESET;
                           if PAGE.RUNMODAL(0,Res) = ACTION::LookupOK then begin
                             Text := Res."No.";
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 39  ;2   ;Field     ;
                Name=ResourceGroupFilter;
                CaptionML=ENU=Resource Group Filter;
                ToolTipML=ENU=Specifies the filter that displays an overview of documents with service item lines that a certain resource group is allocated to.;
                ApplicationArea=#Service;
                SourceExpr=ResourceGroupFilter;
                OnValidate=BEGIN
                             SetResourceGroupFilter;
                             ResourceGroupFilterOnAfterVali;
                           END;

                OnLookup=BEGIN
                           ResourceGroup.RESET;
                           if PAGE.RUNMODAL(0,ResourceGroup) = ACTION::LookupOK then begin
                             Text := ResourceGroup."No.";
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 42  ;2   ;Field     ;
                Name=RespDateFilter;
                CaptionML=ENU=Response Date Filter;
                ToolTipML=ENU=Specifies the filter that displays an overview of documents with the specified value in the Response Date field.;
                ApplicationArea=#Service;
                SourceExpr=RespDateFilter;
                OnValidate=BEGIN
                             SetRespDateFilter;
                             RespDateFilterOnAfterValidate;
                           END;

                ImplicitType=Text }

    { 30  ;2   ;Field     ;
                Name=AllocationFilter;
                CaptionML=ENU=Allocation Filter;
                ToolTipML=ENU=Specifies the filter that displays the overview of documents from their allocation analysis point of view.;
                OptionCaptionML=ENU=" ,No or Partial Allocation,Full Allocation,Reallocation Needed";
                ApplicationArea=#Service;
                SourceExpr=AllocationFilter;
                OnValidate=BEGIN
                             SetAllocFilter;
                             AllocationFilterOnAfterValidat;
                           END;

                ImplicitType=Option }

    { 26  ;2   ;Field     ;
                Name=DocFilter;
                CaptionML=ENU=Document Filter;
                ToolTipML=ENU=Specifies the filter that displays the overview of the documents of the specified type.;
                OptionCaptionML=ENU=Order,Quote,All;
                ApplicationArea=#Service;
                SourceExpr=DocFilter;
                OnValidate=BEGIN
                             SetDocFilter;
                             DocFilterOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 65  ;2   ;Field     ;
                Name=ServOrderFilter;
                CaptionML=ENU=No. Filter;
                ToolTipML=ENU=Specifies the filter that is used to see the specified document.;
                ApplicationArea=#Service;
                SourceExpr=ServOrderFilter;
                OnValidate=BEGIN
                             SetServOrderFilter;
                             ServOrderFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           ServHeader.RESET;
                           SetDocFilter2(ServHeader);
                           if PAGE.RUNMODAL(0,ServHeader) = ACTION::LookupOK then begin
                             Text := ServHeader."No.";
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 79  ;2   ;Field     ;
                Name=StatusFilter;
                CaptionML=ENU=Status Filter;
                ToolTipML=ENU=Specifies the filter that displays an overview of documents with a certain value in the Status field.;
                OptionCaptionML=ENU=" ,Pending,In Process,Finished,On Hold";
                ApplicationArea=#Service;
                SourceExpr=StatusFilter;
                OnValidate=BEGIN
                             SetStatusFilter;
                             StatusFilterOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 45  ;2   ;Field     ;
                Name=CustomFilter;
                CaptionML=ENU=Customer Filter;
                ToolTipML=ENU=Specifies the filter that displays an overview of documents with a certain value in the Customer No. field.;
                ApplicationArea=#Service;
                SourceExpr=CustomFilter;
                OnValidate=BEGIN
                             SetCustFilter;
                             CustomFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           Cust.RESET;
                           if PAGE.RUNMODAL(0,Cust) = ACTION::LookupOK then begin
                             Text := Cust."No.";
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 43  ;2   ;Field     ;
                Name=ContractFilter;
                CaptionML=ENU=Contract Filter;
                ToolTipML=ENU=Specifies all billable prices for the job task.;
                ApplicationArea=#Service;
                SourceExpr=ContractFilter;
                OnValidate=BEGIN
                             SetContractFilter;
                             ContractFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           ServiceContract.RESET;
                           ServiceContract.SETRANGE("Contract Type",ServiceContract."Contract Type"::Contract);
                           if PAGE.RUNMODAL(0,ServiceContract) = ACTION::LookupOK then begin
                             Text := ServiceContract."Contract No.";
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 37  ;2   ;Field     ;
                Name=ZoneFilter;
                CaptionML=ENU=Zone Filter;
                ToolTipML=ENU=Specifies the filter that displays an overview of documents with a certain value in the Service Zone Code field.;
                ApplicationArea=#Service;
                SourceExpr=ZoneFilter;
                OnValidate=BEGIN
                             SetZoneFilter;
                             ZoneFilterOnAfterValidate;
                           END;

                OnLookup=BEGIN
                           ServiceZones.RESET;
                           if PAGE.RUNMODAL(0,ServiceZones) = ACTION::LookupOK then begin
                             Text := ServiceZones.Code;
                             exit(true);
                           end;
                         END;

                ImplicitType=Text }

    { 1   ;1   ;Group     ;
                Name=Group1;
                Editable=FALSE;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                Name=Response Date;
                ToolTipML=ENU=Specifies the estimated date when work on the order should start, that is, when the service order status changes from Pending, to In Process.;
                ApplicationArea=#Service;
                SourceExpr="Response Date";
                ImplicitType=Date }

    { 4   ;2   ;Field     ;
                Name=Response Time;
                ToolTipML=ENU=Specifies the estimated time when work on the order starts, that is, when the service order status changes from Pending, to In Process.;
                ApplicationArea=#Service;
                SourceExpr="Response Time";
                ImplicitType=Time }

    { 81  ;2   ;Field     ;
                Name=Priority;
                ToolTipML=ENU=Specifies the priority of the service order.;
                ApplicationArea=#Service;
                SourceExpr=Priority;
                ImplicitType=Option }

    { 15  ;2   ;Field     ;
                Name=Document Type;
                ToolTipML=ENU=Specifies the type of the service document on the line.;
                ApplicationArea=#Service;
                SourceExpr="Document Type";
                ImplicitType=Option }

    { 6   ;2   ;Field     ;
                Name=No.;
                ToolTipML=ENU=Specifies the number of the service document you are creating.;
                ApplicationArea=#Service;
                SourceExpr="No.";
                ImplicitType=Code20 }

    { 12  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies a short description of the service document, such as Order 2001.;
                ApplicationArea=#Service;
                SourceExpr=Description;
                Visible=FALSE;
                ImplicitType=Text50 }

    { 33  ;2   ;Field     ;
                Name=Status;
                ToolTipML=ENU=Specifies the service order status, which reflects the repair or maintenance status of all service items on the service order.;
                ApplicationArea=#Service;
                SourceExpr=Status;
                ImplicitType=Option }

    { 53  ;2   ;Field     ;
                Name=Customer No.;
                ToolTipML=ENU=Specifies the number of the customer who owns the items in the service document.;
                ApplicationArea=#Service;
                SourceExpr="Customer No.";
                ImplicitType=Code20 }

    { 36  ;2   ;Field     ;
                Name=Name;
                ToolTipML=ENU=Specifies the name of the customer to whom the items on the document will be shipped.;
                ApplicationArea=#Service;
                SourceExpr=Name;
                ImplicitType=Text50 }

    { 28  ;2   ;Field     ;
                Name=Contract No.;
                ToolTipML=ENU=Specifies the number of the contract associated with the order.;
                ApplicationArea=#Service;
                SourceExpr="Contract No.";
                Editable=FALSE;
                ImplicitType=Code20 }

    { 10  ;2   ;Field     ;
                Name=Service Zone Code;
                ToolTipML=ENU=Specifies the service zone code of the customer's ship-to address in the service order.;
                ApplicationArea=#Service;
                SourceExpr="Service Zone Code";
                ImplicitType=Code10 }

    { 16  ;2   ;Field     ;
                Name=No. of Allocations;
                ToolTipML=ENU=Specifies the number of resource allocations to service items in this order.;
                ApplicationArea=#Service;
                SourceExpr="No. of Allocations";
                ImplicitType=Integer }

    { 18  ;2   ;Field     ;
                Name=Order Date;
                ToolTipML=ENU=Specifies the date when the related order was created.;
                ApplicationArea=#Service;
                SourceExpr="Order Date";
                ImplicitType=Date }

    { 20  ;2   ;Field     ;
                Name=Order Time;
                ToolTipML=ENU=Specifies the time when the service order was created.;
                ApplicationArea=#Service;
                SourceExpr="Order Time";
                ImplicitType=Time }

    { 40  ;2   ;Field     ;
                Name=Reallocation Needed;
                ToolTipML=ENU=Specifies that you must reallocate resources to at least one service item in this service order.;
                ApplicationArea=#Service;
                SourceExpr="Reallocation Needed";
                ImplicitType=Boolean }

    { 94  ;1   ;Group     ;
                Name=Group94 }

    { 92  ;2   ;Field     ;
                Name=Description2;
                CaptionML=ENU=Service Order Description;
                ToolTipML=ENU=Specifies a short description of the service document, such as Order 2001.;
                ApplicationArea=#Service;
                SourceExpr=Description;
                Editable=FALSE;
                ImplicitType=Text50 }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=FALSE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      ServiceZones@1018 : Record "Service Zone";
      Cust@1017 : Record Customer;
      Res@1020 : Record Resource;
      ResourceGroup@1023 : Record "Resource Group";
      ServHeader@1004 : Record "Service Header";
      ServiceContract@1019 : Record "Service Contract Header";
      UserMgt@1005 : Codeunit "User Setup Management";
      DocFilter@1006 : 'Order,Quote,All';
      StatusFilter@1007 : '" ",Pending,"In Process",Finished,"On Hold"';
      RespDateFilter@1010 : Text;
      ServOrderFilter@1009 : Text;
      CustomFilter@1013 : Text;
      ZoneFilter@1014 : Text;
      ContractFilter@1015 : Text;
      ResourceFilter@1016 : Text;
      ResourceGroupFilter@1022 : Text;
      AllocationFilter@1008 : '" ","No or Partial Allocation","Full Allocation","Reallocation Needed"';

    [External]
    PROCEDURE SetAllFilters@3();
    BEGIN
      SetDocFilter;
      SetStatusFilter;
      SetRespDateFilter;
      SetServOrderFilter;
      SetCustFilter;
      SetZoneFilter;
      SetContractFilter;
      SetResourceFilter;
      SetResourceGroupFilter;
      SetAllocFilter;
    END;

    [External]
    PROCEDURE SetDocFilter@7();
    BEGIN
      FILTERGROUP(2);
      SetDocFilter2(Rec);
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetDocFilter2@2(VAR ServHeader@1000 : Record "Service Header");
    BEGIN
      with ServHeader do begin
        FILTERGROUP(2);
        case DocFilter of
          DocFilter::Order:
            SETRANGE("Document Type","Document Type"::Order);
          DocFilter::Quote:
            SETRANGE("Document Type","Document Type"::Quote);
          DocFilter::All:
            SETFILTER("Document Type",'%1|%2',"Document Type"::Order,"Document Type"::Quote);
        end;
        FILTERGROUP(0);
      end;
    END;

    [External]
    PROCEDURE SetStatusFilter@8();
    BEGIN
      FILTERGROUP(2);
      case StatusFilter of
        StatusFilter::" ":
          SETRANGE(Status);
        StatusFilter::Pending:
          SETRANGE(Status,Status::Pending);
        StatusFilter::"In Process":
          SETRANGE(Status,Status::"In Process");
        StatusFilter::Finished:
          SETRANGE(Status,Status::Finished);
        StatusFilter::"On Hold":
          SETRANGE(Status,Status::"On Hold");
      end;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetRespDateFilter@9();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Response Date",RespDateFilter);
      RespDateFilter := GETFILTER("Response Date");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetServOrderFilter@10();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("No.",ServOrderFilter);
      ServOrderFilter := GETFILTER("No.");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetCustFilter@11();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Customer No.",CustomFilter);
      CustomFilter := GETFILTER("Customer No.");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetZoneFilter@12();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Service Zone Code",ZoneFilter);
      ZoneFilter := GETFILTER("Service Zone Code");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetContractFilter@13();
    BEGIN
      FILTERGROUP(2);
      SETFILTER("Contract No.",ContractFilter);
      ContractFilter := GETFILTER("Contract No.");
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetResourceFilter@4();
    BEGIN
      FILTERGROUP(2);
      if ResourceFilter <> '' then begin
        SETFILTER("No. of Allocations",'>0');
        SETFILTER("Resource Filter",ResourceFilter);
        ResourceFilter := GETFILTER("Resource Filter");
      end else begin
        if ResourceGroupFilter = '' then
          SETRANGE("No. of Allocations");
        SETRANGE("Resource Filter");
      end;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetResourceGroupFilter@6();
    BEGIN
      FILTERGROUP(2);
      if ResourceGroupFilter <> '' then begin
        SETFILTER("No. of Allocations",'>0');
        SETFILTER("Resource Group Filter",ResourceGroupFilter);
        ResourceGroupFilter := GETFILTER("Resource Group Filter");
      end else begin
        if ResourceFilter = '' then
          SETRANGE("No. of Allocations");
        SETRANGE("Resource Group Filter");
      end;
      FILTERGROUP(0);
    END;

    [External]
    PROCEDURE SetAllocFilter@1();
    BEGIN
      FILTERGROUP(2);
      case AllocationFilter of
        AllocationFilter::" ":
          begin
            SETRANGE("No. of Unallocated Items");
            SETRANGE("Reallocation Needed");
          end;
        AllocationFilter::"No or Partial Allocation":
          begin
            SETFILTER("No. of Unallocated Items",'>0');
            SETRANGE("Reallocation Needed",false);
          end;
        AllocationFilter::"Full Allocation":
          begin
            SETRANGE("No. of Unallocated Items",0);
            SETRANGE("Reallocation Needed",false);
          end;
        AllocationFilter::"Reallocation Needed":
          begin
            SETRANGE("No. of Unallocated Items");
            SETRANGE("Reallocation Needed",true);
          end;
      end;
      FILTERGROUP(0);
    END;

    LOCAL PROCEDURE RespDateFilterOnAfterValidate@19063229();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ServOrderFilterOnAfterValidate@19063213();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE StatusFilterOnAfterValidate@19021475();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ZoneFilterOnAfterValidate@19076430();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE CustomFilterOnAfterValidate@19018481();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ContractFilterOnAfterValidate@19030304();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ResourceFilterOnAfterValidate@19005532();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE DocFilterOnAfterValidate@19004301();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE AllocationFilterOnAfterValidat@19066130();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    LOCAL PROCEDURE ResourceGroupFilterOnAfterVali@19056724();
    BEGIN
      CurrPage.UPDATE(false);
    END;

    BEGIN
    END.
  }
}

