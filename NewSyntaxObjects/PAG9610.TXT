OBJECT Page 9610 XML Schema Viewer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=XML Schema Viewer;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    SourceTable="XML Schema Element";
    SourceTableView=SORTING("XML Schema Code","Sort Key");
    PageType=List;
    PromotedActionCategoriesML=ENU=New,Process,Report,View,Selection,Navigate;
    OnOpenPage=BEGIN
                 if XMLSchemaCodeInternal <> '' then
                   XMLSchemaCode := XMLSchemaCodeInternal;
                 XMLSchema.Code := XMLSchemaCode;
                 if XMLSchema.FIND('=<>') then;
                 XMLSchemaCode := XMLSchema.Code;
                 SETRANGE("XML Schema Code",XMLSchema.Code);
                 SetInternalVariables;
               END;

    OnAfterGetRecord=BEGIN
                       SetStyleExpression;
                     END;

    OnAfterGetCurrRecord=BEGIN
                           NewObjectNo := NewObjectNoInternal;
                           SetStyleExpression;
                         END;

    ActionList=ACTIONS
    {
      { 12      ;    ;ActionContainer;
                      Name=ActionContainer12;
                      ActionContainerType=ActionItems }
      { 16      ;1   ;Action    ;
                      Name=GenerateXMLPort;
                      CaptionML=ENU=Generate XMLport;
                      ToolTipML=ENU=Create the XMLport object for import into the Object Designer.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 XSDParser@1000 : Codeunit "XSD Parser";
                               BEGIN
                                 if NewObjectNo = 0 then
                                   ERROR(NoObjectIDErr);

                                 XSDParser.CreateXMLPortFile(Rec,NewObjectNo,"XML Schema Code",true,false);
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=GenerateDataExchSetup;
                      CaptionML=ENU=Generate Data Exchange Definition;
                      ToolTipML=ENU=Initialize a data exchange definition based on the selected data elements, which you then complete in the Data Exchange Framework.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=Export;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 XSDParser@1000 : Codeunit "XSD Parser";
                               BEGIN
                                 XSDParser.CreateDataExchDefForCAMT(Rec);
                               END;
                                }
      { 19      ;1   ;Action    ;
                      Name=ShowAll;
                      CaptionML=ENU=Show All;
                      ToolTipML=ENU=Show all elements.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=AllLines;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 XSDParser@1000 : Codeunit "XSD Parser";
                               BEGIN
                                 XSDParser.ShowAll(Rec);
                               END;
                                }
      { 20      ;1   ;Action    ;
                      Name=HideNonMandatory;
                      CaptionML=ENU=Hide Nonmandatory;
                      ToolTipML=ENU=Do not show the elements that are marked as non-mandatory.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=ShowSelected;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 XSDParser@1000 : Codeunit "XSD Parser";
                               BEGIN
                                 XSDParser.HideNotMandatory(Rec);
                               END;
                                }
      { 22      ;1   ;Action    ;
                      Name=HideNonSelected;
                      CaptionML=ENU=Hide Nonselected;
                      ToolTipML=ENU=Do not show the elements that are marked as non-selected.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=ShowSelected;
                      PromotedCategory=Category4;
                      OnAction=VAR
                                 XSDParser@1000 : Codeunit "XSD Parser";
                               BEGIN
                                 XSDParser.HideNotSelected(Rec);
                               END;
                                }
      { 9       ;1   ;Action    ;
                      Name=SelectAll;
                      CaptionML=ENU=Select All Mandatory Elements;
                      ToolTipML=ENU=Mark all elements that are mandatory.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=SelectEntries;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 XSDParser@1001 : Codeunit "XSD Parser";
                               BEGIN
                                 XSDParser.SelectMandatory(Rec);
                               END;
                                }
      { 13      ;1   ;Action    ;
                      Name=DeselectAll;
                      CaptionML=ENU=Cancel the Selections;
                      ToolTipML=ENU=Deselect all elements.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=true;
                      Image=SelectEntries;
                      PromotedCategory=Category5;
                      OnAction=VAR
                                 XSDParser@1000 : Codeunit "XSD Parser";
                               BEGIN
                                 if CONFIRM(DeselectQst) then
                                   XSDParser.DeselectAll(Rec);
                               END;
                                }
      { 24      ;1   ;Action    ;
                      Name=DataExchangeDefinitions;
                      CaptionML=ENU=Data Exchange Definitions;
                      ToolTipML=ENU=View or edit the data exchange definitions that exist in the database to enable import/export of data to or from specific data files.;
                      ApplicationArea=#Basic,#Suite;
                      RunObject=Page "Data Exch Def List";
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=XMLFile;
                      PromotedCategory=Category6 }
    }
  }
  CONTROLS
  {
    { 11  ;0   ;Container ;
                Name=Container11;
                ContainerType=ContentArea }

    { 10  ;1   ;Group     ;
                Name=Group10;
                GroupType=Group }

    { 23  ;2   ;Field     ;
                Name=XMLSchemaCode;
                CaptionML=ENU=XML Schema Code;
                ToolTipML=ENU=Specifies the XML schema file whose schema content is displayed on the lines in the XML Schema Viewer window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=XMLSchemaCode;
                TableRelation="XML Schema".Code WHERE (Indentation=CONST(0));
                OnValidate=BEGIN
                             if XMLSchemaCode = '' then
                               CLEAR(XMLSchema)
                             else
                               XMLSchema.GET(XMLSchemaCode);
                             SETRANGE("XML Schema Code",XMLSchemaCode);
                             CurrPage.UPDATE(false);
                           END;

                ImplicitType=Code20 }

    { 25  ;2   ;Group     ;
                Name=Group25;
                GroupType=Group }

    { 18  ;3   ;Field     ;
                Name=NewObjectNo;
                CaptionML=ENU=New XMLport No.;
                ToolTipML=ENU=Specifies the number of the XMLport that is created from this XML schema when you choose the Generate XMLport action in the XML Schema Viewer window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=NewObjectNo;
                OnValidate=BEGIN
                             SetInternalVariables;
                           END;

                ImplicitType=Integer }

    { 8   ;1   ;Group     ;
                Name=Group;
                IndentationColumnName=Indentation;
                IndentationControls=Node Name;
                ShowAsTree=true;
                GroupType=Repeater }

    { 5   ;2   ;Field     ;
                Name=Node Name;
                ToolTipML=ENU=Specifies the name of the node on the imported file.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Node Name";
                Editable=FALSE;
                StyleExpr=StyleExpression;
                ImplicitType=Text250 }

    { 21  ;2   ;Field     ;
                Name=Selected;
                ToolTipML=ENU=Specifies if the node is included in the related XMLport.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Selected;
                OnValidate=BEGIN
                             SetStyleExpression;
                           END;

                ImplicitType=Boolean }

    { 17  ;2   ;Field     ;
                Name=Choice;
                ToolTipML=ENU=Specifies if the node has two or more sibling nodes that function as options.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Choice;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 4   ;2   ;Field     ;
                Name=Node Type;
                ToolTipML=ENU=Specifies a type. This field is intended only for internal use.;
                ApplicationArea=#Advanced;
                SourceExpr="Node Type";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Option }

    { 3   ;2   ;Field     ;
                Name=Data Type;
                ToolTipML=ENU=Specifies the type of the data and provides additional explanation of the tags in the Node Name.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Data Type";
                Editable=FALSE;
                ImplicitType=Text250 }

    { 2   ;2   ;Field     ;
                Name=MinOccurs;
                ToolTipML=ENU=Specifies the lowest number of times that the node appears in the XML schema. If the value in this field is 1 or higher, then the node is considered mandatory to create a valid XMLport.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MinOccurs;
                Editable=FALSE;
                ImplicitType=Integer }

    { 1   ;2   ;Field     ;
                Name=MaxOccurs;
                ToolTipML=ENU=Specifies the highest number of times that the node appears in the XML schema.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=MaxOccurs;
                Editable=FALSE;
                ImplicitType=Integer }

    { 7   ;2   ;Field     ;
                Name=Simple Data Type;
                ToolTipML=ENU=Specifies the base (unstructured) type of the schema element, such as the Decimal and Date strings.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Simple Data Type";
                ImplicitType=Text50 }

    { 14  ;0   ;Container ;
                Name=Container14;
                ContainerType=FactBoxArea }

    { 15  ;1   ;Part      ;
                Name=Allowed Values;
                CaptionML=ENU=Allowed Values;
                ApplicationArea=#Basic,#Suite;
                SubPageLink="XML Schema Code"=FIELD("XML Schema Code"),
                            "Element ID"=FIELD(ID);
                PagePartID="XML Schema Restrictions Part";
                PartType=Page }

  }
  CODE
  {
    VAR
      XMLSchema@1003 : Record "XML Schema";
      XMLSchemaCode@1004 : Code[20];
      XMLSchemaCodeInternal@1010 : Code[20];
      NewObjectNo@1001 : Integer;
      NoObjectIDErr@1000 : TextConst 'ENU=You must provide an object number.';
      NewObjectNoInternal@1008 : Integer;
      DeselectQst@1007 : TextConst 'ENU=Do you want to deselect all elements?';
      StyleExpression@1006 : Text;

    [External]
    PROCEDURE SetXMLSchemaCode@1(NewXMLSchemaCode@1000 : Code[20]);
    BEGIN
      XMLSchemaCodeInternal := NewXMLSchemaCode;
    END;

    LOCAL PROCEDURE SetInternalVariables@9();
    BEGIN
      NewObjectNoInternal := NewObjectNo;
    END;

    LOCAL PROCEDURE SetStyleExpression@2();
    VAR
      ChildXMLSchemaElement@1000 : Record "XML Schema Element";
    BEGIN
      StyleExpression := '';
      if ("Defintion XML Schema Code" <> '') or ("Definition XML Schema ID" <> 0) then begin
        StyleExpression := 'Subordinate';
        exit;
      end;

      ChildXMLSchemaElement.SETRANGE("XML Schema Code","XML Schema Code");
      ChildXMLSchemaElement.SETRANGE("Parent ID",ID);
      if not ChildXMLSchemaElement.ISEMPTY then
        StyleExpression := 'Strong';
    END;

    BEGIN
    END.
  }
}

