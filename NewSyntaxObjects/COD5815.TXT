OBJECT Codeunit 5815 Undo Sales Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Sales Shipment Line";
    Permissions=TableData "Sales Line"=imd,
                TableData "Sales Shipment Line"=imd,
                TableData "Item Application Entry"=rmd,
                TableData "Item Entry Relation"=ri;
    OnRun=VAR
            UpdateItemAnalysisView@1000 : Codeunit "Update Item Analysis View";
          BEGIN
            SETRANGE(Type,Type::Item);
            SETFILTER(Quantity,'<>0');
            if not FIND('-') then
              ERROR(Text006);

            if not HideDialog then
              if not CONFIRM(Text000) then
                exit;

            SalesShptLine.COPY(Rec);
            Code;
            UpdateItemAnalysisView.UpdateAll(0,true);
            Rec := SalesShptLine;
          END;

  }
  CODE
  {
    VAR
      SalesShptLine@1001 : Record "Sales Shipment Line";
      TempWhseJnlLine@1017 : TEMPORARY Record "Warehouse Journal Line";
      TempGlobalItemLedgEntry@1026 : TEMPORARY Record "Item Ledger Entry";
      TempGlobalItemEntryRelation@1025 : TEMPORARY Record "Item Entry Relation";
      InvtSetup@1007 : Record "Inventory Setup";
      UndoPostingMgt@1024 : Codeunit "Undo Posting Management";
      ItemJnlPostLine@1000 : Codeunit "Item Jnl.-Post Line";
      Text000@1003 : TextConst 'ENU=Do you really want to undo the selected Shipment lines?';
      Text001@1009 : TextConst 'ENU=Undo quantity posting...';
      Text002@1002 : TextConst 'ENU=There is not enough space to insert correction lines.';
      WhseUndoQty@1015 : Codeunit "Whse. Undo Quantity";
      InvtAdjmt@1008 : Codeunit "Inventory Adjustment";
      ResJnlPostLine@1004 : Codeunit "Res. Jnl.-Post Line";
      WhseJnlRegisterLine@1013 : Codeunit "Whse. Jnl.-Register Line";
      AsmPost@1022 : Codeunit "Assembly-Post";
      ATOWindow@1023 : Dialog;
      HideDialog@1005 : Boolean;
      Text003@1006 : TextConst 'ENU=Checking lines...';
      Text004@1016 : TextConst 'ENU=Some shipment lines may have unused service items. Do you want to delete them?';
      NextLineNo@1014 : Integer;
      Text005@1010 : TextConst 'ENU=This shipment has already been invoiced. Undo Shipment can be applied only to posted, but not invoiced shipments.';
      Text006@1011 : TextConst 'ENU=Undo Shipment can be performed only for lines of type Item. Please select a line of the Item type and repeat the procedure.';
      Text055@1019 : TextConst 'ENU=#1#################################\\Checking Undo Assembly #2###########.';
      Text056@1018 : TextConst 'ENU=#1#################################\\Posting Undo Assembly #2###########.';
      Text057@1012 : TextConst 'ENU=#1#################################\\Finalizing Undo Assembly #2###########.';
      Text059@1021 : TextConst '@@@="%1 = SalesShipmentLine.""Document No."". %2 = SalesShipmentLine.FIELDCAPTION(""Line No.""). %3 = SalesShipmentLine.""Line No."". This is used in a progress window.";ENU=%1 %2 %3';

    [External]
    PROCEDURE SetHideDialog@8(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    LOCAL PROCEDURE Code@2();
    VAR
      PostedWhseShptLine@1006 : Record "Posted Whse. Shipment Line";
      SalesLine@1007 : Record "Sales Line";
      ServItem@1003 : Record "Service Item";
      Window@1001 : Dialog;
      ItemShptEntryNo@1002 : Integer;
      DocLineNo@1004 : Integer;
      DeleteServItems@1000 : Boolean;
      PostedWhseShptLineFound@1005 : Boolean;
    BEGIN
      with SalesShptLine do begin
        CLEAR(ItemJnlPostLine);
        SETCURRENTKEY("Item Shpt. Entry No.");
        SETRANGE(Correction,false);

        repeat
          if not HideDialog then
            Window.OPEN(Text003);
          CheckSalesShptLine(SalesShptLine);
        until NEXT = 0;

        ServItem.SETCURRENTKEY("Sales/Serv. Shpt. Document No.");
        ServItem.SETRANGE("Sales/Serv. Shpt. Document No.","Document No.");
        if ServItem.FINDFIRST then
          if not HideDialog then
            DeleteServItems := CONFIRM(Text004,true)
          else
            DeleteServItems := true;

        FIND('-');
        repeat
          TempGlobalItemLedgEntry.RESET;
          if not TempGlobalItemLedgEntry.ISEMPTY then
            TempGlobalItemLedgEntry.DELETEALL;
          TempGlobalItemEntryRelation.RESET;
          if not TempGlobalItemEntryRelation.ISEMPTY then
            TempGlobalItemEntryRelation.DELETEALL;

          if not HideDialog then
            Window.OPEN(Text001);

          PostedWhseShptLineFound :=
            WhseUndoQty.FindPostedWhseShptLine(
              PostedWhseShptLine,
              DATABASE::"Sales Shipment Line",
              "Document No.",
              DATABASE::"Sales Line",
              SalesLine."Document Type"::Order,
              "Order No.",
              "Order Line No.");

          CLEAR(ItemJnlPostLine);
          ItemShptEntryNo := PostItemJnlLine(SalesShptLine,DocLineNo);

          InsertNewShipmentLine(SalesShptLine,ItemShptEntryNo,DocLineNo);

          if PostedWhseShptLineFound then
            WhseUndoQty.UndoPostedWhseShptLine(PostedWhseShptLine);

          TempWhseJnlLine.SETRANGE("Source Line No.","Line No.");
          WhseUndoQty.PostTempWhseJnlLine(TempWhseJnlLine);

          UndoPostATO(SalesShptLine);

          UpdateOrderLine(SalesShptLine);
          if PostedWhseShptLineFound then
            WhseUndoQty.UpdateShptSourceDocLines(PostedWhseShptLine);

          if ("Blanket Order No." <> '') and ("Blanket Order Line No." <> 0) then
            UpdateBlanketOrder(SalesShptLine);

          if DeleteServItems then
            DeleteSalesShptLineServItems(SalesShptLine);

          "Quantity Invoiced" := Quantity;
          "Qty. Invoiced (Base)" := "Quantity (Base)";
          "Qty. Shipped Not Invoiced" := 0;
          Correction := true;
          MODIFY;
          OnAfterSalesShptLineModify(SalesShptLine);

          UndoFinalizePostATO(SalesShptLine);
        until NEXT = 0;

        InvtSetup.GET;
        if InvtSetup."Automatic Cost Adjustment" <>
           InvtSetup."Automatic Cost Adjustment"::Never
        then begin
          InvtAdjmt.SetProperties(true,InvtSetup."Automatic Cost Posting");
          InvtAdjmt.SetJobUpdateProperties(true);
          InvtAdjmt.MakeMultiLevelAdjmt;
        end;
      end;
    END;

    LOCAL PROCEDURE CheckSalesShptLine@3(SalesShptLine@1001 : Record "Sales Shipment Line");
    VAR
      TempItemLedgEntry@1015 : TEMPORARY Record "Item Ledger Entry";
    BEGIN
      with SalesShptLine do begin
        TESTFIELD(Type,Type::Item);
        if "Qty. Shipped Not Invoiced" <> Quantity then
          ERROR(Text005);
        TESTFIELD("Drop Shipment",false);

        UndoPostingMgt.TestSalesShptLine(SalesShptLine);
        UndoPostingMgt.CollectItemLedgEntries(TempItemLedgEntry,DATABASE::"Sales Shipment Line",
          "Document No.","Line No.","Quantity (Base)","Item Shpt. Entry No.");
        UndoPostingMgt.CheckItemLedgEntries(TempItemLedgEntry,"Line No.");

        UndoInitPostATO(SalesShptLine);
      end;
    END;

    LOCAL PROCEDURE PostItemJnlLine@5(SalesShptLine@1000 : Record "Sales Shipment Line";VAR DocLineNo@1003 : Integer) : Integer;
    VAR
      ItemJnlLine@1001 : Record "Item Journal Line";
      SalesLine@1006 : Record "Sales Line";
      SalesShptHeader@1004 : Record "Sales Shipment Header";
      SalesShptLine2@1007 : Record "Sales Shipment Line";
      SourceCodeSetup@1002 : Record "Source Code Setup";
      TempApplyToEntryList@1005 : TEMPORARY Record "Item Ledger Entry";
      ItemLedgEntryNotInvoiced@1011 : Record "Item Ledger Entry";
      LineSpacing@1008 : Integer;
      RemQtyBase@1010 : Decimal;
    BEGIN
      with SalesShptLine do begin
        SalesShptLine2.SETRANGE("Document No.","Document No.");
        SalesShptLine2."Document No." := "Document No.";
        SalesShptLine2."Line No." := "Line No.";
        SalesShptLine2.FIND('=');

        if SalesShptLine2.FIND('>') then begin
          LineSpacing := (SalesShptLine2."Line No." - "Line No.") div 2;
          if LineSpacing = 0 then
            ERROR(Text002);
        end else
          LineSpacing := 10000;
        DocLineNo := "Line No." + LineSpacing;

        SourceCodeSetup.GET;
        SalesShptHeader.GET("Document No.");

        ItemJnlLine.INIT;
        ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::Sale;
        ItemJnlLine."Item No." := "No.";
        ItemJnlLine."Posting Date" := SalesShptHeader."Posting Date";
        ItemJnlLine."Document No." := "Document No.";
        ItemJnlLine."Document Line No." := DocLineNo;
        ItemJnlLine."Gen. Bus. Posting Group" := "Gen. Bus. Posting Group";
        ItemJnlLine."Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
        ItemJnlLine."Location Code" := "Location Code";
        ItemJnlLine."Source Code" := SourceCodeSetup.Sales;
        ItemJnlLine.Correction := true;
        ItemJnlLine."Variant Code" := "Variant Code";
        ItemJnlLine."Bin Code" := "Bin Code";
        ItemJnlLine."Document Date" := SalesShptHeader."Document Date";

        WhseUndoQty.InsertTempWhseJnlLine(ItemJnlLine,
          DATABASE::"Sales Line",
          SalesLine."Document Type"::Order,
          "Order No.",
          "Order Line No.",
          TempWhseJnlLine."Reference Document"::"Posted Shipment",
          TempWhseJnlLine,
          NextLineNo);

        RemQtyBase := -"Quantity (Base)";
        if GetUnvoicedShptEntries(SalesShptLine,ItemLedgEntryNotInvoiced) then begin
          repeat
            ItemJnlLine."Applies-to Entry" := ItemLedgEntryNotInvoiced."Entry No.";
            ItemJnlLine.Quantity := ItemLedgEntryNotInvoiced.Quantity;
            ItemJnlLine."Quantity (Base)" := ItemLedgEntryNotInvoiced.Quantity;
            ItemJnlPostLine.RUN(ItemJnlLine);
            RemQtyBase -= ItemJnlLine.Quantity;
            if ItemLedgEntryNotInvoiced.NEXT = 0 then;
          until (RemQtyBase = 0);
          exit(ItemJnlLine."Item Shpt. Entry No.");
        end;
        UndoPostingMgt.CollectItemLedgEntries(TempApplyToEntryList,DATABASE::"Sales Shipment Line",
          "Document No.","Line No.","Quantity (Base)","Item Shpt. Entry No.");

        UndoPostingMgt.PostItemJnlLineAppliedToList(ItemJnlLine,TempApplyToEntryList,
          Quantity,"Quantity (Base)",TempGlobalItemLedgEntry,TempGlobalItemEntryRelation);

        exit(0); // "Item Shpt. Entry No."
      end;
    END;

    LOCAL PROCEDURE InsertNewShipmentLine@1(OldSalesShptLine@1000 : Record "Sales Shipment Line";ItemShptEntryNo@1001 : Integer;DocLineNo@1004 : Integer);
    VAR
      NewSalesShptLine@1002 : Record "Sales Shipment Line";
    BEGIN
      with OldSalesShptLine do begin
        NewSalesShptLine.INIT;
        NewSalesShptLine.COPY(OldSalesShptLine);
        NewSalesShptLine."Line No." := DocLineNo;
        NewSalesShptLine."Appl.-from Item Entry" := "Item Shpt. Entry No.";
        NewSalesShptLine."Item Shpt. Entry No." := ItemShptEntryNo;
        NewSalesShptLine.Quantity := -Quantity;
        NewSalesShptLine."Qty. Shipped Not Invoiced" := 0;
        NewSalesShptLine."Quantity (Base)" := -"Quantity (Base)";
        NewSalesShptLine."Quantity Invoiced" := NewSalesShptLine.Quantity;
        NewSalesShptLine."Qty. Invoiced (Base)" := NewSalesShptLine."Quantity (Base)";
        NewSalesShptLine.Correction := true;
        NewSalesShptLine."Dimension Set ID" := "Dimension Set ID";
        NewSalesShptLine.INSERT;

        InsertItemEntryRelation(TempGlobalItemEntryRelation,NewSalesShptLine);
      end;
    END;

    LOCAL PROCEDURE UpdateOrderLine@4(SalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      with SalesShptLine do begin
        SalesLine.GET(SalesLine."Document Type"::Order,"Order No.","Order Line No.");
        UndoPostingMgt.UpdateSalesLine(SalesLine,Quantity,"Quantity (Base)",TempGlobalItemLedgEntry);
      end;
    END;

    LOCAL PROCEDURE UpdateBlanketOrder@7(SalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      BlanketOrderSalesLine@1001 : Record "Sales Line";
      xBlanketOrderSalesLine@1002 : Record "Sales Line";
    BEGIN
      with SalesShptLine do
        if BlanketOrderSalesLine.GET(
             BlanketOrderSalesLine."Document Type"::"Blanket Order","Blanket Order No.","Blanket Order Line No.")
        then begin
          BlanketOrderSalesLine.TESTFIELD(Type,Type);
          BlanketOrderSalesLine.TESTFIELD("No.","No.");
          BlanketOrderSalesLine.TESTFIELD("Sell-to Customer No.","Sell-to Customer No.");
          xBlanketOrderSalesLine := BlanketOrderSalesLine;

          if BlanketOrderSalesLine."Qty. per Unit of Measure" = "Qty. per Unit of Measure" then
            BlanketOrderSalesLine."Quantity Shipped" := BlanketOrderSalesLine."Quantity Shipped" - Quantity
          else
            BlanketOrderSalesLine."Quantity Shipped" :=
              BlanketOrderSalesLine."Quantity Shipped" -
              ROUND("Qty. per Unit of Measure" / BlanketOrderSalesLine."Qty. per Unit of Measure" * Quantity,0.00001);

          BlanketOrderSalesLine."Qty. Shipped (Base)" := BlanketOrderSalesLine."Qty. Shipped (Base)" - "Quantity (Base)";
          BlanketOrderSalesLine.InitOutstanding;
          BlanketOrderSalesLine.MODIFY;

          AsmPost.UpdateBlanketATO(xBlanketOrderSalesLine,BlanketOrderSalesLine);
        end;
    END;

    LOCAL PROCEDURE InsertItemEntryRelation@12(VAR TempItemEntryRelation@1003 : TEMPORARY Record "Item Entry Relation";NewSalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      ItemEntryRelation@1002 : Record "Item Entry Relation";
    BEGIN
      if TempItemEntryRelation.FIND('-') then
        repeat
          ItemEntryRelation := TempItemEntryRelation;
          ItemEntryRelation.TransferFieldsSalesShptLine(NewSalesShptLine);
          ItemEntryRelation.INSERT;
        until TempItemEntryRelation.NEXT = 0;
    END;

    LOCAL PROCEDURE DeleteSalesShptLineServItems@10(SalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      ServItem@1003 : Record "Service Item";
    BEGIN
      ServItem.SETCURRENTKEY("Sales/Serv. Shpt. Document No.","Sales/Serv. Shpt. Line No.");
      ServItem.SETRANGE("Sales/Serv. Shpt. Document No.",SalesShptLine."Document No.");
      ServItem.SETRANGE("Sales/Serv. Shpt. Line No.",SalesShptLine."Line No.");
      ServItem.SETRANGE("Shipment Type",ServItem."Shipment Type"::Sales);
      if ServItem.FIND('-') then
        repeat
          if ServItem.CheckIfCanBeDeleted = '' then
            if ServItem.DELETE(true) then;
        until ServItem.NEXT = 0;
    END;

    LOCAL PROCEDURE UndoInitPostATO@53(VAR SalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      PostedAsmHeader@1001 : Record "Posted Assembly Header";
    BEGIN
      if SalesShptLine.AsmToShipmentExists(PostedAsmHeader) then begin
        OpenATOProgressWindow(Text055,SalesShptLine,PostedAsmHeader);

        AsmPost.UndoInitPostATO(PostedAsmHeader);

        ATOWindow.CLOSE;
      end;
    END;

    LOCAL PROCEDURE UndoPostATO@59(VAR SalesShptLine@1004 : Record "Sales Shipment Line");
    VAR
      PostedAsmHeader@1000 : Record "Posted Assembly Header";
    BEGIN
      if SalesShptLine.AsmToShipmentExists(PostedAsmHeader) then begin
        OpenATOProgressWindow(Text056,SalesShptLine,PostedAsmHeader);

        AsmPost.UndoPostATO(PostedAsmHeader,ItemJnlPostLine,ResJnlPostLine,WhseJnlRegisterLine);

        ATOWindow.CLOSE;
      end;
    END;

    LOCAL PROCEDURE UndoFinalizePostATO@61(VAR SalesShptLine@1004 : Record "Sales Shipment Line");
    VAR
      PostedAsmHeader@1000 : Record "Posted Assembly Header";
    BEGIN
      if SalesShptLine.AsmToShipmentExists(PostedAsmHeader) then begin
        OpenATOProgressWindow(Text057,SalesShptLine,PostedAsmHeader);

        AsmPost.UndoFinalizePostATO(PostedAsmHeader);
        SynchronizeATO(SalesShptLine);

        ATOWindow.CLOSE;
      end;
    END;

    LOCAL PROCEDURE SynchronizeATO@9(VAR SalesShptLine@1000 : Record "Sales Shipment Line");
    VAR
      SalesLine@1001 : Record "Sales Line";
      AsmHeader@1003 : Record "Assembly Header";
    BEGIN
      with SalesLine do begin
        GET("Document Type"::Order,SalesShptLine."Order No.",SalesShptLine."Order Line No.");

        if AsmToOrderExists(AsmHeader) and (AsmHeader.Status = AsmHeader.Status::Released) then begin
          AsmHeader.Status := AsmHeader.Status::Open;
          AsmHeader.MODIFY;
          AutoAsmToOrder;
          AsmHeader.Status := AsmHeader.Status::Released;
          AsmHeader.MODIFY;
        end else
          AutoAsmToOrder;

        MODIFY(true);
      end;
    END;

    LOCAL PROCEDURE OpenATOProgressWindow@11(State@1000 : Text[250];SalesShptLine@1001 : Record "Sales Shipment Line";PostedAsmHeader@1002 : Record "Posted Assembly Header");
    BEGIN
      ATOWindow.OPEN(State);
      ATOWindow.UPDATE(1,
        STRSUBSTNO(Text059,
          SalesShptLine."Document No.",SalesShptLine.FIELDCAPTION("Line No."),SalesShptLine."Line No."));
      ATOWindow.UPDATE(2,PostedAsmHeader."No.");
    END;

    LOCAL PROCEDURE GetUnvoicedShptEntries@6(SalesShptLine@1000 : Record "Sales Shipment Line";VAR ItemLedgEntry@1001 : Record "Item Ledger Entry") : Boolean;
    BEGIN
      ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Sales Shipment");
      ItemLedgEntry.SETRANGE("Document No.",SalesShptLine."Document No.");
      ItemLedgEntry.SETRANGE("Document Line No.",SalesShptLine."Line No.");
      ItemLedgEntry.SETRANGE("Serial No.",'');
      ItemLedgEntry.SETRANGE("Lot No.",'');
      ItemLedgEntry.SETRANGE("Completely Invoiced",false);
      exit(ItemLedgEntry.FINDSET)
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterSalesShptLineModify@13(VAR SalesShptLine@1000 : Record "Sales Shipment Line");
    BEGIN
    END;

    BEGIN
    END.
  }
}

