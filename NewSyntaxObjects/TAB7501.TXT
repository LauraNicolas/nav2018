OBJECT Table 7501 Item Attribute Value
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields=Value;
    OnDelete=VAR
               ItemAttrValueTranslation@1000 : Record "Item Attr. Value Translation";
               ItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";
             BEGIN
               if HasBeenUsed then
                 if not CONFIRM(DeleteUsedAttributeValueQst) then
                   ERROR('');
               ItemAttributeValueMapping.SETRANGE("Item Attribute ID","Attribute ID");
               ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",ID);
               ItemAttributeValueMapping.DELETEALL;

               ItemAttrValueTranslation.SETRANGE("Attribute ID","Attribute ID");
               ItemAttrValueTranslation.SETRANGE(ID,ID);
               ItemAttrValueTranslation.DELETEALL;
             END;

    CaptionML=ENU=Item Attribute Value;
    LookupPageID="Item Attribute Values";
  }
  FIELDS
  {
    { 1   ;   ;Attribute ID        ;Integer       ;TableRelation="Item Attribute".ID WHERE (Blocked=CONST(false));
                                                   CaptionML=ENU=Attribute ID;
                                                   NotBlank=true }
    { 2   ;   ;ID                  ;Integer       ;AutoIncrement=true;
                                                   CaptionML=ENU=ID }
    { 3   ;   ;Value               ;Text250       ;OnValidate=VAR
                                                                ItemAttribute@1000 : Record "Item Attribute";
                                                              BEGIN
                                                                if xRec.Value = Value then
                                                                  exit;

                                                                TESTFIELD(Value);
                                                                if HasBeenUsed then
                                                                  if not CONFIRM(RenameUsedAttributeValueQst) then
                                                                    ERROR('');

                                                                CheckValueUniqueness(Rec,Value);
                                                                DeleteTranslationsConditionally(xRec,Value);

                                                                ItemAttribute.GET("Attribute ID");
                                                                if IsNumeric(ItemAttribute) then
                                                                  if not EVALUATE("Numeric Value",Value,9) then
                                                                    EVALUATE("Numeric Value",Value);
                                                              END;

                                                   CaptionML=ENU=Value }
    { 4   ;   ;Numeric Value       ;Decimal       ;OnValidate=VAR
                                                                ItemAttribute@1000 : Record "Item Attribute";
                                                              BEGIN
                                                                if xRec."Numeric Value" = "Numeric Value" then
                                                                  exit;

                                                                ItemAttribute.GET("Attribute ID");
                                                                if IsNumeric(ItemAttribute) then
                                                                  VALIDATE(Value,FORMAT("Numeric Value",0,9));
                                                              END;

                                                   CaptionML=ENU=Numeric Value;
                                                   BlankZero=true }
    { 6   ;   ;Blocked             ;Boolean       ;CaptionML=ENU=Blocked }
    { 10  ;   ;Attribute Name      ;Text250       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Item Attribute".Name WHERE (ID=FIELD("Attribute ID")));
                                                   CaptionML=ENU=Attribute Name }
  }
  KEYS
  {
    {    ;"Attribute ID",ID                       ;Clustered=true }
    {    ;Value                                    }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Value                                    }
    { 2   ;Brick               ;"Attribute Name",Value                   }
  }
  CODE
  {
    VAR
      NameAlreadyExistsErr@1000 : TextConst '@@@=%1 - arbitrary name;ENU=The item attribute value with value ''%1'' already exists.';
      ReuseValueTranslationsQst@1001 : TextConst '@@@=%1 - arbitrary name,%2 - arbitrary name;ENU=There are translations for item attribute value ''%1''.\\Do you want to reuse these translations for the new value ''%2''?';
      DeleteUsedAttributeValueQst@1003 : TextConst 'ENU=This item attribute value has been assigned to at least one item.\\Are you sure you want to delete it?';
      RenameUsedAttributeValueQst@1002 : TextConst 'ENU=This item attribute value has been assigned to at least one item.\\Are you sure you want to rename it?';
      TransformationRule@1004 : Record "Transformation Rule";

    [External]
    PROCEDURE LookupAttributeValue@24(AttributeID@1000 : Integer;VAR AttributeValueID@1001 : Integer);
    VAR
      ItemAttributeValue@1003 : Record "Item Attribute Value";
      ItemAttributeValues@1002 : Page "Item Attribute Values";
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID",AttributeID);
      ItemAttributeValues.LOOKUPMODE := true;
      ItemAttributeValues.SETTABLEVIEW(ItemAttributeValue);
      if ItemAttributeValue.GET(AttributeID,AttributeValueID) then
        ItemAttributeValues.SETRECORD(ItemAttributeValue);
      if ItemAttributeValues.RUNMODAL = ACTION::LookupOK then begin
        ItemAttributeValues.GETRECORD(ItemAttributeValue);
        AttributeValueID := ItemAttributeValue.ID;
      end;
    END;

    [External]
    PROCEDURE GetAttributeNameInCurrentLanguage@2() : Text[250];
    VAR
      ItemAttribute@1000 : Record "Item Attribute";
    BEGIN
      if ItemAttribute.GET("Attribute ID") then
        exit(ItemAttribute.GetNameInCurrentLanguage);
      exit('');
    END;

    [External]
    PROCEDURE GetValueInCurrentLanguage@4() : Text;
    VAR
      ItemAttribute@1000 : Record "Item Attribute";
      ValueDecimal@1001 : Decimal;
    BEGIN
      if ItemAttribute.GET("Attribute ID") then
        case ItemAttribute.Type of
          ItemAttribute.Type::Option:
            exit(GetTranslatedName(GLOBALLANGUAGE));
          ItemAttribute.Type::Text:
            exit(Value);
          ItemAttribute.Type::Integer:
            if Value <> '' then
              exit(AppendUnitOfMeasure(FORMAT(Value),ItemAttribute));
          ItemAttribute.Type::Decimal:
            if Value <> '' then begin
              if not EVALUATE(ValueDecimal,Value,9) then
                EVALUATE(ValueDecimal,Value);
              exit(AppendUnitOfMeasure(FORMAT(ValueDecimal),ItemAttribute));
            end;
        end;
      exit('');
    END;

    [External]
    PROCEDURE GetTranslatedName@3(LanguageID@1000 : Integer) : Text[250];
    VAR
      Language@1001 : Record Language;
    BEGIN
      Language.SETRANGE("Windows Language ID",LanguageID);
      if Language.FINDFIRST then
        exit(GetAttributeValueTranslation(Language.Code));
      exit(Value);
    END;

    LOCAL PROCEDURE GetAttributeValueTranslation@19(LanguageCode@1000 : Code[10]) : Text[250];
    VAR
      ItemAttrValueTranslation@1001 : Record "Item Attr. Value Translation";
    BEGIN
      if not ItemAttrValueTranslation.GET("Attribute ID",ID,LanguageCode) then
        exit(Value);
      exit(ItemAttrValueTranslation.Name);
    END;

    LOCAL PROCEDURE CheckValueUniqueness@5(ItemAttributeValue@1000 : Record "Item Attribute Value";NameToCheck@1001 : Text[250]);
    BEGIN
      ItemAttributeValue.SETRANGE("Attribute ID","Attribute ID");
      ItemAttributeValue.SETFILTER(ID,'<>%1',ItemAttributeValue.ID);
      ItemAttributeValue.SETRANGE(Value,NameToCheck);
      if not ItemAttributeValue.ISEMPTY then
        ERROR(NameAlreadyExistsErr,NameToCheck);
    END;

    LOCAL PROCEDURE DeleteTranslationsConditionally@7(ItemAttributeValue@1000 : Record "Item Attribute Value";NameToCheck@1001 : Text[250]);
    VAR
      ItemAttrValueTranslation@1002 : Record "Item Attr. Value Translation";
    BEGIN
      if (ItemAttributeValue.Value <> '') and (ItemAttributeValue.Value <> NameToCheck) then begin
        ItemAttrValueTranslation.SETRANGE("Attribute ID","Attribute ID");
        ItemAttrValueTranslation.SETRANGE(ID,ID);
        if not ItemAttrValueTranslation.ISEMPTY then
          if not CONFIRM(STRSUBSTNO(ReuseValueTranslationsQst,ItemAttributeValue.Value,NameToCheck)) then
            ItemAttrValueTranslation.DELETEALL;
      end;
    END;

    LOCAL PROCEDURE AppendUnitOfMeasure@1(String@1000 : Text;ItemAttribute@1001 : Record "Item Attribute") : Text;
    BEGIN
      if ItemAttribute."Unit of Measure" <> '' then
        exit(STRSUBSTNO('%1 %2',String,FORMAT(ItemAttribute."Unit of Measure")));
      exit(String);
    END;

    [External]
    PROCEDURE HasBeenUsed@6() : Boolean;
    VAR
      ItemAttributeValueMapping@1000 : Record "Item Attribute Value Mapping";
    BEGIN
      ItemAttributeValueMapping.SETRANGE("Item Attribute ID","Attribute ID");
      ItemAttributeValueMapping.SETRANGE("Item Attribute Value ID",ID);
      exit(not ItemAttributeValueMapping.ISEMPTY);
    END;

    [Internal]
    PROCEDURE SetValueFilter@14(VAR ItemAttribute@1000 : Record "Item Attribute";FilterText@1001 : Text);
    VAR
      IndexOfOrCondition@1003 : Integer;
    BEGIN
      SETRANGE("Numeric Value");
      SETRANGE(Value);

      if IsNumeric(ItemAttribute) then begin
        SETFILTER("Numeric Value",FilterText);
        exit;
      end;

      if ItemAttribute.Type = ItemAttribute.Type::Text then
        if (STRPOS(FilterText,'*') = 0) and (STRPOS(FilterText,'''') = 0) then begin
          FilterText := STRSUBSTNO('@*%1*',LOWERCASE(FilterText));
          IndexOfOrCondition := STRPOS(FilterText,'|');
          if IndexOfOrCondition > 0 then begin
            TransformationRule.INIT;
            TransformationRule."Find Value" := '|';
            TransformationRule."Replace Value" := '*|@*';
            TransformationRule."Transformation Type" := TransformationRule."Transformation Type"::Replace;
            FilterText := TransformationRule.TransformText(FilterText);
          end
        end;

      SETFILTER(Value,FilterText);
    END;

    LOCAL PROCEDURE IsNumeric@8(VAR ItemAttribute@1000 : Record "Item Attribute") : Boolean;
    BEGIN
      exit(ItemAttribute.Type in [ItemAttribute.Type::Integer,ItemAttribute.Type::Decimal]);
    END;

    [External]
    PROCEDURE LoadItemAttributesFactBoxData@15(KeyValue@1000 : Code[20]);
    VAR
      ItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";
      ItemAttributeValue@1002 : Record "Item Attribute Value";
    BEGIN
      RESET;
      DELETEALL;
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);
      ItemAttributeValueMapping.SETRANGE("No.",KeyValue);
      if ItemAttributeValueMapping.FINDSET then
        repeat
          if ItemAttributeValue.GET(ItemAttributeValueMapping."Item Attribute ID",ItemAttributeValueMapping."Item Attribute Value ID") then begin
            TRANSFERFIELDS(ItemAttributeValue);
            INSERT;
          end
        until ItemAttributeValueMapping.NEXT = 0;
    END;

    [External]
    PROCEDURE LoadCategoryAttributesFactBoxData@10(CategoryCode@1000 : Code[20]);
    VAR
      ItemAttributeValueMapping@1001 : Record "Item Attribute Value Mapping";
      ItemAttributeValue@1002 : Record "Item Attribute Value";
      ItemCategory@1003 : Record "Item Category";
    BEGIN
      RESET;
      DELETEALL;
      if CategoryCode = '' then
        exit;
      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::"Item Category");
      repeat
        ItemAttributeValueMapping.SETRANGE("No.",CategoryCode);
        if ItemAttributeValueMapping.FINDSET then
          repeat
            if ItemAttributeValue.GET(ItemAttributeValueMapping."Item Attribute ID",ItemAttributeValueMapping."Item Attribute Value ID") then
              if not AttributeExists(ItemAttributeValue."Attribute ID") then begin
                TRANSFERFIELDS(ItemAttributeValue);
                INSERT;
              end;
          until ItemAttributeValueMapping.NEXT = 0;
        if ItemCategory.GET(CategoryCode) then
          CategoryCode := ItemCategory."Parent Category"
        else
          CategoryCode := '';
      until CategoryCode = '';
    END;

    LOCAL PROCEDURE AttributeExists@9(AttributeID@1001 : Integer) AttribExist : Boolean;
    BEGIN
      SETRANGE("Attribute ID",AttributeID);
      AttribExist := not ISEMPTY;
      RESET;
    END;

    BEGIN
    END.
  }
}

