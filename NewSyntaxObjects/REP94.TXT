OBJECT Report 94 Close Income Statement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Close Income Statement;
    ProcessingOnly=true;
    OnPreReport=VAR
                  s@1000 : Text[1024];
                BEGIN
                  if EndDateReq = 0D then
                    ERROR(Text000);
                  ValidateEndDate(true);
                  if DocNo = '' then
                    ERROR(Text001);

                  SelectedDim.GetSelectedDim(USERID,3,REPORT::"Close Income Statement",'',TempSelectedDim);
                  s := CheckDimPostingRules(TempSelectedDim);
                  if s <> '' then
                    if not CONFIRM(s + Text007,false) then
                      ERROR('');

                  GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                  SourceCodeSetup.GET;
                  GLSetup.GET;
                  if GLSetup."Additional Reporting Currency" <> '' then begin
                    if RetainedEarningsGLAcc."No." = '' then
                      ERROR(Text002);
                    if not CONFIRM(
                         Text003 +
                         Text005 +
                         Text007,false)
                    then
                      ERROR('');
                  end;

                  Window.OPEN(Text008 + Text009 + Text019 + Text010 + Text011);

                  ClosePerGlobalDim1 := false;
                  ClosePerGlobalDim2 := false;
                  ClosePerGlobalDimOnly := true;

                  if TempSelectedDim.FIND('-') then
                    repeat
                      if TempSelectedDim."Dimension Code" = GLSetup."Global Dimension 1 Code" then
                        ClosePerGlobalDim1 := true;
                      if TempSelectedDim."Dimension Code" = GLSetup."Global Dimension 2 Code" then
                        ClosePerGlobalDim2 := true;
                      if (TempSelectedDim."Dimension Code" <> GLSetup."Global Dimension 1 Code") and
                         (TempSelectedDim."Dimension Code" <> GLSetup."Global Dimension 2 Code")
                      then
                        ClosePerGlobalDimOnly := false;
                    until TempSelectedDim.NEXT = 0;

                  GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                  GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                  if not GenJnlLine.FINDLAST then;
                  GenJnlLine.INIT;
                  GenJnlLine."Posting Date" := FiscYearClosingDate;
                  GenJnlLine."Document No." := DocNo;
                  GenJnlLine.Description := PostingDescription;
                  GenJnlLine."Posting No. Series" := GenJnlBatch."Posting No. Series";
                  CLEAR(GenJnlPostLine);
                END;

    OnPostReport=VAR
                   UpdateAnalysisView@1000 : Codeunit "Update Analysis View";
                 BEGIN
                   Window.CLOSE;
                   COMMIT;
                   if GLSetup."Additional Reporting Currency" <> '' then begin
                     MESSAGE(Text016);
                     UpdateAnalysisView.UpdateAll(0,true);
                   end else
                     MESSAGE(Text017);
                 END;

  }
  DATASET
  {
    { 6710;    ;DataItem;G/L Account         ;
               DataItemTable="G/L Account";
               DataItemTableView=SORTING("No.") WHERE("Account Type"=CONST(Posting),"Income/Balance"=CONST("Income Statement"));
               OnPreDataItem=BEGIN
                               NoOfAccounts := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  ThisAccountNo := ThisAccountNo + 1;
                                  Window.UPDATE(1,"No.");
                                  Window.UPDATE(4,ROUND(ThisAccountNo / NoOfAccounts * 10000,1));
                                  Window.UPDATE(2,'');
                                  Window.UPDATE(3,0);
                                END;

               OnPostDataItem=BEGIN
                                if (TotalAmount <> 0) or ((TotalAmountAddCurr <> 0) and (GLSetup."Additional Reporting Currency" <> '')) then begin
                                  GenJnlLine."Business Unit Code" := '';
                                  GenJnlLine."Shortcut Dimension 1 Code" := '';
                                  GenJnlLine."Shortcut Dimension 2 Code" := '';
                                  GenJnlLine."Dimension Set ID" := 0;
                                  GenJnlLine."Line No." := GenJnlLine."Line No." + 10000;
                                  GenJnlLine."Account No." := RetainedEarningsGLAcc."No.";
                                  GenJnlLine."Source Code" := SourceCodeSetup."Close Income Statement";
                                  GenJnlLine."Reason Code" := GenJnlBatch."Reason Code";
                                  GenJnlLine."Currency Code" := '';
                                  GenJnlLine."Additional-Currency Posting" :=
                                    GenJnlLine."Additional-Currency Posting"::None;
                                  GenJnlLine.VALIDATE(Amount,TotalAmount);
                                  GenJnlLine."Source Currency Amount" := TotalAmountAddCurr;
                                  HandleGenJnlLine;
                                  Window.UPDATE(1,GenJnlLine."Account No.");
                                end;
                              END;
                               }

    { 7069;1   ;DataItem;G/L Entry           ;
               DataItemTable="G/L Entry";
               DataItemTableView=SORTING("G/L Account No.","Posting Date");
               OnPreDataItem=BEGIN
                               Window.UPDATE(2,Text013);
                               Window.UPDATE(3,0);

                               if ClosePerGlobalDimOnly or ClosePerBusUnit then
                                 case true of
                                   ClosePerBusUnit and (ClosePerGlobalDim1 or ClosePerGlobalDim2):
                                     SETCURRENTKEY(
                                       "G/L Account No.","Business Unit Code",
                                       "Global Dimension 1 Code","Global Dimension 2 Code","Posting Date");
                                   ClosePerBusUnit and not (ClosePerGlobalDim1 or ClosePerGlobalDim2):
                                     SETCURRENTKEY(
                                       "G/L Account No.","Business Unit Code","Posting Date");
                                   not ClosePerBusUnit and (ClosePerGlobalDim1 or ClosePerGlobalDim2):
                                     SETCURRENTKEY(
                                       "G/L Account No.","Global Dimension 1 Code","Global Dimension 2 Code","Posting Date");
                                 end;

                               SETRANGE("Posting Date",FiscalYearStartDate,FiscYearClosingDate);

                               MaxEntry := COUNT;

                               EntryNoAmountBuf.DELETEALL;
                               EntryCount := 0;

                               LastWindowUpdate := TIME;
                             END;

               OnAfterGetRecord=VAR
                                  TempDimBuf@1000 : TEMPORARY Record "Dimension Buffer";
                                  TempDimBuf2@1001 : TEMPORARY Record "Dimension Buffer";
                                  DimensionBufferID@1002 : Integer;
                                  RowOffset@1003 : Integer;
                                BEGIN
                                  EntryCount := EntryCount + 1;
                                  if TIME - LastWindowUpdate > 1000 then begin
                                    LastWindowUpdate := TIME;
                                    Window.UPDATE(3,ROUND(EntryCount / MaxEntry * 10000,1));
                                  end;

                                  if GroupSum then begin
                                    CalcSumsInFilter("G/L Entry",RowOffset);
                                    GetGLEntryDimensions("Entry No.",TempDimBuf,"Dimension Set ID");
                                  end;

                                  if (Amount <> 0) or ("Additional-Currency Amount" <> 0) then begin
                                    if not GroupSum then begin
                                      TotalAmount += Amount;
                                      if GLSetup."Additional Reporting Currency" <> '' then
                                        TotalAmountAddCurr += "Additional-Currency Amount";

                                      GetGLEntryDimensions("Entry No.",TempDimBuf,"Dimension Set ID");
                                    end;

                                    if TempSelectedDim.FIND('-') then
                                      repeat
                                        if TempDimBuf.GET(DATABASE::"G/L Entry","Entry No.",TempSelectedDim."Dimension Code")
                                        then begin
                                          TempDimBuf2."Table ID" := TempDimBuf."Table ID";
                                          TempDimBuf2."Dimension Code" := TempDimBuf."Dimension Code";
                                          TempDimBuf2."Dimension Value Code" := TempDimBuf."Dimension Value Code";
                                          TempDimBuf2.INSERT;
                                        end;
                                      until TempSelectedDim.NEXT = 0;

                                    DimensionBufferID := DimBufMgt.GetDimensionId(TempDimBuf2);

                                    EntryNoAmountBuf.RESET;
                                    if ClosePerBusUnit and FIELDACTIVE("Business Unit Code") then
                                      EntryNoAmountBuf."Business Unit Code" := "Business Unit Code"
                                    else
                                      EntryNoAmountBuf."Business Unit Code" := '';
                                    EntryNoAmountBuf."Entry No." := DimensionBufferID;
                                    if EntryNoAmountBuf.FIND then begin
                                      EntryNoAmountBuf.Amount := EntryNoAmountBuf.Amount + Amount;
                                      EntryNoAmountBuf.Amount2 := EntryNoAmountBuf.Amount2 + "Additional-Currency Amount";
                                      EntryNoAmountBuf.MODIFY;
                                    end else begin
                                      EntryNoAmountBuf.Amount := Amount;
                                      EntryNoAmountBuf.Amount2 := "Additional-Currency Amount";
                                      EntryNoAmountBuf.INSERT;
                                    end;
                                  end;

                                  if GroupSum then
                                    NEXT(RowOffset);
                                END;

               OnPostDataItem=VAR
                                TempDimBuf2@1000 : TEMPORARY Record "Dimension Buffer";
                                GlobalDimVal1@1004 : Code[20];
                                GlobalDimVal2@1005 : Code[20];
                                NewDimensionID@1002 : Integer;
                              BEGIN
                                EntryNoAmountBuf.RESET;
                                MaxEntry := EntryNoAmountBuf.COUNT;
                                EntryCount := 0;
                                Window.UPDATE(2,Text012);
                                Window.UPDATE(3,0);

                                if EntryNoAmountBuf.FIND('-') then
                                  repeat
                                    EntryCount := EntryCount + 1;
                                    if TIME - LastWindowUpdate > 1000 then begin
                                      LastWindowUpdate := TIME;
                                      Window.UPDATE(3,ROUND(EntryCount / MaxEntry * 10000,1));
                                    end;

                                    if (EntryNoAmountBuf.Amount <> 0) or (EntryNoAmountBuf.Amount2 <> 0) then begin
                                      GenJnlLine."Line No." := GenJnlLine."Line No." + 10000;
                                      GenJnlLine."Account No." := "G/L Account No.";
                                      GenJnlLine."Source Code" := SourceCodeSetup."Close Income Statement";
                                      GenJnlLine."Reason Code" := GenJnlBatch."Reason Code";
                                      GenJnlLine.VALIDATE(Amount,-EntryNoAmountBuf.Amount);
                                      GenJnlLine."Source Currency Amount" := -EntryNoAmountBuf.Amount2;
                                      GenJnlLine."Business Unit Code" := EntryNoAmountBuf."Business Unit Code";

                                      TempDimBuf2.DELETEALL;
                                      DimBufMgt.RetrieveDimensions(EntryNoAmountBuf."Entry No.",TempDimBuf2);
                                      NewDimensionID := DimMgt.CreateDimSetIDFromDimBuf(TempDimBuf2);
                                      GenJnlLine."Dimension Set ID" := NewDimensionID;
                                      DimMgt.UpdateGlobalDimFromDimSetID(NewDimensionID,GlobalDimVal1,GlobalDimVal2);
                                      GenJnlLine."Shortcut Dimension 1 Code" := '';
                                      if ClosePerGlobalDim1 then
                                        GenJnlLine."Shortcut Dimension 1 Code" := GlobalDimVal1;
                                      GenJnlLine."Shortcut Dimension 2 Code" := '';
                                      if ClosePerGlobalDim2 then
                                        GenJnlLine."Shortcut Dimension 2 Code" := GlobalDimVal2;

                                      HandleGenJnlLine;
                                    end;
                                  until EntryNoAmountBuf.NEXT = 0;

                                EntryNoAmountBuf.DELETEALL;
                              END;

               DataItemLink="G/L Account No."=FIELD("No.") }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=VAR
                   GLAccount@1001 : Record "G/L Account";
                   GLAccountCategory@1000 : Record "G/L Account Category";
                 BEGIN
                   if PostingDescription = '' then
                     PostingDescription :=
                       COPYSTR(ObjTransl.TranslateObject(ObjTransl."Object Type"::Report,REPORT::"Close Income Statement"),1,30);
                   EndDateReq := 0D;
                   AccountingPeriod.SETRANGE("New Fiscal Year",true);
                   AccountingPeriod.SETRANGE("Date Locked",true);
                   if AccountingPeriod.FINDLAST then begin
                     EndDateReq := AccountingPeriod."Starting Date" - 1;
                     if not ValidateEndDate(false) then
                       EndDateReq := 0D;
                   end else
                     if EndDateReq = 0D then
                       ERROR(NoFiscalYearsErr);
                   ValidateJnl;
                   ColumnDim := DimSelectionBuf.GetDimSelectionText(3,REPORT::"Close Income Statement",'');
                   if RetainedEarningsGLAcc."No." = '' then begin
                     GLAccountCategory.SETRANGE("Account Category",GLAccountCategory."Account Category"::Equity);
                     GLAccountCategory.SETRANGE(
                       "Additional Report Definition",GLAccountCategory."Additional Report Definition"::"Retained Earnings");
                     if GLAccountCategory.FINDFIRST then begin
                       GLAccount.SETRANGE("Account Subcategory Entry No.",GLAccountCategory."Entry No.");
                       if GLAccount.FINDFIRST then
                         RetainedEarningsGLAcc."No." := GLAccount."No.";
                     end;
                   end;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=FiscalYearEndingDate;
                  CaptionML=ENU=Fiscal Year Ending Date;
                  ToolTipML=ENU=Specifies the last date in the closed fiscal year. This date is used to determine the closing date.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=EndDateReq;
                  OnValidate=BEGIN
                               ValidateEndDate(true);
                             END;
                              }

      { 2   ;2   ;Field     ;
                  Name=GenJournalTemplate;
                  CaptionML=ENU=Gen. Journal Template;
                  ToolTipML=ENU=Specifies the general journal template that is used by the batch job.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine."Journal Template Name";
                  TableRelation="Gen. Journal Template";
                  OnValidate=BEGIN
                               GenJnlLine."Journal Batch Name" := '';
                               DocNo := '';
                             END;
                              }

      { 3   ;2   ;Field     ;
                  Name=GenJournalBatch;
                  Lookup=true;
                  CaptionML=ENU=Gen. Journal Batch;
                  ToolTipML=ENU=Specifies the general journal batch that is used by the batch job.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=GenJnlLine."Journal Batch Name";
                  OnValidate=BEGIN
                               if GenJnlLine."Journal Batch Name" <> '' then begin
                                 GenJnlLine.TESTFIELD("Journal Template Name");
                                 GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                               end;
                               ValidateJnl;
                             END;

                  OnLookup=BEGIN
                             GenJnlLine.TESTFIELD("Journal Template Name");
                             GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                             GenJnlBatch.FILTERGROUP(2);
                             GenJnlBatch.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                             GenJnlBatch.FILTERGROUP(0);
                             GenJnlBatch."Journal Template Name" := GenJnlLine."Journal Template Name";
                             GenJnlBatch.Name := GenJnlLine."Journal Batch Name";
                             if PAGE.RUNMODAL(0,GenJnlBatch) = ACTION::LookupOK then begin
                               Text := GenJnlBatch.Name;
                               exit(true);
                             end;
                           END;
                            }

      { 8   ;2   ;Field     ;
                  Name=DocumentNo;
                  CaptionML=ENU=Document No.;
                  ToolTipML=ENU=Specifies the number of the document that is processed by the report or batch job.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=DocNo }

      { 11  ;2   ;Field     ;
                  Name=RetainedEarningsAcc;
                  CaptionML=ENU=Retained Earnings Acc.;
                  ToolTipML=ENU=Specifies the retained earnings account that the batch job posts to. This account should be the same as the account that is used by the Close Income Statement batch job.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=RetainedEarningsGLAcc."No.";
                  TableRelation="G/L Account" WHERE ("Account Type"=CONST(Posting),
                                                     "Account Category"=FILTER(" "|Equity),
                                                     "Income/Balance"=CONST("Balance Sheet"));
                  OnValidate=BEGIN
                               if RetainedEarningsGLAcc."No." <> '' then begin
                                 RetainedEarningsGLAcc.FIND;
                                 RetainedEarningsGLAcc.CheckGLAcc;
                               end;
                             END;
                              }

      { 4   ;2   ;Field     ;
                  Name=PostingDescription;
                  CaptionML=ENU=Posting Description;
                  ToolTipML=ENU=Specifies the description that accompanies the posting.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=PostingDescription }

      { 14  ;2   ;Group     ;
                  Name=Close by;
                  CaptionML=ENU=Close by }

      { 5   ;3   ;Field     ;
                  Name=Business Unit Code;
                  CaptionML=ENU=Business Unit Code;
                  ToolTipML=ENU=Specifies the code for the business unit.;
                  ApplicationArea=#Advanced;
                  SourceExpr=ClosePerBusUnit }

      { 13  ;3   ;Field     ;
                  Name=Dimensions;
                  CaptionML=ENU=Dimensions;
                  ToolTipML=ENU=Specifies dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                  ApplicationArea=#Suite;
                  SourceExpr=ColumnDim;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 TempSelectedDim2@1002 : TEMPORARY Record "Selected Dimension";
                                 s@1001 : Text[1024];
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Close Income Statement",ColumnDim);

                                 SelectedDim.GetSelectedDim(USERID,3,REPORT::"Close Income Statement",'',TempSelectedDim2);
                                 s := CheckDimPostingRules(TempSelectedDim2);
                                 if s <> '' then
                                   MESSAGE(s);
                               END;
                                }

      { 15  ;2   ;Field     ;
                  Name=InventoryPeriodClosed;
                  CaptionML=ENU=Inventory Period Closed;
                  ToolTipML=ENU=Specifies that the inventory period has been closed.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=IsInvtPeriodClosed }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      AccountingPeriod@1012 : Record "Accounting Period";
      SourceCodeSetup@1013 : Record "Source Code Setup";
      GenJnlTemplate@1014 : Record "Gen. Journal Template";
      GenJnlBatch@1015 : Record "Gen. Journal Batch";
      GenJnlLine@1016 : Record "Gen. Journal Line";
      RetainedEarningsGLAcc@1020 : Record "G/L Account";
      GLSetup@1021 : Record "General Ledger Setup";
      DimSelectionBuf@1022 : Record "Dimension Selection Buffer";
      ObjTransl@1004 : Record "Object Translation";
      SelectedDim@1023 : Record "Selected Dimension";
      TempSelectedDim@1024 : TEMPORARY Record "Selected Dimension";
      EntryNoAmountBuf@1025 : TEMPORARY Record "Entry No. Amount Buffer";
      NoSeriesMgt@1026 : Codeunit NoSeriesManagement;
      GenJnlPostLine@1027 : Codeunit "Gen. Jnl.-Post Line";
      DimMgt@1028 : Codeunit DimensionManagement;
      DimBufMgt@1029 : Codeunit "Dimension Buffer Management";
      Window@1031 : Dialog;
      FiscalYearStartDate@1032 : Date;
      FiscYearClosingDate@1033 : Date;
      EndDateReq@1034 : Date;
      DocNo@1035 : Code[20];
      PostingDescription@1036 : Text[50];
      ClosePerBusUnit@1037 : Boolean;
      ClosePerGlobalDim1@1038 : Boolean;
      ClosePerGlobalDim2@1039 : Boolean;
      ClosePerGlobalDimOnly@1040 : Boolean;
      TotalAmount@1041 : Decimal;
      TotalAmountAddCurr@1042 : Decimal;
      ColumnDim@1043 : Text[250];
      NoOfAccounts@1050 : Integer;
      ThisAccountNo@1049 : Integer;
      Text000@1053 : TextConst 'ENU=Enter the ending date for the fiscal year.';
      Text001@1052 : TextConst 'ENU=Enter a Document No.';
      Text002@1051 : TextConst 'ENU=Enter Retained Earnings Account No.';
      Text003@1048 : TextConst 'ENU="By using an additional reporting currency, this batch job will post closing entries directly to the general ledger.  "';
      Text005@1047 : TextConst 'ENU="These closing entries will not be transferred to a general journal before the program posts them to the general ledger.\\ "';
      Text007@1046 : TextConst 'ENU=\Do you want to continue?';
      Text008@1045 : TextConst 'ENU=Creating general journal lines...\\';
      Text009@1030 : TextConst 'ENU=Account No.         #1##################\';
      Text010@1019 : TextConst 'ENU=Now performing      #2##################\';
      Text011@1011 : TextConst 'ENU="                    @3@@@@@@@@@@@@@@@@@@\"';
      Text019@1010 : TextConst 'ENU="                    @4@@@@@@@@@@@@@@@@@@\"';
      Text012@1058 : TextConst 'ENU=Creating Gen. Journal lines';
      Text013@1008 : TextConst 'ENU=Calculating Amounts';
      Text014@1007 : TextConst 'ENU=The fiscal year must be closed before the income statement can be closed.';
      Text015@1006 : TextConst 'ENU=The fiscal year does not exist.';
      Text017@1005 : TextConst 'ENU=The journal lines have successfully been created.';
      Text016@1003 : TextConst 'ENU=The closing entries have successfully been posted.';
      Text020@1001 : TextConst 'ENU=The following G/L Accounts have mandatory dimension codes that have not been selected:';
      Text021@1000 : TextConst 'ENU=\\In order to post to these accounts you must also select these dimensions:';
      MaxEntry@1002 : Integer;
      EntryCount@1057 : Integer;
      LastWindowUpdate@1044 : Time;
      NoFiscalYearsErr@1009 : TextConst 'ENU=No closed fiscal year exists.';

    LOCAL PROCEDURE ValidateEndDate@1(RealMode@1000 : Boolean) : Boolean;
    VAR
      OK@1001 : Boolean;
    BEGIN
      if EndDateReq = 0D then
        exit;

      OK := AccountingPeriod.GET(EndDateReq + 1);
      if OK then
        OK := AccountingPeriod."New Fiscal Year";
      if OK then begin
        if not AccountingPeriod."Date Locked" then begin
          if not RealMode then
            exit;
          ERROR(Text014);
        end;
        FiscYearClosingDate := CLOSINGDATE(EndDateReq);
        AccountingPeriod.SETRANGE("New Fiscal Year",true);
        OK := AccountingPeriod.FIND('<');
        FiscalYearStartDate := AccountingPeriod."Starting Date";
      end;
      if not OK then begin
        if not RealMode then
          exit;
        ERROR(Text015);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE ValidateJnl@2();
    BEGIN
      DocNo := '';
      if GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name") then
        if GenJnlBatch."No. Series" <> '' then
          DocNo := NoSeriesMgt.TryGetNextNo(GenJnlBatch."No. Series",EndDateReq);
    END;

    LOCAL PROCEDURE HandleGenJnlLine@4();
    BEGIN
      GenJnlLine."Additional-Currency Posting" :=
        GenJnlLine."Additional-Currency Posting"::None;
      if GLSetup."Additional Reporting Currency" <> '' then begin
        GenJnlLine."Source Currency Code" := GLSetup."Additional Reporting Currency";
        if ZeroGenJnlAmount then begin
          GenJnlLine."Additional-Currency Posting" :=
            GenJnlLine."Additional-Currency Posting"::"Additional-Currency Amount Only";
          GenJnlLine.VALIDATE(Amount,GenJnlLine."Source Currency Amount");
          GenJnlLine."Source Currency Amount" := 0;
        end;
        if GenJnlLine.Amount <> 0 then begin
          GenJnlPostLine.RUN(GenJnlLine);
          if DocNo = NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",EndDateReq,false) then
            NoSeriesMgt.SaveNoSeries;
        end;
      end else
        if not ZeroGenJnlAmount then
          GenJnlLine.INSERT;
    END;

    LOCAL PROCEDURE CalcSumsInFilter@18(VAR GLEntrySource@1000 : Record "G/L Entry";VAR Offset@1001 : Integer);
    VAR
      GLEntry@1002 : Record "G/L Entry";
    BEGIN
      GLEntry.COPYFILTERS(GLEntrySource);
      if ClosePerBusUnit then begin
        GLEntry.SETRANGE("Business Unit Code",GLEntrySource."Business Unit Code");
        GenJnlLine."Business Unit Code" := GLEntrySource."Business Unit Code";
      end;
      if ClosePerGlobalDim1 then begin
        GLEntry.SETRANGE("Global Dimension 1 Code",GLEntrySource."Global Dimension 1 Code");
        if ClosePerGlobalDim2 then
          GLEntry.SETRANGE("Global Dimension 2 Code",GLEntrySource."Global Dimension 2 Code");
      end;

      GLEntry.CALCSUMS(Amount);
      GLEntrySource.Amount := GLEntry.Amount;
      TotalAmount += GLEntrySource.Amount;
      if GLSetup."Additional Reporting Currency" <> '' then begin
        GLEntry.CALCSUMS("Additional-Currency Amount");
        GLEntrySource."Additional-Currency Amount" := GLEntry."Additional-Currency Amount";
        TotalAmountAddCurr += GLEntrySource."Additional-Currency Amount";
      end;
      Offset := GLEntry.COUNT - 1;
    END;

    LOCAL PROCEDURE GetGLEntryDimensions@7(EntryNo@1000 : Integer;VAR DimBuf@1001 : Record "Dimension Buffer";DimensionSetID@1002 : Integer);
    VAR
      DimSetEntry@1004 : Record "Dimension Set Entry";
    BEGIN
      DimSetEntry.SETRANGE("Dimension Set ID",DimensionSetID);
      if DimSetEntry.FINDSET then
        repeat
          DimBuf."Table ID" := DATABASE::"G/L Entry";
          DimBuf."Entry No." := EntryNo;
          DimBuf."Dimension Code" := DimSetEntry."Dimension Code";
          DimBuf."Dimension Value Code" := DimSetEntry."Dimension Value Code";
          DimBuf.INSERT;
        until DimSetEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDimPostingRules@6(VAR SelectedDim@1002 : Record "Selected Dimension") : Text[1024];
    VAR
      DefaultDim@1000 : Record "Default Dimension";
      s@1001 : Text[1024];
      d@1004 : Text[1024];
      PrevAcc@1003 : Code[20];
    BEGIN
      DefaultDim.SETRANGE("Table ID",DATABASE::"G/L Account");
      DefaultDim.SETFILTER(
        "Value Posting",'%1|%2',
        DefaultDim."Value Posting"::"Same Code",DefaultDim."Value Posting"::"Code Mandatory");

      if DefaultDim.FIND('-') then
        repeat
          SelectedDim.SETRANGE("Dimension Code",DefaultDim."Dimension Code");
          if not SelectedDim.FIND('-') then begin
            if STRPOS(d,DefaultDim."Dimension Code") < 1 then
              d := d + ' ' + FORMAT(DefaultDim."Dimension Code");
            if PrevAcc <> DefaultDim."No." then begin
              PrevAcc := DefaultDim."No.";
              if s = '' then
                s := Text020;
              s := s + ' ' + FORMAT(DefaultDim."No.");
            end;
          end;
          SelectedDim.SETRANGE("Dimension Code");
        until (DefaultDim.NEXT = 0) or (STRLEN(s) > MAXSTRLEN(s) - MAXSTRLEN(DefaultDim."No.") - STRLEN(Text021) - 1);
      if s <> '' then
        s := COPYSTR(s + Text021 + d,1,MAXSTRLEN(s));
      exit(s);
    END;

    LOCAL PROCEDURE IsInvtPeriodClosed@3() : Boolean;
    VAR
      AccPeriod@1001 : Record "Accounting Period";
      InvtPeriod@1000 : Record "Inventory Period";
    BEGIN
      if EndDateReq = 0D then
        exit;
      AccPeriod.GET(EndDateReq + 1);
      AccPeriod.NEXT(-1);
      exit(InvtPeriod.IsInvtPeriodClosed(AccPeriod."Starting Date"));
    END;

    [External]
    PROCEDURE InitializeRequestTest@5(EndDate@1000 : Date;GenJournalLine@1001 : Record "Gen. Journal Line";GLAccount@1002 : Record "G/L Account";CloseByBU@1003 : Boolean);
    BEGIN
      EndDateReq := EndDate;
      GenJnlLine := GenJournalLine;
      ValidateJnl;
      RetainedEarningsGLAcc := GLAccount;
      ClosePerBusUnit := CloseByBU;
    END;

    LOCAL PROCEDURE ZeroGenJnlAmount@8() : Boolean;
    BEGIN
      exit((GenJnlLine.Amount = 0) and (GenJnlLine."Source Currency Amount" <> 0))
    END;

    LOCAL PROCEDURE GroupSum@10() : Boolean;
    BEGIN
      exit(ClosePerGlobalDimOnly and (ClosePerBusUnit or ClosePerGlobalDim1));
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

