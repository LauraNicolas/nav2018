OBJECT Codeunit 550 VAT Rate Change Conversion
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "VAT Rate Change Log Entry"=i;
    OnRun=BEGIN
            if not VATRateChangeSetup.GET then begin
              VATRateChangeSetup.INIT;
              VATRateChangeSetup.INSERT;
            end;

            Convert;
          END;

  }
  CODE
  {
    VAR
      VATRateChangeSetup@1001 : Record "VAT Rate Change Setup";
      VATRateChangeConversion@1000 : Record "VAT Rate Change Conversion";
      ProgressWindow@1002 : Dialog;
      Text0001@1003 : TextConst 'ENU="Progressing Table #1#####################################  "';
      Text0002@1004 : TextConst 'ENU="Progressing Record #2############ of #3####################  "';
      Text0004@1005 : TextConst 'ENU=Order line %1 has a drop shipment purchasing code. Update the order manually.';
      Text0005@1006 : TextConst 'ENU=Order line %1 has a special order purchasing code. Update the order manually.';
      Text0006@1007 : TextConst 'ENU=The order has a partially shipped line with link to a WHSE document. Update the order manually.';
      Text0007@1008 : TextConst 'ENU=There is nothing to convert. The outstanding quantity is zero.';
      Text0008@1009 : TextConst 'ENU=There must be an entry in the %1 table for the combination of VAT business posting group %2 and VAT product posting group %3.';
      Text0009@1010 : TextConst 'ENU=Conversion cannot be performed before %1 is set to true.';
      Text0010@1011 : TextConst 'ENU=The line has been shipped.';
      Text0011@1012 : TextConst 'ENU=Documents that have posted prepayment must be converted manually.';
      Text0012@1013 : TextConst 'ENU=This line %1 has been split into two lines. The outstanding quantity will be on the new line.';
      Text0013@1014 : TextConst 'ENU=This line %1 has been added. It contains the outstanding quantity from line %2.';
      Text0014@1015 : TextConst 'ENU=The order line %1 of type %2 have been partial Shipped/Invoiced . Update the order manually.';
      Text0015@1016 : TextConst 'ENU=A defined conversion does not exist. Define the conversion.';
      Text0016@1017 : TextConst 'ENU=Defined tables for conversion do not exist.';
      Text0017@1018 : TextConst 'ENU=This line %1 will be split into two lines. The outstanding quantity will be on the new line.';
      Text0018@1019 : TextConst 'ENU=This document is linked to an assembly order. You must convert the document manually.';

    LOCAL PROCEDURE Convert@2();
    VAR
      GenProductPostingGroup@1001 : Record "Gen. Product Posting Group";
      TempGenProductPostingGroup@1000 : TEMPORARY Record "Gen. Product Posting Group";
    BEGIN
      VATRateChangeSetup.TESTFIELD("VAT Rate Change Tool Completed",false);
      if VATRateChangeConversion.ISEMPTY then
        ERROR(Text0015);
      if not AreTablesSelected then
        ERROR(Text0016);
      TestVATPostingSetup;
      ProgressWindow.OPEN(Text0001 + Text0002);
      with VATRateChangeSetup do begin
        ProgressWindow.UPDATE;
        UpdateTable(
          DATABASE::"Gen. Product Posting Group",
          ConvertVATProdPostGrp("Update Gen. Prod. Post. Groups"),ConvertGenProdPostGrp("Update Gen. Prod. Post. Groups"));
        TempGenProductPostingGroup.DELETEALL;
        if GenProductPostingGroup.FIND('-') then
          repeat
            TempGenProductPostingGroup := GenProductPostingGroup;
            TempGenProductPostingGroup.INSERT;
            GenProductPostingGroup."Auto Insert Default" := false;
            GenProductPostingGroup.MODIFY;
          until GenProductPostingGroup.NEXT = 0;
        UpdateItem;
        UpdateRessouce;
        UpdateGLAccount;
        UpdateServPriceAdjDetail;
        UpdatePurchase;
        UpdateSales;
        UpdateService;
        UpdateTable(
          DATABASE::"Item Template",
          ConvertVATProdPostGrp("Update Item Templates"),ConvertGenProdPostGrp("Update Item Templates"));
        UpdateTable(
          DATABASE::"Item Charge",
          ConvertVATProdPostGrp("Update Item Charges"),ConvertGenProdPostGrp("Update Item Charges"));
        UpdateTable(
          DATABASE::"Gen. Journal Line",
          ConvertVATProdPostGrp("Update Gen. Journal Lines"),ConvertGenProdPostGrp("Update Gen. Journal Lines"));
        UpdateTable(
          DATABASE::"Gen. Jnl. Allocation",
          ConvertVATProdPostGrp("Update Gen. Journal Allocation"),ConvertGenProdPostGrp("Update Gen. Journal Allocation"));
        UpdateTable(
          DATABASE::"Standard General Journal Line",
          ConvertVATProdPostGrp("Update Std. Gen. Jnl. Lines"),ConvertGenProdPostGrp("Update Std. Gen. Jnl. Lines"));
        UpdateTable(
          DATABASE::"Res. Journal Line",
          ConvertVATProdPostGrp("Update Res. Journal Lines"),ConvertGenProdPostGrp("Update Res. Journal Lines"));
        UpdateTable(
          DATABASE::"Job Journal Line",
          ConvertVATProdPostGrp("Update Job Journal Lines"),ConvertGenProdPostGrp("Update Job Journal Lines"));
        UpdateTable(
          DATABASE::"Requisition Line",
          ConvertVATProdPostGrp("Update Requisition Lines"),ConvertGenProdPostGrp("Update Requisition Lines"));
        UpdateTable(
          DATABASE::"Standard Item Journal Line",
          ConvertVATProdPostGrp("Update Std. Item Jnl. Lines"),ConvertGenProdPostGrp("Update Std. Item Jnl. Lines"));
        UpdateTable(
          DATABASE::"Production Order",
          ConvertVATProdPostGrp("Update Production Orders"),ConvertGenProdPostGrp("Update Production Orders"));
        UpdateTable(
          DATABASE::"Work Center",
          ConvertVATProdPostGrp("Update Work Centers"),ConvertGenProdPostGrp("Update Work Centers"));
        UpdateTable(
          DATABASE::"Machine Center",
          ConvertVATProdPostGrp("Update Machine Centers"),ConvertGenProdPostGrp("Update Machine Centers"));
        UpdateTable(
          DATABASE::"Reminder Line",
          ConvertVATProdPostGrp("Update Reminders"),ConvertGenProdPostGrp("Update Reminders"));
        UpdateTable(
          DATABASE::"Finance Charge Memo Line",
          ConvertVATProdPostGrp("Update Finance Charge Memos"),ConvertGenProdPostGrp("Update Finance Charge Memos"));
        GenProductPostingGroup.DELETEALL;
        if TempGenProductPostingGroup.FIND('-') then
          repeat
            GenProductPostingGroup := TempGenProductPostingGroup;
            GenProductPostingGroup.INSERT;
            TempGenProductPostingGroup.DELETE;
          until TempGenProductPostingGroup.NEXT = 0;
      end;
      ProgressWindow.CLOSE;
      if VATRateChangeSetup."Perform Conversion" then begin
        VATRateChangeSetup."VAT Rate Change Tool Completed" := true;
        VATRateChangeSetup.MODIFY;
        VATRateChangeConversion.RESET;
        if VATRateChangeConversion.FINDSET(true) then
          repeat
            VATRateChangeConversion."Converted Date" := WORKDATE;
            VATRateChangeConversion.MODIFY;
          until VATRateChangeConversion.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE TestVATPostingSetup@24();
    VAR
      VATPostingSetupOld@1000 : Record "VAT Posting Setup";
      VATPostingSetupNew@1001 : Record "VAT Posting Setup";
      VATRateChangeConversion@1002 : Record "VAT Rate Change Conversion";
    BEGIN
      VATRateChangeConversion.SETRANGE(Type,VATRateChangeConversion.Type::"VAT Prod. Posting Group");
      if VATRateChangeConversion.FINDSET then
        repeat
          VATPostingSetupOld.SETRANGE("VAT Prod. Posting Group",VATRateChangeConversion."From Code");
          if VATPostingSetupOld.FINDSET then
            repeat
              if not VATPostingSetupNew.GET(VATPostingSetupOld."VAT Bus. Posting Group",VATRateChangeConversion."To Code") then
                ERROR(
                  Text0008,
                  VATPostingSetupNew.TABLECAPTION,
                  VATPostingSetupOld."VAT Bus. Posting Group",
                  VATRateChangeConversion."To Code");
              if VATPostingSetupOld."VAT Identifier" <> '' then
                VATPostingSetupNew.TESTFIELD("VAT Identifier")
            until VATPostingSetupOld.NEXT = 0;
        until VATRateChangeConversion.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateItem@5();
    VAR
      Item@1000 : Record Item;
      RecRef@1001 : RecordRef;
    BEGIN
      ProgressWindow.UPDATE(1,Item.TABLECAPTION);
      with VATRateChangeSetup do
        if "Item Filter" = '' then
          UpdateTable(DATABASE::Item,ConvertVATProdPostGrp("Update Items"),ConvertGenProdPostGrp("Update Items"))
        else begin
          Item.SETFILTER("No.","Item Filter");
          if Item.FIND('-') then
            repeat
              RecRef.GETTABLE(Item);
              UpdateRec(RecRef,ConvertVATProdPostGrp("Update Items"),ConvertGenProdPostGrp("Update Items"));
            until Item.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE UpdateGLAccount@8();
    VAR
      GLAccount@1000 : Record "G/L Account";
      RecRef@1001 : RecordRef;
    BEGIN
      ProgressWindow.UPDATE(1,GLAccount.TABLECAPTION);
      with VATRateChangeSetup do
        if "Account Filter" = '' then
          UpdateTable(DATABASE::"G/L Account",ConvertVATProdPostGrp("Update G/L Accounts"),ConvertGenProdPostGrp("Update G/L Accounts"))
        else begin
          GLAccount.SETFILTER("No.","Account Filter");
          if GLAccount.FIND('-') then
            repeat
              RecRef.GETTABLE(GLAccount);
              UpdateRec(RecRef,ConvertVATProdPostGrp("Update G/L Accounts"),ConvertGenProdPostGrp("Update G/L Accounts"));
            until GLAccount.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE UpdateRessouce@7();
    VAR
      Resource@1000 : Record Resource;
      RecRef@1001 : RecordRef;
    BEGIN
      with VATRateChangeSetup do
        if "Resource Filter" = '' then
          UpdateTable(DATABASE::Resource,ConvertVATProdPostGrp("Update Resources"),ConvertGenProdPostGrp("Update Resources"))
        else begin
          Resource.SETFILTER("No.","Resource Filter");
          if Resource.FIND('-') then
            repeat
              RecRef.GETTABLE(Resource);
              UpdateRec(RecRef,ConvertVATProdPostGrp("Update Resources"),ConvertGenProdPostGrp("Update Resources"));
            until Resource.NEXT = 0;
        end;
    END;

    LOCAL PROCEDURE ConvertVATProdPostGrp@3(UpdateOption@1000 : Option) : Boolean;
    VAR
      DummyVATRateChangeSetup@1001 : Record "VAT Rate Change Setup";
    BEGIN
      if UpdateOption in [DummyVATRateChangeSetup."Update Items"::"VAT Prod. Posting Group",
                          DummyVATRateChangeSetup."Update Items"::Both]
      then
        exit(true);
      exit(false);
    END;

    LOCAL PROCEDURE ConvertGenProdPostGrp@6(UpdateOption@1000 : Option) : Boolean;
    VAR
      DummyVATRateChangeSetup@1001 : Record "VAT Rate Change Setup";
    BEGIN
      if UpdateOption in [DummyVATRateChangeSetup."Update Items"::"Gen. Prod. Posting Group",
                          DummyVATRateChangeSetup."Update Items"::Both]
      then
        exit(true);
      exit(false);
    END;

    LOCAL PROCEDURE UpdateTable@4(TableID@1005 : Integer;ConvertVATProdPostingGroup@1000 : Boolean;ConvertGenProdPostingGroup@1001 : Boolean);
    VAR
      RecRef@1004 : RecordRef;
      I@1003 : Integer;
    BEGIN
      if not ConvertVATProdPostingGroup and not ConvertGenProdPostingGroup then
        exit;
      RecRef.OPEN(TableID);
      ProgressWindow.UPDATE(1,FORMAT(RecRef.CAPTION));
      I := 0;
      ProgressWindow.UPDATE(3,RecRef.COUNT);
      if RecRef.FIND('-') then
        repeat
          I := I + 1;
          ProgressWindow.UPDATE(2,I);
          UpdateRec(RecRef,ConvertVATProdPostingGroup,ConvertGenProdPostingGroup);
        until RecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateRec@1(VAR RecRef@1005 : RecordRef;ConvertVATProdPostingGroup@1000 : Boolean;ConvertGenProdPostingGroup@1001 : Boolean);
    VAR
      Field@1008 : Record Field;
      VATRateChangeLogEntry@1002 : Record "VAT Rate Change Log Entry";
      FieldRef@1003 : FieldRef;
      GenProdPostingGroupConverted@1004 : Boolean;
      VATProdPostingGroupConverted@1006 : Boolean;
    BEGIN
      VATRateChangeLogEntry.INIT;
      VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
      VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
      Field.SETRANGE(TableNo,RecRef.NUMBER);
      Field.SETRANGE(RelationTableNo,DATABASE::"Gen. Product Posting Group");
      if Field.FIND('+') then
        repeat
          FieldRef := RecRef.FIELD(Field."No.");
          GenProdPostingGroupConverted := false;
          if ConvertGenProdPostingGroup then
            if VATRateChangeConversion.GET(VATRateChangeConversion.Type::"Gen. Prod. Posting Group",FieldRef.VALUE) then begin
              VATRateChangeLogEntry."Old Gen. Prod. Posting Group" := FieldRef.VALUE;
              FieldRef.VALIDATE(VATRateChangeConversion."To Code");
              VATRateChangeLogEntry."New Gen. Prod. Posting Group" := FieldRef.VALUE;
              GenProdPostingGroupConverted := true;
            end;
          if not GenProdPostingGroupConverted then begin
            VATRateChangeLogEntry."Old Gen. Prod. Posting Group" := FieldRef.VALUE;
            VATRateChangeLogEntry."New Gen. Prod. Posting Group" := FieldRef.VALUE;
          end;
        until Field.NEXT(-1) = 0;

      Field.SETRANGE(RelationTableNo,DATABASE::"VAT Product Posting Group");
      if Field.FIND('+') then
        repeat
          FieldRef := RecRef.FIELD(Field."No.");
          VATProdPostingGroupConverted := false;
          if ConvertVATProdPostingGroup then
            if VATRateChangeConversion.GET(VATRateChangeConversion.Type::"VAT Prod. Posting Group",FieldRef.VALUE) then begin
              VATRateChangeLogEntry."Old VAT Prod. Posting Group" := FieldRef.VALUE;
              FieldRef.VALIDATE(VATRateChangeConversion."To Code");
              VATRateChangeLogEntry."New VAT Prod. Posting Group" := FieldRef.VALUE;
              VATProdPostingGroupConverted := true;
            end;
          if not VATProdPostingGroupConverted then begin
            VATRateChangeLogEntry."Old VAT Prod. Posting Group" := FieldRef.VALUE;
            VATRateChangeLogEntry."New VAT Prod. Posting Group" := FieldRef.VALUE;
          end;
        until Field.NEXT(-1) = 0;

      if VATRateChangeSetup."Perform Conversion" then begin
        RecRef.MODIFY;
        VATRateChangeLogEntry.Converted := true;
      end;
      if (VATRateChangeLogEntry."New Gen. Prod. Posting Group" <> VATRateChangeLogEntry."Old Gen. Prod. Posting Group") or
         (VATRateChangeLogEntry."New VAT Prod. Posting Group" <> VATRateChangeLogEntry."Old VAT Prod. Posting Group")
      then
        WriteLogEntry(VATRateChangeLogEntry);
    END;

    LOCAL PROCEDURE WriteLogEntry@10(VATRateChangeLogEntry@1000 : Record "VAT Rate Change Log Entry");
    BEGIN
      with VATRateChangeLogEntry do begin
        if Converted then
          "Converted Date" := WORKDATE
        else
          if Description = '' then
            Description := STRSUBSTNO(Text0009,VATRateChangeSetup.FIELDCAPTION("Perform Conversion"));
        INSERT;
      end;
    END;

    LOCAL PROCEDURE UpdateSales@12();
    VAR
      SalesHeader@1000 : Record "Sales Header";
      SalesHeader2@1004 : Record "Sales Header";
      SalesLine@1003 : Record "Sales Line";
      SalesLineOld@1011 : Record "Sales Line";
      VATRateChangeLogEntry@1002 : Record "VAT Rate Change Log Entry";
      RecRef@1001 : RecordRef;
      SalesHeaderStatusChanged@1005 : Boolean;
      NewVATProdPotingGroup@1007 : Code[20];
      NewGenProdPostingGroup@1008 : Code[20];
      ConvertVATProdPostingGroup@1009 : Boolean;
      ConvertGenProdPostingGroup@1006 : Boolean;
      RoundingPrecision@1010 : Decimal;
    BEGIN
      ProgressWindow.UPDATE(1,SalesHeader.TABLECAPTION);
      ConvertVATProdPostingGroup := ConvertVATProdPostGrp(VATRateChangeSetup."Update Sales Documents");
      ConvertGenProdPostingGroup := ConvertGenProdPostGrp(VATRateChangeSetup."Update Sales Documents");
      if not ConvertVATProdPostingGroup and not ConvertGenProdPostingGroup then
        exit;

      SalesHeader.SETFILTER(
        "Document Type",'%1..%2|%3',SalesHeader."Document Type"::Quote,SalesHeader."Document Type"::Invoice,
        SalesHeader."Document Type"::"Blanket Order");
      if SalesHeader.FIND('-') then
        repeat
          SalesHeaderStatusChanged := false;
          if CanUpdateSales(SalesHeader,ConvertVATProdPostingGroup,ConvertGenProdPostingGroup) then begin
            if VATRateChangeSetup."Ignore Status on Sales Docs." then
              if SalesHeader.Status <> SalesHeader.Status::Open then begin
                SalesHeader2 := SalesHeader;
                SalesHeader.Status := SalesHeader.Status::Open;
                SalesHeader.MODIFY;
                SalesHeaderStatusChanged := true;
              end;
            if SalesHeader.Status = SalesHeader.Status::Open then begin
              SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine.SETRANGE("Document No.",SalesHeader."No.");
              if SalesLine.FINDSET then
                repeat
                  if LineInScope(
                       SalesLine."Gen. Prod. Posting Group",SalesLine."VAT Prod. Posting Group",ConvertGenProdPostingGroup,
                       ConvertVATProdPostingGroup)
                  then
                    if (SalesLine."Shipment No." = '') and (SalesLine."Return Receipt No." = '') and
                       IncludeLine(SalesLine.Type,SalesLine."No.")
                    then
                      if SalesLine.Quantity = SalesLine."Outstanding Quantity" then begin
                        RecRef.GETTABLE(SalesLine);

                        if SalesHeader."Prices Including VAT" then
                          SalesLineOld := SalesLine;

                        UpdateRec(
                          RecRef,ConvertVATProdPostGrp(VATRateChangeSetup."Update Sales Documents"),
                          ConvertGenProdPostGrp(VATRateChangeSetup."Update Sales Documents"));

                        if SalesHeader."Prices Including VAT" and VATRateChangeSetup."Perform Conversion" then begin
                          RecRef.SETTABLE(SalesLine);
                          RoundingPrecision := GetRoundingPrecision(SalesHeader."Currency Code");
                          SalesLine.VALIDATE(
                            "Unit Price",
                            ROUND(
                              SalesLineOld."Unit Price" * (100 + SalesLine."VAT %") / (100 + SalesLineOld."VAT %"),RoundingPrecision))
                        end;
                      end else
                        if VATRateChangeSetup."Perform Conversion" and (SalesLine."Outstanding Quantity" <> 0) then begin
                          NewVATProdPotingGroup := SalesLine."VAT Prod. Posting Group";
                          NewGenProdPostingGroup := SalesLine."Gen. Prod. Posting Group";
                          if VATRateChangeConversion.GET(
                               VATRateChangeConversion.Type::"VAT Prod. Posting Group",SalesLine."VAT Prod. Posting Group")
                          then
                            NewVATProdPotingGroup := VATRateChangeConversion."To Code";
                          if VATRateChangeConversion.GET(
                               VATRateChangeConversion.Type::"Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group")
                          then
                            NewGenProdPostingGroup := VATRateChangeConversion."To Code";
                          AddNewSalesLine(SalesLine,NewVATProdPotingGroup,NewGenProdPostingGroup);
                        end else begin
                          RecRef.GETTABLE(SalesLine);
                          InitVATRateChangeLogEntry(
                            VATRateChangeLogEntry,RecRef,SalesLine."Outstanding Quantity",SalesLine."Line No.");
                          VATRateChangeLogEntry.UpdateGroups(
                            SalesLine."Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group",
                            SalesLine."VAT Prod. Posting Group",SalesLine."VAT Prod. Posting Group");
                          WriteLogEntry(VATRateChangeLogEntry);
                        end;
                until SalesLine.NEXT = 0;
            end;
            if SalesHeaderStatusChanged then begin
              SalesHeader.Status := SalesHeader2.Status;
              SalesHeader.MODIFY;
            end;
          end;
        until SalesHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE CanUpdateSales@11(SalesHeader@1007 : Record "Sales Header";ConvertVATProdPostingGroup@1005 : Boolean;ConvertGenProdPostingGroup@1004 : Boolean) : Boolean;
    VAR
      SalesLine@1003 : Record "Sales Line";
      VATRateChangeLogEntry@1002 : Record "VAT Rate Change Log Entry";
      WhseValidateSourceLine@1000 : Codeunit "Whse. Validate Source Line";
      RecRef@1001 : RecordRef;
      DescriptionTxt@1006 : Text[250];
    BEGIN
      with SalesLine do begin
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        if FINDSET then
          repeat
            DescriptionTxt := '';
            if LineInScope("Gen. Prod. Posting Group","VAT Prod. Posting Group",ConvertGenProdPostingGroup,ConvertVATProdPostingGroup) then begin
              if "Drop Shipment" and ("Purchase Order No." <> '') then
                DescriptionTxt := STRSUBSTNO(Text0004,"Line No.");
              if "Special Order" and ("Special Order Purchase No." <> '') then
                DescriptionTxt := STRSUBSTNO(Text0005,"Line No.");
              if ("Outstanding Quantity" <> Quantity) and
                 WhseValidateSourceLine.WhseLinesExist(DATABASE::"Sales Line","Document Type","Document No.","Line No.",0,Quantity)
              then
                DescriptionTxt := Text0006;
              if ("Outstanding Quantity" <> Quantity) and (Type = Type::"Charge (Item)") then
                DescriptionTxt := STRSUBSTNO(Text0014,"Line No.",Type::"Charge (Item)");
              if  "Prepmt. Amount Inv. Incl. VAT" <> 0 then
                DescriptionTxt := Text0011;
              if "Qty. to Assemble to Order" <> 0 then
                DescriptionTxt := Text0018;
            end;
          until (NEXT = 0) or (DescriptionTxt <> '');
      end;
      if DescriptionTxt = '' then
        exit(true);

      RecRef.GETTABLE(SalesHeader);
      VATRateChangeLogEntry.INIT;
      VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
      VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
      VATRateChangeLogEntry.Description := DescriptionTxt;
      WriteLogEntry(VATRateChangeLogEntry);
    END;

    LOCAL PROCEDURE AddNewSalesLine@1000(SalesLine@1022 : Record "Sales Line";VATProdPostingGroup@1001 : Code[20];GenProdPostingGroup@1002 : Code[20]);
    VAR
      NewSalesLine@1004 : Record "Sales Line";
      OldSalesLine@1005 : Record "Sales Line";
      SalesHeader@1006 : Record "Sales Header";
      OldReservationEntry@1009 : Record "Reservation Entry";
      NewReservationEntry@1010 : Record "Reservation Entry";
      OldItemChargeAssignmentSales@1011 : Record "Item Charge Assignment (Sales)";
      NewItemChargeAssignmentSales@1012 : Record "Item Charge Assignment (Sales)";
      VATRateChangeLogEntry@1003 : Record "VAT Rate Change Log Entry";
      RecRef@1000 : RecordRef;
      NewLineNo@1015 : Integer;
      QtyRemainder@1016 : Decimal;
      AmountRemainder@1017 : Decimal;
      RoundingPrecision@1018 : Decimal;
    BEGIN
      if not GetNextSalesLineNo(SalesLine,NewLineNo) then
        exit;
      with NewSalesLine do begin
        INIT;
        NewSalesLine := SalesLine;
        "Line No." := NewLineNo;
        "Quantity Shipped" := 0;
        "Qty. Shipped (Base)" := 0;
        "Return Qty. Received" := 0;
        "Return Qty. Received (Base)" := 0;
        "Quantity Invoiced" := 0;
        "Qty. Invoiced (Base)" := 0;
        "Reserved Quantity" := 0;
        "Reserved Qty. (Base)" := 0;
        "Qty. to Ship" := 0;
        "Qty. to Ship (Base)" := 0;
        "Return Qty. to Receive" := 0;
        "Return Qty. to Receive (Base)" := 0;
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
        "Qty. Shipped Not Invoiced" := 0;
        "Return Qty. Rcd. Not Invd." := 0;
        "Shipped Not Invoiced" := 0;
        "Return Rcd. Not Invd." := 0;
        "Qty. Shipped Not Invd. (Base)" := 0;
        "Ret. Qty. Rcd. Not Invd.(Base)" := 0;
        "Shipped Not Invoiced (LCY)" := 0;
        "Return Rcd. Not Invd. (LCY)" := 0;
        if (GenProdPostingGroup <> '') and ConvertGenProdPostGrp(VATRateChangeSetup."Update Sales Documents") then
          VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
        if (VATProdPostingGroup <> '') and ConvertVATProdPostGrp(VATRateChangeSetup."Update Sales Documents") then
          VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
        VALIDATE(Quantity,SalesLine."Outstanding Quantity");
        VALIDATE("Qty. to Ship",SalesLine."Qty. to Ship");
        VALIDATE("Return Qty. to Receive",SalesLine."Return Qty. to Receive");
        if ABS(SalesLine."Qty. to Invoice") > (ABS(SalesLine."Quantity Shipped") - ABS(SalesLine."Quantity Invoiced")) then
          VALIDATE(
            "Qty. to Invoice",SalesLine."Qty. to Invoice" - (SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced"))
        else
          VALIDATE("Qty. to Invoice",0);
        SalesHeader.GET("Document Type","Document No.");
        RoundingPrecision := GetRoundingPrecision(SalesHeader."Currency Code");
        if SalesHeader."Prices Including VAT" then
          VALIDATE("Unit Price",ROUND(SalesLine."Unit Price" * (100 + "VAT %") / (100 + SalesLine."VAT %"),RoundingPrecision))
        else
          VALIDATE("Unit Price",SalesLine."Unit Price");
        VALIDATE("Line Discount %",SalesLine."Line Discount %");
        INSERT;
        RecRef.GETTABLE(SalesLine);
        VATRateChangeLogEntry.INIT;
        VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
        VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
        VATRateChangeLogEntry.UpdateGroups(
          SalesLine."Gen. Prod. Posting Group",SalesLine."Gen. Prod. Posting Group",
          SalesLine."VAT Prod. Posting Group",SalesLine."VAT Prod. Posting Group");
        VATRateChangeLogEntry.Description := STRSUBSTNO(Text0012,FORMAT(SalesLine."Line No."));
        VATRateChangeLogEntry.Converted := true;
        WriteLogEntry(VATRateChangeLogEntry);

        RecRef.GETTABLE(NewSalesLine);
        VATRateChangeLogEntry.INIT;
        VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
        VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
        VATRateChangeLogEntry.UpdateGroups(
          SalesLine."Gen. Prod. Posting Group","Gen. Prod. Posting Group",
          SalesLine."VAT Prod. Posting Group","VAT Prod. Posting Group");
        VATRateChangeLogEntry.Description := STRSUBSTNO(Text0013,FORMAT("Line No."),FORMAT(SalesLine."Line No."));
        VATRateChangeLogEntry.Converted := true;
        WriteLogEntry(VATRateChangeLogEntry);
      end;

      UpdateSalesBlanketOrder(NewSalesLine,SalesLine."Line No.");

      OldReservationEntry.RESET;
      OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
      OldReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
      OldReservationEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      OldReservationEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      OldReservationEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      OldReservationEntry.SETFILTER(
        "Reservation Status",'%1|%2',OldReservationEntry."Reservation Status"::Reservation,
        OldReservationEntry."Reservation Status"::Surplus);
      if OldReservationEntry.FINDSET then
        repeat
          NewReservationEntry := OldReservationEntry;
          NewReservationEntry."Source Ref. No." := NewLineNo;
          NewReservationEntry.MODIFY;
        until OldReservationEntry.NEXT = 0;

      case SalesLine.Type of
        SalesLine.Type::Item:
          begin
            OldItemChargeAssignmentSales.RESET;
            OldItemChargeAssignmentSales.SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            OldItemChargeAssignmentSales.SETRANGE("Applies-to Doc. Type",SalesLine."Document Type");
            OldItemChargeAssignmentSales.SETRANGE("Applies-to Doc. No.",SalesLine."Document No.");
            OldItemChargeAssignmentSales.SETRANGE("Applies-to Doc. Line No.",SalesLine."Line No.");
            if OldItemChargeAssignmentSales.FIND('-') then
              repeat
                QtyRemainder := OldItemChargeAssignmentSales."Qty. to Assign";
                AmountRemainder := OldItemChargeAssignmentSales."Amount to Assign";
                NewItemChargeAssignmentSales := OldItemChargeAssignmentSales;
                NewItemChargeAssignmentSales."Line No." := GetNextItemChrgAssSaleLineNo(OldItemChargeAssignmentSales);
                NewItemChargeAssignmentSales."Applies-to Doc. Line No." := NewLineNo;
                NewItemChargeAssignmentSales."Qty. to Assign" :=
                  ROUND(QtyRemainder / SalesLine.Quantity * SalesLine."Outstanding Quantity",0.00001);
                if SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced" = 0 then
                  NewItemChargeAssignmentSales."Qty. to Assign" := QtyRemainder;
                NewItemChargeAssignmentSales."Amount to Assign" :=
                  ROUND(NewItemChargeAssignmentSales."Qty. to Assign" * NewItemChargeAssignmentSales."Unit Cost",RoundingPrecision);
                NewItemChargeAssignmentSales.INSERT;
                QtyRemainder := QtyRemainder - NewItemChargeAssignmentSales."Qty. to Assign";
                AmountRemainder := AmountRemainder - NewItemChargeAssignmentSales."Amount to Assign";
                OldItemChargeAssignmentSales."Qty. to Assign" := QtyRemainder;
                OldItemChargeAssignmentSales."Amount to Assign" := AmountRemainder;
                OldItemChargeAssignmentSales.MODIFY;
              until OldItemChargeAssignmentSales.NEXT = 0;
          end;
      end;

      OldSalesLine.GET(SalesLine."Document Type",SalesLine."Document No.",SalesLine."Line No.");
      OldSalesLine.VALIDATE(Quantity,SalesLine."Quantity Shipped");

      OldSalesLine.VALIDATE("Unit Price",SalesLine."Unit Price");
      OldSalesLine.VALIDATE("Line Discount %",SalesLine."Line Discount %");
      OldSalesLine.VALIDATE("Qty. to Ship",0);
      OldSalesLine.VALIDATE("Return Qty. to Receive",0);
      if ABS(SalesLine."Qty. to Invoice") > (ABS(SalesLine."Quantity Shipped") - ABS(SalesLine."Quantity Invoiced")) then
        OldSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Quantity Shipped" - SalesLine."Quantity Invoiced")
      else
        OldSalesLine.VALIDATE("Qty. to Invoice",SalesLine."Qty. to Invoice");

      OldSalesLine.MODIFY;
    END;

    LOCAL PROCEDURE UpdateSalesBlanketOrder@20(SalesLine@1000 : Record "Sales Line";OriginalLineNo@1004 : Integer);
    VAR
      SalesHeader@1003 : Record "Sales Header";
      SalesLine2@1002 : Record "Sales Line";
      SalesLine3@1001 : Record "Sales Line";
    BEGIN
      if SalesLine."Document Type" = SalesLine."Document Type"::"Blanket Order" then begin
        SalesLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
        SalesLine2.SETRANGE("Blanket Order No.",SalesLine."Document No.");
        SalesLine2.SETFILTER("Blanket Order Line No.",'=%1',OriginalLineNo);
        SalesLine2.SETRANGE(Type,SalesLine.Type);
        SalesLine2.SETRANGE("No.",SalesLine."No.");
        CLEAR(SalesHeader);
        if SalesLine2.FINDSET then
          repeat
            if (SalesHeader."Document Type" <> SalesLine2."Document Type") or
               (SalesHeader."No." <> SalesLine2."Document No.")
            then begin
              SalesHeader.GET(SalesLine2."Document Type",SalesLine2."Document No.");
              SalesLine3.RESET;
              SalesLine3.SETRANGE("Document Type",SalesHeader."Document Type");
              SalesLine3.SETRANGE("Document No.",SalesHeader."No.");
              SalesLine3.SETRANGE("Blanket Order No.",SalesLine2."Blanket Order No.");
              SalesLine3.SETRANGE("Blanket Order Line No.",SalesLine2."Blanket Order Line No.");
              if SalesLine3.FINDLAST then begin
                SalesLine3."Blanket Order Line No." := SalesLine."Line No.";
                SalesLine3.MODIFY;
              end;
            end;
          until SalesLine2.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UpdatePurchase@9();
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
      PurchaseHeader2@1004 : Record "Purchase Header";
      PurchaseLine@1003 : Record "Purchase Line";
      PurchaseLineOld@1010 : Record "Purchase Line";
      VATRateChangeLogEntry@1002 : Record "VAT Rate Change Log Entry";
      RecRef@1001 : RecordRef;
      NewVATProdPotingGroup@1007 : Code[20];
      NewGenProdPostingGroup@1008 : Code[20];
      StatusChanged@1005 : Boolean;
      ConvertVATProdPostingGroup@1009 : Boolean;
      ConvertGenProdPostingGroup@1006 : Boolean;
      RoundingPrecision@1011 : Decimal;
    BEGIN
      ProgressWindow.UPDATE(1,PurchaseHeader.TABLECAPTION);
      ConvertVATProdPostingGroup := ConvertVATProdPostGrp(VATRateChangeSetup."Update Purchase Documents");
      ConvertGenProdPostingGroup := ConvertGenProdPostGrp(VATRateChangeSetup."Update Purchase Documents");
      if not ConvertVATProdPostingGroup and not ConvertGenProdPostingGroup then
        exit;

      PurchaseHeader.SETFILTER(
        "Document Type",'%1..%2|%3',PurchaseHeader."Document Type"::Quote,PurchaseHeader."Document Type"::Invoice,
        PurchaseHeader."Document Type"::"Blanket Order");

      if PurchaseHeader.FIND('-') then
        repeat
          StatusChanged := false;
          if CanUpdatePurchase(PurchaseHeader,ConvertGenProdPostingGroup,ConvertVATProdPostingGroup) then begin
            if VATRateChangeSetup."Ignore Status on Purch. Docs." then
              if PurchaseHeader.Status <> PurchaseHeader.Status::Open then begin
                PurchaseHeader2 := PurchaseHeader;
                PurchaseHeader.Status := PurchaseHeader.Status::Open;
                PurchaseHeader.MODIFY;
                StatusChanged := true;
              end;
            if PurchaseHeader.Status = PurchaseHeader.Status::Open then begin
              PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
              PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
              if PurchaseLine.FINDSET then
                repeat
                  if LineInScope(
                       PurchaseLine."Gen. Prod. Posting Group",PurchaseLine."VAT Prod. Posting Group",ConvertGenProdPostingGroup,
                       ConvertVATProdPostingGroup)
                  then
                    if (PurchaseLine."Receipt No." = '') and
                       (PurchaseLine."Return Shipment No." = '') and IncludeLine(PurchaseLine.Type,PurchaseLine."No.")
                    then
                      if PurchaseLine.Quantity = PurchaseLine."Outstanding Quantity" then begin
                        if PurchaseHeader."Prices Including VAT" then
                          PurchaseLineOld := PurchaseLine;

                        RecRef.GETTABLE(PurchaseLine);
                        UpdateRec(
                          RecRef,ConvertVATProdPostGrp(VATRateChangeSetup."Update Purchase Documents"),
                          ConvertGenProdPostGrp(VATRateChangeSetup."Update Purchase Documents"));

                        if PurchaseHeader."Prices Including VAT" and VATRateChangeSetup."Perform Conversion" then begin
                          RecRef.SETTABLE(PurchaseLine);
                          RoundingPrecision := GetRoundingPrecision(PurchaseHeader."Currency Code");
                          PurchaseLine.VALIDATE(
                            "Direct Unit Cost",
                            ROUND(
                              PurchaseLineOld."Direct Unit Cost" * (100 + PurchaseLine."VAT %") / (100 + PurchaseLineOld."VAT %"),
                              RoundingPrecision));
                        end;
                      end else
                        if VATRateChangeSetup."Perform Conversion" and (PurchaseLine."Outstanding Quantity" <> 0) then begin
                          NewVATProdPotingGroup := PurchaseLine."VAT Prod. Posting Group";
                          NewGenProdPostingGroup := PurchaseLine."Gen. Prod. Posting Group";
                          if ConvertVATProdPostingGroup then
                            if VATRateChangeConversion.GET(
                                 VATRateChangeConversion.Type::"VAT Prod. Posting Group",PurchaseLine."VAT Prod. Posting Group")
                            then
                              NewVATProdPotingGroup := VATRateChangeConversion."To Code";
                          if ConvertGenProdPostingGroup then
                            if VATRateChangeConversion.GET(
                                 VATRateChangeConversion.Type::"Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group")
                            then
                              NewGenProdPostingGroup := VATRateChangeConversion."To Code";
                          AddNewPurchaseLine(PurchaseLine,NewVATProdPotingGroup,NewGenProdPostingGroup);
                        end else begin
                          RecRef.GETTABLE(PurchaseLine);
                          InitVATRateChangeLogEntry(
                            VATRateChangeLogEntry,RecRef,PurchaseLine."Outstanding Quantity",PurchaseLine."Line No.");
                          VATRateChangeLogEntry.UpdateGroups(
                            PurchaseLine."Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group",
                            PurchaseLine."VAT Prod. Posting Group",PurchaseLine."VAT Prod. Posting Group");
                          WriteLogEntry(VATRateChangeLogEntry);
                        end;
                until PurchaseLine.NEXT = 0;
            end;
            if StatusChanged then begin
              PurchaseHeader.Status := PurchaseHeader2.Status;
              PurchaseHeader.MODIFY;
            end;
          end;
        until PurchaseHeader.NEXT = 0;
    END;

    LOCAL PROCEDURE CanUpdatePurchase@16(PurchaseHeader@1007 : Record "Purchase Header";ConvertGenProdPostingGroup@1004 : Boolean;ConvertVATProdPostingGroup@1005 : Boolean) : Boolean;
    VAR
      PurchaseLine@1003 : Record "Purchase Line";
      VATRateChangeLogEntry@1002 : Record "VAT Rate Change Log Entry";
      WhseValidateSourceLine@1000 : Codeunit "Whse. Validate Source Line";
      RecRef@1001 : RecordRef;
      DescriptionTxt@1006 : Text[250];
    BEGIN
      with PurchaseLine do begin
        SETRANGE("Document Type",PurchaseHeader."Document Type");
        SETRANGE("Document No.",PurchaseHeader."No.");
        if FINDSET then
          repeat
            DescriptionTxt := '';
            if LineInScope("Gen. Prod. Posting Group","VAT Prod. Posting Group",ConvertGenProdPostingGroup,ConvertVATProdPostingGroup) then begin
              if "Drop Shipment" and ("Sales Order No." <> '') then
                DescriptionTxt := STRSUBSTNO(Text0004,"Line No.");
              if "Special Order" and ("Special Order Sales No." <> '') then
                DescriptionTxt := STRSUBSTNO(Text0005,"Line No.");
              if ("Outstanding Quantity" <> Quantity) and
                 WhseValidateSourceLine.WhseLinesExist(
                   DATABASE::"Purchase Line","Document Type","Document No.","Line No.",0,Quantity)
              then
                DescriptionTxt := Text0006;
              if ("Outstanding Quantity" <> Quantity) and (Type = Type::"Charge (Item)") then
                DescriptionTxt := STRSUBSTNO(Text0014,"Line No.",Type::"Charge (Item)");
              if  "Prepmt. Amount Inv. (LCY)" <> 0 then
                DescriptionTxt := Text0011;
            end;
          until (NEXT = 0) or (DescriptionTxt <> '');
      end;
      if DescriptionTxt = '' then
        exit(true);

      VATRateChangeLogEntry.INIT;
      RecRef.GETTABLE(PurchaseHeader);
      VATRateChangeLogEntry.INIT;
      VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
      VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
      VATRateChangeLogEntry.Description := DescriptionTxt;
      WriteLogEntry(VATRateChangeLogEntry);
    END;

    LOCAL PROCEDURE AddNewPurchaseLine@17(PurchaseLine@1001 : Record "Purchase Line";VATProdPostingGroup@1000 : Code[20];GenProdPostingGroup@1002 : Code[20]);
    VAR
      NewPurchaseLine@1004 : Record "Purchase Line";
      OldPurchaseLine@1005 : Record "Purchase Line";
      PurchaseHeader@1006 : Record "Purchase Header";
      OldReservationEntry@1009 : Record "Reservation Entry";
      NewReservationEntry@1010 : Record "Reservation Entry";
      OldItemChargeAssignmentPurch@1011 : Record "Item Charge Assignment (Purch)";
      NewItemChargeAssignmentPurch@1012 : Record "Item Charge Assignment (Purch)";
      VATRateChangeLogEntry@1007 : Record "VAT Rate Change Log Entry";
      RecRef@1003 : RecordRef;
      NewLineNo@1015 : Integer;
      QtyRemainder@1016 : Decimal;
      AmountRemainder@1017 : Decimal;
      RoundingPrecision@1018 : Decimal;
    BEGIN
      if not GetNextPurchaseLineNo(PurchaseLine,NewLineNo) then
        exit;

      with NewPurchaseLine do begin
        INIT;
        NewPurchaseLine := PurchaseLine;
        "Line No." := NewLineNo;
        "Quantity Received" := 0;
        "Qty. Received (Base)" := 0;
        "Return Qty. Shipped" := 0;
        "Return Qty. Shipped (Base)" := 0;
        "Quantity Invoiced" := 0;
        "Qty. Invoiced (Base)" := 0;
        "Reserved Quantity" := 0;
        "Reserved Qty. (Base)" := 0;
        "Qty. Rcd. Not Invoiced" := 0;
        "Qty. Rcd. Not Invoiced (Base)" := 0;
        "Return Qty. Shipped Not Invd." := 0;
        "Ret. Qty. Shpd Not Invd.(Base)" := 0;
        "Qty. to Receive" := 0;
        "Qty. to Receive (Base)" := 0;
        "Return Qty. to Ship" := 0;
        "Return Qty. to Ship (Base)" := 0;
        "Qty. to Invoice" := 0;
        "Qty. to Invoice (Base)" := 0;
        "Amt. Rcd. Not Invoiced" := 0;
        "Amt. Rcd. Not Invoiced (LCY)" := 0;
        "Return Shpd. Not Invd." := 0;
        "Return Shpd. Not Invd. (LCY)" := 0;
        if (GenProdPostingGroup <> '') and ConvertGenProdPostGrp(VATRateChangeSetup."Update Purchase Documents") then
          VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
        if (VATProdPostingGroup <> '') and ConvertVATProdPostGrp(VATRateChangeSetup."Update Purchase Documents") then
          VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);
        VALIDATE(Quantity,PurchaseLine."Outstanding Quantity");
        VALIDATE("Qty. to Receive",PurchaseLine."Qty. to Receive");
        VALIDATE("Return Qty. to Ship",PurchaseLine."Return Qty. to Ship");
        if ABS(PurchaseLine."Qty. to Invoice") > (ABS(PurchaseLine."Quantity Received") - ABS(PurchaseLine."Quantity Invoiced")) then
          VALIDATE(
            "Qty. to Invoice",PurchaseLine."Qty. to Invoice" - (PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced"))
        else
          VALIDATE("Qty. to Invoice",0);

        PurchaseHeader.GET("Document Type","Document No.");
        RoundingPrecision := GetRoundingPrecision(PurchaseHeader."Currency Code");

        if PurchaseHeader."Prices Including VAT" then
          VALIDATE(
            "Direct Unit Cost",
            ROUND(PurchaseLine."Direct Unit Cost" * (100 + "VAT %") / (100 + PurchaseLine."VAT %"),RoundingPrecision))
        else
          VALIDATE("Direct Unit Cost",PurchaseLine."Direct Unit Cost");

        VALIDATE("Line Discount %",PurchaseLine."Line Discount %");
        INSERT;
        RecRef.GETTABLE(PurchaseLine);
        VATRateChangeLogEntry.INIT;
        VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
        VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
        VATRateChangeLogEntry.Description := STRSUBSTNO(Text0012,FORMAT(PurchaseLine."Line No."));
        VATRateChangeLogEntry.UpdateGroups(
          PurchaseLine."Gen. Prod. Posting Group",PurchaseLine."Gen. Prod. Posting Group",
          PurchaseLine."VAT Prod. Posting Group",PurchaseLine."VAT Prod. Posting Group");
        VATRateChangeLogEntry.Converted := true;
        WriteLogEntry(VATRateChangeLogEntry);

        RecRef.GETTABLE(NewPurchaseLine);
        VATRateChangeLogEntry.INIT;
        VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
        VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
        VATRateChangeLogEntry.UpdateGroups(
          PurchaseLine."Gen. Prod. Posting Group","Gen. Prod. Posting Group",
          PurchaseLine."VAT Prod. Posting Group","VAT Prod. Posting Group");
        VATRateChangeLogEntry.Description := STRSUBSTNO(Text0013,FORMAT("Line No."),FORMAT(PurchaseLine."Line No."));
        VATRateChangeLogEntry.Converted := true;
        WriteLogEntry(VATRateChangeLogEntry);
      end;

      UpdatePurchaseBlanketOrder(NewPurchaseLine,PurchaseLine."Line No.");

      OldReservationEntry.RESET;
      OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
      OldReservationEntry.SETRANGE("Source ID",PurchaseLine."Document No.");
      OldReservationEntry.SETRANGE("Source Ref. No.",PurchaseLine."Line No.");
      OldReservationEntry.SETRANGE("Source Type",DATABASE::"Purchase Line");
      OldReservationEntry.SETRANGE("Source Subtype",PurchaseLine."Document Type");
      OldReservationEntry.SETFILTER(
        "Reservation Status",'%1|%2',
        OldReservationEntry."Reservation Status"::Reservation,
        OldReservationEntry."Reservation Status"::Surplus);
      if OldReservationEntry.FIND('-') then
        repeat
          NewReservationEntry := OldReservationEntry;
          NewReservationEntry."Source Ref. No." := NewLineNo;
          NewReservationEntry.MODIFY;
        until OldReservationEntry.NEXT = 0;

      case PurchaseLine.Type of
        PurchaseLine.Type::Item:
          begin
            OldItemChargeAssignmentPurch.RESET;
            OldItemChargeAssignmentPurch.SETCURRENTKEY("Applies-to Doc. Type","Applies-to Doc. No.","Applies-to Doc. Line No.");
            OldItemChargeAssignmentPurch.SETRANGE("Applies-to Doc. Type",PurchaseLine."Document Type");
            OldItemChargeAssignmentPurch.SETRANGE("Applies-to Doc. No.",PurchaseLine."Document No.");
            OldItemChargeAssignmentPurch.SETRANGE("Applies-to Doc. Line No.",PurchaseLine."Line No.");
            if OldItemChargeAssignmentPurch.FINDSET then
              repeat
                QtyRemainder := OldItemChargeAssignmentPurch."Qty. to Assign";
                AmountRemainder := OldItemChargeAssignmentPurch."Amount to Assign";
                NewItemChargeAssignmentPurch := OldItemChargeAssignmentPurch;
                NewItemChargeAssignmentPurch."Line No." := GetNextItemChrgAssPurchLineNo(OldItemChargeAssignmentPurch);
                NewItemChargeAssignmentPurch."Applies-to Doc. Line No." := NewLineNo;
                NewItemChargeAssignmentPurch."Qty. to Assign" :=
                  ROUND(QtyRemainder / PurchaseLine.Quantity * PurchaseLine."Outstanding Quantity",0.00001);
                if PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced" = 0 then
                  NewItemChargeAssignmentPurch."Qty. to Assign" := QtyRemainder;
                NewItemChargeAssignmentPurch."Amount to Assign" :=
                  ROUND(NewItemChargeAssignmentPurch."Qty. to Assign" * NewItemChargeAssignmentPurch."Unit Cost",RoundingPrecision);
                NewItemChargeAssignmentPurch.INSERT;
                QtyRemainder := QtyRemainder - NewItemChargeAssignmentPurch."Qty. to Assign";
                AmountRemainder := AmountRemainder - NewItemChargeAssignmentPurch."Amount to Assign";
                OldItemChargeAssignmentPurch."Qty. to Assign" := QtyRemainder;
                OldItemChargeAssignmentPurch."Amount to Assign" := AmountRemainder;
                OldItemChargeAssignmentPurch.MODIFY;
              until OldItemChargeAssignmentPurch.NEXT = 0;
          end;
      end;

      OldPurchaseLine.GET(PurchaseLine."Document Type",PurchaseLine."Document No.",PurchaseLine."Line No.");
      OldPurchaseLine.VALIDATE(Quantity,PurchaseLine."Quantity Received");

      OldPurchaseLine.VALIDATE("Direct Unit Cost",PurchaseLine."Direct Unit Cost");

      OldPurchaseLine.VALIDATE("Line Discount %",PurchaseLine."Line Discount %");
      OldPurchaseLine.VALIDATE("Qty. to Receive",0);
      OldPurchaseLine.VALIDATE("Return Qty. to Ship",0);
      if ABS(PurchaseLine."Qty. to Invoice") > (ABS(PurchaseLine."Quantity Received") - ABS(PurchaseLine."Quantity Invoiced")) then
        OldPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Quantity Received" - PurchaseLine."Quantity Invoiced")
      else
        OldPurchaseLine.VALIDATE("Qty. to Invoice",PurchaseLine."Qty. to Invoice");

      OldPurchaseLine.MODIFY;
    END;

    [External]
    PROCEDURE GetNextPurchaseLineNo@18(PurchaseLine@1001 : Record "Purchase Line";VAR NextLineNo@1002 : Integer) : Boolean;
    VAR
      PurchaseLine2@1000 : Record "Purchase Line";
    BEGIN
      PurchaseLine2.RESET;
      PurchaseLine2.SETRANGE("Document Type",PurchaseLine."Document Type");
      PurchaseLine2.SETRANGE("Document No.",PurchaseLine."Document No.");
      PurchaseLine2 := PurchaseLine;
      if PurchaseLine2.FIND('>') then
        NextLineNo := PurchaseLine."Line No." + (PurchaseLine2."Line No." - PurchaseLine."Line No.") div 2;
      if (NextLineNo = PurchaseLine."Line No.") or (NextLineNo = 0) then begin
        PurchaseLine2.FINDLAST;
        NextLineNo := PurchaseLine2."Line No." + 10000;
      end;
      exit(NextLineNo <> PurchaseLine."Line No.");
    END;

    LOCAL PROCEDURE UpdatePurchaseBlanketOrder@22(PurchaseLine@1000 : Record "Purchase Line";OriginalLineNo@1004 : Integer);
    VAR
      PurchaseHeader@1003 : Record "Purchase Header";
      PurchaseLine2@1002 : Record "Purchase Line";
      PurchaseLine3@1001 : Record "Purchase Line";
    BEGIN
      if PurchaseLine."Document Type" = PurchaseLine."Document Type"::"Blanket Order" then begin
        PurchaseLine2.SETCURRENTKEY("Document Type","Blanket Order No.","Blanket Order Line No.");
        PurchaseLine2.SETRANGE("Blanket Order No.",PurchaseLine."Document No.");
        PurchaseLine2.SETFILTER("Blanket Order Line No.",'=%1',OriginalLineNo);
        PurchaseLine2.SETRANGE(Type,PurchaseLine.Type);
        PurchaseLine2.SETRANGE("No.",PurchaseLine."No.");
        CLEAR(PurchaseHeader);
        if PurchaseLine2.FIND('-') then
          repeat
            if (PurchaseHeader."Document Type" <> PurchaseLine2."Document Type") or
               (PurchaseHeader."No." <> PurchaseLine2."Document No.")
            then begin
              PurchaseHeader.GET(PurchaseLine2."Document Type",PurchaseLine2."Document No.");
              PurchaseLine3.RESET;
              PurchaseLine3.SETRANGE("Document Type",PurchaseHeader."Document Type");
              PurchaseLine3.SETRANGE("Document No.",PurchaseHeader."No.");
              PurchaseLine3.SETRANGE("Blanket Order No.",PurchaseLine2."Blanket Order No.");
              PurchaseLine3.SETRANGE("Blanket Order Line No.",PurchaseLine2."Blanket Order Line No.");
              if PurchaseLine3.FINDLAST then begin
                PurchaseLine3."Blanket Order Line No." := PurchaseLine."Line No.";
                PurchaseLine3.MODIFY;
              end;
            end;
          until PurchaseLine2.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE LineInScope@13(GenProdPostingGroup@1000 : Code[20];VATProdPostingGroup@1001 : Code[20];ConvertGenProdPostingGroup@1002 : Boolean;ConvertVATProdPostingGroup@1003 : Boolean) : Boolean;
    BEGIN
      if ConvertGenProdPostingGroup then
        if VATRateChangeConversion.GET(VATRateChangeConversion.Type::"Gen. Prod. Posting Group",GenProdPostingGroup) then
          exit(true);
      if ConvertVATProdPostingGroup then
        if VATRateChangeConversion.GET(VATRateChangeConversion.Type::"VAT Prod. Posting Group",VATProdPostingGroup) then
          exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE GetNextSalesLineNo@1050(SalesLine@1000 : Record "Sales Line";VAR NextLineNo@1001 : Integer) : Boolean;
    VAR
      SalesLine2@1002 : Record "Sales Line";
    BEGIN
      SalesLine2.RESET;
      SalesLine2.SETRANGE("Document Type",SalesLine."Document Type");
      SalesLine2.SETRANGE("Document No.",SalesLine."Document No.");
      SalesLine2 := SalesLine;
      if SalesLine2.FIND('>') then
        NextLineNo := SalesLine."Line No." + (SalesLine2."Line No." - SalesLine."Line No.") div 2;
      if (NextLineNo = SalesLine."Line No.") or (NextLineNo = 0) then begin
        SalesLine2.FINDLAST;
        NextLineNo := SalesLine2."Line No." + 10000;
      end;
      exit(NextLineNo <> SalesLine."Line No.");
    END;

    LOCAL PROCEDURE UpdateServPriceAdjDetail@14();
    VAR
      VatRateChangeConversion@1001 : Record "VAT Rate Change Conversion";
      ServPriceAdjustmentDetail@1000 : Record "Serv. Price Adjustment Detail";
      ServPriceAdjustmentDetailNew@1002 : Record "Serv. Price Adjustment Detail";
      VATRateChangeLogEntry@1003 : Record "VAT Rate Change Log Entry";
      RecRef@1004 : RecordRef;
    BEGIN
      if VATRateChangeSetup."Update Serv. Price Adj. Detail" <>
         VATRateChangeSetup."Update Serv. Price Adj. Detail"::"Gen. Prod. Posting Group"
      then
        exit;
      VatRateChangeConversion.SETRANGE(Type,VatRateChangeConversion.Type::"Gen. Prod. Posting Group");
      if VatRateChangeConversion.FINDSET then
        repeat
          with ServPriceAdjustmentDetail do begin
            SETRANGE("Gen. Prod. Posting Group",VatRateChangeConversion."From Code");
            if FINDSET then
              repeat
                VATRateChangeLogEntry.INIT;
                RecRef.GETTABLE(ServPriceAdjustmentDetailNew);
                VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
                VATRateChangeLogEntry."Table ID" := DATABASE::"Serv. Price Adjustment Detail";
                VATRateChangeLogEntry."Old Gen. Prod. Posting Group" := "Gen. Prod. Posting Group";
                VATRateChangeLogEntry."New Gen. Prod. Posting Group" := VatRateChangeConversion."To Code";
                ServPriceAdjustmentDetailNew := ServPriceAdjustmentDetail;
                if VATRateChangeSetup."Perform Conversion" then begin
                  ServPriceAdjustmentDetailNew.RENAME(
                    "Serv. Price Adjmt. Gr. Code",Type,"No.","Work Type",VatRateChangeConversion."To Code");
                  VATRateChangeLogEntry.Converted := true
                end else
                  VATRateChangeLogEntry.Description := STRSUBSTNO(Text0009,VATRateChangeSetup.FIELDCAPTION("Perform Conversion"));
                WriteLogEntry(VATRateChangeLogEntry);
              until NEXT = 0;
          end;
        until VatRateChangeConversion.NEXT = 0;
    END;

    LOCAL PROCEDURE GetRoundingPrecision@19(CurrencyCode@1000 : Code[10]) : Decimal;
    VAR
      Currency@1001 : Record Currency;
    BEGIN
      if CurrencyCode = '' then
        Currency.InitRoundingPrecision
      else
        Currency.GET(CurrencyCode);
      exit(Currency."Unit-Amount Rounding Precision");
    END;

    LOCAL PROCEDURE CanUpdateService@21(ServiceLine@1007 : Record "Service Line") : Boolean;
    VAR
      ServiceHeader@1002 : Record "Service Header";
      VATRateChangeLogEntry@1000 : Record "VAT Rate Change Log Entry";
      RecRef@1001 : RecordRef;
      DescriptionTxt@1006 : Text[250];
    BEGIN
      DescriptionTxt := '';
      with ServiceLine do begin
        if "Shipment No." <> '' then
          DescriptionTxt := Text0010;
      end;
      if DescriptionTxt = '' then
        exit(true);

      VATRateChangeLogEntry.INIT;
      ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.");
      RecRef.GETTABLE(ServiceHeader);
      VATRateChangeLogEntry.INIT;
      VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
      VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
      VATRateChangeLogEntry.Description := DescriptionTxt;
      WriteLogEntry(VATRateChangeLogEntry);
    END;

    LOCAL PROCEDURE UpdateService@23();
    VAR
      ServiceHeader@1008 : Record "Service Header";
      ServiceLine@1000 : Record "Service Line";
      ServiceLineOld@1007 : Record "Service Line";
      VATRateChangeLogEntry@1004 : Record "VAT Rate Change Log Entry";
      RecRef@1001 : RecordRef;
      NewVATProdPotingGroup@1003 : Code[20];
      NewGenProdPostingGroup@1002 : Code[20];
      ConvertVATProdPostingGroup@1006 : Boolean;
      ConvertGenProdPostingGroup@1005 : Boolean;
      RoundingPrecision@1009 : Decimal;
      LastDocNo@1010 : Code[20];
    BEGIN
      ProgressWindow.UPDATE(1,ServiceLine.TABLECAPTION);
      ConvertVATProdPostingGroup := ConvertVATProdPostGrp(VATRateChangeSetup."Update Service Docs.");
      ConvertGenProdPostingGroup := ConvertGenProdPostGrp(VATRateChangeSetup."Update Service Docs.");
      if not ConvertVATProdPostingGroup and not ConvertGenProdPostingGroup then
        exit;

      with ServiceLine do begin
        SETFILTER("Document Type",'%1|%2|%3',"Document Type"::Quote,"Document Type"::Order,"Document Type"::Invoice);
        SETRANGE("Shipment No.",'');
        LastDocNo := '';
        if FIND('-') then
          repeat
            if LineInScope("Gen. Prod. Posting Group","VAT Prod. Posting Group",ConvertGenProdPostingGroup,ConvertVATProdPostingGroup) then begin
              if CanUpdateService(ServiceLine) and IncludeServiceLine(Type,"No.") then begin
                if Quantity = "Outstanding Quantity" then begin
                  if LastDocNo <> ServiceHeader."No." then begin
                    ServiceHeader.GET("Document Type","Document No.");
                    LastDocNo := ServiceHeader."No.";
                  end;

                  if ServiceHeader."Prices Including VAT" then
                    ServiceLineOld := ServiceLine;

                  RecRef.GETTABLE(ServiceLine);
                  UpdateRec(
                    RecRef,ConvertVATProdPostGrp(VATRateChangeSetup."Update Service Docs."),
                    ConvertGenProdPostGrp(VATRateChangeSetup."Update Service Docs."));

                  if ServiceHeader."Prices Including VAT" and VATRateChangeSetup."Perform Conversion" then begin
                    RecRef.SETTABLE(ServiceLine);
                    RoundingPrecision := GetRoundingPrecision(ServiceHeader."Currency Code");
                    VALIDATE("Unit Price",ROUND("Unit Price" * (100 + "VAT %") / (100 + ServiceLineOld."VAT %"),RoundingPrecision))
                  end;
                end else
                  if VATRateChangeSetup."Perform Conversion" and ("Outstanding Quantity" <> 0) then begin
                    NewVATProdPotingGroup := "VAT Prod. Posting Group";
                    NewGenProdPostingGroup := "Gen. Prod. Posting Group";
                    if ConvertVATProdPostingGroup then
                      if VATRateChangeConversion.GET(
                           VATRateChangeConversion.Type::"VAT Prod. Posting Group","VAT Prod. Posting Group")
                      then
                        NewVATProdPotingGroup := VATRateChangeConversion."To Code";
                    if ConvertGenProdPostingGroup then
                      if VATRateChangeConversion.GET(
                           VATRateChangeConversion.Type::"Gen. Prod. Posting Group","Gen. Prod. Posting Group")
                      then
                        NewGenProdPostingGroup := VATRateChangeConversion."To Code";
                    AddNewServiceLine(ServiceLine,NewVATProdPotingGroup,NewGenProdPostingGroup);
                  end else begin
                    RecRef.GETTABLE(ServiceLine);
                    InitVATRateChangeLogEntry(VATRateChangeLogEntry,RecRef,"Outstanding Quantity","Line No.");
                    VATRateChangeLogEntry.UpdateGroups(
                      "Gen. Prod. Posting Group","Gen. Prod. Posting Group","VAT Prod. Posting Group","VAT Prod. Posting Group");
                    WriteLogEntry(VATRateChangeLogEntry);
                  end;
              end
            end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AddNewServiceLine@27(ServiceLine@1022 : Record "Service Line";VATProdPostingGroup@1001 : Code[20];GenProdPostingGroup@1002 : Code[20]);
    VAR
      NewServiceLine@1003 : Record "Service Line";
      OldServiceLine@1005 : Record "Service Line";
      ServiceHeader@1006 : Record "Service Header";
      OldReservationEntry@1009 : Record "Reservation Entry";
      NewReservationEntry@1010 : Record "Reservation Entry";
      VATRateChangeLogEntry@1004 : Record "VAT Rate Change Log Entry";
      RecRef@1000 : RecordRef;
      NewLineNo@1015 : Integer;
      RoundingPrecision@1007 : Decimal;
    BEGIN
      if not GetNextServiceLineNo(ServiceLine,NewLineNo) then
        exit;

      with NewServiceLine do begin
        INIT;
        NewServiceLine := ServiceLine;
        "Line No." := NewLineNo;
        "Qty. to Invoice" := 0;
        "Qty. to Ship" := 0;
        "Qty. Shipped Not Invoiced" := 0;
        "Quantity Shipped" := 0;
        "Quantity Invoiced" := 0;
        "Qty. to Invoice (Base)" := 0;
        "Qty. to Ship (Base)" := 0;
        "Qty. Shipped Not Invd. (Base)" := 0;
        "Qty. Shipped (Base)" := 0;
        "Qty. Invoiced (Base)" := 0;
        "Qty. to Consume" := 0;
        "Quantity Consumed" := 0;
        "Qty. to Consume (Base)" := 0;
        "Qty. Consumed (Base)" := 0;
        if (GenProdPostingGroup <> '') and ConvertGenProdPostGrp(VATRateChangeSetup."Update Service Docs.") then
          VALIDATE("Gen. Prod. Posting Group",GenProdPostingGroup);
        if (VATProdPostingGroup <> '') and ConvertVATProdPostGrp(VATRateChangeSetup."Update Service Docs.") then
          VALIDATE("VAT Prod. Posting Group",VATProdPostingGroup);

        VALIDATE(Quantity,ServiceLine."Outstanding Quantity");
        VALIDATE("Qty. to Ship",ServiceLine."Qty. to Ship");
        VALIDATE("Qty. to Consume",ServiceLine."Qty. to Consume");
        if ABS(ServiceLine."Qty. to Invoice") >
           (ABS(ServiceLine."Quantity Shipped") - ABS(ServiceLine."Quantity Invoiced"))
        then
          VALIDATE(
            "Qty. to Invoice",
            ServiceLine."Qty. to Invoice" - (ServiceLine."Quantity Shipped" - ServiceLine."Quantity Invoiced"))
        else
          VALIDATE("Qty. to Invoice",0);
        ServiceHeader.GET("Document Type","Document No.");
        RoundingPrecision := GetRoundingPrecision(ServiceHeader."Currency Code");
        if ServiceHeader."Prices Including VAT" then
          VALIDATE("Unit Price",ROUND(ServiceLine."Unit Price" * (100 + "VAT %") / (100 + ServiceLine."VAT %"),RoundingPrecision))
        else
          VALIDATE("Unit Price",ServiceLine."Unit Price");
        VALIDATE("Line Discount %",ServiceLine."Line Discount %");
        INSERT;
        RecRef.GETTABLE(ServiceLine);
        VATRateChangeLogEntry.INIT;
        VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
        VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
        VATRateChangeLogEntry.Description := STRSUBSTNO(Text0012,FORMAT(ServiceLine."Line No."));
        VATRateChangeLogEntry.UpdateGroups(
          ServiceLine."Gen. Prod. Posting Group",ServiceLine."Gen. Prod. Posting Group",
          ServiceLine."VAT Prod. Posting Group",ServiceLine."VAT Prod. Posting Group");
        VATRateChangeLogEntry.Converted := true;
        WriteLogEntry(VATRateChangeLogEntry);

        RecRef.GETTABLE(NewServiceLine);
        VATRateChangeLogEntry.INIT;
        VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
        VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
        VATRateChangeLogEntry.UpdateGroups(
          ServiceLine."Gen. Prod. Posting Group","Gen. Prod. Posting Group",
          ServiceLine."VAT Prod. Posting Group","VAT Prod. Posting Group");
        VATRateChangeLogEntry.Description := STRSUBSTNO(Text0013,FORMAT("Line No."),FORMAT(ServiceLine."Line No."));
        VATRateChangeLogEntry.Converted := true;
        WriteLogEntry(VATRateChangeLogEntry);
      end;

      ServiceLine.CALCFIELDS("Reserved Quantity");
      if ServiceLine."Reserved Quantity" <> 0 then begin
        OldReservationEntry.RESET;
        OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
        OldReservationEntry.SETRANGE("Source ID",ServiceLine."Document No.");
        OldReservationEntry.SETRANGE("Source Ref. No.",ServiceLine."Line No.");
        OldReservationEntry.SETRANGE("Source Type",DATABASE::"Service Line");
        OldReservationEntry.SETRANGE("Source Subtype",ServiceLine."Document Type");
        OldReservationEntry.SETRANGE("Reservation Status",OldReservationEntry."Reservation Status"::Reservation);
        if OldReservationEntry.FINDSET then
          repeat
            NewReservationEntry := OldReservationEntry;
            NewReservationEntry."Source Ref. No." := NewLineNo;
            NewReservationEntry.MODIFY;
          until OldReservationEntry.NEXT = 0;
      end;

      OldReservationEntry.RESET;
      OldReservationEntry.SETCURRENTKEY("Source ID","Source Ref. No.","Source Type","Source Subtype");
      OldReservationEntry.SETRANGE("Source ID",ServiceLine."Document No.");
      OldReservationEntry.SETRANGE("Source Ref. No.",ServiceLine."Line No.");
      OldReservationEntry.SETRANGE("Source Type",DATABASE::"Service Line");
      OldReservationEntry.SETRANGE("Source Subtype",ServiceLine."Document Type");
      OldReservationEntry.SETRANGE("Reservation Status",OldReservationEntry."Reservation Status"::Surplus);
      if OldReservationEntry.FIND('-') then
        repeat
          NewReservationEntry := OldReservationEntry;
          NewReservationEntry."Source Ref. No." := NewLineNo;
          NewReservationEntry.MODIFY;
        until OldReservationEntry.NEXT = 0;

      OldServiceLine.GET(ServiceLine."Document Type",ServiceLine."Document No.",ServiceLine."Line No.");
      OldServiceLine.VALIDATE(Quantity,ServiceLine."Quantity Shipped");
      OldServiceLine.VALIDATE("Unit Price",ServiceLine."Unit Price");
      OldServiceLine.VALIDATE("Line Discount %",ServiceLine."Line Discount %");
      OldServiceLine.VALIDATE("Qty. to Ship",0);
      OldServiceLine.VALIDATE("Qty. to Consume",0);
      if ABS(OldServiceLine."Qty. to Invoice") >
         (ABS(OldServiceLine."Quantity Shipped") - ABS(OldServiceLine."Quantity Consumed") - ABS(ServiceLine."Quantity Invoiced"))
      then
        OldServiceLine.VALIDATE(
          "Qty. to Invoice",OldServiceLine."Qty. to Invoice" - ServiceLine."Quantity Shipped" - OldServiceLine."Quantity Consumed")
      else
        OldServiceLine.VALIDATE("Qty. to Invoice",OldServiceLine."Qty. to Invoice");
      OldServiceLine.MODIFY;
    END;

    [External]
    PROCEDURE GetNextServiceLineNo@31(ServiceLine@1000 : Record "Service Line";VAR NextLineNo@1001 : Integer) : Boolean;
    VAR
      ServiceLine2@1002 : Record "Service Line";
    BEGIN
      ServiceLine2.RESET;
      ServiceLine2.SETRANGE("Document Type",ServiceLine."Document Type");
      ServiceLine2.SETRANGE("Document No.",ServiceLine."Document No.");
      ServiceLine2 := ServiceLine;
      if ServiceLine2.FIND('>') then
        NextLineNo := ServiceLine."Line No." + (ServiceLine2."Line No." - ServiceLine."Line No.") div 2;
      if (NextLineNo = ServiceLine."Line No.") or (NextLineNo = 0)then begin
        ServiceLine2.FINDLAST;
        NextLineNo := ServiceLine2."Line No." + 10000;
      end;
      exit(NextLineNo <> ServiceLine."Line No.");
    END;

    LOCAL PROCEDURE GetNextItemChrgAssSaleLineNo@51(ItemChargeAssignmentSales@1002 : Record "Item Charge Assignment (Sales)") : Integer;
    VAR
      ItemChargeAssignmentSales2@1000 : Record "Item Charge Assignment (Sales)";
      ExitValue@1001 : Integer;
    BEGIN
      ExitValue := 10000;
      ItemChargeAssignmentSales2.RESET;
      ItemChargeAssignmentSales2.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      ItemChargeAssignmentSales2.SETRANGE("Document Type",ItemChargeAssignmentSales."Document Type");
      ItemChargeAssignmentSales2.SETRANGE("Document No.",ItemChargeAssignmentSales."Document No.");
      ItemChargeAssignmentSales2.SETRANGE("Document Line No.",ItemChargeAssignmentSales."Document Line No.");
      if ItemChargeAssignmentSales2.FINDLAST then
        ExitValue := ItemChargeAssignmentSales2."Line No." + 10000;
      exit(ExitValue);
    END;

    LOCAL PROCEDURE GetNextItemChrgAssPurchLineNo@50(ItemChargeAssignmentPurch@1002 : Record "Item Charge Assignment (Purch)") : Integer;
    VAR
      ItemChargeAssignmentPurch2@1000 : Record "Item Charge Assignment (Purch)";
      ExitValue@1001 : Integer;
    BEGIN
      ExitValue := 10000;
      ItemChargeAssignmentPurch2.RESET;
      ItemChargeAssignmentPurch2.SETCURRENTKEY("Document Type","Document No.","Document Line No.");
      ItemChargeAssignmentPurch2.SETRANGE("Document Type",ItemChargeAssignmentPurch."Document Type");
      ItemChargeAssignmentPurch2.SETRANGE("Document No.",ItemChargeAssignmentPurch."Document No.");
      ItemChargeAssignmentPurch2.SETRANGE("Document Line No.",ItemChargeAssignmentPurch."Document Line No.");
      if ItemChargeAssignmentPurch2.FINDLAST then
        ExitValue := ItemChargeAssignmentPurch2."Line No." + 10000;
      exit(ExitValue);
    END;

    LOCAL PROCEDURE AreTablesSelected@15() : Boolean;
    BEGIN
      with VATRateChangeSetup do begin
        if "Update Gen. Prod. Post. Groups" <> "Update Gen. Prod. Post. Groups"::No then
          exit(true);
        if "Update G/L Accounts" <> "Update G/L Accounts"::No then
          exit(true);
        if "Update Items" <> "Update Items"::No then
          exit(true);
        if "Update Item Templates" <> "Update Item Templates"::No then
          exit(true);
        if "Update Item Charges" <> "Update Item Charges"::No then
          exit(true);
        if "Update Resources" <> "Update Resources"::No then
          exit(true);
        if "Update Gen. Journal Lines" <> "Update Gen. Journal Lines"::No then
          exit(true);
        if "Update Gen. Journal Allocation" <> "Update Gen. Journal Allocation"::No then
          exit(true);
        if "Update Std. Gen. Jnl. Lines" <> "Update Std. Gen. Jnl. Lines"::No then
          exit(true);
        if "Update Res. Journal Lines" <> "Update Res. Journal Lines"::No then
          exit(true);
        if "Update Job Journal Lines" <> "Update Job Journal Lines"::No then
          exit(true);
        if "Update Requisition Lines" <> "Update Requisition Lines"::No then
          exit(true);
        if "Update Std. Item Jnl. Lines" <> "Update Std. Item Jnl. Lines"::No then
          exit(true);
        if "Update Service Docs." <> "Update Service Docs."::No then
          exit(true);
        if "Update Serv. Price Adj. Detail" <> "Update Serv. Price Adj. Detail"::No then
          exit(true);
        if "Update Sales Documents" <> "Update Sales Documents"::No then
          exit(true);
        if "Update Purchase Documents" <> "Update Purchase Documents"::No then
          exit(true);
        if "Update Production Orders" <> "Update Production Orders"::No then
          exit(true);
        if "Update Work Centers" <> "Update Work Centers"::No then
          exit(true);
        if "Update Machine Centers" <> "Update Machine Centers"::No then
          exit(true);
        if "Update Reminders" <> "Update Reminders"::No then
          exit(true);
        if "Update Finance Charge Memos" <> "Update Finance Charge Memos"::No then
          exit(true);
      end;
      exit(false)
    END;

    LOCAL PROCEDURE IncludeLine@25(Type@1000 : '" ","G/L Account",Item,Resource';No@1001 : Code[20]) : Boolean;
    BEGIN
      case Type of
        Type::"G/L Account":
          exit(IncludeGLAccount(No));
        Type::Item:
          exit(IncludeItem(No));
        Type::Resource:
          exit(IncludeRes(No));
      end;
      exit(true);
    END;

    LOCAL PROCEDURE IncludeGLAccount@26(No@1000 : Code[20]) : Boolean;
    VAR
      GLAccount@1001 : Record "G/L Account";
    BEGIN
      if VATRateChangeSetup."Account Filter" = '' then
        exit(true);
      GLAccount."No." := No;
      GLAccount.SETFILTER("No.",VATRateChangeSetup."Account Filter");
      exit(GLAccount.FIND);
    END;

    LOCAL PROCEDURE IncludeItem@28(No@1000 : Code[20]) : Boolean;
    VAR
      Item@1001 : Record Item;
    BEGIN
      if VATRateChangeSetup."Item Filter" = '' then
        exit(true);
      Item."No." := No;
      Item.SETFILTER("No.",VATRateChangeSetup."Item Filter");
      exit(Item.FIND);
    END;

    LOCAL PROCEDURE IncludeRes@29(No@1000 : Code[20]) : Boolean;
    VAR
      Res@1001 : Record Resource;
    BEGIN
      if VATRateChangeSetup."Resource Filter" = '' then
        exit(true);
      Res."No." := No;
      Res.SETFILTER("No.",VATRateChangeSetup."Resource Filter");
      exit(Res.FIND);
    END;

    LOCAL PROCEDURE IncludeServiceLine@30(Type@1000 : '" ",Item,Resource,Cost,"G/L Account"';No@1001 : Code[20]) : Boolean;
    BEGIN
      case Type of
        Type::"G/L Account":
          exit(IncludeGLAccount(No));
        Type::Item:
          exit(IncludeItem(No));
        Type::Resource:
          exit(IncludeRes(No));
      end;
      exit(true);
    END;

    LOCAL PROCEDURE InitVATRateChangeLogEntry@34(VAR VATRateChangeLogEntry@1001 : Record "VAT Rate Change Log Entry";RecRef@1002 : RecordRef;OutstandingQuantity@1003 : Decimal;LineNo@1004 : Integer);
    BEGIN
      VATRateChangeLogEntry.INIT;
      VATRateChangeLogEntry."Record ID" := RecRef.RECORDID;
      VATRateChangeLogEntry."Table ID" := RecRef.NUMBER;
      if (OutstandingQuantity = 0) and VATRateChangeSetup."Perform Conversion" then
        VATRateChangeLogEntry.Description := Text0007
      else begin
        VATRateChangeLogEntry.Description :=
          STRSUBSTNO(Text0009,VATRateChangeSetup.FIELDCAPTION("Perform Conversion"));
        if OutstandingQuantity <> 0 then
          VATRateChangeLogEntry.Description := STRSUBSTNO(Text0017,LineNo)
      end;
    END;

    BEGIN
    END.
  }
}

