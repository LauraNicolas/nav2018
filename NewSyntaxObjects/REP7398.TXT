OBJECT Report 7398 Date Compress Whse. Entries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Date Compr. Register"=rimd,
                TableData "Warehouse Entry"=rimd,
                TableData "Warehouse Register"=rimd;
    CaptionML=ENU=Date Compress Whse. Entries;
    ProcessingOnly=true;
    OnPreReport=BEGIN
                  WhseEntryFilter := COPYSTR("Warehouse Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 9585;    ;DataItem;Warehouse Entry     ;
               DataItemTable="Warehouse Entry";
               DataItemTableView=SORTING("Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code","Lot No.","Serial No.","Entry Type");
               OnPreDataItem=BEGIN
                               if not HideDialog then
                                 if not CONFIRM(Text000,false) then
                                   CurrReport.BREAK;

                               if EntrdDateComprReg."Ending Date" = 0D then
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(
                                 Text004 +
                                 Text005 +
                                 Text006 +
                                 Text007);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Whse. Entries");

                               NewWhseEntry.LOCKTABLE;
                               WhseReg.LOCKTABLE;
                               DateComprReg.LOCKTABLE;

                               if WhseEntry2.FINDLAST then;
                               LastEntryNo := WhseEntry2."Entry No.";
                               SETRANGE("Entry No.",0,LastEntryNo);
                               SETRANGE("Registering Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");

                               InitRegisters;

                               RetainSerialNo := RetainNo(FIELDNO("Serial No."));
                               RetainLotNo := RetainNo(FIELDNO("Lot No."));
                             END;

               OnAfterGetRecord=BEGIN
                                  WhseEntry2 := "Warehouse Entry";
                                  with WhseEntry2 do begin
                                    SETCURRENTKEY(
                                      "Item No.","Bin Code","Location Code","Variant Code",
                                      "Unit of Measure Code","Lot No.","Serial No.");
                                    COPYFILTERS("Warehouse Entry");
                                    SETRANGE("Item No.","Item No.");
                                    SETRANGE("Bin Code","Bin Code");
                                    SETRANGE("Location Code","Location Code");
                                    SETRANGE("Variant Code","Variant Code");
                                    SETRANGE("Unit of Measure Code","Unit of Measure Code");
                                    SETFILTER(
                                      "Registering Date",
                                      DateComprMgt.GetDateFilter("Registering Date",EntrdDateComprReg,false));

                                    if (not RetainSerialNo) or (not RetainLotNo) then
                                      UpdateITWhseEntries;

                                    SETRANGE("Serial No.","Serial No.");
                                    SETRANGE("Lot No.","Lot No.");
                                    SETRANGE("Warranty Date","Warranty Date");
                                    SETRANGE("Expiration Date","Expiration Date");

                                    CalcCompressWhseEntry;

                                    NewWhseEntry.INIT;
                                    NewWhseEntry."Location Code" := "Location Code";
                                    NewWhseEntry."Bin Code" := "Bin Code";
                                    NewWhseEntry."Item No." := "Item No.";
                                    NewWhseEntry.Description := Text008;
                                    NewWhseEntry."Variant Code" := "Variant Code";
                                    NewWhseEntry."Unit of Measure Code" := "Unit of Measure Code";
                                    NewWhseEntry.Dedicated := Dedicated;
                                    NewWhseEntry."Zone Code" := "Zone Code";
                                    NewWhseEntry."Bin Type Code" := "Bin Type Code";
                                    NewWhseEntry."Registering Date" := GETRANGEMIN("Registering Date");
                                    NewWhseEntry."Serial No." := "Serial No.";
                                    NewWhseEntry."Lot No." := "Lot No.";
                                    NewWhseEntry."Warranty Date" := "Warranty Date";
                                    NewWhseEntry."Expiration Date" := "Expiration Date";

                                    Window.UPDATE(1,NewWhseEntry."Registering Date");
                                    Window.UPDATE(2,DateComprReg."No. of New Records");

                                    repeat
                                      DELETE;
                                      DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
                                      Window.UPDATE(3,DateComprReg."No. Records Deleted");
                                    until not FINDFIRST;

                                    if PosQtyBaseonBin > 0 then begin
                                      InsertNewEntry(
                                        NewWhseEntry,PosQtyonBin,PosQtyBaseonBin,
                                        PosCubage,PosWeight,NewWhseEntry."Entry Type"::"Positive Adjmt.");
                                      DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
                                    end;

                                    if NegQtyBaseonBin < 0 then begin
                                      InsertNewEntry(
                                        NewWhseEntry,NegQtyonBin,NegQtyBaseonBin,
                                        NegCubage,NegWeight,NewWhseEntry."Entry Type"::"Negative Adjmt.");
                                      DateComprReg."No. of New Records" := DateComprReg."No. of New Records" + 1;
                                    end;
                                  end;

                                  if DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 then begin
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(WhseReg,DateComprReg);
                                  end;
                                END;

               OnPostDataItem=BEGIN
                                if DateComprReg."No. Records Deleted" > NoOfDeleted then
                                  InsertRegisters(WhseReg,DateComprReg);
                              END;

               ReqFilterFields="Item No.","Bin Code","Location Code","Zone Code" }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=true;
      OnOpenPage=BEGIN
                   if EntrdDateComprReg."Ending Date" = 0D then
                     EntrdDateComprReg."Ending Date" := TODAY;

                   with "Warehouse Entry" do begin
                     InsertField(FIELDNO("Serial No."),FIELDCAPTION("Serial No."));
                     InsertField(FIELDNO("Lot No."),FIELDCAPTION("Lot No."));
                   end;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  Name=Container1900000001;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  Name=Options;
                  CaptionML=ENU=Options }

      { 1   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=ENU=Starting Date;
                  ToolTipML=ENU=Specifies the first date to be included in the date compression. The compression will affect all warehouse entries from this date to the Ending Date.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=ENU=Ending Date;
                  ToolTipML=ENU=Specifies the last date to be included in the date compression. The compression will affect all warehouse entries from the Starting Date to this date.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=EntrdDateComprReg."Ending Date" }

      { 3   ;2   ;Field     ;
                  Name=PeriodLength;
                  CaptionML=ENU=Period Length;
                  ToolTipML=ENU=Specifies the length of the period whose entries will be combined. Choose the field to see the options.;
                  OptionCaptionML=ENU=Day,Week,Month,Quarter,Year,Period;
                  ApplicationArea=#Warehouse;
                  SourceExpr=EntrdDateComprReg."Period Length" }

      { 1907651001;2;Group  ;
                  Name=Retain Field Contents;
                  CaptionML=ENU=Retain Field Contents }

      { 4   ;3   ;Field     ;
                  Name=SerialNo;
                  CaptionML=ENU=Serial No.;
                  ToolTipML=ENU=Specifies if you want to retain the serial number in the compression.;
                  ApplicationArea=#ItemTracking;
                  SourceExpr=Retain[1] }

      { 5   ;3   ;Field     ;
                  Name=LotNo;
                  CaptionML=ENU=Lot No.;
                  ToolTipML=ENU=Specifies if you want to retain the lot number in the compression.;
                  ApplicationArea=#ItemTracking;
                  SourceExpr=Retain[2] }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing warehouse entries...\\';
      Text005@1005 : TextConst 'ENU=Date                 #1######\\';
      Text006@1006 : TextConst 'ENU=No. of new entries   #2######\';
      Text007@1007 : TextConst 'ENU=No. of entries del.  #3######';
      SourceCodeSetup@1008 : Record "Source Code Setup";
      DateComprReg@1009 : Record "Date Compr. Register";
      EntrdDateComprReg@1010 : Record "Date Compr. Register";
      WhseReg@1011 : Record "Warehouse Register";
      NewWhseEntry@1012 : Record "Warehouse Entry";
      WhseEntry2@1013 : Record "Warehouse Entry";
      DateComprMgt@1014 : Codeunit DateComprMgt;
      Window@1015 : Dialog;
      WhseEntryFilter@1016 : Text[250];
      PosQtyonBin@1031 : Decimal;
      PosQtyBaseonBin@1030 : Decimal;
      NegQtyonBin@1029 : Decimal;
      NegQtyBaseonBin@1028 : Decimal;
      PosWeight@1032 : Decimal;
      NegWeight@1033 : Decimal;
      PosCubage@1034 : Decimal;
      NegCubage@1035 : Decimal;
      NoOfFields@1017 : Integer;
      Retain@1018 : ARRAY [2] OF Boolean;
      FieldNumber@1019 : ARRAY [10] OF Integer;
      FieldNameArray@1020 : ARRAY [10] OF Text[100];
      LastEntryNo@1021 : Integer;
      NoOfDeleted@1022 : Integer;
      i@1024 : Integer;
      WhseRegExists@1023 : Boolean;
      RetainSerialNo@1026 : Boolean;
      RetainLotNo@1027 : Boolean;
      Text008@1038 : TextConst 'ENU=Date Compressed';
      HideDialog@1036 : Boolean;

    LOCAL PROCEDURE InitRegisters@4();
    VAR
      NextRegNo@1000 : Integer;
    BEGIN
      if WhseReg.FIND('+') then;
      WhseReg.INIT;
      WhseReg."No." := WhseReg."No." + 1;
      WhseReg."Creation Date" := TODAY;
      WhseReg."Source Code" := SourceCodeSetup."Compress Whse. Entries";
      WhseReg."User ID" := USERID;
      WhseReg."From Entry No." := LastEntryNo + 1;

      if DateComprReg.FINDLAST then
        NextRegNo := DateComprReg."No." + 1;

      DateComprReg.InitRegister(
        DATABASE::"Warehouse Entry",NextRegNo,
        EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date",EntrdDateComprReg."Period Length",
        WhseEntryFilter,WhseReg."No.",SourceCodeSetup."Compress Whse. Entries");

      for i := 1 to NoOfFields do
        if Retain[i] then
          DateComprReg."Retain Field Contents" :=
            COPYSTR(
              DateComprReg."Retain Field Contents" + ',' + FieldNameArray[i],1,
              MAXSTRLEN(DateComprReg."Retain Field Contents"));
      DateComprReg."Retain Field Contents" := COPYSTR(DateComprReg."Retain Field Contents",2);

      WhseRegExists := false;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(VAR WhseReg@1000 : Record "Warehouse Register";VAR DateComprReg@1001 : Record "Date Compr. Register");
    BEGIN
      WhseReg."To Entry No." := NewWhseEntry."Entry No.";

      if WhseRegExists then begin
        WhseReg.MODIFY;
        DateComprReg.MODIFY;
      end else begin
        WhseReg.INSERT;
        DateComprReg.INSERT;
        WhseRegExists := true;
      end;
      COMMIT;

      NewWhseEntry.LOCKTABLE;
      WhseReg.LOCKTABLE;
      DateComprReg.LOCKTABLE;

      WhseEntry2.RESET;

      if WhseEntry2.FINDLAST then;
      if LastEntryNo <> WhseEntry2."Entry No." then begin
        LastEntryNo := WhseEntry2."Entry No.";
        InitRegisters;
      end;
    END;

    LOCAL PROCEDURE InsertField@2(Number@1000 : Integer;Name@1001 : Text[100]);
    BEGIN
      NoOfFields := NoOfFields + 1;
      FieldNumber[NoOfFields] := Number;
      FieldNameArray[NoOfFields] := Name;
    END;

    LOCAL PROCEDURE RetainNo@3(Number@1000 : Integer) : Boolean;
    BEGIN
      exit(Retain[Index(Number)]);
    END;

    LOCAL PROCEDURE Index@6(Number@1000 : Integer) : Integer;
    BEGIN
      for i := 1 to NoOfFields do
        if Number = FieldNumber[i] then
          exit(i);
    END;

    LOCAL PROCEDURE CalcCompressWhseEntry@8();
    VAR
      LocalWhseEntry@1002 : Record "Warehouse Entry";
    BEGIN
      PosQtyonBin := 0;
      PosQtyBaseonBin := 0;
      PosWeight := 0;
      PosCubage := 0;
      NegQtyonBin := 0;
      NegQtyBaseonBin := 0;
      NegWeight := 0;
      NegCubage := 0;
      LocalWhseEntry.COPY(WhseEntry2);
      if LocalWhseEntry.FIND('-') then
        repeat
          if LocalWhseEntry."Qty. (Base)" < 0 then begin
            NegQtyonBin := NegQtyonBin + LocalWhseEntry.Quantity;
            NegQtyBaseonBin := NegQtyBaseonBin + LocalWhseEntry."Qty. (Base)";
            NegWeight := NegWeight + LocalWhseEntry.Weight;
            NegCubage := NegCubage + LocalWhseEntry.Cubage;
          end else begin
            PosQtyonBin := PosQtyonBin + LocalWhseEntry.Quantity;
            PosQtyBaseonBin := PosQtyBaseonBin + LocalWhseEntry."Qty. (Base)";
            PosWeight := PosWeight + LocalWhseEntry.Weight;
            PosCubage := PosCubage + LocalWhseEntry.Cubage;
          end;
        until LocalWhseEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateITWhseEntries@7();
    VAR
      LocalWhseEntry@1000 : Record "Warehouse Entry";
      LocalWhseEntry2@1001 : Record "Warehouse Entry";
      ItemTrackingMgt@1003 : Codeunit "Item Tracking Management";
      QtyonBin@1002 : Decimal;
      SNRequired@1004 : Boolean;
      LNRequired@1005 : Boolean;
    BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup(WhseEntry2."Item No.",SNRequired,LNRequired,false);

      LocalWhseEntry.COPY(WhseEntry2);
      with LocalWhseEntry do begin
        if RetainSerialNo or RetainLotNo then begin
          if SNRequired or LNRequired then begin
            SETFILTER("Warranty Date",'<>%1',0D);
            SETFILTER("Expiration Date",'<>%1',0D);
            if not FIND('-') then begin
              SETRANGE("Warranty Date");
              SETRANGE("Expiration Date");
            end;
          end;
        end else begin
          SETRANGE("Warranty Date",WhseEntry2."Warranty Date");
          SETRANGE("Expiration Date",WhseEntry2."Expiration Date");
        end;

        if not RetainSerialNo then begin
          if SNRequired then
            SETFILTER("Serial No.",'<>''''');
        end else
          SETRANGE("Serial No.",WhseEntry2."Serial No.");
        if not RetainLotNo then begin
          if LNRequired then
            SETFILTER("Lot No.",'<>''''');
        end else
          SETRANGE("Lot No.",WhseEntry2."Lot No.");
        if FIND('-') then
          repeat
            QtyonBin := 0;
            LocalWhseEntry2.COPY(LocalWhseEntry);

            if not RetainSerialNo and SNRequired then
              LocalWhseEntry2.SETRANGE("Serial No.","Serial No.");

            if not RetainLotNo and LNRequired then
              LocalWhseEntry2.SETRANGE("Lot No.","Lot No.");

            if (not RetainSerialNo and SNRequired) or
               (not RetainLotNo and LNRequired)
            then begin
              LocalWhseEntry2.SETRANGE("Warranty Date","Warranty Date");
              LocalWhseEntry2.SETRANGE("Expiration Date","Expiration Date");
            end;

            if LocalWhseEntry2.FIND('-') then
              repeat
                QtyonBin := QtyonBin + LocalWhseEntry2."Qty. (Base)";
              until LocalWhseEntry2.NEXT = 0;

            if QtyonBin <= 0 then begin
              if LocalWhseEntry2.FIND('-') then
                repeat
                  if not RetainSerialNo and SNRequired then
                    LocalWhseEntry2."Serial No." := '';
                  if not RetainLotNo and LNRequired then
                    LocalWhseEntry2."Lot No." := '';
                  if (not RetainSerialNo and SNRequired) or
                     (not RetainLotNo and LNRequired)
                  then begin
                    LocalWhseEntry2."Warranty Date" := 0D;
                    LocalWhseEntry2."Expiration Date" := 0D;
                  end;
                  LocalWhseEntry2.MODIFY;
                until LocalWhseEntry2.NEXT = 0;

              if (not RetainSerialNo and SNRequired) or
                 (not RetainLotNo and LNRequired)
              then begin
                WhseEntry2."Warranty Date" := 0D;
                WhseEntry2."Expiration Date" := 0D;
              end;
              if not RetainSerialNo then
                WhseEntry2."Serial No." := '';
              if not RetainLotNo then
                WhseEntry2."Lot No." := '';
            end;
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE InsertNewEntry@9(VAR WhseEntry@1000 : Record "Warehouse Entry";Qty@1001 : Decimal;QtyBase@1002 : Decimal;Cubage@1004 : Decimal;Weight@1003 : Decimal;EntryType@1005 : Option);
    BEGIN
      LastEntryNo := LastEntryNo + 1;
      WhseEntry."Entry No." := LastEntryNo;
      WhseEntry.Quantity := Qty;
      WhseEntry."Qty. (Base)" := QtyBase;
      WhseEntry.Cubage := Cubage;
      WhseEntry.Weight := Weight;
      WhseEntry."Entry Type" := EntryType;
      WhseEntry.INSERT;
    END;

    [External]
    PROCEDURE InitializeReport@11(EntrdDateComprReg2@1000 : Record "Date Compr. Register";SerialNo@1001 : Boolean;LotNo@1002 : Boolean);
    BEGIN
      EntrdDateComprReg.COPY(EntrdDateComprReg2);
      with WhseEntry2 do begin
        InsertField(FIELDNO("Serial No."),FIELDCAPTION("Serial No."));
        InsertField(FIELDNO("Lot No."),FIELDCAPTION("Lot No."));
      end;
      Retain[1] := SerialNo;
      Retain[2] := LotNo;
    END;

    [External]
    PROCEDURE SetHideDialog@10(NewHideDialog@1000 : Boolean);
    BEGIN
      HideDialog := NewHideDialog;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

