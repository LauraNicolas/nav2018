OBJECT Codeunit 249 VAT Registration Log Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "VAT Registration Log"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ValidPathTxt@1002 : TextConst '@@@={Locked};ENU=descendant::vat:valid';
      NamePathTxt@1001 : TextConst '@@@={Locked};ENU=descendant::vat:traderName';
      AddressPathTxt@1000 : TextConst '@@@={Locked};ENU=descendant::vat:traderAddress';
      RequestIdPathTxt@1003 : TextConst '@@@={Locked};ENU=descendant::vat:requestIdentifier';
      PostcodePathTxt@1004 : TextConst '@@@={Locked};ENU=descendant::vat:traderPostcode';
      StreetPathTxt@1005 : TextConst '@@@={Locked};ENU=descendant::vat:traderStreet';
      CityPathTxt@1006 : TextConst '@@@={Locked};ENU=descendant::vat:traderCity';
      DataTypeManagement@1008 : Codeunit "Data Type Management";
      ValidVATNoQst@1011 : TextConst 'ENU=The VAT registration number is valid. Do you want us to update the name and address?';
      ValidVATNoNoAddressQst@1013 : TextConst 'ENU=The VAT registration number is valid. Do you want us to update the name?';
      InvalidVatRegNoMsg@1010 : TextConst 'ENU=We didn''t find a match for this number. Verify that you entered the correct number.';
      NotVerifiedVATRegMsg@1009 : TextConst 'ENU=We couldn''t verify the VAT registration number. Try again later.';
      VATSrvDisclaimerUrlTok@1007 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=841741"';
      DescriptionLbl@1012 : TextConst 'ENU=EU VAT Reg. No. Validation Service Setup';

    [External]
    PROCEDURE LogCustomer@1(Customer@1000 : Record Customer);
    VAR
      VATRegistrationLog@1001 : Record "VAT Registration Log";
      CountryCode@1002 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Customer."Country/Region Code");
      if not IsEUCountry(CountryCode) then
        exit;

      InsertVATRegistrationLog(
        Customer."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Customer,Customer."No.");
    END;

    [External]
    PROCEDURE LogVendor@2(Vendor@1002 : Record Vendor);
    VAR
      VATRegistrationLog@1001 : Record "VAT Registration Log";
      CountryCode@1000 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Vendor."Country/Region Code");
      if not IsEUCountry(CountryCode) then
        exit;

      InsertVATRegistrationLog(
        Vendor."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Vendor,Vendor."No.");
    END;

    [External]
    PROCEDURE LogContact@8(Contact@1000 : Record Contact);
    VAR
      VATRegistrationLog@1001 : Record "VAT Registration Log";
      CountryCode@1002 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Contact."Country/Region Code");
      if not IsEUCountry(CountryCode) then
        exit;

      InsertVATRegistrationLog(
        Contact."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Contact,Contact."No.");
    END;

    [Internal]
    PROCEDURE LogVerification@3(VAR VATRegistrationLog@1000 : Record "VAT Registration Log";XMLDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Namespace@1003 : Text);
    VAR
      XMLDOMMgt@1002 : Codeunit "XML DOM Management";
      FoundXmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      if not XMLDOMMgt.FindNodeWithNamespace(XMLDoc.DocumentElement,ValidPathTxt,'vat',Namespace,FoundXmlNode) then
        exit;

      case LOWERCASE(FoundXmlNode.InnerText) of
        'true':
          begin
            VATRegistrationLog."Entry No." := 0;
            VATRegistrationLog.Status := VATRegistrationLog.Status::Valid;
            VATRegistrationLog."Verified Date" := CURRENTDATETIME;
            VATRegistrationLog."User ID" := USERID;

            VATRegistrationLog."Verified Name" := COPYSTR(ExtractValue(NamePathTxt,XMLDoc,Namespace),1,
                MAXSTRLEN(VATRegistrationLog."Verified Name"));
            VATRegistrationLog."Verified Address" := COPYSTR(ExtractValue(AddressPathTxt,XMLDoc,Namespace),1,
                MAXSTRLEN(VATRegistrationLog."Verified Address"));
            VATRegistrationLog."Request Identifier" := COPYSTR(ExtractValue(RequestIdPathTxt,XMLDoc,Namespace),1,
                MAXSTRLEN(VATRegistrationLog."Request Identifier"));
            VATRegistrationLog."Verified Postcode" := COPYSTR(ExtractValue(PostcodePathTxt,XMLDoc,Namespace),1,
                MAXSTRLEN(VATRegistrationLog."Verified Postcode"));
            VATRegistrationLog."Verified Street" := COPYSTR(ExtractValue(StreetPathTxt,XMLDoc,Namespace),1,
                MAXSTRLEN(VATRegistrationLog."Verified Street"));
            VATRegistrationLog."Verified City" := COPYSTR(ExtractValue(CityPathTxt,XMLDoc,Namespace),1,
                MAXSTRLEN(VATRegistrationLog."Verified City"));

            VATRegistrationLog.INSERT(true);
          end;
        'false':
          begin
            VATRegistrationLog."Entry No." := 0;
            VATRegistrationLog."Verified Date" := CURRENTDATETIME;
            VATRegistrationLog.Status := VATRegistrationLog.Status::Invalid;
            VATRegistrationLog."User ID" := USERID;
            VATRegistrationLog."Verified Name" := '';
            VATRegistrationLog."Verified Address" := '';
            VATRegistrationLog."Request Identifier" := '';
            VATRegistrationLog."Verified Postcode" := '';
            VATRegistrationLog."Verified Street" := '';
            VATRegistrationLog."Verified City" := '';
            VATRegistrationLog.INSERT(true);
          end;
      end;
    END;

    LOCAL PROCEDURE LogUnloggedVATRegistrationNumbers@10();
    VAR
      Customer@1000 : Record Customer;
      Vendor@1001 : Record Vendor;
      Contact@1002 : Record Contact;
      VATRegistrationLog@1003 : Record "VAT Registration Log";
    BEGIN
      Customer.SETFILTER("VAT Registration No.",'<>%1','');
      if Customer.FINDSET then
        repeat
          VATRegistrationLog.SETRANGE("VAT Registration No.",Customer."VAT Registration No.");
          if VATRegistrationLog.ISEMPTY then
            LogCustomer(Customer);
        until Customer.NEXT = 0;

      Vendor.SETFILTER("VAT Registration No.",'<>%1','');
      if Vendor.FINDSET then
        repeat
          VATRegistrationLog.SETRANGE("VAT Registration No.",Vendor."VAT Registration No.");
          if VATRegistrationLog.ISEMPTY then
            LogVendor(Vendor);
        until Vendor.NEXT = 0;

      Contact.SETFILTER("VAT Registration No.",'<>%1','');
      if Contact.FINDSET then
        repeat
          VATRegistrationLog.SETRANGE("VAT Registration No.",Contact."VAT Registration No.");
          if VATRegistrationLog.ISEMPTY then
            LogContact(Contact);
        until Contact.NEXT = 0;

      COMMIT;
    END;

    LOCAL PROCEDURE InsertVATRegistrationLog@16(VATRegNo@1002 : Text[20];CountryCode@1000 : Code[10];AccountType@1001 : Option;AccountNo@1003 : Code[20]);
    VAR
      VATRegistrationLog@1004 : Record "VAT Registration Log";
    BEGIN
      with VATRegistrationLog do begin
        INIT;
        "VAT Registration No." := VATRegNo;
        "Country/Region Code" := CountryCode;
        "Account Type" := AccountType;
        "Account No." := AccountNo;
        "User ID" := USERID;
        INSERT(true);
      end;
    END;

    [External]
    PROCEDURE DeleteCustomerLog@4(Customer@1000 : Record Customer);
    VAR
      VATRegistrationLog@1001 : Record "VAT Registration Log";
    BEGIN
      with VATRegistrationLog do begin
        SETRANGE("Account Type","Account Type"::Customer);
        SETRANGE("Account No.",Customer."No.");
        DELETEALL;
      end;
    END;

    [External]
    PROCEDURE DeleteVendorLog@5(Vendor@1000 : Record Vendor);
    VAR
      VATRegistrationLog@1001 : Record "VAT Registration Log";
    BEGIN
      with VATRegistrationLog do begin
        SETRANGE("Account Type","Account Type"::Vendor);
        SETRANGE("Account No.",Vendor."No.");
        DELETEALL;
      end;
    END;

    [External]
    PROCEDURE DeleteContactLog@9(Contact@1000 : Record Contact);
    VAR
      VATRegistrationLog@1001 : Record "VAT Registration Log";
    BEGIN
      with VATRegistrationLog do begin
        SETRANGE("Account Type","Account Type"::Contact);
        SETRANGE("Account No.",Contact."No.");
        DELETEALL;
      end;
    END;

    [External]
    PROCEDURE AssistEditCustomerVATReg@7(Customer@1000 : Record Customer);
    VAR
      VATRegistrationLog@1001 : Record "VAT Registration Log";
    BEGIN
      with VATRegistrationLog do begin
        if ISEMPTY then
          LogUnloggedVATRegistrationNumbers;
        SETRANGE("Account Type","Account Type"::Customer);
        SETRANGE("Account No.",Customer."No.");
        PAGE.RUNMODAL(PAGE::"VAT Registration Log",VATRegistrationLog);
      end;
    END;

    [External]
    PROCEDURE AssistEditVendorVATReg@6(Vendor@1001 : Record Vendor);
    VAR
      VATRegistrationLog@1000 : Record "VAT Registration Log";
    BEGIN
      with VATRegistrationLog do begin
        if ISEMPTY then
          LogUnloggedVATRegistrationNumbers;
        SETRANGE("Account Type","Account Type"::Vendor);
        SETRANGE("Account No.",Vendor."No.");
        PAGE.RUNMODAL(PAGE::"VAT Registration Log",VATRegistrationLog);
      end;
    END;

    [External]
    PROCEDURE AssistEditContactVATReg@11(Contact@1001 : Record Contact);
    VAR
      VATRegistrationLog@1000 : Record "VAT Registration Log";
    BEGIN
      with VATRegistrationLog do begin
        if ISEMPTY then
          LogUnloggedVATRegistrationNumbers;
        SETRANGE("Account Type","Account Type"::Contact);
        SETRANGE("Account No.",Contact."No.");
        PAGE.RUNMODAL(PAGE::"VAT Registration Log",VATRegistrationLog);
      end;
    END;

    LOCAL PROCEDURE IsEUCountry@12(CountryCode@1000 : Code[10]) : Boolean;
    VAR
      CountryRegion@1001 : Record "Country/Region";
    BEGIN
      if CountryCode <> '' then
        if CountryRegion.GET(CountryCode) then
          exit(CountryRegion."EU Country/Region Code" <> '');

      exit(false);
    END;

    LOCAL PROCEDURE GetCountryCode@13(CountryCode@1000 : Code[10]) : Code[10];
    VAR
      CompanyInformation@1001 : Record "Company Information";
    BEGIN
      if CountryCode <> '' then
        exit(CountryCode);

      CompanyInformation.GET;
      exit(CompanyInformation."Country/Region Code");
    END;

    LOCAL PROCEDURE ExtractValue@14(Xpath@1000 : Text;XMLDoc@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Namespace@1004 : Text) : Text;
    VAR
      XMLDOMMgt@1002 : Codeunit "XML DOM Management";
      FoundXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      if not XMLDOMMgt.FindNodeWithNamespace(XMLDoc.DocumentElement,Xpath,'vat',Namespace,FoundXmlNode) then
        exit('');
      exit(FoundXmlNode.InnerText);
    END;

    PROCEDURE CheckVIESForVATNo@550(VAR RecordRef@1004 : RecordRef;VAR VATRegistrationLog@1040 : Record "VAT Registration Log";RecordVariant@1001 : Variant;EntryNo@1010 : Code[20];CountryCode@1013 : Code[10];AccountType@1000 : Option);
    VAR
      Customer@1002 : Record Customer;
      VATRegNoSrvConfig@1007 : Record "VAT Reg. No. Srv Config";
      CountryRegion@1003 : Record "Country/Region";
      VatRegNoFieldRef@1009 : FieldRef;
      VATRegNo@1012 : Text[20];
    BEGIN
      RecordRef.GETTABLE(RecordVariant);
      if not CountryRegion.IsEUCountry(CountryCode) then
        exit; // VAT Reg. check Srv. is only available for EU countries.

      if VATRegNoSrvConfig.VATRegNoSrvIsEnabled then begin
        DataTypeManagement.GetRecordRef(RecordVariant,RecordRef);
        if not DataTypeManagement.FindFieldByName(RecordRef,VatRegNoFieldRef,Customer.FIELDNAME("VAT Registration No.")) then
          exit;
        VATRegNo := VatRegNoFieldRef.VALUE;

        VATRegistrationLog.InitVATRegLog(VATRegistrationLog,CountryCode,AccountType,EntryNo,VATRegNo);
        CODEUNIT.RUN(CODEUNIT::"VAT Lookup Ext. Data Hndl",VATRegistrationLog);
      end;
    END;

    PROCEDURE UpdateRecordFromVATRegLog@370(VAR RecordRef@1004 : RecordRef;RecordVariant@1001 : Variant;VATRegistrationLog@1040 : Record "VAT Registration Log");
    VAR
      ConfirmQst@1000 : Text;
    BEGIN
      RecordRef.GETTABLE(RecordVariant);
      case VATRegistrationLog.Status of
        VATRegistrationLog.Status::Valid:
          begin
            if HasAddress(VATRegistrationLog) then
              ConfirmQst := ValidVATNoQst
            else
              ConfirmQst := ValidVATNoNoAddressQst;

            if CONFIRM(ConfirmQst) then
              PopulateFieldsFromVATRegLog(RecordRef,RecordVariant,VATRegistrationLog);
          end;
        VATRegistrationLog.Status::Invalid:
          MESSAGE(InvalidVatRegNoMsg);
        else
          MESSAGE(NotVerifiedVATRegMsg);
      end;
    END;

    LOCAL PROCEDURE PopulateFieldsFromVATRegLog@26(VAR RecordRef@1004 : RecordRef;RecordVariant@1001 : Variant;VATRegistrationLog@1000 : Record "VAT Registration Log");
    VAR
      Customer@1002 : Record Customer;
      FieldRef@1003 : FieldRef;
    BEGIN
      DataTypeManagement.GetRecordRef(RecordVariant,RecordRef);

      if DataTypeManagement.FindFieldByName(RecordRef,FieldRef,Customer.FIELDNAME(Name)) then
        FieldRef.VALUE(COPYSTR(VATRegistrationLog."Verified Name",1,FieldRef.LENGTH));

      if VATRegistrationLog."Verified Postcode" <> '' then
        if DataTypeManagement.FindFieldByName(RecordRef,FieldRef,Customer.FIELDNAME("Post Code")) then
          FieldRef.VALUE(COPYSTR(VATRegistrationLog."Verified Postcode",1,FieldRef.LENGTH));

      if VATRegistrationLog."Verified Street" <> '' then
        if DataTypeManagement.FindFieldByName(RecordRef,FieldRef,Customer.FIELDNAME(Address)) then
          FieldRef.VALUE(COPYSTR(VATRegistrationLog."Verified Street",1,FieldRef.LENGTH));

      if VATRegistrationLog."Verified City" <> '' then
        if DataTypeManagement.FindFieldByName(RecordRef,FieldRef,Customer.FIELDNAME(City)) then
          FieldRef.VALUE(COPYSTR(VATRegistrationLog."Verified City",1,FieldRef.LENGTH));
    END;

    PROCEDURE InitServiceSetup@22();
    VAR
      VATRegNoSrvConfig@1000 : Record "VAT Reg. No. Srv Config";
      VATLookupExtDataHndl@1001 : Codeunit "VAT Lookup Ext. Data Hndl";
    BEGIN
      if not VATRegNoSrvConfig.FINDFIRST then begin
        VATRegNoSrvConfig.INIT;
        VATRegNoSrvConfig.INSERT;
      end;

      VATRegNoSrvConfig."Service Endpoint" := VATLookupExtDataHndl.GetVATRegNrValidationWebServiceURL;
      VATRegNoSrvConfig.Enabled := false;
      VATRegNoSrvConfig.MODIFY;
    END;

    PROCEDURE SetupService@18();
    VAR
      VATRegNoSrvConfig@1000 : Record "VAT Reg. No. Srv Config";
    BEGIN
      if VATRegNoSrvConfig.FINDFIRST then
        exit;
      InitServiceSetup;
    END;

    PROCEDURE EnableService@15();
    VAR
      VATRegNoSrvConfig@1000 : Record "VAT Reg. No. Srv Config";
    BEGIN
      if not VATRegNoSrvConfig.FINDFIRST then begin
        InitServiceSetup;
        VATRegNoSrvConfig.FINDFIRST;
      end;

      VATRegNoSrvConfig.Enabled := true;
      VATRegNoSrvConfig.MODIFY;
    END;

    PROCEDURE ValidateVATRegNoWithVIES@560(VAR RecordRef@1004 : RecordRef;RecordVariant@1001 : Variant;EntryNo@1010 : Code[20];AccountType@1011 : Option;CountryCode@1013 : Code[10]);
    VAR
      VATRegistrationLog@1008 : Record "VAT Registration Log";
    BEGIN
      CheckVIESForVATNo(RecordRef,VATRegistrationLog,RecordVariant,EntryNo,CountryCode,AccountType);

      if VATRegistrationLog.FIND then // Only update if the log was created
        UpdateRecordFromVATRegLog(RecordRef,RecordVariant,VATRegistrationLog);
    END;

    PROCEDURE GetServiceDisclaimerUR@17() : Text;
    BEGIN
      exit(VATSrvDisclaimerUrlTok);
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleViesRegisterServiceConnection@20(VAR ServiceConnection@1003 : Record "Service Connection");
    VAR
      VATRegNoSrvConfig@1001 : Record "VAT Reg. No. Srv Config";
      RecRef@1002 : RecordRef;
    BEGIN
      SetupService;
      VATRegNoSrvConfig.FINDFIRST;

      RecRef.GETTABLE(VATRegNoSrvConfig);

      if VATRegNoSrvConfig.Enabled then
        ServiceConnection.Status := ServiceConnection.Status::Enabled
      else
        ServiceConnection.Status := ServiceConnection.Status::Disabled;
      with VATRegNoSrvConfig do
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,DescriptionLbl,"Service Endpoint",PAGE::"VAT Registration Config");
    END;

    LOCAL PROCEDURE HasAddress@21(VATRegistrationLog@1000 : Record "VAT Registration Log") : Boolean;
    BEGIN
      if (VATRegistrationLog."Verified Postcode" = '') and
         (VATRegistrationLog."Verified Street" = '') and
         (VATRegistrationLog."Verified City" = '')
      then
        exit(false);

      exit(true);
    END;

    BEGIN
    END.
  }
}

