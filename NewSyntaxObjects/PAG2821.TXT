OBJECT Page 2821 Native - PDFs
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=[@@@={Locked};
               ENU=nativeInvoicingPDFs];
    SourceTable="Attachment Entity Buffer";
    PageType=List;
    SourceTableTemporary=true;
    OnFindRecord=VAR
                   DocumentId@1005 : GUID;
                   DocumentIdFilter@1001 : Text;
                   FilterView@1000 : Text;
                 BEGIN
                   if not PdfGenerated then begin
                     FilterView := GETVIEW;
                     DocumentIdFilter := GETFILTER("Document Id");
                     if DocumentIdFilter = '' then
                       DocumentIdFilter := GETFILTER(Id);
                     SETVIEW(FilterView);
                     DocumentId := GetDocumentId(DocumentIdFilter);
                     if ISNULLGUID(DocumentId) then
                       exit(false);
                     GeneratePdf(DocumentId);
                   end;
                   exit(true);
                 END;

    ODataKeyFields="Document Id";
  }
  CONTROLS
  {
    { 18  ;0   ;Container ;
                Name=Container18;
                ContainerType=ContentArea }

    { 17  ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 1   ;2   ;Field     ;
                Name=documentId;
                CaptionML=[@@@={Locked};
                           ENU=documentId];
                ApplicationArea=#All;
                SourceExpr="Document Id";
                ImplicitType=GUID }

    { 7   ;2   ;Field     ;
                Name=fileName;
                CaptionML=[@@@={Locked};
                           ENU=fileName];
                ApplicationArea=#All;
                SourceExpr="File Name";
                ImplicitType=Text250 }

    { 4   ;2   ;Field     ;
                Name=content;
                CaptionML=[@@@={Locked};
                           ENU=content];
                ApplicationArea=#All;
                SourceExpr=Content;
                ImplicitType=BLOB }

  }
  CODE
  {
    VAR
      CannotFindDocumentErr@1006 : TextConst '@@@={Locked};ENU=The document %1 cannot be found.';
      CannotOpenFileErr@1005 : TextConst '@@@={Locked};ENU=Opening the file failed because of the following error: \%1.';
      InvoiceFileTxt@1000 : TextConst '@@@={Locked};ENU=Sales invoice %1 from %2';
      DraftInvoiceFileTxt@1001 : TextConst '@@@={Locked};ENU=Draft sales invoice %1 from %2';
      QuoteFileTxt@1007 : TextConst '@@@={Locked};ENU=Sales quote %1 from %2';
      DocumentIDNotSpecifiedForAttachmentsErr@1010 : TextConst '@@@={Locked};ENU=You must specify a document ID to get the PDF.';
      DocumentDoesNotExistErr@1009 : TextConst '@@@={Locked};ENU=No document with the specified ID exists.';
      PdfGenerated@1002 : Boolean;

    LOCAL PROCEDURE GetDocumentId@5(DocumentIdFilter@1001 : Text) : GUID;
    VAR
      SalesHeader@1003 : Record "Sales Header";
      SalesInvoiceHeader@1004 : Record "Sales Invoice Header";
      DataTypeManagement@1006 : Codeunit "Data Type Management";
      DocumentRecordRef@1000 : RecordRef;
      DocumentIdFieldRef@1005 : FieldRef;
      DocumentId@1002 : GUID;
    BEGIN
      if DocumentIdFilter = '' then
        ERROR(DocumentIDNotSpecifiedForAttachmentsErr);

      SalesHeader.SETFILTER(Id,DocumentIdFilter);
      if SalesHeader.FINDFIRST then
        DocumentRecordRef.GETTABLE(SalesHeader)
      else begin
        SalesInvoiceHeader.SETFILTER(Id,DocumentIdFilter);
        if SalesInvoiceHeader.FINDFIRST then
          DocumentRecordRef.GETTABLE(SalesInvoiceHeader)
        else
          ERROR(DocumentDoesNotExistErr);
      end;

      DataTypeManagement.FindFieldByName(DocumentRecordRef,DocumentIdFieldRef,SalesHeader.FIELDNAME(Id));
      EVALUATE(DocumentId,FORMAT(DocumentIdFieldRef.VALUE));

      exit(DocumentId);
    END;

    LOCAL PROCEDURE GeneratePdf@21(DocumentId@1009 : GUID);
    VAR
      CompanyInformation@1004 : Record "Company Information";
      SalesInvoiceHeader@1002 : Record "Sales Invoice Header";
      SalesHeader@1006 : Record "Sales Header";
      ReportSelections@1005 : Record "Report Selections";
      NativeReports@1011 : Codeunit "Native - Reports";
      File@1007 : File;
      InStream@1008 : InStream;
      OutStream@1010 : OutStream;
      Path@1001 : Text[250];
      Name@1000 : Text[250];
    BEGIN
      CompanyInformation.GET;
      SalesHeader.SETRANGE(Id,DocumentId);
      if SalesHeader.FINDFIRST then
        case SalesHeader."Document Type" of
          SalesHeader."Document Type"::Invoice:
            begin
              ReportSelections.GetPdfReport(
                Path,NativeReports.DraftSalesInvoiceReportId,SalesHeader,SalesHeader."Sell-to Customer No.");
              Name := STRSUBSTNO(DraftInvoiceFileTxt,SalesHeader."No.",CompanyInformation.Name);
            end;
          SalesHeader."Document Type"::Quote:
            begin
              ReportSelections.GetPdfReport(
                Path,NativeReports.SalesQuoteReportId,SalesHeader,SalesHeader."Sell-to Customer No.");
              Name := STRSUBSTNO(QuoteFileTxt,SalesHeader."No.",CompanyInformation.Name);
            end;
          else
            ERROR(CannotFindDocumentErr,DocumentId);
        end
      else begin
        SalesInvoiceHeader.SETRANGE(Id,DocumentId);
        if SalesInvoiceHeader.FINDFIRST then begin
          ReportSelections.GetPdfReport(
            Path,NativeReports.PostedSalesInvoiceReportId,SalesInvoiceHeader,SalesInvoiceHeader."Sell-to Customer No.");
          Name := STRSUBSTNO(InvoiceFileTxt,SalesInvoiceHeader."No.",CompanyInformation.Name);
        end else
          ERROR(CannotFindDocumentErr,DocumentId);
      end;

      if not File.OPEN(Path) then
        ERROR(CannotOpenFileErr,GETLASTERRORTEXT);

      INIT;
      Id := DocumentId;
      "Document Id" := DocumentId;
      "File Name" := Name;
      Type := Type::PDF;
      Content.CREATEOUTSTREAM(OutStream);
      File.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);
      File.CLOSE;
      if ERASE(Path) then;
      INSERT(true);

      PdfGenerated := true;
    END;

    BEGIN
    END.
  }
}

