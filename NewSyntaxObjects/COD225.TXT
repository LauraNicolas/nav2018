OBJECT Codeunit 225 Gen. Jnl.-Apply
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Gen. Journal Line";
    OnRun=BEGIN
            GenJnlLine.COPY(Rec);

            with GenJnlLine do begin
              GetCurrency;
              if "Bal. Account Type" in
                 ["Bal. Account Type"::Customer,"Bal. Account Type"::Vendor,"Bal. Account Type"::Employee]
              then begin
                AccType := "Bal. Account Type";
                AccNo := "Bal. Account No.";
              end else begin
                AccType := "Account Type";
                AccNo := "Account No.";
              end;
              case AccType of
                AccType::Customer:
                  begin
                    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                    CustLedgEntry.SETRANGE("Customer No.",AccNo);
                    CustLedgEntry.SETRANGE(Open,true);
                    if "Applies-to ID" = '' then
                      "Applies-to ID" := "Document No.";
                    if "Applies-to ID" = '' then
                      ERROR(
                        Text000,
                        FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
                    ApplyCustEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
                    ApplyCustEntries.SETRECORD(CustLedgEntry);
                    ApplyCustEntries.SETTABLEVIEW(CustLedgEntry);
                    ApplyCustEntries.LOOKUPMODE(true);
                    OK := ApplyCustEntries.RUNMODAL = ACTION::LookupOK;
                    CLEAR(ApplyCustEntries);
                    if not OK then
                      exit;
                    CustLedgEntry.RESET;
                    CustLedgEntry.SETCURRENTKEY("Customer No.",Open,Positive);
                    CustLedgEntry.SETRANGE("Customer No.",AccNo);
                    CustLedgEntry.SETRANGE(Open,true);
                    CustLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                    if CustLedgEntry.FIND('-') then begin
                      CurrencyCode2 := CustLedgEntry."Currency Code";
                      if Amount = 0 then begin
                        repeat
                          PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,CustLedgEntry."Document No.");
                          CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,true);
                          CustLedgEntry.CALCFIELDS("Remaining Amount");
                          CustLedgEntry."Remaining Amount" :=
                            CurrExchRate.ExchangeAmount(
                              CustLedgEntry."Remaining Amount",
                              CustLedgEntry."Currency Code","Currency Code","Posting Date");
                          CustLedgEntry."Remaining Amount" :=
                            ROUND(CustLedgEntry."Remaining Amount",Currency."Amount Rounding Precision");
                          CustLedgEntry."Remaining Pmt. Disc. Possible" :=
                            CurrExchRate.ExchangeAmount(
                              CustLedgEntry."Remaining Pmt. Disc. Possible",
                              CustLedgEntry."Currency Code","Currency Code","Posting Date");
                          CustLedgEntry."Remaining Pmt. Disc. Possible" :=
                            ROUND(CustLedgEntry."Remaining Pmt. Disc. Possible",Currency."Amount Rounding Precision");
                          CustLedgEntry."Amount to Apply" :=
                            CurrExchRate.ExchangeAmount(
                              CustLedgEntry."Amount to Apply",
                              CustLedgEntry."Currency Code","Currency Code","Posting Date");
                          CustLedgEntry."Amount to Apply" :=
                            ROUND(CustLedgEntry."Amount to Apply",Currency."Amount Rounding Precision");

                          if PaymentToleranceMgt.CheckCalcPmtDiscGenJnlCust(Rec,CustLedgEntry,0,false) and
                             (ABS(CustLedgEntry."Amount to Apply") >=
                              ABS(CustLedgEntry."Remaining Amount" - CustLedgEntry."Remaining Pmt. Disc. Possible"))
                          then
                            Amount := Amount - (CustLedgEntry."Amount to Apply" - CustLedgEntry."Remaining Pmt. Disc. Possible")
                          else
                            Amount := Amount - CustLedgEntry."Amount to Apply";
                        until CustLedgEntry.NEXT = 0;
                        if ("Bal. Account Type" = "Bal. Account Type"::Customer) or
                           ("Bal. Account Type" = "Bal. Account Type"::Vendor)
                        then
                          Amount := -Amount;
                        VALIDATE(Amount);
                      end else
                        repeat
                          CheckAgainstApplnCurrency(CurrencyCode2,CustLedgEntry."Currency Code",AccType::Customer,true);
                        until CustLedgEntry.NEXT = 0;
                      if "Currency Code" <> CurrencyCode2 then
                        if Amount = 0 then begin
                          if not
                             CONFIRM(
                               Text001 +
                               Text002,true,
                               FIELDCAPTION("Currency Code"),TABLECAPTION,"Currency Code",
                               CustLedgEntry."Currency Code")
                          then
                            ERROR(Text003);
                          "Currency Code" := CustLedgEntry."Currency Code"
                        end else
                          CheckAgainstApplnCurrency("Currency Code",CustLedgEntry."Currency Code",AccType::Customer,true);
                      "Applies-to Doc. Type" := 0;
                      "Applies-to Doc. No." := '';
                    end else
                      "Applies-to ID" := '';
                    MODIFY;
                    if  Rec.Amount <> 0 then
                      if not PaymentToleranceMgt.PmtTolGenJnl(GenJnlLine) then
                        exit;
                  end;
                AccType::Vendor:
                  begin
                    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                    VendLedgEntry.SETRANGE("Vendor No.",AccNo);
                    VendLedgEntry.SETRANGE(Open,true);
                    if "Applies-to ID" = '' then
                      "Applies-to ID" := "Document No.";
                    if "Applies-to ID" = '' then
                      ERROR(
                        Text000,
                        FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
                    ApplyVendEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
                    ApplyVendEntries.SETRECORD(VendLedgEntry);
                    ApplyVendEntries.SETTABLEVIEW(VendLedgEntry);
                    ApplyVendEntries.LOOKUPMODE(true);
                    OK := ApplyVendEntries.RUNMODAL = ACTION::LookupOK;
                    CLEAR(ApplyVendEntries);
                    if not OK then
                      exit;
                    VendLedgEntry.RESET;
                    VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive);
                    VendLedgEntry.SETRANGE("Vendor No.",AccNo);
                    VendLedgEntry.SETRANGE(Open,true);
                    VendLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
                    if VendLedgEntry.FIND('-') then begin
                      CurrencyCode2 := VendLedgEntry."Currency Code";
                      if Amount = 0 then begin
                        repeat
                          PaymentToleranceMgt.DelPmtTolApllnDocNo(GenJnlLine,VendLedgEntry."Document No.");
                          CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,true);
                          VendLedgEntry.CALCFIELDS("Remaining Amount");
                          VendLedgEntry."Remaining Amount" :=
                            CurrExchRate.ExchangeAmount(
                              VendLedgEntry."Remaining Amount",
                              VendLedgEntry."Currency Code","Currency Code","Posting Date");
                          VendLedgEntry."Remaining Amount" :=
                            ROUND(VendLedgEntry."Remaining Amount",Currency."Amount Rounding Precision");
                          VendLedgEntry."Remaining Pmt. Disc. Possible" :=
                            CurrExchRate.ExchangeAmount(
                              VendLedgEntry."Remaining Pmt. Disc. Possible",
                              VendLedgEntry."Currency Code","Currency Code","Posting Date");
                          VendLedgEntry."Remaining Pmt. Disc. Possible" :=
                            ROUND(VendLedgEntry."Remaining Pmt. Disc. Possible",Currency."Amount Rounding Precision");
                          VendLedgEntry."Amount to Apply" :=
                            CurrExchRate.ExchangeAmount(
                              VendLedgEntry."Amount to Apply",
                              VendLedgEntry."Currency Code","Currency Code","Posting Date");
                          VendLedgEntry."Amount to Apply" :=
                            ROUND(VendLedgEntry."Amount to Apply",Currency."Amount Rounding Precision");

                          if PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(Rec,VendLedgEntry,0,false) and
                             (ABS(VendLedgEntry."Amount to Apply") >=
                              ABS(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible"))
                          then
                            Amount := Amount - (VendLedgEntry."Amount to Apply" - VendLedgEntry."Remaining Pmt. Disc. Possible")
                          else
                            Amount := Amount - VendLedgEntry."Amount to Apply";

                        until VendLedgEntry.NEXT = 0;
                        if ("Bal. Account Type" = "Bal. Account Type"::Customer) or
                           ("Bal. Account Type" = "Bal. Account Type"::Vendor)
                        then
                          Amount := -Amount;
                        VALIDATE(Amount);
                      end else
                        repeat
                          CheckAgainstApplnCurrency(CurrencyCode2,VendLedgEntry."Currency Code",AccType::Vendor,true);
                        until VendLedgEntry.NEXT = 0;
                      if "Currency Code" <> CurrencyCode2 then
                        if Amount = 0 then begin
                          if not
                             CONFIRM(
                               Text001 +
                               Text002,true,
                               FIELDCAPTION("Currency Code"),TABLECAPTION,"Currency Code",
                               VendLedgEntry."Currency Code")
                          then
                            ERROR(Text003);
                          "Currency Code" := VendLedgEntry."Currency Code"
                        end else
                          CheckAgainstApplnCurrency("Currency Code",VendLedgEntry."Currency Code",AccType::Vendor,true);
                      "Applies-to Doc. Type" := 0;
                      "Applies-to Doc. No." := '';
                    end else
                      "Applies-to ID" := '';
                    MODIFY;
                    if  Rec.Amount <> 0 then
                      if not PaymentToleranceMgt.PmtTolGenJnl(GenJnlLine) then
                        exit;
                  end;
                AccType::Employee:
                  ApplyEmployeeLedgerEntry(GenJnlLine);
                else
                  ERROR(
                    Text005,
                    FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"));
              end;
            end;
            Rec := GenJnlLine;
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You must specify %1 or %2.';
      Text001@1001 : TextConst 'ENU=The %1 in the %2 will be changed from %3 to %4.\';
      Text002@1002 : TextConst 'ENU=Do you wish to continue?';
      Text003@1003 : TextConst 'ENU=The update has been interrupted to respect the warning.';
      Text005@1004 : TextConst 'ENU=The %1 or %2 must be Customer or Vendor.';
      Text006@1005 : TextConst 'ENU=All entries in one application must be in the same currency.';
      Text007@1006 : TextConst 'ENU="All entries in one application must be in the same currency or one or more of the EMU currencies. "';
      GenJnlLine@1008 : Record "Gen. Journal Line";
      CustLedgEntry@1009 : Record "Cust. Ledger Entry";
      VendLedgEntry@1010 : Record "Vendor Ledger Entry";
      EmplLedgEntry@1015 : Record "Employee Ledger Entry";
      GLSetup@1011 : Record "General Ledger Setup";
      Currency@1012 : Record Currency;
      CurrExchRate@1020 : Record "Currency Exchange Rate";
      PaymentToleranceMgt@1007 : Codeunit "Payment Tolerance Management";
      ApplyCustEntries@1013 : Page "Apply Customer Entries";
      ApplyVendEntries@1014 : Page "Apply Vendor Entries";
      ApplyEmplEntries@1021 : Page "Apply Employee Entries";
      AccNo@1016 : Code[20];
      CurrencyCode2@1017 : Code[10];
      OK@1018 : Boolean;
      AccType@1019 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset","IC Partner",Employee';

    [External]
    PROCEDURE CheckAgainstApplnCurrency@1(ApplnCurrencyCode@1000 : Code[10];CompareCurrencyCode@1001 : Code[10];AccType@1002 : '"G/L Account",Customer,Vendor,"Bank Account","Fixed Asset"';Message@1003 : Boolean) : Boolean;
    VAR
      Currency@1004 : Record Currency;
      Currency2@1005 : Record Currency;
      SalesSetup@1006 : Record "Sales & Receivables Setup";
      PurchSetup@1007 : Record "Purchases & Payables Setup";
      CurrencyAppln@1009 : 'No,EMU,All';
    BEGIN
      if ApplnCurrencyCode = CompareCurrencyCode then
        exit(true);

      case AccType of
        AccType::Customer:
          begin
            SalesSetup.GET;
            CurrencyAppln := SalesSetup."Appln. between Currencies";
            case CurrencyAppln of
              CurrencyAppln::No:
                begin
                  if ApplnCurrencyCode <> CompareCurrencyCode then
                    if Message then
                      ERROR(Text006)
                    else
                      exit(false);
                end;
              CurrencyAppln::EMU:
                begin
                  GLSetup.GET;
                  if not Currency.GET(ApplnCurrencyCode) then
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  if not Currency2.GET(CompareCurrencyCode) then
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  if not Currency."EMU Currency" or not Currency2."EMU Currency" then
                    if Message then
                      ERROR(Text007)
                    else
                      exit(false);
                end;
            end;
          end;
        AccType::Vendor:
          begin
            PurchSetup.GET;
            CurrencyAppln := PurchSetup."Appln. between Currencies";
            case CurrencyAppln of
              CurrencyAppln::No:
                begin
                  if ApplnCurrencyCode <> CompareCurrencyCode then
                    if Message then
                      ERROR(Text006)
                    else
                      exit(false);
                end;
              CurrencyAppln::EMU:
                begin
                  GLSetup.GET;
                  if not Currency.GET(ApplnCurrencyCode) then
                    Currency."EMU Currency" := GLSetup."EMU Currency";
                  if not Currency2.GET(CompareCurrencyCode) then
                    Currency2."EMU Currency" := GLSetup."EMU Currency";
                  if not Currency."EMU Currency" or not Currency2."EMU Currency" then
                    if Message then
                      ERROR(Text007)
                    else
                      exit(false);
                end;
            end;
          end;
      end;

      exit(true);
    END;

    LOCAL PROCEDURE GetCurrency@2();
    BEGIN
      with GenJnlLine do begin
        if "Currency Code" = '' then
          Currency.InitRoundingPrecision
        else begin
          Currency.GET("Currency Code");
          Currency.TESTFIELD("Amount Rounding Precision");
        end;
      end;
    END;

    LOCAL PROCEDURE ApplyEmployeeLedgerEntry@3(VAR GenJnlLine@1000 : Record "Gen. Journal Line");
    BEGIN
      with GenJnlLine do begin
        EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
        EmplLedgEntry.SETRANGE("Employee No.",AccNo);
        EmplLedgEntry.SETRANGE(Open,true);
        if "Applies-to ID" = '' then
          "Applies-to ID" := "Document No.";
        if "Applies-to ID" = '' then
          ERROR(
            Text000,
            FIELDCAPTION("Document No."),FIELDCAPTION("Applies-to ID"));
        ApplyEmplEntries.SetGenJnlLine(GenJnlLine,FIELDNO("Applies-to ID"));
        ApplyEmplEntries.SETRECORD(EmplLedgEntry);
        ApplyEmplEntries.SETTABLEVIEW(EmplLedgEntry);
        ApplyEmplEntries.LOOKUPMODE(true);
        OK := ApplyEmplEntries.RUNMODAL = ACTION::LookupOK;
        CLEAR(ApplyEmplEntries);
        if not OK then
          exit;
        EmplLedgEntry.RESET;
        EmplLedgEntry.SETCURRENTKEY("Employee No.",Open,Positive);
        EmplLedgEntry.SETRANGE("Employee No.",AccNo);
        EmplLedgEntry.SETRANGE(Open,true);
        EmplLedgEntry.SETRANGE("Applies-to ID","Applies-to ID");
        if EmplLedgEntry.FIND('-') then begin
          if Amount = 0 then begin
            repeat
              Amount := Amount - EmplLedgEntry."Amount to Apply";
            until EmplLedgEntry.NEXT = 0;
            if ("Bal. Account Type" = "Bal. Account Type"::Customer) or
               ("Bal. Account Type" = "Bal. Account Type"::Vendor) or
               ("Bal. Account Type" = "Bal. Account Type"::Employee)
            then
              Amount := -Amount;
            VALIDATE(Amount);
          end;
          "Applies-to Doc. Type" := 0;
          "Applies-to Doc. No." := '';
        end else
          "Applies-to ID" := '';
        MODIFY;
      end;
    END;

    BEGIN
    END.
  }
}

