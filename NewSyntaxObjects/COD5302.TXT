OBJECT Codeunit 5302 Outlook Synch. Type Conv
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=The filter expression ''%1'' is invalid.\Please redefine your criteria.';
      Text002@1000 : TextConst 'ENU=The filter cannot be processed because the expression is too long.\Please redefine your criteria.';
      Text003@1003 : TextConst 'ENU=The synchronization failed because the %1 field in the %2 table is of an unsupported type. Please contact your system administrator.';
      Field@1002 : Record Field;

    LOCAL PROCEDURE GetOptionsQuantity@52(OptionString@1000 : Text) : Integer;
    VAR
      Counter@1001 : Integer;
      CommaPosition@1002 : Integer;
    BEGIN
      if STRPOS(OptionString,',') = 0 then
        exit(0);

      repeat
        CommaPosition := STRPOS(OptionString,',');
        OptionString := DELSTR(OptionString,1,CommaPosition);
        Counter := Counter + 1;
      until CommaPosition = 0;

      exit(Counter - 1);
    END;

    [External]
    PROCEDURE GetSubStrByNo@24(Number@1000 : Integer;CommaString@1001 : Text) SelectedStr : Text;
    VAR
      SubStrQuantity@1002 : Integer;
      Counter@1003 : Integer;
      CommaPosition@1004 : Integer;
    BEGIN
      if Number <= 0 then
        exit;

      SubStrQuantity := GetOptionsQuantity(CommaString);
      if SubStrQuantity + 1 < Number then
        exit;

      repeat
        Counter := Counter + 1;
        CommaPosition := STRPOS(CommaString,',');
        if CommaPosition = 0 then
          SelectedStr := CommaString
        else begin
          SelectedStr := COPYSTR(CommaString,1,CommaPosition - 1);
          CommaString := DELSTR(CommaString,1,CommaPosition);
        end;
      until Counter = Number;
    END;

    [External]
    PROCEDURE EvaluateTextToFieldRef@12(InputText@1001 : Text;VAR FieldRef@1000 : FieldRef;ToValidate@1002 : Boolean) : Boolean;
    VAR
      GUIDVar@1006 : GUID;
      GUIDVar1@1022 : GUID;
      BigIntVar@1005 : BigInteger;
      BigIntVar1@1021 : BigInteger;
      IntVar@1003 : Integer;
      IntVar1@1013 : Integer;
      DecimalVar@1007 : Decimal;
      DecimalVar1@1014 : Decimal;
      BoolVar@1004 : Boolean;
      BoolVar1@1015 : Boolean;
      DateVar@1008 : Date;
      DateVar1@1016 : Date;
      TimeVar@1009 : Time;
      TimeVar1@1017 : Time;
      DateTimeVar@1010 : DateTime;
      DateTimeVar1@1018 : DateTime;
      DurationVar@1011 : Duration;
      DurationVar1@1019 : Duration;
      DateFormulaVar@1012 : DateFormula;
      DateFormulaVar1@1020 : DateFormula;
      TextVar@1023 : Text;
      TextVar1@1024 : Text;
    BEGIN
      if (FORMAT(FieldRef.CLASS) = 'FlowField') or (FORMAT(FieldRef.CLASS) = 'FlowFilter') then
        exit(true);

      case FORMAT(FieldRef.TYPE) of
        'Option':
          begin
            if not EVALUATE(IntVar,InputText) then
              IntVar := TextToOptionValue(InputText,FieldRef.OPTIONCAPTION);
            if IntVar < 0 then
              exit(false);

            if ToValidate then begin
              IntVar1 := FieldRef.VALUE;
              if IntVar1 <> IntVar then
                FieldRef.VALIDATE(IntVar);
            end else
              FieldRef.VALUE := IntVar;
          end;
        'Integer':
          if TextToInteger(InputText,IntVar) then begin
            if ToValidate then begin
              IntVar1 := FieldRef.VALUE;
              if IntVar1 <> IntVar then
                FieldRef.VALIDATE(IntVar);
            end else
              FieldRef.VALUE := IntVar;
          end else
            exit(false);
        'Decimal':
          if TextToDecimal(InputText,DecimalVar) then begin
            if ToValidate then begin
              DecimalVar1 := FieldRef.VALUE;
              if DecimalVar1 <> DecimalVar then
                FieldRef.VALIDATE(DecimalVar);
            end else
              FieldRef.VALUE := DecimalVar;
          end else
            exit(false);
        'Date':
          if TextToDate(InputText,DateVar,true) then begin
            if ToValidate then begin
              DateVar1 := FieldRef.VALUE;
              if DateVar1 <> DateVar then
                FieldRef.VALIDATE(DateVar);
            end else
              FieldRef.VALUE := DateVar;
          end else
            exit(false);
        'Time':
          if TextToTime(InputText,TimeVar,true) then begin
            if ToValidate then begin
              TimeVar1 := FieldRef.VALUE;
              if TimeVar1 <> TimeVar then
                FieldRef.VALIDATE(TimeVar);
            end else
              FieldRef.VALUE := TimeVar;
          end else
            exit(false);
        'DateTime':
          if TextToDateTime(InputText,DateTimeVar) then begin
            if ToValidate then begin
              DateTimeVar1 := FieldRef.VALUE;
              if DateTimeVar1 <> DateTimeVar then
                FieldRef.VALIDATE(DateTimeVar);
            end else
              FieldRef.VALUE := DateTimeVar;
          end else
            exit(false);
        'Boolean':
          if TextToBoolean(InputText,BoolVar) then begin
            if ToValidate then begin
              BoolVar1 := FieldRef.VALUE;
              if BoolVar1 <> BoolVar then
                FieldRef.VALIDATE(BoolVar);
            end else
              FieldRef.VALUE := BoolVar;
          end else
            exit(false);
        'Duration':
          if TextToDuration(InputText,DurationVar) then begin
            if ToValidate then begin
              DurationVar1 := FieldRef.VALUE;
              if DurationVar1 <> DurationVar then
                FieldRef.VALIDATE(DurationVar);
            end else
              FieldRef.VALUE := DurationVar;
          end else
            exit(false);
        'BigInteger':
          if TextToBigInteger(InputText,BigIntVar) then begin
            if ToValidate then begin
              BigIntVar1 := FieldRef.VALUE;
              if BigIntVar1 <> BigIntVar then
                FieldRef.VALIDATE(BigIntVar);
            end else
              FieldRef.VALUE := BigIntVar;
          end else
            exit(false);
        'GUID':
          if TextToGUID(InputText,GUIDVar) then begin
            if ToValidate then begin
              GUIDVar1 := FieldRef.VALUE;
              if GUIDVar1 <> GUIDVar then
                FieldRef.VALIDATE(GUIDVar);
            end else
              FieldRef.VALUE := GUIDVar;
          end else
            exit(false);
        'Code','Text':
          if STRLEN(InputText) > FieldRef.LENGTH then begin
            if ToValidate then begin
              TextVar := FieldRef.VALUE;
              TextVar1 := PADSTR(InputText,FieldRef.LENGTH);
              if TextVar <> TextVar1 then
                FieldRef.VALIDATE(TextVar1);
            end else
              FieldRef.VALUE := PADSTR(InputText,FieldRef.LENGTH);
          end else begin
            if ToValidate then begin
              TextVar := FieldRef.VALUE;
              if TextVar <> InputText then
                FieldRef.VALIDATE(InputText);
            end else
              FieldRef.VALUE := InputText;
          end;
        'DateFormula':
          begin
            if TextToDateFormula(InputText,DateFormulaVar) then begin
              if ToValidate then begin
                DateFormulaVar1 := FieldRef.VALUE;
                if DateFormulaVar1 <> DateFormulaVar then
                  FieldRef.VALIDATE(DateFormulaVar);
              end else
                FieldRef.VALUE := DateFormulaVar;
            end else
              exit(false);
          end;
        else
          exit(false);
      end;

      exit(true);
    END;

    [External]
    PROCEDURE TextToOptionValue@9(InputText@1000 : Text;OptionString@1001 : Text) : Integer;
    VAR
      IntVar@1003 : Integer;
      Counter@1004 : Integer;
    BEGIN
      if InputText = '' then
        InputText := ' ';

      if EVALUATE(IntVar,InputText) then begin
        if IntVar < 0 then
          IntVar := -1;
        if GetOptionsQuantity(OptionString) < IntVar then
          IntVar := -1;
      end else begin
        IntVar := -1;
        for Counter := 1 to GetOptionsQuantity(OptionString) + 1 do begin
          if UPPERCASE(GetSubStrByNo(Counter,OptionString)) = UPPERCASE(InputText) then
            IntVar := Counter - 1;
        end;
      end;

      exit(IntVar);
    END;

    [External]
    PROCEDURE TextToInteger@8(InputText@1000 : Text;VAR IntVar@1001 : Integer) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(IntVar,InputText);
    END;

    [External]
    PROCEDURE TextToBigInteger@22(InputText@1000 : Text;VAR BigIntVar@1001 : BigInteger) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(BigIntVar,InputText);
    END;

    [External]
    PROCEDURE TextToBoolean@18(InputText@1000 : Text;VAR BoolVar@1001 : Boolean) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(BoolVar,InputText);
    END;

    [External]
    PROCEDURE TextToGUID@21(InputText@1000 : Text;VAR GUIDVar@1001 : GUID) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(GUIDVar,InputText);
    END;

    [External]
    PROCEDURE TextToDecimal@10(InputText@1000 : Text;VAR DecVar@1004 : Decimal) IsConverted : Boolean;
    VAR
      PartArray@1003 : ARRAY [2] OF Text;
      IntegeralPart@1001 : Integer;
      FractionalPart@1002 : Integer;
      Sign@1010 : Integer;
    BEGIN
      InputText := CONVERTSTR(InputText,'.',',');
      if STRPOS(InputText,',') = 0 then begin
        IsConverted := TextToInteger(InputText,IntegeralPart);
        if IsConverted then
          DecVar := IntegeralPart;
        exit;
      end;

      PartArray[1] := GetSubStrByNo(1,InputText);
      PartArray[2] := GetSubStrByNo(2,InputText);

      IsConverted := EVALUATE(IntegeralPart,PartArray[1]);
      if not IsConverted then
        exit;

      IsConverted := EVALUATE(FractionalPart,PartArray[2]);
      if not IsConverted then
        exit;

      if STRPOS(InputText,'-') = 0 then
        Sign := 1
      else
        Sign := -1;
      DecVar := (Sign * (ABS(IntegeralPart) + (FractionalPart / POWER(10,STRLEN(PartArray[2])))));
    END;

    LOCAL PROCEDURE TextToDate@13(InputText@1000 : Text;VAR DateVar@1004 : Date;UseLocalTime@1006 : Boolean) IsConverted : Boolean;
    VAR
      Day@1001 : Integer;
      Month@1002 : Integer;
      Year@1003 : Integer;
      DateTimeVar@1005 : DateTime;
    BEGIN
      InputText := CONVERTSTR(InputText,' ',',');
      if STRPOS(InputText,',') = 0 then
        exit;

      InputText := GetSubStrByNo(1,InputText);
      InputText := CONVERTSTR(InputText,'/',',');
      if STRPOS(InputText,',') = 0 then
        exit;

      IsConverted := EVALUATE(Month,GetSubStrByNo(1,InputText));
      if not IsConverted then
        exit;

      InputText := DELSTR(InputText,1,STRPOS(InputText,','));
      if STRPOS(InputText,',') = 0 then begin
        IsConverted := false;
        exit;
      end;

      IsConverted := EVALUATE(Day,GetSubStrByNo(1,InputText));
      if not IsConverted then
        exit;

      IsConverted := EVALUATE(Year,GetSubStrByNo(2,InputText));
      if not IsConverted then
        exit;

      if (Day < 1) and (Day > 31) and (Month < 1) and (Month > 12) then begin
        IsConverted := false;
        exit;
      end;

      DateVar := DMY2DATE(Day,Month,Year);
      if DateVar = 45010101D then
        DateVar := 0D
      else begin
        if UseLocalTime then
          DateTimeVar := UTC2LocalDT(CREATEDATETIME(DateVar,000000T))
        else
          DateTimeVar := CREATEDATETIME(DateVar,000000T);
        DateVar := DT2DATE(DateTimeVar);
      end;
    END;

    LOCAL PROCEDURE TextToTime@15(InputText@1000 : Text;VAR TimeVar@1004 : Time;UseLocalTime@1002 : Boolean) IsConverted : Boolean;
    VAR
      DateTimeVar@1001 : DateTime;
    BEGIN
      InputText := CONVERTSTR(InputText,' ',',');
      if STRPOS(InputText,',') = 0 then
        exit;

      IsConverted := EVALUATE(TimeVar,GetSubStrByNo(2,InputText));

      if not IsConverted then
        exit;

      if UseLocalTime then
        DateTimeVar := UTC2LocalDT(CREATEDATETIME(TODAY,TimeVar))
      else
        DateTimeVar := CREATEDATETIME(TODAY,TimeVar);
      TimeVar := DT2TIME(DateTimeVar);
    END;

    [External]
    PROCEDURE TextToDateTime@16(InputText@1000 : Text;VAR DateTimeVar@1001 : DateTime) IsConverted : Boolean;
    VAR
      DateVar@1002 : Date;
      TimeVar@1003 : Time;
    BEGIN
      IsConverted := TextToDate(InputText,DateVar,false);
      if not IsConverted then
        exit;

      IsConverted := TextToTime(InputText,TimeVar,false);
      if not IsConverted then
        exit;

      if DateVar <> 0D then
        DateTimeVar := UTC2LocalDT(CREATEDATETIME(DateVar,TimeVar))
      else begin
        if TimeVar <> 000000T then
          DateTimeVar := CREATEDATETIME(TODAY,TimeVar);
      end;
    END;

    [External]
    PROCEDURE TextToDuration@20(InputText@1000 : Text;VAR DurationVar@1002 : Duration) IsConverted : Boolean;
    VAR
      Millisec@1001 : BigInteger;
    BEGIN
      if not EVALUATE(Millisec,InputText) then
        exit;

      Millisec := Millisec * 60000;
      DurationVar := Millisec;
      IsConverted := true;
    END;

    [External]
    PROCEDURE TextToDateFormula@27(InputText@1000 : Text;VAR DateFormulaVar@1001 : DateFormula) IsConverted : Boolean;
    BEGIN
      IsConverted := EVALUATE(DateFormulaVar,InputText);
    END;

    [External]
    PROCEDURE OptionValueToText@11(InputInteger@1000 : Integer;OptionString@1001 : Text) OutputText : Text;
    BEGIN
      if (InputInteger >= 0) and (InputInteger <= GetOptionsQuantity(OptionString)) then
        OutputText := SELECTSTR(InputInteger + 1,OptionString);
    END;

    [Internal]
    PROCEDURE FieldOptionValueToText@26(InputInteger@1000 : Integer;OptionRecordId@1001 : Integer;OptionFieldId@1002 : Integer) OutputText : Text;
    VAR
      OptionString@1003 : Text;
    BEGIN
      OptionString := GetOptionCaption(OptionRecordId,OptionFieldId);
      if (InputInteger >= 0) and (InputInteger <= GetOptionsQuantity(OptionString)) then
        OutputText := SELECTSTR(InputInteger + 1,OptionString);
    END;

    [External]
    PROCEDURE EvaluateOptionField@3(FieldRef@1000 : FieldRef;VAR ValueToEvaluate@1002 : Text) : Boolean;
    VAR
      IntValue@1001 : Integer;
    BEGIN
      IntValue := TextToOptionValue(ValueToEvaluate,FieldRef.OPTIONCAPTION);
      if IntValue <> -1 then
        ValueToEvaluate := SELECTSTR(IntValue + 1,FieldRef.OPTIONCAPTION);
      exit(IntValue <> -1);
    END;

    [External]
    PROCEDURE EvaluateFilterOptionField@2(FieldRef@1000 : FieldRef;VAR FilterValueToEvaluate@1002 : Text;ReplaceOptionsWithValues@1009 : Boolean) Asserted : Boolean;
    VAR
      AssertedOption@1004 : Text;
      TempString@1005 : Text;
      ArrayImpliedOptions@1007 : ARRAY [20] OF Text;
      IntValue@1001 : Integer;
      I@1008 : Integer;
      SpaceRemovePosStart@1006 : Integer;
      SpaceRemovePosEnd@1010 : Integer;
      ImpliedOption@1003 : Text;
    BEGIN
      TempString := FilterValueToEvaluate;

      if not ParseFilterExpression(TempString,ArrayImpliedOptions) then
        ERROR(Text001,FilterValueToEvaluate);

      TempString := FilterValueToEvaluate;
      SpaceRemovePosStart := 1;

      for I := 1 to 20 do begin
        AssertedOption := '';
        ImpliedOption := '';
        if ArrayImpliedOptions[I] <> '' then begin
          ImpliedOption := ArrayImpliedOptions[I];

          if EVALUATE(IntValue,ImpliedOption) then begin
            AssertedOption := OptionValueToText(IntValue,FieldRef.OPTIONCAPTION);
            Asserted := AssertedOption <> '';
          end else begin
            IntValue := TextToOptionValue(ImpliedOption,FieldRef.OPTIONCAPTION);
            if IntValue <> -1 then
              AssertedOption := SELECTSTR(IntValue + 1,FieldRef.OPTIONCAPTION);
            Asserted := IntValue <> -1;
          end;

          if not Asserted then
            exit;

          if ReplaceOptionsWithValues then
            AssertedOption := FORMAT(IntValue);

          if (STRPOS(AssertedOption,'(') <> 0) or (STRPOS(AssertedOption,')') <> 0) or (AssertedOption = ' ') then
            AssertedOption := STRSUBSTNO('''%1''',AssertedOption);

          SpaceRemovePosEnd := STRPOS(TempString,ImpliedOption);
          TempString := RemoveSpaceChars(TempString,SpaceRemovePosStart,SpaceRemovePosEnd);

          if (STRLEN(TempString) + STRLEN(AssertedOption) - STRLEN(ImpliedOption)) > MAXSTRLEN(TempString) then
            ERROR(Text002);

          SpaceRemovePosStart := STRPOS(TempString,ImpliedOption) + STRLEN(AssertedOption);

          TempString := ReplaceText(TempString,ImpliedOption,AssertedOption,true);
        end;
      end;
      TempString := RemoveSpaceChars(TempString,SpaceRemovePosStart,STRLEN(TempString));

      FilterValueToEvaluate := TempString;
    END;

    LOCAL PROCEDURE ParseFilterExpression@7(VAR FilterExpression@1000 : Text;VAR ArrayTokens@1001 : ARRAY [20] OF Text) : Boolean;
    VAR
      TempStr@1003 : Text;
      ReservedFilterChars@1005 : Text;
      I@1002 : Integer;
      Count@1004 : Integer;
    BEGIN
      if FilterExpression = '' then
        FilterExpression := ' ';

      FilterExpression := CONVERTSTR(FilterExpression,'&|',',,');
      FilterExpression := ReplaceText(FilterExpression,'..',',',false);

      if FilterExpression[STRLEN(FilterExpression)] = ',' then
        exit(false);

      TempStr := FilterExpression;
      Count := 1;

      while STRPOS(TempStr,',') > 0 do begin
        TempStr := DELSTR(TempStr,STRPOS(TempStr,','),1);
        Count := Count + 1;
      end;

      if Count > 20 then
        exit(false);

      ReservedFilterChars := '&|<>=()';
      FilterExpression := DELCHR(FilterExpression,'=',ReservedFilterChars);
      FilterExpression := DELCHR(FilterExpression,'<>',' ');

      if FilterExpression = '' then
        exit(false);

      for I := 1 to Count do
        ArrayTokens[I] := DELCHR(GetSubStrByNo(I,FilterExpression),'<>',' ');

      exit(true);
    END;

    LOCAL PROCEDURE ReplaceText@19(Text@1000 : Text;FromText@1001 : Text;ToText@1002 : Text;OnlyOnce@1004 : Boolean) : Text;
    VAR
      I@1003 : Integer;
    BEGIN
      repeat
        I := STRPOS(Text,FromText);
        if I > 0 then begin
          Text := DELSTR(Text,I,STRLEN(FromText));
          Text := INSSTR(Text,ToText,I);
        end;
      until (I = 0) or OnlyOnce;
      exit(Text);
    END;

    LOCAL PROCEDURE RemoveSpaceChars@25(Text@1000 : Text;StartPos@1001 : Integer;EndPos@1002 : Integer) OutText : Text;
    VAR
      SpaceRemovedString@1003 : Text;
    BEGIN
      OutText := Text;
      if (STRLEN(Text) > EndPos) and (EndPos > StartPos) then begin
        SpaceRemovedString := COPYSTR(Text,StartPos,EndPos - StartPos);
        OutText := ReplaceText(Text,SpaceRemovedString,DELCHR(SpaceRemovedString,'=',' '),true);
      end;
    END;

    [External]
    PROCEDURE TruncateString@1(VAR InputString@1000 : Text;NewLength@1001 : Integer);
    BEGIN
      if STRLEN(InputString) > NewLength then
        InputString := PADSTR(InputString,NewLength);
    END;

    [External]
    PROCEDURE SetTimeFormat@4(InTime@1000 : Time) OutTime : Text;
    BEGIN
      OutTime := CONVERTSTR(FORMAT(InTime,0,'<Hours24,2>:<Minutes,2>:<Seconds,2>'),' ','0');
    END;

    [External]
    PROCEDURE SetDateFormat@14(InDate@1000 : Date) OutDate : Text;
    BEGIN
      OutDate := FORMAT(InDate,0,'<Month,2>/<Day,2>/<Year4>');
    END;

    [External]
    PROCEDURE SetDateTimeFormat@68(InDateTime@1000 : DateTime) OutDateTime : Text;
    BEGIN
      if InDateTime = 0DT then
        OutDateTime := SetDateFormat(45010101D) + ' ' + SetTimeFormat(000000T)
      else
        OutDateTime := SetDateFormat(DT2DATE(InDateTime)) + ' ' + SetTimeFormat(DT2TIME(InDateTime));
    END;

    [External]
    PROCEDURE SetDecimalFormat@46(InDecimal@1000 : Decimal) OutDecimal : Text;
    BEGIN
      OutDecimal := FORMAT(InDecimal,0,'<Sign>') + FORMAT(InDecimal,0,'<Integer>');

      if COPYSTR(FORMAT(InDecimal,0,'<Decimals>'),2) <> '' then
        OutDecimal := OutDecimal + '.' + COPYSTR(FORMAT(InDecimal,0,'<Decimals>'),2)
      else
        OutDecimal := OutDecimal + '.0';
    END;

    [External]
    PROCEDURE SetBoolFormat@17(InBoolean@1000 : Boolean) OutBoolean : Text;
    BEGIN
      if InBoolean then
        OutBoolean := '1'
      else
        OutBoolean := '0';
    END;

    [Internal]
    PROCEDURE PrepareFieldValueForXML@5(FldRef@1000 : FieldRef) OutText : Text;
    VAR
      RecID@1003 : RecordID;
      Date@1005 : Date;
      Time@1002 : Time;
      DateTime@1006 : DateTime;
      Integer@1007 : Integer;
      BigInt@1001 : BigInteger;
      Decimal@1011 : Decimal;
      Bool@1004 : Boolean;
    BEGIN
      if FORMAT(FldRef.CLASS) = 'FlowField' then
        FldRef.CALCFIELD;

      case FORMAT(FldRef.TYPE) of
        'Option':
          begin
            EVALUATE(Integer,FORMAT(FldRef.VALUE));
            OutText := FORMAT(Integer);
          end;
        'Text','Code':
          OutText := FORMAT(FldRef.VALUE);
        'Date':
          begin
            EVALUATE(Date,FORMAT(FldRef.VALUE));
            DateTime := CREATEDATETIME(Date,000000T);
            Date := DT2DATE(LocalDT2UTC(DateTime));
            OutText := SetDateFormat(Date);
          end;
        'Time':
          begin
            EVALUATE(Time,FORMAT(FldRef.VALUE));
            DateTime := CREATEDATETIME(TODAY,Time);
            Time := DT2TIME(LocalDT2UTC(DateTime));
            OutText := SetTimeFormat(Time);
          end;
        'DateTime':
          begin
            EVALUATE(DateTime,FORMAT(FldRef.VALUE));
            OutText := SetDateTimeFormat(LocalDT2UTC(DateTime));
          end;
        'Integer','BigInteger':
          OutText := FORMAT(FldRef.VALUE);
        'Duration':
          begin
            BigInt := FldRef.VALUE;
            // Use round to avoid conversion errors due to the conversion from decimal to long.
            BigInt := ROUND(BigInt / 60000,1);
            OutText := FORMAT(BigInt);
          end;
        'Decimal':
          begin
            EVALUATE(Decimal,FORMAT(FldRef.VALUE));
            OutText := SetDecimalFormat(Decimal);
          end;
        'DateFormula':
          OutText := FORMAT(FldRef.VALUE);
        'Boolean':
          begin
            EVALUATE(Bool,FORMAT(FldRef.VALUE));
            OutText := SetBoolFormat(Bool);
          end;
        'GUID':
          OutText := FORMAT(FldRef.VALUE);
        else begin
          RecID := FldRef.RECORD.RECORDID;
          Field.GET(RecID.TABLENO,FldRef.NUMBER);
          ERROR(STRSUBSTNO(Text003,Field."Field Caption",FldRef.RECORD.CAPTION));
        end;
      end;
    END;

    [Internal]
    PROCEDURE SetValueFormat@6(FormattedValue@1000 : Text;FldRef@1001 : FieldRef) OutText : Text;
    VAR
      RecID@1011 : RecordID;
      Date@1008 : Date;
      Time@1007 : Time;
      DateTime@1006 : DateTime;
      BigInt@1009 : BigInteger;
      Decimal@1004 : Decimal;
      Bool@1003 : Boolean;
      DurationVar@1010 : Duration;
    BEGIN
      case FORMAT(FldRef.TYPE) of
        'Text','Code','Option','DateFormula','GUID':
          OutText := FormattedValue;
        'Date':
          begin
            EVALUATE(Date,FormattedValue,9);
            if Date <> 0D then
              OutText := SetDateTimeFormat(CREATEDATETIME(Date,000000T));
          end;
        'Time':
          begin
            EVALUATE(Time,FormattedValue,9);
            OutText := SetDateTimeFormat(CREATEDATETIME(45010101D,Time));
          end;
        'DateTime':
          begin
            EVALUATE(DateTime,FormattedValue,9);
            OutText := SetDateTimeFormat(DateTime);
          end;
        'Integer','BigInteger':
          OutText := FormattedValue;
        'Decimal':
          begin
            EVALUATE(Decimal,FormattedValue,9);
            OutText := SetDecimalFormat(Decimal);
          end;
        'Boolean':
          begin
            EVALUATE(Bool,FormattedValue,9);
            OutText := SetBoolFormat(Bool);
          end;
        'Duration':
          begin
            EVALUATE(DurationVar,FormattedValue,9);
            BigInt := DurationVar / 60000;
            OutText := FORMAT(BigInt);
          end;
        else begin
          RecID := FldRef.RECORD.RECORDID;
          Field.GET(RecID.TABLENO,FldRef.NUMBER);
          ERROR(Text003,FldRef.CAPTION,FldRef.RECORD.CAPTION);
        end;
      end;
    END;

    [External]
    PROCEDURE HandleFilterChars@36(InputText@1000 : Text;MaxLength@1001 : Integer) : Text;
    VAR
      Pos@1002 : Integer;
      Char@1003 : Char;
      QuotesNeeded@1004 : Boolean;
    BEGIN
      if (STRLEN(InputText) + 2) > MaxLength then
        exit(InputText);

      Pos := 1;
      repeat
        Char := InputText[Pos];
        if Char in ['@','(',')','<','>','&','|','='] then
          QuotesNeeded := true;
        Pos := Pos + 1;
      until (Pos = MaxLength) or QuotesNeeded;

      if QuotesNeeded then
        exit(STRSUBSTNO('"%1"',InputText));
      exit(InputText);
    END;

    [External]
    PROCEDURE ReplaceFilterChars@23(InputString@1000 : Text) Result : Text;
    BEGIN
      Result := CONVERTSTR(InputString,'@()<>&|="''','??????????');
      if Result = '' then
        Result := '''''';
      exit(Result);
    END;

    [External]
    PROCEDURE LocalDT2UTC@39(LocalDT@1000 : DateTime) UTC : DateTime;
    BEGIN
      if LocalDT <> 0DT then
        UTC := ParseUTCString(FORMAT(LocalDT,0,9))
      else
        UTC := 0DT;
    END;

    [External]
    PROCEDURE UTC2LocalDT@43(UTC@1000 : DateTime) LocalDT : DateTime;
    VAR
      UTCDifference@1019 : Duration;
    BEGIN
      if UTC <> 0DT then begin
        UTCDifference := UTC - LocalDT2UTC(UTC);
        LocalDT := UTC + UTCDifference;
      end else
        LocalDT := 0DT;
    END;

    [External]
    PROCEDURE UTCString2LocalDT@45(UTCString@1000 : Text) ResultDT : DateTime;
    VAR
      UTC@1018 : DateTime;
    BEGIN
      UTC := ParseUTCString(UTCString);
      ResultDT := UTC2LocalDT(UTC);
    END;

    LOCAL PROCEDURE ParseUTCString@41(UTCString@1000 : Text) ResultDT : DateTime;
    VAR
      Time@1004 : Time;
      Year@1005 : Integer;
      Month@1006 : Integer;
      Day@1007 : Integer;
      Hour@1008 : Integer;
      Minute@1003 : Integer;
      Sec@1002 : Integer;
      Millisec@1001 : Integer;
      PosDot@1009 : Integer;
      PosZ@1010 : Integer;
    BEGIN
      if UTCString = '' then
        exit(0DT);
      EVALUATE(Year,COPYSTR(UTCString,1,4));
      EVALUATE(Month,COPYSTR(UTCString,6,2));
      EVALUATE(Day,COPYSTR(UTCString,9,2));
      EVALUATE(Hour,COPYSTR(UTCString,12,2));
      EVALUATE(Minute,COPYSTR(UTCString,15,2));
      EVALUATE(Sec,COPYSTR(UTCString,18,2));
      PosDot := STRPOS(UTCString,'.');
      PosZ := STRPOS(UTCString,'Z');
      if PosDot > 0 then
        EVALUATE(Millisec,COPYSTR(UTCString,PosDot + 1,PosZ - PosDot - 1));
      EVALUATE(Time,STRSUBSTNO('%1:%2:%3.%4',Hour,Minute,Sec,Millisec));
      ResultDT := CREATEDATETIME(DMY2DATE(Day,Month,Year),Time);
    END;

    LOCAL PROCEDURE GetOptionCaption@28(TableId@1000 : Integer;FieldId@1001 : Integer) OptionCaption : Text;
    VAR
      OptionRecordRef@1002 : RecordRef;
      OptionFieldRef@1003 : FieldRef;
    BEGIN
      OptionRecordRef.OPEN(TableId);
      OptionFieldRef := OptionRecordRef.FIELD(FieldId);
      OptionCaption := OptionFieldRef.OPTIONCAPTION;
      OptionRecordRef.CLOSE;
    END;

    PROCEDURE RunningUTC@29() : Boolean;
    VAR
      DateTimeNow@1000 : DateTime;
      EvalUTCTime@1001 : Time;
      EvalTime@1002 : Time;
      EvalDateTime@1004 : DateTime;
      UTCHour@1003 : Text;
      calculatedHour@1005 : Text;
      UTCText@1006 : Text;
      hourNumber@1007 : Integer;
      UTChourNumber@1008 : Integer;
    BEGIN
      DateTimeNow := CURRENTDATETIME;

      // Documented format 9 is: 2003-04-05T03:35:55.553Z
      // We only want the Time, so we need to get rid of Date and the ending Z
      UTCText := FORMAT(DateTimeNow,0,9);
      UTCText := COPYSTR(UTCText,STRPOS(UTCText,'T') + 1);
      UTCText := DELCHR(UTCText,'=','Z');

      // Get only the current hour
      EVALUATE(EvalUTCTime,UTCText);
      UTCHour := FORMAT(EvalUTCTime);
      UTCHour := COPYSTR(UTCHour,1,STRPOS(UTCHour,':') - 1);
      EVALUATE(UTChourNumber,UTCHour);

      // Documented format 0 is: 05-04-03 4.35 (But this changes with settings)
      // Get the Time only
      EVALUATE(EvalDateTime,FORMAT(DateTimeNow,0,0));
      EvalTime := DT2TIME(EvalDateTime);
      calculatedHour := FORMAT(EvalTime);
      calculatedHour := COPYSTR(calculatedHour,1,STRPOS(calculatedHour,':') - 1);
      EVALUATE(hourNumber,calculatedHour);

      exit(hourNumber = UTChourNumber);
    END;

    BEGIN
    END.
  }
}

