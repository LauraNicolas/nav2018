OBJECT Codeunit 5331 CRM Coupling Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RemoveCoupledContactsUnderCustomerQst@1000 : TextConst '@@@=%1 is a number, %2 is CRM Product Name;ENU=The Customer and %2 Account have %1 child Contact records coupled to one another. Do you want to delete their couplings as well?';
      CRMProductName@1001 : Codeunit "CRM Product Name";

    [External]
    PROCEDURE IsRecordCoupledToCRM@10(RecordID@1000 : RecordID) : Boolean;
    VAR
      CRMIntegrationRecord@1001 : Record "CRM Integration Record";
    BEGIN
      exit(CRMIntegrationRecord.IsRecordCoupled(RecordID));
    END;

    [External]
    PROCEDURE IsRecordCoupledToNAV@2(CRMID@1000 : GUID;NAVTableID@1001 : Integer) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record "CRM Integration Record";
      NAVRecordID@1003 : RecordID;
    BEGIN
      exit(CRMIntegrationRecord.FindRecordIDFromID(CRMID,NAVTableID,NAVRecordID));
    END;

    LOCAL PROCEDURE AssertTableIsMapped@4(TableID@1001 : Integer);
    VAR
      IntegrationTableMapping@1000 : Record "Integration Table Mapping";
    BEGIN
      IntegrationTableMapping.SETRANGE("Table ID",TableID);
      IntegrationTableMapping.FINDFIRST;
    END;

    [External]
    PROCEDURE DefineCoupling@101(RecordID@1001 : RecordID;VAR CRMID@1007 : GUID;VAR CreateNew@1006 : Boolean;VAR Synchronize@1005 : Boolean;VAR Direction@1004 : Option) : Boolean;
    VAR
      CRMIntegrationRecord@1002 : Record "CRM Integration Record";
      CouplingRecordBuffer@1003 : Record "Coupling Record Buffer";
      CRMCouplingRecord@1000 : Page "CRM Coupling Record";
    BEGIN
      AssertTableIsMapped(RecordID.TABLENO);
      CRMCouplingRecord.SetSourceRecordID(RecordID);
      if CRMCouplingRecord.RUNMODAL = ACTION::OK then begin
        CRMCouplingRecord.GETRECORD(CouplingRecordBuffer);
        if CouplingRecordBuffer."Create New" then
          CreateNew := true
        else
          if not ISNULLGUID(CouplingRecordBuffer."CRM ID") then begin
            CRMID := CouplingRecordBuffer."CRM ID";
            CRMIntegrationRecord.CoupleRecordIdToCRMID(RecordID,CouplingRecordBuffer."CRM ID");
            if CouplingRecordBuffer.GetPerformInitialSynchronization then begin
              Synchronize := true;
              Direction := CouplingRecordBuffer.GetInitialSynchronizationDirection;
            end;
          end else
            exit(false);
        exit(true);
      end;
      exit(false);
    END;

    [External]
    PROCEDURE RemoveCoupling@1(RecordID@1000 : RecordID);
    BEGIN
      case RecordID.TABLENO of
        DATABASE::Customer:
          RemoveCoupledContactsForCustomer(RecordID);
      end;
      RemoveSingleCoupling(RecordID);
    END;

    LOCAL PROCEDURE RemoveSingleCoupling@6(RecordID@1000 : RecordID);
    VAR
      CRMIntegrationRecord@1001 : Record "CRM Integration Record";
    BEGIN
      CRMIntegrationRecord.RemoveCouplingToRecord(RecordID);
    END;

    LOCAL PROCEDURE RemoveCoupledContactsForCustomer@3(RecordID@1000 : RecordID);
    VAR
      Contact@1001 : Record Contact;
      ContBusRel@1002 : Record "Contact Business Relation";
      Customer@1003 : Record Customer;
      CRMAccount@1005 : Record "CRM Account";
      CRMContact@1006 : Record "CRM Contact";
      CRMIntegrationRecord@1007 : Record "CRM Integration Record";
      TempContact@1009 : TEMPORARY Record Contact;
      CRMID@1008 : GUID;
    BEGIN
      // Convert the RecordID into a Customer
      Customer.GET(RecordID);

      // Get the Company Contact for this Customer
      ContBusRel.SETCURRENTKEY("Link to Table","No.");
      ContBusRel.SETRANGE("Link to Table",ContBusRel."Link to Table"::Customer);
      ContBusRel.SETRANGE("No.",Customer."No.");
      if ContBusRel.FINDFIRST then begin
        // Get all Person Contacts under it
        Contact.SETCURRENTKEY("Company Name","Company No.",Type,Name);
        Contact.SETRANGE("Company No.",ContBusRel."Contact No.");
        Contact.SETRANGE(Type,Contact.Type::Person);
        if Contact.FINDSET then begin
          // Count the number of Contacts coupled to CRM Contacts under the CRM Account the Customer is coupled to
          CRMIntegrationRecord.FindIDFromRecordID(RecordID,CRMID);
          if CRMAccount.GET(CRMID) then begin
            repeat
              if CRMIntegrationRecord.FindIDFromRecordID(Contact.RECORDID,CRMID) then begin
                CRMContact.GET(CRMID);
                if CRMContact.ParentCustomerId = CRMAccount.AccountId then begin
                  TempContact.COPY(Contact);
                  TempContact.INSERT;
                end;
              end;
            until Contact.NEXT = 0;

            // If any, query for breaking their couplings
            if TempContact.COUNT > 0 then
              if CONFIRM(STRSUBSTNO(RemoveCoupledContactsUnderCustomerQst,TempContact.COUNT,CRMProductName.FULL)) then begin
                TempContact.FINDSET;
                repeat
                  RemoveSingleCoupling(TempContact.RECORDID);
                until TempContact.NEXT = 0;
              end;
          end;
        end;
      end;
    END;

    BEGIN
    END.
  }
}

