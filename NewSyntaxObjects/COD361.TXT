OBJECT Codeunit 361 MoveEntries
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Entry"=rm,
                TableData "Cust. Ledger Entry"=rm,
                TableData "Vendor Ledger Entry"=rm,
                TableData "Item Ledger Entry"=rm,
                TableData "Job Ledger Entry"=rm,
                TableData "Res. Ledger Entry"=rm,
                TableData "Bank Account Ledger Entry"=rm,
                TableData "Check Ledger Entry"=rm,
                TableData "Reminder/Fin. Charge Entry"=rm,
                TableData "Value Entry"=rm,
                TableData "Avg. Cost Adjmt. Entry Point"=rd,
                TableData "Inventory Adjmt. Entry (Order)"=rm,
                TableData "Service Ledger Entry"=rm,
                TableData "Warranty Ledger Entry"=rm;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=You cannot delete %1 %2 because it has ledger entries in a fiscal year that has not been closed yet.';
      Text001@1001 : TextConst 'ENU=You cannot delete %1 %2 because there are one or more open ledger entries.';
      Text002@1002 : TextConst 'ENU="There are item entries that have not been adjusted for item %1. "';
      Text003@1003 : TextConst 'ENU="If you delete this item the inventory valuation will be incorrect. "';
      Text004@1004 : TextConst 'ENU=Use the %2 batch job before deleting the item.';
      Text005@1005 : TextConst 'ENU=Adjust Cost - Item Entries';
      Text006@1006 : TextConst 'ENU=You cannot delete %1 %2 because it has ledger entries.';
      Text007@1007 : TextConst 'ENU=You cannot delete %1 %2 because there are outstanding purchase order lines.';
      Text008@1008 : TextConst 'ENU="There are item entries that have not been completely invoiced for item %1. "';
      Text009@1009 : TextConst 'ENU=Invoice all item entries before deleting the item.';
      AccountingPeriod@1010 : Record "Accounting Period";
      GLEntry@1011 : Record "G/L Entry";
      CustLedgEntry@1012 : Record "Cust. Ledger Entry";
      VendLedgEntry@1013 : Record "Vendor Ledger Entry";
      BankAccLedgEntry@1014 : Record "Bank Account Ledger Entry";
      CheckLedgEntry@1015 : Record "Check Ledger Entry";
      ItemLedgEntry@1016 : Record "Item Ledger Entry";
      ResLedgEntry@1017 : Record "Res. Ledger Entry";
      JobLedgEntry@1018 : Record "Job Ledger Entry";
      PurchOrderLine@1019 : Record "Purchase Line";
      ReminderEntry@1020 : Record "Reminder/Fin. Charge Entry";
      ValueEntry@1021 : Record "Value Entry";
      AvgCostAdjmt@1022 : Record "Avg. Cost Adjmt. Entry Point";
      InvtAdjmtEntryOrder@1031 : Record "Inventory Adjmt. Entry (Order)";
      ServLedgEntry@1023 : Record "Service Ledger Entry";
      WarrantyLedgEntry@1024 : Record "Warranty Ledger Entry";
      Text010@1027 : TextConst 'ENU=You cannot delete %1 %2 because it has ledger entries after %3.';
      Text011@1026 : TextConst 'ENU=You cannot delete %1 %2 because it has budget ledger entries\';
      Text012@1025 : TextConst 'ENU=" after %3 in %4 = %5."';
      Text013@1028 : TextConst 'ENU=You cannot delete %1 %2 because prepaid contract entries exist in %3.';
      Text014@1029 : TextConst 'ENU=You cannot delete %1 %2, because open prepaid contract entries exist in %3.';
      Text015@1030 : TextConst 'ENU=You cannot delete %1 %2 because there are outstanding purchase return order lines.';
      TimeSheetLinesErr@1033 : TextConst '@@@=You cannot delete job JOB001 because it has open or submitted time sheet lines.;ENU=You cannot delete job %1 because it has open or submitted time sheet lines.';
      CannotDeleteBecauseInInvErr@1032 : TextConst '@@@="%1 = the object to be deleted (example: Item, Customer).";ENU=You cannot delete %1 because it has open invoices.';

    [External]
    PROCEDURE MoveGLEntries@1(GLAcc@1000 : Record "G/L Account");
    VAR
      GLSetup@1004 : Record "General Ledger Setup";
      BudgetName@1003 : Record "G/L Budget Name";
      GLBudgetEntry@1002 : Record "G/L Budget Entry";
      CalcGLAccWhereUsed@1001 : Codeunit "Calc. G/L Acc. Where-Used";
    BEGIN
      if GLAcc."Account Type" = GLAcc."Account Type"::Posting then begin
        GLAcc.CALCFIELDS(Balance);
        GLAcc.TESTFIELD(Balance,0);
      end;

      GLEntry.SETCURRENTKEY("G/L Account No.");
      GLEntry.SETRANGE("G/L Account No.",GLAcc."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        GLEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not GLEntry.ISEMPTY then
        ERROR(
          Text000,
          GLAcc.TABLECAPTION,GLAcc."No.");

      GLSetup.GET;
      if GLSetup."Allow G/L Acc. Deletion Before" <> 0D then begin
        GLEntry.SETFILTER("Posting Date",'>=%1',GLSetup."Allow G/L Acc. Deletion Before");
        if not GLEntry.ISEMPTY then
          ERROR(
            Text010,
            GLAcc.TABLECAPTION,GLAcc."No.",GLSetup."Allow G/L Acc. Deletion Before");
        GLBudgetEntry.LOCKTABLE;
        GLBudgetEntry.SETCURRENTKEY("Budget Name","G/L Account No.",Date);
        GLBudgetEntry.SETRANGE("G/L Account No.",GLAcc."No.");
        GLBudgetEntry.SETFILTER(Date,'>=%1',GLSetup."Allow G/L Acc. Deletion Before");
        if GLBudgetEntry.FINDFIRST then
          ERROR(
            Text011 + Text012,
            GLAcc.TABLECAPTION,GLAcc."No.",GLSetup."Allow G/L Acc. Deletion Before",
            BudgetName.TABLECAPTION,GLBudgetEntry."Budget Name");
      end;
      if GLSetup."Check G/L Account Usage" then
        CalcGLAccWhereUsed.DeleteGLNo(GLAcc."No.");

      GLEntry.RESET;
      GLEntry.SETCURRENTKEY("G/L Account No.");
      GLEntry.SETRANGE("G/L Account No.",GLAcc."No.");
      GLEntry.MODIFYALL("G/L Account No.",'');
    END;

    [External]
    PROCEDURE MoveCustEntries@2(Cust@1000 : Record Customer);
    VAR
      IdentityManagement@1001 : Codeunit "Identity Management";
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETCURRENTKEY("Customer No.","Posting Date");
      CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        CustLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not CustLedgEntry.ISEMPTY then begin
        if IdentityManagement.IsInvAppId then
          ERROR(
            CannotDeleteBecauseInInvErr,
            Cust.TABLECAPTION);

        ERROR(
          Text000,
          Cust.TABLECAPTION,Cust."No.");
      end;

      CustLedgEntry.RESET;
      if not CustLedgEntry.SETCURRENTKEY("Customer No.",Open) then
        CustLedgEntry.SETCURRENTKEY("Customer No.");
      CustLedgEntry.SETRANGE("Customer No.",Cust."No.");
      CustLedgEntry.SETRANGE(Open,true);
      if not CustLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Cust.TABLECAPTION,Cust."No.");

      ReminderEntry.RESET;
      ReminderEntry.SETCURRENTKEY("Customer No.");
      ReminderEntry.SETRANGE("Customer No.",Cust."No.");
      ReminderEntry.MODIFYALL("Customer No.",'');

      CustLedgEntry.SETRANGE(Open);
      CustLedgEntry.MODIFYALL("Customer No.",'');

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Customer No.",Cust."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Customer No.",'');

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Bill-to Customer No.",Cust."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Cust.TABLECAPTION,Cust."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Bill-to Customer No.",'');

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Customer No.",Cust."No.");
      WarrantyLedgEntry.MODIFYALL("Customer No.",'');

      WarrantyLedgEntry.SETRANGE("Customer No.");
      WarrantyLedgEntry.SETRANGE("Bill-to Customer No.",Cust."No.");
      WarrantyLedgEntry.MODIFYALL("Bill-to Customer No.",'');
    END;

    [External]
    PROCEDURE MoveVendorEntries@3(Vend@1000 : Record Vendor);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.","Posting Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        VendLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not VendLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Vend.TABLECAPTION,Vend."No.");

      VendLedgEntry.RESET;
      if not VendLedgEntry.SETCURRENTKEY("Vendor No.",Open) then
        VendLedgEntry.SETCURRENTKEY("Vendor No.");
      VendLedgEntry.SETRANGE("Vendor No.",Vend."No.");
      VendLedgEntry.SETRANGE(Open,true);
      if not VendLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Vend.TABLECAPTION,Vend."No.");

      VendLedgEntry.SETRANGE(Open);
      VendLedgEntry.MODIFYALL("Vendor No.",'');

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Vendor No.",Vend."No.");
      WarrantyLedgEntry.MODIFYALL("Vendor No.",'');
    END;

    [External]
    PROCEDURE MoveBankAccEntries@5(BankAcc@1000 : Record "Bank Account");
    BEGIN
      BankAccLedgEntry.RESET;
      BankAccLedgEntry.SETCURRENTKEY("Bank Account No.","Posting Date");
      BankAccLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        BankAccLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not BankAccLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          BankAcc.TABLECAPTION,BankAcc."No.");

      BankAccLedgEntry.RESET;
      if not BankAccLedgEntry.SETCURRENTKEY("Bank Account No.",Open) then
        BankAccLedgEntry.SETCURRENTKEY("Bank Account No.");
      BankAccLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
      BankAccLedgEntry.SETRANGE(Open,true);
      if not BankAccLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          BankAcc.TABLECAPTION,BankAcc."No.");

      BankAccLedgEntry.SETRANGE(Open);
      BankAccLedgEntry.MODIFYALL("Bank Account No.",'');
      CheckLedgEntry.SETCURRENTKEY("Bank Account No.");
      CheckLedgEntry.SETRANGE("Bank Account No.",BankAcc."No.");
      CheckLedgEntry.MODIFYALL("Bank Account No.",'');
    END;

    [External]
    PROCEDURE MoveItemEntries@4(Item@1000 : Record Item);
    VAR
      IdentityManagement@1001 : Codeunit "Identity Management";
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ItemLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ItemLedgEntry.ISEMPTY then begin
        if IdentityManagement.IsInvAppId then
          ERROR(
            CannotDeleteBecauseInInvErr,
            Item.TABLECAPTION);

        ERROR(
          Text000,
          Item.TABLECAPTION,Item."No.");
      end;

      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETRANGE("Completely Invoiced",false);
      if not ItemLedgEntry.ISEMPTY then
        ERROR(
          Text008 +
          Text003 +
          Text009,Item."No.");
      ItemLedgEntry.SETRANGE("Completely Invoiced");

      ItemLedgEntry.SETCURRENTKEY("Item No.",Open);
      ItemLedgEntry.SETRANGE(Open,true);
      if not ItemLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Item.TABLECAPTION,Item."No.");

      ItemLedgEntry.SETCURRENTKEY("Item No.","Applied Entry to Adjust");
      ItemLedgEntry.SETRANGE(Open,false);
      ItemLedgEntry.SETRANGE("Applied Entry to Adjust",true);
      if not ItemLedgEntry.ISEMPTY then
        ERROR(
          Text002 +
          Text003 +
          Text004,
          Item."No.",Text005);
      ItemLedgEntry.SETRANGE("Applied Entry to Adjust");

      if Item."Costing Method" = Item."Costing Method"::Average then begin
        AvgCostAdjmt.RESET;
        AvgCostAdjmt.SETRANGE("Item No.",Item."No.");
        AvgCostAdjmt.SETRANGE("Cost Is Adjusted",false);
        if not AvgCostAdjmt.ISEMPTY then
          ERROR(
            Text002 +
            Text003 +
            Text004,
            Item."No.",Text005);
      end;

      ItemLedgEntry.SETRANGE(Open);
      ItemLedgEntry.MODIFYALL("Item No.",'');

      ValueEntry.RESET;
      ValueEntry.SETCURRENTKEY("Item No.");
      ValueEntry.SETRANGE("Item No.",Item."No.");
      ValueEntry.MODIFYALL("Item No.",'');

      AvgCostAdjmt.RESET;
      AvgCostAdjmt.SETRANGE("Item No.",Item."No.");
      AvgCostAdjmt.DELETEALL;

      InvtAdjmtEntryOrder.RESET;
      InvtAdjmtEntryOrder.SETRANGE("Item No.",Item."No.");
      InvtAdjmtEntryOrder.SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type"::Production);
      InvtAdjmtEntryOrder.MODIFYALL("Cost is Adjusted",true);
      InvtAdjmtEntryOrder.SETRANGE("Order Type");
      InvtAdjmtEntryOrder.MODIFYALL("Item No.",'');

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Item No. (Serviced)",Item."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Item No. (Serviced)",'');

      ServLedgEntry.SETRANGE("Item No. (Serviced)");
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::Item);
      ServLedgEntry.SETRANGE("No.",Item."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Item.TABLECAPTION,Item."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",'');

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Item No. (Serviced)",Item."No.");
      WarrantyLedgEntry.MODIFYALL("Item No. (Serviced)",'');

      WarrantyLedgEntry.SETRANGE("Item No. (Serviced)");
      WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Item);
      WarrantyLedgEntry.SETRANGE("No.",Item."No.");
      WarrantyLedgEntry.MODIFYALL("No.",'');
    END;

    [External]
    PROCEDURE MoveResEntries@6(Res@1000 : Record Resource);
    BEGIN
      ResLedgEntry.RESET;
      ResLedgEntry.SETCURRENTKEY("Resource No.","Posting Date");
      ResLedgEntry.SETRANGE("Resource No.",Res."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ResLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ResLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Res.TABLECAPTION,Res."No.");

      ResLedgEntry.RESET;
      ResLedgEntry.SETCURRENTKEY("Resource No.");
      ResLedgEntry.SETRANGE("Resource No.",Res."No.");
      ResLedgEntry.MODIFYALL("Resource No.",'');

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::Resource);
      ServLedgEntry.SETRANGE("No.",Res."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Res.TABLECAPTION,Res."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Res.TABLECAPTION,Res."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",'');

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::Resource);
      WarrantyLedgEntry.SETRANGE("No.",Res."No.");
      WarrantyLedgEntry.MODIFYALL("No.",'');
    END;

    [External]
    PROCEDURE MoveJobEntries@7(Job@1000 : Record Job);
    VAR
      TimeSheetLine@1001 : Record "Time Sheet Line";
    BEGIN
      JobLedgEntry.SETCURRENTKEY("Job No.");
      JobLedgEntry.SETRANGE("Job No.",Job."No.");

      if not JobLedgEntry.ISEMPTY then
        ERROR(
          Text006,
          Job.TABLECAPTION,Job."No.");

      TimeSheetLine.SETRANGE(Type,TimeSheetLine.Type::Job);
      TimeSheetLine.SETRANGE("Job No.",Job."No.");
      TimeSheetLine.SETFILTER(Status,'%1|%2',TimeSheetLine.Status::Open,TimeSheetLine.Status::Submitted);
      if not TimeSheetLine.ISEMPTY then
        ERROR(TimeSheetLinesErr,Job."No.");

      PurchOrderLine.SETCURRENTKEY("Document Type");
      PurchOrderLine.SETFILTER(
        "Document Type",'%1|%2',
        PurchOrderLine."Document Type"::Order,
        PurchOrderLine."Document Type"::"Return Order");
      PurchOrderLine.SETRANGE("Job No.",Job."No.");
      if PurchOrderLine.FINDFIRST then begin
        if PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::Order then
          ERROR(Text007,Job.TABLECAPTION,Job."No.");
        if PurchOrderLine."Document Type" = PurchOrderLine."Document Type"::"Return Order" then
          ERROR(Text015,Job.TABLECAPTION,Job."No.");
      end;

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Job No.",Job."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          Job.TABLECAPTION,Job."No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          Job.TABLECAPTION,Job."No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Job No.",'');
    END;

    [External]
    PROCEDURE MoveServiceItemLedgerEntries@8(ServiceItem@1000 : Record "Service Item");
    VAR
      ResultDescription@1001 : Text;
    BEGIN
      ServLedgEntry.LOCKTABLE;

      ResultDescription := CheckIfServiceItemCanBeDeleted(ServLedgEntry,ServiceItem."No.");
      if ResultDescription <> '' then
        ERROR(ResultDescription);

      ServLedgEntry.MODIFYALL("Service Item No. (Serviced)",'');

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Service Item No. (Serviced)",ServiceItem."No.");
      WarrantyLedgEntry.MODIFYALL("Service Item No. (Serviced)",'');
    END;

    [External]
    PROCEDURE MoveServContractLedgerEntries@9(ServiceContractHeader@1000 : Record "Service Contract Header");
    BEGIN
      if ServiceContractHeader.Prepaid then begin
        ServLedgEntry.RESET;
        ServLedgEntry.SETCURRENTKEY(Type,"No.");
        ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
        ServLedgEntry.SETRANGE("No.",ServiceContractHeader."Contract No.");
        ServLedgEntry.SETRANGE(Prepaid,true);
        ServLedgEntry.SETRANGE("Moved from Prepaid Acc.",false);
        ServLedgEntry.SETRANGE(Open,false);
        if not ServLedgEntry.ISEMPTY then
          ERROR(
            Text013,
            ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.",ServLedgEntry.TABLECAPTION);
        ServLedgEntry.SETRANGE(Open,true);
        if not ServLedgEntry.ISEMPTY then
          ERROR(
            Text014,
            ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.",ServLedgEntry.TABLECAPTION);
      end;

      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("Service Contract No.",'');

      ServLedgEntry.SETRANGE("Service Contract No.");
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Contract");
      ServLedgEntry.SETRANGE("No.",ServiceContractHeader."Contract No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          ServiceContractHeader.TABLECAPTION,ServiceContractHeader."Contract No.");

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",'');

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE("Service Contract No.",ServiceContractHeader."Contract No.");
      WarrantyLedgEntry.MODIFYALL("Service Contract No.",'');
    END;

    [External]
    PROCEDURE MoveServiceCostLedgerEntries@13(ServiceCost@1000 : Record "Service Cost");
    BEGIN
      ServLedgEntry.RESET;
      ServLedgEntry.SETRANGE(Type,ServLedgEntry.Type::"Service Cost");
      ServLedgEntry.SETRANGE("No.",ServiceCost.Code);
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServLedgEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text000,
          ServiceCost.TABLECAPTION,ServiceCost.Code);

      ServLedgEntry.SETRANGE("Posting Date");
      ServLedgEntry.SETRANGE(Open,true);
      if not ServLedgEntry.ISEMPTY then
        ERROR(
          Text001,
          ServiceCost.TABLECAPTION,ServiceCost.Code);

      ServLedgEntry.SETRANGE(Open);
      ServLedgEntry.MODIFYALL("No.",'');

      WarrantyLedgEntry.LOCKTABLE;
      WarrantyLedgEntry.SETRANGE(Type,WarrantyLedgEntry.Type::"Service Cost");
      WarrantyLedgEntry.SETRANGE("No.",ServiceCost.Code);
      WarrantyLedgEntry.MODIFYALL("No.",'');
    END;

    [External]
    PROCEDURE MoveCashFlowEntries@10(CashFlowAccount@1004 : Record "Cash Flow Account");
    VAR
      CFForecastEntry@1003 : Record "Cash Flow Forecast Entry";
      CFSetup@1002 : Record "Cash Flow Setup";
      CFWorksheetLine@1000 : Record "Cash Flow Worksheet Line";
    BEGIN
      CashFlowAccount.LOCKTABLE;

      if CashFlowAccount."Account Type" = CashFlowAccount."Account Type"::Entry then begin
        CashFlowAccount.CALCFIELDS(Amount);
        CashFlowAccount.TESTFIELD(Amount,0);
      end;

      CFForecastEntry.RESET;
      CFForecastEntry.SETCURRENTKEY("Cash Flow Account No.");
      CFForecastEntry.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        CFForecastEntry.SETFILTER("Cash Flow Date",'>%1',AccountingPeriod."Starting Date");
      if not CFForecastEntry.ISEMPTY then
        ERROR(
          Text000,
          CashFlowAccount.TABLECAPTION,CashFlowAccount."No.");

      CFSetup.GET;
      if CFSetup."Receivables CF Account No." = CashFlowAccount."No." then
        CFSetup.MODIFYALL("Receivables CF Account No.",'');

      if CFSetup."Payables CF Account No." = CashFlowAccount."No." then
        CFSetup.MODIFYALL("Payables CF Account No.",'');

      if CFSetup."Sales Order CF Account No." = CashFlowAccount."No." then
        CFSetup.MODIFYALL("Sales Order CF Account No.",'');

      if CFSetup."Purch. Order CF Account No." = CashFlowAccount."No." then
        CFSetup.MODIFYALL("Purch. Order CF Account No.",'');

      if CFSetup."FA Budget CF Account No." = CashFlowAccount."No." then
        CFSetup.MODIFYALL("FA Budget CF Account No.",'');

      if CFSetup."FA Disposal CF Account No." = CashFlowAccount."No." then
        CFSetup.MODIFYALL("FA Disposal CF Account No.",'');

      if CFSetup."Service CF Account No." = CashFlowAccount."No." then
        CFSetup.MODIFYALL("Service CF Account No.",'');

      CFWorksheetLine.RESET;
      CFWorksheetLine.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
      CFWorksheetLine.MODIFYALL("Cash Flow Account No.",'');

      CFForecastEntry.RESET;
      CFForecastEntry.SETCURRENTKEY("Cash Flow Forecast No.");
      CFForecastEntry.SETRANGE("Cash Flow Account No.",CashFlowAccount."No.");
      CFForecastEntry.MODIFYALL("Cash Flow Account No.",'');
    END;

    [External]
    PROCEDURE MoveDocRelatedEntries@67(TableNo@1003 : Integer;DocNo@1001 : Code[20]);
    VAR
      ItemLedgEntry2@1002 : Record "Item Ledger Entry";
      ValueEntry2@1004 : Record "Value Entry";
      CostCalcMgt@1000 : Codeunit "Cost Calculation Management";
    BEGIN
      ItemLedgEntry2.LOCKTABLE;
      ItemLedgEntry2.SETCURRENTKEY("Document No.");
      ItemLedgEntry2.SETRANGE("Document No.",DocNo);
      ItemLedgEntry2.SETRANGE("Document Type",CostCalcMgt.GetDocType(TableNo));
      ItemLedgEntry2.SETFILTER("Document Line No.",'<>0');
      ItemLedgEntry2.MODIFYALL("Document Line No.",0);

      ValueEntry2.LOCKTABLE;
      ValueEntry2.SETCURRENTKEY("Document No.");
      ValueEntry2.SETRANGE("Document No.",DocNo);
      ValueEntry2.SETRANGE("Document Type",CostCalcMgt.GetDocType(TableNo));
      ValueEntry2.SETFILTER("Document Line No.",'<>0');
      ValueEntry2.MODIFYALL("Document Line No.",0);
    END;

    [External]
    PROCEDURE CheckIfServiceItemCanBeDeleted@11(VAR ServiceLedgerEntry@1000 : Record "Service Ledger Entry";ServiceItemNo@1001 : Code[20]) : Text;
    VAR
      ServiceItem@1003 : Record "Service Item";
    BEGIN
      ServiceLedgerEntry.RESET;
      ServiceLedgerEntry.SETCURRENTKEY("Service Item No. (Serviced)");
      ServiceLedgerEntry.SETRANGE("Service Item No. (Serviced)",ServiceItemNo);
      AccountingPeriod.SETRANGE(Closed,false);
      if AccountingPeriod.FINDFIRST then
        ServiceLedgerEntry.SETFILTER("Posting Date",'>=%1',AccountingPeriod."Starting Date");
      if not ServiceLedgerEntry.ISEMPTY then
        exit(STRSUBSTNO(Text000,ServiceItem.TABLECAPTION,ServiceItemNo));

      ServiceLedgerEntry.SETRANGE("Posting Date");
      ServiceLedgerEntry.SETRANGE(Open,true);
      if not ServiceLedgerEntry.ISEMPTY then
        exit(STRSUBSTNO(Text001,ServiceItem.TABLECAPTION,ServiceItemNo));

      ServiceLedgerEntry.SETRANGE(Open);
      exit('');
    END;

    BEGIN
    END.
  }
}

