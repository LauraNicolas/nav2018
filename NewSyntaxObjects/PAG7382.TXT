OBJECT Page 7382 Inventory Movement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Inventory Movement;
    SaveValues=true;
    SourceTable="Warehouse Activity Header";
    SourceTableView=WHERE(Type=CONST("Invt. Movement"));
    PageType=Document;
    RefreshOnActivate=true;
    OnOpenPage=BEGIN
                 ErrorIfUserIsNotWhseEmployee;
               END;

    OnFindRecord=BEGIN
                   exit(FindFirstAllowedRec(Which));
                 END;

    OnNextRecord=BEGIN
                   exit(FindNextAllowedRec(Steps));
                 END;

    OnNewRecord=BEGIN
                  "Location Code" := xRec."Location Code";
                END;

    OnDeleteRecord=BEGIN
                     CurrPage.UPDATE;
                   END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 100     ;1   ;ActionGroup;
                      Name=&Movement;
                      CaptionML=ENU=&Movement;
                      Image=CreateMovement }
      { 101     ;2   ;Action    ;
                      Name=List;
                      ShortCutKey=Shift+Ctrl+L;
                      CaptionML=ENU=List;
                      ToolTipML=ENU=View all warehouse documents of this type that exist.;
                      ApplicationArea=#Warehouse;
                      Image=OpportunitiesList;
                      OnAction=BEGIN
                                 LookupActivityHeader("Location Code",Rec);
                               END;
                                }
      { 25      ;2   ;Action    ;
                      Name=Co&mments;
                      CaptionML=ENU=Co&mments;
                      ToolTipML=ENU=View or add comments for the record.;
                      ApplicationArea=#Warehouse;
                      RunObject=Page "Warehouse Comment Sheet";
                      RunPageLink="Table Name"=CONST("Whse. Activity Header"),
                                  Type=FIELD(Type),
                                  "No."=FIELD("No.");
                      Image=ViewComments }
      { 31      ;2   ;Action    ;
                      Name=Registered Invt. Movements;
                      CaptionML=ENU=Registered Invt. Movements;
                      ApplicationArea=#Warehouse;
                      RunObject=Page "Registered Invt. Movement List";
                      RunPageView=SORTING("Invt. Movement No.");
                      RunPageLink="Invt. Movement No."=FIELD("No.");
                      Image=RegisteredDocs }
      { 40      ;2   ;Action    ;
                      Name=Source Document;
                      CaptionML=ENU=Source Document;
                      ToolTipML=ENU=View the source document of the warehouse activity.;
                      ApplicationArea=#Warehouse;
                      Image=Order;
                      OnAction=VAR
                                 WMSMgt@1000 : Codeunit "WMS Management";
                               BEGIN
                                 WMSMgt.ShowSourceDocCard("Source Type","Source Subtype","Source No.");
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 9       ;1   ;ActionGroup;
                      Name=F&unctions;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 13      ;2   ;Action    ;
                      Name=GetSourceDocument;
                      ShortCutKey=Ctrl+F7;
                      Ellipsis=true;
                      CaptionML=ENU=&Get Source Document;
                      ToolTipML=ENU=Select the source document that you want to move items for.;
                      ApplicationArea=#Warehouse;
                      Promoted=true;
                      Image=GetSourceDoc;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 CreateInvtPickMovement@1001 : Codeunit "Create Inventory Pick/Movement";
                               BEGIN
                                 if LineExist then
                                   ERROR(Text001);
                                 CreateInvtPickMovement.SetInvtMovement(true);
                                 CreateInvtPickMovement.RUN(Rec);
                               END;
                                }
      { 38      ;2   ;Action    ;
                      Name=Autofill Qty. to Handle;
                      CaptionML=ENU=Autofill Qty. to Handle;
                      ToolTipML=ENU=Have the system enter the outstanding quantity in the Qty. to Handle field.;
                      ApplicationArea=#Warehouse;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=AutofillQtyToHandle;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 AutofillQtyToHandle;
                               END;
                                }
      { 39      ;2   ;Action    ;
                      Name=Delete Qty. to Handle;
                      CaptionML=ENU=Delete Qty. to Handle;
                      ToolTipML=ENU="Have the system clear the value in the Qty. To Handle field. ";
                      ApplicationArea=#Warehouse;
                      Image=DeleteQtyToHandle;
                      OnAction=BEGIN
                                 DeleteQtyToHandle;
                               END;
                                }
      { 24      ;1   ;ActionGroup;
                      Name=&Registering;
                      CaptionML=ENU=&Registering;
                      Image=PostOrder }
      { 28      ;2   ;Action    ;
                      Name=&Register Invt. Movement;
                      ShortCutKey=F9;
                      CaptionML=ENU=&Register Invt. Movement;
                      ApplicationArea=#Warehouse;
                      Promoted=true;
                      PromotedIsBig=true;
                      Image=RegisterPutAway;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 RegisterActivityYesNo;
                               END;
                                }
      { 6       ;1   ;Action    ;
                      Name=&Print;
                      Ellipsis=true;
                      CaptionML=ENU=&Print;
                      ToolTipML=ENU=Prepare to print the document. A report request window for the document opens where you can specify what to include on the print-out.;
                      ApplicationArea=#Warehouse;
                      Promoted=true;
                      Image=Print;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 WhseDocPrint.PrintInvtMovementHeader(Rec,false);
                               END;
                                }
      { 1900000006;0 ;ActionContainer;
                      Name=ActionContainer1900000006;
                      ActionContainerType=Reports }
      { 1903694506;1 ;Action    ;
                      Name=Movement List;
                      CaptionML=ENU=Movement List;
                      ApplicationArea=#Warehouse;
                      RunObject=Report "Movement List";
                      Promoted=false;
                      Image=Report;
                      PromotedCategory=Report }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 2   ;2   ;Field     ;
                Name=No.;
                ToolTipML=ENU=Specifies the number of the warehouse header.;
                ApplicationArea=#Warehouse;
                SourceExpr="No.";
                OnAssistEdit=BEGIN
                               if AssistEdit(xRec) then
                                 CurrPage.UPDATE;
                             END;

                ImplicitType=Code20 }

    { 8   ;2   ;Field     ;
                Name=Location Code;
                ToolTipML=ENU=Specifies the code for the location where the warehouse activity takes place.;
                ApplicationArea=#Warehouse;
                SourceExpr="Location Code";
                ImplicitType=Code10 }

    { 15  ;2   ;Field     ;
                Name=Source Document;
                Lookup=false;
                DrillDown=false;
                ToolTipML=ENU=Specifies the type of document to which the line relates, including sales order, purchase order, or transfer order.;
                OptionCaptionML=ENU="  ,,,,,,,,,,,Prod. Consumption,,,,,,,,,Assembly Consumption";
                ApplicationArea=#Warehouse;
                SourceExpr="Source Document";
                ImplicitType=Option }

    { 11  ;2   ;Field     ;
                Name=Source No.;
                ToolTipML=ENU=Specifies the number of the source document from which the activity originated.;
                ApplicationArea=#Warehouse;
                SourceExpr="Source No.";
                OnValidate=BEGIN
                             SourceNoOnAfterValidate;
                           END;

                OnLookup=VAR
                           CreateInvtPickMovement@1002 : Codeunit "Create Inventory Pick/Movement";
                         BEGIN
                           if LineExist then
                             ERROR(Text001);

                           CreateInvtPickMovement.SetInvtMovement(true);
                           CreateInvtPickMovement.RUN(Rec);
                           CurrPage.UPDATE;
                           CurrPage.WhseActivityLines.PAGE.UpdateForm;
                         END;

                ImplicitType=Code20 }

    { 16  ;2   ;Field     ;
                Name=Destination No.;
                ToolTipML=ENU=Specifies the number or the code of the customer or vendor that the line is linked to.;
                ApplicationArea=#Warehouse;
                SourceExpr="Destination No.";
                CaptionClass=FORMAT(WMSMgt.GetCaption("Destination Type","Source Document",0));
                Editable=FALSE;
                ImplicitType=Code20 }

    { 17  ;2   ;Field     ;
                Name=Name;
                CaptionML=ENU=Name;
                ToolTipML=ENU=Specifies the name of the destination for the inventory movement.;
                ApplicationArea=#Warehouse;
                SourceExpr=WMSMgt.GetDestinationName("Destination Type","Destination No.");
                CaptionClass=FORMAT(WMSMgt.GetCaption("Destination Type","Source Document",1));
                Editable=FALSE }

    { 29  ;2   ;Field     ;
                Name=Posting Date;
                ToolTipML=ENU=Specifies the date when the warehouse activity should be recorded as being posted.;
                ApplicationArea=#Warehouse;
                SourceExpr="Posting Date";
                ImplicitType=Date }

    { 44  ;2   ;Field     ;
                Name=External Document No.;
                ToolTipML=ENU=Specifies the external document number for the source document to which the warehouse activity is related.;
                ApplicationArea=#Warehouse;
                SourceExpr="External Document No.";
                CaptionClass=FORMAT(WMSMgt.GetCaption("Destination Type","Source Document",2));
                ImplicitType=Code35 }

    { 21  ;2   ;Field     ;
                Name=External Document No.2;
                ToolTipML=ENU=Specifies an additional external document number for the inventory put-away or inventory pick.;
                ApplicationArea=#Warehouse;
                SourceExpr="External Document No.2";
                CaptionClass=FORMAT(WMSMgt.GetCaption("Destination Type","Source Document",3));
                ImplicitType=Code35 }

    { 42  ;2   ;Field     ;
                Name=Sorting Method;
                ToolTipML=ENU=Specifies the method by which the lines are sorted on the warehouse header, such as Item or Document.;
                ApplicationArea=#Warehouse;
                SourceExpr="Sorting Method";
                OnValidate=BEGIN
                             SortingMethodOnAfterValidate;
                           END;

                ImplicitType=Option }

    { 97  ;1   ;Part      ;
                Name=WhseActivityLines;
                ApplicationArea=#Warehouse;
                SubPageView=SORTING("Activity Type","No.","Sorting Sequence No.")
                            WHERE(Breakbulk=CONST(false));
                SubPageLink="Activity Type"=FIELD(Type),
                            "No."=FIELD("No.");
                PagePartID="Invt. Movement Subform";
                PartType=Page }

    { 1900000007;0;Container;
                Name=Container1900000007;
                ContainerType=FactBoxArea }

    { 3   ;1   ;Part      ;
                Name=Part3;
                ApplicationArea=#ItemTracking;
                SubPageLink="Item No."=FIELD("Item No."),
                            "Variant Code"=FIELD("Variant Code"),
                            "Location Code"=FIELD("Location Code");
                PagePartID="Lot Numbers by Bin FactBox";
                ProviderID=97;
                Visible=False;
                PartType=Page }

    { 1900383207;1;Part   ;
                Name=Part1900383207;
                Visible=FALSE;
                PartType=System;
                SystemPartID=RecordLinks }

    { 1905767507;1;Part   ;
                Name=Part1905767507;
                Visible=TRUE;
                PartType=System;
                SystemPartID=Notes }

  }
  CODE
  {
    VAR
      WhseDocPrint@1000 : Codeunit "Warehouse Document-Print";
      WMSMgt@1001 : Codeunit "WMS Management";
      Text001@1002 : TextConst 'ENU=You cannot use this function if the lines already exist.';

    LOCAL PROCEDURE AutofillQtyToHandle@1();
    BEGIN
      CurrPage.WhseActivityLines.PAGE.AutofillQtyToHandle;
    END;

    LOCAL PROCEDURE DeleteQtyToHandle@2();
    BEGIN
      CurrPage.WhseActivityLines.PAGE.DeleteQtyToHandle;
    END;

    LOCAL PROCEDURE RegisterActivityYesNo@3();
    BEGIN
      CurrPage.WhseActivityLines.PAGE.RegisterActivityYesNo;
    END;

    LOCAL PROCEDURE SourceNoOnAfterValidate@19036011();
    BEGIN
      CurrPage.UPDATE;
      CurrPage.WhseActivityLines.PAGE.UpdateForm;
    END;

    LOCAL PROCEDURE SortingMethodOnAfterValidate@19063061();
    BEGIN
      CurrPage.UPDATE;
    END;

    BEGIN
    END.
  }
}

