OBJECT Codeunit 57 Document Totals
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TotalVATLbl@1002 : TextConst 'ENU=Total VAT';
      TotalAmountInclVatLbl@1001 : TextConst 'ENU=Total Incl. VAT';
      TotalAmountExclVATLbl@1000 : TextConst 'ENU=Total Excl. VAT';
      InvoiceDiscountAmountLbl@1004 : TextConst 'ENU=Invoice Discount Amount';
      RefreshMsgTxt@1005 : TextConst 'ENU=Totals or discounts may not be up-to-date. Choose the link to update.';
      PreviousTotalSalesHeader@1006 : Record "Sales Header";
      PreviousTotalPurchaseHeader@1007 : Record "Purchase Header";
      ForceTotalsRecalculation@1008 : Boolean;
      PreviousTotalSalesVATDifference@1009 : Decimal;
      PreviousTotalPurchVATDifference@1010 : Decimal;
      TotalLineAmountLbl@1011 : TextConst 'ENU=Subtotal';

    [External]
    PROCEDURE CalculateSalesTotals@11(VAR TotalSalesLine@1000 : Record "Sales Line";VAR VATAmount@1001 : Decimal;VAR SalesLine@1002 : Record "Sales Line");
    BEGIN
      TotalSalesLine.SETRANGE("Document Type",SalesLine."Document Type");
      TotalSalesLine.SETRANGE("Document No.",SalesLine."Document No.");
      TotalSalesLine.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
      VATAmount := TotalSalesLine."Amount Including VAT" - TotalSalesLine.Amount;
    END;

    [External]
    PROCEDURE CalculatePostedSalesInvoiceTotals@1(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header";VAR VATAmount@1001 : Decimal;SalesInvoiceLine@1002 : Record "Sales Invoice Line");
    BEGIN
      if SalesInvoiceHeader.GET(SalesInvoiceLine."Document No.") then begin
        SalesInvoiceHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := SalesInvoiceHeader."Amount Including VAT" - SalesInvoiceHeader.Amount;
      end;
    END;

    [External]
    PROCEDURE CalculatePostedSalesCreditMemoTotals@2(VAR SalesCrMemoHeader@1000 : Record "Sales Cr.Memo Header";VAR VATAmount@1001 : Decimal;SalesCrMemoLine@1002 : Record "Sales Cr.Memo Line");
    BEGIN
      if SalesCrMemoHeader.GET(SalesCrMemoLine."Document No.") then begin
        SalesCrMemoHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := SalesCrMemoHeader."Amount Including VAT" - SalesCrMemoHeader.Amount;
      end;
    END;

    LOCAL PROCEDURE CalcTotalPurchVATDifference@21(PurchHeader@1000 : Record "Purchase Header") : Decimal;
    VAR
      PurchLine@1001 : Record "Purchase Line";
    BEGIN
      with PurchLine do begin
        SETRANGE("Document Type",PurchHeader."Document Type");
        SETRANGE("Document No.",PurchHeader."No.");
        CALCSUMS("VAT Difference");
        exit("VAT Difference");
      end;
    END;

    LOCAL PROCEDURE CalcTotalSalesVATDifference@3(SalesHeader@1000 : Record "Sales Header") : Decimal;
    VAR
      SalesLine@1001 : Record "Sales Line";
    BEGIN
      with SalesLine do begin
        SETRANGE("Document Type",SalesHeader."Document Type");
        SETRANGE("Document No.",SalesHeader."No.");
        CALCSUMS("VAT Difference");
        exit("VAT Difference");
      end;
    END;

    [External]
    PROCEDURE SalesUpdateTotalsControls@12(CurrentSalesLine@1007 : Record "Sales Line";VAR TotalSalesHeader@1009 : Record "Sales Header";VAR TotalsSalesLine@1003 : Record "Sales Line";VAR RefreshMessageEnabled@1000 : Boolean;VAR ControlStyle@1001 : Text;VAR RefreshMessageText@1002 : Text;VAR InvDiscAmountEditable@1005 : Boolean;CurrPageEditable@1004 : Boolean;VAR VATAmount@1008 : Decimal);
    VAR
      SalesLine@1010 : Record "Sales Line";
      SalesCalcDiscountByType@1006 : Codeunit "Sales - Calc Discount By Type";
    BEGIN
      if CurrentSalesLine."Document No." = '' then
        exit;

      TotalSalesHeader.GET(CurrentSalesLine."Document Type",CurrentSalesLine."Document No.");
      RefreshMessageEnabled := SalesCalcDiscountByType.ShouldRedistributeInvoiceDiscountAmount(TotalSalesHeader);

      if not RefreshMessageEnabled then
        RefreshMessageEnabled := not SalesUpdateTotals(TotalSalesHeader,CurrentSalesLine,TotalsSalesLine,VATAmount);

      SalesLine.SETRANGE("Document Type",CurrentSalesLine."Document Type");
      SalesLine.SETRANGE("Document No.",CurrentSalesLine."Document No.");
      InvDiscAmountEditable := SalesLine.FINDFIRST and
        SalesCalcDiscountByType.InvoiceDiscIsAllowed(TotalSalesHeader."Invoice Disc. Code") and
        (not RefreshMessageEnabled) and CurrPageEditable;

      TotalControlsUpdateStyle(RefreshMessageEnabled,ControlStyle,RefreshMessageText);

      if RefreshMessageEnabled then begin
        TotalsSalesLine.Amount := 0;
        TotalsSalesLine."Amount Including VAT" := 0;
        VATAmount := 0;
        CLEAR(PreviousTotalSalesHeader);
      end;
    END;

    LOCAL PROCEDURE SalesUpdateTotals@31(VAR SalesHeader@1000 : Record "Sales Header";CurrentSalesLine@1005 : Record "Sales Line";VAR TotalsSalesLine@1004 : Record "Sales Line";VAR VATAmount@1006 : Decimal) : Boolean;
    BEGIN
      SalesHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");

      if SalesHeader."No." <> PreviousTotalSalesHeader."No." then
        ForceTotalsRecalculation := true;

      if (not ForceTotalsRecalculation) and
         (PreviousTotalSalesHeader.Amount = SalesHeader.Amount) and
         (PreviousTotalSalesHeader."Amount Including VAT" = SalesHeader."Amount Including VAT") and
         (PreviousTotalSalesVATDifference = CalcTotalSalesVATDifference(SalesHeader))
      then
        exit(true);

      ForceTotalsRecalculation := false;

      if not SalesCheckNumberOfLinesLimit(SalesHeader) then
        exit(false);

      SalesCalculateTotalsWithInvoiceRounding(CurrentSalesLine,VATAmount,TotalsSalesLine);
      exit(true);
    END;

    LOCAL PROCEDURE SalesCalculateTotalsWithInvoiceRounding@16(VAR TempCurrentSalesLine@1000 : TEMPORARY Record "Sales Line";VAR VATAmount@1001 : Decimal;VAR TempTotalSalesLine@1002 : TEMPORARY Record "Sales Line");
    VAR
      TempSalesLine@1004 : TEMPORARY Record "Sales Line";
      TempTotalSalesLineLCY@1005 : TEMPORARY Record "Sales Line";
      SalesHeader@1010 : Record "Sales Header";
      SalesPost@1003 : Codeunit "Sales-Post";
      VATAmountText@1006 : Text[30];
      ProfitLCY@1009 : Decimal;
      ProfitPct@1008 : Decimal;
      TotalAdjCostLCY@1007 : Decimal;
    BEGIN
      CLEAR(TempTotalSalesLine);
      if SalesHeader.GET(TempCurrentSalesLine."Document Type",TempCurrentSalesLine."Document No.") then begin
        SalesPost.GetSalesLines(SalesHeader,TempSalesLine,0);
        CLEAR(SalesPost);
        SalesPost.SumSalesLinesTemp(
          SalesHeader,TempSalesLine,0,TempTotalSalesLine,TempTotalSalesLineLCY,
          VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);

        if PreviousTotalSalesHeader."No." <> TempCurrentSalesLine."Document No." then begin
          PreviousTotalSalesHeader.GET(TempCurrentSalesLine."Document Type",TempCurrentSalesLine."Document No.");
          ForceTotalsRecalculation := true;
        end;
        PreviousTotalSalesHeader.CALCFIELDS(Amount,"Amount Including VAT");
        PreviousTotalSalesVATDifference := CalcTotalSalesVATDifference(PreviousTotalSalesHeader);
      end;
    END;

    [External]
    PROCEDURE SalesRedistributeInvoiceDiscountAmounts@4(VAR TempSalesLine@1003 : TEMPORARY Record "Sales Line";VAR VATAmount@1002 : Decimal;VAR TempTotalSalesLine@1001 : TEMPORARY Record "Sales Line");
    VAR
      SalesHeader@1000 : Record "Sales Header";
    BEGIN
      with SalesHeader do
        if GET(TempSalesLine."Document Type",TempSalesLine."Document No.") then begin
          TESTFIELD(Status,Status::Open);
          CALCFIELDS("Recalculate Invoice Disc.");
          if "Recalculate Invoice Disc." then
            CODEUNIT.RUN(CODEUNIT::"Sales - Calc Discount By Type",TempSalesLine);

          SalesCalculateTotalsWithInvoiceRounding(TempSalesLine,VATAmount,TempTotalSalesLine);
        end;
    END;

    [Internal]
    PROCEDURE PurchaseUpdateTotalsControls@25(CurrentPurchaseLine@1007 : Record "Purchase Line";VAR TotalPurchaseHeader@1009 : Record "Purchase Header";VAR TotalsPurchaseLine@1003 : Record "Purchase Line";VAR RefreshMessageEnabled@1000 : Boolean;VAR ControlStyle@1001 : Text;VAR RefreshMessageText@1002 : Text;VAR InvDiscAmountEditable@1005 : Boolean;VAR VATAmount@1008 : Decimal);
    VAR
      PurchCalcDiscByType@1006 : Codeunit "Purch - Calc Disc. By Type";
    BEGIN
      if CurrentPurchaseLine."Document No." = '' then
        exit;

      TotalPurchaseHeader.GET(CurrentPurchaseLine."Document Type",CurrentPurchaseLine."Document No.");
      RefreshMessageEnabled := PurchCalcDiscByType.ShouldRedistributeInvoiceDiscountAmount(TotalPurchaseHeader);

      if not RefreshMessageEnabled then
        RefreshMessageEnabled := not PurchaseUpdateTotals(TotalPurchaseHeader,CurrentPurchaseLine,TotalsPurchaseLine,VATAmount);

      InvDiscAmountEditable := PurchCalcDiscByType.InvoiceDiscIsAllowed(TotalPurchaseHeader."Invoice Disc. Code") and
        (not RefreshMessageEnabled);
      TotalControlsUpdateStyle(RefreshMessageEnabled,ControlStyle,RefreshMessageText);

      if RefreshMessageEnabled then begin
        TotalsPurchaseLine.Amount := 0;
        TotalsPurchaseLine."Amount Including VAT" := 0;
        VATAmount := 0;
        CLEAR(PreviousTotalPurchaseHeader);
      end;
    END;

    LOCAL PROCEDURE PurchaseUpdateTotals@24(VAR PurchaseHeader@1000 : Record "Purchase Header";CurrentPurchaseLine@1005 : Record "Purchase Line";VAR TotalsPurchaseLine@1004 : Record "Purchase Line";VAR VATAmount@1006 : Decimal) : Boolean;
    BEGIN
      PurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");

      if (PreviousTotalPurchaseHeader.Amount = PurchaseHeader.Amount) and
         (PreviousTotalPurchaseHeader."Amount Including VAT" = PurchaseHeader."Amount Including VAT") and
         (PreviousTotalPurchVATDifference = CalcTotalPurchVATDifference(PurchaseHeader))
      then
        exit(true);

      if not PurchaseCheckNumberOfLinesLimit(PurchaseHeader) then
        exit(false);

      PurchaseCalculateTotalsWithInvoiceRounding(CurrentPurchaseLine,VATAmount,TotalsPurchaseLine);
      exit(true);
    END;

    [Internal]
    PROCEDURE PurchaseCalculateTotalsWithInvoiceRounding@23(VAR TempCurrentPurchaseLine@1000 : TEMPORARY Record "Purchase Line";VAR VATAmount@1001 : Decimal;VAR TempTotalPurchaseLine@1002 : TEMPORARY Record "Purchase Line");
    VAR
      TempPurchaseLine@1004 : TEMPORARY Record "Purchase Line";
      TempTotalPurchaseLineLCY@1005 : TEMPORARY Record "Purchase Line";
      PurchaseHeader@1010 : Record "Purchase Header";
      PurchPost@1003 : Codeunit "Purch.-Post";
      VATAmountText@1006 : Text[30];
    BEGIN
      CLEAR(TempTotalPurchaseLine);
      if PurchaseHeader.GET(TempCurrentPurchaseLine."Document Type",TempCurrentPurchaseLine."Document No.") then begin
        PurchPost.GetPurchLines(PurchaseHeader,TempPurchaseLine,0);
        CLEAR(PurchPost);

        PurchPost.SumPurchLinesTemp(
          PurchaseHeader,TempPurchaseLine,0,TempTotalPurchaseLine,TempTotalPurchaseLineLCY,VATAmount,VATAmountText);

        if PreviousTotalPurchaseHeader."No." <> TempCurrentPurchaseLine."Document No." then
          PreviousTotalPurchaseHeader.GET(TempCurrentPurchaseLine."Document Type",TempCurrentPurchaseLine."Document No.");
        PreviousTotalPurchaseHeader.CALCFIELDS(Amount,"Amount Including VAT");
        PreviousTotalPurchVATDifference := CalcTotalPurchVATDifference(PreviousTotalPurchaseHeader);

        // calculate correct amount including vat if the VAT Calc type is Sales Tax
        if TempCurrentPurchaseLine."VAT Calculation Type" = TempCurrentPurchaseLine."VAT Calculation Type"::"Sales Tax" then
          CalculateSalesTaxForTempTotalPurchaseLine(PurchaseHeader,TempCurrentPurchaseLine,TempTotalPurchaseLine);
      end;
    END;

    [Internal]
    PROCEDURE PurchaseRedistributeInvoiceDiscountAmounts@22(VAR TempPurchaseLine@1003 : TEMPORARY Record "Purchase Line";VAR VATAmount@1002 : Decimal;VAR TempTotalPurchaseLine@1001 : TEMPORARY Record "Purchase Line");
    VAR
      PurchaseHeader@1000 : Record "Purchase Header";
    BEGIN
      with PurchaseHeader do
        if GET(TempPurchaseLine."Document Type",TempPurchaseLine."Document No.") then begin
          CALCFIELDS("Recalculate Invoice Disc.");
          if "Recalculate Invoice Disc." then
            CODEUNIT.RUN(CODEUNIT::"Purch - Calc Disc. By Type",TempPurchaseLine);

          PurchaseCalculateTotalsWithInvoiceRounding(TempPurchaseLine,VATAmount,TempTotalPurchaseLine);
        end;
    END;

    [External]
    PROCEDURE CalculatePurchaseTotals@27(VAR TotalPurchaseLine@1000 : Record "Purchase Line";VAR VATAmount@1001 : Decimal;VAR PurchaseLine@1002 : Record "Purchase Line");
    BEGIN
      TotalPurchaseLine.SETRANGE("Document Type",PurchaseLine."Document Type");
      TotalPurchaseLine.SETRANGE("Document No.",PurchaseLine."Document No.");
      TotalPurchaseLine.CALCSUMS("Line Amount",Amount,"Amount Including VAT","Inv. Discount Amount");
      VATAmount := TotalPurchaseLine."Amount Including VAT" - TotalPurchaseLine.Amount;
    END;

    [External]
    PROCEDURE CalculatePostedPurchInvoiceTotals@5(VAR PurchInvHeader@1000 : Record "Purch. Inv. Header";VAR VATAmount@1001 : Decimal;PurchInvLine@1002 : Record "Purch. Inv. Line");
    BEGIN
      if PurchInvHeader.GET(PurchInvLine."Document No.") then begin
        PurchInvHeader.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := PurchInvHeader."Amount Including VAT" - PurchInvHeader.Amount;
      end;
    END;

    [External]
    PROCEDURE CalculatePostedPurchCreditMemoTotals@7(VAR PurchCrMemoHdr@1000 : Record "Purch. Cr. Memo Hdr.";VAR VATAmount@1001 : Decimal;PurchCrMemoLine@1002 : Record "Purch. Cr. Memo Line");
    BEGIN
      if PurchCrMemoHdr.GET(PurchCrMemoLine."Document No.") then begin
        PurchCrMemoHdr.CALCFIELDS(Amount,"Amount Including VAT","Invoice Discount Amount");
        VATAmount := PurchCrMemoHdr."Amount Including VAT" - PurchCrMemoHdr.Amount;
      end;
    END;

    LOCAL PROCEDURE TotalControlsUpdateStyle@20(RefreshMessageEnabled@1000 : Boolean;VAR ControlStyle@1001 : Text;VAR RefreshMessageText@1002 : Text);
    BEGIN
      if RefreshMessageEnabled then begin
        ControlStyle := 'Subordinate';
        RefreshMessageText := RefreshMsgTxt;
      end else begin
        ControlStyle := 'Strong';
        RefreshMessageText := '';
      end;
    END;

    [External]
    PROCEDURE GetTotalVATCaption@10(CurrencyCode@1000 : Code[10]) : Text;
    BEGIN
      exit(GetCaptionClassWithCurrencyCode(TotalVATLbl,CurrencyCode));
    END;

    [External]
    PROCEDURE GetTotalInclVATCaption@13(CurrencyCode@1000 : Code[10]) : Text;
    BEGIN
      exit(GetCaptionClassWithCurrencyCode(TotalAmountInclVatLbl,CurrencyCode));
    END;

    [External]
    PROCEDURE GetTotalExclVATCaption@14(CurrencyCode@1000 : Code[10]) : Text;
    BEGIN
      exit(GetCaptionClassWithCurrencyCode(TotalAmountExclVATLbl,CurrencyCode));
    END;

    LOCAL PROCEDURE GetCaptionClassWithCurrencyCode@15(CaptionWithoutCurrencyCode@1001 : Text;CurrencyCode@1002 : Code[10]) : Text;
    BEGIN
      exit('3,' + GetCaptionWithCurrencyCode(CaptionWithoutCurrencyCode,CurrencyCode));
    END;

    LOCAL PROCEDURE GetCaptionWithCurrencyCode@28(CaptionWithoutCurrencyCode@1001 : Text;CurrencyCode@1002 : Code[10]) : Text;
    VAR
      GLSetup@1000 : Record "General Ledger Setup";
    BEGIN
      if CurrencyCode = '' then begin
        GLSetup.GET;
        CurrencyCode := GLSetup.GetCurrencyCode(CurrencyCode);
      end;

      if CurrencyCode <> '' then
        exit(CaptionWithoutCurrencyCode + STRSUBSTNO(' (%1)',CurrencyCode));

      exit(CaptionWithoutCurrencyCode);
    END;

    LOCAL PROCEDURE GetCaptionWithVATInfo@6(CaptionWithoutVATInfo@1001 : Text;IncludesVAT@1000 : Boolean) : Text;
    BEGIN
      if IncludesVAT then
        exit('2,1,' + CaptionWithoutVATInfo);

      exit('2,0,' + CaptionWithoutVATInfo);
    END;

    [External]
    PROCEDURE GetInvoiceDiscAmountWithVATCaption@8(IncludesVAT@1000 : Boolean) : Text;
    BEGIN
      exit(GetCaptionWithVATInfo(InvoiceDiscountAmountLbl,IncludesVAT));
    END;

    [External]
    PROCEDURE GetInvoiceDiscAmountWithVATAndCurrencyCaption@18(InvDiscAmountCaptionClassWithVAT@1000 : Text;CurrencyCode@1001 : Code[10]) : Text;
    BEGIN
      exit(GetCaptionWithCurrencyCode(InvDiscAmountCaptionClassWithVAT,CurrencyCode));
    END;

    [External]
    PROCEDURE GetTotalLineAmountWithVATAndCurrencyCaption@32(CurrencyCode@1001 : Code[10];IncludesVAT@1000 : Boolean) : Text;
    BEGIN
      exit(GetCaptionWithCurrencyCode(CAPTIONCLASSTRANSLATE(GetCaptionWithVATInfo(TotalLineAmountLbl,IncludesVAT)),CurrencyCode));
    END;

    [External]
    PROCEDURE SalesCheckNumberOfLinesLimit@17(SalesHeader@1001 : Record "Sales Header") : Boolean;
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETFILTER(Type,'<>%1',SalesLine.Type::" ");
      SalesLine.SETFILTER("No.",'<>%1','');

      exit(SalesLine.COUNT <= 100);
    END;

    [External]
    PROCEDURE PurchaseCheckNumberOfLinesLimit@9(PurchaseHeader@1001 : Record "Purchase Header") : Boolean;
    VAR
      PurchaseLine@1000 : Record "Purchase Line";
    BEGIN
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETFILTER(Type,'<>%1',PurchaseLine.Type::" ");
      PurchaseLine.SETFILTER("No.",'<>%1','');

      exit(PurchaseLine.COUNT <= 100);
    END;

    LOCAL PROCEDURE CalculateSalesTaxForTempTotalPurchaseLine@26(PurchaseHeader@1000 : Record "Purchase Header";CurrentPurchaseLine@1001 : Record "Purchase Line";VAR TempTotalPurchaseLine@1002 : TEMPORARY Record "Purchase Line");
    VAR
      Currency@1003 : Record Currency;
      SalesTaxCalculate@1004 : Codeunit "Sales Tax Calculate";
      TotalVATAmount@1005 : Decimal;
    BEGIN
      if PurchaseHeader."Currency Code" = '' then
        Currency.InitRoundingPrecision
      else
        Currency.GET(PurchaseHeader."Currency Code");

      CurrentPurchaseLine.SETRANGE("Document No.",CurrentPurchaseLine."Document No.");
      CurrentPurchaseLine.SETRANGE("Document Type",CurrentPurchaseLine."Document Type");
      CurrentPurchaseLine.FINDSET;
      TotalVATAmount := 0;

      // Loop through all purchase lines and calculate correct sales tax.
      repeat
        TotalVATAmount := TotalVATAmount + ROUND(
            SalesTaxCalculate.CalculateTax(
              CurrentPurchaseLine."Tax Area Code",CurrentPurchaseLine."Tax Group Code",CurrentPurchaseLine."Tax Liable",
              PurchaseHeader."Posting Date",
              CurrentPurchaseLine."Line Amount" - CurrentPurchaseLine."Inv. Discount Amount",
              CurrentPurchaseLine."Quantity (Base)",PurchaseHeader."Currency Factor"),
            Currency."Amount Rounding Precision");
      until CurrentPurchaseLine.NEXT = 0;

      TempTotalPurchaseLine."Amount Including VAT" := TempTotalPurchaseLine."Line Amount" -
        TempTotalPurchaseLine."Inv. Discount Amount" + TotalVATAmount;
    END;

    BEGIN
    END.
  }
}

