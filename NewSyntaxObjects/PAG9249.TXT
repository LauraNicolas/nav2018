OBJECT Page 9249 Analysis by Dimensions Matrix
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Editable=false;
    CaptionML=ENU=Analysis by Dimensions Matrix;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable="Dimension Code Buffer";
    DataCaptionExpr=AnalysisViewCode;
    PageType=List;
    SourceTableTemporary=true;
    OnInit=BEGIN
             Field32Visible := true;
             Field31Visible := true;
             Field30Visible := true;
             Field29Visible := true;
             Field28Visible := true;
             Field27Visible := true;
             Field26Visible := true;
             Field25Visible := true;
             Field24Visible := true;
             Field23Visible := true;
             Field22Visible := true;
             Field21Visible := true;
             Field20Visible := true;
             Field19Visible := true;
             Field18Visible := true;
             Field17Visible := true;
             Field16Visible := true;
             Field15Visible := true;
             Field14Visible := true;
             Field13Visible := true;
             Field12Visible := true;
             Field11Visible := true;
             Field10Visible := true;
             Field9Visible := true;
             Field8Visible := true;
             Field7Visible := true;
             Field6Visible := true;
             Field5Visible := true;
             Field4Visible := true;
             Field3Visible := true;
             Field2Visible := true;
             Field1Visible := true;
           END;

    OnOpenPage=VAR
                 CashFlowForecast@1000 : Record "Cash Flow Forecast";
                 GLAcc@1001 : Record "G/L Account";
                 FileManagement@1002 : Codeunit "File Management";
               BEGIN
                 CanRunDotNet := FileManagement.CanRunDotNetOnClient;
                 MATRIX_NoOfMatrixColumns := ARRAYLEN(MATRIX_CellData);

                 ValidateAnalysisViewCode;

                 InitRec(Rec,LineDimOption);
                 InitRec(MatrixRecord,ColumnDimOption);

                 if (LineDimCode = '') and (ColumnDimCode = '') then begin
                   if GLAccountSource then
                     LineDimCode := GLAcc.TABLECAPTION
                   else
                     LineDimCode := CashFlowForecast.TABLECAPTION;
                   ColumnDimCode := Text000;
                 end;

                 CalculateClosingDateFilter;

                 SetVisible;
                 if LineDimOption = LineDimOption::Period then
                   Code := '';
               END;

    OnFindRecord=BEGIN
                   exit(FindRec(LineDimOption,Rec,Which));
                 END;

    OnNextRecord=BEGIN
                   exit(NextRec(LineDimOption,Rec,Steps));
                 END;

    OnAfterGetRecord=VAR
                       MATRIX_CurrentColumnOrdinal@1043 : Integer;
                       MATRIX_Steps@1044 : Integer;
                     BEGIN
                       Amount := MatrixMgt.RoundValue(CalcAmount(false),RoundingFactor);

                       MATRIX_CurrentColumnOrdinal := 0;
                       if MATRIX_PrimKeyFirstCol <> '' then
                         MatrixRecord.SETPOSITION(MATRIX_PrimKeyFirstCol);
                       if MATRIX_OnFindRecord('=><') then begin
                         MATRIX_CurrentColumnOrdinal := 1;

                         repeat
                           MATRIX_ColumnOrdinal := MATRIX_CurrentColumnOrdinal;
                           MATRIX_OnAfterGetRecord;
                           MATRIX_Steps := MATRIX_OnNextRecord(1);
                           MATRIX_CurrentColumnOrdinal := MATRIX_CurrentColumnOrdinal + MATRIX_Steps;
                         until (MATRIX_CurrentColumnOrdinal - MATRIX_Steps = MATRIX_NoOfMatrixColumns) or (MATRIX_Steps = 0);
                         if MATRIX_CurrentColumnOrdinal <> 1 then
                           MATRIX_OnNextRecord(1 - MATRIX_CurrentColumnOrdinal);
                       end;

                       SetVisible;
                       FormatLine;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      Name=ActionContainer1900000003;
                      ActionContainerType=RelatedInformation }
      { 3       ;1   ;ActionGroup;
                      Name=&Actions;
                      CaptionML=ENU=&Actions;
                      Image=Action }
      { 5       ;2   ;Action    ;
                      Name=ExportToExcel;
                      CaptionML=ENU=Export to Excel;
                      ToolTipML=ENU=Export the information in the analysis report to Excel.;
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      Visible=CanRunDotNet;
                      Image=ExportToExcel;
                      PromotedCategory=Process;
                      OnAction=VAR
                                 AnalysisViewEntry@1001 : Record "Analysis View Entry";
                                 AnalysisViewToExcel@1000 : Codeunit "Export Analysis View";
                               BEGIN
                                 SetCommonFilters(AnalysisViewEntry);
                                 AnalysisViewEntry.FIND('-');
                                 AnalysisViewToExcel.ExportData(
                                   AnalysisViewEntry,LineDimCode,ColumnDimCode,ShowOppositeSign,
                                   ShowInAddCurr,AmountField,PeriodType,ShowColumnName,DateFilter,AccountFilter,BudgetFilter,
                                   Dim1Filter,Dim2Filter,Dim3Filter,Dim4Filter,AmountType,ClosingEntryFilter,ShowActualBudg,BusUnitFilter);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                Name=Group1;
                IndentationColumnName=Indentation;
                IndentationControls=Name;
                GroupType=Repeater }

    { 20  ;2   ;Field     ;
                Name=Code;
                ToolTipML=ENU=Specifies the code of the record.;
                ApplicationArea=#Suite;
                SourceExpr=Code;
                Style=Strong;
                StyleExpr=Emphasize;
                OnLookup=BEGIN
                           LookUpCode(LineDimOption,LineDimCode,Code);
                         END;

                ImplicitType=Code20 }

    { 22  ;2   ;Field     ;
                Name=Name;
                ToolTipML=ENU=Specifies the name of the record.;
                ApplicationArea=#Suite;
                SourceExpr=Name;
                Style=Strong;
                StyleExpr=Emphasize;
                ImplicitType=Text50 }

    { 24  ;2   ;Field     ;
                Name=TotalAmount;
                CaptionML=ENU=Total Amount;
                ToolTipML=ENU=Specifies the total amount for the amount type that you select in the Show field in the Options FastTab.;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=+Amount;
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              DrillDown(false);
                            END;
                             }

    { 1011;2   ;Field     ;
                Name=Field1;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[1];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[1];
                Visible=Field1Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(1);
                              DrillDown(true);
                            END;
                             }

    { 1012;2   ;Field     ;
                Name=Field2;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[2];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[2];
                Visible=Field2Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(2);
                              DrillDown(true);
                            END;
                             }

    { 1013;2   ;Field     ;
                Name=Field3;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[3];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[3];
                Visible=Field3Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(3);
                              DrillDown(true);
                            END;
                             }

    { 1014;2   ;Field     ;
                Name=Field4;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[4];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[4];
                Visible=Field4Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(4);
                              DrillDown(true);
                            END;
                             }

    { 1015;2   ;Field     ;
                Name=Field5;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[5];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[5];
                Visible=Field5Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(5);
                              DrillDown(true);
                            END;
                             }

    { 1016;2   ;Field     ;
                Name=Field6;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[6];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[6];
                Visible=Field6Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(6);
                              DrillDown(true);
                            END;
                             }

    { 1017;2   ;Field     ;
                Name=Field7;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[7];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[7];
                Visible=Field7Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(7);
                              DrillDown(true);
                            END;
                             }

    { 1018;2   ;Field     ;
                Name=Field8;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[8];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[8];
                Visible=Field8Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(8);
                              DrillDown(true);
                            END;
                             }

    { 1019;2   ;Field     ;
                Name=Field9;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[9];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[9];
                Visible=Field9Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(9);
                              DrillDown(true);
                            END;
                             }

    { 1020;2   ;Field     ;
                Name=Field10;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[10];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[10];
                Visible=Field10Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(10);
                              DrillDown(true);
                            END;
                             }

    { 1021;2   ;Field     ;
                Name=Field11;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[11];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[11];
                Visible=Field11Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(11);
                              DrillDown(true);
                            END;
                             }

    { 1022;2   ;Field     ;
                Name=Field12;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[12];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[12];
                Visible=Field12Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(12);
                              DrillDown(true);
                            END;
                             }

    { 1023;2   ;Field     ;
                Name=Field13;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[13];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[13];
                Visible=Field13Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(13);
                              DrillDown(true);
                            END;
                             }

    { 1024;2   ;Field     ;
                Name=Field14;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[14];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[14];
                Visible=Field14Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(14);
                              DrillDown(true);
                            END;
                             }

    { 1025;2   ;Field     ;
                Name=Field15;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[15];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[15];
                Visible=Field15Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(15);
                              DrillDown(true);
                            END;
                             }

    { 1026;2   ;Field     ;
                Name=Field16;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[16];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[16];
                Visible=Field16Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnAssistEdit=BEGIN
                               MATRIX_UpdateMatrixRecord(16);
                               DrillDown(true);
                             END;
                              }

    { 1027;2   ;Field     ;
                Name=Field17;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[17];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[17];
                Visible=Field17Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(17);
                              DrillDown(true);
                            END;
                             }

    { 1028;2   ;Field     ;
                Name=Field18;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[18];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[18];
                Visible=Field18Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(18);
                              DrillDown(true);
                            END;
                             }

    { 1029;2   ;Field     ;
                Name=Field19;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[19];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[19];
                Visible=Field19Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(19);
                              DrillDown(true);
                            END;
                             }

    { 1030;2   ;Field     ;
                Name=Field20;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[20];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[20];
                Visible=Field20Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(20);
                              DrillDown(true);
                            END;
                             }

    { 1031;2   ;Field     ;
                Name=Field21;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[21];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[21];
                Visible=Field21Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(21);
                              DrillDown(true);
                            END;
                             }

    { 1032;2   ;Field     ;
                Name=Field22;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[22];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[22];
                Visible=Field22Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(22);
                              DrillDown(true);
                            END;
                             }

    { 1033;2   ;Field     ;
                Name=Field23;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[23];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[23];
                Visible=Field23Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(23);
                              DrillDown(true);
                            END;
                             }

    { 1034;2   ;Field     ;
                Name=Field24;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[24];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[24];
                Visible=Field24Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(24);
                              DrillDown(true);
                            END;
                             }

    { 1035;2   ;Field     ;
                Name=Field25;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[25];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[25];
                Visible=Field25Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(25);
                              DrillDown(true);
                            END;
                             }

    { 1036;2   ;Field     ;
                Name=Field26;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[26];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[26];
                Visible=Field26Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(26);
                              DrillDown(true);
                            END;
                             }

    { 1037;2   ;Field     ;
                Name=Field27;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[27];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[27];
                Visible=Field27Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(27);
                              DrillDown(true);
                            END;
                             }

    { 1038;2   ;Field     ;
                Name=Field28;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[28];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[28];
                Visible=Field28Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(28);
                              DrillDown(true);
                            END;
                             }

    { 1039;2   ;Field     ;
                Name=Field29;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[29];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[29];
                Visible=Field29Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(29);
                              DrillDown(true);
                            END;
                             }

    { 1040;2   ;Field     ;
                Name=Field30;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[30];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[30];
                Visible=Field30Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(30);
                              DrillDown(true);
                            END;
                             }

    { 1041;2   ;Field     ;
                Name=Field31;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[31];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[31];
                Visible=Field31Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(31);
                              DrillDown(true);
                            END;
                             }

    { 1042;2   ;Field     ;
                Name=Field32;
                ApplicationArea=#Suite;
                BlankZero=true;
                SourceExpr=MATRIX_CellData[32];
                AutoFormatType=10;
                AutoFormatExpr=FormatStr;
                CaptionClass='3,' + ColumnCaptions[32];
                Visible=Field32Visible;
                Style=Strong;
                StyleExpr=Emphasize;
                OnDrillDown=BEGIN
                              MATRIX_UpdateMatrixRecord(32);
                              DrillDown(true);
                            END;
                             }

  }
  CODE
  {
    VAR
      Text000@1080 : TextConst 'ENU=Period';
      Text002@1082 : TextConst 'ENU=You have not yet defined an analysis view.';
      MatrixRecord@1003 : TEMPORARY Record "Dimension Code Buffer";
      GLSetup@1089 : Record "General Ledger Setup";
      AnalysisView@1091 : Record "Analysis View";
      AnalysisViewEntry@1092 : Record "Analysis View Entry";
      AnalysisViewBudgetEntry@1093 : Record "Analysis View Budget Entry";
      AVBreakdownBuffer@1094 : TEMPORARY Record "Dimension Code Amount Buffer";
      Currency@1095 : Record Currency;
      CurrExchRate@1096 : Record "Currency Exchange Rate";
      PeriodOption@1006 : Record Date;
      MatrixMgt@1005 : Codeunit "Matrix Management";
      AnalysisViewCode@1097 : Code[10];
      LineDimOption@1098 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';
      ColumnDimOption@1099 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';
      LineDimCode@1100 : Text[30];
      ColumnDimCode@1101 : Text[30];
      PeriodType@1102 : 'Day,Week,Month,Quarter,Year,"Accounting Period"';
      AmountType@1103 : '"Net Change","Balance at Date"';
      RoundingFactor@1104 : 'None,"1","1000","1000000"';
      AmountField@1105 : 'Amount,"Debit Amount","Credit Amount"';
      ShowActualBudg@1106 : '"Actual Amounts","Budgeted Amounts",Variance,"Variance%","Index%",Amounts';
      ShowInAddCurr@1107 : Boolean;
      ShowOppositeSign@1108 : Boolean;
      ClosingEntryFilter@1109 : 'Include,Exclude';
      ShowColumnName@1110 : Boolean;
      DateFilter@1111 : Text;
      CashFlowFilter@1025 : Text;
      ExcludeClosingDateFilter@1113 : Text;
      MATRIX_CellData@1128 : ARRAY [32] OF Decimal;
      MATRIX_PrimKeyFirstCol@1004 : Text[1024];
      AccountFilter@1114 : Text;
      BudgetFilter@1115 : Text;
      Dim1Filter@1116 : Text;
      Dim2Filter@1117 : Text;
      Dim3Filter@1118 : Text;
      Dim4Filter@1119 : Text;
      MatrixAmount@1121 : Decimal;
      CurrExchDate@1123 : Date;
      BusUnitFilter@1124 : Text;
      MATRIX_ColumnOrdinal@1126 : Integer;
      MATRIX_NoOfMatrixColumns@1127 : Integer;
      ColumnCaptions@1000 : ARRAY [32] OF Text[250];
      RoundingFactorFormatString@1039 : Text;
      GLAccountSource@1014 : Boolean;
      Field1Visible@19069335 : Boolean INDATASET;
      Field2Visible@19014807 : Boolean INDATASET;
      Field3Visible@19062679 : Boolean INDATASET;
      Field4Visible@19074839 : Boolean INDATASET;
      Field5Visible@19043543 : Boolean INDATASET;
      Field6Visible@19067287 : Boolean INDATASET;
      Field7Visible@19067863 : Boolean INDATASET;
      Field8Visible@19039959 : Boolean INDATASET;
      Field9Visible@19008663 : Boolean INDATASET;
      Field10Visible@19006501 : Boolean INDATASET;
      Field11Visible@19052468 : Boolean INDATASET;
      Field12Visible@19013039 : Boolean INDATASET;
      Field13Visible@19079726 : Boolean INDATASET;
      Field14Visible@19077225 : Boolean INDATASET;
      Field15Visible@19035896 : Boolean INDATASET;
      Field16Visible@19003763 : Boolean INDATASET;
      Field17Visible@19049730 : Boolean INDATASET;
      Field18Visible@19007213 : Boolean INDATASET;
      Field19Visible@19053180 : Boolean INDATASET;
      Field20Visible@19014629 : Boolean INDATASET;
      Field21Visible@19060596 : Boolean INDATASET;
      Field22Visible@19021167 : Boolean INDATASET;
      Field23Visible@19047854 : Boolean INDATASET;
      Field24Visible@19045353 : Boolean INDATASET;
      Field25Visible@19004024 : Boolean INDATASET;
      Field26Visible@19011891 : Boolean INDATASET;
      Field27Visible@19057858 : Boolean INDATASET;
      Field28Visible@19015341 : Boolean INDATASET;
      Field29Visible@19061308 : Boolean INDATASET;
      Field30Visible@19010597 : Boolean INDATASET;
      Field31Visible@19056564 : Boolean INDATASET;
      Field32Visible@19017135 : Boolean INDATASET;
      Text003@1001 : TextConst 'ENU=Unsupported Account Source %1.';
      Emphasize@1002 : Boolean;
      CanRunDotNet@1007 : Boolean;

    LOCAL PROCEDURE InitRec@42(VAR DimCodeBuf@1006 : Record "Dimension Code Buffer";DimOption@1005 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"');
    VAR
      GLAccount@1003 : Record "G/L Account";
      CashFlowAccount@1000 : Record "Cash Flow Account";
      BusinessUnit@1001 : Record "Business Unit";
      CashFlowForecast@1002 : Record "Cash Flow Forecast";
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            if AccountFilter <> '' then
              GLAccount.SETFILTER("No.",AccountFilter);
            if GLAccount.FINDSET then
              repeat
                CopyGLAccToBuf(GLAccount,DimCodeBuf);
              until GLAccount.NEXT = 0;
          end;
        DimOption::"Cash Flow Account":
          begin
            if AccountFilter <> '' then
              CashFlowAccount.SETFILTER("No.",AccountFilter);
            if CashFlowAccount.FINDSET then
              repeat
                CopyCFAccToBuf(CashFlowAccount,DimCodeBuf);
              until CashFlowAccount.NEXT = 0;
          end;
        DimOption::Period:
          begin
            PeriodOption.SETRANGE("Period Type",PeriodType);
            if DateFilter <> '' then begin
              PeriodOption.FILTERGROUP(2);
              PeriodOption.SETFILTER("Period Start",DateFilter);
              PeriodOption.FILTERGROUP(0);
            end;
          end;
        DimOption::"Business Unit":
          begin
            if BusUnitFilter <> '' then
              BusinessUnit.SETFILTER(Code,BusUnitFilter);
            if BusinessUnit.FINDSET then
              repeat
                CopyBusUnitToBuf(BusinessUnit,DimCodeBuf);
              until BusinessUnit.NEXT = 0;
          end;
        DimOption::"Cash Flow Forecast":
          begin
            if CashFlowFilter <> '' then
              CashFlowForecast.SETFILTER("No.",CashFlowFilter);
            if CashFlowForecast.FINDSET then
              repeat
                CopyCashFlowToBuf(CashFlowForecast,DimCodeBuf);
              until CashFlowForecast.NEXT = 0;
          end;
        DimOption::"Dimension 1":
          InitDimValue(
            DimCodeBuf,AnalysisView."Dimension 1 Code",Dim1Filter);
        DimOption::"Dimension 2":
          InitDimValue(
            DimCodeBuf,AnalysisView."Dimension 2 Code",Dim2Filter);
        DimOption::"Dimension 3":
          InitDimValue(
            DimCodeBuf,AnalysisView."Dimension 3 Code",Dim3Filter);
        DimOption::"Dimension 4":
          InitDimValue(
            DimCodeBuf,AnalysisView."Dimension 4 Code",Dim4Filter);
      end;
      if FINDFIRST then;
    END;

    LOCAL PROCEDURE FindRec@4(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1002 : Text[250]) : Boolean;
    BEGIN
      case DimOption of
        DimOption::"G/L Account",
        DimOption::"Cash Flow Account",
        DimOption::"Business Unit",
        DimOption::"Cash Flow Forecast",
        DimOption::"Dimension 1",
        DimOption::"Dimension 2",
        DimOption::"Dimension 3",
        DimOption::"Dimension 4":
          exit(DimCodeBuf.FIND(Which));
        DimOption::Period:
          // Make specifial length of Which parameter in order to find PeriodFormmgt.FindDate procedure
          exit(FindPeriod(DimCodeBuf,COPYSTR(Which,1,3)));
      end;
    END;

    LOCAL PROCEDURE NextRec@1138(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Steps@1002 : Integer) : Integer;
    BEGIN
      case DimOption of
        DimOption::"G/L Account",
        DimOption::"Cash Flow Account",
        DimOption::"Business Unit",
        DimOption::"Cash Flow Forecast",
        DimOption::"Dimension 1",
        DimOption::"Dimension 2",
        DimOption::"Dimension 3",
        DimOption::"Dimension 4":
          exit(DimCodeBuf.NEXT(Steps));
        DimOption::Period:
          exit(NextPeriod(DimCodeBuf,Steps));
      end;
    END;

    LOCAL PROCEDURE CopyGLAccToBuf@1145(VAR TheGLAcc@1000 : Record "G/L Account";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheGLAcc."No.";
        Name := TheGLAcc.Name;
        Totaling := TheGLAcc.Totaling;
        Indentation := TheGLAcc.Indentation;
        "Show in Bold" := TheGLAcc."Account Type" <> TheGLAcc."Account Type"::Posting;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CopyCFAccToBuf@1372(VAR TheCFAcc@1000 : Record "Cash Flow Account";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheCFAcc."No.";
        Name := TheCFAcc.Name;
        Totaling := TheCFAcc.Totaling;
        Indentation := TheCFAcc.Indentation;
        "Show in Bold" := TheCFAcc."Account Type" <> TheCFAcc."Account Type"::Entry;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CopyPeriodToBuf@1146(VAR ThePeriod@1000 : Record Date;VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    VAR
      Period2@1147 : Record Date;
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := FORMAT(ThePeriod."Period Start");
        "Period Start" := ThePeriod."Period Start";
        if ClosingEntryFilter = ClosingEntryFilter::Include then
          "Period End" := CLOSINGDATE(ThePeriod."Period End")
        else
          "Period End" := ThePeriod."Period End";
        if DateFilter <> '' then begin
          Period2.SETFILTER("Period End",DateFilter);
          if Period2.GETRANGEMAX("Period End") < "Period End" then
            "Period End" := Period2.GETRANGEMAX("Period End");
        end;
        Name := ThePeriod."Period Name";
        if INSERT then;
      end;
    END;

    LOCAL PROCEDURE CopyBusUnitToBuf@1148(VAR TheBusUnit@1000 : Record "Business Unit";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheBusUnit.Code;
        Name := TheBusUnit.Name;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CopyCashFlowToBuf@1375(VAR TheCashFlowForecast@1000 : Record "Cash Flow Forecast";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheCashFlowForecast."No.";
        Name := TheCashFlowForecast.Description;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CopyDimValueToBuf@1149(VAR TheDimVal@1000 : Record "Dimension Value";VAR TheDimCodeBuf@1001 : Record "Dimension Code Buffer");
    BEGIN
      with TheDimCodeBuf do begin
        INIT;
        Code := TheDimVal.Code;
        Name := TheDimVal.Name;
        Totaling := TheDimVal.Totaling;
        Indentation := TheDimVal.Indentation;
        "Show in Bold" :=
          TheDimVal."Dimension Value Type" <> TheDimVal."Dimension Value Type"::Standard;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE CalculateClosingDateFilter@1153();
    VAR
      AccountingPeriod@1154 : Record "Accounting Period";
      FirstRec@1155 : Boolean;
    BEGIN
      if ClosingEntryFilter = ClosingEntryFilter::Include then
        ExcludeClosingDateFilter := ''
      else begin
        AccountingPeriod.SETCURRENTKEY("New Fiscal Year");
        AccountingPeriod.SETRANGE("New Fiscal Year",true);
        FirstRec := true;
        if AccountingPeriod.FIND('-') then
          repeat
            if FirstRec then
              ExcludeClosingDateFilter :=
                STRSUBSTNO('<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1))
            else
              ExcludeClosingDateFilter :=
                ExcludeClosingDateFilter + STRSUBSTNO('&<>%1',CLOSINGDATE(AccountingPeriod."Starting Date" - 1));
            FirstRec := false;
          until AccountingPeriod.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE LookUpCode@1160(DimOption@1000 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';DimCode@1001 : Text[30];Code@1002 : Text[30]);
    VAR
      GLAcc@1161 : Record "G/L Account";
      BusUnit@1162 : Record "Business Unit";
      CFAccount@1385 : Record "Cash Flow Account";
      CashFlowForecast@1386 : Record "Cash Flow Forecast";
      DimVal@1163 : Record "Dimension Value";
    BEGIN
      case DimOption of
        DimOption::"G/L Account":
          begin
            GLAcc.GET(Code);
            PAGE.RUNMODAL(PAGE::"G/L Account List",GLAcc);
          end;
        DimOption::Period:
          ;
        DimOption::"Business Unit":
          begin
            BusUnit.GET(Code);
            PAGE.RUNMODAL(PAGE::"Business Unit List",BusUnit);
          end;
        DimOption::"Cash Flow Account":
          begin
            CFAccount.GET(Code);
            PAGE.RUNMODAL(PAGE::"Cash Flow Account List",CFAccount);
          end;
        DimOption::"Cash Flow Forecast":
          begin
            CashFlowForecast.GET(Code);
            PAGE.RUNMODAL(PAGE::"Cash Flow Forecast List",CashFlowForecast);
          end;
        DimOption::"Dimension 1",DimOption::"Dimension 2",
        DimOption::"Dimension 3",DimOption::"Dimension 4":
          begin
            DimVal.SETRANGE("Dimension Code",DimCode);
            DimVal.GET(DimCode,Code);

            PAGE.RUNMODAL(PAGE::"Dimension Value List",DimVal);
          end;
      end;
    END;

    LOCAL PROCEDURE SetCommonFilters@1168(VAR TheAnalysisViewEntry@1000 : Record "Analysis View Entry");
    VAR
      DateFilter2@1169 : Text;
    BEGIN
      with TheAnalysisViewEntry do begin
        if DateFilter = '' then
          DateFilter2 := ExcludeClosingDateFilter
        else begin
          if AmountType = AmountType::"Net Change" then begin
            DateFilter2 := DateFilter;
          end else begin
            SETFILTER("Posting Date",DateFilter);
            DateFilter2 := STRSUBSTNO('..%1',GETRANGEMAX("Posting Date"));
          end;
          if ExcludeClosingDateFilter <> '' then
            DateFilter2 := STRSUBSTNO('%1 & %2',DateFilter2,ExcludeClosingDateFilter);
        end;
        RESET;

        SETRANGE("Analysis View Code",AnalysisView.Code);
        if BusUnitFilter <> '' then
          SETFILTER("Business Unit Code",BusUnitFilter);
        if CashFlowFilter <> '' then
          SETFILTER("Cash Flow Forecast No.",CashFlowFilter);

        if AccountFilter <> '' then
          SETFILTER("Account No.",AccountFilter);

        SETRANGE("Account Source",AnalysisView."Account Source");

        SETFILTER("Posting Date",DateFilter2);
        if Dim1Filter <> '' then
          SETFILTER("Dimension 1 Value Code",GetDimValueTotaling(Dim1Filter,AnalysisView."Dimension 1 Code"));
        if Dim2Filter <> '' then
          SETFILTER("Dimension 2 Value Code",GetDimValueTotaling(Dim2Filter,AnalysisView."Dimension 2 Code"));
        if Dim3Filter <> '' then
          SETFILTER("Dimension 3 Value Code",GetDimValueTotaling(Dim3Filter,AnalysisView."Dimension 3 Code"));
        if Dim4Filter <> '' then
          SETFILTER("Dimension 4 Value Code",GetDimValueTotaling(Dim4Filter,AnalysisView."Dimension 4 Code"));
      end;
    END;

    LOCAL PROCEDURE SetDimFilters@1170(VAR TheAnalysisViewEntry@1000 : Record "Analysis View Entry";LineOrColumn@1001 : 'Line,Column');
    VAR
      DimCodeBuf@1002 : Record "Dimension Code Buffer";
      DimOption@1171 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account","Cash Flow Forecast"';
    BEGIN
      if LineOrColumn = LineOrColumn::Line then begin
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      end else begin
        DimCodeBuf := MatrixRecord;
        DimOption := ColumnDimOption;
      end;
      case DimOption of
        DimOption::"G/L Account",
        DimOption::"Cash Flow Account":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewEntry.SETRANGE("Account No.",DimCodeBuf.Code)
          else
            TheAnalysisViewEntry.SETFILTER("Account No.",DimCodeBuf.Totaling);
        DimOption::Period:
          begin
            if AmountType = AmountType::"Net Change" then
              TheAnalysisViewEntry.SETRANGE(
                "Posting Date",DimCodeBuf."Period Start",DimCodeBuf."Period End")
            else
              TheAnalysisViewEntry.SETRANGE("Posting Date",0D,DimCodeBuf."Period End");
            if (ClosingEntryFilter = ClosingEntryFilter::Exclude) and (ExcludeClosingDateFilter <> '') then
              TheAnalysisViewEntry.SETFILTER(
                "Posting Date",TheAnalysisViewEntry.GETFILTER("Posting Date") +
                '&' + ExcludeClosingDateFilter);
          end;
        DimOption::"Business Unit":
          TheAnalysisViewEntry.SETRANGE("Business Unit Code",DimCodeBuf.Code);
        DimOption::"Cash Flow Forecast":
          TheAnalysisViewEntry.SETRANGE("Cash Flow Forecast No.",DimCodeBuf.Code);
        DimOption::"Dimension 1":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewEntry.SETRANGE("Dimension 1 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewEntry.SETFILTER("Dimension 1 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 2":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewEntry.SETRANGE("Dimension 2 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewEntry.SETFILTER("Dimension 2 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 3":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewEntry.SETRANGE("Dimension 3 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewEntry.SETFILTER("Dimension 3 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 4":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewEntry.SETRANGE("Dimension 4 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewEntry.SETFILTER("Dimension 4 Value Code",DimCodeBuf.Totaling);
      end;
    END;

    LOCAL PROCEDURE SetCommonBudgetFilters@1173(VAR TheAnalysisViewBudgetEntry@1000 : Record "Analysis View Budget Entry");
    BEGIN
      with TheAnalysisViewBudgetEntry do begin
        RESET;
        SETRANGE("Analysis View Code",AnalysisView.Code);
        if BusUnitFilter <> '' then
          SETFILTER("Business Unit Code",BusUnitFilter);
        if BudgetFilter <> '' then
          SETFILTER("Budget Name",BudgetFilter);
        if AccountFilter <> '' then
          SETFILTER("G/L Account No.",AccountFilter);
        if DateFilter <> '' then
          SETFILTER("Posting Date",DateFilter);
        if Dim1Filter <> '' then
          SETFILTER("Dimension 1 Value Code",GetDimValueTotaling(Dim1Filter,AnalysisView."Dimension 1 Code"));
        if Dim2Filter <> '' then
          SETFILTER("Dimension 2 Value Code",GetDimValueTotaling(Dim2Filter,AnalysisView."Dimension 2 Code"));
        if Dim3Filter <> '' then
          SETFILTER("Dimension 3 Value Code",GetDimValueTotaling(Dim3Filter,AnalysisView."Dimension 3 Code"));
        if Dim4Filter <> '' then
          SETFILTER("Dimension 4 Value Code",GetDimValueTotaling(Dim4Filter,AnalysisView."Dimension 4 Code"));
      end;
    END;

    LOCAL PROCEDURE SetDimBudgetFilters@1174(VAR TheAnalysisViewBudgetEntry@1000 : Record "Analysis View Budget Entry";LineOrColumn@1001 : 'Line,Column');
    VAR
      DimCodeBuf@1002 : Record "Dimension Code Buffer";
      DimOption@1175 : '"G/L Account",Period,"Business Unit","Dimension 1","Dimension 2","Dimension 3","Dimension 4","Cash Flow Account",CashFlow';
    BEGIN
      if LineOrColumn = LineOrColumn::Line then begin
        DimCodeBuf := Rec;
        DimOption := LineDimOption;
      end else begin
        DimCodeBuf := MatrixRecord;
        DimOption := ColumnDimOption;
      end;
      case DimOption of
        DimOption::"G/L Account":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewBudgetEntry.SETRANGE("G/L Account No.",DimCodeBuf.Code)
          else
            TheAnalysisViewBudgetEntry.SETFILTER("G/L Account No.",DimCodeBuf.Totaling);
        DimOption::Period:
          if AmountType = AmountType::"Net Change" then
            TheAnalysisViewBudgetEntry.SETRANGE(
              "Posting Date",DimCodeBuf."Period Start",DimCodeBuf."Period End")
          else
            TheAnalysisViewBudgetEntry.SETRANGE("Posting Date",0D,DimCodeBuf."Period End");
        DimOption::"Business Unit":
          TheAnalysisViewBudgetEntry.SETRANGE("Business Unit Code",DimCodeBuf.Code);
        DimOption::"Dimension 1":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 1 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 1 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 2":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 2 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 2 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 3":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 3 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 3 Value Code",DimCodeBuf.Totaling);
        DimOption::"Dimension 4":
          if DimCodeBuf.Totaling = '' then
            TheAnalysisViewBudgetEntry.SETRANGE("Dimension 4 Value Code",DimCodeBuf.Code)
          else
            TheAnalysisViewBudgetEntry.SETFILTER("Dimension 4 Value Code",DimCodeBuf.Totaling);
      end;
    END;

    LOCAL PROCEDURE DrillDown@1177(SetColFilter@1000 : Boolean);
    BEGIN
      if ShowActualBudg = ShowActualBudg::"Actual Amounts" then begin
        SetCommonFilters(AnalysisViewEntry);
        SetDimFilters(AnalysisViewEntry,0);
        if SetColFilter then
          SetDimFilters(AnalysisViewEntry,1);
        PAGE.RUN(PAGE::"Analysis View Entries",AnalysisViewEntry);
      end;
      if ShowActualBudg = ShowActualBudg::"Budgeted Amounts" then begin
        SetCommonBudgetFilters(AnalysisViewBudgetEntry);
        SetDimBudgetFilters(AnalysisViewBudgetEntry,0);
        if SetColFilter then
          SetDimBudgetFilters(AnalysisViewBudgetEntry,1);
        PAGE.RUN(PAGE::"Analysis View Budget Entries",AnalysisViewBudgetEntry);
      end;
      if ShowActualBudg = ShowActualBudg::Amounts then begin
        SetCommonFilters(AnalysisViewEntry);
        SetDimFilters(AnalysisViewEntry,0);
        if SetColFilter then
          SetDimFilters(AnalysisViewEntry,1);
        PAGE.RUN(PAGE::"Analysis View Entries",AnalysisViewEntry);
      end;
    END;

    LOCAL PROCEDURE ValidateAnalysisViewCode@1178();
    BEGIN
      AnalysisView.Code := AnalysisViewCode;
      if not AnalysisView.FIND('=<>') then
        ERROR(Text002);
      AnalysisViewCode := AnalysisView.Code;

      case AnalysisView."Account Source" of
        AnalysisView."Account Source"::"G/L Account":
          GLAccountSource := true;
        AnalysisView."Account Source"::"Cash Flow Account":
          GLAccountSource := false;
        else
          ERROR(Text003,AnalysisView."Account Source");
      end;
    END;

    LOCAL PROCEDURE CalcAmount@1184(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1185 : Decimal;
      ColumnCode@1186 : Code[20];
    BEGIN
      if SetColFilter then
        ColumnCode := MatrixRecord.Code
      else
        ColumnCode := '';
      if AVBreakdownBuffer.GET(Code,ColumnCode) then
        exit(AVBreakdownBuffer.Amount);
      case ShowActualBudg of
        ShowActualBudg::"Actual Amounts":
          Amount := CalcActualAmount(SetColFilter);
        ShowActualBudg::Amounts:
          Amount := CalcActualAmount(SetColFilter);
        ShowActualBudg::"Budgeted Amounts":
          Amount := CalcBudgAmount(SetColFilter);
        ShowActualBudg::Variance:
          Amount := CalcActualAmount(SetColFilter) - CalcBudgAmount(SetColFilter);
        ShowActualBudg::"Variance%":
          begin
            Amount := CalcBudgAmount(SetColFilter);
            if Amount <> 0 then
              Amount := ROUND(100 * (CalcActualAmount(SetColFilter) - Amount) / Amount);
          end;
        ShowActualBudg::"Index%":
          begin
            Amount := CalcBudgAmount(SetColFilter);
            if Amount <> 0 then
              Amount := ROUND(100 * CalcActualAmount(SetColFilter) / Amount);
          end;
      end;
      if ShowOppositeSign then
        Amount := -Amount;
      AVBreakdownBuffer."Line Code" := Code;
      AVBreakdownBuffer."Column Code" := ColumnCode;
      AVBreakdownBuffer.Amount := Amount;
      AVBreakdownBuffer.INSERT;
      exit(Amount);
    END;

    LOCAL PROCEDURE CalcActualAmount@1187(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1188 : Decimal;
    BEGIN
      AnalysisViewEntry.RESET;
      SetCommonFilters(AnalysisViewEntry);
      SetDimFilters(AnalysisViewEntry,0);
      if SetColFilter then
        SetDimFilters(AnalysisViewEntry,1);
      if ShowInAddCurr then
        case AmountField of
          AmountField::Amount:
            begin
              AnalysisViewEntry.CALCSUMS("Add.-Curr. Amount");
              Amount := AnalysisViewEntry."Add.-Curr. Amount";
            end;
          AmountField::"Debit Amount":
            begin
              AnalysisViewEntry.CALCSUMS("Add.-Curr. Debit Amount");
              Amount := AnalysisViewEntry."Add.-Curr. Debit Amount";
            end;
          AmountField::"Credit Amount":
            begin
              AnalysisViewEntry.CALCSUMS("Add.-Curr. Credit Amount");
              Amount := AnalysisViewEntry."Add.-Curr. Credit Amount";
            end;
        end
      else
        case AmountField of
          AmountField::Amount:
            begin
              AnalysisViewEntry.CALCSUMS(Amount);
              Amount := AnalysisViewEntry.Amount;
            end;
          AmountField::"Debit Amount":
            begin
              AnalysisViewEntry.CALCSUMS("Debit Amount");
              Amount := AnalysisViewEntry."Debit Amount";
            end;
          AmountField::"Credit Amount":
            begin
              AnalysisViewEntry.CALCSUMS("Credit Amount");
              Amount := AnalysisViewEntry."Credit Amount";
            end;
        end;
      exit(Amount);
    END;

    LOCAL PROCEDURE CalcBudgAmount@1189(SetColFilter@1000 : Boolean) : Decimal;
    VAR
      Amount@1190 : Decimal;
    BEGIN
      AnalysisViewBudgetEntry.RESET;
      SetCommonBudgetFilters(AnalysisViewBudgetEntry);
      SetDimBudgetFilters(AnalysisViewBudgetEntry,0);
      if SetColFilter then
        SetDimBudgetFilters(AnalysisViewBudgetEntry,1);
      AnalysisViewBudgetEntry.CALCSUMS(Amount);
      Amount := AnalysisViewBudgetEntry.Amount;
      case AmountField of
        AmountField::"Debit Amount":
          if Amount < 0 then
            Amount := 0;
        AmountField::"Credit Amount":
          if Amount > 0 then
            Amount := 0
          else
            Amount := -Amount;
      end;
      if (Amount <> 0) and ShowInAddCurr then begin
        if AnalysisViewBudgetEntry.GETFILTER("Posting Date") = '' then
          CurrExchDate := WORKDATE
        else
          CurrExchDate := AnalysisViewBudgetEntry.GETRANGEMIN("Posting Date");
        Amount :=
          ROUND(
            CurrExchRate.ExchangeAmtLCYToFCY(
              CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
              CurrExchRate.ExchangeRate(CurrExchDate,GLSetup."Additional Reporting Currency")),
            Currency."Amount Rounding Precision");
      end;
      exit(Amount);
    END;

    LOCAL PROCEDURE MATRIX_UpdateMatrixRecord@1193(MATRIX_NewColumnOrdinal@1005 : Integer);
    BEGIN
      MATRIX_ColumnOrdinal := MATRIX_NewColumnOrdinal;
      MatrixRecord.SETPOSITION(MATRIX_PrimKeyFirstCol);
      MATRIX_OnFindRecord('=');
      if MATRIX_ColumnOrdinal <> 1 then
        MATRIX_OnNextRecord(MATRIX_ColumnOrdinal - 1);
    END;

    LOCAL PROCEDURE MATRIX_OnFindRecord@1195(Which@1007 : Text[1024]) : Boolean;
    BEGIN
      exit(FindRec(ColumnDimOption,MatrixRecord,Which));
    END;

    LOCAL PROCEDURE MATRIX_OnNextRecord@1196(Steps@1008 : Integer) : Integer;
    BEGIN
      exit(NextRec(ColumnDimOption,MatrixRecord,Steps));
    END;

    LOCAL PROCEDURE MATRIX_OnAfterGetRecord@1197();
    BEGIN
      MatrixAmount := MatrixMgt.RoundValue(CalcAmount(true),RoundingFactor);

      MATRIX_CellData[MATRIX_ColumnOrdinal] := MatrixAmount;
    END;

    [External]
    PROCEDURE SetVisible@8();
    BEGIN
      Field1Visible := ColumnCaptions[1] <> '';
      Field2Visible := ColumnCaptions[2] <> '';
      Field3Visible := ColumnCaptions[3] <> '';
      Field4Visible := ColumnCaptions[4] <> '';
      Field5Visible := ColumnCaptions[5] <> '';
      Field6Visible := ColumnCaptions[6] <> '';
      Field7Visible := ColumnCaptions[7] <> '';
      Field8Visible := ColumnCaptions[8] <> '';
      Field9Visible := ColumnCaptions[9] <> '';
      Field10Visible := ColumnCaptions[10] <> '';
      Field11Visible := ColumnCaptions[11] <> '';
      Field12Visible := ColumnCaptions[12] <> '';
      Field13Visible := ColumnCaptions[13] <> '';
      Field14Visible := ColumnCaptions[14] <> '';
      Field15Visible := ColumnCaptions[15] <> '';
      Field16Visible := ColumnCaptions[16] <> '';
      Field17Visible := ColumnCaptions[17] <> '';
      Field18Visible := ColumnCaptions[18] <> '';
      Field19Visible := ColumnCaptions[19] <> '';
      Field20Visible := ColumnCaptions[20] <> '';
      Field21Visible := ColumnCaptions[21] <> '';
      Field22Visible := ColumnCaptions[22] <> '';
      Field23Visible := ColumnCaptions[23] <> '';
      Field24Visible := ColumnCaptions[24] <> '';
      Field25Visible := ColumnCaptions[25] <> '';
      Field26Visible := ColumnCaptions[26] <> '';
      Field27Visible := ColumnCaptions[27] <> '';
      Field28Visible := ColumnCaptions[28] <> '';
      Field29Visible := ColumnCaptions[29] <> '';
      Field30Visible := ColumnCaptions[30] <> '';
      Field31Visible := ColumnCaptions[31] <> '';
      Field32Visible := ColumnCaptions[32] <> '';
    END;

    [External]
    PROCEDURE Load@3(LineDimOptionLocal@1015 : Option;ColumnDimOptionLocal@1000 : Option;LineDimCodeLocal@1020 : Text[30];ColumnDimCodeLocal@1019 : Text[30];NewPeriodType@1002 : Option;NewDateFilter@1003 : Text;NewAccountFilter@1004 : Text;NewBusUnitFilter@1001 : Text;NewBudgetFilter@1005 : Text;NewDim1Filter@1006 : Text;NewDim2Filter@1007 : Text;NewDim3Filter@1016 : Text;NewDim4Filter@1017 : Text;NewCashFlowFilter@1111 : Text);
    BEGIN
      LineDimOption := LineDimOptionLocal;
      ColumnDimOption := ColumnDimOptionLocal;
      LineDimCode := LineDimCodeLocal;
      ColumnDimCode := ColumnDimCodeLocal;
      PeriodType := NewPeriodType;
      DateFilter := NewDateFilter;
      AccountFilter := NewAccountFilter;
      BusUnitFilter := NewBusUnitFilter;
      BudgetFilter := NewBudgetFilter;
      CashFlowFilter := NewCashFlowFilter;
      Dim1Filter := NewDim1Filter;
      Dim2Filter := NewDim2Filter;
      Dim3Filter := NewDim3Filter;
      Dim4Filter := NewDim4Filter;
    END;

    [External]
    PROCEDURE Load2@1(NewAmountType@1000 : Option;ViewCode@1003 : Code[50];ShowOp@1002 : Boolean;ShowColumnNameLocal@1001 : Boolean;NewShowActualBudg@1010 : Option;NewAmountField@1009 : Option;NewClosingEntryFilter@1008 : Option;NewRoundingFactor@1007 : Option;NewShowInAddCurr@1006 : Boolean;NewMATRIX_ColumnCaptions@1005 : ARRAY [32] OF Text[250];NewPrimKeyFirstCol@1004 : Text[1024]);
    BEGIN
      AmountType := NewAmountType;
      ShowOppositeSign := ShowOp;
      AnalysisViewCode := ViewCode;
      ShowColumnName := ShowColumnNameLocal;
      ShowActualBudg := NewShowActualBudg;
      AmountField := NewAmountField;
      ClosingEntryFilter := NewClosingEntryFilter;
      RoundingFactor := NewRoundingFactor;
      ShowInAddCurr := NewShowInAddCurr;
      COPYARRAY(ColumnCaptions,NewMATRIX_ColumnCaptions,1);
      MATRIX_PrimKeyFirstCol := NewPrimKeyFirstCol;
      RoundingFactorFormatString := MatrixMgt.GetFormatString(RoundingFactor,false);
    END;

    LOCAL PROCEDURE FormatLine@5();
    BEGIN
      Emphasize := "Show in Bold";
    END;

    LOCAL PROCEDURE FindPeriod@37(VAR DimCodeBuf@1001 : Record "Dimension Code Buffer";Which@1000 : Text[3]) Found : Boolean;
    VAR
      PeriodFormMgt@1002 : Codeunit PeriodFormManagement;
    BEGIN
      EVALUATE(PeriodOption."Period Start",DimCodeBuf.Code);
      FilterLinePeriod(DimCodeBuf);
      Found := PeriodFormMgt.FindDate(Which,PeriodOption,PeriodType);
      if Found then
        CopyPeriodToBuf(PeriodOption,DimCodeBuf);
      exit(Found);
    END;

    LOCAL PROCEDURE NextPeriod@18(VAR DimCodeBuf@1002 : Record "Dimension Code Buffer";Steps@1000 : Integer) ResultSteps : Integer;
    VAR
      PeriodFormMgt@1170000003 : Codeunit PeriodFormManagement;
    BEGIN
      EVALUATE(PeriodOption."Period Start",DimCodeBuf.Code);
      FilterLinePeriod(DimCodeBuf);
      ResultSteps := PeriodFormMgt.NextDate(Steps,PeriodOption,PeriodType);
      if ResultSteps <> 0 then
        CopyPeriodToBuf(PeriodOption,DimCodeBuf);
      exit(ResultSteps);
    END;

    LOCAL PROCEDURE FilterLinePeriod@13(VAR DimCodeBuf@1000 : Record "Dimension Code Buffer");
    BEGIN
      if LineDimOption = LineDimOption::Period then begin
        PeriodOption.SETRANGE("Period Start");
        PeriodOption.SETRANGE("Period Name");
        PeriodOption.SETFILTER("Period Start",DimCodeBuf.GETFILTER(Code));
        PeriodOption.SETFILTER("Period Name",DimCodeBuf.GETFILTER(Name));
      end;
    END;

    LOCAL PROCEDURE InitDimValue@10(VAR DimensionCodeBuffer@1000 : Record "Dimension Code Buffer";DimensionCode@1003 : Code[20];DimensionFilter@1002 : Text);
    VAR
      DimensionValue@1001 : Record "Dimension Value";
    BEGIN
      if DimensionCode <> '' then begin
        DimensionValue.SETFILTER("Dimension Code",DimensionCode);
        if DimensionFilter <> '' then
          DimensionValue.SETFILTER(Code,DimensionFilter);
        if DimensionValue.FINDSET then
          repeat
            CopyDimValueToBuf(DimensionValue,DimensionCodeBuffer);
          until DimensionValue.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE FormatStr@9() : Text;
    BEGIN
      exit(RoundingFactorFormatString);
    END;

    LOCAL PROCEDURE GetDimValueTotaling@6(DimValueFilter@1002 : Text;DimensionCode@1000 : Code[20]) : Text;
    VAR
      DimensionValue@1001 : Record "Dimension Value";
    BEGIN
      if DimensionCode <> '' then begin
        DimensionValue.SETRANGE("Dimension Code",DimensionCode);
        DimensionValue.SETFILTER(Code,DimValueFilter);
        if DimensionValue.FINDFIRST then
          if DimensionValue.Totaling <> '' then
            exit(DimensionValue.Totaling);
      end;
      exit(DimValueFilter);
    END;

    BEGIN
    END.
  }
}

