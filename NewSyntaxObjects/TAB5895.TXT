OBJECT Table 5895 Inventory Adjustment Buffer
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Inventory Adjustment Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=ENU=Entry No. }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=ENU=Item No. }
    { 3   ;   ;Posting Date        ;Date          ;CaptionML=ENU=Posting Date }
    { 6   ;   ;Document No.        ;Code20        ;CaptionML=ENU=Document No. }
    { 8   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=ENU=Location Code }
    { 11  ;   ;Item Ledger Entry No.;Integer      ;TableRelation="Item Ledger Entry";
                                                   CaptionML=ENU=Item Ledger Entry No. }
    { 13  ;   ;Item Ledger Entry Quantity;Decimal ;CaptionML=ENU=Item Ledger Entry Quantity;
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Cost Amount (Actual);Decimal       ;CaptionML=ENU=Cost Amount (Actual);
                                                   AutoFormatType=1 }
    { 68  ;   ;Cost Amount (Actual) (ACY);Decimal ;CaptionML=ENU=Cost Amount (Actual) (ACY);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 98  ;   ;Expected Cost       ;Boolean       ;CaptionML=ENU=Expected Cost }
    { 100 ;   ;Valued By Average Cost;Boolean     ;CaptionML=ENU=Valued By Average Cost }
    { 104 ;   ;Valuation Date      ;Date          ;CaptionML=ENU=Valuation Date }
    { 105 ;   ;Entry Type          ;Option        ;CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=Direct Cost,Revaluation,Rounding,Indirect Cost,Variance;
                                                   OptionString="Direct Cost",Revaluation,Rounding,"Indirect Cost",Variance }
    { 106 ;   ;Variance Type       ;Option        ;CaptionML=ENU=Variance Type;
                                                   OptionCaptionML=ENU=" ,Purchase,Material,Capacity,Capacity Overhead,Manufacturing Overhead,Subcontracted";
                                                   OptionString=" ",Purchase,Material,Capacity,"Capacity Overhead","Manufacturing Overhead",Subcontracted }
    { 151 ;   ;Cost Amount (Expected);Decimal     ;CaptionML=ENU=Cost Amount (Expected);
                                                   AutoFormatType=1 }
    { 156 ;   ;Cost Amount (Expected) (ACY);Decimal;
                                                   CaptionML=ENU=Cost Amount (Expected) (ACY);
                                                   AutoFormatType=1;
                                                   AutoFormatExpr=GetCurrencyCode }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   CaptionML=ENU=Variant Code }
  }
  KEYS
  {
    {    ;"Entry No."                             ;Clustered=true }
    {    ;"Item Ledger Entry No."                 ;SumIndexFields="Cost Amount (Expected)","Cost Amount (Actual)","Cost Amount (Expected) (ACY)","Cost Amount (Actual) (ACY)" }
    {    ;"Item No.","Valuation Date","Location Code","Variant Code";
                                                   SumIndexFields="Cost Amount (Expected)","Cost Amount (Actual)","Cost Amount (Expected) (ACY)","Cost Amount (Actual) (ACY)","Item Ledger Entry Quantity" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      GLSetup@1001 : Record "General Ledger Setup";
      GLSetupRead@1000 : Boolean;

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      if not GLSetupRead then begin
        GLSetup.GET;
        GLSetupRead := true;
      end;
      exit(GLSetup."Additional Reporting Currency");
    END;

    [External]
    PROCEDURE CalcItemLedgEntryCost@5(ItemLedgEntryNo@1000 : Integer;Expected@1001 : Boolean);
    VAR
      ItemLedgEntryQty@1006 : Decimal;
      CostAmtActual@1002 : Decimal;
      CostAmtActualACY@1003 : Decimal;
      CostAmtExpected@1004 : Decimal;
      CostAmtExpectedACY@1005 : Decimal;
    BEGIN
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      if FIND('-') then
        repeat
          if "Expected Cost" = Expected then begin
            ItemLedgEntryQty := ItemLedgEntryQty + "Item Ledger Entry Quantity";
            CostAmtActual := CostAmtActual + "Cost Amount (Actual)";
            CostAmtActualACY := CostAmtActualACY + "Cost Amount (Actual) (ACY)";
            CostAmtExpected := CostAmtExpected + "Cost Amount (Expected)";
            CostAmtExpectedACY := CostAmtExpectedACY + "Cost Amount (Expected) (ACY)";
          end;
        until NEXT = 0;

      "Item Ledger Entry Quantity" := ItemLedgEntryQty;
      "Cost Amount (Actual)" := CostAmtActual;
      "Cost Amount (Actual) (ACY)" := CostAmtActualACY;
      "Cost Amount (Expected)" := CostAmtExpected;
      "Cost Amount (Expected) (ACY)" := CostAmtExpectedACY;
    END;

    [Internal]
    PROCEDURE SumCostsTillValuationDate@4(VAR ValueEntry@1000 : Record "Value Entry");
    VAR
      AccountingPeriod@1009 : Record "Accounting Period";
      PrevInvtAdjmtBufSum@1007 : Record "Inventory Adjustment Buffer";
      Item@1006 : Record Item;
      FromDate@1005 : Date;
      ToDate@1004 : Date;
      CostCalcIsChanged@1003 : Boolean;
      QtyFactor@1002 : Decimal;
    BEGIN
      Item.GET(ValueEntry."Item No.");
      if Item."Costing Method" = Item."Costing Method"::Average then
        ToDate := ValueEntry.GetAvgToDate(ValueEntry."Valuation Date")
      else
        ToDate := "Valuation Date";

      repeat
        if Item."Costing Method" = Item."Costing Method"::Average then
          FromDate := ValueEntry.GetAvgFromDate(ToDate,AccountingPeriod,CostCalcIsChanged)
        else
          FromDate := 0D;

        QtyFactor := 1;
        RESET;
        SETCURRENTKEY("Item No.","Valuation Date","Location Code","Variant Code");
        SETRANGE("Item No.",ValueEntry."Item No.");
        SETRANGE("Valuation Date",FromDate,ToDate);
        if (AccountingPeriod."Average Cost Calc. Type" =
            AccountingPeriod."Average Cost Calc. Type"::"Item & Location & Variant") or
           (Item."Costing Method" <> Item."Costing Method"::Average)
        then begin
          SETRANGE("Location Code",ValueEntry."Location Code");
          SETRANGE("Variant Code",ValueEntry."Variant Code");
        end else
          if CostCalcIsChanged then
            QtyFactor := ValueEntry.CalcQtyFactor(FromDate,ToDate);

        CALCSUMS(
          "Item Ledger Entry Quantity",
          "Cost Amount (Actual)","Cost Amount (Actual) (ACY)",
          "Cost Amount (Expected)","Cost Amount (Expected) (ACY)");

        "Item Ledger Entry Quantity" :=
          ROUND("Item Ledger Entry Quantity" * QtyFactor,0.00001) + PrevInvtAdjmtBufSum."Item Ledger Entry Quantity";
        "Cost Amount (Actual)" :=
          "Cost Amount (Actual)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Actual)";
        "Cost Amount (Expected)" :=
          "Cost Amount (Expected)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Expected)";
        "Cost Amount (Expected) (ACY)" :=
          "Cost Amount (Expected) (ACY)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Expected) (ACY)";
        "Cost Amount (Actual) (ACY)" :=
          "Cost Amount (Actual) (ACY)" * QtyFactor + PrevInvtAdjmtBufSum."Cost Amount (Actual) (ACY)";
        PrevInvtAdjmtBufSum := Rec;

        if FromDate <> 0D then
          ToDate := CALCDATE('<-1D>',FromDate);
      until FromDate = 0D;
    END;

    [External]
    PROCEDURE AddActualCostBuf@2(ValueEntry@1000 : Record "Value Entry";NewAdjustedCost@1002 : Decimal;NewAdjustedCostACY@1003 : Decimal;ItemLedgEntryPostingDate@1001 : Date);
    BEGIN
      RESET;
      "Entry No." := ValueEntry."Entry No.";
      if FIND then begin
        if ValueEntry."Expected Cost" then begin
          "Cost Amount (Expected)" := "Cost Amount (Expected)" + NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := "Cost Amount (Expected) (ACY)" + NewAdjustedCostACY;
        end else begin
          "Cost Amount (Actual)" := "Cost Amount (Actual)" + NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := "Cost Amount (Actual) (ACY)" + NewAdjustedCostACY;
        end;
        MODIFY;
      end else begin
        INIT;
        "Item No." := ValueEntry."Item No.";
        "Document No." := ValueEntry."Document No.";
        "Location Code" := ValueEntry."Location Code";
        "Variant Code" := ValueEntry."Variant Code";
        "Entry Type" := ValueEntry."Entry Type";
        "Item Ledger Entry No." := ValueEntry."Item Ledger Entry No.";
        "Expected Cost" := ValueEntry."Expected Cost";
        if ItemLedgEntryPostingDate = 0D then
          "Posting Date" := ValueEntry."Posting Date"
        else
          "Posting Date" := ItemLedgEntryPostingDate;
        if ValueEntry."Expected Cost" then begin
          "Cost Amount (Expected)" := NewAdjustedCost;
          "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
        end else begin
          "Cost Amount (Actual)" := NewAdjustedCost;
          "Cost Amount (Actual) (ACY)" := NewAdjustedCostACY;
        end;
        "Valued By Average Cost" := ValueEntry."Valued By Average Cost";
        "Valuation Date" := ValueEntry."Valuation Date";
        INSERT;
      end;
    END;

    [External]
    PROCEDURE AddBalanceExpectedCostBuf@6(ValueEntry@1002 : Record "Value Entry";NewAdjustedCost@1001 : Decimal;NewAdjustedCostACY@1000 : Decimal);
    BEGIN
      if ValueEntry."Expected Cost" or
         (ValueEntry."Entry Type" <> ValueEntry."Entry Type"::"Direct Cost")
      then
        exit;

      RESET;
      "Entry No." := ValueEntry."Entry No.";
      FIND;
      "Cost Amount (Expected)" := NewAdjustedCost;
      "Cost Amount (Expected) (ACY)" := NewAdjustedCostACY;
      MODIFY;
    END;

    [External]
    PROCEDURE AddOrderCost@3(ItemLedgEntryNo@1000 : Integer;EntryType@1002 : Option;VarianceType@1001 : Option;CostAmt@1003 : Decimal;CostAmtLCY@1004 : Decimal);
    VAR
      CopyOfInvtAdjmtBuf@1005 : Record "Inventory Adjustment Buffer";
    BEGIN
      CopyOfInvtAdjmtBuf.COPY(Rec);
      RESET;
      SETCURRENTKEY("Item Ledger Entry No.");
      SETRANGE("Item Ledger Entry No.",ItemLedgEntryNo);
      SETRANGE("Entry Type",EntryType);
      SETRANGE("Variance Type",VarianceType);
      if FINDFIRST then begin
        "Cost Amount (Actual)" += CostAmt;
        "Cost Amount (Actual) (ACY)" += CostAmtLCY;
        MODIFY;
      end else begin
        INIT;
        "Item Ledger Entry No." := ItemLedgEntryNo;
        "Entry Type" := EntryType;
        "Variance Type" := VarianceType;
        "Entry No." := GetLastNo + 1;
        "Cost Amount (Actual)" := CostAmt;
        "Cost Amount (Actual) (ACY)" := CostAmtLCY;
        INSERT;
      end;
      COPY(CopyOfInvtAdjmtBuf);
    END;

    LOCAL PROCEDURE GetLastNo@10() LastNo : Integer;
    VAR
      CopyOfInvtAdjmtBuf@1000 : Record "Inventory Adjustment Buffer";
    BEGIN
      CopyOfInvtAdjmtBuf.COPY(Rec);
      RESET;
      if FINDLAST then
        LastNo := "Entry No.";
      COPY(CopyOfInvtAdjmtBuf);
    END;

    BEGIN
    END.
  }
}

