OBJECT Codeunit 1550 Record Restriction Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Restricted Record"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      RecordRestrictedTxt@1000 : TextConst '@@@=You cannot use Customer 10000 for this action.;ENU=You cannot use %1 for this action.';
      RestrictLineUsageDetailsTxt@1001 : TextConst 'ENU=The restriction was imposed because the line requires approval.';
      RestrictBatchUsageDetailsTxt@1002 : TextConst 'ENU=The restriction was imposed because the journal batch requires approval.';

    [External]
    PROCEDURE RestrictRecordUsage@2(RecVar@1005 : Variant;RestrictionDetails@1002 : Text);
    VAR
      RestrictedRecord@1001 : Record "Restricted Record";
      RecRef@1003 : RecordRef;
    BEGIN
      RecRef.GETTABLE(RecVar);
      if RecRef.ISTEMPORARY then
        exit;

      RestrictedRecord.SETRANGE("Record ID",RecRef.RECORDID);
      if RestrictedRecord.FINDFIRST then begin
        RestrictedRecord.Details := COPYSTR(RestrictionDetails,1,MAXSTRLEN(RestrictedRecord.Details));
        RestrictedRecord.MODIFY(true);
      end else begin
        RestrictedRecord.INIT;
        RestrictedRecord."Record ID" := RecRef.RECORDID;
        RestrictedRecord.Details := COPYSTR(RestrictionDetails,1,MAXSTRLEN(RestrictedRecord.Details));
        RestrictedRecord.INSERT(true);
      end;
    END;

    [External]
    PROCEDURE AllowGenJournalBatchUsage@28(GenJournalBatch@1000 : Record "Gen. Journal Batch");
    VAR
      GenJournalLine@1001 : Record "Gen. Journal Line";
    BEGIN
      AllowRecordUsage(GenJournalBatch);

      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      if GenJournalLine.FINDSET then
        repeat
          AllowRecordUsage(GenJournalLine);
        until GenJournalLine.NEXT = 0;
    END;

    PROCEDURE AllowItemJournalBatchUsage@36(ItemJournalBatch@1000 : Record "Item Journal Batch");
    VAR
      ItemJournalLine@1001 : Record "Item Journal Line";
    BEGIN
      AllowRecordUsage(ItemJournalBatch);

      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalBatch."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalBatch.Name);
      if ItemJournalLine.FINDSET then
        repeat
          AllowRecordUsage(ItemJournalLine);
        until ItemJournalLine.NEXT = 0;
    END;

    [External]
    PROCEDURE AllowFAJournalBatchUsage@38(FAJournalBatch@1000 : Record "FA Journal Batch");
    VAR
      FAJournalLine@1001 : Record "FA Journal Line";
    BEGIN
      AllowRecordUsage(FAJournalBatch);

      FAJournalLine.SETRANGE("Journal Template Name",FAJournalBatch."Journal Template Name");
      FAJournalLine.SETRANGE("Journal Batch Name",FAJournalBatch.Name);
      if FAJournalLine.FINDSET then
        repeat
          AllowRecordUsage(FAJournalLine);
        until FAJournalLine.NEXT = 0;
    END;

    [External]
    PROCEDURE AllowRecordUsage@1(RecVar@1003 : Variant);
    VAR
      RestrictedRecord@1001 : Record "Restricted Record";
      RecRef@1000 : RecordRef;
    BEGIN
      RecRef.GETTABLE(RecVar);
      if RecRef.ISTEMPORARY then
        exit;

      RestrictedRecord.SETRANGE("Record ID",RecRef.RECORDID);
      RestrictedRecord.DELETEALL(true);
    END;

    LOCAL PROCEDURE UpdateRestriction@23(RecVar@1004 : Variant;xRecVar@1005 : Variant);
    VAR
      RestrictedRecord@1002 : Record "Restricted Record";
      RecRef@1000 : RecordRef;
      xRecRef@1001 : RecordRef;
    BEGIN
      xRecRef.GETTABLE(xRecVar);
      RecRef.GETTABLE(RecVar);

      if RecRef.ISTEMPORARY then
        exit;

      RestrictedRecord.SETRANGE("Record ID",xRecRef.RECORDID);
      RestrictedRecord.MODIFYALL("Record ID",RecRef.RECORDID);
    END;

    [EventSubscriber(Table,81,OnAfterInsertEvent)]
    [Internal]
    PROCEDURE RestrictGenJournalLineAfterInsert@26(VAR Rec@1000 : Record "Gen. Journal Line";RunTrigger@1001 : Boolean);
    BEGIN
      RestrictGenJournalLine(Rec);
    END;

    [EventSubscriber(Table,81,OnAfterModifyEvent)]
    [Internal]
    PROCEDURE RestrictGenJournalLineAfterModify@29(VAR Rec@1000 : Record "Gen. Journal Line";VAR xRec@1001 : Record "Gen. Journal Line";RunTrigger@1004 : Boolean);
    BEGIN
      if FORMAT(Rec) = FORMAT(xRec) then
        exit;
      RestrictGenJournalLine(Rec);
    END;

    LOCAL PROCEDURE RestrictGenJournalLine@17(VAR GenJournalLine@1000 : Record "Gen. Journal Line");
    VAR
      GenJournalBatch@1003 : Record "Gen. Journal Batch";
      ApprovalsMgmt@1002 : Codeunit "Approvals Mgmt.";
    BEGIN
      if GenJournalLine."System-Created Entry" or GenJournalLine.ISTEMPORARY then
        exit;

      if ApprovalsMgmt.IsGeneralJournalLineApprovalsWorkflowEnabled(GenJournalLine) then
        RestrictRecordUsage(GenJournalLine,RestrictLineUsageDetailsTxt);

      if GenJournalBatch.GET(GenJournalLine."Journal Template Name",GenJournalLine."Journal Batch Name") then
        if ApprovalsMgmt.IsGeneralJournalBatchApprovalsWorkflowEnabled(GenJournalBatch) then
          RestrictRecordUsage(GenJournalLine,RestrictBatchUsageDetailsTxt);
    END;

    LOCAL PROCEDURE CheckGenJournalBatchHasUsageRestrictions@19(GenJournalBatch@1000 : Record "Gen. Journal Batch");
    VAR
      GenJournalLine@1001 : Record "Gen. Journal Line";
    BEGIN
      CheckRecordHasUsageRestrictions(GenJournalBatch);

      GenJournalLine.SETRANGE("Journal Template Name",GenJournalBatch."Journal Template Name");
      GenJournalLine.SETRANGE("Journal Batch Name",GenJournalBatch.Name);
      if GenJournalLine.FINDSET then
        repeat
          CheckRecordHasUsageRestrictions(GenJournalLine);
        until GenJournalLine.NEXT = 0;
    END;

    [TryFunction]
    [External]
    PROCEDURE CheckRecordHasUsageRestrictions@4(RecVar@1004 : Variant);
    VAR
      RestrictedRecord@1001 : Record "Restricted Record";
      RecRef@1000 : RecordRef;
      ErrorMessage@1002 : Text;
    BEGIN
      RecRef.GETTABLE(RecVar);
      if RecRef.ISTEMPORARY then
        exit;

      RestrictedRecord.SETRANGE("Record ID",RecRef.RECORDID);
      if not RestrictedRecord.FINDFIRST then
        exit;

      ErrorMessage :=
        STRSUBSTNO(
          RecordRestrictedTxt,
          FORMAT(FORMAT(RestrictedRecord."Record ID",0,1))) + '\\' + RestrictedRecord.Details;

      ERROR(ErrorMessage);
    END;

    [EventSubscriber(Table,36,OnCheckSalesPostRestrictions)]
    [External]
    PROCEDURE CustomerCheckSalesPostRestrictions@3(VAR Sender@1000 : Record "Sales Header");
    VAR
      Customer@1001 : Record Customer;
    BEGIN
      Customer.GET(Sender."Sell-to Customer No.");
      CheckRecordHasUsageRestrictions(Customer);
      if Sender."Sell-to Customer No." = Sender."Bill-to Customer No." then
        exit;
      Customer.GET(Sender."Bill-to Customer No.");
      CheckRecordHasUsageRestrictions(Customer);
    END;

    [EventSubscriber(Table,38,OnCheckPurchasePostRestrictions)]
    [External]
    PROCEDURE VendorCheckPurchasePostRestrictions@43(VAR Sender@1000 : Record "Purchase Header");
    VAR
      Vendor@1001 : Record Vendor;
    BEGIN
      Vendor.GET(Sender."Buy-from Vendor No.");
      CheckRecordHasUsageRestrictions(Vendor);
      if Sender."Buy-from Vendor No." = Sender."Pay-to Vendor No." then
        exit;
      Vendor.GET(Sender."Pay-to Vendor No.");
      CheckRecordHasUsageRestrictions(Vendor);
    END;

    [EventSubscriber(Table,81,OnCheckGenJournalLinePostRestrictions)]
    [External]
    PROCEDURE CustomerCheckGenJournalLinePostRestrictions@5(VAR Sender@1000 : Record "Gen. Journal Line");
    VAR
      Customer@1001 : Record Customer;
    BEGIN
      if (Sender."Account Type" = Sender."Account Type"::Customer) and (Sender."Account No." <> '') then begin
        Customer.GET(Sender."Account No.");
        CheckRecordHasUsageRestrictions(Customer);
      end;

      if (Sender."Bal. Account Type" = Sender."Bal. Account Type"::Customer) and (Sender."Bal. Account No." <> '') then begin
        Customer.GET(Sender."Bal. Account No.");
        CheckRecordHasUsageRestrictions(Customer);
      end;
    END;

    [EventSubscriber(Table,81,OnCheckGenJournalLinePostRestrictions)]
    [External]
    PROCEDURE VendorCheckGenJournalLinePostRestrictions@35(VAR Sender@1000 : Record "Gen. Journal Line");
    VAR
      Vendor@1001 : Record Vendor;
    BEGIN
      if (Sender."Account Type" = Sender."Account Type"::Vendor) and (Sender."Account No." <> '') then begin
        Vendor.GET(Sender."Account No.");
        CheckRecordHasUsageRestrictions(Vendor);
      end;

      if (Sender."Bal. Account Type" = Sender."Bal. Account Type"::Vendor) and (Sender."Bal. Account No." <> '') then begin
        Vendor.GET(Sender."Bal. Account No.");
        CheckRecordHasUsageRestrictions(Vendor);
      end;
    END;

    [EventSubscriber(Table,83,OnCheckItemJournalLinePostRestrictions)]
    LOCAL PROCEDURE ItemJournalLineCheckItemPostRestrictions@34(VAR Sender@1000 : Record "Item Journal Line");
    VAR
      Item@1001 : Record Item;
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
      Item.GET(Sender."Item No.");
      CheckRecordHasUsageRestrictions(Item);
    END;

    [EventSubscriber(Table,81,OnCheckGenJournalLinePostRestrictions)]
    [External]
    PROCEDURE GenJournalLineCheckGenJournalLinePostRestrictions@10(VAR Sender@1000 : Record "Gen. Journal Line");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,81,OnCheckGenJournalLinePrintCheckRestrictions)]
    [External]
    PROCEDURE GenJournalLineCheckGenJournalLinePrintCheckRestrictions@21(VAR Sender@1000 : Record "Gen. Journal Line");
    BEGIN
      if Sender."Bank Payment Type" = Sender."Bank Payment Type"::"Computer Check" then
        CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,272,OnBeforeInsertEvent)]
    [External]
    PROCEDURE CheckPrintRestrictionsBeforeInsertCheckLedgerEntry@22(VAR Rec@1000 : Record "Check Ledger Entry";RunTrigger@1001 : Boolean);
    VAR
      RecRef@1003 : RecordRef;
    BEGIN
      if not RecRef.GET(Rec."Record ID to Print") then
        exit;

      CheckRecordHasUsageRestrictions(RecRef);
    END;

    [EventSubscriber(Table,272,OnBeforeModifyEvent)]
    [External]
    PROCEDURE CheckPrintRestrictionsBeforeModifyCheckLedgerEntry@27(VAR Rec@1000 : Record "Check Ledger Entry";VAR xRec@1001 : Record "Check Ledger Entry";RunTrigger@1002 : Boolean);
    VAR
      RecRef@1004 : RecordRef;
    BEGIN
      if not RecRef.GET(Rec."Record ID to Print") then
        exit;

      CheckRecordHasUsageRestrictions(RecRef);
    END;

    [EventSubscriber(Table,81,OnCheckGenJournalLinePostRestrictions)]
    [External]
    PROCEDURE GenJournalBatchCheckGenJournalLinePostRestrictions@11(VAR Sender@1000 : Record "Gen. Journal Line");
    VAR
      GenJournalBatch@1001 : Record "Gen. Journal Batch";
    BEGIN
      if not GenJournalBatch.GET(Sender."Journal Template Name",Sender."Journal Batch Name") then
        exit;

      CheckRecordHasUsageRestrictions(GenJournalBatch);
    END;

    [EventSubscriber(Table,232,OnCheckGenJournalLineExportRestrictions)]
    [External]
    PROCEDURE GenJournalBatchCheckGenJournalLineExportRestrictions@24(VAR Sender@1000 : Record "Gen. Journal Batch");
    BEGIN
      if not Sender."Allow Payment Export" then
        exit;

      CheckGenJournalBatchHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,36,OnCheckSalesPostRestrictions)]
    [External]
    PROCEDURE SalesHeaderCheckSalesPostRestrictions@9(VAR Sender@1000 : Record "Sales Header");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,36,OnCheckSalesReleaseRestrictions)]
    [External]
    PROCEDURE SalesHeaderCheckSalesReleaseRestrictions@31(VAR Sender@1000 : Record "Sales Header");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,38,OnCheckPurchasePostRestrictions)]
    [External]
    PROCEDURE PurchaseHeaderCheckPurchasePostRestrictions@12(VAR Sender@1000 : Record "Purchase Header");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,38,OnCheckPurchaseReleaseRestrictions)]
    [External]
    PROCEDURE PurchaseHeaderCheckPurchaseReleaseRestrictions@30(VAR Sender@1000 : Record "Purchase Header");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,18,OnBeforeDeleteEvent)]
    [External]
    PROCEDURE RemoveCustomerRestrictionsBeforeDelete@13(VAR Rec@1000 : Record Customer;RunTrigger@1001 : Boolean);
    BEGIN
      AllowRecordUsage(Rec);
    END;

    [EventSubscriber(Table,23,OnBeforeDeleteEvent)]
    [External]
    PROCEDURE RemoveVendorRestrictionsBeforeDelete@32(VAR Rec@1000 : Record Vendor;RunTrigger@1001 : Boolean);
    BEGIN
      AllowRecordUsage(Rec);
    END;

    [EventSubscriber(Table,27,OnBeforeDeleteEvent)]
    [External]
    PROCEDURE RemoveItemRestrictionsBeforeDelete@33(VAR Rec@1000 : Record Item;RunTrigger@1001 : Boolean);
    BEGIN
      AllowRecordUsage(Rec);
    END;

    [EventSubscriber(Table,81,OnBeforeDeleteEvent)]
    [External]
    PROCEDURE RemoveGenJournalLineRestrictionsBeforeDelete@6(VAR Rec@1000 : Record "Gen. Journal Line";RunTrigger@1001 : Boolean);
    BEGIN
      AllowRecordUsage(Rec);
    END;

    [EventSubscriber(Table,232,OnBeforeDeleteEvent)]
    [External]
    PROCEDURE RemoveGenJournalBatchRestrictionsBeforeDelete@8(VAR Rec@1000 : Record "Gen. Journal Batch";RunTrigger@1001 : Boolean);
    BEGIN
      AllowRecordUsage(Rec);
    END;

    [EventSubscriber(Table,36,OnBeforeDeleteEvent)]
    [External]
    PROCEDURE RemoveSalesHeaderRestrictionsBeforeDelete@14(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    BEGIN
      AllowRecordUsage(Rec);
    END;

    [EventSubscriber(Table,38,OnBeforeDeleteEvent)]
    [External]
    PROCEDURE RemovePurchaseHeaderRestrictionsBeforeDelete@15(VAR Rec@1000 : Record "Purchase Header";RunTrigger@1001 : Boolean);
    BEGIN
      AllowRecordUsage(Rec);
    END;

    [EventSubscriber(Table,81,OnAfterRenameEvent)]
    [External]
    PROCEDURE UpdateGenJournalLineRestrictionsAfterRename@20(VAR Rec@1000 : Record "Gen. Journal Line";VAR xRec@1001 : Record "Gen. Journal Line";RunTrigger@1002 : Boolean);
    BEGIN
      UpdateRestriction(Rec,xRec);
    END;

    [EventSubscriber(Table,130,OnCheckIncomingDocSetForOCRRestrictions)]
    [External]
    PROCEDURE IncomingDocCheckSetForOCRRestrictions@7(VAR Sender@1000 : Record "Incoming Document");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,130,OnCheckIncomingDocReleaseRestrictions)]
    [External]
    PROCEDURE IncomingDocCheckReleaseRestrictions@25(VAR Sender@1000 : Record "Incoming Document");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    [EventSubscriber(Table,232,OnAfterRenameEvent)]
    [External]
    PROCEDURE UpdateGenJournalBatchRestrictionsAfterRename@18(VAR Rec@1000 : Record "Gen. Journal Batch";VAR xRec@1001 : Record "Gen. Journal Batch";RunTrigger@1002 : Boolean);
    BEGIN
      UpdateRestriction(Rec,xRec);
    END;

    [EventSubscriber(Table,36,OnAfterRenameEvent)]
    [External]
    PROCEDURE UpdateSalesHeaderRestrictionsAfterRename@16(VAR Rec@1000 : Record "Sales Header";VAR xRec@1001 : Record "Sales Header";RunTrigger@1002 : Boolean);
    BEGIN
      UpdateRestriction(Rec,xRec);
    END;

    [EventSubscriber(Table,38,OnAfterRenameEvent)]
    [External]
    PROCEDURE UpdatePurchaseHeaderRestrictionsAfterRename@37(VAR Rec@1000 : Record "Purchase Header";VAR xRec@1001 : Record "Purchase Header";RunTrigger@1002 : Boolean);
    BEGIN
      UpdateRestriction(Rec,xRec);
    END;

    [EventSubscriber(Table,130,OnCheckIncomingDocCreateDocRestrictions)]
    [External]
    PROCEDURE IncomingDocCheckCreateDocRestrictions@76(VAR Sender@1000 : Record "Incoming Document");
    BEGIN
      CheckRecordHasUsageRestrictions(Sender);
    END;

    BEGIN
    END.
  }
}

