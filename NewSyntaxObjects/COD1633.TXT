OBJECT Codeunit 1633 Office Host Provider
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    SingleInstance=true;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      TempOfficeAddinContextInternal@1001 : TEMPORARY Record "Office Add-in Context";
      TempExchangeObjectInternal@1003 : TEMPORARY Record "Exchange Object";
      OfficeHost@1002 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Hosts.OfficeHost" RUNONCLIENT;
      IsHostInitialized@1000 : Boolean;

    LOCAL PROCEDURE CanHandle@2() : Boolean;
    VAR
      OfficeAddinSetup@1000 : Record "Office Add-in Setup";
    BEGIN
      if OfficeAddinSetup.GET then
        exit(OfficeAddinSetup."Office Host Codeunit ID" = CODEUNIT::"Office Host Provider");

      exit(false);
    END;

    [EventSubscriber(Codeunit,1631,OnInitializeHost)]
    LOCAL PROCEDURE OnInitializeHost@3(NewOfficeHost@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Hosts.OfficeHost" RUNONCLIENT;NewHostType@1001 : Text);
    BEGIN
      if not CanHandle then
        exit;

      OfficeHost := NewOfficeHost;
      IsHostInitialized := not ISNULL(OfficeHost);
    END;

    [EventSubscriber(Codeunit,1631,OnInitializeContext)]
    LOCAL PROCEDURE OnInitializeContext@1(TempNewOfficeAddinContext@1000 : TEMPORARY Record "Office Add-in Context");
    BEGIN
      if not CanHandle then
        exit;

      TempOfficeAddinContextInternal := TempNewOfficeAddinContext;
    END;

    [EventSubscriber(Codeunit,1631,OnInitializeExchangeObject)]
    LOCAL PROCEDURE OnInitializeExchangeObject@16();
    BEGIN
      if not CanHandle then
        exit;

      TempExchangeObjectInternal.DELETEALL;
    END;

    [EventSubscriber(Codeunit,1631,OnGetHostType)]
    LOCAL PROCEDURE OnGetHostType@10(VAR HostType@1000 : Text);
    BEGIN
      if not CanHandle then
        exit;
      if not IsHostInitialized then
        exit;

      HostType := OfficeHost.HostType;
    END;

    [EventSubscriber(Codeunit,1631,OnCloseCurrentPage)]
    LOCAL PROCEDURE OnCloseCurrentPage@7();
    BEGIN
      if not CanHandle then
        exit;

      ERROR('');
    END;

    [EventSubscriber(Codeunit,1631,OnInvokeExtension)]
    LOCAL PROCEDURE OnInvokeExtension@13(FunctionName@1000 : Text;Parameter1@1001 : Variant;Parameter2@1002 : Variant;Parameter3@1003 : Variant;Parameter4@1004 : Variant);
    BEGIN
      if not CanHandle then
        exit;

      OfficeHost := OfficeHost.Create;
      OfficeHost.InvokeExtensionAsync(FunctionName,Parameter1,Parameter2,Parameter3,Parameter4);
    END;

    [EventSubscriber(Codeunit,1631,OnIsHostInitialized)]
    LOCAL PROCEDURE OnIsHostInitialized@4(VAR Result@1000 : Boolean);
    BEGIN
      if not CanHandle then
        exit;

      Result := IsHostInitialized;
    END;

    [EventSubscriber(Codeunit,1631,OnIsAvailable)]
    LOCAL PROCEDURE OnIsAvailable@12(VAR Result@1000 : Boolean);
    BEGIN
      if not CanHandle then
        exit;

      OnIsHostInitialized(Result);
      if Result then
        Result := OfficeHost.IsAvailable;
    END;

    [EventSubscriber(Codeunit,1631,OnGetTempOfficeAddinContext)]
    LOCAL PROCEDURE OnGetTempOfficeAddinContext@14(VAR TempOfficeAddinContext@1000 : TEMPORARY Record "Office Add-in Context");
    BEGIN
      if not CanHandle then
        exit;

      CLEAR(TempOfficeAddinContext);
      TempOfficeAddinContext.COPY(TempOfficeAddinContextInternal);
    END;

    [EventSubscriber(Codeunit,1631,OnSendToOCR)]
    LOCAL PROCEDURE OnSendToOCR@8(IncomingDocument@1000 : Record "Incoming Document");
    BEGIN
      if not CanHandle then
        exit;

      IncomingDocument.SendToOCR(true);
    END;

    [EventSubscriber(Codeunit,1631,OnEmailHasAttachments)]
    LOCAL PROCEDURE OnEmailHasAttachments@9(VAR Result@1000 : Boolean);
    VAR
      ExchangeWebServicesServer@1001 : Codeunit "Exchange Web Services Server";
    BEGIN
      if not CanHandle then
        exit;

      if OfficeHost.CallbackToken <> '' then
        with ExchangeWebServicesServer do begin
          InitializeWithOAuthToken(OfficeHost.CallbackToken,GetEndpoint);
          Result := EmailHasAttachments(TempOfficeAddinContextInternal."Item ID");
        end;
    END;

    [EventSubscriber(Codeunit,1631,OnGetEmailAndAttachments)]
    LOCAL PROCEDURE OnGetEmailAndAttachments@15(VAR TempExchangeObject@1000 : TEMPORARY Record "Exchange Object";Action@1002 : 'InitiateSendToOCR,InitiateSendToIncomingDocuments,InitiateSendToWorkFlow';VendorNumber@1003 : Code[20]);
    VAR
      ExchangeWebServicesServer@1001 : Codeunit "Exchange Web Services Server";
    BEGIN
      if not CanHandle then
        exit;

      if not TempExchangeObjectInternal.ISEMPTY then begin
        CLEAR(TempExchangeObject);
        TempExchangeObjectInternal.MODIFYALL(InitiatedAction,Action);
        TempExchangeObjectInternal.MODIFYALL(VendorNo,VendorNumber);
        TempExchangeObject.COPY(TempExchangeObjectInternal,true)
      end else
        if OfficeHost.CallbackToken <> '' then
          with ExchangeWebServicesServer do begin
            InitializeWithOAuthToken(OfficeHost.CallbackToken,GetEndpoint);
            GetEmailAndAttachments(TempOfficeAddinContextInternal."Item ID",TempExchangeObject,Action,VendorNumber);
            TempExchangeObjectInternal.COPY(TempExchangeObject,true);
          end;
    END;

    BEGIN
    END.
  }
}

