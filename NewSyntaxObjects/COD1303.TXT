OBJECT Codeunit 1303 Correct Posted Sales Invoice
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Sales Invoice Header";
    Permissions=TableData "Sales Invoice Header"=rm,
                TableData "Sales Cr.Memo Header"=rm;
    OnRun=VAR
            SalesHeader@1001 : Record "Sales Header";
          BEGIN
            UnapplyCostApplication("No.");
            CreateCopyDocument(Rec,SalesHeader,SalesHeader."Document Type"::"Credit Memo",false);

            if SalesInvoiceLinesContainJob("No.") then
              CreateAndProcessJobPlanningLines(SalesHeader);

            CODEUNIT.RUN(CODEUNIT::"Sales-Post",SalesHeader);
            SetTrackInfoForCancellation(Rec);

            COMMIT;
          END;

  }
  CODE
  {
    VAR
      PostedInvoiceIsPaidCorrectErr@1000 : TextConst 'ENU=You cannot correct this posted sales invoice because it is fully or partially paid.\\To reverse a paid sales invoice, you must manually create a sales credit memo.';
      PostedInvoiceIsPaidCCancelErr@1019 : TextConst 'ENU=You cannot cancel this posted sales invoice because it is fully or partially paid.\\To reverse a paid sales invoice, you must manually create a sales credit memo.';
      AlreadyCorrectedErr@1001 : TextConst 'ENU=You cannot correct this posted sales invoice because it has been canceled.';
      AlreadyCancelledErr@1005 : TextConst 'ENU=You cannot cancel this posted sales invoice because it has already been canceled.';
      CorrCorrectiveDocErr@1010 : TextConst 'ENU=You cannot correct this posted sales invoice because it represents a correction of a credit memo.';
      CancelCorrectiveDocErr@1034 : TextConst 'ENU=You cannot cancel this posted sales invoice because it represents a correction of a credit memo.';
      CustomerIsBlockedCorrectErr@1002 : TextConst '@@@="%1 = Customer name";ENU=You cannot correct this posted sales invoice because customer %1 is blocked.';
      CustomerIsBlockedCancelErr@1016 : TextConst '@@@="%1 = Customer name";ENU=You cannot cancel this posted sales invoice because customer %1 is blocked.';
      ItemIsBlockedCorrectErr@1003 : TextConst '@@@="%1 = Item No. %2 = Item Description";ENU=You cannot correct this posted sales invoice because item %1 %2 is blocked.';
      ItemIsBlockedCancelErr@1017 : TextConst '@@@="%1 = Item No. %2 = Item Description";ENU=You cannot cancel this posted sales invoice because item %1 %2 is blocked.';
      AccountIsBlockedCorrectErr@1018 : TextConst '@@@="%1 = Table Caption %2 = Account number.";ENU=You cannot correct this posted sales invoice because %1 %2 is blocked.';
      AccountIsBlockedCancelErr@1025 : TextConst '@@@="%1 = Table Caption %2 = Account number.";ENU=You cannot cancel this posted sales invoice because %1 %2 is blocked.';
      NoFreeInvoiceNoSeriesCorrectErr@1004 : TextConst 'ENU=You cannot correct this posted sales invoice because no unused invoice numbers are available. \\You must extend the range of the number series for sales invoices.';
      NoFreeInvoiceNoSeriesCancelErr@1026 : TextConst 'ENU=You cannot cancel this posted sales invoice because no unused invoice numbers are available. \\You must extend the range of the number series for sales invoices.';
      NoFreeCMSeriesCorrectErr@1013 : TextConst 'ENU=You cannot correct this posted sales invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.';
      NoFreeCMSeriesCancelErr@1027 : TextConst 'ENU=You cannot cancel this posted sales invoice because no unused credit memo numbers are available. \\You must extend the range of the number series for credit memos.';
      NoFreePostCMSeriesCorrectErr@1028 : TextConst 'ENU=You cannot correct this posted sales invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.';
      NoFreePostCMSeriesCancelErr@1029 : TextConst 'ENU=You cannot cancel this posted sales invoice because no unused posted credit memo numbers are available. \\You must extend the range of the number series for posted credit memos.';
      SalesLineFromOrderCorrectErr@1006 : TextConst '@@@="%1 = Item no. %2 = Item description";ENU=You cannot correct this posted sales invoice because item %1 %2 is used on a sales order.';
      SalesLineFromOrderCancelErr@1030 : TextConst '@@@="%1 = Item no. %2 = Item description";ENU=You cannot cancel this posted sales invoice because item %1 %2 is used on a sales order.';
      ShippedQtyReturnedCorrectErr@1007 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted sales invoice because item %1 %2 has already been fully or partially returned.';
      ShippedQtyReturnedCancelErr@1031 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted sales invoice because item %1 %2 has already been fully or partially returned.';
      UsedInJobCorrectErr@1008 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted sales invoice because item %1 %2 is used in a job.';
      UsedInJobCancelErr@1032 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted sales invoice because item %1 %2 is used in a job.';
      PostingNotAllowedCorrectErr@1009 : TextConst 'ENU=You cannot correct this posted sales invoice because it was posted in a posting period that is closed.';
      PostingNotAllowedCancelErr@1033 : TextConst 'ENU=You cannot cancel this posted sales invoice because it was posted in a posting period that is closed.';
      LineTypeNotAllowedCorrectErr@1012 : TextConst '@@@="%1 = Item no. %2 = Item description %3 = Item type.";ENU=You cannot correct this posted sales invoice because the sales invoice line for %1 %2 is of type %3, which is not allowed on a simplified sales invoice.';
      LineTypeNotAllowedCancelErr@1036 : TextConst '@@@="%1 = Item no. %2 = Item description %3 = Item type.";ENU=You cannot cancel this posted sales invoice because the sales invoice line for %1 %2 is of type %3, which is not allowed on a simplified sales invoice.';
      CancellingOnly@1014 : Boolean;
      InvalidDimCodeCorrectErr@1037 : TextConst '@@@="%1 = Table caption %2 = Account number %3 = Item no. %4 = Item description.";ENU=You cannot correct this posted sales invoice because the dimension rule setup for account ''%1'' %2 prevents %3 %4 from being canceled.';
      InvalidDimCodeCancelErr@1038 : TextConst '@@@="%1 = Table caption %2 = Account number %3 = Item no. %4 = Item description.";ENU=You cannot cancel this posted sales invoice because the dimension rule setup for account ''%1'' %2 prevents %3 %4 from being canceled.';
      InvalidDimCombinationCorrectErr@1023 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot correct this posted sales invoice because the dimension combination for item %1 %2 is not allowed.';
      InvalidDimCombinationCancelErr@1039 : TextConst '@@@="%1 = Item no. %2 = Item description.";ENU=You cannot cancel this posted sales invoice because the dimension combination for item %1 %2 is not allowed.';
      InvalidDimCombHeaderCorrectErr@1011 : TextConst 'ENU=You cannot correct this posted sales invoice because the combination of dimensions on the invoice is blocked.';
      InvalidDimCombHeaderCancelErr@1035 : TextConst 'ENU=You cannot cancel this posted sales invoice because the combination of dimensions on the invoice is blocked.';
      ExternalDocCorrectErr@1015 : TextConst 'ENU=You cannot correct this posted sales invoice because the external document number is required on the invoice.';
      ExternalDocCancelErr@1040 : TextConst 'ENU=You cannot cancel this posted sales invoice because the external document number is required on the invoice.';
      InventoryPostClosedCorrectErr@1041 : TextConst 'ENU=You cannot correct this posted sales invoice because the posting inventory period is already closed.';
      InventoryPostClosedCancelErr@1042 : TextConst 'ENU=You cannot cancel this posted sales invoice because the posting inventory period is already closed.';
      FixedAssetNotPossibleToCreateCreditMemoErr@1044 : TextConst 'ENU=You cannot cancel this posted sales invoice because it contains lines of type Fixed Asset.\\Use the Cancel Entries function in the FA Ledger Entries window instead.';
      PostingCreditMemoFailedOpenPostedCMQst@1020 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is posted. Do you want to open the posted credit memo?';
      PostingCreditMemoFailedOpenCMQst@1021 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1\\A credit memo is created but not posted. Do you want to open the credit memo?';
      CreatingCreditMemoFailedNothingCreatedErr@1022 : TextConst 'ENU=Canceling the invoice failed because of the following error: \\%1.';
      ErrorType@1024 : 'IsPaid,CustomerBlocked,ItemBlocked,AccountBlocked,IsCorrected,IsCorrective,SerieNumInv,SerieNumCM,SerieNumPostCM,ItemIsReturned,FromOrder,PostingNotAllowed,LineFromOrder,WrongItemType,LineFromJob,DimErr,DimCombErr,DimCombHeaderErr,ExtDocErr,InventoryPostClosed';
      WrongDocumentTypeForCopyDocumentErr@1043 : TextConst 'ENU=You cannot correct or cancel this type of document.';
      CheckPrepaymentErr@1045 : TextConst 'ENU=You cannot correct or cancel a posted sales prepayment invoice.\\Open the related sales order and choose the Post Prepayment Credit Memo.';

    [Internal]
    PROCEDURE CancelPostedInvoice@4(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header") : Boolean;
    BEGIN
      CancellingOnly := true;
      exit(CreateCreditMemo(SalesInvoiceHeader));
    END;

    LOCAL PROCEDURE CreateCreditMemo@13(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header") : Boolean;
    VAR
      SalesHeader@1004 : Record "Sales Header";
      SalesCrMemoHeader@1005 : Record "Sales Cr.Memo Header";
    BEGIN
      TestCorrectInvoiceIsAllowed(SalesInvoiceHeader,CancellingOnly);
      if not CODEUNIT.RUN(CODEUNIT::"Correct Posted Sales Invoice",SalesInvoiceHeader) then begin
        SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",SalesInvoiceHeader."No.");
        if SalesCrMemoHeader.FINDFIRST then begin
          if CONFIRM(STRSUBSTNO(PostingCreditMemoFailedOpenPostedCMQst,GETLASTERRORTEXT)) then
            PAGE.RUN(PAGE::"Posted Sales Credit Memo",SalesCrMemoHeader);
        end else begin
          SalesHeader.SETRANGE("Applies-to Doc. No.",SalesInvoiceHeader."No.");
          if SalesHeader.FINDFIRST then begin
            if CONFIRM(STRSUBSTNO(PostingCreditMemoFailedOpenCMQst,GETLASTERRORTEXT)) then
              PAGE.RUN(PAGE::"Sales Credit Memo",SalesHeader);
          end else
            ERROR(CreatingCreditMemoFailedNothingCreatedErr,GETLASTERRORTEXT);
        end;
        exit(false);
      end;
      exit(true);
    END;

    LOCAL PROCEDURE CreateCopyDocument@11(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header";VAR SalesHeader@1001 : Record "Sales Header";DocumentType@1002 : Option;SkipCopyFromDescription@1004 : Boolean);
    VAR
      CopyDocMgt@1003 : Codeunit "Copy Document Mgt.";
    BEGIN
      CLEAR(SalesHeader);
      SalesHeader."No." := '';
      SalesHeader."Document Type" := DocumentType;
      SalesHeader.SetAllowSelectNoSeries;
      SalesHeader.INSERT(true);

      case DocumentType of
        SalesHeader."Document Type"::"Credit Memo":
          CopyDocMgt.SetPropertiesForCreditMemoCorrection;
        SalesHeader."Document Type"::Invoice:
          CopyDocMgt.SetPropertiesForInvoiceCorrection(SkipCopyFromDescription);
        else
          ERROR(WrongDocumentTypeForCopyDocumentErr);
      end;

      CopyDocMgt.CopySalesDocForInvoiceCancelling(SalesInvoiceHeader."No.",SalesHeader);
    END;

    [External]
    PROCEDURE CreateCreditMemoCopyDocument@16(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header";VAR SalesHeader@1001 : Record "Sales Header");
    BEGIN
      TestNoFixedAssetInSalesInvoice(SalesInvoiceHeader);
      TestNotSalesPrepaymentlInvoice(SalesInvoiceHeader);
      CreateCopyDocument(SalesInvoiceHeader,SalesHeader,SalesHeader."Document Type"::"Credit Memo",false);
    END;

    LOCAL PROCEDURE CreateAndProcessJobPlanningLines@36(SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesLine@1003 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETFILTER("Job Contract Entry No.",'<>0');
      if SalesLine.FINDSET then
        repeat
          SalesLine."Job Contract Entry No." := CreateJobPlanningLine(SalesHeader,SalesLine);
          SalesLine.MODIFY;
        until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CreateJobPlanningLine@49(SalesHeader@1005 : Record "Sales Header";SalesLine@1000 : Record "Sales Line") : Integer;
    VAR
      FromJobPlanningLine@1001 : Record "Job Planning Line";
      ToJobPlanningLine@1002 : Record "Job Planning Line";
      JobPlanningLineInvoice@1004 : Record "Job Planning Line Invoice";
    BEGIN
      FromJobPlanningLine.SETCURRENTKEY("Job Contract Entry No.");
      FromJobPlanningLine.SETRANGE("Job Contract Entry No.",SalesLine."Job Contract Entry No.");
      FromJobPlanningLine.FINDFIRST;

      ToJobPlanningLine.InitFromJobPlanningLine(FromJobPlanningLine,-SalesLine.Quantity);
      JobPlanningLineInvoice.InitFromJobPlanningLine(ToJobPlanningLine);
      JobPlanningLineInvoice.InitFromSales(SalesHeader,SalesHeader."Posting Date",SalesLine."Line No.");
      JobPlanningLineInvoice.INSERT;

      ToJobPlanningLine.UpdateQtyToTransfer;
      ToJobPlanningLine.INSERT;

      exit(ToJobPlanningLine."Job Contract Entry No.");
    END;

    [Internal]
    PROCEDURE CancelPostedInvoiceStartNewInvoice@1(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header";VAR SalesHeader@1002 : Record "Sales Header");
    BEGIN
      CancellingOnly := false;

      if CreateCreditMemo(SalesInvoiceHeader) then begin
        CreateCopyDocument(SalesInvoiceHeader,SalesHeader,SalesHeader."Document Type"::Invoice,true);
        COMMIT;
      end;
    END;

    [External]
    PROCEDURE TestCorrectInvoiceIsAllowed@5(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header";Cancelling@1001 : Boolean);
    BEGIN
      CancellingOnly := Cancelling;

      SalesInvoiceHeader.CALCFIELDS(Amount);
      SalesInvoiceHeader.TESTFIELD(Amount);
      TestIfPostingIsAllowed(SalesInvoiceHeader);
      TestIfInvoiceIsCorrectedOnce(SalesInvoiceHeader);
      TestIfInvoiceIsNotCorrectiveDoc(SalesInvoiceHeader);
      TestIfInvoiceIsPaid(SalesInvoiceHeader);
      TestIfCustomerIsBlocked(SalesInvoiceHeader,SalesInvoiceHeader."Sell-to Customer No.");
      TestIfCustomerIsBlocked(SalesInvoiceHeader,SalesInvoiceHeader."Bill-to Customer No.");
      TestIfJobPostingIsAllowed(SalesInvoiceHeader."No.");
      TestCustomerDimension(SalesInvoiceHeader,SalesInvoiceHeader."Bill-to Customer No.");
      TestDimensionOnHeader(SalesInvoiceHeader);
      TestSalesLines(SalesInvoiceHeader);
      TestIfAnyFreeNumberSeries(SalesInvoiceHeader);
      TestExternalDocument(SalesInvoiceHeader);
      TestInventoryPostingClosed(SalesInvoiceHeader);
      TestNotSalesPrepaymentlInvoice(SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE SetTrackInfoForCancellation@2(VAR SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      SalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header";
      CancelledDocument@1002 : Record "Cancelled Document";
    BEGIN
      SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",SalesInvoiceHeader."No.");
      if SalesCrMemoHeader.FINDLAST then
        CancelledDocument.InsertSalesInvToCrMemoCancelledDocument(SalesInvoiceHeader."No.",SalesCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE SalesInvoiceLinesContainJob@35(InvoiceNo@1001 : Code[20]) : Boolean;
    VAR
      SalesInvoiceLine@1002 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",InvoiceNo);
      SalesInvoiceLine.SETFILTER("Job No.",'<>%1','');
      exit(not SalesInvoiceLine.ISEMPTY);
    END;

    LOCAL PROCEDURE TestDimensionOnHeader@15(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      DimensionManagement@1001 : Codeunit DimensionManagement;
    BEGIN
      if not DimensionManagement.CheckDimIDComb(SalesInvoiceHeader."Dimension Set ID") then
        ErrorHelperHeader(ErrorType::DimCombHeaderErr,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestIfCustomerIsBlocked@3(SalesInvoiceHeader@1005 : Record "Sales Invoice Header";CustNo@1000 : Code[20]);
    VAR
      Customer@1001 : Record Customer;
    BEGIN
      Customer.GET(CustNo);
      if Customer.Blocked in [Customer.Blocked::Invoice,Customer.Blocked::All] then
        ErrorHelperHeader(ErrorType::CustomerBlocked,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestCustomerDimension@9(SalesInvoiceHeader@1005 : Record "Sales Invoice Header";CustNo@1000 : Code[20]);
    VAR
      Customer@1001 : Record Customer;
      DimensionManagement@1004 : Codeunit DimensionManagement;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      Customer.GET(CustNo);
      TableID[1] := DATABASE::Customer;
      No[1] := Customer."No.";
      if not DimensionManagement.CheckDimValuePosting(TableID,No,SalesInvoiceHeader."Dimension Set ID") then
        ErrorHelperAccount(ErrorType::DimErr,Customer.TABLECAPTION,Customer."No.",Customer."No.",Customer.Name);
    END;

    LOCAL PROCEDURE TestSalesLines@6(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      SalesShipmentLine@1004 : Record "Sales Shipment Line";
      SalesInvoiceLine@1001 : Record "Sales Invoice Line";
      Item@1002 : Record Item;
      DimensionManagement@1007 : Codeunit DimensionManagement;
      ShippedQtyNoReturned@1005 : Decimal;
      RevUnitCostLCY@1006 : Decimal;
      TableID@1013 : ARRAY [10] OF Integer;
      No@1014 : ARRAY [10] OF Code[20];
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      TestNoFixedAssetInSalesLines(SalesInvoiceLine);
      if SalesInvoiceLine.FIND('-') then
        repeat
          if not IsCommentLine(SalesInvoiceLine) then begin
            if SalesShipmentLine.GET(SalesInvoiceLine."Shipment No.",SalesInvoiceLine."Shipment Line No.") then begin
              if SalesShipmentLine."Order No." <> '' then
                ErrorHelperLine(ErrorType::LineFromOrder,SalesInvoiceLine);
            end;

            TestSalesLineType(SalesInvoiceLine);

            if SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item then begin
              if (SalesInvoiceLine.Quantity > 0) and (SalesInvoiceLine."Job No." = '') and
                 WasNotCancelled(SalesInvoiceHeader."No.")
              then begin
                SalesInvoiceLine.CalcShippedSaleNotReturned(ShippedQtyNoReturned,RevUnitCostLCY,false);
                if SalesInvoiceLine.Quantity <> ShippedQtyNoReturned then
                  ErrorHelperLine(ErrorType::ItemIsReturned,SalesInvoiceLine);
              end;

              Item.GET(SalesInvoiceLine."No.");

              if Item.Blocked then
                ErrorHelperLine(ErrorType::ItemBlocked,SalesInvoiceLine);

              TableID[1] := DATABASE::Item;
              No[1] := SalesInvoiceLine."No.";
              if not DimensionManagement.CheckDimValuePosting(TableID,No,SalesInvoiceLine."Dimension Set ID") then
                ErrorHelperAccount(ErrorType::DimErr,Item.TABLECAPTION,No[1],Item."No.",Item.Description);

              if Item.Type = Item.Type::Inventory then
                TestInventoryPostingSetup(SalesInvoiceLine);
            end;

            TestGenPostingSetup(SalesInvoiceLine);
            TestCustomerPostingGroup(SalesInvoiceLine,SalesInvoiceHeader."Customer Posting Group");
            TestVATPostingSetup(SalesInvoiceLine);

            if not DimensionManagement.CheckDimIDComb(SalesInvoiceLine."Dimension Set ID") then
              ErrorHelperLine(ErrorType::DimCombErr,SalesInvoiceLine);
          end;
        until SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestGLAccount@21(AccountNo@1000 : Code[20];SalesInvoiceLine@1005 : Record "Sales Invoice Line");
    VAR
      GLAccount@1001 : Record "G/L Account";
      Item@1006 : Record Item;
      DimensionManagement@1004 : Codeunit DimensionManagement;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      GLAccount.GET(AccountNo);
      if GLAccount.Blocked then
        ErrorHelperAccount(ErrorType::AccountBlocked,GLAccount.TABLECAPTION,AccountNo,'','');
      TableID[1] := DATABASE::"G/L Account";
      No[1] := AccountNo;

      if SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item then begin
        Item.GET(SalesInvoiceLine."No.");
        if not DimensionManagement.CheckDimValuePosting(TableID,No,SalesInvoiceLine."Dimension Set ID") then
          ErrorHelperAccount(ErrorType::DimErr,GLAccount.TABLECAPTION,AccountNo,Item."No.",Item.Description);
      end;
    END;

    LOCAL PROCEDURE TestIfInvoiceIsPaid@7(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    BEGIN
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      SalesInvoiceHeader.CALCFIELDS("Remaining Amount");
      if SalesInvoiceHeader."Amount Including VAT" <> SalesInvoiceHeader."Remaining Amount" then
        ErrorHelperHeader(ErrorType::IsPaid,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsCorrectedOnce@10(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      CancelledDocument@1001 : Record "Cancelled Document";
    BEGIN
      if CancelledDocument.FindSalesCancelledInvoice(SalesInvoiceHeader."No.") then
        ErrorHelperHeader(ErrorType::IsCorrected,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestIfInvoiceIsNotCorrectiveDoc@17(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      CancelledDocument@1001 : Record "Cancelled Document";
    BEGIN
      if CancelledDocument.FindSalesCorrectiveInvoice(SalesInvoiceHeader."No.") then
        ErrorHelperHeader(ErrorType::IsCorrective,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestIfPostingIsAllowed@12(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      GenJnlCheckLine@1001 : Codeunit "Gen. Jnl.-Check Line";
    BEGIN
      if GenJnlCheckLine.DateNotAllowed(SalesInvoiceHeader."Posting Date") then
        ErrorHelperHeader(ErrorType::PostingNotAllowed,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestIfAnyFreeNumberSeries@14(SalesInvoiceHeader@1003 : Record "Sales Invoice Header");
    VAR
      SalesReceivablesSetup@1001 : Record "Sales & Receivables Setup";
      NoSeriesManagement@1002 : Codeunit NoSeriesManagement;
      PostingDate@1000 : Date;
    BEGIN
      PostingDate := WORKDATE;
      SalesReceivablesSetup.GET;

      if NoSeriesManagement.TryGetNextNo(SalesReceivablesSetup."Credit Memo Nos.",PostingDate) = '' then
        ErrorHelperHeader(ErrorType::SerieNumCM,SalesInvoiceHeader);

      if NoSeriesManagement.TryGetNextNo(SalesReceivablesSetup."Posted Credit Memo Nos.",PostingDate) = '' then
        ErrorHelperHeader(ErrorType::SerieNumPostCM,SalesInvoiceHeader);

      if (not CancellingOnly) and (NoSeriesManagement.TryGetNextNo(SalesReceivablesSetup."Invoice Nos.",PostingDate) = '') then
        ErrorHelperHeader(ErrorType::SerieNumInv,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestIfJobPostingIsAllowed@32(SalesInvoiceNo@1000 : Code[20]);
    VAR
      SalesInvoiceLine@1001 : Record "Sales Invoice Line";
      Job@1002 : Record Job;
    BEGIN
      SalesInvoiceLine.SETFILTER("Document No.",SalesInvoiceNo);
      SalesInvoiceLine.SETFILTER("Job No.",'<>%1','');
      if SalesInvoiceLine.FINDSET then
        repeat
          Job.GET(SalesInvoiceLine."Job No.");
          Job.TestBlocked;
        until SalesInvoiceLine.NEXT = 0;
    END;

    LOCAL PROCEDURE TestExternalDocument@8(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      SalesReceivablesSetup@1001 : Record "Sales & Receivables Setup";
    BEGIN
      SalesReceivablesSetup.GET;
      if (SalesInvoiceHeader."External Document No." = '') and SalesReceivablesSetup."Ext. Doc. No. Mandatory" then
        ErrorHelperHeader(ErrorType::ExtDocErr,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestInventoryPostingClosed@26(SalesInvoiceHeader@1000 : Record "Sales Invoice Header");
    VAR
      InventoryPeriod@1001 : Record "Inventory Period";
    BEGIN
      InventoryPeriod.SETRANGE(Closed,true);
      InventoryPeriod.SETFILTER("Ending Date",'>=%1',SalesInvoiceHeader."Posting Date");
      if InventoryPeriod.FINDFIRST then
        ErrorHelperHeader(ErrorType::InventoryPostClosed,SalesInvoiceHeader);
    END;

    LOCAL PROCEDURE TestSalesLineType@19(SalesInvoiceLine@1000 : Record "Sales Invoice Line");
    BEGIN
      if SalesInvoiceLine.IsCancellationSupported then
        exit;

      if (SalesInvoiceLine."Job No." <> '') and (SalesInvoiceLine.Type = SalesInvoiceLine.Type::Resource) then
        exit;

      ErrorHelperLine(ErrorType::WrongItemType,SalesInvoiceLine);
    END;

    LOCAL PROCEDURE TestGenPostingSetup@20(SalesInvoiceLine@1000 : Record "Sales Invoice Line");
    VAR
      GenPostingSetup@1001 : Record "General Posting Setup";
    BEGIN
      with GenPostingSetup do begin
        GET(SalesInvoiceLine."Gen. Bus. Posting Group",SalesInvoiceLine."Gen. Prod. Posting Group");
        TESTFIELD("Sales Account");
        TestGLAccount("Sales Account",SalesInvoiceLine);
        TESTFIELD("Sales Credit Memo Account");
        TestGLAccount("Sales Credit Memo Account",SalesInvoiceLine);
        TESTFIELD("Sales Line Disc. Account");
        TestGLAccount("Sales Line Disc. Account",SalesInvoiceLine);
        if SalesInvoiceLine.Type = SalesInvoiceLine.Type::Item then begin
          TESTFIELD("COGS Account");
          TestGLAccount("COGS Account",SalesInvoiceLine);
        end;
      end;
    END;

    LOCAL PROCEDURE TestCustomerPostingGroup@27(SalesInvoiceLine@1000 : Record "Sales Invoice Line";CustomerPostingGr@1002 : Code[20]);
    VAR
      CustomerPostingGroup@1001 : Record "Customer Posting Group";
    BEGIN
      with CustomerPostingGroup do begin
        GET(CustomerPostingGr);
        TESTFIELD("Receivables Account");
        TestGLAccount("Receivables Account",SalesInvoiceLine);
      end;
    END;

    LOCAL PROCEDURE TestVATPostingSetup@29(SalesInvoiceLine@1000 : Record "Sales Invoice Line");
    VAR
      VATPostingSetup@1001 : Record "VAT Posting Setup";
    BEGIN
      with VATPostingSetup do begin
        GET(SalesInvoiceLine."VAT Bus. Posting Group",SalesInvoiceLine."VAT Prod. Posting Group");
        if "VAT Calculation Type" <> "VAT Calculation Type"::"Sales Tax" then begin
          TESTFIELD("Sales VAT Account");
          TestGLAccount("Sales VAT Account",SalesInvoiceLine);
        end;
      end;
    END;

    LOCAL PROCEDURE TestInventoryPostingSetup@39(SalesInvoiceLine@1000 : Record "Sales Invoice Line");
    VAR
      InventoryPostingSetup@1001 : Record "Inventory Posting Setup";
    BEGIN
      with InventoryPostingSetup do begin
        GET(SalesInvoiceLine."Location Code",SalesInvoiceLine."Posting Group");
        TESTFIELD("Inventory Account");
        TestGLAccount("Inventory Account",SalesInvoiceLine);
      end;
    END;

    LOCAL PROCEDURE TestNoFixedAssetInSalesInvoice@34(SalesInvoiceHeader@1001 : Record "Sales Invoice Header");
    VAR
      SalesInvoiceLine@1000 : Record "Sales Invoice Line";
    BEGIN
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      TestNoFixedAssetInSalesLines(SalesInvoiceLine);
    END;

    LOCAL PROCEDURE TestNoFixedAssetInSalesLines@33(VAR SalesInvoiceLine@1000 : Record "Sales Invoice Line");
    VAR
      SalesInvLine@1001 : Record "Sales Invoice Line";
    BEGIN
      SalesInvLine.COPY(SalesInvoiceLine);
      SalesInvLine.SETRANGE(Type,SalesInvLine.Type::"Fixed Asset");
      if not SalesInvLine.ISEMPTY then
        ERROR(FixedAssetNotPossibleToCreateCreditMemoErr);
    END;

    LOCAL PROCEDURE TestNotSalesPrepaymentlInvoice@37(SalesInvoiceHeader@1001 : Record "Sales Invoice Header");
    BEGIN
      if SalesInvoiceHeader."Prepayment Invoice" then
        ERROR(CheckPrepaymentErr);
    END;

    LOCAL PROCEDURE IsCommentLine@18(SalesInvoiceLine@1000 : Record "Sales Invoice Line") : Boolean;
    BEGIN
      exit((SalesInvoiceLine.Type = SalesInvoiceLine.Type::" ") or (SalesInvoiceLine."No." = ''));
    END;

    LOCAL PROCEDURE WasNotCancelled@31(InvNo@1000 : Code[20]) : Boolean;
    VAR
      SalesCrMemoHeader@1001 : Record "Sales Cr.Memo Header";
    BEGIN
      SalesCrMemoHeader.SETRANGE("Applies-to Doc. Type",SalesCrMemoHeader."Applies-to Doc. Type"::Invoice);
      SalesCrMemoHeader.SETRANGE("Applies-to Doc. No.",InvNo);
      exit(SalesCrMemoHeader.ISEMPTY);
    END;

    LOCAL PROCEDURE UnapplyCostApplication@25(InvNo@1000 : Code[20]);
    VAR
      TempItemLedgEntry@1003 : TEMPORARY Record "Item Ledger Entry";
      TempItemApplicationEntry@1002 : TEMPORARY Record "Item Application Entry";
      ItemJnlPostLine@1001 : Codeunit "Item Jnl.-Post Line";
    BEGIN
      FindItemLedgEntries(TempItemLedgEntry,InvNo);
      if FindAppliedInbndEntries(TempItemApplicationEntry,TempItemLedgEntry) then begin
        repeat
          ItemJnlPostLine.UnApply(TempItemApplicationEntry);
        until TempItemApplicationEntry.NEXT = 0;
        ItemJnlPostLine.RedoApplications;
      end;
    END;

    LOCAL PROCEDURE FindItemLedgEntries@30(VAR ItemLedgEntry@1002 : Record "Item Ledger Entry";InvNo@1000 : Code[20]);
    VAR
      SalesInvLine@1001 : Record "Sales Invoice Line";
    BEGIN
      with SalesInvLine do begin
        SETRANGE("Document No.",InvNo);
        SETRANGE(Type,Type::Item);
        if FINDSET then
          repeat
            GetItemLedgEntries(ItemLedgEntry,false);
          until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE FindAppliedInbndEntries@28(VAR TempItemApplicationEntry@1000 : TEMPORARY Record "Item Application Entry";VAR ItemLedgEntry@1001 : Record "Item Ledger Entry") : Boolean;
    VAR
      ItemApplicationEntry@1002 : Record "Item Application Entry";
    BEGIN
      TempItemApplicationEntry.RESET;
      TempItemApplicationEntry.DELETEALL;
      if ItemLedgEntry.FINDSET then
        repeat
          if ItemApplicationEntry.AppliedInbndEntryExists(ItemLedgEntry."Entry No.",true) then
            repeat
              TempItemApplicationEntry := ItemApplicationEntry;
              if not TempItemApplicationEntry.FIND then
                TempItemApplicationEntry.INSERT;
            until ItemApplicationEntry.NEXT = 0;
        until ItemLedgEntry.NEXT = 0;
      exit(TempItemApplicationEntry.FINDSET);
    END;

    LOCAL PROCEDURE ErrorHelperHeader@22(ErrorOption@1000 : Option;SalesInvoiceHeader@1001 : Record "Sales Invoice Header");
    VAR
      Customer@1003 : Record Customer;
    BEGIN
      if CancellingOnly then
        case ErrorOption of
          ErrorType::IsPaid:
            ERROR(PostedInvoiceIsPaidCCancelErr);
          ErrorType::CustomerBlocked:
            begin
              Customer.GET(SalesInvoiceHeader."Bill-to Customer No.");
              ERROR(CustomerIsBlockedCancelErr,Customer.Name);
            end;
          ErrorType::IsCorrected:
            ERROR(AlreadyCancelledErr);
          ErrorType::IsCorrective:
            ERROR(CancelCorrectiveDocErr);
          ErrorType::SerieNumInv:
            ERROR(NoFreeInvoiceNoSeriesCancelErr);
          ErrorType::SerieNumCM:
            ERROR(NoFreeCMSeriesCancelErr);
          ErrorType::SerieNumPostCM:
            ERROR(NoFreePostCMSeriesCancelErr);
          ErrorType::PostingNotAllowed:
            ERROR(PostingNotAllowedCancelErr);
          ErrorType::ExtDocErr:
            ERROR(ExternalDocCancelErr);
          ErrorType::InventoryPostClosed:
            ERROR(InventoryPostClosedCancelErr);
          ErrorType::DimCombHeaderErr:
            ERROR(InvalidDimCombHeaderCancelErr);
        end
      else
        case ErrorOption of
          ErrorType::IsPaid:
            ERROR(PostedInvoiceIsPaidCorrectErr);
          ErrorType::CustomerBlocked:
            begin
              Customer.GET(SalesInvoiceHeader."Bill-to Customer No.");
              ERROR(CustomerIsBlockedCorrectErr,Customer.Name);
            end;
          ErrorType::IsCorrected:
            ERROR(AlreadyCorrectedErr);
          ErrorType::IsCorrective:
            ERROR(CorrCorrectiveDocErr);
          ErrorType::SerieNumInv:
            ERROR(NoFreeInvoiceNoSeriesCorrectErr);
          ErrorType::SerieNumPostCM:
            ERROR(NoFreePostCMSeriesCorrectErr);
          ErrorType::SerieNumCM:
            ERROR(NoFreeCMSeriesCorrectErr);
          ErrorType::PostingNotAllowed:
            ERROR(PostingNotAllowedCorrectErr);
          ErrorType::ExtDocErr:
            ERROR(ExternalDocCorrectErr);
          ErrorType::InventoryPostClosed:
            ERROR(InventoryPostClosedCorrectErr);
          ErrorType::DimCombHeaderErr:
            ERROR(InvalidDimCombHeaderCorrectErr);
        end;
    END;

    LOCAL PROCEDURE ErrorHelperLine@23(ErrorOption@1000 : Option;SalesInvoiceLine@1001 : Record "Sales Invoice Line");
    VAR
      Item@1002 : Record Item;
    BEGIN
      if CancellingOnly then
        case ErrorOption of
          ErrorType::ItemBlocked:
            begin
              Item.GET(SalesInvoiceLine."No.");
              ERROR(ItemIsBlockedCancelErr,Item."No.",Item.Description);
            end;
          ErrorType::ItemIsReturned:
            begin
              Item.GET(SalesInvoiceLine."No.");
              ERROR(ShippedQtyReturnedCancelErr,Item."No.",Item.Description);
            end;
          ErrorType::LineFromOrder:
            ERROR(SalesLineFromOrderCancelErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description);
          ErrorType::WrongItemType:
            ERROR(LineTypeNotAllowedCancelErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description,SalesInvoiceLine.Type);
          ErrorType::LineFromJob:
            ERROR(UsedInJobCancelErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description);
          ErrorType::DimCombErr:
            ERROR(InvalidDimCombinationCancelErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description);
        end
      else
        case ErrorOption of
          ErrorType::ItemBlocked:
            begin
              Item.GET(SalesInvoiceLine."No.");
              ERROR(ItemIsBlockedCorrectErr,Item."No.",Item.Description);
            end;
          ErrorType::ItemIsReturned:
            begin
              Item.GET(SalesInvoiceLine."No.");
              ERROR(ShippedQtyReturnedCorrectErr,Item."No.",Item.Description);
            end;
          ErrorType::LineFromOrder:
            ERROR(SalesLineFromOrderCorrectErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description);
          ErrorType::WrongItemType:
            ERROR(LineTypeNotAllowedCorrectErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description,SalesInvoiceLine.Type);
          ErrorType::LineFromJob:
            ERROR(UsedInJobCorrectErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description);
          ErrorType::DimCombErr:
            ERROR(InvalidDimCombinationCorrectErr,SalesInvoiceLine."No.",SalesInvoiceLine.Description);
        end;
    END;

    LOCAL PROCEDURE ErrorHelperAccount@24(ErrorOption@1000 : Option;AccountNo@1001 : Code[20];AccountCaption@1002 : Text;No@1003 : Code[20];Name@1004 : Text);
    BEGIN
      if CancellingOnly then
        case ErrorOption of
          ErrorType::AccountBlocked:
            ERROR(AccountIsBlockedCancelErr,AccountCaption,AccountNo);
          ErrorType::DimErr:
            ERROR(InvalidDimCodeCancelErr,AccountCaption,AccountNo,No,Name);
        end
      else
        case ErrorOption of
          ErrorType::AccountBlocked:
            ERROR(AccountIsBlockedCorrectErr,AccountCaption,AccountNo);
          ErrorType::DimErr:
            ERROR(InvalidDimCodeCorrectErr,AccountCaption,AccountNo,No,Name);
        end;
    END;

    BEGIN
    END.
  }
}

