OBJECT Codeunit 1100 Cost Account Mgt
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "G/L Account"=rm,
                TableData "G/L Entry"=rm,
                TableData "Cost Entry"=rimd,
                TableData "Cost Center"=r,
                TableData "Cost Object"=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CostAccSetup@1000 : Record "Cost Accounting Setup";
      GLAcc@1001 : Record "G/L Account";
      CostType@1002 : Record "Cost Type";
      Window@1003 : Dialog;
      i@1004 : Integer;
      NoOfCostTypes@1005 : Integer;
      NoOfGLAcc@1006 : Integer;
      RecsProcessed@1007 : Integer;
      RecsCreated@1008 : Integer;
      CostTypeExists@1009 : Boolean;
      Text000@1012 : TextConst 'ENU=This function transfers all income statement accounts from the chart of accounts to the chart of cost types.\\All types including Heading, Begin-Total, and End-Total are transferred.\General ledger accounts that have the same number as an existing cost type are not transferred.\\Do you want to start the job?';
      Text001@1013 : TextConst 'ENU=Indent %1?';
      Text002@1014 : TextConst 'ENU=Create cost types:\Number   #1########';
      Text003@1015 : TextConst 'ENU=%1 income statement accounts processed. %2 cost types created.';
      Text004@1016 : TextConst 'ENU=Indent chart of cost types\Number   #1########';
      Text005@1017 : TextConst 'ENU=End-Total %1 does not belong to the corresponding Begin-Total.';
      Text006@1018 : TextConst 'ENU=This function registers the cost types in the chart of accounts.\\This creates the link between chart of accounts and cost types and verifies that each income statement account is only linked to a cost type.\\Start job?';
      Text007@1019 : TextConst 'ENU=%1 cost types are processed and logged in %2 G/L accounts.';
      Text008@1020 : TextConst 'ENU=Check assignment cost type - G/L account\Number   #1########';
      Text009@1021 : TextConst 'ENU=Cost type %1 should be assigned to G/L account %2.\Cost type %3 is already linked to G/L account %2.\\Each G/L account can only be linked to a single cost type.\However, it is possible to link multiple G/L accounts to a single cost type.';
      Text010@1022 : TextConst 'ENU=Indenting chart\Number   #1########';
      Text011@1023 : TextConst 'ENU=End-Total %1 does not belong to Begin-Total.';
      Text012@1024 : TextConst 'ENU=The range is too long and cannot be transferred to the End-Total field.\\Move End-Total closer to Begin-Total or use shorter codes.';
      Text013@1025 : TextConst '@@@="%1=Table caption Cost Center;%2=Field Value Cost Center Code";ENU=%1 %2 is not defined in Cost Accounting.';
      Text014@1026 : TextConst '@@@="%1=Table caption Cost Center;%2=Field Value Cost Center Code";ENU=%1 %2 is blocked in Cost Accounting.';
      Text015@1027 : TextConst '@@@="%1=Table caption Cost Center;%2=Field Value Cost Center Code";ENU=%1 %2 does not have line type %1 or Begin-Total.';
      Text016@1028 : TextConst '@@@="%1=Table caption Cost Center or Cost Object;%2=Field Value";ENU=Do you want to create %1 %2 in Cost Accounting?';
      Text017@1029 : TextConst '@@@="%1=Table caption Cost Center or Cost Object or Cost Type;%2=Field Value";ENU=%1 %2 has been updated in Cost Accounting.';
      Text018@1030 : TextConst 'ENU=Create dimension\Number   #1########';
      Text019@1031 : TextConst 'ENU=%1 cost centers created.';
      Text020@1032 : TextConst 'ENU=%1 cost objects created.';
      Text021@1033 : TextConst 'ENU=Do you want to get cost centers from dimension %1 ?';
      Text022@1034 : TextConst 'ENU=Do you want to get cost objects from dimension %1 ?';
      Text023@1035 : TextConst '@@@="%1=Table caption Cost Center or Cost Object or Cost Type or Dimension Value;%2=Field Value";ENU=The %1 %2 cannot be inserted because it already exists as %3.';
      Text024@1037 : TextConst '@@@="%1=Table caption Cost Center or Cost Object;%2=Field Value";ENU=Do you want to update %1 %2 in Cost Accounting?';
      Text025@1038 : TextConst '@@@="%1=Cost Budget Register tablecaption,%2=Cost Budget Entry tablecaption,%3=Entry No. fieldcaption";ENU=The %1 cannot be updated with this %2 because the %3 does not fall within the From/To range.';

    [External]
    PROCEDURE GetCostTypesFromChartOfAccount@1();
    BEGIN
      if not CONFIRM(Text000,true) then
        ERROR('');

      GetCostTypesFromChartDirect;

      IndentCostTypes(true);

      MESSAGE(Text003,NoOfGLAcc,RecsCreated)
    END;

    [External]
    PROCEDURE GetCostTypesFromChartDirect@2();
    BEGIN
      NoOfGLAcc := 0;
      RecsCreated := 0;
      Window.OPEN(Text002);

      with GLAcc do begin
        RESET;
        SETRANGE("Income/Balance","Income/Balance"::"Income Statement");
        if FIND('-') then
          repeat
            GetCostType("No.",CostTypeExists);
            Window.UPDATE(1,"No.");
            NoOfGLAcc := NoOfGLAcc + 1;

            CostType.INIT;
            CostType."No." := "No.";
            CostType.Name := Name;
            CostType."Search Name" := "Search Name";
            CostType.Type := "Account Type";
            CostType.Blocked := "Account Type" <> "Account Type"::Posting;
            CostType."Cost Center Code" := GetCostCenterCodeFromDefDim(DATABASE::"G/L Account","No.");
            if not CostCenterExists(CostType."Cost Center Code") then
              CostType."Cost Center Code" := '';
            CostType."Cost Object Code" := GetCostObjectCodeFromDefDim(DATABASE::"G/L Account","No.");
            if not CostObjectExists(CostType."Cost Object Code") then
              CostType."Cost Object Code" := '';
            CostType."New Page" := "New Page";
            if "No. of Blank Lines" > 0 then
              CostType."Blank Line" := true;
            CostType.Totaling := Totaling;
            CostType."Modified Date" := TODAY;
            if "Account Type" = "Account Type"::Posting then
              CostType."G/L Account Range" := "No."
            else
              CostType."G/L Account Range" := '';
            if not CostTypeExists then
              if CostType.INSERT then begin
                RecsCreated := RecsCreated + 1;
                "Cost Type No." := "No.";
              end;
            MODIFY;
          until NEXT = 0;
        Window.CLOSE;
      end;

      IndentCostTypes(true);
    END;

    [External]
    PROCEDURE ConfirmUpdate@32(CallingTrigger@1000 : 'OnInsert,OnModify,,OnRename';TableCaption@1001 : Text[80];Value@1002 : Code[20]) : Boolean;
    BEGIN
      if CallingTrigger = CallingTrigger::OnInsert then
        exit(CONFIRM(Text016,true,TableCaption,Value));
      exit(CONFIRM(Text024,true,TableCaption,Value));
    END;

    LOCAL PROCEDURE CanUpdate@46(Alignment@1000 : Option;NoAligment@1001 : Option;PromptAlignment@1002 : Option;DimValue@1003 : Record "Dimension Value";DimensionCode@1004 : Code[20];CallingTrigger@1005 : Option;TableCaption@1006 : Text[80]) : Boolean;
    BEGIN
      if DimValue."Dimension Code" <> DimensionCode then
        exit(false);
      if DimValue."Dimension Value Type" in
         [DimValue."Dimension Value Type"::"Begin-Total",DimValue."Dimension Value Type"::"End-Total"]
      then
        exit(false);
      case Alignment of
        NoAligment:
          exit(false);
        PromptAlignment:
          if not ConfirmUpdate(CallingTrigger,TableCaption,DimValue.Code) then
            exit(false);
      end;
      exit(true);
    END;

    [External]
    PROCEDURE UpdateCostTypeFromGLAcc@3(VAR GLAcc@1000 : Record "G/L Account";VAR xGLAcc@1001 : Record "G/L Account";CallingTrigger@1002 : 'OnInsert,OnModify,,OnRename');
    VAR
      UpdateCostType@1003 : Boolean;
    BEGIN
      if GLAcc."Income/Balance" <> GLAcc."Income/Balance"::"Income Statement" then
        exit;

      if (CallingTrigger = CallingTrigger::OnModify) and (FORMAT(GLAcc) = FORMAT(xGLAcc)) then
        exit;

      if not CostAccSetup.GET then
        exit;

      if CostType.GET(GLAcc."No.") and (GLAcc."Cost Type No." = '') then
        exit;

      if not CheckAlignment(GLAcc,CallingTrigger) then
        exit;

      case CallingTrigger of
        CallingTrigger::OnInsert,CallingTrigger::OnModify:
          with GLAcc do begin
            if CostType.GET("Cost Type No.") then
              UpdateCostType := IsGLAccNoFirstFromRange(CostType,"No.")
            else begin
              CostType."No." := "No.";
              UpdateCostType := CostType.INSERT;
            end;

            if UpdateCostType then begin
              CostType.Name := Name;
              CostType."Search Name" := "Search Name";
              CostType.Type := "Account Type";
              CostType.Blocked := "Account Type" <> "Account Type"::Posting;
              CostType."Cost Center Code" := GetCostCenterCodeFromDefDim(DATABASE::"G/L Account","No.");
              if not CostCenterExists(CostType."Cost Center Code") then
                CostType."Cost Center Code" := '';
              CostType."Cost Object Code" := GetCostObjectCodeFromDefDim(DATABASE::"G/L Account","No.");
              if not CostObjectExists(CostType."Cost Object Code") then
                CostType."Cost Object Code" := '';
              CostType."New Page" := "New Page";
              CostType."Blank Line" := "No. of Blank Lines" > 0;
              CostType.Totaling := Totaling;
              CostType."Modified Date" := TODAY;
              if "Account Type" = "Account Type"::Posting then
                CostType."G/L Account Range" := "No."
              else
                CostType."G/L Account Range" := '';

              CostType.MODIFY;
              "Cost Type No." := CostType."No.";
            end;
          end;
        CallingTrigger::OnRename:
          begin
            if CostType.GET(GLAcc."No.") then
              ERROR(Text023,GLAcc.TABLECAPTION,GLAcc."No.",CostType.TABLECAPTION);
            if CostType.GET(xGLAcc."No.") then begin
              CostType.RENAME(GLAcc."No.");
              CostType."G/L Account Range" := GLAcc."No.";
              CostType.MODIFY;
              GLAcc."Cost Type No." := GLAcc."No.";
            end else
              exit;
          end;
      end;
      IndentCostTypes(false);
      MESSAGE(Text017,CostType.TABLECAPTION,GLAcc."No.");
    END;

    [External]
    PROCEDURE UpdateCostCenterFromDim@4(VAR DimValue@1000 : Record "Dimension Value";VAR xDimValue@1001 : Record "Dimension Value";CallingTrigger@1002 : 'OnInsert,OnModify,,OnRename');
    VAR
      CostCenter@1003 : Record "Cost Center";
    BEGIN
      CostAccSetup.GET;
      if not CanUpdate(CostAccSetup."Align Cost Center Dimension",CostAccSetup."Align Cost Center Dimension"::"No Alignment",
           CostAccSetup."Align Cost Center Dimension"::Prompt,DimValue,CostAccSetup."Cost Center Dimension",CallingTrigger,
           CostCenter.TABLECAPTION)
      then
        exit;

      case CallingTrigger of
        CallingTrigger::OnInsert:
          begin
            if CostCenterExists(DimValue.Code) then
              ERROR(Text023,CostCenter.TABLECAPTION,DimValue.Code,CostCenter.TABLECAPTION);
            InsertCostCenterFromDimValue(DimValue);
          end;
        CallingTrigger::OnModify:
          begin
            if not CostCenterExists(DimValue.Code) then
              InsertCostCenterFromDimValue(DimValue)
            else
              ModifyCostCenterFromDimValue(DimValue);
          end;
        CallingTrigger::OnRename:
          begin
            if not CostCenterExists(xDimValue.Code) then
              exit;
            if CostCenterExists(DimValue.Code) then
              ERROR(Text023,DimValue.TABLECAPTION,DimValue.Code,CostCenter.TABLECAPTION);
            CostCenter.GET(xDimValue.Code);
            CostCenter.RENAME(DimValue.Code);
          end;
      end;

      IndentCostCenters;
      MESSAGE(Text017,CostCenter.TABLECAPTION,DimValue.Code);
    END;

    [External]
    PROCEDURE UpdateCostObjectFromDim@24(VAR DimValue@1002 : Record "Dimension Value";VAR xDimValue@1001 : Record "Dimension Value";CallingTrigger@1000 : 'OnInsert,OnModify,,OnRename');
    VAR
      CostObject@1003 : Record "Cost Object";
    BEGIN
      CostAccSetup.GET;
      if not CanUpdate(CostAccSetup."Align Cost Object Dimension",CostAccSetup."Align Cost Object Dimension"::"No Alignment",
           CostAccSetup."Align Cost Object Dimension"::Prompt,DimValue,CostAccSetup."Cost Object Dimension",CallingTrigger,
           CostObject.TABLECAPTION)
      then
        exit;

      case CallingTrigger of
        CallingTrigger::OnInsert:
          begin
            if CostObjectExists(DimValue.Code) then
              ERROR(Text023,CostObject.TABLECAPTION,DimValue.Code,CostObject.TABLECAPTION);
            InsertCostObjectFromDimValue(DimValue);
          end;
        CallingTrigger::OnModify:
          begin
            if not CostObjectExists(DimValue.Code) then
              InsertCostObjectFromDimValue(DimValue)
            else
              ModifyCostObjectFromDimValue(DimValue);
          end;
        CallingTrigger::OnRename:
          begin
            if not CostObjectExists(xDimValue.Code) then
              exit;
            if CostObjectExists(DimValue.Code) then
              ERROR(Text023,DimValue.TABLECAPTION,DimValue.Code,CostObject.TABLECAPTION);
            CostObject.GET(xDimValue.Code);
            CostObject.RENAME(DimValue.Code);
          end;
      end;

      IndentCostCenters;
      MESSAGE(Text017,CostObject.TABLECAPTION,DimValue.Code);
    END;

    [External]
    PROCEDURE UpdateCostTypeFromDefaultDimension@33(VAR DefaultDim@1000 : Record "Default Dimension";VAR GLAcc@1001 : Record "G/L Account";CallingTrigger@1002 : 'OnInsert,OnModify,OnDelete');
    VAR
      CostType@1010 : Record "Cost Type";
    BEGIN
      CostAccSetup.GET;

      with GLAcc do
        if CostType.GET("Cost Type No.") then begin
          if not IsGLAccNoFirstFromRange(CostType,"No.") then
            exit;
          if not CheckAlignment(GLAcc,CallingTrigger::OnModify) then
            exit;

          if CostAccSetup."Cost Center Dimension" = DefaultDim."Dimension Code" then
            if CostCenterExists(DefaultDim."Dimension Value Code") and not (CallingTrigger = CallingTrigger::OnDelete) then
              CostType."Cost Center Code" := DefaultDim."Dimension Value Code"
            else
              CostType."Cost Center Code" := '';

          if CostAccSetup."Cost Object Dimension" = DefaultDim."Dimension Code" then
            if CostObjectExists(DefaultDim."Dimension Value Code") and not (CallingTrigger = CallingTrigger::OnDelete) then
              CostType."Cost Object Code" := DefaultDim."Dimension Value Code"
            else
              CostType."Cost Object Code" := '';

          CostType.MODIFY;
        end;
    END;

    [External]
    PROCEDURE ConfirmIndentCostTypes@5();
    BEGIN
      if not CONFIRM(Text001,true,CostType.TABLECAPTION) then
        ERROR('');

      IndentCostTypes(true);
    END;

    [External]
    PROCEDURE IndentCostTypes@6(ShowMessage@1000 : Boolean);
    VAR
      CostTypeNo@1001 : ARRAY [10] OF Code[20];
    BEGIN
      i := 0;
      if ShowMessage then
        Window.OPEN(Text004);

      with CostType do begin
        if FIND('-') then
          repeat
            if ShowMessage then
              Window.UPDATE(1,"No.");
            if Type = Type::"End-Total" then begin
              if i < 1 then
                ERROR(Text005,"No.");
              Totaling := CostTypeNo[i] + '..' + "No.";
              i := i - 1;
            end;
            Indentation := i;
            MODIFY;
            if Type = Type::"Begin-Total" then begin
              i := i + 1;
              CostTypeNo[i] := "No.";
            end;
          until NEXT = 0;
      end;

      if ShowMessage then
        Window.CLOSE;
    END;

    [External]
    PROCEDURE LinkCostTypesToGLAccountsYN@7();
    BEGIN
      if not CONFIRM(Text006,true) then
        ERROR('');

      CLEARALL;
      LinkCostTypesToGLAccounts;
      MESSAGE(Text007,NoOfCostTypes,NoOfGLAcc);
    END;

    [External]
    PROCEDURE LinkCostTypesToGLAccounts@8();
    BEGIN
      Window.OPEN(Text008);

      GLAcc.RESET;
      CostType.RESET;
      GLAcc.MODIFYALL("Cost Type No.",'');
      CostType.SETRANGE(Type,CostType.Type::"Cost Type");
      CostType.SETFILTER("G/L Account Range",'<>%1','');
      if CostType.FINDSET then
        repeat
          Window.UPDATE(1,CostType."No.");
          NoOfCostTypes := NoOfCostTypes + 1;
          GLAcc.SETFILTER("No.",CostType."G/L Account Range");
          GLAcc.SETRANGE("Income/Balance",GLAcc."Income/Balance"::"Income Statement");
          if GLAcc.FINDSET then
            repeat
              if GLAcc."Cost Type No." <> '' then begin
                Window.CLOSE;
                ERROR(Text009,CostType."No.",GLAcc."No.",GLAcc."Cost Type No.");
              end;
              GLAcc."Cost Type No." := CostType."No.";
              NoOfGLAcc := NoOfGLAcc + 1;
              GLAcc.MODIFY;
            until GLAcc.NEXT = 0;
        until CostType.NEXT = 0;

      Window.CLOSE;
    END;

    [External]
    PROCEDURE CreateCostCenters@9();
    VAR
      CostCenter@1000 : Record "Cost Center";
      DimValue@1001 : Record "Dimension Value";
    BEGIN
      CostAccSetup.GET;
      if not CONFIRM(Text021,true,CostAccSetup."Cost Center Dimension") then
        ERROR('');

      RecsProcessed := 0;
      RecsCreated := 0;
      Window.OPEN(Text018);

      with CostCenter do begin
        RESET;
        DimValue.SETRANGE("Dimension Code",CostAccSetup."Cost Center Dimension");
        if DimValue.FIND('-') then begin
          repeat
            Window.UPDATE(1,Code);
            if InsertCostCenterFromDimValue(DimValue) then
              RecsProcessed := RecsProcessed + 1;
          until DimValue.NEXT = 0;
          Window.CLOSE;
        end;
      end;

      IndentCostCenters;

      MESSAGE(Text019,RecsProcessed);
    END;

    [External]
    PROCEDURE IndentCostCentersYN@10();
    VAR
      CostCenter@1000 : Record "Cost Center";
    BEGIN
      if not CONFIRM(Text001,true,CostCenter.TABLECAPTION) then
        ERROR('');

      IndentCostCenters;
    END;

    [External]
    PROCEDURE IndentCostCenters@11();
    VAR
      CostCenter@1003 : Record "Cost Center";
      CostCenterRange@1000 : Code[250];
      StartRange@1001 : ARRAY [10] OF Code[20];
      SpecialSort@1002 : Boolean;
    BEGIN
      SpecialSort := false;
      i := 0;

      Window.OPEN(Text010);

      with CostCenter do begin
        SETCURRENTKEY("Sorting Order");
        SETFILTER("Sorting Order",'<>%1','');
        if FIND('-') then
          SpecialSort := true;

        RESET;
        if SpecialSort then begin
          SETCURRENTKEY("Sorting Order");
          if FINDSET then
            repeat
              if "Line Type" = "Line Type"::"End-Total" then begin
                Totaling := CostCenterRange;
                if i < 1 then
                  ERROR(Text011,Code);
                i := i - 1;
              end;
              Indentation := i;
              MODIFY;
              if "Line Type" = "Line Type"::"Begin-Total" then begin
                CostCenterRange := '';
                i := i + 1;
              end;
              if (("Line Type" = "Line Type"::"Cost Center") and (i = 1)) or
                 ("Line Type" = "Line Type"::"Begin-Total")
              then begin
                if STRLEN(CostCenterRange) + STRLEN(Code) > MAXSTRLEN(CostCenterRange) then
                  ERROR(Text012);
                if CostCenterRange = '' then
                  CostCenterRange := Code
                else
                  CostCenterRange := CostCenterRange + '|' + Code;
              end;
            until NEXT = 0;
        end else begin
          SETCURRENTKEY(Code);
          if FINDSET then
            repeat
              Window.UPDATE(1,Code);

              if "Line Type" = "Line Type"::"End-Total" then begin
                if i < 1 then
                  ERROR(Text005,Code);
                Totaling := StartRange[i] + '..' + Code;
                i := i - 1;
              end;
              Indentation := i;
              MODIFY;
              if "Line Type" = "Line Type"::"Begin-Total" then begin
                i := i + 1;
                StartRange[i] := Code;
              end;
            until NEXT = 0;
        end;
      end;
      Window.CLOSE;
    END;

    [External]
    PROCEDURE CreateCostObjects@12();
    VAR
      CostObject@1000 : Record "Cost Object";
      DimValue@1001 : Record "Dimension Value";
    BEGIN
      CostAccSetup.GET;
      if not CONFIRM(Text022,true,CostAccSetup."Cost Object Dimension") then
        ERROR('');

      RecsProcessed := 0;
      RecsCreated := 0;
      Window.OPEN(Text018);

      with CostObject do begin
        RESET;
        DimValue.SETRANGE("Dimension Code",CostAccSetup."Cost Object Dimension");
        if DimValue.FIND('-') then begin
          repeat
            Window.UPDATE(1,Code);
            if InsertCostObjectFromDimValue(DimValue) then
              RecsProcessed := RecsProcessed + 1;
          until DimValue.NEXT = 0;
          Window.CLOSE;
        end;
      end;

      IndentCostObjects;
      MESSAGE(Text020,RecsProcessed);
    END;

    [External]
    PROCEDURE IndentCostObjectsYN@13();
    VAR
      CostObject@1000 : Record "Cost Object";
    BEGIN
      if not CONFIRM(Text001,true,CostObject.TABLECAPTION) then
        ERROR('');

      IndentCostObjects;
    END;

    [External]
    PROCEDURE IndentCostObjects@14();
    VAR
      CostObject@1003 : Record "Cost Object";
      CostObjRange@1000 : Code[250];
      StartRange@1001 : ARRAY [10] OF Code[20];
      SpecialSort@1002 : Boolean;
    BEGIN
      SpecialSort := false;
      i := 0;

      Window.OPEN(Text010);

      with CostObject do begin
        SETCURRENTKEY("Sorting Order");
        SETFILTER("Sorting Order",'<>%1','');
        if FIND('-') then
          SpecialSort := true;

        RESET;
        if SpecialSort then begin
          SETCURRENTKEY("Sorting Order");
          if FINDSET then
            repeat
              if "Line Type" = "Line Type"::"End-Total" then begin
                Totaling := CostObjRange;
                if i < 1 then
                  ERROR(Text011,Code);
                i := i - 1;
              end;
              Indentation := i;
              MODIFY;
              if "Line Type" = "Line Type"::"Begin-Total" then begin
                CostObjRange := '';
                i := i + 1;
              end;

              if (("Line Type" = "Line Type"::"Cost Object") and (i = 1)) or
                 ("Line Type" = "Line Type"::"Begin-Total")
              then begin
                if STRLEN(CostObjRange) + STRLEN(Code) > MAXSTRLEN(CostObjRange) then
                  ERROR(Text012);

                if CostObjRange = '' then
                  CostObjRange := Code
                else
                  CostObjRange := CostObjRange + '|' + Code;
              end;
            until NEXT = 0;
        end else begin
          SETCURRENTKEY(Code);
          if FIND('-') then
            repeat
              Window.UPDATE(1,Code);
              if "Line Type" = "Line Type"::"End-Total" then begin
                if i < 1 then
                  ERROR(Text005,Code);
                Totaling := StartRange[i] + '..' + Code;
                i := i - 1;
              end;
              Indentation := i;
              MODIFY;

              if "Line Type" = "Line Type"::"Begin-Total" then begin
                i := i + 1;
                StartRange[i] := Code;
              end;
            until NEXT = 0;
        end;
      end;
      Window.CLOSE;
    END;

    [External]
    PROCEDURE CheckValidCCAndCOInGLEntry@15(DimSetID@1000 : Integer);
    VAR
      CostCenter@1003 : Record "Cost Center";
      CostObject@1004 : Record "Cost Object";
      CostCenterCode@1001 : Code[20];
      CostObjectCode@1002 : Code[20];
    BEGIN
      if not CostAccSetup.GET then
        exit;
      if not CostAccSetup."Check G/L Postings" then
        exit;

      CostCenterCode := GetCostCenterCodeFromDimSet(DimSetID);
      CostObjectCode := GetCostObjectCodeFromDimSet(DimSetID);

      if CostCenterCode <> '' then begin
        if not CostCenter.GET(CostCenterCode) then
          ERROR(Text013,CostCenter.TABLECAPTION,CostCenterCode);
        if CostCenter.Blocked then
          ERROR(Text014,CostCenter.TABLECAPTION,CostCenterCode);
        if not (CostCenter."Line Type" in [CostCenter."Line Type"::"Cost Center",CostCenter."Line Type"::"Begin-Total"]) then
          ERROR(Text015,CostCenter.TABLECAPTION,CostCenterCode);
      end;

      if CostObjectCode <> '' then begin
        if not CostObject.GET(CostObjectCode) then
          ERROR(Text013,CostObject.TABLECAPTION,CostObjectCode);
        if CostObject.Blocked then
          ERROR(Text014,CostObject.TABLECAPTION,CostObjectCode);
        if not (CostObject."Line Type" in [CostObject."Line Type"::"Cost Object",CostObject."Line Type"::"Begin-Total"]) then
          ERROR(Text015,CostObject.TABLECAPTION,CostObjectCode);
      end;
    END;

    [External]
    PROCEDURE GetCostCenterCodeFromDimSet@17(DimSetID@1002 : Integer) : Code[20];
    VAR
      DimSetEntry@1005 : Record "Dimension Set Entry";
    BEGIN
      CostAccSetup.GET;
      if DimSetEntry.GET(DimSetID,CostAccSetup."Cost Center Dimension") then
        exit(DimSetEntry."Dimension Value Code");
      exit('');
    END;

    [External]
    PROCEDURE GetCostCenterCodeFromDefDim@18(TableID@1000 : Integer;No@1002 : Code[20]) : Code[20];
    VAR
      DefaultDim@1001 : Record "Default Dimension";
    BEGIN
      CostAccSetup.GET;
      if DefaultDim.GET(TableID,No,CostAccSetup."Cost Center Dimension") then
        exit(DefaultDim."Dimension Value Code");
    END;

    [External]
    PROCEDURE CostCenterExists@20(CostCenterCode@1001 : Code[20]) : Boolean;
    VAR
      CostCenter@1000 : Record "Cost Center";
    BEGIN
      exit(CostCenter.GET(CostCenterCode));
    END;

    [External]
    PROCEDURE CostCenterExistsAsDimValue@22(CostCenterCode@1001 : Code[20]) : Boolean;
    VAR
      DimValue@1000 : Record "Dimension Value";
    BEGIN
      CostAccSetup.GET;
      exit(DimValue.GET(CostAccSetup."Cost Center Dimension",CostCenterCode));
    END;

    [External]
    PROCEDURE LookupCostCenterFromDimValue@25(VAR CostCenterCode@1000 : Code[20]);
    VAR
      DimValue@1001 : Record "Dimension Value";
    BEGIN
      CostAccSetup.GET;
      DimValue.LookupDimValue(CostAccSetup."Cost Center Dimension",CostCenterCode);
    END;

    [External]
    PROCEDURE GetCostObjectCodeFromDimSet@16(DimSetID@1002 : Integer) : Code[20];
    VAR
      DimSetEntry@1005 : Record "Dimension Set Entry";
    BEGIN
      CostAccSetup.GET;
      if DimSetEntry.GET(DimSetID,CostAccSetup."Cost Object Dimension") then
        exit(DimSetEntry."Dimension Value Code");
      exit('');
    END;

    [External]
    PROCEDURE GetCostObjectCodeFromDefDim@19(TableID@1000 : Integer;No@1001 : Code[20]) : Code[20];
    VAR
      DefaultDim@1002 : Record "Default Dimension";
    BEGIN
      CostAccSetup.GET;
      if DefaultDim.GET(TableID,No,CostAccSetup."Cost Object Dimension") then
        exit(DefaultDim."Dimension Value Code");
    END;

    [External]
    PROCEDURE CostObjectExists@21(CostObjectCode@1001 : Code[20]) : Boolean;
    VAR
      CostObject@1000 : Record "Cost Object";
    BEGIN
      exit(CostObject.GET(CostObjectCode));
    END;

    [External]
    PROCEDURE CostObjectExistsAsDimValue@23(CostObjectCode@1000 : Code[20]) : Boolean;
    VAR
      DimValue@1001 : Record "Dimension Value";
    BEGIN
      CostAccSetup.GET;
      exit(DimValue.GET(CostAccSetup."Cost Object Dimension",CostObjectCode));
    END;

    [External]
    PROCEDURE LookupCostObjectFromDimValue@26(VAR COstObjectCode@1000 : Code[20]);
    VAR
      DimValue@1001 : Record "Dimension Value";
    BEGIN
      CostAccSetup.GET;
      DimValue.LookupDimValue(CostAccSetup."Cost Object Dimension",COstObjectCode);
    END;

    LOCAL PROCEDURE InsertCostCenterFromDimValue@42(DimValue@1001 : Record "Dimension Value") : Boolean;
    VAR
      CostCenter@1000 : Record "Cost Center";
    BEGIN
      CopyDimValueToCostCenter(DimValue,CostCenter);
      exit(CostCenter.INSERT);
    END;

    LOCAL PROCEDURE ModifyCostCenterFromDimValue@45(DimValue@1000 : Record "Dimension Value") : Boolean;
    VAR
      CostCenter@1001 : Record "Cost Center";
    BEGIN
      CostCenter.GET(DimValue.Code);
      CopyDimValueToCostCenter(DimValue,CostCenter);
      exit(CostCenter.MODIFY);
    END;

    LOCAL PROCEDURE CopyDimValueToCostCenter@44(DimValue@1000 : Record "Dimension Value";VAR CostCenter@1001 : Record "Cost Center");
    BEGIN
      CostCenter.INIT;
      CostCenter.Code := DimValue.Code;
      CostCenter.Name := DimValue.Name;
      CostCenter."Line Type" := DimValue."Dimension Value Type";
      CostCenter.Blocked := DimValue.Blocked;
    END;

    LOCAL PROCEDURE InsertCostObjectFromDimValue@51(DimValue@1001 : Record "Dimension Value") : Boolean;
    VAR
      CostObject@1000 : Record "Cost Object";
    BEGIN
      CopyDimValueToCostObject(DimValue,CostObject);
      exit(CostObject.INSERT);
    END;

    LOCAL PROCEDURE ModifyCostObjectFromDimValue@50(DimValue@1000 : Record "Dimension Value") : Boolean;
    VAR
      CostObject@1001 : Record "Cost Object";
    BEGIN
      CostObject.GET(DimValue.Code);
      CopyDimValueToCostObject(DimValue,CostObject);
      exit(CostObject.MODIFY);
    END;

    LOCAL PROCEDURE CopyDimValueToCostObject@49(DimValue@1000 : Record "Dimension Value";VAR CostObject@1001 : Record "Cost Object");
    BEGIN
      CostObject.INIT;
      CostObject.Code := DimValue.Code;
      CostObject.Name := DimValue.Name;
      CostObject."Line Type" := DimValue."Dimension Value Type";
      CostObject.Blocked := DimValue.Blocked;
    END;

    [External]
    PROCEDURE InsertCostBudgetRegister@27(CostBudgetEntryNo@1002 : Integer;CostBudgetName@1003 : Code[10];CostBudgetAmount@1004 : Decimal) : Integer;
    VAR
      CostBudgetReg@1000 : Record "Cost Budget Register";
    BEGIN
      CostBudgetReg.LOCKTABLE;
      if CostBudgetReg.FINDLAST then
        CostBudgetReg."No." := CostBudgetReg."No." + 1
      else
        CostBudgetReg."No." := 1;
      CostBudgetReg.INIT;
      CostBudgetReg.Source := CostBudgetReg.Source::Manual;
      CostBudgetReg."From Cost Budget Entry No." := CostBudgetEntryNo;
      CostBudgetReg."To Cost Budget Entry No." := CostBudgetEntryNo;
      CostBudgetReg."No. of Entries" := 1;
      CostBudgetReg."Cost Budget Name" := CostBudgetName;
      CostBudgetReg.Amount := CostBudgetAmount;
      CostBudgetReg."Processed Date" := TODAY;
      CostBudgetReg."User ID" := USERID;
      CostBudgetReg.INSERT;

      exit(CostBudgetReg."No.");
    END;

    [External]
    PROCEDURE UpdateCostBudgetRegister@28(CostBudgetRegNo@1000 : Integer;CostBudgetEntryNo@1001 : Integer;CostBudgetAmount@1003 : Decimal);
    VAR
      CostBudgetReg@1002 : Record "Cost Budget Register";
      CostBudgetEntry@1004 : Record "Cost Budget Entry";
    BEGIN
      if CostBudgetRegNo = 0 then begin
        CostBudgetReg.SETCURRENTKEY("From Cost Budget Entry No.","To Cost Budget Entry No.");
        CostBudgetReg.SETRANGE("From Cost Budget Entry No.",0,CostBudgetEntryNo);
        CostBudgetReg.SETFILTER("To Cost Budget Entry No.",'%1..',CostBudgetEntryNo);
        CostBudgetReg.FINDLAST
      end else
        CostBudgetReg.GET(CostBudgetRegNo);

      if (CostBudgetEntryNo > CostBudgetReg."To Cost Budget Entry No." + 1) or
         (CostBudgetEntryNo < CostBudgetReg."From Cost Budget Entry No.")
      then
        ERROR(Text025,CostBudgetReg.TABLECAPTION,CostBudgetEntry.TABLECAPTION,CostBudgetEntry.FIELDCAPTION("Entry No."));
      if CostBudgetEntryNo > CostBudgetReg."To Cost Budget Entry No." then begin
        CostBudgetReg."To Cost Budget Entry No." := CostBudgetEntryNo;
        CostBudgetReg."No. of Entries" := CostBudgetReg."To Cost Budget Entry No." - CostBudgetReg."From Cost Budget Entry No." + 1
      end;
      CostBudgetReg.Amount := CostBudgetReg.Amount + CostBudgetAmount;
      CostBudgetReg.MODIFY(true)
    END;

    LOCAL PROCEDURE CheckAlignment@30(VAR GLAcc@1001 : Record "G/L Account";CallingTrigger@1002 : Option) : Boolean;
    BEGIN
      CostAccSetup.GET;

      if CostAccSetup."Align G/L Account" = CostAccSetup."Align G/L Account"::"No Alignment" then
        exit(false);

      if CostAccSetup."Align G/L Account" = CostAccSetup."Align G/L Account"::Prompt then
        if not ConfirmUpdate(CallingTrigger,CostType.TABLECAPTION,GLAcc."No.") then
          exit(false);

      exit(true);
    END;

    [External]
    PROCEDURE IsGLAccNoFirstFromRange@29(CostType@1001 : Record "Cost Type";GLAccNo@1002 : Code[20]) : Boolean;
    VAR
      GLAccCheck@1000 : Record "G/L Account";
    BEGIN
      GLAccCheck.SETFILTER("No.",CostType."G/L Account Range");
      if GLAccCheck.FINDFIRST then
        exit(GLAccNo = GLAccCheck."No.");

      exit(false);
    END;

    [External]
    PROCEDURE GetCostType@31(GLAccNo@1000 : Code[20];VAR CostTypeExists@1001 : Boolean);
    VAR
      GLAcc@1003 : Record "G/L Account";
      CostType@1002 : Record "Cost Type";
    BEGIN
      CostType.RESET;
      CostType.SETRANGE("No.",GLAccNo);
      if CostType.ISEMPTY then begin
        CostTypeExists := false;
        CostType.RESET;
        CostType.SETRANGE(Type,CostType.Type::"Cost Type");
        CostType.SETFILTER("G/L Account Range",'<>%1','');
        if CostType.FINDSET then
          repeat
            GLAcc.RESET;
            GLAcc.SETRANGE("Income/Balance",GLAcc."Income/Balance"::"Income Statement");
            GLAcc.SETFILTER("No.",CostType."G/L Account Range");
            if GLAcc.FINDSET then
              repeat
                if GLAccNo = GLAcc."No." then
                  CostTypeExists := true
              until (GLAcc.NEXT = 0) or CostTypeExists;
          until (CostType.NEXT = 0) or CostTypeExists;
      end;
    END;

    BEGIN
    END.
  }
}

