OBJECT Codeunit 5460 Graph Int. - Contact Addresses
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [EventSubscriber(Codeunit,5345,OnAfterTransferRecordFields)]
    [Internal]
    PROCEDURE OnAfterTransferRecordFields@35(SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR AdditionalFieldsWereModified@1000 : Boolean);
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Contact-Graph Contact':
          begin
            SetContactAddressesOnGraph(SourceRecordRef,DestinationRecordRef);
            AdditionalFieldsWereModified := true;
          end;
      end;
    END;

    [EventSubscriber(Codeunit,5345,OnAfterInsertRecord)]
    [Internal]
    PROCEDURE OnAfterInsertRecord@45(SourceRecordRef@1001 : RecordRef;DestinationRecordRef@1000 : RecordRef);
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Graph Contact-Contact':
          begin
            CreateContactAddressesFromGraph(SourceRecordRef,DestinationRecordRef);
            DestinationRecordRef.MODIFY(true);
          end;
      end;
    END;

    [EventSubscriber(Codeunit,5345,OnAfterModifyRecord)]
    [Internal]
    PROCEDURE OnAfterModifyRecord@51(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    BEGIN
      case GetSourceDestCode(SourceRecordRef,DestinationRecordRef) of
        'Graph Contact-Contact':
          begin
            SetContactAddressesFromGraph(SourceRecordRef,DestinationRecordRef);
            DestinationRecordRef.MODIFY(true);
          end;
      end;
    END;

    LOCAL PROCEDURE GetSourceDestCode@38(SourceRecordRef@1001 : RecordRef;DestinationRecordRef@1000 : RecordRef) : Text;
    BEGIN
      if (SourceRecordRef.NUMBER <> 0) and (DestinationRecordRef.NUMBER <> 0) then
        exit(STRSUBSTNO('%1-%2',SourceRecordRef.NAME,DestinationRecordRef.NAME));
      exit('');
    END;

    [External]
    PROCEDURE GetContactAlternativeHomeAddressCode@3() : Code[10];
    BEGIN
      exit(UPPERCASE('Home'));
    END;

    [External]
    PROCEDURE GetContactAlternativeOtherAddressCode@4() : Code[10];
    BEGIN
      exit(UPPERCASE('Other'));
    END;

    LOCAL PROCEDURE SetContactAddressesOnGraph@7(VAR SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    VAR
      Contact@1002 : Record Contact;
      GRAPHContact@1004 : Record "Graph Contact";
      ContactAltAddress@1006 : Record "Contact Alt. Address";
      GraphCollectionMgtContact@1005 : Codeunit "Graph Collection Mgt - Contact";
      AddressesString@1003 : Text;
      PhonesString@1007 : Text;
      WebsitesString@1008 : Text;
    BEGIN
      SourceRecordRef.SETTABLE(Contact);
      DestinationRecordRef.SETTABLE(GRAPHContact);

      AddressesString := GRAPHContact.GetPostalAddressesString;
      PhonesString := GRAPHContact.GetPhonesString;
      WebsitesString := GRAPHContact.GetWebsitesString;

      AddressesString := GraphCollectionMgtContact.UpdateBusinessAddress(AddressesString,Contact.Address,
          Contact."Address 2",Contact.City,Contact.County,Contact."Country/Region Code",Contact."Post Code");
      PhonesString := GraphCollectionMgtContact.UpdateBusinessPhone(PhonesString,Contact."Phone No.");
      PhonesString := GraphCollectionMgtContact.UpdateBusinessFaxPhone(PhonesString,Contact."Fax No.");
      PhonesString := GraphCollectionMgtContact.UpdateMobilePhone(PhonesString,Contact."Mobile Phone No.");
      PhonesString := GraphCollectionMgtContact.UpdatePagerPhone(PhonesString,Contact.Pager);
      WebsitesString := GraphCollectionMgtContact.UpdateHomeWebsite(WebsitesString,Contact."Home Page");

      if ContactAltAddress.GET(Contact."No.",GetContactAlternativeHomeAddressCode) then begin
        AddressesString := GraphCollectionMgtContact.UpdateHomeAddress(AddressesString,ContactAltAddress.Address,
            ContactAltAddress."Address 2",ContactAltAddress.City,ContactAltAddress.County,
            ContactAltAddress."Country/Region Code",ContactAltAddress."Post Code");
        PhonesString := GraphCollectionMgtContact.UpdateHomePhone(PhonesString,ContactAltAddress."Phone No.");
        PhonesString := GraphCollectionMgtContact.UpdateHomeFaxPhone(PhonesString,ContactAltAddress."Fax No.");
      end;

      if ContactAltAddress.GET(Contact."No.",GetContactAlternativeOtherAddressCode) then begin
        AddressesString := GraphCollectionMgtContact.UpdateOtherAddress(AddressesString,ContactAltAddress.Address,
            ContactAltAddress."Address 2",ContactAltAddress.City,ContactAltAddress.County,
            ContactAltAddress."Country/Region Code",ContactAltAddress."Post Code");
        PhonesString := GraphCollectionMgtContact.UpdateOtherPhone(PhonesString,ContactAltAddress."Phone No.");
        PhonesString := GraphCollectionMgtContact.UpdateOtherFaxPhone(PhonesString,ContactAltAddress."Fax No.");
      end;

      GRAPHContact.SetPostalAddressesString(AddressesString);
      GRAPHContact.SetPhonesString(PhonesString);
      GRAPHContact.SetWebsitesString(WebsitesString);

      DestinationRecordRef.GETTABLE(GRAPHContact);
    END;

    LOCAL PROCEDURE CreateContactAddressesFromGraph@10(VAR SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
      SetContactAddressesFromGraph(SourceRecordRef,DestinationRecordRef);
    END;

    LOCAL PROCEDURE SetContactAddressesFromGraph@11(VAR SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    VAR
      Contact@1002 : Record Contact;
      GRAPHContact@1003 : Record "Graph Contact";
      ContactAltAddress@1006 : Record "Contact Alt. Address";
      GraphCollectionMgtContact@1004 : Codeunit "Graph Collection Mgt - Contact";
      AddressesString@1005 : Text;
      PhonesString@1007 : Text;
      WebsitesString@1008 : Text;
    BEGIN
      SourceRecordRef.SETTABLE(GRAPHContact);
      DestinationRecordRef.SETTABLE(Contact);

      AddressesString := GRAPHContact.GetPostalAddressesString;
      PhonesString := GRAPHContact.GetPhonesString;
      WebsitesString := GRAPHContact.GetWebsitesString;

      if GraphCollectionMgtContact.HasBusinessAddressOrPhone(AddressesString,PhonesString,WebsitesString) then begin
        GraphCollectionMgtContact.GetBusinessAddress(AddressesString,Contact.Address,
          Contact."Address 2",Contact.City,Contact.County,Contact."Country/Region Code",Contact."Post Code");
        GraphCollectionMgtContact.GetBusinessPhone(PhonesString,Contact."Phone No.");
        GraphCollectionMgtContact.GetBusinessFaxPhone(PhonesString,Contact."Fax No.");
        GraphCollectionMgtContact.GetMobilePhone(PhonesString,Contact."Mobile Phone No.");
        GraphCollectionMgtContact.GetPagerPhone(PhonesString,Contact.Pager);
        GraphCollectionMgtContact.GetWorkWebsite(WebsitesString,Contact."Home Page");
      end;

      if GraphCollectionMgtContact.HasHomeAddressOrPhone(AddressesString,PhonesString,WebsitesString) then begin
        if not ContactAltAddress.GET(Contact."No.",GetContactAlternativeHomeAddressCode) then begin
          ContactAltAddress.INIT;
          ContactAltAddress.VALIDATE("Contact No.",Contact."No.");
          ContactAltAddress.VALIDATE(Code,GetContactAlternativeHomeAddressCode);
          ContactAltAddress.INSERT(true);
        end;
        GraphCollectionMgtContact.GetHomeAddress(AddressesString,ContactAltAddress.Address,
          ContactAltAddress."Address 2",ContactAltAddress.City,ContactAltAddress.County,
          ContactAltAddress."Country/Region Code",ContactAltAddress."Post Code");
        GraphCollectionMgtContact.GetHomePhone(PhonesString,ContactAltAddress."Phone No.");
        GraphCollectionMgtContact.GetHomeFaxPhone(PhonesString,ContactAltAddress."Fax No.");
        GraphCollectionMgtContact.GetHomeWebsite(WebsitesString,ContactAltAddress."Home Page");
        ContactAltAddress.MODIFY(true);
      end;

      if GraphCollectionMgtContact.HasOtherAddressOrPhone(AddressesString,PhonesString,WebsitesString) then begin
        if not ContactAltAddress.GET(Contact."No.",GetContactAlternativeOtherAddressCode) then begin
          ContactAltAddress.INIT;
          ContactAltAddress.VALIDATE("Contact No.",Contact."No.");
          ContactAltAddress.VALIDATE(Code,GetContactAlternativeOtherAddressCode);
          ContactAltAddress.INSERT(true);
        end;
        GraphCollectionMgtContact.GetOtherAddress(AddressesString,ContactAltAddress.Address,
          ContactAltAddress."Address 2",ContactAltAddress.City,ContactAltAddress.County,
          ContactAltAddress."Country/Region Code",ContactAltAddress."Post Code");
        GraphCollectionMgtContact.GetOtherPhone(PhonesString,ContactAltAddress."Phone No.");
        GraphCollectionMgtContact.GetOtherFaxPhone(PhonesString,ContactAltAddress."Fax No.");
        ContactAltAddress.MODIFY(true);
      end;

      DestinationRecordRef.GETTABLE(Contact);
    END;

    BEGIN
    END.
  }
}

