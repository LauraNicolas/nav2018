OBJECT Codeunit 7110 Analysis Report Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Analysis Line";
    OnRun=BEGIN
            SETFILTER("Row Ref. No.",TryExpression);
          END;

  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=DEFAULT';
      Text002@1000 : TextConst 'ENU=Default Lines';
      Text003@1002 : TextConst 'ENU=Default Columns';
      OriginalAnalysisLineFilters@1007 : Record "Analysis Line";
      AnalysisLineTemplate@1029 : Record "Analysis Line Template";
      AnalysisFieldValue@1027 : TEMPORARY Record "Analysis Field Value";
      GLSetup@1025 : Record "General Ledger Setup";
      InventorySetup@1024 : Record "Inventory Setup";
      SalesSetup@1023 : Record "Sales & Receivables Setup";
      StartDate@1019 : Date;
      EndDate@1018 : Date;
      FiscalStartDate@1017 : Date;
      DivisionError@1016 : Boolean;
      PeriodError@1015 : Boolean;
      FormulaError@1043 : Boolean;
      CyclicError@1030 : Boolean;
      CallLevel@1014 : Integer;
      OldAnalysisLineFilters@1011 : Text;
      OldAnalysisColumnFilters@1010 : Text;
      OldAnalysisLineTemplate@1009 : Code[10];
      Text005Tok@1041 : TextConst '@@@=Month;ENU=M';
      Text006Tok@1040 : TextConst '@@@=Quarter;ENU=Q';
      Text007Tok@1039 : TextConst '@@@=Year;ENU=Y';
      Text021@1003 : TextConst 'ENU=Conversion of dimension totaling filter %1 results in a filter that becomes too long.';
      Text022@1042 : TextConst 'ENU=You must specify an %1 on %2 %3 %4 that includes the %5 dimension.';
      Text023@1020 : TextConst 'ENU=Column formula: %1';
      Text024@1008 : TextConst 'ENU=Row formula: %1';
      SalesSetupRead@1021 : Boolean;
      InventorySetupRead@1022 : Boolean;
      TryExpression@1028 : Text[250];
      ColumnFormulaMsg@1004 : TextConst '@@@="%1 - text of Column formula; %2 - text of Error";ENU=Column formula: %1. \Error: %2.';
      ShowError@1005 : 'None,"Division by Zero","Period Error","Invalid Formula","Cyclic Formula",All';
      SeparatorTok@1006 : TextConst '@@@={Locked};ENU=";"';

    [External]
    PROCEDURE LookupReportName@1(CurrentAnalysisArea@1000 : 'Sales,Purchase,Inventory';VAR CurrentReportName@1001 : Code[10]) : Boolean;
    VAR
      AnalysisReportName@1002 : Record "Analysis Report Name";
    BEGIN
      AnalysisReportName."Analysis Area" := CurrentAnalysisArea;
      AnalysisReportName.Name := CurrentReportName;
      AnalysisReportName.FILTERGROUP := 2;
      AnalysisReportName.SETRANGE("Analysis Area",CurrentAnalysisArea);
      AnalysisReportName.FILTERGROUP := 0;
      if PAGE.RUNMODAL(0,AnalysisReportName) = ACTION::LookupOK then begin
        CurrentReportName := AnalysisReportName.Name;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE CheckReportName@69(CurrentReportName@1003 : Code[10];VAR AnalysisLine@1001 : Record "Analysis Line");
    VAR
      AnalysisReportName@1000 : Record "Analysis Report Name";
    BEGIN
      if CurrentReportName <> '' then
        AnalysisReportName.GET(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentReportName);
    END;

    [External]
    PROCEDURE OpenAnalysisLines@2(VAR CurrentLineTemplate@1000 : Code[10];VAR AnalysisLine@1001 : Record "Analysis Line");
    BEGIN
      CheckAnalysisLineTemplName2(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentLineTemplate);
      AnalysisLine.FILTERGROUP := 2;
      AnalysisLine.SETRANGE("Analysis Line Template Name",CurrentLineTemplate);
      AnalysisLine.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckAnalysisLineTemplName2@3(CurrentAnalysisArea@1000 : 'Sale,Purchase,Inventory';VAR CurrentAnalysisLineTempl@1001 : Code[10]);
    VAR
      AnalysisLineTemplate@1002 : Record "Analysis Line Template";
    BEGIN
      if not AnalysisLineTemplate.GET(CurrentAnalysisArea,CurrentAnalysisLineTempl) then begin
        AnalysisLineTemplate.SETRANGE("Analysis Area",CurrentAnalysisArea);
        if not AnalysisLineTemplate.FINDFIRST then begin
          AnalysisLineTemplate.INIT;
          AnalysisLineTemplate."Analysis Area" := CurrentAnalysisArea;
          AnalysisLineTemplate.Name := Text001;
          AnalysisLineTemplate.Description := Text002;
          AnalysisLineTemplate.INSERT(true);
          COMMIT;
        end;
        CurrentAnalysisLineTempl := AnalysisLineTemplate.Name;
      end;
    END;

    [External]
    PROCEDURE CheckAnalysisLineTemplName@4(CurrentAnalysisLineTempl@1000 : Code[10];VAR AnalysisLine@1001 : Record "Analysis Line");
    VAR
      AnalysisLineTemplate@1002 : Record "Analysis Line Template";
    BEGIN
      AnalysisLineTemplate.GET(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentAnalysisLineTempl);
    END;

    [External]
    PROCEDURE SetAnalysisLineTemplName@5(CurrentAnalysisLineTempl@1001 : Code[10];VAR AnalysisLine@1000 : Record "Analysis Line");
    BEGIN
      AnalysisLine.FILTERGROUP := 2;
      AnalysisLine.SETRANGE("Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisLine.SETRANGE("Analysis Line Template Name",CurrentAnalysisLineTempl);
      AnalysisLine.FILTERGROUP := 0;
      if AnalysisLine.FIND('-') then;
    END;

    [External]
    PROCEDURE LookupAnalysisLineTemplName@6(VAR CurrentAnalysisLineTempl@1001 : Code[10];VAR AnalysisLine@1000 : Record "Analysis Line") : Boolean;
    VAR
      AnalysisLineTemplate@1002 : Record "Analysis Line Template";
    BEGIN
      COMMIT;
      AnalysisLineTemplate."Analysis Area" := AnalysisLine.GETRANGEMAX("Analysis Area");
      AnalysisLineTemplate.Name := AnalysisLine.GETRANGEMAX("Analysis Line Template Name");
      AnalysisLineTemplate.FILTERGROUP := 2;
      AnalysisLineTemplate.SETRANGE("Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisLineTemplate.FILTERGROUP := 0;
      if PAGE.RUNMODAL(0,AnalysisLineTemplate) = ACTION::LookupOK then begin
        CheckAnalysisLineTemplName(AnalysisLineTemplate.Name,AnalysisLine);
        CurrentAnalysisLineTempl := AnalysisLineTemplate.Name;
        SetAnalysisLineTemplName(CurrentAnalysisLineTempl,AnalysisLine);
        exit(true);
      end;
      OpenAnalysisLines(CurrentAnalysisLineTempl,AnalysisLine);
    END;

    [External]
    PROCEDURE OpenAnalysisLinesForm@7(VAR AnalysisLine2@1000 : Record "Analysis Line";CurrentAnalysisLineTempl@1001 : Code[10]);
    VAR
      AnalysisLine@1002 : Record "Analysis Line";
      AnalysisLines@1003 : Page "Inventory Analysis Lines";
      AnalysisLinesForSale@1004 : Page "Sales Analysis Lines";
      AnalysisLinesForPurchase@1005 : Page "Purchase Analysis Lines";
    BEGIN
      COMMIT;
      AnalysisLine.COPY(AnalysisLine2);
      case AnalysisLine.GETRANGEMAX("Analysis Area") of
        AnalysisLine."Analysis Area"::Sales:
          begin
            AnalysisLinesForSale.SetCurrentAnalysisLineTempl(CurrentAnalysisLineTempl);
            AnalysisLinesForSale.SETTABLEVIEW(AnalysisLine);
            AnalysisLinesForSale.RUNMODAL;
          end;
        AnalysisLine."Analysis Area"::Purchase:
          begin
            AnalysisLinesForPurchase.SetCurrentAnalysisLineTempl(CurrentAnalysisLineTempl);
            AnalysisLinesForPurchase.SETTABLEVIEW(AnalysisLine);
            AnalysisLinesForPurchase.RUNMODAL;
          end;
        else
          AnalysisLines.SetCurrentAnalysisLineTempl(CurrentAnalysisLineTempl);
          AnalysisLines.SETTABLEVIEW(AnalysisLine);
          AnalysisLines.RUNMODAL;
      end;
    END;

    [External]
    PROCEDURE OpenAnalysisColumnsForm@9(VAR AnalysisLine@1000 : Record "Analysis Line";CurrentColumnTempl@1002 : Code[10]);
    VAR
      AnalysisColumn@1001 : Record "Analysis Column";
      AnalysisColumns@1003 : Page "Analysis Columns";
    BEGIN
      COMMIT;
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE(
        "Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisColumn.FILTERGROUP := 0;
      AnalysisColumns.SETTABLEVIEW(AnalysisColumn);
      AnalysisColumns.SetCurrentColumnName(CurrentColumnTempl);
      AnalysisColumns.RUNMODAL;
    END;

    [External]
    PROCEDURE OpenColumns@16(VAR CurrentColumnTempl@1000 : Code[10];VAR AnalysisLine@1002 : Record "Analysis Line";VAR AnalysisColumn@1001 : Record "Analysis Column");
    BEGIN
      CheckColumnTemplate(AnalysisLine.GETRANGEMAX("Analysis Area"),CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE("Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 0;
    END;

    [External]
    PROCEDURE OpenColumns2@63(VAR CurrentColumnTempl@1000 : Code[10];VAR AnalysisColumn@1001 : Record "Analysis Column");
    BEGIN
      CheckColumnTemplate(AnalysisColumn.GETRANGEMAX("Analysis Area"),CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnTempl);
      AnalysisColumn.FILTERGROUP := 0;
    END;

    LOCAL PROCEDURE CheckColumnTemplate@15(CurrentAnalysisArea@1000 : 'Sale,Purchase,Inventory';VAR CurrentColumnName@1002 : Code[10]);
    VAR
      AnalysisColumnTemplate@1001 : Record "Analysis Column Template";
    BEGIN
      if not AnalysisColumnTemplate.GET(CurrentAnalysisArea,CurrentColumnName) then begin
        AnalysisColumnTemplate.SETRANGE("Analysis Area",CurrentAnalysisArea);
        if not AnalysisColumnTemplate.FINDFIRST then begin
          AnalysisColumnTemplate.INIT;
          AnalysisColumnTemplate."Analysis Area" := CurrentAnalysisArea;
          AnalysisColumnTemplate.Name := Text001;
          AnalysisColumnTemplate.Description := Text003;
          AnalysisColumnTemplate.INSERT(true);
          COMMIT;
        end;
        CurrentColumnName := AnalysisColumnTemplate.Name;
      end;
    END;

    [External]
    PROCEDURE GetColumnTemplate@14(CurrentAnalysisArea@1002 : 'Sale,Purchase,Inventory';CurrentColumnTemplate@1000 : Code[10]);
    VAR
      AnalysisColumnTemplate@1001 : Record "Analysis Column Template";
    BEGIN
      AnalysisColumnTemplate.GET(CurrentAnalysisArea,CurrentColumnTemplate);
    END;

    [External]
    PROCEDURE SetColumnName@13(CurrentAnalysisArea@1003 : 'Sale,Purchase,Inventory';CurrentColumnName@1000 : Code[10];VAR AnalysisColumn@1001 : Record "Analysis Column");
    BEGIN
      AnalysisColumn.FILTERGROUP := 2;
      AnalysisColumn.SETRANGE("Analysis Area",CurrentAnalysisArea);
      AnalysisColumn.SETRANGE("Analysis Column Template",CurrentColumnName);
      AnalysisColumn.FILTERGROUP := 0;
      if AnalysisColumn.FIND('-') then;
    END;

    [External]
    PROCEDURE CopyColumnsToTemp@21(VAR AnalysisLine@1003 : Record "Analysis Line";ColumnName@1000 : Code[10];VAR TempAnalysisColumn@1001 : Record "Analysis Column");
    VAR
      AnalysisColumn@1002 : Record "Analysis Column";
    BEGIN
      TempAnalysisColumn.RESET;
      TempAnalysisColumn.DELETEALL;
      AnalysisColumn.SETRANGE(
        "Analysis Area",AnalysisLine.GETRANGEMAX("Analysis Area"));
      AnalysisColumn.SETRANGE("Analysis Column Template",ColumnName);
      if AnalysisColumn.FINDSET then begin
        repeat
          TempAnalysisColumn := AnalysisColumn;
          TempAnalysisColumn.INSERT;
        until AnalysisColumn.NEXT = 0;
        TempAnalysisColumn.FINDFIRST;
      end;
    END;

    [External]
    PROCEDURE LookupColumnName@11(CurrentAnalysisArea@1001 : Option;VAR CurrentColumnName@1000 : Code[10]) : Boolean;
    VAR
      AnalysisColumnTemplate@1002 : Record "Analysis Column Template";
    BEGIN
      AnalysisColumnTemplate.FILTERGROUP := 2;
      AnalysisColumnTemplate.SETRANGE("Analysis Area",CurrentAnalysisArea);
      AnalysisColumnTemplate.FILTERGROUP := 0;
      AnalysisColumnTemplate."Analysis Area" := CurrentAnalysisArea;
      AnalysisColumnTemplate.Name := CurrentColumnName;
      if PAGE.RUNMODAL(0,AnalysisColumnTemplate) = ACTION::LookupOK then begin
        CurrentColumnName := AnalysisColumnTemplate.Name;
        exit(true);
      end;
    END;

    [External]
    PROCEDURE SetSourceType@76(VAR AnalysisLine@1001 : Record "Analysis Line";CurrentSourceTypeFilter@1002 : '" ",Customer,Vendor,Item');
    BEGIN
      if CurrentSourceTypeFilter = CurrentSourceTypeFilter::" " then
        exit;

      AnalysisLine.SETRANGE("Source Type Filter",CurrentSourceTypeFilter);
    END;

    [External]
    PROCEDURE SetSourceNo@72(VAR AnalysisLine@1000 : Record "Analysis Line";CurrentSourceTypeNoFilter@1001 : Text);
    BEGIN
      AnalysisLine.SETFILTER("Source No. Filter",CurrentSourceTypeNoFilter);
    END;

    [Internal]
    PROCEDURE LookupSourceNo@8(VAR AnalysisLine@1000 : Record "Analysis Line";CurrentSourceTypeFilter@1002 : '" ",Customer,Vendor,Item';VAR CurrentSourceTypeNoFilter@1001 : Text);
    VAR
      CustList@1005 : Page "Customer List";
      VendList@1006 : Page "Vendor List";
      ItemList@1007 : Page "Item List";
    BEGIN
      case CurrentSourceTypeFilter of
        CurrentSourceTypeFilter::" ":
          exit;
        CurrentSourceTypeFilter::Customer:
          begin
            CustList.LOOKUPMODE := true;
            if CustList.RUNMODAL = ACTION::LookupOK then
              CurrentSourceTypeNoFilter := CustList.GetSelectionFilter;
          end;
        CurrentSourceTypeFilter::Vendor:
          begin
            VendList.LOOKUPMODE := true;
            if VendList.RUNMODAL = ACTION::LookupOK then
              CurrentSourceTypeNoFilter := VendList.GetSelectionFilter;
          end;
        CurrentSourceTypeFilter::Item:
          begin
            ItemList.LOOKUPMODE := true;
            if ItemList.RUNMODAL = ACTION::LookupOK then
              CurrentSourceTypeNoFilter := ItemList.GetSelectionFilter;
          end;
      end;
      SetSourceNo(AnalysisLine,CurrentSourceTypeNoFilter);
    END;

    [External]
    PROCEDURE FindFiscalYear@67(BalanceDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",true);
      AccountingPeriod.SETRANGE("Starting Date",0D,BalanceDate);
      if AccountingPeriod.FINDLAST then
        exit(AccountingPeriod."Starting Date");
      AccountingPeriod.RESET;
      AccountingPeriod.FINDFIRST;
      exit(AccountingPeriod."Starting Date");
    END;

    LOCAL PROCEDURE FindEndOfFiscalYear@66(BalanceDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      AccountingPeriod.SETRANGE("New Fiscal Year",true);
      AccountingPeriod.SETFILTER("Starting Date",'>%1',FindFiscalYear(BalanceDate));
      if AccountingPeriod.FINDFIRST then
        exit(CALCDATE('<-1D>',AccountingPeriod."Starting Date"));
      exit(DMY2DATE(31,12,9999));
    END;

    LOCAL PROCEDURE AccPeriodStartEnd@65(Formula@1002 : Code[20];Date@1000 : Date;VAR StartDate@1013 : Date;VAR EndDate@1014 : Date);
    VAR
      AnalysisColumn@1006 : Record "Analysis Column";
      AccountingPeriod@1001 : Record "Accounting Period";
      AccountingPeriodFY@1007 : Record "Accounting Period";
      Steps@1005 : Integer;
      Type@1004 : '" ",Period,"Fiscal Year","Fiscal Halfyear","Fiscal Quarter"';
      CurrentPeriodNo@1003 : Integer;
      RangeFromType@1012 : 'Int,CP,LP';
      RangeToType@1011 : 'Int,CP,LP';
      RangeFromInt@1010 : Integer;
      RangeToInt@1009 : Integer;
    BEGIN
      if Formula = '' then
        exit;

      AnalysisColumn.ParsePeriodFormula(
        Formula,Steps,Type,RangeFromType,RangeToType,RangeFromInt,RangeToInt);

      // Find current period
      AccountingPeriod.SETFILTER("Starting Date",'<=%1',Date);
      if not AccountingPeriod.FIND('+') then begin
        AccountingPeriod.RESET;
        if Steps < 0 then
          AccountingPeriod.FIND('-')
        else
          AccountingPeriod.FIND('+')
      end;
      AccountingPeriod.RESET;

      case Type of
        Type::Period:
          begin
            if AccountingPeriod.NEXT(Steps) <> Steps then
              PeriodError := true;
            StartDate := AccountingPeriod."Starting Date";
            EndDate := AccPeriodEndDate(StartDate);
          end;
        Type::"Fiscal Year":
          begin
            AccountingPeriodFY := AccountingPeriod;
            while not AccountingPeriodFY."New Fiscal Year" do
              if AccountingPeriodFY.FIND('<') then
                CurrentPeriodNo += 1
              else
                AccountingPeriodFY."New Fiscal Year" := true;
            AccountingPeriodFY.SETRANGE("New Fiscal Year",true);
            AccountingPeriodFY.NEXT(Steps);

            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeFromType,RangeFromInt,false,StartDate);
            AccPeriodStartOrEnd(AccountingPeriodFY,CurrentPeriodNo,RangeToType,RangeToInt,true,EndDate);
          end;
      end;
    END;

    LOCAL PROCEDURE AccPeriodEndDate@59(StartDate@1000 : Date) : Date;
    VAR
      AccountingPeriod@1001 : Record "Accounting Period";
    BEGIN
      AccountingPeriod."Starting Date" := StartDate;
      if AccountingPeriod.FIND('>') then
        exit(AccountingPeriod."Starting Date" - 1);
      exit(DMY2DATE(31,12,9999));
    END;

    LOCAL PROCEDURE AccPeriodGetPeriod@35(VAR AccountingPeriod@1001 : Record "Accounting Period";AccPeriodNo@1000 : Integer);
    BEGIN
      case true of
        AccPeriodNo > 0:
          begin
            AccountingPeriod.NEXT(AccPeriodNo);
            exit;
          end;
        AccPeriodNo = 0:
          exit;
        AccPeriodNo < 0:
          begin
            AccountingPeriod.SETRANGE("New Fiscal Year",true);
            if not AccountingPeriod.FIND('>') then begin
              AccountingPeriod.RESET;
              AccountingPeriod.FIND('+');
              exit;
            end;
            AccountingPeriod.RESET;
            AccountingPeriod.FIND('<');
            exit;
          end;
      end;
    END;

    LOCAL PROCEDURE AccPeriodStartOrEnd@30(AccountingPeriod@1000 : Record "Accounting Period";CurrentPeriodNo@1007 : Integer;RangeType@1006 : 'Int,CP,LP';RangeInt@1009 : Integer;EndDate@1003 : Boolean;VAR Date@1002 : Date);
    BEGIN
      case RangeType of
        RangeType::CP:
          AccPeriodGetPeriod(AccountingPeriod,CurrentPeriodNo);
        RangeType::LP:
          AccPeriodGetPeriod(AccountingPeriod,-1);
        RangeType::Int:
          AccPeriodGetPeriod(AccountingPeriod,RangeInt - 1);
      end;
      if EndDate then
        Date := AccPeriodEndDate(AccountingPeriod."Starting Date")
      else
        Date := AccountingPeriod."Starting Date";
    END;

    [Internal]
    PROCEDURE CalcCell@29(VAR AnalysisLine@1000 : Record "Analysis Line";VAR AnalysisColumn@1001 : Record "Analysis Column";DrillDown@1004 : Boolean) : Decimal;
    VAR
      ErrorText@1002 : Text;
      Result@1003 : Decimal;
    BEGIN
      if DrillDown and
         ((AnalysisColumn."Column Type" = AnalysisColumn."Column Type"::Formula) or
          (AnalysisLine.Type = AnalysisLine.Type::Formula))
      then begin
        if AnalysisColumn."Column Type" = AnalysisColumn."Column Type"::Formula then begin
          ErrorText := CalcFieldError(AnalysisLine."Line No.",AnalysisColumn."Line No.");
          if ErrorText = '' then
            MESSAGE(Text023,AnalysisColumn.Formula)
          else
            MESSAGE(ColumnFormulaMsg,AnalysisColumn.Formula,ErrorText);
        end else
          MESSAGE(Text024,AnalysisLine.Range);
        exit(0);
      end;

      OriginalAnalysisLineFilters.COPYFILTERS(AnalysisLine);

      StartDate := AnalysisLine.GETRANGEMIN("Date Filter");
      if EndDate <> AnalysisLine.GETRANGEMAX("Date Filter") then begin
        EndDate := AnalysisLine.GETRANGEMAX("Date Filter");
        FiscalStartDate := FindFiscalYear(EndDate);
      end;
      DivisionError := false;
      PeriodError := false;
      FormulaError := false;
      CyclicError := false;
      CallLevel := 0;

      if (OldAnalysisLineFilters <> AnalysisLine.GETFILTERS) or
         (OldAnalysisColumnFilters <> AnalysisColumn.GETFILTERS) or
         (OldAnalysisLineTemplate <> AnalysisLine."Analysis Line Template Name") or
         (OldAnalysisLineTemplate <> AnalysisColumn."Analysis Column Template")
      then begin
        AnalysisFieldValue.RESET;
        AnalysisFieldValue.DELETEALL;
        OldAnalysisLineFilters := AnalysisLine.GETFILTERS;
        OldAnalysisColumnFilters := AnalysisColumn.GETFILTERS;
        OldAnalysisLineTemplate := AnalysisLine."Analysis Line Template Name";
        OldAnalysisLineTemplate := AnalysisColumn."Analysis Column Template";
      end;

      Result := CalcCellValue(AnalysisLine,AnalysisColumn,DrillDown);
      with AnalysisColumn do begin
        case Show of
          Show::"When Positive":
            if Result < 0 then
              Result := 0;
          Show::"When Negative":
            if Result > 0 then
              Result := 0;
        end;
        if "Show Opposite Sign" then
          Result := -Result;
      end;
      if AnalysisLine."Show Opposite Sign" then
        Result := -Result;
      exit(Result);
    END;

    LOCAL PROCEDURE CalcCellValue@27(AnalysisLine@1000 : Record "Analysis Line";AnalysisColumn@1001 : Record "Analysis Column";DrillDown@1100 : Boolean) : Decimal;
    VAR
      ItemStatisticsBuf@1002 : Record "Item Statistics Buffer";
      Result@1003 : Decimal;
    BEGIN
      Result := 0;
      if AnalysisLine.Range <> '' then begin
        case true of
          AnalysisFieldValue.GET(AnalysisLine."Line No.",AnalysisColumn."Line No.") and not DrillDown:
            begin
              Result := AnalysisFieldValue.Value;
              DivisionError := DivisionError or AnalysisFieldValue."Has Error";
              PeriodError := PeriodError or AnalysisFieldValue."Period Error";
              FormulaError := FormulaError or AnalysisFieldValue."Formula Error";
              CyclicError := CyclicError or AnalysisFieldValue."Cyclic Error";
              exit(Result);
            end;
          AnalysisColumn."Column Type" = AnalysisColumn."Column Type"::Formula:
            Result :=
              EvaluateExpression(
                false,AnalysisColumn.Formula,AnalysisLine,AnalysisColumn);
          AnalysisLine.Type = AnalysisLine.Type::Formula:
            Result :=
              EvaluateExpression(
                true,AnalysisLine.Range,AnalysisLine,AnalysisColumn);
          (StartDate = 0D) or (EndDate in [0D,DMY2DATE(31,12,9999)]):
            begin
              Result := 0;
              PeriodError := true;
            end;
          else
            if (AnalysisLineTemplate."Analysis Area" <> AnalysisLine."Analysis Area") or
               (AnalysisLineTemplate.Name <> AnalysisLine."Analysis Line Template Name")
            then
              AnalysisLineTemplate.GET(AnalysisLine."Analysis Area",AnalysisLine."Analysis Line Template Name");
            AnalysisLine.COPYFILTERS(OriginalAnalysisLineFilters);
            SetItemRowFilters(ItemStatisticsBuf,AnalysisLine);
            SetItemColumnFilters(ItemStatisticsBuf,AnalysisColumn);

            Result := Result + CalcItemStatistics(ItemStatisticsBuf,AnalysisLine,AnalysisColumn,DrillDown);
        end;

        if not DrillDown then begin
          AnalysisFieldValue."Row Ref. No." := AnalysisLine."Line No.";
          AnalysisFieldValue."Column No." := AnalysisColumn."Line No.";
          AnalysisFieldValue.Value := Result;
          AnalysisFieldValue."Has Error" := DivisionError;
          AnalysisFieldValue."Period Error" := PeriodError;
          AnalysisFieldValue."Formula Error" := FormulaError;
          AnalysisFieldValue."Cyclic Error" := CyclicError;
          if AnalysisFieldValue.INSERT then;
        end;
      end;
      exit(Result);
    END;

    LOCAL PROCEDURE CalcItemStatistics@26(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer";VAR AnalysisLine@1002 : Record "Analysis Line";VAR AnalysisColumn@1003 : Record "Analysis Column";DrillDown@1100 : Boolean) : Decimal;
    VAR
      ColValue@1006 : Decimal;
    BEGIN
      ColValue := 0;

      if (AnalysisLineTemplate."Analysis Area" <> AnalysisLine."Analysis Area") or
         (AnalysisLineTemplate.Name <> AnalysisLine."Analysis Line Template Name")
      then
        AnalysisLineTemplate.GET(AnalysisLine."Analysis Area",AnalysisLine."Analysis Line Template Name");

      if AnalysisColumn."Column Type" <> AnalysisColumn."Column Type"::Formula then begin
        with ItemStatisticsBuf do begin
          if AnalysisLine.GETFILTER("Source No. Filter") <> '' then
            case FilterToValue(AnalysisLine) of
              AnalysisLine."Source Type Filter"::Customer:
                begin
                  SETRANGE("Source Type Filter","Source Type Filter"::Customer);
                  SETFILTER("Source No. Filter",GetSourceNoFilter(ItemStatisticsBuf,AnalysisLine));
                end;
              AnalysisLine."Source Type Filter"::Vendor:
                begin
                  SETRANGE("Source Type Filter","Source Type Filter"::Vendor);
                  SETFILTER("Source No. Filter",GetSourceNoFilter(ItemStatisticsBuf,AnalysisLine));
                end;
              AnalysisLine."Source Type Filter"::Item:
                SETFILTER("Item Filter",GetSourceNoFilter(ItemStatisticsBuf,AnalysisLine));
            end;
          if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
            if GETFILTER("Global Dimension 1 Filter") = '' then
              AnalysisLine.COPYFILTER("Dimension 1 Filter","Global Dimension 1 Filter");
            if GETFILTER("Global Dimension 2 Filter") = '' then
              AnalysisLine.COPYFILTER("Dimension 2 Filter","Global Dimension 2 Filter");
            FILTERGROUP := 2;
            SETFILTER("Global Dimension 1 Filter",GetDimTotalingFilter(1,AnalysisLine."Dimension 1 Totaling"));
            SETFILTER("Global Dimension 2 Filter",GetDimTotalingFilter(2,AnalysisLine."Dimension 2 Totaling"));
            FILTERGROUP := 0;
          end else begin
            SETFILTER("Analysis View Filter",AnalysisLineTemplate."Item Analysis View Code");
            if GETFILTER("Dimension 1 Filter") = '' then
              AnalysisLine.COPYFILTER("Dimension 1 Filter","Dimension 1 Filter");
            if GETFILTER("Dimension 2 Filter") = '' then
              AnalysisLine.COPYFILTER("Dimension 2 Filter","Dimension 2 Filter");
            if GETFILTER("Dimension 3 Filter") = '' then
              AnalysisLine.COPYFILTER("Dimension 3 Filter","Dimension 3 Filter");
            FILTERGROUP := 2;
            SETFILTER("Dimension 1 Filter",GetDimTotalingFilter(1,AnalysisLine."Dimension 1 Totaling"));
            SETFILTER("Dimension 2 Filter",GetDimTotalingFilter(2,AnalysisLine."Dimension 2 Totaling"));
            SETFILTER("Dimension 3 Filter",GetDimTotalingFilter(3,AnalysisLine."Dimension 3 Totaling"));
            FILTERGROUP := 0;
          end;
          AnalysisLine.COPYFILTER("Location Filter","Location Filter");
        end;

        case AnalysisColumn."Ledger Entry Type" of
          AnalysisColumn."Ledger Entry Type"::"Item Entries":
            begin
              if DrillDown then
                case AnalysisColumn."Value Type" of
                  AnalysisColumn."Value Type"::Quantity:
                    DrillDownQuantity(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    DrillDownSalesAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    DrillDownCostAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Non-Invntble Amount":
                    DrillDownCostAmountNonInvnt(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Unit Price":
                    DrillDownUnitPrice(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Standard Cost":
                    DrillDownStdCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Indirect Cost":
                    DrillDownIndirectCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Unit Cost":
                    DrillDownUnitCost(ItemStatisticsBuf);
                end
              else
                case AnalysisColumn."Value Type" of
                  AnalysisColumn."Value Type"::Quantity:
                    ColValue := CalcQuantity(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    ColValue := CalcSalesAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    ColValue := CalcCostAmount(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Non-Invntble Amount":
                    ColValue := CalcCostAmountNonInvnt(ItemStatisticsBuf,AnalysisColumn.Invoiced);
                  AnalysisColumn."Value Type"::"Unit Price":
                    ColValue := CalcUnitPrice(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Standard Cost":
                    ColValue := CalcStdCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Indirect Cost":
                    ColValue := CalcIndirectCost(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Unit Cost":
                    ColValue := CalcUnitCost(ItemStatisticsBuf);
                end;
            end;
          AnalysisColumn."Ledger Entry Type"::"Item Budget Entries":
            begin
              if DrillDown then
                case AnalysisColumn."Value Type" of
                  AnalysisColumn."Value Type"::Quantity:
                    DrillDownBudgetQuantity(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    DrillDownBudgetSalesAmount(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    DrillDownBudgetCostAmount(ItemStatisticsBuf);
                end
              else
                case AnalysisColumn."Value Type" of
                  AnalysisColumn."Value Type"::Quantity:
                    ColValue := CalcBudgetQuantity(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Sales Amount":
                    ColValue := CalcBudgetSalesAmount(ItemStatisticsBuf);
                  AnalysisColumn."Value Type"::"Cost Amount":
                    ColValue := CalcBudgetCostAmount(ItemStatisticsBuf);
                end;
            end;
        end;
      end;
      exit(ColValue);
    END;

    [External]
    PROCEDURE SetItemRowFilters@17(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR AnalysisLine@1001 : Record "Analysis Line");
    BEGIN
      with AnalysisLine do begin
        case "Analysis Area" of
          "Analysis Area"::Sales:
            ItemStatisticsBuf.SETRANGE("Analysis Area Filter","Analysis Area"::Sales);
          "Analysis Area"::Purchase:
            ItemStatisticsBuf.SETRANGE("Analysis Area Filter","Analysis Area"::Purchase);
          "Analysis Area"::Inventory:
            ItemStatisticsBuf.SETRANGE("Analysis Area Filter","Analysis Area"::Inventory);
        end;
        ItemStatisticsBuf.SETFILTER("Budget Filter",GETFILTER("Item Budget Filter"));
        case Type of
          Type::Item:
            ItemStatisticsBuf.SETFILTER("Item Filter",Range);
          Type::Customer:
            begin
              ItemStatisticsBuf.SETRANGE("Source Type Filter",ItemStatisticsBuf."Source Type Filter"::Customer);
              ItemStatisticsBuf.SETFILTER("Source No. Filter",Range);
            end;
          Type::Vendor:
            begin
              ItemStatisticsBuf.SETRANGE("Source Type Filter",ItemStatisticsBuf."Source Type Filter"::Vendor);
              ItemStatisticsBuf.SETFILTER("Source No. Filter",Range);
            end;
          Type::"Sales/Purchase person":
            begin
              GetSalesSetup;
              SetGroupDimFilter(ItemStatisticsBuf,SalesSetup."Salesperson Dimension Code",Range);
            end;
          Type::"Customer Group":
            begin
              GetSalesSetup;
              SetGroupDimFilter(ItemStatisticsBuf,SalesSetup."Customer Group Dimension Code",Range);
            end;
          Type::"Item Group":
            begin
              GetInventorySetup;
              SetGroupDimFilter(ItemStatisticsBuf,InventorySetup."Item Group Dimension Code",Range);
            end;
        end;
      end;
    END;

    [External]
    PROCEDURE SetItemColumnFilters@20(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR AnalysisColumn@1001 : Record "Analysis Column");
    VAR
      FromDate@1002 : Date;
      ToDate@1003 : Date;
      FiscalStartDate2@1004 : Date;
    BEGIN
      with AnalysisColumn do begin
        ItemStatisticsBuf.SETFILTER("Entry Type Filter","Value Entry Type Filter");
        ItemStatisticsBuf.SETFILTER("Item Ledger Entry Type Filter","Item Ledger Entry Type Filter");

        if (FORMAT("Comparison Date Formula") <> '0') and (FORMAT("Comparison Date Formula") <> '') then begin
          FromDate := CALCDATE("Comparison Date Formula",StartDate);
          if (EndDate = CALCDATE('<CM>',EndDate)) and
             ((STRPOS(FORMAT("Comparison Date Formula"),Text005Tok) > 0) or
              (STRPOS(FORMAT("Comparison Date Formula"),Text006Tok) > 0) or
              (STRPOS(FORMAT("Comparison Date Formula"),Text007Tok) > 0))
          then
            ToDate := CALCDATE('<CM>',CALCDATE("Comparison Date Formula",EndDate))
          else
            ToDate := CALCDATE("Comparison Date Formula",EndDate);
          FiscalStartDate2 := FindFiscalYear(ToDate);
        end else
          if "Comparison Period Formula" <> '' then begin
            AccPeriodStartEnd("Comparison Period Formula",StartDate,FromDate,ToDate);
            FiscalStartDate2 := FindFiscalYear(ToDate);
          end else begin
            FromDate := StartDate;
            ToDate := EndDate;
            FiscalStartDate2 := FiscalStartDate;
          end;
        case "Column Type" of
          "Column Type"::"Net Change":
            ItemStatisticsBuf.SETRANGE("Date Filter",FromDate,ToDate);
          "Column Type"::"Balance at Date":
            ItemStatisticsBuf.SETRANGE("Date Filter",0D,ToDate);
          "Column Type"::"Beginning Balance":
            ItemStatisticsBuf.SETRANGE(
              "Date Filter",0D,CALCDATE('<-1D>',FromDate));
          "Column Type"::"Year to Date":
            ItemStatisticsBuf.SETRANGE(
              "Date Filter",FiscalStartDate2,ToDate);
          "Column Type"::"Rest of Fiscal Year":
            ItemStatisticsBuf.SETRANGE(
              "Date Filter",
              CALCDATE('<+1D>',ToDate),
              FindEndOfFiscalYear(FiscalStartDate2));
          "Column Type"::"Entire Fiscal Year":
            ItemStatisticsBuf.SETRANGE(
              "Date Filter",
              FiscalStartDate2,
              FindEndOfFiscalYear(FiscalStartDate2));
        end;
      end;
    END;

    LOCAL PROCEDURE EvaluateExpression@10(IsAnalysisLineExpression@1000 : Boolean;Expression@1001 : Text[250];AnalysisLine@1002 : Record "Analysis Line";AnalysisColumn@1003 : Record "Analysis Column") : Decimal;
    VAR
      Result@1005 : Decimal;
      Parentheses@1006 : Integer;
      Operator@1007 : Char;
      LeftOperand@1008 : Text[250];
      RightOperand@1009 : Text[250];
      LeftResult@1010 : Decimal;
      RightResult@1011 : Decimal;
      i@1012 : Integer;
      IsExpression@1013 : Boolean;
      IsFilter@1014 : Boolean;
      Operators@1015 : Text[8];
      OperatorNo@1016 : Integer;
      AnalysisLineID@1017 : Integer;
    BEGIN
      Result := 0;

      CallLevel := CallLevel + 1;
      if CallLevel > 25 then begin
        CyclicError := true;
        exit;
      end;

      Expression := DELCHR(Expression,'<>',' ');
      if STRLEN(Expression) > 0 then begin
        Parentheses := 0;
        IsExpression := false;
        Operators := '+-*/^';
        OperatorNo := 1;
        repeat
          i := STRLEN(Expression);
          repeat
            if Expression[i] = '(' then
              Parentheses := Parentheses + 1
            else
              if Expression[i] = ')' then
                Parentheses := Parentheses - 1;
            if (Parentheses = 0) and (Expression[i] = Operators[OperatorNo]) then
              IsExpression := true
            else
              i := i - 1;
          until IsExpression or (i <= 0);
          if not IsExpression then
            OperatorNo := OperatorNo + 1;
        until (OperatorNo > STRLEN(Operators)) or IsExpression;
        if IsExpression then begin
          if i > 1 then
            LeftOperand := COPYSTR(Expression,1,i - 1)
          else
            LeftOperand := '';
          if i < STRLEN(Expression) then
            RightOperand := COPYSTR(Expression,i + 1)
          else
            RightOperand := '';
          Operator := Expression[i];
          LeftResult :=
            EvaluateExpression(
              IsAnalysisLineExpression,LeftOperand,AnalysisLine,AnalysisColumn);
          RightResult :=
            EvaluateExpression(
              IsAnalysisLineExpression,RightOperand,AnalysisLine,AnalysisColumn);
          case Operator of
            '^':
              Result := POWER(LeftResult,RightResult);
            '*':
              Result := LeftResult * RightResult;
            '/':
              if RightResult = 0 then begin
                Result := 0;
                DivisionError := true;
              end else
                Result := LeftResult / RightResult;
            '+':
              Result := LeftResult + RightResult;
            '-':
              Result := LeftResult - RightResult;
          end;
        end else
          if (Expression[1] = '(') and (Expression[STRLEN(Expression)] = ')') then
            Result :=
              EvaluateExpression(
                IsAnalysisLineExpression,COPYSTR(Expression,2,STRLEN(Expression) - 2),
                AnalysisLine,AnalysisColumn)
          else begin
            IsFilter :=
              (STRPOS(Expression,'..') +
               STRPOS(Expression,'|') +
               STRPOS(Expression,'<') +
               STRPOS(Expression,'>') +
               STRPOS(Expression,'&') +
               STRPOS(Expression,'=') > 0);
            if (STRLEN(Expression) > 10) and (not IsFilter) then
              EVALUATE(Result,Expression)
            else
              if IsAnalysisLineExpression then begin
                AnalysisLine.SETRANGE("Analysis Area",AnalysisLine."Analysis Area");
                AnalysisLine.SETRANGE("Analysis Line Template Name",AnalysisLine."Analysis Line Template Name");
                if not IsValidAnalysisExpression(AnalysisLine,Expression) then
                  FormulaError := true
                else
                  AnalysisLine.SETFILTER("Row Ref. No.",Expression);
                AnalysisLineID := AnalysisLine."Line No.";
                if not FormulaError then begin
                  if AnalysisLine.FIND('-') then
                    repeat
                      if AnalysisLine."Line No." <> AnalysisLineID then
                        Result := Result + CalcCellValue(AnalysisLine,AnalysisColumn,false);
                    until AnalysisLine.NEXT = 0
                  else
                    if IsFilter or (not EVALUATE(Result,Expression)) then
                      FormulaError := true;
                end;
              end else begin
                AnalysisColumn.SETRANGE("Analysis Area",AnalysisColumn."Analysis Area");
                AnalysisColumn.SETRANGE("Analysis Column Template",AnalysisColumn."Analysis Column Template");
                if not IsValidAnalysisExpression(AnalysisLine,Expression) then
                  FormulaError := true
                else
                  AnalysisColumn.SETFILTER("Column No.",Expression);
                AnalysisLineID := AnalysisColumn."Line No.";
                if not FormulaError then begin
                  if AnalysisColumn.FIND('-') then
                    repeat
                      if AnalysisColumn."Line No." <> AnalysisLineID then
                        Result := Result + CalcCellValue(AnalysisLine,AnalysisColumn,false);
                    until AnalysisColumn.NEXT = 0
                  else
                    if IsFilter or (not EVALUATE(Result,Expression)) then
                      FormulaError := true;
                end;
              end;
          end;
      end;
      CallLevel := CallLevel - 1;
      exit(Result);
    END;

    [External]
    PROCEDURE GetDivisionError@18() : Boolean;
    BEGIN
      exit(DivisionError);
    END;

    [External]
    PROCEDURE GetPeriodError@31() : Boolean;
    BEGIN
      exit(PeriodError);
    END;

    [External]
    PROCEDURE GetFormulaError@54() : Boolean;
    BEGIN
      exit(FormulaError);
    END;

    [External]
    PROCEDURE GetCyclicError@56() : Boolean;
    BEGIN
      exit(CyclicError);
    END;

    [External]
    PROCEDURE SetAnalysisLineTemplate@22(VAR NewAnalysisLineTemplate@1000 : Record "Analysis Line Template");
    BEGIN
      AnalysisLineTemplate := NewAnalysisLineTemplate;
    END;

    LOCAL PROCEDURE GetDimTotalingFilter@32(DimNo@1001 : Integer;DimTotaling@1000 : Text[80]) : Text[1024];
    VAR
      DimTotaling2@1002 : Text[80];
      DimTotalPart@1005 : Text[80];
      ResultFilter@1003 : Text[1024];
      ResultFilter2@1006 : Text[1024];
      i@1004 : Integer;
    BEGIN
      if DimTotaling = '' then
        exit(DimTotaling);
      DimTotaling2 := DimTotaling;
      repeat
        i := STRPOS(DimTotaling2,'|');
        if i > 0 then begin
          DimTotalPart := COPYSTR(DimTotaling2,1,i - 1);
          if i < STRLEN(DimTotaling2) then
            DimTotaling2 := COPYSTR(DimTotaling2,i + 1)
          else
            DimTotaling2 := '';
        end else
          DimTotalPart := DimTotaling2;
        ResultFilter2 := ConvDimTotalingFilter(DimNo,DimTotalPart);
        if ResultFilter2 <> '' then
          if STRLEN(ResultFilter) + STRLEN(ResultFilter2) + 1 > MAXSTRLEN(ResultFilter) then
            ERROR(Text021,DimTotaling)
          else begin
            if ResultFilter <> '' then
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + ResultFilter2;
          end;
      until i <= 0;
      exit(ResultFilter);
    END;

    LOCAL PROCEDURE ConvDimTotalingFilter@28(DimNo@1000 : Integer;DimTotaling@1001 : Text[80]) : Text[1024];
    VAR
      DimVal@1003 : Record "Dimension Value";
      ItemAnalysisView@1006 : Record "Item Analysis View";
      DimCode@1002 : Code[20];
      ResultFilter@1004 : Text[1024];
      DimValTotaling@1005 : Boolean;
    BEGIN
      if DimTotaling = '' then
        exit(DimTotaling);

      if AnalysisLineTemplate."Item Analysis View Code" <> '' then
        ItemAnalysisView.GET(AnalysisLineTemplate."Analysis Area",AnalysisLineTemplate."Item Analysis View Code")
      else begin
        GLSetup.GET;
        ItemAnalysisView.INIT;
        ItemAnalysisView."Dimension 1 Code" := GLSetup."Global Dimension 1 Code";
        ItemAnalysisView."Dimension 2 Code" := GLSetup."Global Dimension 2 Code";
      end;

      case DimNo of
        1:
          DimCode := ItemAnalysisView."Dimension 1 Code";
        2:
          DimCode := ItemAnalysisView."Dimension 2 Code";
        3:
          DimCode := ItemAnalysisView."Dimension 3 Code";
      end;
      if DimCode = '' then
        exit(DimTotaling);

      DimVal.SETRANGE("Dimension Code",DimCode);
      DimVal.SETFILTER(Code,DimTotaling);
      if DimVal.FIND('-') then
        repeat
          DimValTotaling :=
            DimVal."Dimension Value Type" in
            [DimVal."Dimension Value Type"::Total,DimVal."Dimension Value Type"::"End-Total"];
          if DimValTotaling and (DimVal.Totaling <> '') then begin
            if STRLEN(ResultFilter) + STRLEN(DimVal.Totaling) + 1 > MAXSTRLEN(ResultFilter) then
              ERROR(Text021,DimTotaling);
            if ResultFilter <> '' then
              ResultFilter := ResultFilter + '|';
            ResultFilter := ResultFilter + DimVal.Totaling;
          end;
        until (DimVal.NEXT = 0) or not DimValTotaling;

      if DimValTotaling then
        exit(ResultFilter);

      exit(DimTotaling);
    END;

    LOCAL PROCEDURE CalcSalesAmount@37(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";Invoiced@1001 : Boolean) : Decimal;
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          if Invoiced then begin
            CALCFIELDS("Sales Amount (Actual)");
            exit("Sales Amount (Actual)");
          end;
          CALCFIELDS("Sales Amount (Expected)");
          exit("Sales Amount (Expected)");
        end;
        if Invoiced then begin
          CALCFIELDS("Analysis - Sales Amt. (Actual)");
          exit("Analysis - Sales Amt. (Actual)");
        end;
        CALCFIELDS("Analysis - Sales Amt. (Exp)");
        exit("Analysis - Sales Amt. (Exp)");
      end;
    END;

    LOCAL PROCEDURE CalcCostAmount@36(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer";Invoiced@1000 : Boolean) : Decimal;
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          if Invoiced then begin
            CALCFIELDS("Cost Amount (Actual)");
            exit("Cost Amount (Actual)");
          end;
          CALCFIELDS("Cost Amount (Expected)");
          exit("Cost Amount (Expected)");
        end;
        if Invoiced then begin
          CALCFIELDS("Analysis - Cost Amt. (Actual)");
          exit("Analysis - Cost Amt. (Actual)");
        end;
        CALCFIELDS("Analysis - Cost Amt. (Exp)");
        exit("Analysis - Cost Amt. (Exp)");
      end;
    END;

    LOCAL PROCEDURE CalcCostAmountNonInvnt@34(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer";Invoiced@1000 : Boolean) : Decimal;
    BEGIN
      with ItemStatisticsBuf do begin
        SETRANGE("Item Ledger Entry Type Filter");
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          if Invoiced then begin
            CALCFIELDS("Cost Amount (Non-Invtbl.)");
            exit("Cost Amount (Non-Invtbl.)");
          end;
          exit(0);
        end;
        if Invoiced then begin
          CALCFIELDS("Analysis CostAmt.(Non-Invtbl.)");
          exit("Analysis CostAmt.(Non-Invtbl.)");
        end;
      end;
    END;

    LOCAL PROCEDURE CalcQuantity@33(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";Invoiced@1001 : Boolean) : Decimal;
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          SETRANGE("Entry Type Filter");
          if Invoiced then begin
            CALCFIELDS("Invoiced Quantity");
            exit("Invoiced Quantity");
          end;
          CALCFIELDS(Quantity);
          exit(Quantity);
        end;
        SETRANGE("Entry Type Filter");
        if Invoiced then begin
          CALCFIELDS("Analysis - Invoiced Quantity");
          exit("Analysis - Invoiced Quantity");
        end;
        CALCFIELDS("Analysis - Quantity");
        exit("Analysis - Quantity");
      end;
    END;

    LOCAL PROCEDURE CalcUnitPrice@38(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer") : Decimal;
    VAR
      Item@1001 : Record Item;
      SalesPriceCalcMgt@1002 : Codeunit "Sales Price Calc. Mgt.";
    BEGIN
      if Item.GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN(Item."No."))) then
        exit(
          SalesPriceCalcMgt.FindAnalysisReportPrice(
            Item."No.",ItemStatisticsBuf.GETRANGEMIN("Date Filter")));
    END;

    LOCAL PROCEDURE CalcStdCost@39(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer") : Decimal;
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do
        if GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN("No."))) then
          exit("Standard Cost");
    END;

    LOCAL PROCEDURE CalcIndirectCost@40(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer") : Decimal;
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do
        if GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN("No."))) then
          exit("Indirect Cost %");
    END;

    LOCAL PROCEDURE CalcUnitCost@41(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer") : Decimal;
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do
        if GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN("No."))) then
          exit("Unit Cost");
    END;

    LOCAL PROCEDURE CalcBudgetSalesAmount@55(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer") : Decimal;
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter")
        else
          SETRANGE("Item Ledger Entry Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          CALCFIELDS("Budgeted Sales Amount");
          exit("Budgeted Sales Amount");
        end;
        CALCFIELDS("Analysis - Budgeted Sales Amt.");
        exit("Analysis - Budgeted Sales Amt.");
      end;
    END;

    LOCAL PROCEDURE CalcBudgetCostAmount@52(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer") : Decimal;
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          CALCFIELDS("Budgeted Cost Amount");
          exit("Budgeted Cost Amount");
        end;
        CALCFIELDS("Analysis - Budgeted Cost Amt.");
        exit("Analysis - Budgeted Cost Amt.");
      end;
    END;

    LOCAL PROCEDURE CalcBudgetQuantity@51(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer") : Decimal;
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          CALCFIELDS("Budgeted Quantity");
          exit("Budgeted Quantity");
        end;
        CALCFIELDS("Analysis - Budgeted Quantity");
        exit("Analysis - Budgeted Quantity");
      end;
    END;

    LOCAL PROCEDURE DrillDownSalesAmount@50(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";Invoiced@1001 : Boolean);
    VAR
      ValueEntry@1002 : Record "Value Entry";
      ItemAnalysisViewEntry@1003 : Record "Item Analysis View Entry";
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          FilterValueEntry(ItemStatisticsBuf,ValueEntry);
          if Invoiced then
            PAGE.RUN(0,ValueEntry,ValueEntry."Sales Amount (Actual)")
          else
            PAGE.RUN(0,ValueEntry,ValueEntry."Sales Amount (Expected)");
        end else begin
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          if Invoiced then
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Sales Amount (Actual)")
          else
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Sales Amount (Expected)");
        end;
      end;
    END;

    LOCAL PROCEDURE DrillDownCostAmount@49(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer";Invoiced@1000 : Boolean);
    VAR
      ValueEntry@1002 : Record "Value Entry";
      ItemAnalysisViewEntry@1003 : Record "Item Analysis View Entry";
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          FilterValueEntry(ItemStatisticsBuf,ValueEntry);
          if Invoiced then
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Actual)")
          else
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Expected)");
        end else begin
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          if Invoiced then
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Actual)")
          else
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Expected)");
        end;
      end;
    END;

    LOCAL PROCEDURE DrillDownCostAmountNonInvnt@48(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer";Invoiced@1000 : Boolean);
    VAR
      ValueEntry@1002 : Record "Value Entry";
      ItemAnalysisViewEntry@1003 : Record "Item Analysis View Entry";
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          FilterValueEntry(ItemStatisticsBuf,ValueEntry);
          if Invoiced then
            PAGE.RUN(0,ValueEntry,ValueEntry."Cost Amount (Non-Invtbl.)");
        end else begin
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          if Invoiced then
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Cost Amount (Non-Invtbl.)")
        end;
      end;
    END;

    LOCAL PROCEDURE DrillDownQuantity@47(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";Invoiced@1001 : Boolean);
    VAR
      ValueEntry@1002 : Record "Value Entry";
      ItemLedgEntry@1003 : Record "Item Ledger Entry";
      ItemAnalysisViewEntry@1004 : Record "Item Analysis View Entry";
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        SETRANGE("Entry Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          if Invoiced then begin
            FilterValueEntry(ItemStatisticsBuf,ValueEntry);
            PAGE.RUN(0,ValueEntry,ValueEntry."Invoiced Quantity");
          end else begin
            FilterItemLedgEntry(ItemStatisticsBuf,ItemLedgEntry);
            PAGE.RUN(0,ItemLedgEntry,ItemLedgEntry.Quantity);
          end;
        end else begin
          FilterItemAnalyViewEntry(ItemStatisticsBuf,ItemAnalysisViewEntry);
          if Invoiced then
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry."Invoiced Quantity")
          else
            PAGE.RUN(0,ItemAnalysisViewEntry,ItemAnalysisViewEntry.Quantity);
        end;
      end;
    END;

    LOCAL PROCEDURE DrillDownUnitPrice@46(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer");
    VAR
      Item@1001 : Record Item;
      SalesPrice@1002 : TEMPORARY Record "Sales Price";
      SalesPriceCalcMgt@1003 : Codeunit "Sales Price Calc. Mgt.";
    BEGIN
      if Item.GET(COPYSTR(ItemStatisticsBuf.GETFILTER("Item Filter"),1,MAXSTRLEN(Item."No."))) then begin
        SalesPriceCalcMgt.FindAnalysisReportPrice(
          Item."No.",ItemStatisticsBuf.GETRANGEMIN("Date Filter"));
        SalesPriceCalcMgt.CopySalesPrice(SalesPrice);
        if SalesPrice.FIND('-') then
          PAGE.RUNMODAL(PAGE::"Get Sales Price",SalesPrice)
        else begin
          ItemStatisticsBuf.COPYFILTER("Item Filter",Item."No.");
          PAGE.RUNMODAL(PAGE::"Item Card",Item,Item."Unit Price");
        end;
      end;
    END;

    LOCAL PROCEDURE DrillDownStdCost@45(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer");
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do begin
        ItemStatisticsBuf.COPYFILTER("Item Filter","No.");
        PAGE.RUNMODAL(PAGE::"Item Card",Item,"Standard Cost");
      end;
    END;

    LOCAL PROCEDURE DrillDownIndirectCost@44(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer");
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do begin
        ItemStatisticsBuf.COPYFILTER("Item Filter","No.");
        PAGE.RUNMODAL(PAGE::"Item Card",Item,"Indirect Cost %");
      end;
    END;

    LOCAL PROCEDURE DrillDownUnitCost@43(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer");
    VAR
      Item@1001 : Record Item;
    BEGIN
      with Item do begin
        ItemStatisticsBuf.COPYFILTER("Item Filter","No.");
        PAGE.RUNMODAL(PAGE::"Item Card",Item,"Unit Cost");
      end;
    END;

    LOCAL PROCEDURE DrillDownBudgetSalesAmount@62(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer");
    VAR
      ItemBudgetEntry@1001 : Record "Item Budget Entry";
      ItemAnalysisViewBudgEntry@1002 : Record "Item Analysis View Budg. Entry";
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          FilterItemBudgetEntry(ItemStatisticsBuf,ItemBudgetEntry);
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry."Sales Amount");
        end else begin
          FilterItemAnalyViewBudgEntry(ItemStatisticsBuf,ItemAnalysisViewBudgEntry);
          PAGE.RUN(0,ItemAnalysisViewBudgEntry,ItemAnalysisViewBudgEntry."Sales Amount");
        end;
      end;
    END;

    LOCAL PROCEDURE DrillDownBudgetCostAmount@61(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer");
    VAR
      ItemBudgetEntry@1000 : Record "Item Budget Entry";
      ItemAnalysisViewBudgEntry@1002 : Record "Item Analysis View Budg. Entry";
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          FilterItemBudgetEntry(ItemStatisticsBuf,ItemBudgetEntry);
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry."Cost Amount");
        end else begin
          FilterItemAnalyViewBudgEntry(ItemStatisticsBuf,ItemAnalysisViewBudgEntry);
          PAGE.RUN(0,ItemAnalysisViewBudgEntry,ItemAnalysisViewBudgEntry."Cost Amount");
        end;
      end;
    END;

    LOCAL PROCEDURE DrillDownBudgetQuantity@60(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer");
    VAR
      ItemBudgetEntry@1001 : Record "Item Budget Entry";
      ItemAnalysisViewBudgEntry@1002 : Record "Item Analysis View Budg. Entry";
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Source No. Filter") = '' then
          SETRANGE("Source Type Filter");

        if AnalysisLineTemplate."Item Analysis View Code" = '' then begin
          FilterItemBudgetEntry(ItemStatisticsBuf,ItemBudgetEntry);
          PAGE.RUN(0,ItemBudgetEntry,ItemBudgetEntry.Quantity);
        end else begin
          FilterItemAnalyViewBudgEntry(ItemStatisticsBuf,ItemAnalysisViewBudgEntry);
          PAGE.RUN(0,ItemAnalysisViewBudgEntry,ItemAnalysisViewBudgEntry.Quantity);
        end;
      end;
    END;

    LOCAL PROCEDURE FilterValueEntry@53(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR ValueEntry@1001 : Record "Value Entry");
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Item Filter") <> '' then
          COPYFILTER("Item Filter",ValueEntry."Item No.");

        if GETFILTER("Date Filter") <> '' then
          COPYFILTER("Date Filter",ValueEntry."Posting Date");

        if GETFILTER("Entry Type Filter") <> '' then
          COPYFILTER("Entry Type Filter",ValueEntry."Entry Type");

        if GETFILTER("Item Ledger Entry Type Filter") <> '' then
          COPYFILTER("Item Ledger Entry Type Filter",ValueEntry."Item Ledger Entry Type");

        if GETFILTER("Location Filter") <> '' then
          COPYFILTER("Location Filter",ValueEntry."Location Code");

        if GETFILTER("Global Dimension 1 Filter") <> '' then
          COPYFILTER("Global Dimension 1 Filter",ValueEntry."Global Dimension 1 Code");

        if GETFILTER("Global Dimension 2 Filter") <> '' then
          COPYFILTER("Global Dimension 2 Filter",ValueEntry."Global Dimension 2 Code");

        if GETFILTER("Source Type Filter") <> '' then
          COPYFILTER("Source Type Filter",ValueEntry."Source Type");

        FILTERGROUP := 2;
        ValueEntry.FILTERGROUP := 2;
        if GETFILTER("Global Dimension 1 Filter") <> '' then
          COPYFILTER("Global Dimension 1 Filter",ValueEntry."Global Dimension 1 Code");
        if GETFILTER("Global Dimension 2 Filter") <> '' then
          COPYFILTER("Global Dimension 2 Filter",ValueEntry."Global Dimension 2 Code");
        FILTERGROUP := 0;
        ValueEntry.FILTERGROUP := 0;

        if GETFILTER("Source No. Filter") <> '' then begin
          ValueEntry.SETCURRENTKEY("Source Type","Source No.");
          COPYFILTER("Source No. Filter",ValueEntry."Source No.");
        end else
          ValueEntry.SETCURRENTKEY("Item No.","Posting Date");
      end;
    END;

    LOCAL PROCEDURE FilterItemLedgEntry@57(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer";VAR ItemLedgEntry@1000 : Record "Item Ledger Entry");
    BEGIN
      with ItemStatisticsBuf do begin
        if GETFILTER("Item Filter") <> '' then
          COPYFILTER("Item Filter",ItemLedgEntry."Item No.");

        if GETFILTER("Date Filter") <> '' then
          COPYFILTER("Date Filter",ItemLedgEntry."Posting Date");

        if GETFILTER("Item Ledger Entry Type Filter") <> '' then
          COPYFILTER("Item Ledger Entry Type Filter",ItemLedgEntry."Entry Type");

        if GETFILTER("Location Filter") <> '' then
          COPYFILTER("Location Filter",ItemLedgEntry."Location Code");

        if GETFILTER("Global Dimension 1 Filter") <> '' then
          COPYFILTER("Global Dimension 1 Filter",ItemLedgEntry."Global Dimension 1 Code");

        if GETFILTER("Global Dimension 2 Filter") <> '' then
          COPYFILTER("Global Dimension 2 Filter",ItemLedgEntry."Global Dimension 2 Code");

        if GETFILTER("Source Type Filter") <> '' then
          COPYFILTER("Source Type Filter",ItemLedgEntry."Source Type");

        FILTERGROUP := 2;
        ItemLedgEntry.FILTERGROUP := 2;
        if GETFILTER("Global Dimension 1 Filter") <> '' then
          COPYFILTER("Global Dimension 1 Filter",ItemLedgEntry."Global Dimension 1 Code");
        if GETFILTER("Global Dimension 2 Filter") <> '' then
          COPYFILTER("Global Dimension 2 Filter",ItemLedgEntry."Global Dimension 2 Code");
        FILTERGROUP := 0;
        ItemLedgEntry.FILTERGROUP := 0;

        if GETFILTER("Source No. Filter") <> '' then begin
          ItemLedgEntry.SETCURRENTKEY("Source Type","Source No.");
          COPYFILTER("Source No. Filter",ItemLedgEntry."Source No.");
        end else
          ItemLedgEntry.SETCURRENTKEY("Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
      end;
    END;

    LOCAL PROCEDURE FilterItemBudgetEntry@68(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR ItemBudgetEntry@1001 : Record "Item Budget Entry");
    BEGIN
      with ItemStatisticsBuf do begin
        COPYFILTER("Analysis Area Filter",ItemBudgetEntry."Analysis Area");
        COPYFILTER("Budget Filter",ItemBudgetEntry."Budget Name");

        if GETFILTER("Item Filter") <> '' then
          COPYFILTER("Item Filter",ItemBudgetEntry."Item No.");

        if GETFILTER("Date Filter") <> '' then
          COPYFILTER("Date Filter",ItemBudgetEntry.Date);

        if GETFILTER("Global Dimension 1 Filter") <> '' then
          COPYFILTER("Global Dimension 1 Filter",ItemBudgetEntry."Global Dimension 1 Code");

        if GETFILTER("Global Dimension 2 Filter") <> '' then
          COPYFILTER("Global Dimension 2 Filter",ItemBudgetEntry."Global Dimension 2 Code");

        if GETFILTER("Source Type Filter") <> '' then
          COPYFILTER("Source Type Filter",ItemBudgetEntry."Source Type");

        FILTERGROUP := 2;
        ItemBudgetEntry.FILTERGROUP := 2;
        if GETFILTER("Global Dimension 1 Filter") <> '' then
          COPYFILTER("Global Dimension 1 Filter",ItemBudgetEntry."Global Dimension 1 Code");
        if GETFILTER("Global Dimension 2 Filter") <> '' then
          COPYFILTER("Global Dimension 2 Filter",ItemBudgetEntry."Global Dimension 2 Code");
        FILTERGROUP := 0;
        ItemBudgetEntry.FILTERGROUP := 0;

        if GETFILTER("Source No. Filter") <> '' then begin
          ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Source Type","Source No.");
          COPYFILTER("Source No. Filter",ItemBudgetEntry."Source No.");
        end else
          ItemBudgetEntry.SETCURRENTKEY("Analysis Area","Budget Name","Item No.");
      end;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewEntry@75(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR ItemAnalysisViewEntry@1001 : Record "Item Analysis View Entry");
    BEGIN
      with ItemStatisticsBuf do begin
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewEntry."Analysis View Code");

        if GETFILTER("Item Filter") <> '' then
          COPYFILTER("Item Filter",ItemAnalysisViewEntry."Item No.");

        if GETFILTER("Date Filter") <> '' then
          COPYFILTER("Date Filter",ItemAnalysisViewEntry."Posting Date");

        if GETFILTER("Entry Type Filter") <> '' then
          COPYFILTER("Entry Type Filter",ItemAnalysisViewEntry."Entry Type");

        if GETFILTER("Item Ledger Entry Type Filter") <> '' then
          COPYFILTER("Item Ledger Entry Type Filter",ItemAnalysisViewEntry."Item Ledger Entry Type");

        if GETFILTER("Location Filter") <> '' then
          COPYFILTER("Location Filter",ItemAnalysisViewEntry."Location Code");

        if GETFILTER("Dimension 1 Filter") <> '' then
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewEntry."Dimension 1 Value Code");

        if GETFILTER("Dimension 2 Filter") <> '' then
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewEntry."Dimension 2 Value Code");

        if GETFILTER("Dimension 3 Filter") <> '' then
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewEntry."Dimension 3 Value Code");

        if GETFILTER("Source Type Filter") <> '' then
          COPYFILTER("Source Type Filter",ItemAnalysisViewEntry."Source Type");

        if GETFILTER("Source No. Filter") <> '' then
          COPYFILTER("Source No. Filter",ItemAnalysisViewEntry."Source No.");

        FILTERGROUP := 2;
        ItemAnalysisViewEntry.FILTERGROUP := 2;
        if GETFILTER("Dimension 1 Filter") <> '' then
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewEntry."Dimension 1 Value Code");
        if GETFILTER("Dimension 2 Filter") <> '' then
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewEntry."Dimension 2 Value Code");
        if GETFILTER("Dimension 3 Filter") <> '' then
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewEntry."Dimension 3 Value Code");
        FILTERGROUP := 0;
        ItemAnalysisViewEntry.FILTERGROUP := 0;
      end;
    END;

    LOCAL PROCEDURE FilterItemAnalyViewBudgEntry@73(VAR ItemStatisticsBuf@1000 : Record "Item Statistics Buffer";VAR ItemAnalysisViewBudgEntry@1001 : Record "Item Analysis View Budg. Entry");
    BEGIN
      with ItemStatisticsBuf do begin
        COPYFILTER("Analysis Area Filter",ItemAnalysisViewBudgEntry."Analysis Area");
        COPYFILTER("Analysis View Filter",ItemAnalysisViewBudgEntry."Analysis View Code");
        COPYFILTER("Budget Filter",ItemAnalysisViewBudgEntry."Budget Name");

        if GETFILTER("Item Filter") <> '' then
          COPYFILTER("Item Filter",ItemAnalysisViewBudgEntry."Item No.");

        if GETFILTER("Date Filter") <> '' then
          COPYFILTER("Date Filter",ItemAnalysisViewBudgEntry."Posting Date");

        if GETFILTER("Dimension 1 Filter") <> '' then
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewBudgEntry."Dimension 1 Value Code");

        if GETFILTER("Dimension 2 Filter") <> '' then
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewBudgEntry."Dimension 2 Value Code");

        if GETFILTER("Dimension 3 Filter") <> '' then
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewBudgEntry."Dimension 3 Value Code");

        if GETFILTER("Source Type Filter") <> '' then
          COPYFILTER("Source Type Filter",ItemAnalysisViewBudgEntry."Source Type");

        if GETFILTER("Source No. Filter") <> '' then
          COPYFILTER("Source No. Filter",ItemAnalysisViewBudgEntry."Source No.");

        FILTERGROUP := 2;
        ItemAnalysisViewBudgEntry.FILTERGROUP := 2;
        if GETFILTER("Dimension 1 Filter") <> '' then
          COPYFILTER("Dimension 1 Filter",ItemAnalysisViewBudgEntry."Dimension 1 Value Code");
        if GETFILTER("Dimension 2 Filter") <> '' then
          COPYFILTER("Dimension 2 Filter",ItemAnalysisViewBudgEntry."Dimension 2 Value Code");
        if GETFILTER("Dimension 3 Filter") <> '' then
          COPYFILTER("Dimension 3 Filter",ItemAnalysisViewBudgEntry."Dimension 3 Value Code");
        FILTERGROUP := 0;
        ItemAnalysisViewBudgEntry.FILTERGROUP := 0;
      end;
    END;

    LOCAL PROCEDURE SetGroupDimFilter@64(VAR ItemStatisticsBuf@1004 : Record "Item Statistics Buffer";GroupDimCode@1000 : Code[20];DimValueFilter@1001 : Text[250]);
    VAR
      ItemAnalysisView@1002 : Record "Item Analysis View";
    BEGIN
      if AnalysisLineTemplate."Item Analysis View Code" <> '' then begin
        ItemAnalysisView.GET(AnalysisLineTemplate."Analysis Area",AnalysisLineTemplate."Item Analysis View Code");
        case GroupDimCode of
          '':
            exit;
          ItemAnalysisView."Dimension 1 Code":
            ItemStatisticsBuf.SETFILTER("Dimension 1 Filter",DimValueFilter);
          ItemAnalysisView."Dimension 2 Code":
            ItemStatisticsBuf.SETFILTER("Dimension 2 Filter",DimValueFilter);
          ItemAnalysisView."Dimension 3 Code":
            ItemStatisticsBuf.SETFILTER("Dimension 3 Filter",DimValueFilter);
          else
            ERROR(Text022,
              AnalysisLineTemplate.FIELDCAPTION("Item Analysis View Code"),
              AnalysisLineTemplate.TABLECAPTION,
              AnalysisLineTemplate."Analysis Area",
              AnalysisLineTemplate.Name,
              GroupDimCode);
        end;
      end else begin
        GLSetup.GET;
        case GroupDimCode of
          '':
            exit;
          GLSetup."Global Dimension 1 Code":
            ItemStatisticsBuf.SETFILTER("Global Dimension 1 Filter",DimValueFilter);
          GLSetup."Global Dimension 2 Code":
            ItemStatisticsBuf.SETFILTER("Global Dimension 2 Filter",DimValueFilter);
          else
            ERROR(Text022,
              AnalysisLineTemplate.FIELDCAPTION("Item Analysis View Code"),
              AnalysisLineTemplate.TABLECAPTION,
              AnalysisLineTemplate."Analysis Area",
              AnalysisLineTemplate.Name,
              GroupDimCode);
        end;
      end;
    END;

    LOCAL PROCEDURE FilterToValue@70(VAR AnalysisLine@1000 : Record "Analysis Line") : Integer;
    VAR
      AnalysisLine2@1001 : Record "Analysis Line";
    BEGIN
      with AnalysisLine2 do
        for "Source Type Filter" := "Source Type Filter"::" " to "Source Type Filter"::Item do
          if AnalysisLine.GETFILTER("Source Type Filter") = FORMAT("Source Type Filter") then
            exit("Source Type Filter");
    END;

    LOCAL PROCEDURE GetSalesSetup@25();
    BEGIN
      if SalesSetupRead then
        exit;
      SalesSetup.GET;
      SalesSetupRead := true;
    END;

    LOCAL PROCEDURE GetInventorySetup@42();
    BEGIN
      if InventorySetupRead then
        exit;
      InventorySetup.GET;
      InventorySetupRead := true;
    END;

    [External]
    PROCEDURE SetExpression@23(Expression@1000 : Text[250]);
    BEGIN
      TryExpression := Expression;
    END;

    LOCAL PROCEDURE IsValidAnalysisExpression@12(VAR AnalysisLine@1000 : Record "Analysis Line";Expression@1001 : Text[250]) : Boolean;
    VAR
      AnalysisReportMgt@1002 : Codeunit "Analysis Report Management";
    BEGIN
      AnalysisReportMgt.SetExpression(Expression);
      if AnalysisReportMgt.RUN(AnalysisLine) then
        exit(true);
      exit(false);
    END;

    [External]
    PROCEDURE ValidateFilter@71(VAR Filter@1000 : Text;RecNo@1001 : Integer;FieldNumber@1002 : Integer;ConvertToNumbers@1003 : Boolean);
    VAR
      AnalysisColumn@1004 : Record "Analysis Column";
      AnalysisType@1006 : Record "Analysis Type";
      ItemStatisticsBuffer@1005 : Record "Item Statistics Buffer";
    BEGIN
      case RecNo of
        DATABASE::"Analysis Column":
          case FieldNumber of
            AnalysisColumn.FIELDNO("Item Ledger Entry Type Filter"):
              begin
                ItemStatisticsBuffer.SETFILTER("Item Ledger Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Item Ledger Entry Type Filter");
              end;
            AnalysisColumn.FIELDNO("Value Entry Type Filter"):
              begin
                ItemStatisticsBuffer.SETFILTER("Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Entry Type Filter");
              end;
          end;
        DATABASE::"Analysis Type":
          case FieldNumber of
            AnalysisType.FIELDNO("Item Ledger Entry Type Filter"):
              begin
                ItemStatisticsBuffer.SETFILTER("Item Ledger Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Item Ledger Entry Type Filter");
              end;
            AnalysisType.FIELDNO("Value Entry Type Filter"):
              begin
                ItemStatisticsBuffer.SETFILTER("Entry Type Filter",Filter);
                Filter := ItemStatisticsBuffer.GETFILTER("Entry Type Filter");
              end;
          end;
      end;

      if ConvertToNumbers then
        ConvertOptionNameToNo(Filter,RecNo,FieldNumber);
    END;

    LOCAL PROCEDURE ConvertOptionNameToNo@19(VAR Filter@1000 : Text;RecNo@1001 : Integer;FieldNumber@1008 : Integer);
    VAR
      AnalysisColumn@1009 : Record "Analysis Column";
      AnalysisType@1010 : Record "Analysis Type";
      DummyItemStatisticsBuffer@1011 : Record "Item Statistics Buffer";
      VarInteger@1003 : Integer;
      OptionNo@1002 : Integer;
      OptionName@1004 : Text[30];
    BEGIN
      while true do begin
        case RecNo of
          DATABASE::"Analysis Column":
            case FieldNumber of
              AnalysisColumn.FIELDNO("Item Ledger Entry Type Filter"):
                begin
                  DummyItemStatisticsBuffer."Item Ledger Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(DummyItemStatisticsBuffer."Item Ledger Entry Type Filter");
                end;
              AnalysisColumn.FIELDNO("Value Entry Type Filter"):
                begin
                  DummyItemStatisticsBuffer."Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(DummyItemStatisticsBuffer."Entry Type Filter");
                end;
            end;
          DATABASE::"Analysis Type":
            case FieldNumber of
              AnalysisType.FIELDNO("Item Ledger Entry Type Filter"):
                begin
                  DummyItemStatisticsBuffer."Item Ledger Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(DummyItemStatisticsBuffer."Item Ledger Entry Type Filter");
                end;
              AnalysisType.FIELDNO("Value Entry Type Filter"):
                begin
                  DummyItemStatisticsBuffer."Entry Type Filter" := OptionNo;
                  OptionName := FORMAT(DummyItemStatisticsBuffer."Entry Type Filter");
                end;
            end;
        end;

        if EVALUATE(VarInteger,OptionName) then
          if VarInteger = OptionNo then
            exit;

        FindAndReplace(Filter,OptionName,FORMAT(OptionNo));
        OptionNo += 1;
      end;
    END;

    LOCAL PROCEDURE FindAndReplace@58(VAR Filter@1000 : Text;FindWhat@1001 : Text[30];ReplaceWith@1002 : Text[30]);
    VAR
      Position@1003 : Integer;
    BEGIN
      while true do begin
        Position := STRPOS(Filter,FindWhat);
        if Position = 0 then
          exit;
        Filter := INSSTR(DELSTR(Filter,Position,STRLEN(FindWhat)),ReplaceWith,Position);
      end;
    END;

    LOCAL PROCEDURE GetSourceNoFilter@80(VAR ItemStatisticsBuf@1001 : Record "Item Statistics Buffer";VAR AnalysisLine@1002 : Record "Analysis Line") : Text;
    BEGIN
      case FilterToValue(AnalysisLine) of
        AnalysisLine."Source Type Filter"::Item:
          exit(DELCHR(STRSUBSTNO('%1&%2',
                ItemStatisticsBuf.GETFILTER("Item Filter"),AnalysisLine.GETFILTER("Source No. Filter")),'<>','&'));
        else
          exit(DELCHR(STRSUBSTNO('%1&%2',
                ItemStatisticsBuf.GETFILTER("Source No. Filter"),AnalysisLine.GETFILTER("Source No. Filter")),'<>','&'));
      end;
    END;

    LOCAL PROCEDURE CalcFieldError@74(RowNo@1000 : Integer;ColumnNo@1001 : Integer) ErrorText : Text;
    VAR
      AllErrorType@1003 : Boolean;
    BEGIN
      AnalysisFieldValue.SETRANGE("Row Ref. No.",RowNo);
      AnalysisFieldValue.SETRANGE("Column No.",ColumnNo);
      if AnalysisFieldValue.FINDFIRST then begin
        AllErrorType :=
          AnalysisFieldValue."Has Error" and
          AnalysisFieldValue."Period Error" and
          AnalysisFieldValue."Formula Error" and
          AnalysisFieldValue."Cyclic Error";
        if AllErrorType then
          exit(FORMAT(ShowError::All));
        if AnalysisFieldValue."Has Error" then
          ErrorText := FORMAT(ShowError::"Division by Zero") + SeparatorTok;
        if AnalysisFieldValue."Period Error" then
          ErrorText := FORMAT(ShowError::"Period Error") + SeparatorTok;
        if AnalysisFieldValue."Formula Error" then
          ErrorText := FORMAT(ShowError::"Invalid Formula") + SeparatorTok;
        if AnalysisFieldValue."Cyclic Error" then
          ErrorText := FORMAT(ShowError::"Cyclic Formula") + SeparatorTok;
        ErrorText := DELCHR(ErrorText,'>',SeparatorTok);
      end;

      AnalysisFieldValue.SETRANGE("Row Ref. No.");
      AnalysisFieldValue.SETRANGE("Column No.");
    END;

    BEGIN
    END.
  }
}

