OBJECT Codeunit 5332 Lookup CRM Tables
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    [External]
    PROCEDURE Lookup@1(CRMTableID@1001 : Integer;NAVTableId@1004 : Integer;SavedCRMId@1000 : GUID;VAR CRMId@1002 : GUID) : Boolean;
    VAR
      IntTableFilter@1003 : Text;
    BEGIN
      IntTableFilter := GetIntegrationTableFilter(CRMTableID,NAVTableId);

      case CRMTableID of
        DATABASE::"CRM Account":
          exit(LookupCRMAccount(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Contact":
          exit(LookupCRMContact(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Systemuser":
          exit(LookupCRMSystemuser(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Transactioncurrency":
          exit(LookupCRMCurrency(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Pricelevel":
          exit(LookupCRMPriceList(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Product":
          exit(LookupCRMProduct(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Uomschedule":
          exit(LookupCRMUomschedule(SavedCRMId,CRMId,IntTableFilter));
        DATABASE::"CRM Opportunity":
          exit(LookupCRMOpportunity(SavedCRMId,CRMId,IntTableFilter));
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMAccount@2(SavedCRMId@1004 : GUID;VAR CRMId@1000 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMAccount@1003 : Record "CRM Account";
      OriginalCRMAccount@1002 : Record "CRM Account";
      CRMAccountList@1001 : Page "CRM Account List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMAccount.GET(CRMId);
        CRMAccountList.SETRECORD(CRMAccount);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMAccount.GET(SavedCRMId);
        CRMAccountList.SetCurrentlyCoupledCRMAccount(OriginalCRMAccount);
      end;
      CRMAccount.SETVIEW(IntTableFilter);
      CRMAccountList.SETTABLEVIEW(CRMAccount);
      CRMAccountList.LOOKUPMODE(true);
      if CRMAccountList.RUNMODAL = ACTION::LookupOK then begin
        CRMAccountList.GETRECORD(CRMAccount);
        CRMId := CRMAccount.AccountId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMContact@3(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMContact@1002 : Record "CRM Contact";
      OriginalCRMContact@1001 : Record "CRM Contact";
      CRMContactList@1000 : Page "CRM Contact List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMContact.GET(CRMId);
        CRMContactList.SETRECORD(CRMContact);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMContact.GET(SavedCRMId);
        CRMContactList.SetCurrentlyCoupledCRMContact(OriginalCRMContact);
      end;
      CRMContact.SETVIEW(IntTableFilter);
      CRMContactList.SETTABLEVIEW(CRMContact);
      CRMContactList.LOOKUPMODE(true);
      if CRMContactList.RUNMODAL = ACTION::LookupOK then begin
        CRMContactList.GETRECORD(CRMContact);
        CRMId := CRMContact.ContactId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMSystemuser@4(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMSystemuser@1002 : Record "CRM Systemuser";
      OriginalCRMSystemuser@1001 : Record "CRM Systemuser";
      CRMSystemuserList@1000 : Page "CRM Systemuser List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMSystemuser.GET(CRMId);
        CRMSystemuserList.SETRECORD(CRMSystemuser);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMSystemuser.GET(SavedCRMId);
        CRMSystemuserList.SetCurrentlyCoupledCRMSystemuser(OriginalCRMSystemuser);
      end;
      CRMSystemuser.SETVIEW(IntTableFilter);
      CRMSystemuserList.SETTABLEVIEW(CRMSystemuser);
      CRMSystemuserList.LOOKUPMODE(true);
      if CRMSystemuserList.RUNMODAL = ACTION::LookupOK then begin
        CRMSystemuserList.GETRECORD(CRMSystemuser);
        CRMId := CRMSystemuser.SystemUserId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMCurrency@5(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMTransactioncurrency@1002 : Record "CRM Transactioncurrency";
      OriginalCRMTransactioncurrency@1001 : Record "CRM Transactioncurrency";
      CRMTransactionCurrencyList@1000 : Page "CRM TransactionCurrency List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMTransactioncurrency.GET(CRMId);
        CRMTransactionCurrencyList.SETRECORD(CRMTransactioncurrency);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMTransactioncurrency.GET(SavedCRMId);
        CRMTransactionCurrencyList.SetCurrentlyCoupledCRMTransactioncurrency(OriginalCRMTransactioncurrency);
      end;
      CRMTransactioncurrency.SETVIEW(IntTableFilter);
      CRMTransactionCurrencyList.SETTABLEVIEW(CRMTransactioncurrency);
      CRMTransactionCurrencyList.LOOKUPMODE(true);
      if CRMTransactionCurrencyList.RUNMODAL = ACTION::LookupOK then begin
        CRMTransactionCurrencyList.GETRECORD(CRMTransactioncurrency);
        CRMId := CRMTransactioncurrency.TransactionCurrencyId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMPriceList@8(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMPricelevel@1002 : Record "CRM Pricelevel";
      OriginalCRMPricelevel@1001 : Record "CRM Pricelevel";
      CRMPricelevelList@1000 : Page "CRM Pricelevel List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMPricelevel.GET(CRMId);
        CRMPricelevelList.SETRECORD(CRMPricelevel);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMPricelevel.GET(SavedCRMId);
        CRMPricelevelList.SetCurrentlyCoupledCRMPricelevel(OriginalCRMPricelevel);
      end;
      CRMPricelevel.SETVIEW(IntTableFilter);
      CRMPricelevelList.SETTABLEVIEW(CRMPricelevel);
      CRMPricelevelList.LOOKUPMODE(true);
      if CRMPricelevelList.RUNMODAL = ACTION::LookupOK then begin
        CRMPricelevelList.GETRECORD(CRMPricelevel);
        CRMId := CRMPricelevel.PriceLevelId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMProduct@6(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMProduct@1002 : Record "CRM Product";
      OriginalCRMProduct@1001 : Record "CRM Product";
      CRMProductList@1000 : Page "CRM Product List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMProduct.GET(CRMId);
        CRMProductList.SETRECORD(CRMProduct);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMProduct.GET(SavedCRMId);
        CRMProductList.SetCurrentlyCoupledCRMProduct(OriginalCRMProduct);
      end;
      CRMProduct.SETVIEW(IntTableFilter);
      CRMProductList.SETTABLEVIEW(CRMProduct);
      CRMProductList.LOOKUPMODE(true);
      if CRMProductList.RUNMODAL = ACTION::LookupOK then begin
        CRMProductList.GETRECORD(CRMProduct);
        CRMId := CRMProduct.ProductId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMUomschedule@7(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMUomschedule@1002 : Record "CRM Uomschedule";
      OriginalCRMUomschedule@1001 : Record "CRM Uomschedule";
      CRMUnitGroupList@1000 : Page "CRM UnitGroup List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMUomschedule.GET(CRMId);
        CRMUnitGroupList.SETRECORD(CRMUomschedule);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMUomschedule.GET(SavedCRMId);
        CRMUnitGroupList.SetCurrentlyCoupledCRMUomschedule(OriginalCRMUomschedule);
      end;
      CRMUomschedule.SETVIEW(IntTableFilter);
      CRMUnitGroupList.SETTABLEVIEW(CRMUomschedule);
      CRMUnitGroupList.LOOKUPMODE(true);
      if CRMUnitGroupList.RUNMODAL = ACTION::LookupOK then begin
        CRMUnitGroupList.GETRECORD(CRMUomschedule);
        CRMId := CRMUomschedule.UoMScheduleId;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE LookupCRMOpportunity@10(SavedCRMId@1004 : GUID;VAR CRMId@1003 : GUID;IntTableFilter@1005 : Text) : Boolean;
    VAR
      CRMOpportunity@1002 : Record "CRM Opportunity";
      OriginalCRMOpportunity@1001 : Record "CRM Opportunity";
      CRMOpportunityList@1000 : Page "CRM Opportunity List";
    BEGIN
      if not ISNULLGUID(CRMId) then begin
        CRMOpportunity.GET(CRMId);
        CRMOpportunityList.SETRECORD(CRMOpportunity);
        if not ISNULLGUID(SavedCRMId) then
          OriginalCRMOpportunity.GET(SavedCRMId);
        CRMOpportunityList.SetCurrentlyCoupledCRMOpportunity(OriginalCRMOpportunity);
      end;
      CRMOpportunity.SETVIEW(IntTableFilter);
      CRMOpportunityList.SETTABLEVIEW(CRMOpportunity);
      CRMOpportunityList.LOOKUPMODE(true);
      if CRMOpportunityList.RUNMODAL = ACTION::LookupOK then begin
        CRMOpportunityList.GETRECORD(CRMOpportunity);
        CRMId := CRMOpportunity.OpportunityId;
        exit(true);
      end;
      exit(false);
    END;

    PROCEDURE GetIntegrationTableFilter@9(CRMTableId@1001 : Integer;NAVTableId@1000 : Integer) : Text;
    VAR
      IntegrationTableMapping@1002 : Record "Integration Table Mapping";
    BEGIN
      IntegrationTableMapping.SETRANGE("Synch. Codeunit ID",CODEUNIT::"CRM Integration Table Synch.");
      IntegrationTableMapping.SETRANGE("Table ID",NAVTableId);
      IntegrationTableMapping.SETRANGE("Integration Table ID",CRMTableId);
      IntegrationTableMapping.SETRANGE("Delete After Synchronization",false);
      if IntegrationTableMapping.FINDFIRST then
        exit(IntegrationTableMapping.GetIntegrationTableFilter);
      exit('');
    END;

    BEGIN
    END.
  }
}

