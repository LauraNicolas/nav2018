OBJECT Page 5830 Demand Overview
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Demand Overview;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    SourceTable="Availability Calc. Overview";
    SourceTableView=SORTING("Item No.",Date,"Attached to Entry No.",Type);
    PageType=Worksheet;
    SourceTableTemporary=true;
    RefreshOnActivate=true;
    OnInit=BEGIN
             DemandNoCtrlEnable := true;
             MatchCriteria := true;
           END;

    OnOpenPage=BEGIN
                 InitTempTable;

                 SETRANGE("Matches Criteria");
                 if MatchCriteria then
                   SETRANGE("Matches Criteria",true);
                 DemandNoCtrlEnable := DemandType <> DemandType::" ";
                 CurrPage.UPDATE(false);
               END;

    OnAfterGetRecord=BEGIN
                       TypeIndent := 0;
                       ItemNoHideValue := Type <> Type::Item;
                       if Type = Type::Item then
                         ItemNoEmphasize := "Matches Criteria";

                       TypeEmphasize := "Matches Criteria" and (Type in [Type::Item,Type::"As of Date"]);
                       TypeIndent := Level;

                       SourceTypeText := FORMAT("Source Type");
                       SourceTypeTextOnFormat(SourceTypeText);

                       if Type in [Type::Item,Type::"As of Date"] then begin
                         QuantityText := '';
                         ReservedQuantityText := '';
                       end else begin
                         QuantityText := FORMAT(Quantity);
                         ReservedQuantityText := FORMAT("Reserved Quantity");
                       end;

                       SupplyRunningTotalHideValue := Type = Type::Item;
                       SourceOrderStatusHideValue := Type = Type::Item;
                       RunningTotalHideValue := Type = Type::Item;
                       InventoryRunningTotalHideValue := Type = Type::Item;
                       DemandRunningTotalHideValue := Type = Type::Item;

                       DateEmphasize := "Running Total" < 0;
                       DescriptionEmphasize := Type = Type::Item;
                       SupplyRunningTotalEmphasize := Type = Type::"As of Date";
                       DemandRunningTotalEmphasize := Type = Type::"As of Date";
                       RunningTotalEmphasize := Type = Type::"As of Date";
                       InventoryRunningTotalEmphasize := Type = Type::"As of Date";
                     END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      Name=ActionContainer1900000004;
                      ActionContainerType=ActionItems }
      { 65      ;1   ;Action    ;
                      Name=Calculate;
                      CaptionML=ENU=Calculate;
                      ToolTipML=ENU="Update the window with any demand. ";
                      ApplicationArea=#Advanced;
                      Promoted=true;
                      Image=Calculate;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 CalculationOfDemand := true;
                                 InitTempTable;
                                 IsCalculated := true;
                                 SETRANGE("Matches Criteria");
                                 if MatchCriteria then
                                   SETRANGE("Matches Criteria",true);
                                 CurrPage.UPDATE(false);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 37  ;1   ;Group     ;
                Name=General;
                CaptionML=ENU=General }

    { 39  ;2   ;Field     ;
                Name=StartDate;
                CaptionML=ENU=Start Date;
                ToolTipML=ENU=Specifies the start date of the period for which you want to calculate demand.;
                ApplicationArea=#Advanced;
                SourceExpr=StartDate;
                OnValidate=BEGIN
                             IsCalculated := false;
                           END;

                ImplicitType=Date }

    { 41  ;2   ;Field     ;
                Name=EndDate;
                CaptionML=ENU=End Date;
                ToolTipML=ENU=Specifies the end date of the period for which you want to calculate demand. Enter a date that is later than the start date.;
                ApplicationArea=#Advanced;
                SourceExpr=EndDate;
                OnValidate=BEGIN
                             IsCalculated := false;
                           END;

                ImplicitType=Date }

    { 43  ;2   ;Field     ;
                Name=DemandType;
                CaptionML=ENU=Demand Type;
                ToolTipML=ENU=Specifies a list of the types of orders for which you can calculate demand. Select one order type from the list:;
                OptionCaptionML=ENU=" All Demand,Sale,Production,Job,Service,Assembly";
                ApplicationArea=#Advanced;
                SourceExpr=DemandType;
                OnValidate=BEGIN
                             IsCalculated := false;
                             DemandNoCtrlEnable := DemandType <> DemandType::" ";
                           END;

                ImplicitType=Option }

    { 45  ;2   ;Field     ;
                Name=DemandNoCtrl;
                CaptionML=ENU=Demand No.;
                ToolTipML=ENU=Specifies the number of the item for which the demand calculation was initiated.;
                ApplicationArea=#Advanced;
                SourceExpr=DemandNo;
                Enabled=DemandNoCtrlEnable;
                OnValidate=BEGIN
                             IsCalculated := false;
                           END;

                OnLookup=VAR
                           SalesHeader@1007 : Record "Sales Header";
                           ProdOrder@1006 : Record "Production Order";
                           Job@1005 : Record Job;
                           ServHeader@1004 : Record "Service Header";
                           AsmHeader@1010 : Record "Assembly Header";
                           SalesList@1000 : Page "Sales List";
                           ProdOrderList@1001 : Page "Production Order List";
                           JobList@1002 : Page "Job List";
                           ServiceOrders@1003 : Page "Service Orders";
                           AsmOrders@1011 : Page "Assembly Orders";
                         BEGIN
                           case DemandType of
                             DemandType::Sales:
                               begin
                                 SalesHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                                 SalesList.SETTABLEVIEW(SalesHeader);
                                 SalesList.LOOKUPMODE := true;
                                 if SalesList.RUNMODAL = ACTION::LookupOK then begin
                                   SalesList.GETRECORD(SalesHeader);
                                   Text := SalesHeader."No.";
                                   exit(true);
                                 end;
                                 exit(false);
                               end;
                             DemandType::Production:
                               begin
                                 ProdOrder.SETRANGE(Status,ProdOrder.Status::Planned,ProdOrder.Status::Released);
                                 ProdOrderList.SETTABLEVIEW(ProdOrder);
                                 ProdOrderList.LOOKUPMODE := true;
                                 if ProdOrderList.RUNMODAL = ACTION::LookupOK then begin
                                   ProdOrderList.GETRECORD(ProdOrder);
                                   Text := ProdOrder."No.";
                                   exit(true);
                                 end;
                                 exit(false);
                               end;
                             DemandType::Services:
                               begin
                                 ServHeader.SETRANGE("Document Type",ServHeader."Document Type"::Order);
                                 ServiceOrders.SETTABLEVIEW(ServHeader);
                                 ServiceOrders.LOOKUPMODE := true;
                                 if ServiceOrders.RUNMODAL = ACTION::LookupOK then begin
                                   ServiceOrders.GETRECORD(ServHeader);
                                   Text := ServHeader."No.";
                                   exit(true);
                                 end;
                                 exit(false);
                               end;
                             DemandType::Jobs:
                               begin
                                 Job.SETRANGE(Status,Job.Status::Open);
                                 JobList.SETTABLEVIEW(Job);
                                 JobList.LOOKUPMODE := true;
                                 if JobList.RUNMODAL = ACTION::LookupOK then begin
                                   JobList.GETRECORD(Job);
                                   Text := Job."No.";
                                   exit(true);
                                 end;
                                 exit(false);
                               end;
                             DemandType::Assembly:
                               begin
                                 AsmHeader.SETRANGE("Document Type",AsmHeader."Document Type"::Order);
                                 AsmOrders.SETTABLEVIEW(AsmHeader);
                                 AsmOrders.LOOKUPMODE := true;
                                 if AsmOrders.RUNMODAL = ACTION::LookupOK then begin
                                   AsmOrders.GETRECORD(AsmHeader);
                                   Text := AsmHeader."No.";
                                   exit(true);
                                 end;
                                 exit(false);
                               end;
                           end;
                         END;

                ImplicitType=Code20 }

    { 55  ;2   ;Field     ;
                Name=IsCalculated;
                CaptionML=ENU=Calculated;
                ToolTipML=ENU=Specifies whether the demand overview has been calculated. The check box is selected after you choose the Calculate button.;
                ApplicationArea=#Advanced;
                SourceExpr=IsCalculated;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 1   ;1   ;Group     ;
                Name=Group1;
                IndentationColumnName=TypeIndent;
                IndentationControls=Type;
                ShowAsTree=true;
                GroupType=Repeater }

    { 6   ;2   ;Field     ;
                Name=Item No.;
                ToolTipML=ENU=Specifies the identifier number for the item.;
                ApplicationArea=#Advanced;
                SourceExpr="Item No.";
                Editable=FALSE;
                HideValue=ItemNoHideValue;
                Style=Strong;
                StyleExpr=ItemNoEmphasize;
                ImplicitType=Code20 }

    { 4   ;2   ;Field     ;
                Name=Matches Criteria;
                ToolTipML=ENU=Specifies whether the line in the Demand Overview window is related to the lines where the demand overview was calculated.;
                ApplicationArea=#Advanced;
                SourceExpr="Matches Criteria";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Boolean }

    { 8   ;2   ;Field     ;
                Name=Type;
                ToolTipML=ENU=Specifies the type of availability being calculated.;
                ApplicationArea=#Advanced;
                SourceExpr=Type;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=TypeEmphasize;
                ImplicitType=Option }

    { 10  ;2   ;Field     ;
                Name=Date;
                ToolTipML=ENU=Specifies the date of the availability calculation.;
                ApplicationArea=#Advanced;
                SourceExpr=Date;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=DateEmphasize;
                ImplicitType=Date }

    { 12  ;2   ;Field     ;
                Name=SourceTypeText;
                ApplicationArea=#Advanced;
                SourceExpr=SourceTypeText;
                CaptionClass=FIELDCAPTION("Source Type");
                Editable=FALSE;
                HideValue=SourceTypeHideValue;
                ImplicitType=Text1024 }

    { 14  ;2   ;Field     ;
                Name=Source Order Status;
                ToolTipML=ENU=Specifies the order status of the item for which availability is being calculated.;
                ApplicationArea=#Advanced;
                SourceExpr="Source Order Status";
                Visible=FALSE;
                Editable=FALSE;
                HideValue=SourceOrderStatusHideValue;
                ImplicitType=Integer }

    { 16  ;2   ;Field     ;
                Name=Source ID;
                ToolTipML=ENU=Specifies the identifier code of the source.;
                ApplicationArea=#Advanced;
                SourceExpr="Source ID";
                Visible=FALSE;
                Editable=FALSE;
                ImplicitType=Code20 }

    { 18  ;2   ;Field     ;
                Name=Description;
                ToolTipML=ENU=Specifies the description of the item for which availability is being calculated.;
                ApplicationArea=#Advanced;
                SourceExpr=Description;
                Editable=FALSE;
                Style=Strong;
                StyleExpr=DescriptionEmphasize;
                ImplicitType=Text50 }

    { 20  ;2   ;Field     ;
                Name=Location Code;
                ToolTipML=ENU=Specifies the location code of the item for which availability is being calculated.;
                ApplicationArea=#Advanced;
                SourceExpr="Location Code";
                Editable=FALSE;
                ImplicitType=Code10 }

    { 22  ;2   ;Field     ;
                Name=Variant Code;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Advanced;
                SourceExpr="Variant Code";
                Editable=FALSE;
                ImplicitType=Code10 }

    { 24  ;2   ;Field     ;
                Name=QuantityText;
                CaptionML=ENU=Quantity;
                ToolTipML=ENU=Specifies how many units of the item are demanded.;
                ApplicationArea=#Advanced;
                SourceExpr=QuantityText;
                CaptionClass=FIELDCAPTION(Quantity);
                Editable=FALSE;
                ImplicitType=Text1024 }

    { 2   ;2   ;Field     ;
                Name=ReservedQuantityText;
                CaptionML=ENU=Reserved Quantity;
                ToolTipML=ENU=Specifies how many units of the demanded item are reserved.;
                ApplicationArea=#Advanced;
                SourceExpr=ReservedQuantityText;
                CaptionClass=FIELDCAPTION("Reserved Quantity");
                Editable=FALSE;
                ImplicitType=Text1024 }

    { 26  ;2   ;Field     ;
                Name=Running Total;
                ToolTipML=ENU=Specifies the total count of items from inventory, supply, and demand.;
                ApplicationArea=#Advanced;
                SourceExpr="Running Total";
                CaptionClass=FIELDCAPTION("Running Total");
                Editable=FALSE;
                HideValue=RunningTotalHideValue;
                Style=Strong;
                StyleExpr=RunningTotalEmphasize;
                ImplicitType=Decimal }

    { 28  ;2   ;Field     ;
                Name=Inventory Running Total;
                ToolTipML=ENU=Specifies the count of items in inventory.;
                ApplicationArea=#Advanced;
                SourceExpr="Inventory Running Total";
                CaptionClass=FIELDCAPTION("Inventory Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=InventoryRunningTotalHideValue;
                Style=Strong;
                StyleExpr=InventoryRunningTotalEmphasize;
                ImplicitType=Decimal }

    { 30  ;2   ;Field     ;
                Name=Supply Running Total;
                ToolTipML=ENU=Specifies the count of items in supply.;
                ApplicationArea=#Advanced;
                SourceExpr="Supply Running Total";
                CaptionClass=FIELDCAPTION("Supply Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=SupplyRunningTotalHideValue;
                Style=Strong;
                StyleExpr=SupplyRunningTotalEmphasize;
                ImplicitType=Decimal }

    { 32  ;2   ;Field     ;
                Name=Demand Running Total;
                ToolTipML=ENU=Specifies the count of items in demand.;
                ApplicationArea=#Advanced;
                SourceExpr="Demand Running Total";
                CaptionClass=FIELDCAPTION("Demand Running Total");
                Visible=FALSE;
                Editable=FALSE;
                HideValue=DemandRunningTotalHideValue;
                Style=Strong;
                StyleExpr=DemandRunningTotalEmphasize;
                ImplicitType=Decimal }

    { 1907524401;1;Group  ;
                Name=Filters;
                CaptionML=ENU=Filters }

    { 70  ;2   ;Field     ;
                Name=ItemFilter;
                CaptionML=ENU=Item Filter;
                ToolTipML=ENU=Specifies the item number or a filter on the item numbers that you want to trace.;
                ApplicationArea=#Advanced;
                SourceExpr=ItemFilter;
                OnValidate=BEGIN
                             IsCalculated := false;
                           END;

                OnLookup=VAR
                           Item@1001 : Record Item;
                           ItemList@1000 : Page "Item List";
                         BEGIN
                           Item.SETRANGE(Type,Item.Type::Inventory);
                           ItemList.SETTABLEVIEW(Item);
                           ItemList.LOOKUPMODE := true;
                           if ItemList.RUNMODAL = ACTION::LookupOK then begin
                             ItemList.GETRECORD(Item);
                             Text := Item."No.";
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Code250 }

    { 38  ;2   ;Field     ;
                Name=LocationFilter;
                CaptionML=ENU=Location Filter;
                ToolTipML=ENU=Specifies the location you want to show item availability for.;
                ApplicationArea=#Advanced;
                SourceExpr=LocationFilter;
                OnValidate=BEGIN
                             IsCalculated := false;
                           END;

                OnLookup=VAR
                           Location@1001 : Record Location;
                           LocationList@1000 : Page "Location List";
                         BEGIN
                           LocationList.SETTABLEVIEW(Location);
                           LocationList.LOOKUPMODE := true;
                           if LocationList.RUNMODAL = ACTION::LookupOK then begin
                             LocationList.GETRECORD(Location);
                             Text := Location.Code;
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Code250 }

    { 49  ;2   ;Field     ;
                Name=VariantFilter;
                CaptionML=ENU=Variant Filter;
                ToolTipML=ENU=Specifies the variant code or a filter on the variant code that you want to trace.;
                ApplicationArea=#Advanced;
                SourceExpr=VariantFilter;
                OnValidate=BEGIN
                             IsCalculated := false;
                           END;

                OnLookup=VAR
                           ItemVariant@1001 : Record "Item Variant";
                           ItemVariants@1000 : Page "Item Variants";
                         BEGIN
                           ItemVariant.SETFILTER("Item No.",ItemFilter);
                           ItemVariants.SETTABLEVIEW(ItemVariant);
                           ItemVariants.LOOKUPMODE := true;
                           if ItemVariants.RUNMODAL = ACTION::LookupOK then begin
                             ItemVariants.GETRECORD(ItemVariant);
                             Text := ItemVariant.Code;
                             exit(true);
                           end;
                           exit(false);
                         END;

                ImplicitType=Code250 }

  }
  CODE
  {
    VAR
      TempAvailCalcOverview@1011 : TEMPORARY Record "Availability Calc. Overview";
      CalcAvailOverview@1010 : Codeunit "Calc. Availability Overview";
      ItemFilter@1008 : Code[250];
      LocationFilter@1007 : Code[250];
      VariantFilter@1006 : Code[250];
      StartDate@1005 : Date;
      EndDate@1004 : Date;
      DemandType@1003 : '" ",Sales,Production,Jobs,Services,Assembly';
      DemandNo@1002 : Code[20];
      IsCalculated@1001 : Boolean;
      MatchCriteria@1000 : Boolean;
      Text001@1026 : TextConst 'ENU=Sales';
      Text002@1025 : TextConst 'ENU=Production';
      Text003@1024 : TextConst 'ENU=Purchase';
      Text004@1023 : TextConst 'ENU=Inventory';
      Text005@1022 : TextConst 'ENU=Service';
      Text006@1021 : TextConst 'ENU=Job';
      Text007@1020 : TextConst 'ENU=Prod. Comp.';
      Text008@1019 : TextConst 'ENU=Transfer';
      Text009@1009 : TextConst 'ENU=Assembly';
      Text020@1018 : TextConst 'ENU=Expanding...\';
      Text021@1017 : TextConst 'ENU=Status    #1###################\';
      Text022@1016 : TextConst 'ENU=Setting Filters';
      Text023@1015 : TextConst 'ENU=Fetching Items';
      Text025@1013 : TextConst 'ENU=Fetching Specific Entries in Dates';
      Text026@1012 : TextConst 'ENU=Displaying results';
      DemandNoCtrlEnable@19038271 : Boolean INDATASET;
      ItemNoHideValue@19067338 : Boolean INDATASET;
      ItemNoEmphasize@19054492 : Boolean INDATASET;
      TypeEmphasize@19012868 : Boolean INDATASET;
      TypeIndent@19015277 : Integer INDATASET;
      SourceTypeHideValue@19007390 : Boolean INDATASET;
      SourceTypeText@19060780 : Text[1024] INDATASET;
      SourceOrderStatusHideValue@19072585 : Boolean INDATASET;
      DescriptionEmphasize@19010547 : Boolean INDATASET;
      QuantityText@19076211 : Text[1024] INDATASET;
      DateEmphasize@1027 : Boolean INDATASET;
      ReservedQuantityText@19044286 : Text[1024] INDATASET;
      RunningTotalHideValue@19007299 : Boolean INDATASET;
      RunningTotalEmphasize@19035876 : Boolean INDATASET;
      InventoryRunningTotalHideValue@19055310 : Boolean INDATASET;
      InventoryRunningTotalEmphasize@19021114 : Boolean INDATASET;
      SupplyRunningTotalHideValue@19048092 : Boolean INDATASET;
      SupplyRunningTotalEmphasize@19042436 : Boolean INDATASET;
      DemandRunningTotalHideValue@19075312 : Boolean INDATASET;
      DemandRunningTotalEmphasize@19012517 : Boolean INDATASET;
      CalculationOfDemand@1014 : Boolean;

    LOCAL PROCEDURE ApplyUserFilters@6(VAR AvailCalcOverview@1000 : Record "Availability Calc. Overview");
    BEGIN
      AvailCalcOverview.RESET;
      AvailCalcOverview.SETFILTER("Item No.",ItemFilter);
      if (StartDate <> 0D) or (EndDate <> 0D) then begin
        if EndDate <> 0D then
          AvailCalcOverview.SETRANGE(Date,StartDate,EndDate)
        else
          AvailCalcOverview.SETRANGE(Date,StartDate,DMY2DATE(31,12,9999));
      end;
      if LocationFilter <> '' then
        AvailCalcOverview.SETFILTER("Location Code",LocationFilter);
      if VariantFilter <> '' then
        AvailCalcOverview.SETFILTER("Variant Code",VariantFilter);
    END;

    [External]
    PROCEDURE InitTempTable@1();
    VAR
      AvailCalcOverviewFilters@1000 : Record "Availability Calc. Overview";
    BEGIN
      if not CalculationOfDemand then
        exit;
      AvailCalcOverviewFilters.COPY(Rec);
      ApplyUserFilters(TempAvailCalcOverview);
      CalcAvailOverview.SetParam(DemandType,DemandNo);
      CalcAvailOverview.RUN(TempAvailCalcOverview);
      TempAvailCalcOverview.RESET;
      RESET;
      DELETEALL;
      if TempAvailCalcOverview.FIND('-') then
        repeat
          if TempAvailCalcOverview.Level = 0 then begin
            Rec := TempAvailCalcOverview;
            INSERT;
          end;
        until TempAvailCalcOverview.NEXT = 0;
      COPYFILTERS(AvailCalcOverviewFilters);
      ExpandAll(TempAvailCalcOverview);
      COPY(AvailCalcOverviewFilters);
      if FIND('-') then;
      IsCalculated := true;
    END;

    LOCAL PROCEDURE ExpandAll@12(VAR AvailCalcOverview@1000 : Record "Availability Calc. Overview");
    VAR
      AvailCalcOverviewFilters@1001 : Record "Availability Calc. Overview";
      Window@1002 : Dialog;
    BEGIN
      Window.OPEN(Text020 + Text021);
      AvailCalcOverviewFilters.COPY(Rec);

      // Set Filters
      Window.UPDATE(1,Text022);
      AvailCalcOverview.RESET;
      AvailCalcOverview.DELETEALL;
      ApplyUserFilters(AvailCalcOverview);
      CalcAvailOverview.SetParam(DemandType,DemandNo);

      // Fetching Items
      Window.UPDATE(1,Text023);
      RESET;
      if FIND('+') then
        repeat
          if Type = Type::Item then begin
            AvailCalcOverview := Rec;
            if CalcAvailOverview.EntriesExist(AvailCalcOverview) then begin
              AvailCalcOverview.INSERT;
              CalcAvailOverview.CalculateItem(AvailCalcOverview);
            end;
          end;
        until NEXT(-1) = 0;

      // Fetch Entries in Dates
      Window.UPDATE(1,Text025);
      if AvailCalcOverview.FIND('+') then
        repeat
          Rec := AvailCalcOverview;
          if AvailCalcOverview.Type = Type::"As of Date" then
            CalcAvailOverview.CalculateDate(AvailCalcOverview);
          AvailCalcOverview := Rec;
        until AvailCalcOverview.NEXT(-1) = 0;

      // Copy to View Table
      Window.UPDATE(1,Text026);
      DELETEALL;
      if AvailCalcOverview.FIND('-') then
        repeat
          Rec := AvailCalcOverview;
          INSERT;
        until AvailCalcOverview.NEXT = 0;

      Window.CLOSE;
      COPY(AvailCalcOverviewFilters);
      if FIND('-') then;
    END;

    [External]
    PROCEDURE SetRecFilters@5();
    BEGIN
      RESET;
      SETCURRENTKEY("Item No.",Date,"Attached to Entry No.",Type);
      CurrPage.UPDATE(false);
    END;

    [External]
    PROCEDURE Initialize@2(NewStartDate@1000 : Date;NewDemandType@1001 : Integer;NewDemandNo@1002 : Code[20];NewItemNo@1003 : Code[20];NewLocationFilter@1004 : Code[250]);
    BEGIN
      StartDate := NewStartDate;
      DemandType := NewDemandType;
      DemandNo := NewDemandNo;
      ItemFilter := NewItemNo;
      LocationFilter := NewLocationFilter;
      MatchCriteria := true;
    END;

    LOCAL PROCEDURE SourceTypeTextOnFormat@19076639(VAR Text@19071319 : Text[1024]);
    BEGIN
      SourceTypeHideValue := false;
      case "Source Type" of
        DATABASE::"Sales Line":
          Text := Text001;
        DATABASE::"Service Line":
          Text := Text005;
        DATABASE::"Job Planning Line":
          Text := Text006;
        DATABASE::"Prod. Order Line":
          Text := Text002;
        DATABASE::"Prod. Order Component":
          Text := Text007;
        DATABASE::"Purchase Line":
          Text := Text003;
        DATABASE::"Item Ledger Entry":
          Text := Text004;
        DATABASE::"Transfer Line":
          Text := Text008;
        DATABASE::"Assembly Header",
        DATABASE::"Assembly Line":
          Text := Text009;
        else
          SourceTypeHideValue := true;
      end
    END;

    [External]
    PROCEDURE SetCalculationParameter@7(CalculateDemandParam@1000 : Boolean);
    BEGIN
      CalculationOfDemand := CalculateDemandParam;
    END;

    BEGIN
    END.
  }
}

