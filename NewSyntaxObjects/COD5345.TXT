OBJECT Codeunit 5345 Integration Rec. Synch. Invoke
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            CheckContext;
            SynchRecord(
              IntegrationTableMappingContext,SourceRecordRefContext,DestinationRecordRefContext,
              IntegrationRecordSynchContext,SynchActionContext,IgnoreSynchOnlyCoupledRecordsContext,
              JobIdContext,IntegrationTableConnectionTypeContext);
          END;

  }
  CODE
  {
    VAR
      IntegrationTableMappingContext@1015 : Record "Integration Table Mapping";
      IntegrationRecordSynchContext@1012 : Codeunit "Integration Record Synch.";
      SourceRecordRefContext@1014 : RecordRef;
      DestinationRecordRefContext@1013 : RecordRef;
      IntegrationTableConnectionTypeContext@1016 : TableConnectionType;
      JobIdContext@1009 : GUID;
      SynchActionType@1000 : 'None,Insert,Modify,ForceModify,IgnoreUnchanged,Fail,Skip';
      BothDestinationAndSourceIsNewerErr@1001 : TextConst '@@@="%1 = Source record table caption, %2 destination table caption";ENU=Cannot update the %2 record because both the %1 record and the %2 record have been changed.';
      DestinationRecordIsNewerThanSourceErr@1002 : TextConst '@@@="%1 = Source Table Caption, %2 = Destination Table Caption";ENU=Cannot update the %2 record because it has a later modified date than the %1 record.';
      InsertFailedErr@1004 : TextConst '@@@="%1 = Table Caption, %2 = Error from insert process.";ENU=Inserting %1 failed because of the following error: %2.';
      ModifyFailedErr@1003 : TextConst '@@@="%1 = Table Caption, %2 = Error from modify process.";ENU=Modifying %1 failed because of the following error: %2.';
      ConfigurationTemplateNotFoundErr@1005 : TextConst '@@@="%1 = Configuration Template table caption, %2 = Configuration Template Name";ENU=The %1 %2 was not found.';
      CoupledRecordIsDeletedErr@1006 : TextConst '@@@="1% = Source Table Caption";ENU=The %1 record cannot be updated because it is coupled to a deleted record.';
      CopyDataErr@1007 : TextConst '@@@="%1 = Error message from transferdata process.";ENU=The data could not be updated because of the following error: %1.';
      IntegrationRecordNotFoundErr@1008 : TextConst '@@@="%1 = Internationalized RecordID, such as ''Customer 1234''";ENU=The integration record for %1 was not found.';
      SynchActionContext@1011 : Option;
      IgnoreSynchOnlyCoupledRecordsContext@1010 : Boolean;
      IsContextInitialized@1017 : Boolean;
      ContextErr@1018 : TextConst 'ENU=The integration record synchronization context has not been initialized.';

    [External]
    PROCEDURE SetContext@4(IntegrationTableMapping@1006 : Record "Integration Table Mapping";SourceRecordRef@1005 : RecordRef;DestinationRecordRef@1004 : RecordRef;IntegrationRecordSynch@1010 : Codeunit "Integration Record Synch.";SynchAction@1007 : Option;IgnoreSynchOnlyCoupledRecords@1003 : Boolean;JobId@1008 : GUID;IntegrationTableConnectionType@1009 : TableConnectionType);
    BEGIN
      IntegrationTableMappingContext := IntegrationTableMapping;
      IntegrationRecordSynchContext := IntegrationRecordSynch;
      SourceRecordRefContext := SourceRecordRef;
      DestinationRecordRefContext := DestinationRecordRef;
      SynchActionContext := SynchAction;
      IgnoreSynchOnlyCoupledRecordsContext := IgnoreSynchOnlyCoupledRecords;
      IntegrationTableConnectionTypeContext := IntegrationTableConnectionType;
      JobIdContext := JobId;
      IsContextInitialized := true;
    END;

    [External]
    PROCEDURE GetContext@3(VAR IntegrationTableMapping@1006 : Record "Integration Table Mapping";VAR SourceRecordRef@1005 : RecordRef;VAR DestinationRecordRef@1004 : RecordRef;VAR IntegrationRecordSynch@1010 : Codeunit "Integration Record Synch.";VAR SynchAction@1000 : Option);
    BEGIN
      CheckContext;
      IntegrationTableMapping := IntegrationTableMappingContext;
      IntegrationRecordSynch := IntegrationRecordSynchContext;
      SourceRecordRef := SourceRecordRefContext;
      DestinationRecordRef := DestinationRecordRefContext;
      SynchAction := SynchActionContext;
    END;

    [Internal]
    PROCEDURE WasModifiedAfterLastSynch@36(IntegrationTableMapping@1000 : Record "Integration Table Mapping";RecordRef@1001 : RecordRef) : Boolean;
    VAR
      IntegrationRecordManagement@1003 : Codeunit "Integration Record Management";
      LastModifiedOn@1002 : DateTime;
    BEGIN
      LastModifiedOn := GetRowLastModifiedOn(IntegrationTableMapping,RecordRef);
      if IntegrationTableMapping."Integration Table ID" = RecordRef.NUMBER then
        exit(
          IntegrationRecordManagement.IsModifiedAfterIntegrationTableRecordLastSynch(
            IntegrationTableConnectionTypeContext,RecordRef.FIELD(IntegrationTableMapping."Integration Table UID Fld. No.").VALUE,
            IntegrationTableMapping."Table ID",LastModifiedOn));

      exit(
        IntegrationRecordManagement.IsModifiedAfterRecordLastSynch(
          IntegrationTableConnectionTypeContext,RecordRef.RECORDID,LastModifiedOn));
    END;

    [External]
    PROCEDURE GetRowLastModifiedOn@2(IntegrationTableMapping@1000 : Record "Integration Table Mapping";FromRecordRef@1001 : RecordRef) : DateTime;
    VAR
      IntegrationRecord@1002 : Record "Integration Record";
      ModifiedFieldRef@1004 : FieldRef;
    BEGIN
      if FromRecordRef.NUMBER = IntegrationTableMapping."Integration Table ID" then begin
        ModifiedFieldRef := FromRecordRef.FIELD(IntegrationTableMapping."Int. Tbl. Modified On Fld. No.");
        exit(ModifiedFieldRef.VALUE);
      end;

      if IntegrationRecord.FindByRecordId(FromRecordRef.RECORDID) then
        exit(IntegrationRecord."Modified On");
      ERROR(IntegrationRecordNotFoundErr,FORMAT(FromRecordRef.RECORDID,0,1));
    END;

    LOCAL PROCEDURE CheckContext@5();
    BEGIN
      if not IsContextInitialized then
        ERROR(ContextErr);
    END;

    LOCAL PROCEDURE SynchRecord@9(VAR IntegrationTableMapping@1006 : Record "Integration Table Mapping";VAR SourceRecordRef@1005 : RecordRef;VAR DestinationRecordRef@1004 : RecordRef;VAR IntegrationRecordSynch@1010 : Codeunit "Integration Record Synch.";VAR SynchAction@1007 : Option;IgnoreSynchOnlyCoupledRecords@1003 : Boolean;JobId@1008 : GUID;IntegrationTableConnectionType@1009 : TableConnectionType);
    VAR
      AdditionalFieldsModified@1000 : Boolean;
      SourceWasChanged@1001 : Boolean;
      WasModified@1011 : Boolean;
      ConflictText@1002 : Text;
      RecordState@1012 : 'NotFound,Coupled,Decoupled';
    BEGIN
      // Find the coupled record or prepare a new one
      RecordState :=
        GetCoupledRecord(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,SynchAction,JobId,IntegrationTableConnectionType);
      if RecordState = RecordState::NotFound then begin
        if SynchAction = SynchActionType::Fail then
          exit;
        if IntegrationTableMapping."Synch. Only Coupled Records" and not IgnoreSynchOnlyCoupledRecords then begin
          SynchAction := SynchActionType::Skip;
          exit;
        end;
        PrepareNewDestination(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
        SynchAction := SynchActionType::Insert;
      end;

      if SynchAction = SynchActionType::Insert then
        SourceWasChanged := true
      else begin
        SourceWasChanged := WasModifiedAfterLastSynch(IntegrationTableMapping,SourceRecordRef);
        ConflictText :=
          ChangedDestinationConflictsWithSource(
            IntegrationTableMapping,DestinationRecordRef,SourceWasChanged,SynchAction);
      end;

      if not (SynchAction in [SynchActionType::Insert,SynchActionType::Modify,SynchActionType::ForceModify]) then
        exit;

      if SourceWasChanged or (ConflictText <> '') or (SynchAction = SynchActionType::ForceModify) then
        TransferFields(
          IntegrationRecordSynch,SourceRecordRef,DestinationRecordRef,SynchAction,AdditionalFieldsModified,JobId,ConflictText <> '');

      WasModified := IntegrationRecordSynch.GetWasModified or AdditionalFieldsModified;
      if WasModified then
        if ConflictText <> '' then begin
          SynchAction := SynchActionType::Fail;
          LogSynchError(
            SourceRecordRef,DestinationRecordRef,
            STRSUBSTNO(ConflictText,SourceRecordRef.CAPTION,DestinationRecordRef.CAPTION),JobId);
          MarkIntegrationRecordAsFailed(IntegrationTableMapping,SourceRecordRef,JobId,IntegrationTableConnectionType);
          exit;
        end;
      if (SynchAction = SynchActionType::Modify) and (not WasModified) then
        SynchAction := SynchActionType::IgnoreUnchanged;

      case SynchAction of
        SynchActionType::Insert:
          InsertRecord(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,SynchAction,JobId,IntegrationTableConnectionType);
        SynchActionType::Modify,
        SynchActionType::ForceModify:
          ModifyRecord(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,SynchAction,JobId,IntegrationTableConnectionType);
        SynchActionType::IgnoreUnchanged:
          begin
            UpdateIntegrationRecordCoupling(
              IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
            OnAfterUnchangedRecordHandled(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
          end;
      end;
    END;

    LOCAL PROCEDURE InsertRecord@13(VAR IntegrationTableMapping@1010 : Record "Integration Table Mapping";VAR SourceRecordRef@1009 : RecordRef;VAR DestinationRecordRef@1008 : RecordRef;VAR SynchAction@1000 : Option;JobId@1002 : GUID;IntegrationTableConnectionType@1003 : TableConnectionType);
    VAR
      TextManagement@1001 : Codeunit TextManagement;
    BEGIN
      OnBeforeInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      if DestinationRecordRef.INSERT(true) then begin
        ApplyConfigTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,JobId,SynchAction);
        if SynchAction <> SynchActionType::Fail then begin
          UpdateIntegrationRecordCoupling(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
          OnAfterInsertRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
        end;
      end else begin
        OnErrorWhenInsertingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
        SynchAction := SynchActionType::Fail;
        LogSynchError(
          SourceRecordRef,DestinationRecordRef,
          STRSUBSTNO(InsertFailedErr,DestinationRecordRef.CAPTION,TextManagement.RemoveMessageTrailingDots(GETLASTERRORTEXT)),JobId);
      end;
      COMMIT;
    END;

    LOCAL PROCEDURE ModifyRecord@15(VAR IntegrationTableMapping@1009 : Record "Integration Table Mapping";VAR SourceRecordRef@1008 : RecordRef;VAR DestinationRecordRef@1007 : RecordRef;VAR SynchAction@1000 : Option;JobId@1002 : GUID;IntegrationTableConnectionType@1003 : TableConnectionType);
    VAR
      TextManagement@1001 : Codeunit TextManagement;
    BEGIN
      OnBeforeModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);

      if DestinationRecordRef.MODIFY(true) then begin
        UpdateIntegrationRecordCoupling(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobId);
        OnAfterModifyRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
      end else begin
        OnErrorWhenModifyingRecord(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
        SynchAction := SynchActionType::Fail;
        LogSynchError(
          SourceRecordRef,DestinationRecordRef,
          STRSUBSTNO(ModifyFailedErr,DestinationRecordRef.CAPTION,TextManagement.RemoveMessageTrailingDots(GETLASTERRORTEXT)),JobId);
        MarkIntegrationRecordAsFailed(IntegrationTableMapping,SourceRecordRef,JobId,IntegrationTableConnectionType);
      end;
      COMMIT;
    END;

    LOCAL PROCEDURE ApplyConfigTemplate@6(VAR IntegrationTableMapping@1004 : Record "Integration Table Mapping";VAR SourceRecordRef@1005 : RecordRef;VAR DestinationRecordRef@1000 : RecordRef;JobId@1006 : GUID;VAR SynchAction@1007 : Option);
    VAR
      ConfigTemplateHeader@1002 : Record "Config. Template Header";
      ConfigTemplateManagement@1003 : Codeunit "Config. Template Management";
      ConfigTemplateCode@1001 : Code[10];
    BEGIN
      if DestinationRecordRef.NUMBER = IntegrationTableMapping."Integration Table ID" then
        ConfigTemplateCode := IntegrationTableMapping."Int. Tbl. Config Template Code"
      else
        ConfigTemplateCode := IntegrationTableMapping."Table Config Template Code";
      if ConfigTemplateCode <> '' then begin
        OnBeforeApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,ConfigTemplateCode);

        if ConfigTemplateHeader.GET(ConfigTemplateCode) then begin
          ConfigTemplateManagement.UpdateRecord(ConfigTemplateHeader,DestinationRecordRef);

          OnAfterApplyRecordTemplate(IntegrationTableMapping,SourceRecordRef,DestinationRecordRef);
        end else begin
          SynchAction := SynchActionType::Fail;
          LogSynchError(
            SourceRecordRef,DestinationRecordRef,
            STRSUBSTNO(ConfigurationTemplateNotFoundErr,ConfigTemplateHeader.TABLECAPTION,ConfigTemplateCode),JobId);
        end;
      end;
    END;

    LOCAL PROCEDURE ChangedDestinationConflictsWithSource@1(IntegrationTableMapping@1002 : Record "Integration Table Mapping";DestinationRecordRef@1001 : RecordRef;SourceWasChanged@1003 : Boolean;SynchAction@1000 : Option) ConflictText : Text;
    VAR
      DestinationWasChanged@1004 : Boolean;
    BEGIN
      DestinationWasChanged := false;
      if IntegrationTableMapping.GetDirection = IntegrationTableMapping.Direction::Bidirectional then
        DestinationWasChanged := WasModifiedAfterLastSynch(IntegrationTableMapping,DestinationRecordRef);
      if DestinationWasChanged and (SynchAction <> SynchActionType::ForceModify) then
        if SourceWasChanged then
          ConflictText := BothDestinationAndSourceIsNewerErr
        else
          ConflictText := DestinationRecordIsNewerThanSourceErr;
    END;

    LOCAL PROCEDURE GetCoupledRecord@17(VAR IntegrationTableMapping@1002 : Record "Integration Table Mapping";VAR RecordRef@1001 : RecordRef;VAR CoupledRecordRef@1000 : RecordRef;VAR SynchAction@1003 : Option;JobId@1005 : GUID;IntegrationTableConnectionType@1006 : TableConnectionType) : Integer;
    VAR
      IsDestinationMarkedAsDeleted@1004 : Boolean;
      RecordState@1007 : 'NotFound,Coupled,Decoupled';
    BEGIN
      IsDestinationMarkedAsDeleted := false;
      RecordState :=
        FindRecord(
          IntegrationTableMapping,RecordRef,CoupledRecordRef,IsDestinationMarkedAsDeleted,IntegrationTableConnectionType);

      if RecordState <> RecordState::NotFound then
        if IsDestinationMarkedAsDeleted then begin
          RecordState := RecordState::NotFound;
          SynchAction := SynchActionType::Fail;
          LogSynchError(RecordRef,CoupledRecordRef,STRSUBSTNO(CoupledRecordIsDeletedErr,RecordRef.CAPTION),JobId);
        end else begin
          if RecordState = RecordState::Decoupled then
            SynchAction := SynchActionType::ForceModify;
          if SynchAction <> SynchActionType::ForceModify then
            SynchAction := SynchActionType::Modify;
        end;
      exit(RecordState);
    END;

    LOCAL PROCEDURE FindRecord@26(VAR IntegrationTableMapping@1003 : Record "Integration Table Mapping";VAR SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR IsDestinationDeleted@1000 : Boolean;IntegrationTableConnectionType@1007 : TableConnectionType) : Integer;
    VAR
      IntegrationRecordManagement@1004 : Codeunit "Integration Record Management";
      IDFieldRef@1006 : FieldRef;
      RecordIDValue@1005 : RecordID;
      RecordState@1008 : 'NotFound,Coupled,Decoupled';
      RecordFound@1009 : Boolean;
    BEGIN
      if SourceRecordRef.NUMBER = IntegrationTableMapping."Table ID" then // NAV -> Integration Table synch
        RecordFound :=
          FindIntegrationTableRecord(
            IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IsDestinationDeleted,IntegrationTableConnectionType)
      else begin  // Integration Table -> NAV synch
        IDFieldRef := SourceRecordRef.FIELD(IntegrationTableMapping."Integration Table UID Fld. No.");
        RecordFound :=
          IntegrationRecordManagement.FindRecordIdByIntegrationTableUid(
            IntegrationTableConnectionType,IDFieldRef.VALUE,IntegrationTableMapping."Table ID",RecordIDValue);
        if RecordFound then
          IsDestinationDeleted := not DestinationRecordRef.GET(RecordIDValue);
      end;
      if RecordFound then
        exit(RecordState::Coupled);

      // If no explicit coupling is found, attempt to find a match based on user data
      if FindAndCoupleDestinationRecord(
           IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IsDestinationDeleted,IntegrationTableConnectionType)
      then
        exit(RecordState::Decoupled);
      exit(RecordState::NotFound);
    END;

    LOCAL PROCEDURE FindAndCoupleDestinationRecord@43(IntegrationTableMapping@1004 : Record "Integration Table Mapping";SourceRecordRef@1003 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef;VAR DestinationIsDeleted@1001 : Boolean;IntegrationTableConnectionType@1005 : TableConnectionType) DestinationFound : Boolean;
    BEGIN
      OnFindUncoupledDestinationRecord(
        IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,DestinationIsDeleted,DestinationFound);
      if DestinationFound then
        UpdateIntegrationRecordCoupling(
          IntegrationTableMapping,SourceRecordRef,DestinationRecordRef,IntegrationTableConnectionType,JobIdContext);
    END;

    LOCAL PROCEDURE FindIntegrationTableRecord@25(IntegrationTableMapping@1003 : Record "Integration Table Mapping";VAR SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR IsDestinationDeleted@1000 : Boolean;IntegrationTableConnectionType@1005 : TableConnectionType) FoundDestination : Boolean;
    VAR
      IntegrationRecordManagement@1004 : Codeunit "Integration Record Management";
      IDValue@1006 : Variant;
    BEGIN
      FoundDestination :=
        IntegrationRecordManagement.FindIntegrationTableUIdByRecordId(IntegrationTableConnectionType,SourceRecordRef.RECORDID,IDValue);

      if FoundDestination then
        IsDestinationDeleted := not IntegrationTableMapping.GetRecordRef(IDValue,DestinationRecordRef);
    END;

    LOCAL PROCEDURE PrepareNewDestination@44(VAR IntegrationTableMapping@1003 : Record "Integration Table Mapping";VAR RecordRef@1002 : RecordRef;VAR CoupledRecordRef@1001 : RecordRef);
    BEGIN
      CoupledRecordRef.CLOSE;

      if RecordRef.NUMBER = IntegrationTableMapping."Table ID" then
        CoupledRecordRef.OPEN(IntegrationTableMapping."Integration Table ID")
      else
        CoupledRecordRef.OPEN(IntegrationTableMapping."Table ID");

      CoupledRecordRef.INIT;
    END;

    LOCAL PROCEDURE LogSynchError@30(VAR SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;ErrorMessage@1002 : Text;JobId@1005 : GUID);
    VAR
      IntegrationSynchJobErrors@1003 : Record "Integration Synch. Job Errors";
      EmptyRecordID@1004 : RecordID;
    BEGIN
      if DestinationRecordRef.NUMBER = 0 then begin
        EmptyRecordID := SourceRecordRef.RECORDID;
        CLEAR(EmptyRecordID);
        IntegrationSynchJobErrors.LogSynchError(JobId,SourceRecordRef.RECORDID,EmptyRecordID,ErrorMessage)
      end else begin
        IntegrationSynchJobErrors.LogSynchError(JobId,SourceRecordRef.RECORDID,DestinationRecordRef.RECORDID,ErrorMessage);

        // Close destination - it is in error state and can no longer be used.
        DestinationRecordRef.CLOSE;
      end;
    END;

    LOCAL PROCEDURE TransferFields@16(VAR IntegrationRecordSynch@1003 : Codeunit "Integration Record Synch.";VAR SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR SynchAction@1002 : Option;VAR AdditionalFieldsModified@1006 : Boolean;JobId@1005 : GUID;ConflictFound@1007 : Boolean);
    VAR
      TextManagement@1004 : Codeunit TextManagement;
    BEGIN
      OnBeforeTransferRecordFields(SourceRecordRef,DestinationRecordRef);

      IntegrationRecordSynch.SetParameters(SourceRecordRef,DestinationRecordRef,SynchAction <> SynchActionType::Insert);
      if IntegrationRecordSynch.RUN then begin
        if ConflictFound and IntegrationRecordSynch.GetWasModified then
          exit;
        OnAfterTransferRecordFields(SourceRecordRef,DestinationRecordRef,
          AdditionalFieldsModified,SynchAction <> SynchActionType::Insert);
        AdditionalFieldsModified := AdditionalFieldsModified or IntegrationRecordSynch.GetWasModified;
      end else begin
        SynchAction := SynchActionType::Fail;
        LogSynchError(
          SourceRecordRef,DestinationRecordRef,
          STRSUBSTNO(CopyDataErr,TextManagement.RemoveMessageTrailingDots(GETLASTERRORTEXT)),JobId);
        COMMIT;
      end;
    END;

    PROCEDURE MarkIntegrationRecordAsFailed@8(IntegrationTableMapping@1003 : Record "Integration Table Mapping";SourceRecordRef@1002 : RecordRef;JobId@1000 : GUID;IntegrationTableConnectionType@1006 : TableConnectionType);
    VAR
      IntegrationManagement@1004 : Codeunit "Integration Management";
      IntegrationRecordManagement@1005 : Codeunit "Integration Record Management";
      DirectionToIntTable@1007 : Boolean;
    BEGIN
      if IntegrationManagement.IsIntegrationRecordChild(IntegrationTableMapping."Table ID") then
        exit;
      DirectionToIntTable := IntegrationTableMapping.Direction = IntegrationTableMapping.Direction::ToIntegrationTable;
      IntegrationRecordManagement.MarkLastSynchAsFailure(IntegrationTableConnectionType,SourceRecordRef,DirectionToIntTable,JobId);
    END;

    LOCAL PROCEDURE UpdateIntegrationRecordCoupling@24(VAR IntegrationTableMapping@1006 : Record "Integration Table Mapping";VAR SourceRecordRef@1000 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;IntegrationTableConnectionType@1008 : TableConnectionType;JobID@1011 : GUID);
    VAR
      IntegrationRecordManagement@1002 : Codeunit "Integration Record Management";
      IntegrationManagement@1007 : Codeunit "Integration Management";
      RecordId@1003 : RecordID;
      IntegrationTableUidFieldRef@1005 : FieldRef;
      IntegrationTableUid@1004 : Variant;
      IntegrationTableModifiedOn@1009 : DateTime;
      ModifiedOn@1010 : DateTime;
    BEGIN
      if IntegrationManagement.IsIntegrationRecordChild(IntegrationTableMapping."Table ID") then
        exit;
      if DestinationRecordRef.NUMBER = IntegrationTableMapping."Integration Table ID" then begin
        RecordId := SourceRecordRef.RECORDID;
        IntegrationTableUidFieldRef := DestinationRecordRef.FIELD(IntegrationTableMapping."Integration Table UID Fld. No.");
        IntegrationTableUid := IntegrationTableUidFieldRef.VALUE;
        IntegrationTableModifiedOn := GetRowLastModifiedOn(IntegrationTableMapping,DestinationRecordRef);
        ModifiedOn := GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
      end else begin
        RecordId := DestinationRecordRef.RECORDID;
        IntegrationTableUidFieldRef := SourceRecordRef.FIELD(IntegrationTableMapping."Integration Table UID Fld. No.");
        IntegrationTableUid := IntegrationTableUidFieldRef.VALUE;
        IntegrationTableModifiedOn := GetRowLastModifiedOn(IntegrationTableMapping,SourceRecordRef);
        ModifiedOn := GetRowLastModifiedOn(IntegrationTableMapping,DestinationRecordRef);
      end;

      IntegrationRecordManagement.UpdateIntegrationTableCoupling(
        IntegrationTableConnectionType,IntegrationTableUid,IntegrationTableModifiedOn,
        RecordId,ModifiedOn,JobID,IntegrationTableMapping.Direction);
      COMMIT;
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeTransferRecordFields@10(SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterTransferRecordFields@21(VAR SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR AdditionalFieldsWereModified@1000 : Boolean;DestinationIsInserted@1003 : Boolean);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeModifyRecord@27(IntegrationTableMapping@1003 : Record "Integration Table Mapping";SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterModifyRecord@28(IntegrationTableMapping@1003 : Record "Integration Table Mapping";VAR SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnErrorWhenModifyingRecord@12(IntegrationTableMapping@1002 : Record "Integration Table Mapping";VAR SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeInsertRecord@29(IntegrationTableMapping@1003 : Record "Integration Table Mapping";SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterInsertRecord@31(IntegrationTableMapping@1003 : Record "Integration Table Mapping";VAR SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnErrorWhenInsertingRecord@11(IntegrationTableMapping@1002 : Record "Integration Table Mapping";VAR SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterUnchangedRecordHandled@7(IntegrationTableMapping@1002 : Record "Integration Table Mapping";SourceRecordRef@1001 : RecordRef;DestinationRecordRef@1000 : RecordRef);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnBeforeApplyRecordTemplate@32(IntegrationTableMapping@1003 : Record "Integration Table Mapping";SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef;VAR TemplateCode@1000 : Code[10]);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnAfterApplyRecordTemplate@33(IntegrationTableMapping@1003 : Record "Integration Table Mapping";SourceRecordRef@1002 : RecordRef;VAR DestinationRecordRef@1001 : RecordRef);
    BEGIN
    END;

    [Integration]
    [External]
    LOCAL PROCEDURE OnFindUncoupledDestinationRecord@20(IntegrationTableMapping@1000 : Record "Integration Table Mapping";SourceRecordRef@1001 : RecordRef;VAR DestinationRecordRef@1002 : RecordRef;VAR DestinationIsDeleted@1003 : Boolean;VAR DestinationFound@1004 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

