OBJECT Codeunit 7380 Phys. Invt. Count.-Management
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=VAR
            Item@1003 : Record Item;
            SKU@1002 : Record "Stockkeeping Unit";
          BEGIN
            with Item do begin
              SETFILTER("Phys Invt Counting Period Code",'<>''''');
              SETFILTER("Next Counting Start Date",'<>%1',0D);
              SETFILTER("Next Counting End Date",'<>%1',0D);
              if FIND('-') then
                repeat
                  if ("Last Counting Period Update" < "Next Counting Start Date") and
                     (WORKDATE >= "Next Counting Start Date")
                  then
                    InsertTempPhysCountBuffer(
                      "No.",'','',"Shelf No.","Phys Invt Counting Period Code",
                      Description,"Next Counting Start Date","Next Counting End Date","Last Counting Period Update",1);

                until NEXT = 0;
            end;

            with SKU do begin
              SETFILTER("Phys Invt Counting Period Code",'<>''''');
              SETFILTER("Next Counting Start Date",'<>%1',0D);
              SETFILTER("Next Counting End Date",'<>%1',0D);
              if SourceJnl = SourceJnl::WhseJnl then
                SETRANGE("Location Code",WhseJnlLine."Location Code");
              if FIND('-') then
                repeat
                  if ("Last Counting Period Update" < "Next Counting Start Date") and
                     (WORKDATE >= "Next Counting Start Date")
                  then
                    InsertTempPhysCountBuffer(
                      "Item No.","Variant Code","Location Code",
                      "Shelf No.","Phys Invt Counting Period Code",Description,
                      "Next Counting Start Date","Next Counting End Date","Last Counting Period Update",2);

                until NEXT = 0;
            end;

            if PAGE.RUNMODAL(
                 PAGE::"Phys. Invt. Item Selection",TempPhysInvtItemSel) <> ACTION::LookupOK
            then
              exit;

            TempPhysInvtItemSel.SETRANGE(Selected,true);
            if TempPhysInvtItemSel.FIND('-') then begin
              if SourceJnl = SourceJnl::ItemJnl then
                CreatePhysInvtItemJnl
              else
                CreatePhysInvtWhseJnl;
            end;
          END;

  }
  CODE
  {
    VAR
      TempPhysInvtItemSel@1000 : TEMPORARY Record "Phys. Invt. Item Selection";
      PhysInvtCount@1007 : Record "Phys. Invt. Counting Period";
      ItemJnlLine@1002 : Record "Item Journal Line";
      WhseJnlLine@1003 : Record "Warehouse Journal Line";
      TempItem@1013 : TEMPORARY Record Item;
      TempSKU@1014 : TEMPORARY Record "Stockkeeping Unit";
      SourceJnl@1001 : 'ItemJnl,WhseJnl';
      Text000@1008 : TextConst 'ENU=Processing items    #1##########';
      SortingMethod@1010 : '" ",Item,Bin';
      Text001@1009 : TextConst 'ENU=Do you want to update the Next Counting Period of the %1?';
      Text002@1011 : TextConst 'ENU=Cancelled.';
      HideValidationDialog@1012 : Boolean;

    LOCAL PROCEDURE InsertTempPhysCountBuffer@3(ItemNo@1000 : Code[20];VariantCode@1001 : Code[10];LocationCode@1002 : Code[10];ShelfBin@1007 : Code[10];PhysInvtCountCode@1003 : Code[10];Description@1004 : Text[50];CountingPeriodStartDate@1005 : Date;CountingPeriodEndDate@1009 : Date;LastCountDate@1006 : Date;SourceType@1008 : 'Item,SKU');
    BEGIN
      TempPhysInvtItemSel.INIT;
      TempPhysInvtItemSel."Item No." := ItemNo;
      TempPhysInvtItemSel."Variant Code" := VariantCode;
      TempPhysInvtItemSel."Location Code" := LocationCode;
      TempPhysInvtItemSel."Phys Invt Counting Period Code" := PhysInvtCountCode;
      TempPhysInvtItemSel."Phys Invt Counting Period Type" := SourceType;
      TempPhysInvtItemSel."Shelf No." := ShelfBin;
      TempPhysInvtItemSel."Last Counting Date" := LastCountDate;
      TempPhysInvtItemSel."Next Counting Start Date" := CountingPeriodStartDate;
      TempPhysInvtItemSel."Next Counting End Date" := CountingPeriodEndDate;
      GetPhysInvtCount(PhysInvtCountCode);
      TempPhysInvtItemSel."Count Frequency per Year" :=
        PhysInvtCount."Count Frequency per Year";
      TempPhysInvtItemSel.Description := Description;
      if TempPhysInvtItemSel.INSERT then;
    END;

    LOCAL PROCEDURE CreatePhysInvtItemJnl@6();
    VAR
      Item@1008 : Record Item;
      ItemJnlBatch@1009 : Record "Item Journal Batch";
      PhysInvtCountRep@1002 : Report "Calculate Phys. Invt. Counting";
      CalcQtyOnHand@1001 : Report "Calculate Inventory";
      PhysInvtList@1000 : Report "Phys. Inventory List";
      Window@1007 : Dialog;
      PostingDate@1006 : Date;
      DocNo@1004 : Code[20];
      PrintDoc@1005 : Boolean;
      PrintDocPerItem@1011 : Boolean;
      ZeroQty@1003 : Boolean;
      PrintQtyCalculated@1010 : Boolean;
    BEGIN
      ItemJnlBatch.GET(
        ItemJnlLine."Journal Template Name",ItemJnlLine."Journal Batch Name");
      PhysInvtCountRep.SetItemJnlLine(ItemJnlBatch);
      PhysInvtCountRep.RUNMODAL;

      if PhysInvtCountRep.GetRequest(
           PostingDate,DocNo,SortingMethod,PrintDoc,PrintDocPerItem,ZeroQty,PrintQtyCalculated)
      then begin
        Window.OPEN(Text000,TempPhysInvtItemSel."Item No.");
        repeat
          Window.UPDATE;
          CalcQtyOnHand.SetSkipDim(true);
          CalcQtyOnHand.InitializeRequest(PostingDate,DocNo,ZeroQty);
          CalcQtyOnHand.SetItemJnlLine(ItemJnlLine);
          CalcQtyOnHand.InitializePhysInvtCount(
            TempPhysInvtItemSel."Phys Invt Counting Period Code",
            TempPhysInvtItemSel."Phys Invt Counting Period Type");
          CalcQtyOnHand.USEREQUESTPAGE(false);
          CalcQtyOnHand.SetHideValidationDialog(true);
          Item.SETRANGE("No.",TempPhysInvtItemSel."Item No.");
          if TempPhysInvtItemSel."Phys Invt Counting Period Type" =
             TempPhysInvtItemSel."Phys Invt Counting Period Type"::SKU
          then begin
            Item.SETRANGE("Variant Filter",TempPhysInvtItemSel."Variant Code");
            Item.SETRANGE("Location Filter",TempPhysInvtItemSel."Location Code");
          end;
          CalcQtyOnHand.SETTABLEVIEW(Item);
          CalcQtyOnHand.RUNMODAL;
          CLEAR(CalcQtyOnHand);
        until TempPhysInvtItemSel.NEXT = 0;
        Window.CLOSE;

        if PrintDoc then begin
          if not PrintDocPerItem then begin
            ItemJnlBatch.SETRECFILTER;
            ItemJnlLine.SETRANGE(
              "Journal Template Name",ItemJnlLine."Journal Template Name");
            ItemJnlLine.SETRANGE(
              "Journal Batch Name",ItemJnlLine."Journal Batch Name");
            PhysInvtList.USEREQUESTPAGE(false);
            PhysInvtList.Initialize(PrintQtyCalculated);
            PhysInvtList.SETTABLEVIEW(ItemJnlBatch);
            PhysInvtList.SETTABLEVIEW(ItemJnlLine);
            PhysInvtList.RUN;
          end else begin
            TempPhysInvtItemSel.FIND('-');
            repeat
              ItemJnlBatch.SETRECFILTER;
              PhysInvtList.SETTABLEVIEW(ItemJnlBatch);
              ItemJnlLine.SETRANGE(
                "Journal Template Name",ItemJnlLine."Journal Template Name");
              ItemJnlLine.SETRANGE(
                "Journal Batch Name",ItemJnlLine."Journal Batch Name");
              ItemJnlLine.SETRANGE("Item No.",TempPhysInvtItemSel."Item No.");
              PhysInvtList.USEREQUESTPAGE(false);
              PhysInvtList.Initialize(PrintQtyCalculated);
              PhysInvtList.SETTABLEVIEW(ItemJnlLine);
              PhysInvtList.RUN;
              TempPhysInvtItemSel.SETRANGE("Item No.",
                TempPhysInvtItemSel."Item No.");
              TempPhysInvtItemSel.FIND('+');
              TempPhysInvtItemSel.SETRANGE("Item No.");
            until TempPhysInvtItemSel.NEXT = 0;
          end;
          CLEAR(PhysInvtList);
        end;
      end;
    END;

    LOCAL PROCEDURE CreatePhysInvtWhseJnl@13();
    VAR
      BinContent@1008 : Record "Bin Content";
      WhseJnlBatch@1009 : Record "Warehouse Journal Batch";
      PhysInvtCountRep@1002 : Report "Calculate Phys. Invt. Counting";
      CalcWhseQtyOnHand@1001 : Report "Whse. Calculate Inventory";
      WhsePhysInvtList@1000 : Report "Whse. Phys. Inventory List";
      Window@1007 : Dialog;
      PostingDate@1006 : Date;
      DocNo@1004 : Code[20];
      PrintDoc@1012 : Boolean;
      PrintDocPerItem@1011 : Boolean;
      ZeroQty@1003 : Boolean;
      PrintQtyCalculated@1010 : Boolean;
    BEGIN
      WhseJnlBatch.GET(
        WhseJnlLine."Journal Template Name",WhseJnlLine."Journal Batch Name",WhseJnlLine."Location Code");
      PhysInvtCountRep.SetWhseJnlLine(WhseJnlBatch);
      PhysInvtCountRep.RUNMODAL;

      if PhysInvtCountRep.GetRequest(
           PostingDate,DocNo,SortingMethod,PrintDoc,PrintDocPerItem,ZeroQty,PrintQtyCalculated)
      then begin
        Window.OPEN(Text000,TempPhysInvtItemSel."Item No.");
        repeat
          Window.UPDATE;
          CalcWhseQtyOnHand.InitializeRequest(PostingDate,DocNo,ZeroQty);

          CalcWhseQtyOnHand.InitializePhysInvtCount(
            TempPhysInvtItemSel."Phys Invt Counting Period Code",
            TempPhysInvtItemSel."Phys Invt Counting Period Type");
          CalcWhseQtyOnHand.SetWhseJnlLine(WhseJnlLine);
          CalcWhseQtyOnHand.USEREQUESTPAGE(false);
          CalcWhseQtyOnHand.SetHideValidationDialog(true);
          BinContent.SETRANGE("Location Code",TempPhysInvtItemSel."Location Code");
          BinContent.SETRANGE("Item No.",TempPhysInvtItemSel."Item No.");
          if TempPhysInvtItemSel."Phys Invt Counting Period Type" =
             TempPhysInvtItemSel."Phys Invt Counting Period Type"::SKU
          then
            BinContent.SETRANGE("Variant Code",TempPhysInvtItemSel."Variant Code");
          CalcWhseQtyOnHand.SETTABLEVIEW(BinContent);
          CalcWhseQtyOnHand.RUNMODAL;
          CLEAR(CalcWhseQtyOnHand);
        until TempPhysInvtItemSel.NEXT = 0;
        Window.CLOSE;

        if PrintDoc then begin
          if not PrintDocPerItem then begin
            WhseJnlBatch.SETRECFILTER;
            case SortingMethod of
              SortingMethod::Item:
                WhseJnlLine.SETCURRENTKEY("Location Code","Item No.","Variant Code");
              SortingMethod::Bin:
                WhseJnlLine.SETCURRENTKEY("Location Code","Bin Code");
            end;
            WhseJnlLine.SETRANGE(
              "Journal Template Name",WhseJnlLine."Journal Template Name");
            WhseJnlLine.SETRANGE(
              "Journal Batch Name",WhseJnlLine."Journal Batch Name");
            WhseJnlLine.SETRANGE(
              "Journal Template Name",WhseJnlLine."Journal Template Name");
            WhseJnlLine.SETRANGE(
              "Journal Batch Name",WhseJnlLine."Journal Batch Name");
            WhseJnlLine.SETRANGE("Location Code",WhseJnlBatch."Location Code");
            WhsePhysInvtList.USEREQUESTPAGE(false);
            WhsePhysInvtList.Initialize(PrintQtyCalculated);
            WhsePhysInvtList.SETTABLEVIEW(WhseJnlBatch);
            WhsePhysInvtList.SETTABLEVIEW(WhseJnlLine);
            WhsePhysInvtList.RUN;
          end else begin
            TempPhysInvtItemSel.FIND('-');
            repeat
              WhseJnlBatch.SETRECFILTER;
              case SortingMethod of
                SortingMethod::Item:
                  WhseJnlLine.SETCURRENTKEY("Location Code","Item No.","Variant Code");
                SortingMethod::Bin:
                  WhseJnlLine.SETCURRENTKEY("Location Code","Bin Code");
              end;
              WhseJnlLine.SETRANGE(
                "Journal Template Name",WhseJnlLine."Journal Template Name");
              WhseJnlLine.SETRANGE(
                "Journal Batch Name",WhseJnlLine."Journal Batch Name");
              WhseJnlLine.SETRANGE("Item No.",TempPhysInvtItemSel."Item No.");
              WhseJnlLine.SETRANGE("Location Code",TempPhysInvtItemSel."Location Code");
              WhsePhysInvtList.USEREQUESTPAGE(false);
              WhsePhysInvtList.Initialize(PrintQtyCalculated);
              WhsePhysInvtList.SETTABLEVIEW(WhseJnlBatch);
              WhsePhysInvtList.SETTABLEVIEW(WhseJnlLine);
              WhsePhysInvtList.RUN;
              TempPhysInvtItemSel.SETRANGE("Item No.",
                TempPhysInvtItemSel."Item No.");
              TempPhysInvtItemSel.FIND('+');
              TempPhysInvtItemSel.SETRANGE("Item No.");
            until TempPhysInvtItemSel.NEXT = 0;
          end;
          CLEAR(WhsePhysInvtList);
        end;
      end;
    END;

    [External]
    PROCEDURE CalcPeriod@1(LastDate@1004 : Date;VAR NextCountingStartDate@1005 : Date;VAR NextCountingEndDate@1001 : Date;CountFrequency@1002 : Integer);
    VAR
      Calendar@1013 : Record Date;
      LastCountDate@1003 : Date;
      YearEndDate@1007 : Date;
      StartDate@1012 : Date;
      EndDate@1011 : Date;
      Periods@1014 : ARRAY [4] OF Date;
      Days@1000 : Decimal;
      i@1010 : Integer;
    BEGIN
      if LastDate = 0D then
        LastCountDate := WORKDATE
      else
        LastCountDate := LastDate;

      i := DATE2DMY(WORKDATE,3);
      Calendar.RESET;
      Calendar.SETRANGE("Period Type",Calendar."Period Type"::Year);
      Calendar.SETRANGE("Period No.",i);
      Calendar.FIND('-');
      StartDate := Calendar."Period Start";
      YearEndDate := NORMALDATE(Calendar."Period End");

      case CountFrequency of
        1,2,3,4,6,12:
          begin
            FindCurrentPhysInventoryPeriod(Calendar,StartDate,EndDate,LastCountDate,CountFrequency);
            if LastDate <> 0D then begin
              Calendar.NEXT(12 / CountFrequency);
              StartDate := EndDate + 1;
              EndDate := NORMALDATE(Calendar."Period Start") - 1;
            end;
            NextCountingStartDate := StartDate;
            NextCountingEndDate := EndDate;
          end;
        24:
          begin
            FindCurrentPhysInventoryPeriod(Calendar,StartDate,EndDate,LastCountDate,12);
            Days := (EndDate - StartDate + 1) div 2; // number of days in half a month
            Periods[1] := StartDate;
            Periods[2] := StartDate + Days;
            Calendar.NEXT;
            StartDate := EndDate + 1;
            EndDate := NORMALDATE(Calendar."Period Start") - 1;
            Days := (EndDate - StartDate + 1) div 2;
            Periods[3] := StartDate;
            Periods[4] := StartDate + Days;
            i := 0;
            repeat
              i += 1;
            until (LastCountDate >= Periods[i]) and (LastCountDate <= (Periods[i + 1] - 1));
            if LastDate <> 0D then
              i += 1;
            NextCountingStartDate := Periods[i];
            NextCountingEndDate := Periods[i + 1] - 1;
          end;
        else begin
          Calendar.RESET;
          Calendar.SETRANGE("Period Type",Calendar."Period Type"::Date);
          Calendar.SETRANGE("Period Start",StartDate,YearEndDate);
          Calendar.SETRANGE("Period No.");
          Days := (Calendar.COUNT div CountFrequency);
          if NextCountingStartDate <> 0D then begin
            if LastCountDate < NextCountingStartDate then
              exit;
            StartDate := NextCountingStartDate;
            EndDate := NextCountingEndDate;
            while LastCountDate >= StartDate do begin
              StartDate := EndDate + 1;
              EndDate := CALCDATE('<+' + FORMAT(Days) + 'D>',StartDate);
            end;
          end;

          if LastDate = 0D then
            NextCountingStartDate := CALCDATE('<+' + FORMAT(Days) + 'D>',LastCountDate)
          else
            NextCountingStartDate := StartDate;
          NextCountingEndDate := CALCDATE('<+' + FORMAT(Days) + 'D>',NextCountingStartDate);
        end;
      end;
    END;

    LOCAL PROCEDURE GetPhysInvtCount@5(PhysInvtCountCode@1000 : Code[10]);
    BEGIN
      if PhysInvtCount.Code <> PhysInvtCountCode then
        PhysInvtCount.GET(PhysInvtCountCode);
    END;

    [External]
    PROCEDURE InitFromItemJnl@2(ItemJnlLine2@1000 : Record "Item Journal Line");
    BEGIN
      ItemJnlLine := ItemJnlLine2;
      SourceJnl := SourceJnl::ItemJnl;
    END;

    [External]
    PROCEDURE InitFromWhseJnl@4(WhseJnlLine2@1000 : Record "Warehouse Journal Line");
    BEGIN
      WhseJnlLine := WhseJnlLine2;
      SourceJnl := SourceJnl::WhseJnl;
    END;

    [External]
    PROCEDURE GetSortingMethod@8(VAR SortingMethod2@1000 : '" ",Item,Bin');
    BEGIN
      SortingMethod2 := SortingMethod;
    END;

    [External]
    PROCEDURE UpdateSKUPhysInvtCount@12(VAR SKU@1000 : Record "Stockkeeping Unit");
    BEGIN
      with SKU do begin
        if (not MARKEDONLY) and (GETFILTERS = '') then
          SETRECFILTER;

        FINDSET;
        repeat
          TESTFIELD("Phys Invt Counting Period Code");
        until NEXT = 0;

        if not HideValidationDialog then
          if not CONFIRM(Text001,false,TABLECAPTION) then
            ERROR(Text002);

        FINDSET;
        repeat
          GetPhysInvtCount("Phys Invt Counting Period Code");
          PhysInvtCount.TESTFIELD("Count Frequency per Year");
          "Last Counting Period Update" := WORKDATE;
          CalcPeriod(
            "Last Counting Period Update","Next Counting Start Date","Next Counting End Date",
            PhysInvtCount."Count Frequency per Year");
          MODIFY;
        until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE UpdateItemPhysInvtCount@7(VAR Item@1000 : Record Item);
    BEGIN
      with Item do begin
        if (not MARKEDONLY) and (GETFILTERS = '') then
          SETRECFILTER;

        FINDSET;
        repeat
          TESTFIELD("Phys Invt Counting Period Code");
        until NEXT = 0;

        if not HideValidationDialog then
          if not CONFIRM(Text001,false,TABLECAPTION) then
            ERROR(Text002);

        FINDSET;
        repeat
          GetPhysInvtCount("Phys Invt Counting Period Code");
          PhysInvtCount.TESTFIELD("Count Frequency per Year");
          "Last Counting Period Update" := WORKDATE;
          CalcPeriod(
            "Last Counting Period Update","Next Counting Start Date","Next Counting End Date",
            PhysInvtCount."Count Frequency per Year");
          MODIFY;
        until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE UpdateItemSKUListPhysInvtCount@15();
    VAR
      Item@1000 : Record Item;
      SKU@1001 : Record "Stockkeeping Unit";
    BEGIN
      with TempItem do begin
        if FINDSET then
          repeat
            Item.RESET;
            Item.GET("No.");
            UpdateItemPhysInvtCount(Item);
          until NEXT = 0;
      end;

      with TempSKU do begin
        if FINDSET then
          repeat
            SKU.RESET;
            SKU.GET("Location Code","Item No.","Variant Code");
            UpdateSKUPhysInvtCount(SKU);
          until NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE AddToTempItemSKUList@9(ItemNo@1000 : Code[20];LocationCode@1004 : Code[10];VariantCode@1005 : Code[10];PhysInvtCountingPeriodType@1003 : '" ",Item,SKU');
    BEGIN
      case PhysInvtCountingPeriodType of
        PhysInvtCountingPeriodType::Item:
          InsertTempItem(ItemNo);
        PhysInvtCountingPeriodType::SKU:
          InsertTempSKU(ItemNo,LocationCode,VariantCode);
      end;
    END;

    LOCAL PROCEDURE InsertTempItem@11(ItemNo@1000 : Code[20]);
    BEGIN
      with TempItem do begin
        if GET(ItemNo) then
          exit;

        INIT;
        "No." := ItemNo;
        INSERT;
      end;
    END;

    LOCAL PROCEDURE InsertTempSKU@21(ItemNo@1000 : Code[20];LocationCode@1001 : Code[10];VariantCode@1003 : Code[10]);
    BEGIN
      with TempSKU do begin
        if GET(LocationCode,ItemNo,VariantCode) then
          exit;

        INIT;
        "Location Code" := LocationCode;
        "Item No." := ItemNo;
        "Variant Code" := VariantCode;
        INSERT;
      end;
    END;

    [External]
    PROCEDURE InitTempItemSKUList@33();
    BEGIN
      SetHideValidationDialog(true);

      TempItem.DELETEALL;
      TempSKU.DELETEALL;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@7380(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    LOCAL PROCEDURE FindCurrentPhysInventoryPeriod@10(VAR Calendar@1002 : Record Date;VAR StartDate@1011 : Date;VAR EndDate@1003 : Date;LastDate@1010 : Date;CountFrequency@1000 : Integer);
    VAR
      OldStartDate@1008 : Date;
    BEGIN
      if StartDate > LastDate then begin
        Calendar.RESET;
        Calendar.SETRANGE("Period Type",Calendar."Period Type"::Year);
        Calendar.SETRANGE("Period No.",DATE2DMY(LastDate,3));
        Calendar.FINDFIRST;
        StartDate := Calendar."Period Start";
      end;
      Calendar.RESET;
      Calendar.SETRANGE("Period Type",Calendar."Period Type"::Month);
      Calendar.SETFILTER("Period Start",'>=%1',StartDate);
      Calendar.FINDFIRST;
      while StartDate <= LastDate do begin
        OldStartDate := StartDate;
        Calendar.NEXT(12 / CountFrequency);
        StartDate := Calendar."Period Start";
        EndDate := NORMALDATE(Calendar."Period Start") - 1;
      end;
      StartDate := OldStartDate;
    END;

    BEGIN
    END.
  }
}

