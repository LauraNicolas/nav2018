OBJECT Codeunit 333 Req. Wksh.-Make Order
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Requisition Line";
    Permissions=TableData "Sales Line"=m;
    OnRun=BEGIN
            if PlanningResiliency then
              LOCKTABLE;

            CarryOutReqLineAction(Rec);
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Worksheet Name                     #1##########\\';
      Text001@1001 : TextConst 'ENU=Checking worksheet lines           #2######\';
      Text002@1002 : TextConst 'ENU=Creating purchase orders           #3######\';
      Text003@1003 : TextConst 'ENU=Creating purchase lines            #4######\';
      Text004@1004 : TextConst 'ENU=Updating worksheet lines           #5######';
      Text005@1005 : TextConst 'ENU=Deleting worksheet lines           #5######';
      Text006@1006 : TextConst 'ENU=%1 on sales order %2 is already associated with purchase order %3.';
      Text007@1007 : TextConst 'ENU=<Month Text>';
      Text008@1008 : TextConst 'ENU=The combination of dimensions used in %1 %2, %3, %4 is blocked. %5';
      Text009@1009 : TextConst 'ENU=A dimension used in %1 %2, %3, %4 has caused an error. %5';
      ReservEntry@1050 : Record "Reservation Entry";
      PurchSetup@1010 : Record "Purchases & Payables Setup";
      ReqTemplate@1011 : Record "Req. Wksh. Template";
      ReqWkshName@1012 : Record "Requisition Wksh. Name";
      PurchOrderHeader@1016 : Record "Purchase Header";
      PurchOrderLine@1018 : Record "Purchase Line";
      SalesOrderHeader@1019 : Record "Sales Header";
      SalesOrderLine@1020 : Record "Sales Line";
      TransHeader@1028 : Record "Transfer Header";
      AccountingPeriod@1022 : Record "Accounting Period";
      TempFailedReqLine@1054 : TEMPORARY Record "Requisition Line";
      PurchasingCode@1046 : Record Purchasing;
      TempDocumentEntry@1015 : TEMPORARY Record "Document Entry";
      ReqWkshMakeOrders@1053 : Codeunit "Req. Wksh.-Make Order";
      TransferExtendedText@1027 : Codeunit "Transfer Extended Text";
      ReserveReqLine@1025 : Codeunit "Req. Line-Reserve";
      DimMgt@1026 : Codeunit DimensionManagement;
      Window@1029 : Dialog;
      OrderDateReq@1030 : Date;
      PostingDateReq@1031 : Date;
      ReceiveDateReq@1032 : Date;
      EndOrderDate@1035 : Date;
      PlanningResiliency@1055 : Boolean;
      PrintPurchOrders@1034 : Boolean;
      ReferenceReq@1033 : Text[35];
      MonthText@1044 : Text[30];
      OrderCounter@1036 : Integer;
      LineCount@1037 : Integer;
      OrderLineCounter@1038 : Integer;
      StartLineNo@1039 : Integer;
      NextLineNo@1040 : Integer;
      Day@1041 : Integer;
      Week@1042 : Integer;
      Month@1043 : Integer;
      CounterFailed@1052 : Integer;
      PrevPurchCode@1047 : Code[10];
      PrevShipToCode@1017 : Code[10];
      Text010@1049 : TextConst 'ENU=must match %1 on Sales Order %2, Line %3';
      PrevChangedDocOrderType@1013 : Option;
      PrevChangedDocOrderNo@1014 : Code[20];
      PrevLocationCode@1021 : Code[10];
      NameAddressDetails@1024 : Text;

    [Internal]
    PROCEDURE CarryOutBatchAction@18(VAR ReqLine2@1000 : Record "Requisition Line");
    VAR
      ReqLine@1001 : Record "Requisition Line";
    BEGIN
      ReqLine.COPY(ReqLine2);
      ReqLine.SETRANGE("Accept Action Message",true);
      Code(ReqLine);
      ReqLine2 := ReqLine;
    END;

    [External]
    PROCEDURE Set@1(NewPurchOrderHeader@1000 : Record "Purchase Header";NewEndingOrderDate@1001 : Date;NewPrintPurchOrder@1002 : Boolean);
    BEGIN
      PurchOrderHeader := NewPurchOrderHeader;
      EndOrderDate := NewEndingOrderDate;
      PrintPurchOrders := NewPrintPurchOrder;
      OrderDateReq := PurchOrderHeader."Order Date";
      PostingDateReq := PurchOrderHeader."Posting Date";
      ReceiveDateReq := PurchOrderHeader."Expected Receipt Date";
      ReferenceReq := PurchOrderHeader."Your Reference";
    END;

    LOCAL PROCEDURE Code@8(VAR ReqLine@1001 : Record "Requisition Line");
    VAR
      ReqLine2@1002 : Record "Requisition Line";
      ReqLine3@1003 : Record "Requisition Line";
    BEGIN
      InitShipReceiveDetails;
      with ReqLine do begin
        CLEAR(PurchOrderHeader);

        SETRANGE("Worksheet Template Name","Worksheet Template Name");
        SETRANGE("Journal Batch Name","Journal Batch Name");
        if not PlanningResiliency then
          LOCKTABLE;

        if "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" then
          ReqTemplate.GET("Worksheet Template Name");

        if ReqTemplate.Recurring then begin
          SETRANGE("Order Date",0D,EndOrderDate);
          SETFILTER("Expiration Date",'%1 | %2..',0D,WORKDATE);
        end;

        if not FIND('=><') then begin
          "Line No." := 0;
          COMMIT;
          exit;
        end;

        if ReqTemplate.Recurring then
          Window.OPEN(
            Text000 +
            Text001 +
            Text002 +
            Text003 +
            Text004)
        else
          Window.OPEN(
            Text000 +
            Text001 +
            Text002 +
            Text003 +
            Text005);

        Window.UPDATE(1,"Journal Batch Name");

        // Check lines
        LineCount := 0;
        StartLineNo := "Line No.";
        repeat
          LineCount := LineCount + 1;
          Window.UPDATE(2,LineCount);
          CheckRecurringLine(ReqLine);
          CheckReqWkshLine(ReqLine);
          if NEXT = 0 then
            FIND('-');
        until "Line No." = StartLineNo;

        // Create lines
        LineCount := 0;
        OrderCounter := 0;
        OrderLineCounter := 0;
        CLEAR(PurchOrderHeader);
        SetPurchOrderHeader;
        SETCURRENTKEY(
          "Worksheet Template Name","Journal Batch Name","Vendor No.",
          "Sell-to Customer No.","Ship-to Code","Order Address Code","Currency Code",
          "Ref. Order Type","Ref. Order Status","Ref. Order No.",
          "Location Code","Transfer-from Code");

        if FIND('-') then
          repeat
            if PlanningResiliency then begin
              if not TryCarryOutReqLineAction(ReqLine) then begin
                SetFailedReqLine(ReqLine);
                CounterFailed := CounterFailed + 1;
              end;
            end else
              CarryOutReqLineAction(ReqLine);
          until NEXT = 0;

        if PrintPurchOrders then
          PrintTransOrder(TransHeader);

        if PurchOrderHeader."Buy-from Vendor No." <> '' then
          FinalizeOrderHeader(PurchOrderHeader,ReqLine);

        if PrevChangedDocOrderNo <> '' then
          PrintChangedDocument(PrevChangedDocOrderType,PrevChangedDocOrderNo);

        // Copy number of created orders and current journal batch name to requisition worksheet
        INIT;
        "Line No." := OrderCounter;

        if OrderCounter <> 0 then
          if not ReqTemplate.Recurring then begin
            // Not a recurring journal
            ReqLine2.COPY(ReqLine);
            ReqLine2.SETFILTER("Vendor No.",'<>%1','');
            if ReqLine2.FINDFIRST then; // Remember the last line
            if FIND('-') then
              repeat
                TempFailedReqLine := ReqLine;
                if not TempFailedReqLine.FIND then
                  DELETE(true);
              until NEXT = 0;

            ReqLine3.SETRANGE("Worksheet Template Name","Worksheet Template Name");
            ReqLine3.SETRANGE("Journal Batch Name","Journal Batch Name");
            if not ReqLine3.FINDLAST then
              if INCSTR("Journal Batch Name") <> '' then begin
                ReqWkshName.GET("Worksheet Template Name","Journal Batch Name");
                ReqWkshName.DELETE;
                ReqWkshName.Name := INCSTR("Journal Batch Name");
                if ReqWkshName.INSERT then;
                "Journal Batch Name" := ReqWkshName.Name;
              end;
          end;
      end;
    END;

    PROCEDURE SetCreatedDocumentBuffer@24(VAR TempDocumentEntryNew@1000 : TEMPORARY Record "Document Entry");
    BEGIN
      TempDocumentEntry.COPY(TempDocumentEntryNew,true);
    END;

    LOCAL PROCEDURE CheckReqWkshLine@2(VAR ReqLine2@1000 : Record "Requisition Line");
    VAR
      SalesLine@1004 : Record "Sales Line";
      Purchasing@1005 : Record Purchasing;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      with ReqLine2 do begin
        if ("No." <> '') or ("Vendor No." <> '') or (Quantity <> 0) then begin
          TESTFIELD("No.");
          if "Action Message" <> "Action Message"::Cancel then
            TESTFIELD(Quantity);
          if ("Action Message" = "Action Message"::" ") or
             ("Action Message" = "Action Message"::New)
          then
            if "Replenishment System" = "Replenishment System"::Purchase then begin
              if "Planning Line Origin" = "Planning Line Origin"::"Order Planning" then
                TESTFIELD("Supply From");
              TESTFIELD("Vendor No.")
            end else
              if "Replenishment System" = "Replenishment System"::Transfer then begin
                TESTFIELD("Location Code");
                if "Planning Line Origin" = "Planning Line Origin"::"Order Planning" then
                  TESTFIELD("Supply From");
                TESTFIELD("Transfer-from Code");
              end;
        end;

        if not DimMgt.CheckDimIDComb("Dimension Set ID") then
          ERROR(
            Text008,
            TABLECAPTION,"Worksheet Template Name","Journal Batch Name","Line No.",
            DimMgt.GetDimCombErr);

        TableID[1] := DimMgt.TypeToTableID3(Type);
        No[1] := "No.";
        if not DimMgt.CheckDimValuePosting(TableID,No,"Dimension Set ID") then
          if "Line No." <> 0 then
            ERROR(
              Text009,
              TABLECAPTION,"Worksheet Template Name","Journal Batch Name","Line No.",
              DimMgt.GetDimValuePostingErr)
          else
            ERROR(DimMgt.GetDimValuePostingErr);

        if SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.") and
           (SalesLine."Unit of Measure Code" <> "Unit of Measure Code")
        then
          if SalesLine."Drop Shipment" or
             (PurchasingCode.GET("Purchasing Code") and PurchasingCode."Drop Shipment")
          then
            FIELDERROR(
              "Unit of Measure Code",
              STRSUBSTNO(
                Text010,
                SalesLine.FIELDCAPTION("Unit of Measure Code"),
                SalesLine."Document No.",
                SalesLine."Line No."));

        if Purchasing.GET("Purchasing Code") then
          if Purchasing."Drop Shipment" or Purchasing."Special Order" then begin
            SalesLine.GET(SalesLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
            CheckLocation(ReqLine2);
            if (Purchasing."Drop Shipment" <> SalesLine."Drop Shipment") or
               (Purchasing."Special Order" <> SalesLine."Special Order")
            then
              FIELDERROR(
                "Purchasing Code",
                STRSUBSTNO(
                  Text010,
                  SalesLine.FIELDCAPTION("Purchasing Code"),
                  SalesLine."Document No.",
                  SalesLine."Line No."));
          end;
      end;
    END;

    LOCAL PROCEDURE CarryOutReqLineAction@14(VAR ReqLine@1001 : Record "Requisition Line");
    VAR
      CarryOutAction@1000 : Codeunit "Carry Out Action";
    BEGIN
      with ReqLine do
        case "Replenishment System" of
          "Replenishment System"::Transfer:
            case "Action Message" of
              "Action Message"::Cancel:
                begin
                  CarryOutAction.DeleteOrderLines(ReqLine);
                  OrderCounter := OrderCounter + 1;
                end;
              "Action Message"::"Change Qty.","Action Message"::Reschedule,"Action Message"::"Resched. & Chg. Qty.":
                begin
                  if (PrevChangedDocOrderNo <> '') and
                     (("Ref. Order Type" <> PrevChangedDocOrderType) or ("Ref. Order No." <> PrevChangedDocOrderNo))
                  then
                    PrintChangedDocument(PrevChangedDocOrderType,PrevChangedDocOrderNo);
                  CarryOutAction.SetPrintOrder(false);
                  CarryOutAction.TransOrderChgAndReshedule(ReqLine);
                  PrevChangedDocOrderType := "Ref. Order Type";
                  PrevChangedDocOrderNo := "Ref. Order No.";
                  OrderCounter := OrderCounter + 1;
                end;
              "Action Message"::New,"Action Message"::" ":
                begin
                  CarryOutAction.SetPrintOrder(PrintPurchOrders);
                  CarryOutAction.InsertTransLine(ReqLine,TransHeader);
                  OrderCounter := OrderCounter + 1;
                end;
            end;
          "Replenishment System"::Purchase,"Replenishment System"::"Prod. Order":
            case "Action Message" of
              "Action Message"::Cancel:
                begin
                  CarryOutAction.DeleteOrderLines(ReqLine);
                  OrderCounter := OrderCounter + 1;
                end;
              "Action Message"::"Change Qty.","Action Message"::Reschedule, "Action Message"::"Resched. & Chg. Qty.":
                begin
                  if (PrevChangedDocOrderNo <> '') and
                     (("Ref. Order Type" <> PrevChangedDocOrderType) or ("Ref. Order No." <> PrevChangedDocOrderNo))
                  then
                    PrintChangedDocument(PrevChangedDocOrderType,PrevChangedDocOrderNo);
                  CarryOutAction.SetPrintOrder(false);
                  CarryOutAction.PurchOrderChgAndReshedule(ReqLine);
                  PrevChangedDocOrderType := "Ref. Order Type";
                  PrevChangedDocOrderNo := "Ref. Order No.";
                  OrderCounter := OrderCounter + 1;
                end;
              "Action Message"::New,"Action Message"::" ":
                begin
                  if (PurchOrderHeader."Buy-from Vendor No." <> '') and
                     CheckInsertFinalizePurchaseOrderHeader(ReqLine,PurchOrderHeader,false)
                  then begin
                    FinalizeOrderHeader(PurchOrderHeader,ReqLine);
                    PurchOrderLine.RESET;
                    PurchOrderLine.SETRANGE("Document Type",PurchOrderHeader."Document Type");
                    PurchOrderLine.SETRANGE("Document No.",PurchOrderHeader."No.");
                    PurchOrderLine.SETFILTER("Special Order Sales Line No.",'<> 0');
                    if PurchOrderLine.FIND('-') then
                      repeat
                        SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,PurchOrderLine."Special Order Sales No.",
                          PurchOrderLine."Special Order Sales Line No.");
                      until PurchOrderLine.NEXT = 0;
                  end;
                  MakeRecurringTexts(ReqLine);
                  InsertPurchOrderLine(ReqLine,PurchOrderHeader);
                end;
            end;
        end;
    END;

    LOCAL PROCEDURE TryCarryOutReqLineAction@12(VAR ReqLine@1001 : Record "Requisition Line") : Boolean;
    BEGIN
      with ReqLine do begin
        ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintPurchOrders);
        ReqWkshMakeOrders.SetTryParam(
          ReqTemplate,
          LineCount,
          NextLineNo,
          PrevPurchCode,
          PrevShipToCode,
          PrevLocationCode,
          OrderCounter,
          OrderLineCounter,
          TempFailedReqLine,
          TempDocumentEntry);
        if ReqWkshMakeOrders.RUN(ReqLine) then begin
          ReqWkshMakeOrders.GetTryParam(
            PurchOrderHeader,
            LineCount,
            NextLineNo,
            PrevPurchCode,
            PrevShipToCode,
            PrevLocationCode,
            OrderCounter,
            OrderLineCounter);

          Window.UPDATE(3,OrderCounter);
          Window.UPDATE(4,LineCount);
          Window.UPDATE(5,OrderLineCounter);
          exit(true);
        end;
        exit(false)
      end;
    END;

    LOCAL PROCEDURE InsertPurchOrderLine@3(VAR ReqLine2@1000 : Record "Requisition Line";VAR PurchOrderHeader@1001 : Record "Purchase Header");
    VAR
      PurchOrderLine2@1003 : Record "Purchase Line";
      AddOnIntegrMgt@1002 : Codeunit AddOnIntegrManagement;
      DimensionSetIDArr@1004 : ARRAY [10] OF Integer;
    BEGIN
      with ReqLine2 do begin
        if ("No." = '') or ("Vendor No." = '') or (Quantity = 0) then
          exit;

        if CheckInsertFinalizePurchaseOrderHeader(ReqLine2,PurchOrderHeader,true) then begin
          InsertHeader(ReqLine2);
          LineCount := 0;
          NextLineNo := 0;
          PrevPurchCode := "Purchasing Code";
          PrevShipToCode := "Ship-to Code";
          PrevLocationCode := "Location Code";
        end;

        LineCount := LineCount + 1;
        if not PlanningResiliency then
          Window.UPDATE(4,LineCount);

        TESTFIELD("Currency Code",PurchOrderHeader."Currency Code");

        PurchOrderLine.INIT;
        PurchOrderLine.BlockDynamicTracking(true);
        PurchOrderLine."Document Type" := PurchOrderLine."Document Type"::Order;
        PurchOrderLine."Buy-from Vendor No." := "Vendor No.";
        PurchOrderLine."Document No." := PurchOrderHeader."No.";
        NextLineNo := NextLineNo + 10000;
        PurchOrderLine."Line No." := NextLineNo;
        PurchOrderLine.VALIDATE(Type,Type);
        PurchOrderLine.VALIDATE("No.","No.");
        PurchOrderLine."Variant Code" := "Variant Code";
        PurchOrderLine.VALIDATE("Location Code","Location Code");
        PurchOrderLine.VALIDATE("Unit of Measure Code","Unit of Measure Code");
        PurchOrderLine."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        PurchOrderLine."Prod. Order No." := "Prod. Order No.";
        PurchOrderLine."Prod. Order Line No." := "Prod. Order Line No.";
        PurchOrderLine.VALIDATE(Quantity,Quantity);
        if PurchOrderHeader."Prices Including VAT" then
          PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost" * (1 + PurchOrderLine."VAT %" / 100))
        else
          PurchOrderLine.VALIDATE("Direct Unit Cost","Direct Unit Cost");

        PurchOrderLine.VALIDATE("Line Discount %","Line Discount %");
        PurchOrderLine."Vendor Item No." := "Vendor Item No.";

        PurchOrderLine.Description := Description;
        PurchOrderLine."Description 2" := "Description 2";
        PurchOrderLine."Sales Order No." := "Sales Order No.";
        PurchOrderLine."Sales Order Line No." := "Sales Order Line No.";
        PurchOrderLine."Prod. Order No." := "Prod. Order No.";
        PurchOrderLine."Bin Code" := "Bin Code";
        PurchOrderLine."Item Category Code" := "Item Category Code";
        PurchOrderLine.Nonstock := Nonstock;
        PurchOrderLine.VALIDATE("Planning Flexibility","Planning Flexibility");
        PurchOrderLine.VALIDATE("Purchasing Code","Purchasing Code");
        PurchOrderLine."Product Group Code" := "Product Group Code";
        if "Due Date" <> 0D then begin
          PurchOrderLine.VALIDATE("Expected Receipt Date","Due Date");
          PurchOrderLine."Requested Receipt Date" := PurchOrderLine."Planned Receipt Date";
        end;

        AddOnIntegrMgt.TransferFromReqLineToPurchLine(PurchOrderLine,ReqLine2);

        PurchOrderLine."Drop Shipment" := "Sales Order Line No." <> 0;

        if PurchasingCode.GET("Purchasing Code") then
          if PurchasingCode."Special Order" then begin
            PurchOrderLine."Special Order Sales No." := "Sales Order No.";
            PurchOrderLine."Special Order Sales Line No." := "Sales Order Line No.";
            PurchOrderLine."Special Order" := true;
            PurchOrderLine."Drop Shipment" := false;
            PurchOrderLine."Sales Order No." := '';
            PurchOrderLine."Sales Order Line No." := 0;
            PurchOrderLine."Special Order" := true;
            PurchOrderLine.UpdateUnitCost;
          end;

        ReserveReqLine.TransferReqLineToPurchLine(ReqLine2,PurchOrderLine,"Quantity (Base)",false);
        DimensionSetIDArr[1] := PurchOrderLine."Dimension Set ID";
        DimensionSetIDArr[2] := "Dimension Set ID";
        PurchOrderLine."Dimension Set ID" :=
          DimMgt.GetCombinedDimensionSetID(
            DimensionSetIDArr,PurchOrderLine."Shortcut Dimension 1 Code",PurchOrderLine."Shortcut Dimension 2 Code");
        PurchOrderLine.INSERT;

        if Reserve then
          ReserveBindingOrderToPurch(PurchOrderLine,ReqLine2);

        if PurchOrderLine."Drop Shipment" or PurchOrderLine."Special Order" then begin
          SalesOrderLine.LOCKTABLE;
          SalesOrderHeader.LOCKTABLE;
          SalesOrderHeader.GET(SalesOrderHeader."Document Type"::Order,"Sales Order No.");
          if not PurchOrderLine."Special Order" then
            TESTFIELD("Ship-to Code",SalesOrderHeader."Ship-to Code");
          SalesOrderLine.GET(SalesOrderLine."Document Type"::Order,"Sales Order No.","Sales Order Line No.");
          SalesOrderLine.TESTFIELD(Type,SalesOrderLine.Type::Item);
          if SalesOrderLine."Purch. Order Line No." <> 0 then
            ERROR(Text006,SalesOrderLine."No.",SalesOrderLine."Document No.",SalesOrderLine."Purchase Order No.");
          if SalesOrderLine."Special Order Purchase No." <> '' then
            ERROR(Text006,SalesOrderLine."No.",SalesOrderLine."Document No.",SalesOrderLine."Special Order Purchase No.");
          if not PurchOrderLine."Special Order" then
            TESTFIELD("Sell-to Customer No.",SalesOrderLine."Sell-to Customer No.");
          TESTFIELD(Type,SalesOrderLine.Type);
          TESTFIELD(
            Quantity,
            ROUND(
              SalesOrderLine."Outstanding Quantity" *
              SalesOrderLine."Qty. per Unit of Measure" /
              "Qty. per Unit of Measure",
              0.00001));
          TESTFIELD("No.",SalesOrderLine."No.");
          TESTFIELD("Location Code",SalesOrderLine."Location Code");
          TESTFIELD("Variant Code",SalesOrderLine."Variant Code");
          TESTFIELD("Bin Code",SalesOrderLine."Bin Code");
          TESTFIELD("Prod. Order No.",'');
          TESTFIELD("Qty. per Unit of Measure","Qty. per Unit of Measure");
          SalesOrderLine.VALIDATE("Unit Cost (LCY)");

          if SalesOrderLine."Special Order" then begin
            SalesOrderLine."Special Order Purchase No." := PurchOrderLine."Document No.";
            SalesOrderLine."Special Order Purch. Line No." := PurchOrderLine."Line No.";
          end else begin
            SalesOrderLine."Purchase Order No." := PurchOrderLine."Document No.";
            SalesOrderLine."Purch. Order Line No." := PurchOrderLine."Line No.";
          end;
          SalesOrderLine.MODIFY;
        end;

        if TransferExtendedText.PurchCheckIfAnyExtText(PurchOrderLine,false) then begin
          TransferExtendedText.InsertPurchExtText(PurchOrderLine);
          PurchOrderLine2.SETRANGE("Document Type",PurchOrderHeader."Document Type");
          PurchOrderLine2.SETRANGE("Document No.",PurchOrderHeader."No.");
          if PurchOrderLine2.FINDLAST then
            NextLineNo := PurchOrderLine2."Line No.";
        end;
      end;
    END;

    LOCAL PROCEDURE InsertHeader@4(VAR ReqLine2@1000 : Record "Requisition Line");
    VAR
      SalesHeader@1002 : Record "Sales Header";
      Vendor@1003 : Record Vendor;
      SpecialOrder@1001 : Boolean;
    BEGIN
      with ReqLine2 do begin
        OrderCounter := OrderCounter + 1;
        if not PlanningResiliency then
          Window.UPDATE(3,OrderCounter);

        PurchSetup.GET;
        PurchSetup.TESTFIELD("Order Nos.");
        CLEAR(PurchOrderHeader);
        PurchOrderHeader.INIT;
        PurchOrderHeader."Document Type" := PurchOrderHeader."Document Type"::Order;
        PurchOrderHeader."No." := '';
        PurchOrderHeader."Posting Date" := PostingDateReq;
        PurchOrderHeader.INSERT(true);
        PurchOrderHeader."Your Reference" := ReferenceReq;
        PurchOrderHeader."Order Date" := OrderDateReq;
        PurchOrderHeader."Expected Receipt Date" := ReceiveDateReq;
        PurchOrderHeader.VALIDATE("Buy-from Vendor No.","Vendor No.");
        if "Order Address Code" <> '' then
          PurchOrderHeader.VALIDATE("Order Address Code","Order Address Code");

        if "Sell-to Customer No." <> '' then
          PurchOrderHeader.VALIDATE("Sell-to Customer No.","Sell-to Customer No.");

        PurchOrderHeader.VALIDATE("Currency Code","Currency Code");

        if PurchasingCode.GET("Purchasing Code") then
          if PurchasingCode."Special Order" then
            SpecialOrder := true;

        if not SpecialOrder then begin
          if "Ship-to Code" <> '' then
            PurchOrderHeader.VALIDATE("Ship-to Code","Ship-to Code")
          else
            PurchOrderHeader.VALIDATE("Location Code","Location Code");
        end else begin
          PurchOrderHeader.VALIDATE("Location Code","Location Code");
          PurchOrderHeader.SetShipToForSpecOrder;
          if Vendor.GET(PurchOrderHeader."Buy-from Vendor No.") then
            PurchOrderHeader.VALIDATE("Shipment Method Code",Vendor."Shipment Method Code");
        end;
        if not SpecialOrder then
          if SalesHeader.GET(SalesHeader."Document Type"::Order,"Sales Order No.") then begin
            PurchOrderHeader."Ship-to Name" := SalesHeader."Ship-to Name";
            PurchOrderHeader."Ship-to Name 2" := SalesHeader."Ship-to Name 2";
            PurchOrderHeader."Ship-to Address" := SalesHeader."Ship-to Address";
            PurchOrderHeader."Ship-to Address 2" := SalesHeader."Ship-to Address 2";
            PurchOrderHeader."Ship-to Post Code" := SalesHeader."Ship-to Post Code";
            PurchOrderHeader."Ship-to City" := SalesHeader."Ship-to City";
            PurchOrderHeader."Ship-to Contact" := SalesHeader."Ship-to Contact";
          end;
        if SpecialOrder then
          if Vendor.GET(PurchOrderHeader."Buy-from Vendor No.") then
            PurchOrderHeader."Shipment Method Code" := Vendor."Shipment Method Code";
        PurchOrderHeader.MODIFY;
        PurchOrderHeader.MARK(true);
        TempDocumentEntry.INIT;
        TempDocumentEntry."Table ID" := DATABASE::"Purchase Header";
        TempDocumentEntry."Document Type" := PurchOrderHeader."Document Type"::Order;
        TempDocumentEntry."Document No." := PurchOrderHeader."No.";
        TempDocumentEntry."Entry No." := TempDocumentEntry.COUNT + 1;
        TempDocumentEntry.INSERT;
      end;
    END;

    LOCAL PROCEDURE FinalizeOrderHeader@5(PurchOrderHeader@1000 : Record "Purchase Header";VAR ReqLine@1002 : Record "Requisition Line");
    VAR
      ReqLine2@1003 : Record "Requisition Line";
      CarryOutAction@1001 : Codeunit "Carry Out Action";
    BEGIN
      if ReqTemplate.Recurring then begin
        // Recurring journal
        ReqLine2.COPY(ReqLine);
        ReqLine2.SETRANGE("Vendor No.",PurchOrderHeader."Buy-from Vendor No.");
        ReqLine2.SETRANGE("Sell-to Customer No.",PurchOrderHeader."Sell-to Customer No.");
        ReqLine2.SETRANGE("Ship-to Code",PurchOrderHeader."Ship-to Code");
        ReqLine2.SETRANGE("Order Address Code",PurchOrderHeader."Order Address Code");
        ReqLine2.SETRANGE("Currency Code",PurchOrderHeader."Currency Code");
        ReqLine2.FIND('-');
        repeat
          OrderLineCounter := OrderLineCounter + 1;
          if not PlanningResiliency then
            Window.UPDATE(5,OrderLineCounter);
          if ReqLine2."Order Date" <> 0D then begin
            ReqLine2.VALIDATE(
              "Order Date",
              CALCDATE(ReqLine2."Recurring Frequency",ReqLine2."Order Date"));
            ReqLine2.VALIDATE("Currency Code",PurchOrderHeader."Currency Code");
          end;
          if (ReqLine2."Recurring Method" = ReqLine2."Recurring Method"::Variable) and
             (ReqLine2."No." <> '')
          then begin
            ReqLine2.Quantity := 0;
            ReqLine2."Line Discount %" := 0;
          end;
          ReqLine2.MODIFY;
        until ReqLine2.NEXT = 0;
      end else begin
        // Not a recurring journal
        OrderLineCounter := OrderLineCounter + LineCount;
        if not PlanningResiliency then
          Window.UPDATE(5,OrderLineCounter);
        ReqLine2.COPY(ReqLine);
        ReqLine2.SETRANGE("Vendor No.",PurchOrderHeader."Buy-from Vendor No.");
        ReqLine2.SETRANGE("Sell-to Customer No.",PurchOrderHeader."Sell-to Customer No.");
        ReqLine2.SETRANGE("Ship-to Code",PurchOrderHeader."Ship-to Code");
        ReqLine2.SETRANGE("Order Address Code",PurchOrderHeader."Order Address Code");
        ReqLine2.SETRANGE("Currency Code",PurchOrderHeader."Currency Code");
        ReqLine2.SETRANGE("Location Code",PrevLocationCode);
        ReqLine2.SETRANGE("Purchasing Code",PrevPurchCode);
        ReqLine2.SETFILTER("Line No.",'..%1',ReqLine."Line No.");
        if ReqLine2.FIND('-') then begin
          ReqLine2.BlockDynamicTracking(true);
          ReservEntry.SETCURRENTKEY(
            "Source ID","Source Ref. No.","Source Type","Source Subtype",
            "Source Batch Name","Source Prod. Order Line");
          repeat
            TempFailedReqLine := ReqLine2;
            if not TempFailedReqLine.FIND then begin
              ReserveReqLine.FilterReservFor(ReservEntry,ReqLine2);
              ReservEntry.DELETEALL(true);
              ReqLine2.DELETE(true);
            end;
          until ReqLine2.NEXT = 0;
        end;
      end;
      COMMIT;

      CarryOutAction.SetPrintOrder(PrintPurchOrders);
      CarryOutAction.PrintPurchaseOrder(PurchOrderHeader);
    END;

    LOCAL PROCEDURE CheckRecurringLine@10(VAR ReqLine2@1000 : Record "Requisition Line");
    VAR
      DummyDateFormula@1001 : DateFormula;
    BEGIN
      with ReqLine2 do
        if "No." <> '' then
          if ReqTemplate.Recurring then begin
            TESTFIELD("Recurring Method");
            TESTFIELD("Recurring Frequency");
            if "Recurring Method" = "Recurring Method"::Variable then
              TESTFIELD(Quantity);
          end else begin
            TESTFIELD("Recurring Method",0);
            TESTFIELD("Recurring Frequency",DummyDateFormula);
          end;
    END;

    LOCAL PROCEDURE MakeRecurringTexts@6(VAR ReqLine2@1000 : Record "Requisition Line");
    BEGIN
      with ReqLine2 do
        if ("No." <> '') and ("Recurring Method" <> 0) and ("Order Date" <> 0D) then begin
          Day := DATE2DMY("Order Date",1);
          Week := DATE2DWY("Order Date",2);
          Month := DATE2DMY("Order Date",2);
          MonthText := FORMAT("Order Date",0,Text007);
          AccountingPeriod.SETRANGE("Starting Date",0D,"Order Date");
          if not AccountingPeriod.FINDLAST then
            AccountingPeriod.Name := '';
          Description :=
            DELCHR(
              PADSTR(
                STRSUBSTNO(Description,Day,Week,Month,MonthText,AccountingPeriod.Name),
                MAXSTRLEN(Description)),
              '>');
          MODIFY;
        end;
    END;

    LOCAL PROCEDURE ReserveBindingOrderToPurch@7(VAR PurchLine@1005 : Record "Purchase Line";VAR ReqLine@1000 : Record "Requisition Line");
    VAR
      ProdOrderComp@1004 : Record "Prod. Order Component";
      SalesLine@1007 : Record "Sales Line";
      ServLine@1009 : Record "Service Line";
      JobPlanningLine@1010 : Record "Job Planning Line";
      AsmLine@1013 : Record "Assembly Line";
      ProdOrderCompReserve@1002 : Codeunit "Prod. Order Comp.-Reserve";
      SalesLineReserve@1008 : Codeunit "Sales Line-Reserve";
      ServLineReserve@1011 : Codeunit "Service Line-Reserve";
      JobPlanningLineReserve@1012 : Codeunit "Job Planning Line-Reserve";
      AsmLineReserve@1014 : Codeunit "Assembly Line-Reserve";
      ReservQty@1015 : Decimal;
      ReservQtyBase@1001 : Decimal;
    BEGIN
      PurchLine.CALCFIELDS("Reserved Quantity","Reserved Qty. (Base)");
      if (PurchLine."Quantity (Base)" - PurchLine."Reserved Qty. (Base)") > ReqLine."Demand Quantity (Base)" then begin
        ReservQty := ReqLine."Demand Quantity";
        ReservQtyBase := ReqLine."Demand Quantity (Base)";
      end else begin
        ReservQty := PurchLine.Quantity - PurchLine."Reserved Quantity";
        ReservQtyBase := PurchLine."Quantity (Base)" - PurchLine."Reserved Qty. (Base)";
      end;

      case ReqLine."Demand Type" of
        DATABASE::"Prod. Order Component":
          begin
            ProdOrderComp.GET(
              ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.",ReqLine."Demand Ref. No.");
            ProdOrderCompReserve.BindToPurchase(ProdOrderComp,PurchLine,ReservQty,ReservQtyBase);
          end;
        DATABASE::"Sales Line":
          begin
            SalesLine.GET(ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.");
            SalesLineReserve.BindToPurchase(SalesLine,PurchLine,ReservQty,ReservQtyBase);
            if SalesLine.Reserve = SalesLine.Reserve::Never then begin
              SalesLine.Reserve := SalesLine.Reserve::Optional;
              SalesLine.MODIFY;
            end;
          end;
        DATABASE::"Service Line":
          begin
            ServLine.GET(ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.");
            ServLineReserve.BindToPurchase(ServLine,PurchLine,ReservQty,ReservQtyBase);
            if ServLine.Reserve = ServLine.Reserve::Never then begin
              ServLine.Reserve := ServLine.Reserve::Optional;
              ServLine.MODIFY;
            end;
          end;
        DATABASE::"Job Planning Line":
          begin
            JobPlanningLine.SETRANGE("Job Contract Entry No.",ReqLine."Demand Line No.");
            JobPlanningLine.FINDFIRST;
            JobPlanningLineReserve.BindToPurchase(JobPlanningLine,PurchLine,ReservQty,ReservQtyBase);
            if JobPlanningLine.Reserve = JobPlanningLine.Reserve::Never then begin
              JobPlanningLine.Reserve := JobPlanningLine.Reserve::Optional;
              JobPlanningLine.MODIFY;
            end;
          end;
        DATABASE::"Assembly Line":
          begin
            AsmLine.GET(ReqLine."Demand Subtype",ReqLine."Demand Order No.",ReqLine."Demand Line No.");
            AsmLineReserve.BindToPurchase(AsmLine,PurchLine,ReservQty,ReservQtyBase);
            if AsmLine.Reserve = AsmLine.Reserve::Never then begin
              AsmLine.Reserve := AsmLine.Reserve::Optional;
              AsmLine.MODIFY;
            end;
          end;
      end;
      PurchLine.MODIFY;
    END;

    [External]
    PROCEDURE SetTryParam@11(TryReqTemplate@1006 : Record "Req. Wksh. Template";TryLineCount@1005 : Integer;TryNextLineNo@1004 : Integer;TryPrevPurchCode@1003 : Code[10];TryPrevShipToCode@1000 : Code[10];TryPrevLocationCode@1009 : Code[10];TryOrderCounter@1007 : Integer;TryOrderLineCounter@1008 : Integer;VAR TryFailedReqLine@1001 : Record "Requisition Line";VAR TempDocumentEntryNew@1002 : TEMPORARY Record "Document Entry");
    BEGIN
      SetPlanningResiliency;
      ReqTemplate := TryReqTemplate;
      LineCount := TryLineCount;
      NextLineNo := TryNextLineNo;
      PrevPurchCode := TryPrevPurchCode;
      PrevShipToCode := TryPrevShipToCode;
      PrevLocationCode := TryPrevLocationCode;
      OrderCounter := TryOrderCounter;
      OrderLineCounter := TryOrderLineCounter;
      TempDocumentEntry.COPY(TempDocumentEntryNew,true);
      if TryFailedReqLine.FIND('-') then
        repeat
          TempFailedReqLine := TryFailedReqLine;
          if TempFailedReqLine.INSERT then;
        until TryFailedReqLine.NEXT = 0;
    END;

    [External]
    PROCEDURE GetTryParam@9(VAR TryPurchOrderHeader@1001 : Record "Purchase Header";VAR TryLineCount@1005 : Integer;VAR TryNextLineNo@1004 : Integer;VAR TryPrevPurchCode@1003 : Code[10];VAR TryPrevShipToCode@1000 : Code[10];VAR TryPrevLocationCode@1002 : Code[10];VAR TryOrderCounter@1007 : Integer;VAR TryOrderLineCounter@1008 : Integer);
    BEGIN
      TryPurchOrderHeader.COPY(PurchOrderHeader);
      TryLineCount := LineCount;
      TryNextLineNo := NextLineNo;
      TryPrevPurchCode := PrevPurchCode;
      TryPrevShipToCode := PrevShipToCode;
      TryPrevLocationCode := PrevLocationCode;
      TryOrderCounter := OrderCounter;
      TryOrderLineCounter := OrderLineCounter;
    END;

    [External]
    PROCEDURE SetFailedReqLine@13(VAR TryFailedReqLine@1000 : Record "Requisition Line");
    BEGIN
      TempFailedReqLine := TryFailedReqLine;
      TempFailedReqLine.INSERT;
    END;

    [External]
    PROCEDURE SetPlanningResiliency@17();
    BEGIN
      PlanningResiliency := true;
    END;

    [External]
    PROCEDURE GetFailedCounter@19() : Integer;
    BEGIN
      exit(CounterFailed);
    END;

    LOCAL PROCEDURE PrintTransOrder@15(TransferHeader@1001 : Record "Transfer Header");
    VAR
      CarryOutAction@1000 : Codeunit "Carry Out Action";
    BEGIN
      if TransferHeader."No." <> '' then begin
        CarryOutAction.SetPrintOrder(PrintPurchOrders);
        CarryOutAction.PrintTransferOrder(TransferHeader);
      end;
    END;

    LOCAL PROCEDURE PrintChangedDocument@25(OrderType@1000 : Option;VAR OrderNo@1001 : Code[20]);
    VAR
      DummyReqLine@1003 : Record "Requisition Line";
      TransferHeader@1004 : Record "Transfer Header";
      PurchaseHeader@1005 : Record "Purchase Header";
      CarryOutAction@1002 : Codeunit "Carry Out Action";
    BEGIN
      CarryOutAction.SetPrintOrder(PrintPurchOrders);
      case OrderType of
        DummyReqLine."Ref. Order Type"::Transfer:
          begin
            TransferHeader.GET(OrderNo);
            PrintTransOrder(TransferHeader);
          end;
        DummyReqLine."Ref. Order Type"::Purchase:
          begin
            PurchaseHeader.GET(PurchaseHeader."Document Type"::Order,OrderNo);
            PrintPurchOrder(PurchaseHeader);
          end;
      end;
      OrderNo := '';
    END;

    LOCAL PROCEDURE PrintPurchOrder@22(PurchHeader@1001 : Record "Purchase Header");
    VAR
      CarryOutAction@1000 : Codeunit "Carry Out Action";
    BEGIN
      if PurchHeader."No." <> '' then begin
        CarryOutAction.SetPrintOrder(PrintPurchOrders);
        CarryOutAction.PrintPurchaseOrder(PurchHeader);
      end;
    END;

    LOCAL PROCEDURE SetPurchOrderHeader@16();
    BEGIN
      PurchOrderHeader."Order Date" := OrderDateReq;
      PurchOrderHeader."Posting Date" := PostingDateReq;
      PurchOrderHeader."Expected Receipt Date" := ReceiveDateReq;
      PurchOrderHeader."Your Reference" := ReferenceReq;
    END;

    LOCAL PROCEDURE CheckAddressDetails@100(SalesOrderNo@1002 : Code[20];SalesLineNo@1003 : Integer;UpdateAddressDetails@1001 : Boolean) Result : Boolean;
    VAR
      SalesLine@1000 : Record "Sales Line";
      Purchasing@1004 : Record Purchasing;
    BEGIN
      if SalesLine.GET(SalesLine."Document Type"::Order,SalesOrderNo,SalesLineNo) then
        if Purchasing.GET(SalesLine."Purchasing Code") then
          case true of
            Purchasing."Drop Shipment":
              Result :=
                not CheckDropShptAddressDetails(SalesOrderNo,UpdateAddressDetails);
            Purchasing."Special Order":
              Result :=
                not CheckSpecOrderAddressDetails(SalesLine."Location Code");
          end;
    END;

    LOCAL PROCEDURE CheckLocation@20(RequisitionLine@1000 : Record "Requisition Line");
    VAR
      InventorySetup@1001 : Record "Inventory Setup";
    BEGIN
      InventorySetup.GET;
      if InventorySetup."Location Mandatory" then
        RequisitionLine.TESTFIELD("Location Code");
    END;

    LOCAL PROCEDURE CheckInsertFinalizePurchaseOrderHeader@21(RequisitionLine@1000 : Record "Requisition Line";VAR PurchOrderHeader@1002 : Record "Purchase Header";UpdateAddressDetails@1001 : Boolean) Result : Boolean;
    BEGIN
      with RequisitionLine do
        Result :=
          (PurchOrderHeader."Buy-from Vendor No." <> "Vendor No.") or
          (PurchOrderHeader."Sell-to Customer No." <> "Sell-to Customer No.") or
          (PrevShipToCode <> "Ship-to Code") or
          (PurchOrderHeader."Order Address Code" <> "Order Address Code") or
          (PurchOrderHeader."Currency Code" <> "Currency Code") or
          (PrevPurchCode <> "Purchasing Code") or
          (PrevLocationCode <> "Location Code") or
          CheckAddressDetails("Sales Order No.","Sales Order Line No.",UpdateAddressDetails);
    END;

    LOCAL PROCEDURE CheckDropShptAddressDetails@79(SalesNo@1002 : Code[20];UpdateAddressDetails@1003 : Boolean) : Boolean;
    VAR
      SalesHeader@1000 : Record "Sales Header";
      DropShptNameAddressDetails@1001 : Text;
    BEGIN
      SalesHeader.GET(SalesHeader."Document Type"::Order,SalesNo);
      DropShptNameAddressDetails :=
        SalesHeader."Ship-to Name" + SalesHeader."Ship-to Name 2" +
        SalesHeader."Ship-to Address" + SalesHeader."Ship-to Address 2" +
        SalesHeader."Ship-to Post Code" + SalesHeader."Ship-to City" +
        SalesHeader."Ship-to Contact";
      if NameAddressDetails = '' then
        NameAddressDetails := DropShptNameAddressDetails;
      if NameAddressDetails = DropShptNameAddressDetails then
        exit(true);

      if UpdateAddressDetails then
        NameAddressDetails := DropShptNameAddressDetails;
      exit(false);
    END;

    LOCAL PROCEDURE CheckSpecOrderAddressDetails@82(LocationCode@1000 : Code[10]) : Boolean;
    VAR
      Location@1001 : Record Location;
      CompanyInfo@1002 : Record "Company Information";
      SpecOrderNameAddressDetails@1003 : Text;
    BEGIN
      if Location.GET(LocationCode) then
        SpecOrderNameAddressDetails :=
          Location.Name + Location."Name 2" +
          Location.Address + Location."Address 2" +
          Location."Post Code" + Location.City +
          Location.Contact
      else begin
        CompanyInfo.GET;
        SpecOrderNameAddressDetails :=
          CompanyInfo."Ship-to Name" + CompanyInfo."Ship-to Name 2" +
          CompanyInfo."Ship-to Address" + CompanyInfo."Ship-to Address 2" +
          CompanyInfo."Ship-to Post Code" + CompanyInfo."Ship-to City" +
          CompanyInfo."Ship-to Contact";
      end;
      if NameAddressDetails = '' then
        NameAddressDetails := SpecOrderNameAddressDetails;
      exit(NameAddressDetails = SpecOrderNameAddressDetails);
    END;

    LOCAL PROCEDURE InitShipReceiveDetails@23();
    BEGIN
      PrevShipToCode := '';
      PrevPurchCode := '';
      PrevLocationCode := '';
      NameAddressDetails := '';
    END;

    BEGIN
    END.
  }
}

