OBJECT Table 900 Assembly Header
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    DataCaptionFields="No.",Description;
    OnInsert=VAR
               InvtAdjmtEntryOrder@1003 : Record "Inventory Adjmt. Entry (Order)";
               NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
             BEGIN
               CheckIsNotAsmToOrder;

               AssemblySetup.GET;

               if "No." = '' then begin
                 TestNoSeries;
                 NoSeriesMgt.InitSeries(GetNoSeriesCode,xRec."No. Series","Posting Date","No.","No. Series");
               end;

               if "Document Type" = "Document Type"::Order then begin
                 InvtAdjmtEntryOrder.SETRANGE("Order Type",InvtAdjmtEntryOrder."Order Type"::Assembly);
                 InvtAdjmtEntryOrder.SETRANGE("Order No.","No.");
                 if not InvtAdjmtEntryOrder.ISEMPTY then
                   ERROR(Text001,FORMAT("Document Type"),"No.");
               end;

               InitRecord;

               if GETFILTER("Item No.") <> '' then
                 if GETRANGEMIN("Item No.") = GETRANGEMAX("Item No.") then
                   VALIDATE("Item No.",GETRANGEMIN("Item No."));
             END;

    OnModify=BEGIN
               AssemblyHeaderReserve.VerifyChange(Rec,xRec);
             END;

    OnDelete=BEGIN
               CheckIsNotAsmToOrder;

               AssemblyHeaderReserve.DeleteLine(Rec);
               CALCFIELDS("Reserved Qty. (Base)");
               TESTFIELD("Reserved Qty. (Base)",0);

               DeleteAssemblyLines;
             END;

    OnRename=BEGIN
               ERROR(Text009,TABLECAPTION);
             END;

    CaptionML=ENU=Assembly Header;
    LookupPageID="Assembly List";
    DrillDownPageID="Assembly List";
  }
  FIELDS
  {
    { 1   ;   ;Document Type       ;Option        ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Document Type;
                                                   OptionCaptionML=ENU=Quote,Order,,,Blanket Order;
                                                   OptionString=Quote,Order,,,"Blanket Order" }
    { 2   ;   ;No.                 ;Code20        ;AltSearchField=Search Description;
                                                   OnValidate=VAR
                                                                NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                if "No." <> xRec."No." then begin
                                                                  AssemblySetup.GET;
                                                                  NoSeriesMgt.TestManual(GetNoSeriesCode);
                                                                  "No. Series" := '';
                                                                end;
                                                              END;

                                                   ValidateTableRelation=false;
                                                   CaptionML=ENU=No. }
    { 3   ;   ;Description         ;Text50        ;OnValidate=BEGIN
                                                                "Search Description" := Description;
                                                              END;

                                                   CaptionML=ENU=Description }
    { 4   ;   ;Search Description  ;Code50        ;CaptionML=ENU=Search Description }
    { 5   ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 6   ;   ;Creation Date       ;Date          ;CaptionML=ENU=Creation Date;
                                                   Editable=false }
    { 7   ;   ;Last Date Modified  ;Date          ;CaptionML=ENU=Last Date Modified;
                                                   Editable=false }
    { 10  ;   ;Item No.            ;Code20        ;TableRelation=Item WHERE (Type=CONST(Inventory));
                                                   OnValidate=BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                TestStatusOpen;
                                                                SetCurrentFieldNum(FIELDNO("Item No."));
                                                                if "Item No." <> '' then begin
                                                                  SetDescriptionsFromItem;
                                                                  "Unit Cost" := GetUnitCost;
                                                                  "Overhead Rate" := Item."Overhead Rate";
                                                                  "Inventory Posting Group" := Item."Inventory Posting Group";
                                                                  "Gen. Prod. Posting Group" := Item."Gen. Prod. Posting Group";
                                                                  "Indirect Cost %" := Item."Indirect Cost %";
                                                                  VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                  SetDim;
                                                                  ValidateDates(FIELDNO("Due Date"),true);
                                                                  GetDefaultBin;
                                                                end;
                                                                AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Item No."),true,CurrFieldNo,CurrentFieldNum);
                                                                AssemblyHeaderReserve.VerifyChange(Rec,xRec);
                                                                ClearCurrentFieldNum(FIELDNO("Item No."));
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 12  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."),
                                                                                            Code=FIELD("Variant Code"));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                TestStatusOpen;
                                                                SetCurrentFieldNum(FIELDNO("Variant Code"));
                                                                if "Variant Code" = '' then
                                                                  SetDescriptionsFromItem
                                                                else begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                  "Description 2" := ItemVariant."Description 2";
                                                                end;
                                                                ValidateDates(FIELDNO("Due Date"),true);
                                                                AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Variant Code"),false,CurrFieldNo,CurrentFieldNum);
                                                                AssemblyHeaderReserve.VerifyChange(Rec,xRec);
                                                                GetDefaultBin;
                                                                VALIDATE("Unit Cost",GetUnitCost);
                                                                ClearCurrentFieldNum(FIELDNO("Variant Code"));
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 15  ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group }
    { 16  ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 19  ;   ;Comment             ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Assembly Comment Line" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                    "Document No."=FIELD("No.")));
                                                   CaptionML=ENU=Comment;
                                                   Editable=false }
    { 20  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE ("Use As In-Transit"=CONST(false));
                                                   OnValidate=BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                TestStatusOpen;
                                                                SetCurrentFieldNum(FIELDNO("Location Code"));
                                                                ValidateDates(FIELDNO("Due Date"),true);
                                                                AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Location Code"),false,CurrFieldNo,CurrentFieldNum);
                                                                AssemblyHeaderReserve.VerifyChange(Rec,xRec);
                                                                GetDefaultBin;
                                                                VALIDATE("Unit Cost",GetUnitCost);
                                                                ClearCurrentFieldNum(FIELDNO("Location Code"));
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 21  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 22  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE ("Global Dimension No."=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 23  ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                ATOLink@1000 : Record "Assemble-to-Order Link";
                                                                SalesHeader@1001 : Record "Sales Header";
                                                              BEGIN
                                                                if ATOLink.GET("Document Type","No.") and (CurrFieldNo = FIELDNO("Posting Date")) then
                                                                  if SalesHeader.GET(ATOLink."Document Type",ATOLink."Document No.") and ("Posting Date" > SalesHeader."Posting Date") then
                                                                    ERROR(PostingDateLaterErr,"No.",SalesHeader."No.");
                                                              END;

                                                   CaptionML=ENU=Posting Date }
    { 24  ;   ;Due Date            ;Date          ;OnValidate=BEGIN
                                                                ValidateDueDate("Due Date",true);
                                                              END;

                                                   CaptionML=ENU=Due Date }
    { 25  ;   ;Starting Date       ;Date          ;OnValidate=BEGIN
                                                                ValidateStartDate("Starting Date",true);
                                                              END;

                                                   CaptionML=ENU=Starting Date }
    { 27  ;   ;Ending Date         ;Date          ;OnValidate=BEGIN
                                                                ValidateEndDate("Ending Date",true);
                                                              END;

                                                   CaptionML=ENU=Ending Date }
    { 33  ;   ;Bin Code            ;Code20        ;TableRelation=IF (Quantity=FILTER(<0)) "Bin Content"."Bin Code" WHERE ("Location Code"=FIELD("Location Code"),
                                                                                                                          "Item No."=FIELD("Item No."),
                                                                                                                          "Variant Code"=FIELD("Variant Code"))
                                                                                                                          ELSE Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                ValidateBinCode("Bin Code");
                                                              END;

                                                   OnLookup=VAR
                                                              WMSManagement@1000 : Codeunit "WMS Management";
                                                              BinCode@1001 : Code[20];
                                                            BEGIN
                                                              if Quantity < 0 then
                                                                BinCode := WMSManagement.BinContentLookUp("Location Code","Item No.","Variant Code",'',"Bin Code")
                                                              else
                                                                BinCode := WMSManagement.BinLookUp("Location Code","Item No.","Variant Code",'');

                                                              if BinCode <> '' then
                                                                VALIDATE("Bin Code",BinCode);
                                                            END;

                                                   CaptionML=ENU=Bin Code }
    { 40  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                TestStatusOpen;

                                                                SetCurrentFieldNum(FIELDNO(Quantity));
                                                                RoundQty(Quantity);
                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                                if Quantity < "Assembled Quantity" then
                                                                  ERROR(Text002,FIELDCAPTION(Quantity),FIELDCAPTION("Assembled Quantity"),"Assembled Quantity");

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);
                                                                InitRemainingQty;
                                                                InitQtyToAssemble;
                                                                VALIDATE("Quantity to Assemble");

                                                                AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO(Quantity),ReplaceLinesFromBOM,CurrFieldNo,CurrentFieldNum);
                                                                AssemblyHeaderReserve.VerifyQuantity(Rec,xRec);

                                                                ClearCurrentFieldNum(FIELDNO(Quantity));
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 41  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Remaining Quantity  ;Decimal       ;CaptionML=ENU=Remaining Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 43  ;   ;Remaining Quantity (Base);Decimal  ;CaptionML=ENU=Remaining Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 44  ;   ;Assembled Quantity  ;Decimal       ;AccessByPermission=TableData "BOM Component"=R;
                                                   CaptionML=ENU=Assembled Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 45  ;   ;Assembled Quantity (Base);Decimal  ;CaptionML=ENU=Assembled Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 46  ;   ;Quantity to Assemble;Decimal       ;OnValidate=VAR
                                                                ATOLink@1000 : Record "Assemble-to-Order Link";
                                                              BEGIN
                                                                SetCurrentFieldNum(FIELDNO("Quantity to Assemble"));
                                                                RoundQty("Quantity to Assemble");
                                                                if "Quantity to Assemble" > "Remaining Quantity" then
                                                                  ERROR(Text003,
                                                                    FIELDCAPTION("Quantity to Assemble"),FIELDCAPTION("Remaining Quantity"),"Remaining Quantity");

                                                                if "Quantity to Assemble" <> xRec."Quantity to Assemble" then
                                                                  ATOLink.CheckQtyToAsm(Rec);

                                                                VALIDATE("Quantity to Assemble (Base)",CalcBaseQty("Quantity to Assemble"));
                                                                AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Quantity to Assemble"),false,CurrFieldNo,CurrentFieldNum);
                                                                ClearCurrentFieldNum(FIELDNO("Quantity to Assemble"));
                                                              END;

                                                   CaptionML=ENU=Quantity to Assemble;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 47  ;   ;Quantity to Assemble (Base);Decimal;CaptionML=ENU=Quantity to Assemble (Base);
                                                   DecimalPlaces=0:5 }
    { 48  ;   ;Reserved Quantity   ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry".Quantity WHERE ("Source ID"=FIELD("No."),
                                                                                                       "Source Type"=CONST(900),
                                                                                                       "Source Subtype"=FIELD("Document Type"),
                                                                                                       "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Quantity;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 49  ;   ;Reserved Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Reservation Entry"."Quantity (Base)" WHERE ("Source ID"=FIELD("No."),
                                                                                                                "Source Type"=CONST(900),
                                                                                                                "Source Subtype"=FIELD("Document Type"),
                                                                                                                "Reservation Status"=CONST(Reservation)));
                                                   CaptionML=ENU=Reserved Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 50  ;   ;Planning Flexibility;Option        ;OnValidate=BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                TestStatusOpen;
                                                                if "Planning Flexibility" <> xRec."Planning Flexibility" then
                                                                  AssemblyHeaderReserve.UpdatePlanningFlexibility(Rec);
                                                              END;

                                                   CaptionML=ENU=Planning Flexibility;
                                                   OptionCaptionML=ENU=Unlimited,None;
                                                   OptionString=Unlimited,None }
    { 51  ;   ;MPS Order           ;Boolean       ;OnValidate=BEGIN
                                                                TESTFIELD(Status,Status::Open);
                                                              END;

                                                   CaptionML=ENU=MPS Order }
    { 54  ;   ;Assemble to Order   ;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Exist("Assemble-to-Order Link" WHERE ("Assembly Document Type"=FIELD("Document Type"),
                                                                                                     "Assembly Document No."=FIELD("No.")));
                                                   CaptionML=ENU=Assemble to Order;
                                                   Editable=false }
    { 63  ;   ;Posting No.         ;Code20        ;CaptionML=ENU=Posting No.;
                                                   Editable=false }
    { 65  ;   ;Unit Cost           ;Decimal       ;OnValidate=VAR
                                                                SkuItemUnitCost@1000 : Decimal;
                                                              BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItem;

                                                                  if Item."Costing Method" = Item."Costing Method"::Standard then begin
                                                                    SkuItemUnitCost := GetUnitCost;
                                                                    if "Unit Cost" <> SkuItemUnitCost then
                                                                      ERROR(Text005,
                                                                        FIELDCAPTION("Unit Cost"),
                                                                        FIELDCAPTION("Cost Amount"),
                                                                        Item.FIELDCAPTION("Costing Method"),
                                                                        Item."Costing Method");
                                                                  end;
                                                                end;

                                                                "Cost Amount" := ROUND(Quantity * "Unit Cost");
                                                              END;

                                                   CaptionML=ENU=Unit Cost;
                                                   MinValue=0;
                                                   AutoFormatType=2 }
    { 67  ;   ;Cost Amount         ;Decimal       ;CaptionML=ENU=Cost Amount;
                                                   Editable=false;
                                                   AutoFormatType=1 }
    { 68  ;   ;Rolled-up Assembly Cost;Decimal    ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Assembly Line"."Cost Amount" WHERE ("Document Type"=FIELD("Document Type"),
                                                                                                        "Document No."=FIELD("No."),
                                                                                                        Type=FILTER(Item|Resource)));
                                                   CaptionML=ENU=Rolled-up Assembly Cost }
    { 75  ;   ;Indirect Cost %     ;Decimal       ;CaptionML=ENU=Indirect Cost %;
                                                   DecimalPlaces=0:5 }
    { 76  ;   ;Overhead Rate       ;Decimal       ;CaptionML=ENU=Overhead Rate;
                                                   DecimalPlaces=0:5 }
    { 80  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                UOMMgt@1001 : Codeunit "Unit of Measure Management";
                                                              BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                TESTFIELD("Assembled Quantity",0);
                                                                TestStatusOpen;
                                                                SetCurrentFieldNum(FIELDNO("Unit of Measure Code"));

                                                                GetItem;
                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");
                                                                "Unit Cost" := GetUnitCost;
                                                                "Overhead Rate" := RoundUnitAmount(Item."Overhead Rate" * "Qty. per Unit of Measure");

                                                                AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Unit of Measure Code"),ReplaceLinesFromBOM,CurrFieldNo,CurrentFieldNum);
                                                                ClearCurrentFieldNum(FIELDNO("Unit of Measure Code"));

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 81  ;   ;Qty. per Unit of Measure;Decimal   ;OnValidate=BEGIN
                                                                CheckIsNotAsmToOrder;
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 107 ;   ;No. Series          ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                              END;

                                                   CaptionML=ENU=No. Series;
                                                   Editable=false }
    { 108 ;   ;Posting No. Series  ;Code20        ;TableRelation="No. Series";
                                                   OnValidate=VAR
                                                                NoSeriesMgt@1000 : Codeunit NoSeriesManagement;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                if "Posting No. Series" <> '' then begin
                                                                  AssemblySetup.GET;
                                                                  TestNoSeries;
                                                                  NoSeriesMgt.TestSeries(GetPostingNoSeriesCode,"Posting No. Series");
                                                                end;
                                                                TESTFIELD("Posting No.",'');
                                                              END;

                                                   OnLookup=VAR
                                                              AsmHeader@1000 : Record "Assembly Header";
                                                              NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
                                                            BEGIN
                                                              AsmHeader := Rec;
                                                              AssemblySetup.GET;
                                                              TestNoSeries;
                                                              if NoSeriesMgt.LookupSeries(GetPostingNoSeriesCode,"Posting No. Series") then
                                                                VALIDATE("Posting No. Series");
                                                              Rec := AsmHeader;
                                                            END;

                                                   CaptionML=ENU=Posting No. Series }
    { 120 ;   ;Status              ;Option        ;CaptionML=ENU=Status;
                                                   OptionCaptionML=ENU=Open,Released;
                                                   OptionString=Open,Released;
                                                   Editable=false }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=VAR
                                                                DimMgt@1000 : Codeunit DimensionManagement;
                                                              BEGIN
                                                                SetCurrentFieldNum(FIELDNO("Dimension Set ID"));
                                                                if "Dimension Set ID" <> xRec."Dimension Set ID" then
                                                                  AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Dimension Set ID"),false,CurrFieldNo,CurrentFieldNum);
                                                                ClearCurrentFieldNum(FIELDNO("Dimension Set ID"));
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=false }
    { 9000;   ;Assigned User ID    ;Code50        ;TableRelation="User Setup";
                                                   CaptionML=ENU=Assigned User ID }
  }
  KEYS
  {
    {    ;"Document Type","No."                   ;Clustered=true }
    {    ;"Document Type","Item No.","Variant Code","Location Code","Due Date";
                                                   SumIndexFields="Remaining Quantity (Base)" }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      AssemblySetup@1000 : Record "Assembly Setup";
      Text001@1003 : TextConst '@@@="%1 = Document Type, %2 = No.";ENU=%1 %2 cannot be created, because it already exists or has been posted.';
      Text002@1008 : TextConst 'ENU=%1 cannot be lower than the %2, which is %3.';
      Text003@1009 : TextConst 'ENU=%1 cannot be higher than the %2, which is %3.';
      Item@1004 : Record Item;
      GLSetup@1005 : Record "General Ledger Setup";
      StockkeepingUnit@1013 : Record "Stockkeeping Unit";
      AssemblyHeaderReserve@1002 : Codeunit "Assembly Header-Reserve";
      AssemblyLineMgt@1010 : Codeunit "Assembly Line Management";
      GLSetupRead@1006 : Boolean;
      Text005@1001 : TextConst 'ENU=Changing %1 or %2 is not allowed when %3 is %4.';
      Text007@1007 : TextConst 'ENU=Nothing to handle.';
      Text009@1017 : TextConst 'ENU=You cannot rename an %1.';
      StatusCheckSuspended@1016 : Boolean;
      TestReservationDateConflict@1055 : Boolean;
      HideValidationDialog@1024 : Boolean;
      CurrentFieldNum@1011 : Integer;
      Text010@1012 : TextConst 'ENU=You have modified %1.';
      Text011@1014 : TextConst 'ENU=the %1 from %2 to %3';
      Text012@1021 : TextConst '@@@={Locked};ENU=%1 %2';
      Text013@1020 : TextConst 'ENU=Do you want to update %1?';
      Text014@1018 : TextConst 'ENU=%1 and %2';
      Text015@1019 : TextConst '@@@="%1 and %3 = Date Captions, %2 and %4 = Date Values";ENU=%1 %2 is before %3 %4.';
      PostingDateLaterErr@1022 : TextConst 'ENU=Posting Date on Assembly Order %1 must not be later than the Posting Date on Sales Order %2.';
      RowIdx@1023 : ',MatCost,ResCost,ResOvhd,AsmOvhd,Total';

    [Internal]
    PROCEDURE RefreshBOM@23();
    BEGIN
      AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,0,true,CurrFieldNo,0);
    END;

    [External]
    PROCEDURE InitRecord@15();
    VAR
      NoSeriesMgt@1001 : Codeunit NoSeriesManagement;
    BEGIN
      case "Document Type" of
        "Document Type"::Quote,"Document Type"::"Blanket Order":
          NoSeriesMgt.SetDefaultSeries("Posting No. Series",AssemblySetup."Posted Assembly Order Nos.");
        "Document Type"::Order:
          begin
            if ("No. Series" <> '') and
               (AssemblySetup."Assembly Order Nos." = AssemblySetup."Posted Assembly Order Nos.")
            then
              "Posting No. Series" := "No. Series"
            else
              NoSeriesMgt.SetDefaultSeries("Posting No. Series",AssemblySetup."Posted Assembly Order Nos.");
          end;
      end;

      "Creation Date" := WORKDATE;
      if "Due Date" = 0D then
        "Due Date" := WORKDATE;
      "Posting Date" := WORKDATE;
      if "Starting Date" = 0D then
        "Starting Date" := WORKDATE;
      if "Ending Date" = 0D then
        "Ending Date" := WORKDATE;

      SetDefaultLocation;
    END;

    [External]
    PROCEDURE InitRemainingQty@17();
    BEGIN
      "Remaining Quantity" := Quantity - "Assembled Quantity";
      "Remaining Quantity (Base)" := "Quantity (Base)" - "Assembled Quantity (Base)";
    END;

    [External]
    PROCEDURE InitQtyToAssemble@53();
    VAR
      ATOLink@1000 : Record "Assemble-to-Order Link";
    BEGIN
      "Quantity to Assemble" := "Remaining Quantity";
      "Quantity to Assemble (Base)" := "Remaining Quantity (Base)";
      ATOLink.InitQtyToAsm(Rec,"Quantity to Assemble","Quantity to Assemble (Base)");
    END;

    [External]
    PROCEDURE AssistEdit@1(OldAssemblyHeader@1000 : Record "Assembly Header") : Boolean;
    VAR
      AssemblyHeader@1001 : Record "Assembly Header";
      AssemblyHeader2@1002 : Record "Assembly Header";
      NoSeriesMgt@1003 : Codeunit NoSeriesManagement;
    BEGIN
      with AssemblyHeader do begin
        COPY(Rec);
        AssemblySetup.GET;
        TestNoSeries;
        if NoSeriesMgt.SelectSeries(GetNoSeriesCode,OldAssemblyHeader."No. Series","No. Series") then begin
          NoSeriesMgt.SetSeries("No.");
          if AssemblyHeader2.GET("Document Type","No.") then
            ERROR(Text001,FORMAT("Document Type"),"No.");
          Rec := AssemblyHeader;
          exit(true);
        end;
      end;
    END;

    LOCAL PROCEDURE TestNoSeries@6();
    BEGIN
      AssemblySetup.GET;
      case "Document Type" of
        "Document Type"::Quote:
          AssemblySetup.TESTFIELD("Assembly Quote Nos.");
        "Document Type"::Order:
          begin
            AssemblySetup.TESTFIELD("Posted Assembly Order Nos.");
            AssemblySetup.TESTFIELD("Assembly Order Nos.");
          end;
        "Document Type"::"Blanket Order":
          AssemblySetup.TESTFIELD("Blanket Assembly Order Nos.");
      end;
    END;

    LOCAL PROCEDURE GetNoSeriesCode@9() : Code[10];
    BEGIN
      case "Document Type" of
        "Document Type"::Quote:
          exit(AssemblySetup."Assembly Quote Nos.");
        "Document Type"::Order:
          exit(AssemblySetup."Assembly Order Nos.");
        "Document Type"::"Blanket Order":
          exit(AssemblySetup."Blanket Assembly Order Nos.");
      end;
    END;

    LOCAL PROCEDURE GetPostingNoSeriesCode@8() : Code[10];
    BEGIN
      exit(AssemblySetup."Posted Assembly Order Nos.");
    END;

    [External]
    PROCEDURE SetHideValidationDialog@13(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE DeleteAssemblyLines@29();
    VAR
      AssemblyLine@1000 : Record "Assembly Line";
      ReservMgt@1002 : Codeunit "Reservation Management";
    BEGIN
      AssemblyLine.SETRANGE("Document Type","Document Type");
      AssemblyLine.SETRANGE("Document No.","No.");
      if AssemblyLine.FIND('-') then begin
        ReservMgt.DeleteDocumentReservation(DATABASE::"Assembly Line","Document Type","No.",HideValidationDialog);
        repeat
          AssemblyLine.SuspendStatusCheck(true);
          AssemblyLine.DELETE(true);
        until AssemblyLine.NEXT = 0;
      end;
    END;

    [External]
    PROCEDURE ShowReservation@121();
    VAR
      Reservation@1001 : Page Reservation;
    BEGIN
      TESTFIELD("Item No.");
      CLEAR(Reservation);
      Reservation.SetAssemblyHeader(Rec);
      Reservation.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowReservationEntries@122(Modal@1000 : Boolean);
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
      ReservEngineMgt@1003 : Codeunit "Reservation Engine Mgt.";
    BEGIN
      TESTFIELD("Item No.");
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,true);
      AssemblyHeaderReserve.FilterReservFor(ReservEntry,Rec);
      if Modal then
        PAGE.RUNMODAL(PAGE::"Reservation Entries",ReservEntry)
      else
        PAGE.RUN(PAGE::"Reservation Entries",ReservEntry);
    END;

    [External]
    PROCEDURE AutoReserveAsmLine@16(AssemblyLine@1000 : Record "Assembly Line");
    BEGIN
      if AssemblyLine.Reserve = AssemblyLine.Reserve::Always then
        AssemblyLine.AutoReserve;
    END;

    [External]
    PROCEDURE SetTestReservationDateConflict@155(NewTestReservationDateConflict@1000 : Boolean);
    BEGIN
      TestReservationDateConflict := NewTestReservationDateConflict;
    END;

    LOCAL PROCEDURE CreateDim@4(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1005 : Record "Source Code Setup";
      DimMgt@1004 : Codeunit DimensionManagement;
      TableID@1002 : ARRAY [10] OF Integer;
      No@1003 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      "Dimension Set ID" :=
        DimMgt.GetRecDefaultDimID(
          Rec,CurrFieldNo,TableID,No,SourceCodeSetup.Assembly,
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);
      if "No." <> '' then
        DimMgt.UpdateGlobalDimFromDimSetID(
          "Dimension Set ID",
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    LOCAL PROCEDURE ValidateShortcutDimCode@7(FieldNumber@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    VAR
      DimMgt@1002 : Codeunit DimensionManagement;
    BEGIN
      DimMgt.ValidateShortcutDimValues(FieldNumber,ShortcutDimCode,"Dimension Set ID");

      if "No." <> '' then
        MODIFY;
    END;

    LOCAL PROCEDURE GetItem@5();
    BEGIN
      TESTFIELD("Item No.");
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetGLSetup@14();
    BEGIN
      if not GLSetupRead then
        GLSetup.GET;
      GLSetupRead := true;
    END;

    LOCAL PROCEDURE GetLocation@7300(VAR Location@1001 : Record Location;LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    [External]
    PROCEDURE FilterLinesWithItemToPlan@70(VAR Item@1000 : Record Item;DocumentType@1002 : Option);
    BEGIN
      RESET;
      SETCURRENTKEY("Document Type","Item No.","Variant Code","Location Code");
      SETRANGE("Document Type",DocumentType);
      SETRANGE("Item No.",Item."No.");
      SETFILTER("Variant Code",Item.GETFILTER("Variant Filter"));
      SETFILTER("Location Code",Item.GETFILTER("Location Filter"));
      SETFILTER("Due Date",Item.GETFILTER("Date Filter"));
      SETFILTER("Shortcut Dimension 1 Code",Item.GETFILTER("Global Dimension 1 Filter"));
      SETFILTER("Shortcut Dimension 2 Code",Item.GETFILTER("Global Dimension 2 Filter"));
      SETFILTER("Remaining Quantity (Base)",'<>0');
    END;

    [External]
    PROCEDURE FindLinesWithItemToPlan@68(VAR Item@1000 : Record Item;DocumentType@1002 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      exit(FIND('-'));
    END;

    [External]
    PROCEDURE LinesWithItemToPlanExist@67(VAR Item@1000 : Record Item;DocumentType@1002 : Option) : Boolean;
    BEGIN
      FilterLinesWithItemToPlan(Item,DocumentType);
      exit(not ISEMPTY);
    END;

    [Internal]
    PROCEDURE ShowDimensions@30();
    VAR
      DimMgt@1000 : Codeunit DimensionManagement;
      OldDimSetId@1001 : Integer;
    BEGIN
      OldDimSetId := "Dimension Set ID";
      "Dimension Set ID" :=
        DimMgt.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2',"Document Type","No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
      if OldDimSetId <> "Dimension Set ID" then begin
        SetCurrentFieldNum(FIELDNO("Dimension Set ID"));
        AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Dimension Set ID"),false,CurrFieldNo,CurrentFieldNum);
        ClearCurrentFieldNum(FIELDNO("Dimension Set ID"));
        MODIFY(true);
      end;
    END;

    [External]
    PROCEDURE ShowStatistics@48();
    BEGIN
      TESTFIELD("Item No.");
      PAGE.RUN(PAGE::"Assembly Order Statistics",Rec);
    END;

    [External]
    PROCEDURE SetDim@3();
    BEGIN
      CreateDim(DATABASE::Item,"Item No.");
    END;

    [External]
    PROCEDURE UpdateUnitCost@10();
    VAR
      CalculateStandardCost@1002 : Codeunit "Calculate Standard Cost";
      RolledUpAsmUnitCost@1000 : Decimal;
      OverHeadAmt@1001 : Decimal;
    BEGIN
      RolledUpAsmUnitCost := CalcRolledUpAsmUnitCost;
      OverHeadAmt := CalculateStandardCost.CalcOverHeadAmt(RolledUpAsmUnitCost,"Indirect Cost %","Overhead Rate");
      VALIDATE("Unit Cost",RoundUnitAmount(RolledUpAsmUnitCost + OverHeadAmt));
      MODIFY(true);
    END;

    LOCAL PROCEDURE CalcRolledUpAsmUnitCost@28() : Decimal;
    BEGIN
      TESTFIELD(Quantity);
      CALCFIELDS("Rolled-up Assembly Cost");

      exit("Rolled-up Assembly Cost" / Quantity);
    END;

    LOCAL PROCEDURE SetDefaultLocation@33();
    VAR
      AsmSetup@1000 : Record "Assembly Setup";
    BEGIN
      if AsmSetup.GET then
        if AsmSetup."Default Location for Orders" <> '' then
          if "Location Code" = '' then
            VALIDATE("Location Code",AsmSetup."Default Location for Orders");
    END;

    [External]
    PROCEDURE SetItemFilter@46(VAR Item@1000 : Record Item);
    BEGIN
      if "Due Date" = 0D then
        "Due Date" := WORKDATE;
      Item.SETRANGE("Date Filter",0D,"Due Date");
      Item.SETRANGE("Location Filter","Location Code");
      Item.SETRANGE("Variant Filter","Variant Code");
    END;

    [External]
    PROCEDURE ShowAssemblyList@42();
    VAR
      BOMComponent@1001 : Record "BOM Component";
    BEGIN
      TESTFIELD("Item No.");
      BOMComponent.SETRANGE("Parent Item No.","Item No.");
      PAGE.RUN(PAGE::"Assembly BOM",BOMComponent);
    END;

    LOCAL PROCEDURE CalcBaseQty@43(Qty@1000 : Decimal) : Decimal;
    VAR
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      exit(UOMMgt.CalcBaseQty(Qty,"Qty. per Unit of Measure"));
    END;

    [External]
    PROCEDURE RoundQty@45(VAR Qty@1000 : Decimal);
    VAR
      UOMMgt@1001 : Codeunit "Unit of Measure Management";
    BEGIN
      Qty := UOMMgt.RoundQty(Qty);
    END;

    LOCAL PROCEDURE GetSKU@5802() : Boolean;
    BEGIN
      if (StockkeepingUnit."Location Code" = "Location Code") and
         (StockkeepingUnit."Item No." = "Item No.") and
         (StockkeepingUnit."Variant Code" = "Variant Code")
      then
        exit(true);
      if StockkeepingUnit.GET("Location Code","Item No.","Variant Code") then
        exit(true);

      exit(false);
    END;

    LOCAL PROCEDURE GetUnitCost@51() : Decimal;
    VAR
      SkuItemUnitCost@1000 : Decimal;
    BEGIN
      if "Item No." = '' then
        exit(0);

      GetItem;
      if GetSKU then
        SkuItemUnitCost := StockkeepingUnit."Unit Cost" * "Qty. per Unit of Measure"
      else
        SkuItemUnitCost := Item."Unit Cost" * "Qty. per Unit of Measure";

      exit(RoundUnitAmount(SkuItemUnitCost));
    END;

    LOCAL PROCEDURE RoundUnitAmount@131(UnitAmount@1000 : Decimal) : Decimal;
    BEGIN
      GetGLSetup;

      exit(ROUND(UnitAmount,GLSetup."Unit-Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE CalcActualCosts@52(VAR ActCost@1006 : ARRAY [5] OF Decimal);
    VAR
      TempSourceInvtAdjmtEntryOrder@1005 : TEMPORARY Record "Inventory Adjmt. Entry (Order)";
      CalcInvtAdjmtOrder@1001 : Codeunit "Calc. Inventory Adjmt. - Order";
    BEGIN
      TempSourceInvtAdjmtEntryOrder.SetAsmOrder(Rec);
      CalcInvtAdjmtOrder.CalcActualUsageCosts(TempSourceInvtAdjmtEntryOrder,"Assembled Quantity (Base)",TempSourceInvtAdjmtEntryOrder);
      ActCost[RowIdx::MatCost] := TempSourceInvtAdjmtEntryOrder."Single-Level Material Cost";
      ActCost[RowIdx::ResCost] := TempSourceInvtAdjmtEntryOrder."Single-Level Capacity Cost";
      ActCost[RowIdx::ResOvhd] := TempSourceInvtAdjmtEntryOrder."Single-Level Cap. Ovhd Cost";
      ActCost[RowIdx::AsmOvhd] := TempSourceInvtAdjmtEntryOrder."Single-Level Mfg. Ovhd Cost";
    END;

    LOCAL PROCEDURE CalcStartDateFromEndDate@56(EndingDate@1000 : Date) : Date;
    VAR
      ReqLine@1004 : Record "Requisition Line";
      LeadTimeMgt@1002 : Codeunit "Lead-Time Management";
    BEGIN
      exit(
        LeadTimeMgt.PlannedStartingDate(
          "Item No.","Location Code","Variant Code",'',
          LeadTimeMgt.ManufacturingLeadTime("Item No.","Location Code","Variant Code"),
          ReqLine."Ref. Order Type"::Assembly,EndingDate));
    END;

    LOCAL PROCEDURE CalcEndDateFromStartDate@21(StartingDate@1002 : Date) : Date;
    VAR
      ReqLine@1001 : Record "Requisition Line";
      LeadTimeMgt@1000 : Codeunit "Lead-Time Management";
    BEGIN
      exit(
        LeadTimeMgt.PlannedEndingDate2(
          "Item No.","Location Code","Variant Code",'',
          LeadTimeMgt.ManufacturingLeadTime("Item No.","Location Code","Variant Code"),
          ReqLine."Ref. Order Type"::Assembly,StartingDate));
    END;

    LOCAL PROCEDURE CalcEndDateFromDueDate@31(DueDate@1002 : Date) : Date;
    VAR
      ReqLine@1001 : Record "Requisition Line";
      LeadTimeMgt@1000 : Codeunit "Lead-Time Management";
    BEGIN
      exit(
        LeadTimeMgt.PlannedEndingDate(
          "Item No.","Location Code","Variant Code",DueDate,'',ReqLine."Ref. Order Type"::Assembly));
    END;

    LOCAL PROCEDURE CalcDueDateFromEndDate@32(EndingDate@1002 : Date) : Date;
    VAR
      ReqLine@1001 : Record "Requisition Line";
      LeadTimeMgt@1000 : Codeunit "Lead-Time Management";
    BEGIN
      exit(
        LeadTimeMgt.PlannedDueDate(
          "Item No.","Location Code","Variant Code",EndingDate,'',ReqLine."Ref. Order Type"::Assembly));
    END;

    [Internal]
    PROCEDURE ValidateDates@34(FieldNumToCalculateFrom@1000 : Integer;DoNotValidateButJustAssign@1001 : Boolean);
    VAR
      NewDueDate@1002 : Date;
      NewEndDate@1003 : Date;
      NewStartDate@1004 : Date;
    BEGIN
      case FieldNumToCalculateFrom of
        FIELDNO("Due Date"):
          begin
            NewEndDate := CalcEndDateFromDueDate("Due Date");
            NewStartDate := CalcStartDateFromEndDate(NewEndDate);
            if DoNotValidateButJustAssign then begin
              "Ending Date" := NewEndDate;
              "Starting Date" := NewStartDate;
            end else begin
              ValidateEndDate(NewEndDate,false);
              ValidateStartDate(NewStartDate,false);
            end;
          end;
        FIELDNO("Ending Date"):
          begin
            NewDueDate := CalcDueDateFromEndDate("Ending Date");
            NewStartDate := CalcStartDateFromEndDate("Ending Date");
            if DoNotValidateButJustAssign then begin
              "Due Date" := NewDueDate;
              "Starting Date" := NewStartDate;
            end else begin
              ValidateStartDate(NewStartDate,false);
              if not IsAsmToOrder then begin
                if "Due Date" <> NewDueDate then
                  if GUIALLOWED and
                     CONFIRM(STRSUBSTNO(Text012,
                         STRSUBSTNO(Text010,
                           STRSUBSTNO(Text011,FIELDCAPTION("Ending Date"),xRec."Ending Date","Ending Date")),
                         STRSUBSTNO(Text013,
                           STRSUBSTNO(Text011,FIELDCAPTION("Due Date"),"Due Date",NewDueDate))),
                       true)
                  then
                    ValidateDueDate(NewDueDate,false);
              end;
            end;
          end;
        FIELDNO("Starting Date"):
          begin
            NewEndDate := CalcEndDateFromStartDate("Starting Date");
            NewDueDate := CalcDueDateFromEndDate(NewEndDate);
            if DoNotValidateButJustAssign then begin
              "Ending Date" := NewEndDate;
              "Due Date" := NewDueDate;
            end else
              if IsAsmToOrder then begin
                if "Ending Date" <> NewEndDate then
                  if GUIALLOWED and
                     CONFIRM(STRSUBSTNO(Text012,
                         STRSUBSTNO(Text010,
                           STRSUBSTNO(Text011,FIELDCAPTION("Starting Date"),xRec."Starting Date","Starting Date")),
                         STRSUBSTNO(Text013,
                           STRSUBSTNO(Text011,FIELDCAPTION("Ending Date"),"Ending Date",NewEndDate))),
                       true)
                  then
                    ValidateEndDate(NewEndDate,false);
              end else
                if ("Ending Date" <> NewEndDate) or ("Due Date" <> NewDueDate) then
                  if GUIALLOWED and
                     CONFIRM(STRSUBSTNO(Text012,
                         STRSUBSTNO(Text010,
                           STRSUBSTNO(Text011,FIELDCAPTION("Starting Date"),xRec."Starting Date","Starting Date")),
                         STRSUBSTNO(Text013,
                           STRSUBSTNO(Text014,
                             STRSUBSTNO(Text011,FIELDCAPTION("Ending Date"),"Ending Date",NewEndDate),
                             STRSUBSTNO(Text011,FIELDCAPTION("Due Date"),"Due Date",NewDueDate)))),
                       true)
                  then begin
                    ValidateEndDate(NewEndDate,false);
                    ValidateDueDate(NewDueDate,false);
                  end;
          end;
      end;
      if "Due Date" < "Ending Date" then
        ERROR(Text015,FIELDCAPTION("Due Date"),"Due Date",FIELDCAPTION("Ending Date"),"Ending Date");
      if "Ending Date" < "Starting Date" then
        ERROR(Text015,FIELDCAPTION("Ending Date"),"Ending Date",FIELDCAPTION("Starting Date"),"Starting Date");
    END;

    LOCAL PROCEDURE ValidateDueDate@35(NewDueDate@1001 : Date;CallValidateOnOtherDates@1000 : Boolean);
    VAR
      ReservationCheckDateConfl@1002 : Codeunit "Reservation-Check Date Confl.";
    BEGIN
      "Due Date" := NewDueDate;
      CheckIsNotAsmToOrder;
      TestStatusOpen;

      if CallValidateOnOtherDates then
        ValidateDates(FIELDNO("Due Date"),false);
      if (xRec."Due Date" <> "Due Date") and (Quantity <> 0) then
        ReservationCheckDateConfl.AssemblyHeaderCheck(Rec,(CurrFieldNo <> 0) or TestReservationDateConflict);
    END;

    LOCAL PROCEDURE ValidateEndDate@37(NewEndDate@1001 : Date;CallValidateOnOtherDates@1000 : Boolean);
    BEGIN
      "Ending Date" := NewEndDate;
      TestStatusOpen;

      if CallValidateOnOtherDates then
        ValidateDates(FIELDNO("Ending Date"),false);
    END;

    LOCAL PROCEDURE ValidateStartDate@39(NewStartDate@1000 : Date;CallValidateOnOtherDates@1001 : Boolean);
    BEGIN
      "Starting Date" := NewStartDate;
      TestStatusOpen;
      SetCurrentFieldNum(FIELDNO("Starting Date"));

      AssemblyLineMgt.UpdateAssemblyLines(Rec,xRec,FIELDNO("Starting Date"),false,CurrFieldNo,CurrentFieldNum);
      ClearCurrentFieldNum(FIELDNO("Starting Date"));
      if CallValidateOnOtherDates then
        ValidateDates(FIELDNO("Starting Date"),false);
    END;

    LOCAL PROCEDURE CheckBin@36();
    VAR
      BinContent@1000 : Record "Bin Content";
      Bin@1001 : Record Bin;
      Location@1002 : Record Location;
    BEGIN
      if "Bin Code" <> '' then begin
        GetLocation(Location,"Location Code");
        if not Location."Directed Put-away and Pick" then
          exit;

        if BinContent.GET(
             "Location Code","Bin Code",
             "Item No.","Variant Code","Unit of Measure Code")
        then
          BinContent.CheckWhseClass(false)
        else begin
          Bin.GET("Location Code","Bin Code");
          Bin.CheckWhseClass("Item No.",false);
        end;
      end;
    END;

    [External]
    PROCEDURE GetDefaultBin@50();
    VAR
      Location@1001 : Record Location;
      WMSManagement@1000 : Codeunit "WMS Management";
    BEGIN
      if (Quantity * xRec.Quantity > 0) and
         ("Item No." = xRec."Item No.") and
         ("Location Code" = xRec."Location Code") and
         ("Variant Code" = xRec."Variant Code")
      then
        exit;

      "Bin Code" := '';
      if ("Location Code" <> '') and ("Item No." <> '') then begin
        GetLocation(Location,"Location Code");
        if GetFromAssemblyBin(Location,"Bin Code") then
          exit;

        if Location."Bin Mandatory" and not Location."Directed Put-away and Pick" then
          WMSManagement.GetDefaultBin("Item No.","Variant Code","Location Code","Bin Code");
      end;
    END;

    [External]
    PROCEDURE GetFromAssemblyBin@11(Location@1000 : Record Location;VAR BinCode@1001 : Code[20]) BinCodeNotEmpty : Boolean;
    BEGIN
      if Location."Bin Mandatory" then
        BinCode := Location."From-Assembly Bin Code";
      BinCodeNotEmpty := BinCode <> '';
    END;

    [External]
    PROCEDURE ValidateBinCode@12(NewBinCode@1002 : Code[20]);
    VAR
      WMSManagement@1001 : Codeunit "WMS Management";
      WhseIntegrationMgt@1000 : Codeunit "Whse. Integration Management";
    BEGIN
      "Bin Code" := NewBinCode;
      TestStatusOpen;

      if "Bin Code" <> '' then begin
        if Quantity < 0 then
          WMSManagement.FindBinContent("Location Code","Bin Code","Item No.","Variant Code",'')
        else
          WMSManagement.FindBin("Location Code","Bin Code",'');
        CALCFIELDS("Assemble to Order");
        if not "Assemble to Order" then
          WhseIntegrationMgt.CheckBinTypeCode(DATABASE::"Assembly Header",
            FIELDCAPTION("Bin Code"),
            "Location Code",
            "Bin Code",0);
        CheckBin;
      end;
    END;

    [External]
    PROCEDURE CreatePick@44(ShowRequestPage@1005 : Boolean;AssignedUserID@1010 : Code[50];SortingMethod@1009 : Option;SetBreakBulkFilter@1008 : Boolean;DoNotFillQtyToHandle@1007 : Boolean;PrintDocument@1006 : Boolean);
    VAR
      WhseSourceCreateDocument@1002 : Report "Whse.-Source - Create Document";
    BEGIN
      AssemblyLineMgt.CreateWhseItemTrkgForAsmLines(Rec);
      COMMIT;

      TESTFIELD(Status,Status::Released);
      if CompletelyPicked then
        ERROR(Text007);

      WhseSourceCreateDocument.SetAssemblyOrder(Rec);
      if not ShowRequestPage then
        WhseSourceCreateDocument.Initialize(AssignedUserID,SortingMethod,PrintDocument,DoNotFillQtyToHandle,SetBreakBulkFilter);
      WhseSourceCreateDocument.USEREQUESTPAGE(ShowRequestPage);
      WhseSourceCreateDocument.RUNMODAL;
      WhseSourceCreateDocument.GetResultMessage(2);
      CLEAR(WhseSourceCreateDocument);
    END;

    [External]
    PROCEDURE CreateInvtMovement@40(MakeATOInvtMvmt@1001 : Boolean;PrintDocumentForATOMvmt@1004 : Boolean;ShowErrorForATOMvmt@1003 : Boolean;VAR ATOMovementsCreated@1006 : Integer;VAR ATOTotalMovementsToBeCreated@1005 : Integer);
    VAR
      WhseRequest@1000 : Record "Warehouse Request";
      CreateInvtPutAwayPickMvmt@1002 : Report "Create Invt Put-away/Pick/Mvmt";
    BEGIN
      TESTFIELD(Status,Status::Released);

      WhseRequest.RESET;
      WhseRequest.SETCURRENTKEY("Source Document","Source No.");
      WhseRequest.SETRANGE("Source Document",WhseRequest."Source Document"::"Assembly Consumption");
      WhseRequest.SETRANGE("Source No.","No.");
      CreateInvtPutAwayPickMvmt.SETTABLEVIEW(WhseRequest);

      if MakeATOInvtMvmt then begin
        CreateInvtPutAwayPickMvmt.InitializeRequest(false,false,true,PrintDocumentForATOMvmt,ShowErrorForATOMvmt);
        CreateInvtPutAwayPickMvmt.SuppressMessages(true);
        CreateInvtPutAwayPickMvmt.USEREQUESTPAGE(false);
      end;

      CreateInvtPutAwayPickMvmt.RUNMODAL;
      CreateInvtPutAwayPickMvmt.GetMovementCounters(ATOMovementsCreated,ATOTotalMovementsToBeCreated);
    END;

    [External]
    PROCEDURE CompletelyPicked@54() : Boolean;
    BEGIN
      exit(AssemblyLineMgt.CompletelyPicked(Rec));
    END;

    [External]
    PROCEDURE IsInbound@97() : Boolean;
    BEGIN
      if "Document Type" in ["Document Type"::Order,"Document Type"::Quote,"Document Type"::"Blanket Order"] then
        exit("Quantity (Base)" > 0);

      exit(false);
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@57();
    VAR
      AssemblyHeaderReserve@1000 : Codeunit "Assembly Header-Reserve";
    BEGIN
      TESTFIELD("No.");
      TESTFIELD("Quantity (Base)");
      AssemblyHeaderReserve.CallItemTracking(Rec);
    END;

    [External]
    PROCEDURE ItemExists@59(ItemNo@1000 : Code[20]) : Boolean;
    VAR
      Item2@1001 : Record Item;
    BEGIN
      if not Item2.GET(ItemNo) then
        exit(false);
      exit(true);
    END;

    LOCAL PROCEDURE TestStatusOpen@60();
    BEGIN
      if StatusCheckSuspended then
        exit;
      TESTFIELD(Status,Status::Open);
    END;

    [External]
    PROCEDURE SuspendStatusCheck@58(Suspend@1000 : Boolean);
    BEGIN
      StatusCheckSuspended := Suspend;
    END;

    [External]
    PROCEDURE IsStatusCheckSuspended@2() : Boolean;
    BEGIN
      exit(StatusCheckSuspended);
    END;

    [External]
    PROCEDURE ShowTracking@61();
    VAR
      OrderTracking@1000 : Page "Order Tracking";
    BEGIN
      OrderTracking.SetAsmHeader(Rec);
      OrderTracking.RUNMODAL;
    END;

    [External]
    PROCEDURE ShowAsmToOrder@62();
    VAR
      ATOLink@1000 : Record "Assemble-to-Order Link";
    BEGIN
      ATOLink.ShowSales(Rec);
    END;

    [External]
    PROCEDURE IsAsmToOrder@63() : Boolean;
    BEGIN
      CALCFIELDS("Assemble to Order");
      exit("Assemble to Order");
    END;

    LOCAL PROCEDURE CheckIsNotAsmToOrder@64();
    BEGIN
      CALCFIELDS("Assemble to Order");
      TESTFIELD("Assemble to Order",false);
    END;

    [External]
    PROCEDURE IsStandardCostItem@65() : Boolean;
    BEGIN
      if "Item No." = '' then
        exit(false);
      GetItem;
      exit(Item."Costing Method" = Item."Costing Method"::Standard);
    END;

    [Internal]
    PROCEDURE ShowAvailability@18();
    VAR
      TempAssemblyHeader@1000 : TEMPORARY Record "Assembly Header";
      TempAssemblyLine@1001 : TEMPORARY Record "Assembly Line";
      AsmLineMgt@1002 : Codeunit "Assembly Line Management";
    BEGIN
      AsmLineMgt.CopyAssemblyData(Rec,TempAssemblyHeader,TempAssemblyLine);
      AsmLineMgt.ShowAvailability(true,TempAssemblyHeader,TempAssemblyLine);
    END;

    [External]
    PROCEDURE ShowDueDateBeforeWorkDateMsg@22();
    VAR
      TempAssemblyHeader@1002 : TEMPORARY Record "Assembly Header";
      TempAssemblyLine@1001 : TEMPORARY Record "Assembly Line";
      AsmLineMgt@1000 : Codeunit "Assembly Line Management";
    BEGIN
      AsmLineMgt.CopyAssemblyData(Rec,TempAssemblyHeader,TempAssemblyLine);
      if TempAssemblyLine.FINDSET then
        repeat
          if TempAssemblyLine."Due Date" < WORKDATE then begin
            AsmLineMgt.ShowDueDateBeforeWorkDateMsg(TempAssemblyLine."Due Date");
            exit;
          end;
        until TempAssemblyLine.NEXT = 0;
    END;

    [Internal]
    PROCEDURE AddBOMLine@19(BOMComp@1000 : Record "BOM Component");
    VAR
      AsmLine@1001 : Record "Assembly Line";
    BEGIN
      AssemblyLineMgt.AddBOMLine(Rec,AsmLine,BOMComp);
      AutoReserveAsmLine(AsmLine);
    END;

    LOCAL PROCEDURE ReplaceLinesFromBOM@26() : Boolean;
    VAR
      NoLinesWerePresent@1002 : Boolean;
      LinesPresent@1000 : Boolean;
      DeleteLines@1001 : Boolean;
    BEGIN
      NoLinesWerePresent := (xRec.Quantity * xRec."Qty. per Unit of Measure" = 0);
      LinesPresent := (Quantity * "Qty. per Unit of Measure" <> 0);
      DeleteLines := (Quantity = 0);

      exit((NoLinesWerePresent and LinesPresent) or DeleteLines);
    END;

    LOCAL PROCEDURE SetCurrentFieldNum@20(NewCurrentFieldNum@1000 : Integer) : Boolean;
    BEGIN
      if CurrentFieldNum = 0 then begin
        CurrentFieldNum := NewCurrentFieldNum;
        exit(true);
      end;
      exit(false);
    END;

    LOCAL PROCEDURE ClearCurrentFieldNum@24(NewCurrentFieldNum@1000 : Integer);
    BEGIN
      if CurrentFieldNum = NewCurrentFieldNum then
        CurrentFieldNum := 0;
    END;

    [External]
    PROCEDURE UpdateWarningOnLines@47();
    BEGIN
      AssemblyLineMgt.UpdateWarningOnLines(Rec);
    END;

    [External]
    PROCEDURE SetWarningsOff@27();
    BEGIN
      AssemblyLineMgt.SetWarningsOff;
    END;

    LOCAL PROCEDURE SetDescriptionsFromItem@41();
    BEGIN
      GetItem;
      Description := Item.Description;
      "Description 2" := Item."Description 2";
    END;

    [External]
    PROCEDURE CalcTotalCost@25(VAR ExpCost@1001 : ARRAY [5] OF Decimal) : Decimal;
    VAR
      Resource@1004 : Record Resource;
      AssemblyLine@1000 : Record "Assembly Line";
      DirectLineCost@1005 : Decimal;
    BEGIN
      GLSetup.GET;

      AssemblyLine.SETRANGE("Document Type","Document Type");
      AssemblyLine.SETRANGE("Document No.","No.");
      if AssemblyLine.FINDSET then
        repeat
          case AssemblyLine.Type of
            AssemblyLine.Type::Item:
              ExpCost[RowIdx::MatCost] += AssemblyLine."Cost Amount";
            AssemblyLine.Type::Resource:
              begin
                Resource.GET(AssemblyLine."No.");
                DirectLineCost :=
                  ROUND(
                    Resource."Direct Unit Cost" * AssemblyLine."Quantity (Base)",
                    GLSetup."Unit-Amount Rounding Precision");
                ExpCost[RowIdx::ResCost] += DirectLineCost;
                ExpCost[RowIdx::ResOvhd] += AssemblyLine."Cost Amount" - DirectLineCost;
              end;
          end
        until AssemblyLine.NEXT = 0;

      exit(ExpCost[RowIdx::MatCost] + ExpCost[RowIdx::ResCost] + ExpCost[RowIdx::ResOvhd]);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@138(VAR AssemblyHeader@1000 : Record "Assembly Header";FieldNo@1001 : Integer;TableID@1003 : ARRAY [10] OF Integer;No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    BEGIN
    END.
  }
}

