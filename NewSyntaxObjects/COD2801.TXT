OBJECT Codeunit 2801 Native - EDM Types
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      DummySalesLine@1000 : Record "Sales Line";

    PROCEDURE UpdateEDMTypes@5();
    VAR
      DummySalesLine@1001 : Record "Sales Line";
      GraphMgtGeneralTools@1000 : Codeunit "Graph Mgt - General Tools";
    BEGIN
      GraphMgtGeneralTools.InsertOrUpdateODataType(
        'NATIVE-SALESINVOICE-LINE','Native Sales Invoice Lines',GetSalesLineEDM(DummySalesLine."Document Type"::Invoice));
      GraphMgtGeneralTools.InsertOrUpdateODataType(
        'NATIVE-SALESQUOTE-LINE','Native Sales Quote Lines',GetSalesLineEDM(DummySalesLine."Document Type"::Quote));
      GraphMgtGeneralTools.InsertOrUpdateODataType(
        'NATIVE-SALESDOCUMENT-COUPON','Native Sales Document Coupons',GetSalesCouponEDM);
      GraphMgtGeneralTools.InsertOrUpdateODataType(
        'NATIVE-ATTACHMENT','Native Attachments',GetAttachmentEDM);
    END;

    PROCEDURE GetSalesLineEDM@2(DocumentType@1001 : Option) : Text;
    VAR
      NativeSetupAPIs@1000 : Codeunit "Native - Setup APIs";
      EDM@1003 : Text;
    BEGIN
      case DocumentType of
        DummySalesLine."Document Type"::Invoice:
          EDM := '<ComplexType Name="' + NativeSetupAPIs.GetAPIPrefix + 'SalesInvoiceLines">';
        DummySalesLine."Document Type"::Quote:
          EDM := '<ComplexType Name="' + NativeSetupAPIs.GetAPIPrefix + 'SalesQuoteLines">';
      end;

      EDM += '<Property Name="sequence" Type="Edm.Int32" Nullable="false" />' +
        '<Property Name="itemId" Type="Edm.Guid" Nullable="false" />' +
        '<Property Name="description" Type="Edm.String" MaxLength="' +
        FORMAT(MAXSTRLEN(DummySalesLine.Description)) + '" Nullable="false" />' +
        '<Property Name="quantity" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="unitPrice" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="discountPercent" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="discountAmount" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="taxGroupId" Type="Edm.Guid" Nullable="false" />' +
        '<Property Name="lineAmount" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="amountExcludingTax" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="amountIncludingTax" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="invoiceDiscountAmount" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="taxPercent" Type="Edm.Decimal" Nullable="false" />' +
        '<Property Name="totalTaxAmount" Type="Edm.Decimal" Nullable="false" />' +
        '</ComplexType>';

      exit(EDM);
    END;

    PROCEDURE ParseSalesLinesJSON@9(DocumentType@1004 : Option;SalesLinesCollectionJSON@1000 : Text;VAR TempSalesInvoiceLineAggregate@1001 : TEMPORARY Record "Sales Invoice Line Aggregate";DocumentId@1010 : GUID);
    VAR
      JSONManagement@1002 : Codeunit "JSON Management";
      LineJsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      I@1005 : Integer;
      NumberOfLines@1006 : Integer;
    BEGIN
      TempSalesInvoiceLineAggregate.RESET;
      TempSalesInvoiceLineAggregate.DELETEALL;
      JSONManagement.InitializeCollection(SalesLinesCollectionJSON);
      NumberOfLines := JSONManagement.GetCollectionCount;

      for I := 1 to NumberOfLines do begin
        JSONManagement.GetJObjectFromCollectionByIndex(LineJsonObject,I - 1);
        ParseSalesLineJSON(DocumentType,LineJsonObject,TempSalesInvoiceLineAggregate);
        TempSalesInvoiceLineAggregate."Document Id" := DocumentId;
        TempSalesInvoiceLineAggregate.INSERT(true);
      end;
    END;

    PROCEDURE WriteSalesLinesJSON@20(VAR TempSalesInvoiceLineAggregate@1000 : TEMPORARY Record "Sales Invoice Line Aggregate") : Text;
    VAR
      JSONManagement@1003 : Codeunit "JSON Management";
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonArray@1005 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      JSONManagement.InitializeEmptyCollection;
      JSONManagement.GetJsonArray(JsonArray);

      if TempSalesInvoiceLineAggregate.FINDSET then
        repeat
          SalesLineToJSON(TempSalesInvoiceLineAggregate,JsonObject);
          JSONManagement.AddJObjectToJArray(JsonArray,JsonObject);
        until TempSalesInvoiceLineAggregate.NEXT = 0;

      exit(JSONManagement.WriteCollectionToString);
    END;

    PROCEDURE ParseSalesLineJSON@3(DocumentType@1009 : Option;JsonObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR TempSalesInvoiceLineAggregate@1001 : TEMPORARY Record "Sales Invoice Line Aggregate");
    VAR
      Item@1004 : Record Item;
      SalesLineRecordRef@1005 : RecordRef;
      TargetFieldRef@1000 : FieldRef;
      SourceFieldRef@1008 : FieldRef;
    BEGIN
      CLEAR(TempSalesInvoiceLineAggregate);
      SalesLineRecordRef.GETTABLE(TempSalesInvoiceLineAggregate);

      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'sequence',TempSalesInvoiceLineAggregate.FIELDNO("Line No."),SalesLineRecordRef);
      if GetFieldFromJSON(JsonObject,'itemId',TempSalesInvoiceLineAggregate.FIELDNO("Item Id"),SalesLineRecordRef) then begin
        TargetFieldRef := SalesLineRecordRef.FIELD(TempSalesInvoiceLineAggregate.FIELDNO(Type));
        TargetFieldRef.VALUE := TempSalesInvoiceLineAggregate.Type::Item;

        SourceFieldRef := SalesLineRecordRef.FIELD(TempSalesInvoiceLineAggregate.FIELDNO("Item Id"));
        Item.SETRANGE(Id,FORMAT(SourceFieldRef.VALUE));
        Item.FINDFIRST;
        TargetFieldRef := SalesLineRecordRef.FIELD(TempSalesInvoiceLineAggregate.FIELDNO("No."));
        TargetFieldRef.VALUE := Item."No.";
      end;

      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'description',TempSalesInvoiceLineAggregate.FIELDNO(Description),SalesLineRecordRef);
      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'quantity',TempSalesInvoiceLineAggregate.FIELDNO(Quantity),SalesLineRecordRef);
      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'unitPrice',TempSalesInvoiceLineAggregate.FIELDNO("Unit Price"),SalesLineRecordRef);
      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'discountPercent',TempSalesInvoiceLineAggregate.FIELDNO("Line Discount %"),SalesLineRecordRef);
      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'discountAmount',TempSalesInvoiceLineAggregate.FIELDNO("Line Discount Amount"),SalesLineRecordRef);
      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'taxGroupId',TempSalesInvoiceLineAggregate.FIELDNO("Tax Id"),SalesLineRecordRef);
      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'lineAmount',TempSalesInvoiceLineAggregate.FIELDNO("Line Amount"),SalesLineRecordRef);

      case DocumentType of
        DummySalesLine."Document Type"::Quote:
          GetFieldFromJSONAndRegisterFieldSet(
            JsonObject,'shipmentDate',TempSalesInvoiceLineAggregate.FIELDNO("Shipment Date"),SalesLineRecordRef);
      end;

      // Get Read Only Fields
      GetFieldFromJSON(
        JsonObject,'amountIncludingTax',TempSalesInvoiceLineAggregate.FIELDNO("Line Amount Including Tax"),SalesLineRecordRef);
      GetFieldFromJSON(
        JsonObject,'amountExcludingTax',TempSalesInvoiceLineAggregate.FIELDNO("Line Amount Excluding Tax"),SalesLineRecordRef);
      GetFieldFromJSON(
        JsonObject,'invoiceDiscountAmount',TempSalesInvoiceLineAggregate.FIELDNO("Inv. Discount Amount"),SalesLineRecordRef);
      GetFieldFromJSON(JsonObject,'totalTaxAmount',TempSalesInvoiceLineAggregate.FIELDNO("Tax Amount"),SalesLineRecordRef);
      GetFieldFromJSON(JsonObject,'taxPercent',TempSalesInvoiceLineAggregate.FIELDNO("VAT %"),SalesLineRecordRef);

      SalesLineRecordRef.SETTABLE(TempSalesInvoiceLineAggregate);
    END;

    PROCEDURE SalesLineToJSON@4(VAR TempSalesInvoiceLineAggregate@1003 : TEMPORARY Record "Sales Invoice Line Aggregate";VAR JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1002 : Codeunit "JSON Management";
      SalesLineRecordRef@1001 : RecordRef;
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      SalesLineRecordRef.GETTABLE(TempSalesInvoiceLineAggregate);
      WriteFieldToJSON(JsonObject,'sequence',TempSalesInvoiceLineAggregate.FIELDNO("Line No."),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'itemId',TempSalesInvoiceLineAggregate.FIELDNO("Item Id"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'description',TempSalesInvoiceLineAggregate.FIELDNO(Description),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'unitOfMeasureId',TempSalesInvoiceLineAggregate.FIELDNO("Unit of Measure Id"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'quantity',TempSalesInvoiceLineAggregate.FIELDNO(Quantity),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'unitPrice',TempSalesInvoiceLineAggregate.FIELDNO("Unit Price"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'discountPercent',TempSalesInvoiceLineAggregate.FIELDNO("Line Discount %"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'discountAmount',TempSalesInvoiceLineAggregate.FIELDNO("Line Discount Amount"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'taxGroupId',TempSalesInvoiceLineAggregate.FIELDNO("Tax Id"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'taxPercent',TempSalesInvoiceLineAggregate.FIELDNO("VAT %"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'lineAmount',TempSalesInvoiceLineAggregate.FIELDNO("Line Amount"),SalesLineRecordRef);
      WriteFieldToJSON(
        JsonObject,'amountIncludingTax',TempSalesInvoiceLineAggregate.FIELDNO("Line Amount Including Tax"),SalesLineRecordRef);
      WriteFieldToJSON(
        JsonObject,'amountExcludingTax',TempSalesInvoiceLineAggregate.FIELDNO("Line Amount Excluding Tax"),SalesLineRecordRef);
      WriteFieldToJSON(
        JsonObject,'invoiceDiscountAmount',TempSalesInvoiceLineAggregate.FIELDNO("Inv. Discount Amount"),SalesLineRecordRef);
      WriteFieldToJSON(JsonObject,'totalTaxAmount',TempSalesInvoiceLineAggregate.FIELDNO("Tax Amount"),SalesLineRecordRef);
    END;

    PROCEDURE GetSalesCouponEDM@6() : Text;
    VAR
      DummyO365CouponClaim@1001 : Record "O365 Coupon Claim";
      NativeSetupAPIs@1000 : Codeunit "Native - Setup APIs";
    BEGIN
      exit(
        '<ComplexType Name="' + NativeSetupAPIs.GetAPIPrefix + 'SalesDocumentCoupons">' +
        '<Property Name="claimId" Type="Edm.Guid" Nullable="false" />' +
        '<Property Name="usage" Type="Edm.String" Nullable="true" />' +
        '<Property Name="offer" Type="Edm.String" MaxLength="' +
        FORMAT(MAXSTRLEN(DummyO365CouponClaim.Offer)) + '" Nullable="true" />' +
        '<Property Name="terms" Type="Edm.String" MaxLength="' +
        FORMAT(MAXSTRLEN(DummyO365CouponClaim.Terms)) + '" Nullable="true" />' +
        '<Property Name="code" Type="Edm.String" MaxLength="' +
        FORMAT(MAXSTRLEN(DummyO365CouponClaim.Code)) + '" Nullable="true" />' +
        '<Property Name="expiration" Type="Edm.Date" Nullable="true" />' +
        '<Property Name="discountValue" Type="Edm.Decimal" Nullable="true" />' +
        '<Property Name="discountType" Type="Edm.String" Nullable="true" />' +
        '<Property Name="createdDateTime" Type="Edm.DateTimeOffset" Nullable="true" />' +
        '<Property Name="amount" Type="Edm.Decimal" Nullable="true" />' +
        '</ComplexType>');
    END;

    PROCEDURE ParseCouponsJSON@24(ContactGraphId@1009 : Text[250];DocumentType@1004 : Option;DocumentNo@1000 : Code[20];CouponsJSON@1001 : Text);
    VAR
      O365CouponClaimDocLink@1003 : Record "O365 Coupon Claim Doc. Link";
      JSONManagement@1002 : Codeunit "JSON Management";
      NativeCoupons@1007 : Codeunit "Native - Coupons";
      LineJsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      I@1005 : Integer;
      NumberOfLines@1006 : Integer;
    BEGIN
      O365CouponClaimDocLink.SETRANGE("Document Type",DocumentType);
      O365CouponClaimDocLink.SETRANGE("Document No.",DocumentNo);
      O365CouponClaimDocLink.DELETEALL;
      JSONManagement.InitializeCollection(CouponsJSON);
      NumberOfLines := JSONManagement.GetCollectionCount;

      for I := 1 to NumberOfLines do begin
        JSONManagement.GetJObjectFromCollectionByIndex(LineJsonObject,I - 1);
        O365CouponClaimDocLink.RESET;
        ParseCouponJSON(LineJsonObject,O365CouponClaimDocLink);
        O365CouponClaimDocLink."Graph Contact ID" := ContactGraphId;
        O365CouponClaimDocLink."Document Type" := DocumentType;
        O365CouponClaimDocLink."Document No." := DocumentNo;

        NativeCoupons.CheckThatCouponCanBeAppliedToInvoice(O365CouponClaimDocLink);
        NativeCoupons.RemoveCouponFromOtherInvoices(O365CouponClaimDocLink);

        O365CouponClaimDocLink.INSERT(true);
      end;
    END;

    PROCEDURE ParseCouponJSON@1(JsonObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR O365CouponClaimDocLink@1001 : Record "O365 Coupon Claim Doc. Link");
    VAR
      CouponLinkRecordRef@1002 : RecordRef;
    BEGIN
      CouponLinkRecordRef.GETTABLE(O365CouponClaimDocLink);
      GetFieldFromJSON(JsonObject,'claimId',O365CouponClaimDocLink.FIELDNO("Claim ID"),CouponLinkRecordRef);
      CouponLinkRecordRef.SETTABLE(O365CouponClaimDocLink);
    END;

    PROCEDURE WriteCouponsJSON@23(DocumentType@1001 : Option;DocumentNo@1000 : Code[20]) : Text;
    VAR
      O365CouponClaimDocLink@1002 : Record "O365 Coupon Claim Doc. Link";
      O365CouponClaim@1007 : Record "O365 Coupon Claim";
      JSONManagement@1003 : Codeunit "JSON Management";
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonArray@1005 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
      O365CouponClaimDocLinkRecordRef@1006 : RecordRef;
    BEGIN
      JSONManagement.InitializeEmptyCollection;
      JSONManagement.GetJsonArray(JsonArray);

      O365CouponClaimDocLink.SETRANGE("Document Type",DocumentType);
      O365CouponClaimDocLink.SETRANGE("Document No.",DocumentNo);
      if O365CouponClaimDocLink.FINDSET then
        repeat
          O365CouponClaim.GET(O365CouponClaimDocLink."Claim ID",O365CouponClaimDocLink."Graph Contact ID");
          O365CouponClaimDocLinkRecordRef.GETTABLE(O365CouponClaim);
          CouponToJSON(O365CouponClaimDocLinkRecordRef,JsonObject);
          JSONManagement.AddJObjectToJArray(JsonArray,JsonObject);
        until O365CouponClaimDocLink.NEXT = 0;

      exit(JSONManagement.WriteCollectionToString);
    END;

    PROCEDURE WritePostedCouponsJSON@7(PostedInvoiceNo@1000 : Code[20]) : Text;
    VAR
      O365PostedCouponClaim@1004 : Record "O365 Posted Coupon Claim";
      JSONManagement@1003 : Codeunit "JSON Management";
      JsonObject@1002 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonArray@1001 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
      O365PostedCouponClaimRecordRef@1005 : RecordRef;
    BEGIN
      JSONManagement.InitializeEmptyCollection;
      JSONManagement.GetJsonArray(JsonArray);

      O365PostedCouponClaim.SETRANGE("Sales Invoice No.",PostedInvoiceNo);
      if O365PostedCouponClaim.FINDSET then
        repeat
          O365PostedCouponClaimRecordRef.GETTABLE(O365PostedCouponClaim);
          CouponToJSON(O365PostedCouponClaimRecordRef,JsonObject);
          JSONManagement.AddJObjectToJArray(JsonArray,JsonObject);
        until O365PostedCouponClaim.NEXT = 0;

      exit(JSONManagement.WriteCollectionToString);
    END;

    PROCEDURE CouponToJSON@12(VAR CouponRecordRef@1004 : RecordRef;VAR JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      DummyO365CouponClaim@1001 : Record "O365 Coupon Claim";
      JSONManagement@1002 : Codeunit "JSON Management";
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      WriteFieldToJSON(JsonObject,'claimId',DummyO365CouponClaim.FIELDNO("Claim ID"),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'graphContactId',DummyO365CouponClaim.FIELDNO("Graph Contact ID"),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'usage',DummyO365CouponClaim.FIELDNO(Usage),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'offer',DummyO365CouponClaim.FIELDNO(Offer),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'terms',DummyO365CouponClaim.FIELDNO(Terms),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'code',DummyO365CouponClaim.FIELDNO(Code),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'expiration',DummyO365CouponClaim.FIELDNO(Expiration),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'discountValue',DummyO365CouponClaim.FIELDNO("Discount Value"),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'discountType',DummyO365CouponClaim.FIELDNO("Discount Type"),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'createdDateTime',DummyO365CouponClaim.FIELDNO("Created DateTime"),CouponRecordRef);
      WriteFieldToJSON(JsonObject,'amount',DummyO365CouponClaim.FIELDNO("Amount Text"),CouponRecordRef);
    END;

    PROCEDURE GetAttachmentEDM@8() : Text;
    VAR
      DummyAttachmentEntityBuffer@1001 : Record "Attachment Entity Buffer";
      NativeSetupAPIs@1000 : Codeunit "Native - Setup APIs";
    BEGIN
      exit(
        '<ComplexType Name="' + NativeSetupAPIs.GetAPIPrefix + 'DocumentAttachments">' +
        '<Property Name="id" Type="Edm.Guid" Nullable="false" />' +
        '<Property Name="fileName" Type="Edm.String" MaxLength="' +
        FORMAT(MAXSTRLEN(DummyAttachmentEntityBuffer."File Name")) + '" Nullable="true" />' +
        '<Property Name="byteSize" Type="Edm.Int32" Nullable="true" />' +
        '</ComplexType>');
    END;

    PROCEDURE ParseAttachmentsJSON@14(AttachmentsCollectionJSON@1000 : Text;VAR TempAttachmentEntityBuffer@1001 : TEMPORARY Record "Attachment Entity Buffer";DocumentId@1003 : GUID);
    VAR
      JSONManagement@1002 : Codeunit "JSON Management";
      LineJsonObject@1008 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonLineIndex@1005 : Integer;
      NumberOfLines@1006 : Integer;
    BEGIN
      TempAttachmentEntityBuffer.RESET;
      TempAttachmentEntityBuffer.DELETEALL;
      JSONManagement.InitializeCollection(AttachmentsCollectionJSON);
      NumberOfLines := JSONManagement.GetCollectionCount;

      for JsonLineIndex := 1 to NumberOfLines do begin
        JSONManagement.GetJObjectFromCollectionByIndex(LineJsonObject,JsonLineIndex - 1);
        ParseAttachmentJSON(LineJsonObject,TempAttachmentEntityBuffer);
        TempAttachmentEntityBuffer."Document Id" := DocumentId;
        TempAttachmentEntityBuffer.INSERT(true);
      end;
    END;

    PROCEDURE WriteAttachmentsJSON@16(VAR TempAttachmentEntityBuffer@1000 : TEMPORARY Record "Attachment Entity Buffer") : Text;
    VAR
      JSONManagement@1003 : Codeunit "JSON Management";
      JsonObject@1004 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";
      JsonArray@1005 : DotNet "'Newtonsoft.Json, Version=9.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed'.Newtonsoft.Json.Linq.JArray";
    BEGIN
      JSONManagement.InitializeEmptyCollection;
      JSONManagement.GetJsonArray(JsonArray);

      if TempAttachmentEntityBuffer.FINDSET then
        repeat
          AttachmentToJSON(TempAttachmentEntityBuffer,JsonObject);
          JSONManagement.AddJObjectToJArray(JsonArray,JsonObject);
        until TempAttachmentEntityBuffer.NEXT = 0;

      exit(JSONManagement.WriteCollectionToString);
    END;

    PROCEDURE ParseAttachmentJSON@18(JsonObject@1006 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";VAR TempAttachmentEntityBuffer@1001 : TEMPORARY Record "Attachment Entity Buffer");
    VAR
      AttachmentRecordRef@1005 : RecordRef;
    BEGIN
      CLEAR(TempAttachmentEntityBuffer);
      AttachmentRecordRef.GETTABLE(TempAttachmentEntityBuffer);

      GetFieldFromJSONAndRegisterFieldSet(
        JsonObject,'id',TempAttachmentEntityBuffer.FIELDNO(Id),AttachmentRecordRef);

      // Get read only fields
      GetFieldFromJSON(
        JsonObject,'fileName',TempAttachmentEntityBuffer.FIELDNO("File Name"),AttachmentRecordRef);
      GetFieldFromJSON(
        JsonObject,'byteSize',TempAttachmentEntityBuffer.FIELDNO("Byte Size"),AttachmentRecordRef);

      AttachmentRecordRef.SETTABLE(TempAttachmentEntityBuffer);
    END;

    PROCEDURE AttachmentToJSON@19(VAR TempAttachmentEntityBuffer@1003 : TEMPORARY Record "Attachment Entity Buffer";VAR JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject");
    VAR
      JSONManagement@1002 : Codeunit "JSON Management";
      AttachmentRecordRef@1001 : RecordRef;
    BEGIN
      JSONManagement.InitializeEmptyObject;
      JSONManagement.GetJSONObject(JsonObject);
      AttachmentRecordRef.GETTABLE(TempAttachmentEntityBuffer);
      WriteFieldToJSON(JsonObject,'id',TempAttachmentEntityBuffer.FIELDNO(Id),AttachmentRecordRef);
      WriteFieldToJSON(JsonObject,'fileName',TempAttachmentEntityBuffer.FIELDNO("File Name"),AttachmentRecordRef);
      WriteFieldToJSON(JsonObject,'byteSize',TempAttachmentEntityBuffer.FIELDNO("Byte Size"),AttachmentRecordRef);
    END;

    LOCAL PROCEDURE GetFieldFromJSONAndRegisterFieldSet@15(JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1003 : Text;TargetFieldNumber@1002 : Integer;VAR TargetRecordRef@1007 : RecordRef) : Boolean;
    BEGIN
      if not GetFieldFromJSON(JsonObject,propertyName,TargetFieldNumber,TargetRecordRef) then
        exit(false);

      exit(true);
    END;

    LOCAL PROCEDURE GetFieldFromJSON@10(JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1003 : Text;TargetFieldNumber@1002 : Integer;VAR TargetRecordRef@1007 : RecordRef) : Boolean;
    VAR
      JSONManagement@1001 : Codeunit "JSON Management";
      TargetFieldRef@1006 : FieldRef;
    BEGIN
      TargetFieldRef := TargetRecordRef.FIELD(TargetFieldNumber);
      exit(JSONManagement.GetPropertyValueFromJObjectByPathSetToFieldRef(JsonObject,propertyName,TargetFieldRef));
    END;

    PROCEDURE GetFieldSetBufferWithAllFieldsSet@13(VAR TempFieldBuffer@1000 : TEMPORARY Record "Field Buffer");
    VAR
      DummySalesInvoiceLineAggregate@1001 : Record "Sales Invoice Line Aggregate";
    BEGIN
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Line No."),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO(Type),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Item Id"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("No."),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO(Description),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Unit of Measure Id"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Unit of Measure Code"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO(Quantity),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Unit Price"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Line Discount %"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Line Discount Amount"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Tax Id"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("VAT %"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Line Amount"),TempFieldBuffer);
      RegisterFieldSet(DummySalesInvoiceLineAggregate.FIELDNO("Shipment Date"),TempFieldBuffer);
    END;

    LOCAL PROCEDURE WriteFieldToJSON@17(JsonObject@1000 : DotNet "'Newtonsoft.Json'.Newtonsoft.Json.Linq.JObject";propertyName@1003 : Text;TargetFieldNumber@1002 : Integer;VAR TargetRecordRef@1007 : RecordRef) : Boolean;
    VAR
      JSONManagement@1001 : Codeunit "JSON Management";
      IntegrationManagement@1005 : Codeunit "Integration Management";
      ValueVariant@1004 : Variant;
      TargetFieldRef@1006 : FieldRef;
      GuidValue@1008 : GUID;
      OptionNumber@1009 : Integer;
    BEGIN
      TargetFieldRef := TargetRecordRef.FIELD(TargetFieldNumber);
      ValueVariant := TargetFieldRef.VALUE;
      case LOWERCASE(FORMAT(TargetFieldRef.TYPE)) of
        'guid':
          begin
            GuidValue := TargetFieldRef.VALUE;
            ValueVariant := LOWERCASE(IntegrationManagement.GetIdWithoutBrackets(GuidValue));
          end;
        'option':
          begin
            OptionNumber := TargetFieldRef.VALUE;
            OptionNumber += 1;
            ValueVariant := SELECTSTR(OptionNumber,TargetFieldRef.OPTIONSTRING);
          end;
      end;

      JSONManagement.AddJPropertyToJObject(JsonObject,propertyName,ValueVariant);

      exit(true);
    END;

    LOCAL PROCEDURE RegisterFieldSet@11(FieldNo@1000 : Integer;VAR TempFieldBuffer@1002 : TEMPORARY Record "Field Buffer");
    VAR
      LastOrderNo@1001 : Integer;
    BEGIN
      LastOrderNo := 1;
      if TempFieldBuffer.FINDLAST then
        LastOrderNo := TempFieldBuffer.Order + 1;

      CLEAR(TempFieldBuffer);
      TempFieldBuffer.Order := LastOrderNo;
      TempFieldBuffer."Table ID" := DATABASE::"Sales Invoice Line Aggregate";
      TempFieldBuffer."Field ID" := FieldNo;
      TempFieldBuffer.INSERT;
    END;

    BEGIN
    END.
  }
}

