OBJECT Codeunit 99000844 Job Jnl. Line-Reserve
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Reservation Entry"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text002@1001 : TextConst 'ENU=must be filled in when a quantity is reserved.';
      Text004@1003 : TextConst 'ENU=must not be changed when a quantity is reserved.';
      ReservMgt@1006 : Codeunit "Reservation Management";
      CreateReservEntry@1007 : Codeunit "Create Reserv. Entry";
      ReservEngineMgt@1008 : Codeunit "Reservation Engine Mgt.";
      DeleteItemTracking@1005 : Boolean;

    LOCAL PROCEDURE FilterReservFor@9(VAR FilterReservEntry@1000 : Record "Reservation Entry";JobJnlLine@1001 : Record "Job Journal Line");
    BEGIN
      FilterReservEntry.SetSourceFilter(
        DATABASE::"Job Journal Line",JobJnlLine."Entry Type",JobJnlLine."Journal Template Name",JobJnlLine."Line No.",false);
      FilterReservEntry.SetSourceFilter2(JobJnlLine."Journal Batch Name",0);
    END;

    LOCAL PROCEDURE FindReservEntry@1(JobJnlLine@1000 : Record "Job Journal Line";VAR ReservEntry@1001 : Record "Reservation Entry") : Boolean;
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,JobJnlLine);
      exit(ReservEntry.FIND('+'));
    END;

    LOCAL PROCEDURE ReservEntryExist@11(JobJnlLine@1000 : Record "Job Journal Line") : Boolean;
    VAR
      ReservEntry@1001 : Record "Reservation Entry";
    BEGIN
      ReservEngineMgt.InitFilterAndSortingLookupFor(ReservEntry,false);
      FilterReservFor(ReservEntry,JobJnlLine);
      ReservEntry.ClearTrackingFilter;
      exit(not ReservEntry.ISEMPTY);
    END;

    [External]
    PROCEDURE VerifyChange@62(VAR NewJobJnlLine@1000 : Record "Job Journal Line";VAR OldJobJnlLine@1001 : Record "Job Journal Line");
    VAR
      JobJnlLine@1005 : Record "Job Journal Line";
      TempReservEntry@1002 : Record "Reservation Entry";
      ShowError@1003 : Boolean;
      HasError@1004 : Boolean;
      PointerChanged@1009 : Boolean;
    BEGIN
      if NewJobJnlLine."Line No." = 0 then
        if not JobJnlLine.GET(
             NewJobJnlLine."Journal Template Name",
             NewJobJnlLine."Journal Batch Name",
             NewJobJnlLine."Line No.")
        then
          exit;

      NewJobJnlLine.CALCFIELDS("Reserved Qty. (Base)");
      ShowError := NewJobJnlLine."Reserved Qty. (Base)" <> 0;

      if NewJobJnlLine."Posting Date" = 0D then
        if not ShowError then
          HasError := true
        else
          NewJobJnlLine.FIELDERROR("Posting Date",Text002);

      if NewJobJnlLine."Job No." <> OldJobJnlLine."Job No." then
        if not ShowError then
          HasError := true
        else
          NewJobJnlLine.FIELDERROR("Job No.",Text004);

      if NewJobJnlLine."Entry Type" <> OldJobJnlLine."Entry Type" then
        if not ShowError then
          HasError := true
        else
          NewJobJnlLine.FIELDERROR("Entry Type",Text004);

      if NewJobJnlLine."Location Code" <> OldJobJnlLine."Location Code" then
        if not ShowError then
          HasError := true
        else
          NewJobJnlLine.FIELDERROR("Location Code",Text004);

      if (NewJobJnlLine.Type = NewJobJnlLine.Type::Item) and (OldJobJnlLine.Type = OldJobJnlLine.Type::Item) then
        if (NewJobJnlLine."Bin Code" <> OldJobJnlLine."Bin Code") and
           (not ReservMgt.CalcIsAvailTrackedQtyInBin(
              NewJobJnlLine."No.",NewJobJnlLine."Bin Code",
              NewJobJnlLine."Location Code",NewJobJnlLine."Variant Code",
              DATABASE::"Job Journal Line",NewJobJnlLine."Entry Type",
              NewJobJnlLine."Journal Template Name",NewJobJnlLine."Journal Batch Name",0,NewJobJnlLine."Line No."))
        then begin
          if ShowError then
            NewJobJnlLine.FIELDERROR("Bin Code",Text004);
          HasError := true;
        end;

      if NewJobJnlLine."Variant Code" <> OldJobJnlLine."Variant Code" then
        if not ShowError then
          HasError := true
        else
          NewJobJnlLine.FIELDERROR("Variant Code",Text004);

      if NewJobJnlLine."Line No." <> OldJobJnlLine."Line No." then
        HasError := true;

      if NewJobJnlLine."No." <> OldJobJnlLine."No." then
        HasError := true;

      if HasError then begin
        FindReservEntry(NewJobJnlLine,TempReservEntry);
        TempReservEntry.ClearTrackingFilter;

        PointerChanged := (NewJobJnlLine."Job No." <> OldJobJnlLine."Job No.") or
          (NewJobJnlLine."Entry Type" <> OldJobJnlLine."Entry Type") or
          (NewJobJnlLine."No." <> OldJobJnlLine."No.");

        if PointerChanged or
           (not TempReservEntry.ISEMPTY)
        then begin
          if PointerChanged then begin
            ReservMgt.SetJobJnlLine(OldJobJnlLine);
            ReservMgt.DeleteReservEntries(true,0);
            ReservMgt.SetJobJnlLine(NewJobJnlLine);
          end else begin
            ReservMgt.SetJobJnlLine(NewJobJnlLine);
            ReservMgt.DeleteReservEntries(true,0);
          end;
          ReservMgt.AutoTrack(NewJobJnlLine."Quantity (Base)");
        end;
      end;
    END;

    [External]
    PROCEDURE VerifyQuantity@3(VAR NewJobJnlLine@1001 : Record "Job Journal Line";VAR OldJobJnlLine@1000 : Record "Job Journal Line");
    VAR
      JobJnlLine@1002 : Record "Job Journal Line";
    BEGIN
      with NewJobJnlLine do begin
        if "Line No." = OldJobJnlLine."Line No." then
          if "Quantity (Base)" = OldJobJnlLine."Quantity (Base)" then
            exit;
        if "Line No." = 0 then
          if not JobJnlLine.GET("Journal Template Name","Journal Batch Name","Line No.") then
            exit;
        ReservMgt.SetJobJnlLine(NewJobJnlLine);
        if "Qty. per Unit of Measure" <> OldJobJnlLine."Qty. per Unit of Measure" then
          ReservMgt.ModifyUnitOfMeasure;
        if "Quantity (Base)" * OldJobJnlLine."Quantity (Base)" < 0 then
          ReservMgt.DeleteReservEntries(true,0)
        else
          ReservMgt.DeleteReservEntries(false,"Quantity (Base)");
      end;
    END;

    [External]
    PROCEDURE RenameLine@10(VAR NewJobJnlLine@1000 : Record "Job Journal Line";VAR OldJobJnlLine@1001 : Record "Job Journal Line");
    BEGIN
      ReservEngineMgt.RenamePointer(DATABASE::"Job Journal Line",
        OldJobJnlLine."Entry Type",
        OldJobJnlLine."Journal Template Name",
        OldJobJnlLine."Journal Batch Name",
        0,
        OldJobJnlLine."Line No.",
        NewJobJnlLine."Entry Type",
        NewJobJnlLine."Journal Template Name",
        NewJobJnlLine."Journal Batch Name",
        0,
        NewJobJnlLine."Line No.");
    END;

    [External]
    PROCEDURE DeleteLineConfirm@20(VAR JobJnlLine@1000 : Record "Job Journal Line") : Boolean;
    BEGIN
      with JobJnlLine do begin
        if not ReservEntryExist(JobJnlLine) then
          exit(true);

        ReservMgt.SetJobJnlLine(JobJnlLine);
        if ReservMgt.DeleteItemTrackingConfirm then
          DeleteItemTracking := true;
      end;

      exit(DeleteItemTracking);
    END;

    [External]
    PROCEDURE DeleteLine@2(VAR JobJnlLine@1000 : Record "Job Journal Line");
    BEGIN
      with JobJnlLine do
        if Type = Type::Item then begin
          ReservMgt.SetJobJnlLine(JobJnlLine);
          if DeleteItemTracking then
            ReservMgt.SetItemTrackingHandling(1); // Allow Deletion
          ReservMgt.DeleteReservEntries(true,0);
        end;
    END;

    [External]
    PROCEDURE CallItemTracking@14(VAR JobJnlLine@1000 : Record "Job Journal Line";IsReclass@1003 : Boolean);
    VAR
      TrackingSpecification@1001 : Record "Tracking Specification";
      ItemTrackingLines@1002 : Page "Item Tracking Lines";
    BEGIN
      TrackingSpecification.InitFromJobJnlLine(JobJnlLine);
      if IsReclass then
        ItemTrackingLines.SetFormRunMode(1);
      ItemTrackingLines.SetSourceSpec(TrackingSpecification,JobJnlLine."Posting Date");
      ItemTrackingLines.SetInbound(JobJnlLine.IsInbound);
      ItemTrackingLines.RUNMODAL;
    END;

    [External]
    PROCEDURE TransJobJnlLineToItemJnlLine@35(VAR JobJnlLine@1000 : Record "Job Journal Line";VAR ItemJnlLine@1001 : Record "Item Journal Line";TransferQty@1002 : Decimal) : Decimal;
    VAR
      OldReservEntry@1003 : Record "Reservation Entry";
    BEGIN
      if not FindReservEntry(JobJnlLine,OldReservEntry) then
        exit(TransferQty);
      OldReservEntry.Lock;
      // Handle Item Tracking on drop shipment:
      CLEAR(CreateReservEntry);

      ItemJnlLine.TestItemFields(JobJnlLine."No.",JobJnlLine."Variant Code",JobJnlLine."Location Code");

      if TransferQty = 0 then
        exit;

      if ReservEngineMgt.InitRecordSet(OldReservEntry) then
        repeat
          OldReservEntry.TestItemFields(JobJnlLine."No.",JobJnlLine."Variant Code",JobJnlLine."Location Code");

          TransferQty := CreateReservEntry.TransferReservEntry(DATABASE::"Item Journal Line",
              ItemJnlLine."Entry Type",ItemJnlLine."Journal Template Name",
              ItemJnlLine."Journal Batch Name",0,ItemJnlLine."Line No.",
              ItemJnlLine."Qty. per Unit of Measure",OldReservEntry,TransferQty);

        until (ReservEngineMgt.NEXTRecord(OldReservEntry) = 0) or (TransferQty = 0);

      exit(TransferQty);
    END;

    BEGIN
    END.
  }
}

