OBJECT Codeunit 5986 Serv-Amounts Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "Invoice Post. Buffer"=imd,
                TableData "General Posting Setup"=imd,
                TableData "VAT Amount Line"=imd,
                TableData "Dimension Buffer"=imd,
                TableData "Service Line"=imd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Currency@1004 : Record Currency;
      SalesSetup@1000 : Record "Sales & Receivables Setup";
      DimBufMgt@1008 : Codeunit "Dimension Buffer Management";
      FALineNo@1001 : Integer;
      RoundingLineNo@1003 : Integer;
      Text016@1007 : TextConst 'ENU=VAT Amount';
      Text017@1006 : TextConst 'ENU=%1% VAT';
      RoundingLineIsInserted@1002 : Boolean;
      IsInitialized@1005 : Boolean;

    [External]
    PROCEDURE Initialize@1(CurrencyCode@1000 : Code[10]);
    BEGIN
      RoundingLineIsInserted := false;
      GetCurrency(CurrencyCode,Currency);
      SalesSetup.GET;
      IsInitialized := true;
    END;

    [External]
    PROCEDURE GetDimensions@20(DimensionEntryNo@1000 : Integer;VAR TempDimBuf@1001 : Record "Dimension Buffer");
    BEGIN
      DimBufMgt.GetDimensions(DimensionEntryNo,TempDimBuf);
    END;

    [External]
    PROCEDURE Finalize@5();
    BEGIN
      IsInitialized := false;
    END;

    [External]
    PROCEDURE FillInvPostingBuffer@5804(VAR InvPostingBuffer@1002 : ARRAY [2] OF Record "Invoice Post. Buffer";VAR ServiceLine@1000 : Record "Service Line";VAR ServiceLineACY@1001 : Record "Service Line";ServiceHeader@1010 : Record "Service Header");
    VAR
      GenPostingSetup@1003 : Record "General Posting Setup";
      ServCost@1004 : Record "Service Cost";
      TotalVAT@1005 : Decimal;
      TotalVATACY@1007 : Decimal;
      TotalAmount@1008 : Decimal;
      TotalAmountACY@1009 : Decimal;
    BEGIN
      if (ServiceLine."Gen. Bus. Posting Group" <> GenPostingSetup."Gen. Bus. Posting Group") or
         (ServiceLine."Gen. Prod. Posting Group" <> GenPostingSetup."Gen. Prod. Posting Group")
      then
        GenPostingSetup.GET(ServiceLine."Gen. Bus. Posting Group",ServiceLine."Gen. Prod. Posting Group");

      InvPostingBuffer[1].PrepareService(ServiceLine);
      TotalVAT := ServiceLine."Amount Including VAT" - ServiceLine.Amount;
      TotalVATACY := ServiceLineACY."Amount Including VAT" - ServiceLineACY.Amount;
      TotalAmount := ServiceLine.Amount;
      TotalAmountACY := ServiceLineACY.Amount;

      if SalesSetup."Discount Posting" in
         [SalesSetup."Discount Posting"::"Invoice Discounts",SalesSetup."Discount Posting"::"All Discounts"]
      then
        if ServiceLine."VAT Calculation Type" = ServiceLine."VAT Calculation Type"::"Reverse Charge VAT" then
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -ServiceLine."Inv. Discount Amount",-ServiceLineACY."Inv. Discount Amount")
        else
          InvPostingBuffer[1].CalcDiscount(
            ServiceHeader."Prices Including VAT",-ServiceLine."Inv. Discount Amount",-ServiceLineACY."Inv. Discount Amount");
      if (InvPostingBuffer[1].Amount <> 0) or (InvPostingBuffer[1]."Amount (ACY)" <> 0) then begin
        InvPostingBuffer[1].SetAccount(
          GenPostingSetup.GetSalesInvDiscAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        if ServiceLine."Line Discount %" = 100 then begin
          InvPostingBuffer[1]."VAT Base Amount" := 0;
          InvPostingBuffer[1]."VAT Base Amount (ACY)" := 0;
          InvPostingBuffer[1]."VAT Amount" := 0;
          InvPostingBuffer[1]."VAT Amount (ACY)" := 0;
        end;
        UpdInvPostingBuffer(InvPostingBuffer,ServiceLine);
      end;

      if SalesSetup."Discount Posting" in
         [SalesSetup."Discount Posting"::"Line Discounts",SalesSetup."Discount Posting"::"All Discounts"]
      then
        if ServiceLine."VAT Calculation Type" = ServiceLine."VAT Calculation Type"::"Reverse Charge VAT" then
          InvPostingBuffer[1].CalcDiscountNoVAT(
            -ServiceLine."Line Discount Amount",-ServiceLineACY."Line Discount Amount")
        else
          InvPostingBuffer[1].CalcDiscount(
            ServiceHeader."Prices Including VAT",-ServiceLine."Line Discount Amount",-ServiceLineACY."Line Discount Amount");
      if (InvPostingBuffer[1].Amount <> 0) or (InvPostingBuffer[1]."Amount (ACY)" <> 0) then begin
        InvPostingBuffer[1].SetAccount(
          GenPostingSetup.GetSalesLineDiscAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        UpdInvPostingBuffer(InvPostingBuffer,ServiceLine);
      end;

      InvPostingBuffer[1].SetAmounts(
        TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY,ServiceLine."VAT Difference",TotalAmount,TotalAmountACY);

      case ServiceLine.Type of
        ServiceLine.Type::"G/L Account":
          InvPostingBuffer[1].SetAccount(ServiceLine."No.",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
        ServiceLine.Type::Cost:
          begin
            ServCost.GET(ServiceLine."No.");
            InvPostingBuffer[1].SetAccount(ServCost."Account No.",TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY)
          end
        else
          if ServiceLine."Document Type" = ServiceLine."Document Type"::"Credit Memo" then
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup.GetSalesCrMemoAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY)
          else
            InvPostingBuffer[1].SetAccount(
              GenPostingSetup.GetSalesAccount,TotalVAT,TotalVATACY,TotalAmount,TotalAmountACY);
      end;
      UpdInvPostingBuffer(InvPostingBuffer,ServiceLine);
    END;

    LOCAL PROCEDURE UpdInvPostingBuffer@6(VAR InvPostingBuffer@1002 : ARRAY [2] OF Record "Invoice Post. Buffer";ServiceLine@1003 : Record "Service Line");
    BEGIN
      InvPostingBuffer[1]."Dimension Set ID" := ServiceLine."Dimension Set ID";
      if InvPostingBuffer[1].Type = InvPostingBuffer[1].Type::"Fixed Asset" then begin
        FALineNo := FALineNo + 1;
        InvPostingBuffer[1]."Fixed Asset Line No." := FALineNo;
      end;

      InvPostingBuffer[2] := InvPostingBuffer[1];
      if InvPostingBuffer[2].FIND then begin
        InvPostingBuffer[2].Amount := InvPostingBuffer[2].Amount + InvPostingBuffer[1].Amount;
        InvPostingBuffer[2]."VAT Amount" :=
          InvPostingBuffer[2]."VAT Amount" + InvPostingBuffer[1]."VAT Amount";
        InvPostingBuffer[2]."VAT Base Amount" :=
          InvPostingBuffer[2]."VAT Base Amount" + InvPostingBuffer[1]."VAT Base Amount";
        InvPostingBuffer[2]."Amount (ACY)" :=
          InvPostingBuffer[2]."Amount (ACY)" + InvPostingBuffer[1]."Amount (ACY)";
        InvPostingBuffer[2]."VAT Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Amount (ACY)" + InvPostingBuffer[1]."VAT Amount (ACY)";
        InvPostingBuffer[2]."VAT Difference" :=
          InvPostingBuffer[2]."VAT Difference" + InvPostingBuffer[1]."VAT Difference";
        InvPostingBuffer[2]."VAT Base Amount (ACY)" :=
          InvPostingBuffer[2]."VAT Base Amount (ACY)" +
          InvPostingBuffer[1]."VAT Base Amount (ACY)";
        InvPostingBuffer[2].Quantity :=
          InvPostingBuffer[2].Quantity + InvPostingBuffer[1].Quantity;
        if not InvPostingBuffer[1]."System-Created Entry" then
          InvPostingBuffer[2]."System-Created Entry" := false;
        InvPostingBuffer[2].MODIFY;
      end else
        InvPostingBuffer[1].INSERT;
    END;

    [External]
    PROCEDURE DivideAmount@8(QtyType@1000 : 'General,Invoicing,Shipping';ServLineQty@1004 : Decimal;VAR ServiceHeader@1005 : Record "Service Header";VAR ServiceLine@1002 : Record "Service Line";VAR TempVATAmountLine@1003 : Record "VAT Amount Line";VAR TempVATAmountLineRemainder@1001 : Record "VAT Amount Line");
    VAR
      ChargeableQty@1006 : Decimal;
    BEGIN
      if RoundingLineInserted and (RoundingLineNo = ServiceLine."Line No.") then
        exit;
      with ServiceLine do
        if ServLineQty = 0 then begin
          "Line Amount" := 0;
          "Line Discount Amount" := 0;
          "Inv. Discount Amount" := 0;
          "VAT Base Amount" := 0;
          Amount := 0;
          "Amount Including VAT" := 0;
        end else begin
          if TempVATAmountLine.GET("VAT Identifier","VAT Calculation Type","Tax Group Code",false,"Line Amount" >= 0) then;
          if "VAT Calculation Type" = "VAT Calculation Type"::"Sales Tax" then
            "VAT %" := TempVATAmountLine."VAT %";
          TempVATAmountLineRemainder := TempVATAmountLine;
          if not TempVATAmountLineRemainder.FIND then begin
            TempVATAmountLineRemainder.INIT;
            TempVATAmountLineRemainder.INSERT;
          end;

          case QtyType of
            QtyType::Shipping:
              if ("Qty. to Consume" <> 0) or (ServLineQty <= MaxQtyToInvoice) then
                ChargeableQty := ServLineQty
              else
                ChargeableQty := MaxQtyToInvoice;
            QtyType::Invoicing:
              ChargeableQty := ServLineQty;
            else
              ChargeableQty := CalcChargeableQty;
          end;

          "Line Amount" :=
            ROUND(
              ChargeableQty * "Unit Price",
              Currency."Amount Rounding Precision");

          if ServLineQty <> Quantity then
            "Line Discount Amount" :=
              ROUND("Line Amount" * "Line Discount %" / 100,Currency."Amount Rounding Precision");

          "Line Amount" := "Line Amount" - "Line Discount Amount";

          if "Allow Invoice Disc." and (TempVATAmountLine."Inv. Disc. Base Amount" <> 0) then
            if QtyType = QtyType::Invoicing then
              "Inv. Discount Amount" := "Inv. Disc. Amount to Invoice"
            else begin
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" +
                TempVATAmountLine."Invoice Discount Amount" * "Line Amount" /
                TempVATAmountLine."Inv. Disc. Base Amount";
              "Inv. Discount Amount" :=
                ROUND(
                  TempVATAmountLineRemainder."Invoice Discount Amount",Currency."Amount Rounding Precision");
              TempVATAmountLineRemainder."Invoice Discount Amount" :=
                TempVATAmountLineRemainder."Invoice Discount Amount" - "Inv. Discount Amount";
            end;

          if ServiceHeader."Prices Including VAT" then begin
            if (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount" = 0) or
               ("Line Amount" = 0)
            then begin
              TempVATAmountLineRemainder."VAT Amount" := 0;
              TempVATAmountLineRemainder."Amount Including VAT" := 0;
            end else begin
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" +
                TempVATAmountLine."VAT Amount" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              TempVATAmountLineRemainder."Amount Including VAT" :=
                TempVATAmountLineRemainder."Amount Including VAT" +
                TempVATAmountLine."Amount Including VAT" *
                ("Line Amount" - "Inv. Discount Amount") /
                (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
            end;
            if "Line Discount %" <> 100 then
              "Amount Including VAT" :=
                ROUND(TempVATAmountLineRemainder."Amount Including VAT",Currency."Amount Rounding Precision")
            else
              "Amount Including VAT" := 0;
            Amount :=
              ROUND("Amount Including VAT",Currency."Amount Rounding Precision") -
              ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision");
            "VAT Base Amount" :=
              ROUND(
                Amount * (1 - ServiceHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
            TempVATAmountLineRemainder."Amount Including VAT" :=
              TempVATAmountLineRemainder."Amount Including VAT" - "Amount Including VAT";
            TempVATAmountLineRemainder."VAT Amount" :=
              TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
          end else
            if "VAT Calculation Type" = "VAT Calculation Type"::"Full VAT" then begin
              if "Line Discount %" <> 100 then
                "Amount Including VAT" := "Line Amount" - "Inv. Discount Amount"
              else
                "Amount Including VAT" := 0;
              Amount := 0;
              "VAT Base Amount" := 0;
            end else begin
              Amount := "Line Amount" - "Inv. Discount Amount";
              "VAT Base Amount" :=
                ROUND(
                  Amount * (1 - ServiceHeader."VAT Base Discount %" / 100),Currency."Amount Rounding Precision");
              if TempVATAmountLine."VAT Base" = 0 then
                TempVATAmountLineRemainder."VAT Amount" := 0
              else
                TempVATAmountLineRemainder."VAT Amount" :=
                  TempVATAmountLineRemainder."VAT Amount" +
                  TempVATAmountLine."VAT Amount" *
                  ("Line Amount" - "Inv. Discount Amount") /
                  (TempVATAmountLine."Line Amount" - TempVATAmountLine."Invoice Discount Amount");
              if "Line Discount %" <> 100 then
                "Amount Including VAT" :=
                  Amount + ROUND(TempVATAmountLineRemainder."VAT Amount",Currency."Amount Rounding Precision")
              else
                "Amount Including VAT" := 0;
              TempVATAmountLineRemainder."VAT Amount" :=
                TempVATAmountLineRemainder."VAT Amount" - "Amount Including VAT" + Amount;
            end;

          TempVATAmountLineRemainder.MODIFY;
        end;
    END;

    [External]
    PROCEDURE RoundAmount@9(ServLineQty@1009 : Decimal;VAR ServiceHeader@1006 : Record "Service Header";VAR ServiceLine@1002 : Record "Service Line";VAR TempServiceLine@1004 : Record "Service Line";VAR TotalServiceLine@1000 : Record "Service Line";VAR TotalServiceLineLCY@1003 : Record "Service Line";VAR ServiceLineACY@1005 : Record "Service Line");
    VAR
      CurrExchRate@1008 : Record "Currency Exchange Rate";
      NoVAT@1001 : Boolean;
      UseDate@1007 : Date;
    BEGIN
      with ServiceLine do begin
        IncrAmount(ServiceLine,TotalServiceLine,ServiceHeader."Prices Including VAT");
        Increment(TotalServiceLine."Net Weight",ROUND(ServLineQty * "Net Weight",0.00001));
        Increment(TotalServiceLine."Gross Weight",ROUND(ServLineQty * "Gross Weight",0.00001));
        Increment(TotalServiceLine."Unit Volume",ROUND(ServLineQty * "Unit Volume",0.00001));
        Increment(TotalServiceLine.Quantity,ServLineQty);
        if "Units per Parcel" > 0 then
          Increment(
            TotalServiceLine."Units per Parcel",
            ROUND(ServLineQty / "Units per Parcel",1,'>'));

        TempServiceLine := ServiceLine;
        ServiceLineACY := ServiceLine;

        if ServiceHeader."Currency Code" <> '' then begin
          if ("Document Type" in ["Document Type"::Quote]) and
             (ServiceHeader."Posting Date" = 0D)
          then
            UseDate := WORKDATE
          else
            UseDate := ServiceHeader."Posting Date";

          NoVAT := Amount = "Amount Including VAT";
          "Amount Including VAT" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,ServiceHeader."Currency Code",
                TotalServiceLine."Amount Including VAT",ServiceHeader."Currency Factor")) -
            TotalServiceLineLCY."Amount Including VAT";
          if NoVAT then
            Amount := "Amount Including VAT"
          else
            Amount :=
              ROUND(
                CurrExchRate.ExchangeAmtFCYToLCY(
                  UseDate,ServiceHeader."Currency Code",
                  TotalServiceLine.Amount,ServiceHeader."Currency Factor")) -
              TotalServiceLineLCY.Amount;
          "Line Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,ServiceHeader."Currency Code",
                TotalServiceLine."Line Amount",ServiceHeader."Currency Factor")) -
            TotalServiceLineLCY."Line Amount";
          "Line Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,ServiceHeader."Currency Code",
                TotalServiceLine."Line Discount Amount",ServiceHeader."Currency Factor")) -
            TotalServiceLineLCY."Line Discount Amount";
          "Inv. Discount Amount" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,ServiceHeader."Currency Code",
                TotalServiceLine."Inv. Discount Amount",ServiceHeader."Currency Factor")) -
            TotalServiceLineLCY."Inv. Discount Amount";
          "VAT Difference" :=
            ROUND(
              CurrExchRate.ExchangeAmtFCYToLCY(
                UseDate,ServiceHeader."Currency Code",
                TotalServiceLine."VAT Difference",ServiceHeader."Currency Factor")) -
            TotalServiceLineLCY."VAT Difference";
        end;

        IncrAmount(ServiceLine,TotalServiceLineLCY,ServiceHeader."Prices Including VAT");
        Increment(TotalServiceLineLCY."Unit Cost (LCY)",ROUND(ServLineQty * "Unit Cost (LCY)"));
      end;
    END;

    [External]
    PROCEDURE ReverseAmount@10(VAR ServiceLine@1000 : Record "Service Line");
    BEGIN
      with ServiceLine do begin
        "Qty. to Ship" := -"Qty. to Ship";
        "Qty. to Ship (Base)" := -"Qty. to Ship (Base)";
        "Qty. to Invoice" := -"Qty. to Invoice";
        "Qty. to Invoice (Base)" := -"Qty. to Invoice (Base)";
        "Qty. to Consume" := -"Qty. to Consume";
        "Qty. to Consume (Base)" := -"Qty. to Consume (Base)";
        "Line Amount" := -"Line Amount";
        Amount := -Amount;
        "VAT Base Amount" := -"VAT Base Amount";
        "VAT Difference" := -"VAT Difference";
        "Amount Including VAT" := -"Amount Including VAT";
        "Line Discount Amount" := -"Line Discount Amount";
        "Inv. Discount Amount" := -"Inv. Discount Amount";
      end;
    END;

    [External]
    PROCEDURE InvoiceRounding@12(VAR ServiceHeader@1005 : Record "Service Header";VAR ServiceLine@1007 : Record "Service Line";VAR TotalServiceLine@1004 : Record "Service Line";VAR LastLineRetrieved@1008 : Boolean;UseTempData@1000 : Boolean;BiggestLineNo@1002 : Integer);
    VAR
      TempServiceLineForCalc@1003 : TEMPORARY Record "Service Line";
      RoundingServiceLine@1009 : Record "Service Line";
      CustPostingGr@1006 : Record "Customer Posting Group";
      InvoiceRoundingAmount@1001 : Decimal;
    BEGIN
      Currency.TESTFIELD("Invoice Rounding Precision");
      InvoiceRoundingAmount :=
        -ROUND(
          TotalServiceLine."Amount Including VAT" -
          ROUND(
            TotalServiceLine."Amount Including VAT",
            Currency."Invoice Rounding Precision",
            Currency.InvoiceRoundingDirection),
          Currency."Amount Rounding Precision");
      if InvoiceRoundingAmount <> 0 then begin
        CustPostingGr.GET(ServiceHeader."Customer Posting Group");
        with ServiceLine do begin
          INIT;
          BiggestLineNo := GetLastLineNo(ServiceLine) + 10000;
          "System-Created Entry" := true;
          if UseTempData then begin
            "Line No." := 0;
            Type := Type::"G/L Account";
            TempServiceLineForCalc := ServiceLine;
            TempServiceLineForCalc.VALIDATE("No.",CustPostingGr.GetInvRoundingAccount);
            ServiceLine := TempServiceLineForCalc;
          end else begin
            "Line No." := BiggestLineNo;
            RoundingServiceLine := ServiceLine;
            RoundingServiceLine.VALIDATE(Type,Type::"G/L Account");
            RoundingServiceLine.VALIDATE("No.",CustPostingGr.GetInvRoundingAccount);
            ServiceLine := RoundingServiceLine;
          end;
          VALIDATE(Quantity,1);
          if ServiceHeader."Prices Including VAT" then
            VALIDATE("Unit Price",InvoiceRoundingAmount)
          else
            VALIDATE(
              "Unit Price",
              ROUND(
                InvoiceRoundingAmount /
                (1 + (1 - ServiceHeader."VAT Base Discount %" / 100) * "VAT %" / 100),
                Currency."Amount Rounding Precision"));
          VALIDATE("Amount Including VAT",InvoiceRoundingAmount);
          "Line No." := BiggestLineNo;

          LastLineRetrieved := false;
          RoundingLineIsInserted := true;
          RoundingLineNo := "Line No.";
        end;
      end;
    END;

    LOCAL PROCEDURE IncrAmount@13(VAR ServiceLine@1001 : Record "Service Line";VAR TotalServiceLine@1000 : Record "Service Line";PricesIncludingVAT@1002 : Boolean);
    BEGIN
      with ServiceLine do begin
        if PricesIncludingVAT or
           ("VAT Calculation Type" <> "VAT Calculation Type"::"Full VAT")
        then
          Increment(TotalServiceLine."Line Amount","Line Amount");
        Increment(TotalServiceLine.Amount,Amount);
        Increment(TotalServiceLine."VAT Base Amount","VAT Base Amount");
        Increment(TotalServiceLine."VAT Difference","VAT Difference");
        Increment(TotalServiceLine."Amount Including VAT","Amount Including VAT");
        Increment(TotalServiceLine."Line Discount Amount","Line Discount Amount");
        Increment(TotalServiceLine."Inv. Discount Amount","Inv. Discount Amount");
        Increment(TotalServiceLine."Inv. Disc. Amount to Invoice","Inv. Disc. Amount to Invoice");
      end;
    END;

    LOCAL PROCEDURE Increment@14(VAR Number@1000 : Decimal;Number2@1001 : Decimal);
    BEGIN
      Number := Number + Number2;
    END;

    [External]
    PROCEDURE RoundingLineInserted@2() : Boolean;
    BEGIN
      exit(RoundingLineIsInserted);
    END;

    [External]
    PROCEDURE GetRoundingLineNo@4() : Integer;
    BEGIN
      exit(RoundingLineNo);
    END;

    [External]
    PROCEDURE SumServiceLines@17(VAR NewServHeader@1000 : Record "Service Header";QtyType@1001 : 'General,Invoicing,Shipping,Consuming';VAR NewTotalServLine@1002 : Record "Service Line";VAR NewTotalServLineLCY@1003 : Record "Service Line";VAR VATAmount@1004 : Decimal;VAR VATAmountText@1005 : Text[30];VAR ProfitLCY@1006 : Decimal;VAR ProfitPct@1007 : Decimal;VAR TotalAdjCostLCY@1011 : Decimal);
    VAR
      OldServLine@1008 : Record "Service Line";
    BEGIN
      SumServiceLinesTemp(
        NewServHeader,OldServLine,QtyType,NewTotalServLine,NewTotalServLineLCY,
        VATAmount,VATAmountText,ProfitLCY,ProfitPct,TotalAdjCostLCY);
    END;

    [External]
    PROCEDURE SumServiceLinesTemp@25(VAR NewServHeader@1000 : Record "Service Header";VAR OldServLine@1001 : Record "Service Line";QtyType@1002 : 'General,Invoicing,Shipping,Consuming';VAR NewTotalServLine@1003 : Record "Service Line";VAR NewTotalServLineLCY@1004 : Record "Service Line";VAR VATAmount@1005 : Decimal;VAR VATAmountText@1006 : Text[30];VAR ProfitLCY@1007 : Decimal;VAR ProfitPct@1008 : Decimal;VAR TotalAdjCostLCY@1015 : Decimal);
    VAR
      ServHeader@1013 : Record "Service Header";
      ServLine@1009 : Record "Service Line";
      TempServiceLine@1014 : Record "Service Line";
      TotalServiceLine@1012 : Record "Service Line";
      TotalServiceLineLCY@1011 : Record "Service Line";
      ServiceLineACY@1010 : Record "Service Line";
    BEGIN
      if not IsInitialized then
        Initialize(NewServHeader."Currency Code");

      with ServHeader do begin
        ServHeader := NewServHeader;
        SumServiceLines2(ServHeader,ServLine,OldServLine,TempServiceLine,
          TotalServiceLine,TotalServiceLineLCY,ServiceLineACY,QtyType,false,true,TotalAdjCostLCY);

        if (QtyType = QtyType::Shipping) and (OldServLine."Qty. to Consume" <> 0) then begin
          TotalServiceLineLCY.Amount := 0;
          TotalServiceLine."Amount Including VAT" := 0;
          ProfitLCY := 0;
          VATAmount := 0;
        end else begin
          ProfitLCY := TotalServiceLineLCY.Amount - TotalServiceLineLCY."Unit Cost (LCY)";
          VATAmount := TotalServiceLine."Amount Including VAT" - TotalServiceLine.Amount;
        end;

        if TotalServiceLineLCY.Amount = 0 then
          ProfitPct := 0
        else
          ProfitPct := ROUND(ProfitLCY / TotalServiceLineLCY.Amount * 100,0.1);
        if TotalServiceLine."VAT %" = 0 then
          VATAmountText := Text016
        else
          VATAmountText := STRSUBSTNO(Text017,TotalServiceLine."VAT %");
        NewTotalServLine := TotalServiceLine;
        NewTotalServLineLCY := TotalServiceLineLCY;
      end;
    END;

    LOCAL PROCEDURE SumServiceLines2@16(VAR ServHeader@1010 : Record "Service Header";VAR NewServLine@1000 : Record "Service Line";VAR OldServLine@1001 : Record "Service Line";VAR TempServiceLine@1016 : Record "Service Line";VAR TotalServiceLine@1009 : Record "Service Line";VAR TotalServiceLineLCY@1008 : Record "Service Line";VAR ServiceLineACY@1007 : Record "Service Line";QtyType@1002 : 'General,Invoicing,Shipping,Consuming,ServLineItems,ServLineResources,ServLineCosts';InsertServLine@1003 : Boolean;CalcAdCostLCY@1028 : Boolean;VAR TotalAdjCostLCY@1017 : Decimal);
    VAR
      ServLine@1015 : Record "Service Line";
      TempVATAmountLine@1006 : TEMPORARY Record "VAT Amount Line";
      TempVATAmountLineRemainder@1005 : TEMPORARY Record "VAT Amount Line";
      GLSetup@1011 : Record "General Ledger Setup";
      Currency@1014 : Record Currency;
      CostCalcMgt@1012 : Codeunit "Cost Calculation Management";
      ServLineQty@1004 : Decimal;
      LastLineRetrieved@1026 : Boolean;
      AdjCostLCY@1027 : Decimal;
      BiggestLineNo@1019 : Integer;
    BEGIN
      TotalAdjCostLCY := 0;
      if not IsInitialized then
        Initialize(ServHeader."Currency Code");
      TempVATAmountLineRemainder.DELETEALL;
      OldServLine.CalcVATAmountLines(QtyType,ServHeader,OldServLine,TempVATAmountLine,false);
      with ServHeader do begin
        GLSetup.GET;
        SalesSetup.GET;
        GetCurrency("Currency Code",Currency);
        OldServLine.SETRANGE("Document Type","Document Type");
        OldServLine.SETRANGE("Document No.","No.");
        case QtyType of
          QtyType::ServLineItems:
            OldServLine.SETRANGE(Type,OldServLine.Type::Item);
          QtyType::ServLineResources:
            OldServLine.SETRANGE(Type,OldServLine.Type::Resource);
          QtyType::ServLineCosts:
            OldServLine.SETFILTER(Type,'%1|%2',OldServLine.Type::Cost,OldServLine.Type::"G/L Account");
        end;

        RoundingLineIsInserted := false;
        if OldServLine.FIND('-') then
          repeat
            if not RoundingLineInserted then
              ServLine := OldServLine;
            case QtyType of
              QtyType::Invoicing:
                ServLineQty := ServLine."Qty. to Invoice";
              QtyType::Consuming:
                begin
                  ServLineQty := ServLine."Qty. to Consume";
                  ServLine."Unit Price" := 0;
                  ServLine."Inv. Discount Amount" := 0;
                end;
              QtyType::Shipping:
                begin
                  if "Document Type" = "Document Type"::"Credit Memo" then
                    ServLineQty := ServLine.Quantity
                  else
                    ServLineQty := ServLine."Qty. to Ship";
                  if OldServLine."Qty. to Consume" <> 0 then begin
                    ServLine."Unit Price" := 0;
                    ServLine."Inv. Discount Amount" := 0;
                    ServLine.Amount := 0;
                  end
                end;
              else
                ServLineQty := ServLine.Quantity;
            end;

            DivideAmount(QtyType,
              ServLineQty,
              ServHeader,
              ServLine,
              TempVATAmountLine,
              TempVATAmountLineRemainder);

            ServLine.Quantity := ServLineQty;
            if ServLineQty <> 0 then begin
              if (ServLine.Amount <> 0) and not RoundingLineInserted then
                if TotalServiceLine.Amount = 0 then
                  TotalServiceLine."VAT %" := ServLine."VAT %"
                else
                  if TotalServiceLine."VAT %" <> ServLine."VAT %" then
                    TotalServiceLine."VAT %" := 0;
              RoundAmount(ServLineQty,ServHeader,ServLine,TempServiceLine,
                TotalServiceLine,TotalServiceLineLCY,ServiceLineACY);

              if not (QtyType in [QtyType::Shipping]) and
                 not InsertServLine and CalcAdCostLCY
              then begin
                AdjCostLCY := CostCalcMgt.CalcServLineCostLCY(ServLine,QtyType);
                TotalAdjCostLCY := TotalAdjCostLCY + GetServLineAdjCostLCY(ServLine,QtyType,AdjCostLCY);
              end;

              ServLine := TempServiceLine;
            end;
            if InsertServLine then begin
              NewServLine := ServLine;
              if NewServLine.INSERT then;
            end;
            if RoundingLineInserted then
              LastLineRetrieved := true
            else begin
              BiggestLineNo := MAX(BiggestLineNo,OldServLine."Line No.");
              LastLineRetrieved := OldServLine.NEXT = 0;
              if LastLineRetrieved and SalesSetup."Invoice Rounding" then
                InvoiceRounding(ServHeader,ServLine,TotalServiceLine,
                  LastLineRetrieved,true,BiggestLineNo);
            end;
          until LastLineRetrieved;
      end;
    END;

    LOCAL PROCEDURE GetCurrency@18(CurrencyCode@1000 : Code[10];VAR Currency2@1001 : Record Currency);
    BEGIN
      if CurrencyCode = '' then
        Currency2.InitRoundingPrecision
      else begin
        Currency2.GET(CurrencyCode);
        Currency2.TESTFIELD("Amount Rounding Precision");
      end;
    END;

    [External]
    PROCEDURE GetServiceLines@19(VAR NewServiceHeader@1000 : Record "Service Header";VAR NewServiceLine@1001 : Record "Service Line";QtyType@1002 : 'General,Invoicing,Shipping,Consuming');
    VAR
      OldServiceLine@1003 : Record "Service Line";
      TempServiceLine@1007 : Record "Service Line";
      TotalServiceLine@1006 : Record "Service Line";
      TotalServiceLineLCY@1005 : Record "Service Line";
      ServiceLineACY@1004 : Record "Service Line";
      TotalAdjCostLCY@1008 : Decimal;
    BEGIN
      if not IsInitialized then
        Initialize(NewServiceHeader."Currency Code");

      SumServiceLines2(NewServiceHeader,NewServiceLine,
        OldServiceLine,TempServiceLine,TotalServiceLine,TotalServiceLineLCY,ServiceLineACY,
        QtyType,true,false,TotalAdjCostLCY);
    END;

    [External]
    PROCEDURE MAX@55(number1@1000 : Integer;number2@1001 : Integer) : Integer;
    BEGIN
      if number1 > number2 then
        exit(number1);
      exit(number2);
    END;

    LOCAL PROCEDURE GetServLineAdjCostLCY@48(ServLine2@1000 : Record "Service Line";QtyType@1002 : 'General,Invoicing,Shipping,Consuming,ServLineItems,ServLineResources,ServLineCosts';AdjCostLCY@1001 : Decimal) : Decimal;
    BEGIN
      with ServLine2 do begin
        if "Document Type" in ["Document Type"::Order,"Document Type"::Invoice] then
          AdjCostLCY := -AdjCostLCY;

        case true of
          "Shipment No." <> '':
            exit(AdjCostLCY);
          (QtyType = QtyType::General) or (QtyType = QtyType::ServLineItems) or
          (QtyType = QtyType::ServLineResources) or (QtyType = QtyType::ServLineCosts):
            exit(ROUND("Outstanding Quantity" * "Unit Cost (LCY)") + AdjCostLCY);
          "Document Type" in ["Document Type"::Order,"Document Type"::Invoice]:
            begin
              if ("Qty. to Invoice" > "Qty. to Ship") or ("Qty. to Consume" > 0) then
                exit(ROUND("Qty. to Ship" * "Unit Cost (LCY)") + AdjCostLCY);
              exit(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
            end;
          "Document Type" = "Document Type"::"Credit Memo":
            exit(ROUND("Qty. to Invoice" * "Unit Cost (LCY)"));
        end;
      end;
    END;

    [External]
    PROCEDURE GetLastLineNo@3(ServLine@1000 : Record "Service Line") : Integer;
    BEGIN
      with ServLine do begin
        SETRANGE("Document Type","Document Type");
        SETRANGE("Document No.","Document No.");
        if FINDLAST then;
        exit("Line No.");
      end;
    END;

    BEGIN
    END.
  }
}

