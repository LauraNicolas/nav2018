OBJECT Table 7347 Internal Movement Line
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TESTFIELD("Item No.");
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnModify=BEGIN
               TESTFIELD("Item No.");
               "Sorting Sequence No." := GetSortSeqNo;
             END;

    OnDelete=VAR
               ItemTrackingMgt@1001 : Codeunit "Item Tracking Management";
             BEGIN
               ItemTrackingMgt.DeleteWhseItemTrkgLines(
                 DATABASE::"Internal Movement Line",0,"No.",'',0,"Line No.","Location Code",true);
             END;

    OnRename=BEGIN
               ERROR(Text002,TABLECAPTION);
             END;

    CaptionML=ENU=Internal Movement Line;
    LookupPageID="Whse. Internal Put-away Lines";
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;CaptionML=ENU=No.;
                                                   Editable=false }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No.;
                                                   Editable=false }
    { 10  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                GetLocation("Location Code");
                                                                if "Location Code" <> '' then
                                                                  InternalMovementHeader.CheckLocationSettings("Location Code");
                                                              END;

                                                   CaptionML=ENU=Location Code;
                                                   Editable=false }
    { 11  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 12  ;   ;From Bin Code       ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   OnValidate=BEGIN
                                                                if xRec."From Bin Code" <> "From Bin Code" then
                                                                  if "From Bin Code" <> '' then begin
                                                                    GetLocation("Location Code");
                                                                    Location.TESTFIELD("Bin Mandatory");
                                                                    if "From Bin Code" = Location."Adjustment Bin Code" then
                                                                      FIELDERROR(
                                                                        "From Bin Code",
                                                                        STRSUBSTNO(
                                                                          Text000,Location.FIELDCAPTION("Adjustment Bin Code"),
                                                                          Location.TABLECAPTION));
                                                                    VALIDATE(Quantity,0);
                                                                  end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("From Bin Code"));
                                                            END;

                                                   CaptionML=ENU=From Bin Code }
    { 13  ;   ;To Bin Code         ;Code20        ;TableRelation=Bin.Code WHERE ("Location Code"=FIELD("Location Code"));
                                                   CaptionML=ENU=To Bin Code }
    { 14  ;   ;Item No.            ;Code20        ;OnValidate=BEGIN
                                                                if "Item No." <> xRec."Item No." then
                                                                  "Variant Code" := '';

                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  Description := Item.Description;
                                                                  "Description 2" := Item."Description 2";
                                                                  "Shelf No." := Item."Shelf No.";
                                                                  VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
                                                                end else begin
                                                                  Description := '';
                                                                  "Description 2" := '';
                                                                  "Variant Code" := '';
                                                                  "Shelf No." := '';
                                                                  VALIDATE("Unit of Measure Code",'');
                                                                end;

                                                                if InternalMovementHeader.GET("No.") then begin
                                                                  if "Location Code" = '' then
                                                                    VALIDATE("Location Code",InternalMovementHeader."Location Code");
                                                                  if "To Bin Code" = '' then
                                                                    VALIDATE("To Bin Code",InternalMovementHeader."To Bin Code");
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Item No."));
                                                            END;

                                                   CaptionML=ENU=Item No. }
    { 15  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                "Qty. (Base)" := CalcBaseQty(Quantity);

                                                                if CurrFieldNo = FIELDNO(Quantity) then
                                                                  CheckBinContentQty;

                                                                if not xRec.ISEMPTY then
                                                                  if not CheckQtyItemTrackingLines then
                                                                    ERROR(ItemTrackingErr,"Item No.",TABLECAPTION);
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5;
                                                   MinValue=0 }
    { 16  ;   ;Qty. (Base)         ;Decimal       ;CaptionML=ENU=Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 29  ;   ;Unit of Measure Code;Code10        ;OnValidate=BEGIN
                                                                if "Item No." <> '' then begin
                                                                  GetItemUnitOfMeasure;
                                                                  "Qty. per Unit of Measure" := ItemUnitOfMeasure."Qty. per Unit of Measure";
                                                                end else
                                                                  "Qty. per Unit of Measure" := 1;

                                                                VALIDATE(Quantity);
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Unit of Measure Code"));
                                                            END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 30  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=false }
    { 31  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE ("Item No."=FIELD("Item No."));
                                                   OnValidate=VAR
                                                                ItemVariant@1000 : Record "Item Variant";
                                                              BEGIN
                                                                if "Variant Code" = '' then
                                                                  VALIDATE("Item No.")
                                                                else begin
                                                                  ItemVariant.GET("Item No.","Variant Code");
                                                                  Description := ItemVariant.Description;
                                                                end;
                                                              END;

                                                   OnLookup=BEGIN
                                                              SelectLookUp(FIELDNO("Variant Code"));
                                                            END;

                                                   CaptionML=ENU=Variant Code }
    { 32  ;   ;Description         ;Text50        ;CaptionML=ENU=Description }
    { 33  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 35  ;   ;Sorting Sequence No.;Integer       ;CaptionML=ENU=Sorting Sequence No.;
                                                   Editable=false }
    { 36  ;   ;Due Date            ;Date          ;CaptionML=ENU=Due Date }
    { 37  ;   ;Cubage              ;Decimal       ;CaptionML=ENU=Cubage;
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Weight              ;Decimal       ;CaptionML=ENU=Weight;
                                                   DecimalPlaces=0:5 }
  }
  KEYS
  {
    {    ;"No.","Line No."                        ;Clustered=true }
    {    ;"No.","Item No."                        ;MaintainSQLIndex=false }
    {    ;"No.","From Bin Code"                   ;MaintainSQLIndex=false }
    {    ;"No.","Shelf No."                       ;MaintainSQLIndex=false }
    {    ;"No.","Sorting Sequence No."             }
    {    ;"No.","Due Date"                        ;MaintainSQLIndex=false }
    {    ;"Item No.","From Bin Code","Location Code","Unit of Measure Code","Variant Code";
                                                   SumIndexFields="Qty. (Base)";
                                                   MaintainSIFTIndex=false }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      InternalMovementHeader@1002 : Record "Internal Movement Header";
      Location@1004 : Record Location;
      Item@1000 : Record Item;
      ItemUnitOfMeasure@1001 : Record "Item Unit of Measure";
      Text000@1003 : TextConst 'ENU=must not be the %1 of the %2';
      Text001@1006 : TextConst 'ENU=must not be greater than %1 units';
      Text002@1007 : TextConst 'ENU=You cannot rename a %1.';
      LastLineNo@1012 : Integer;
      ItemTrackingErr@1005 : TextConst '@@@=Item tracking numbers should not be higher than the item quantity.;ENU=Item tracking numbers defined for item %1 in the %2 are higher than the item quantity.\\Adjust the item tracking numbers and then increase the item quantity, if relevant.';

    [External]
    PROCEDURE SetUpNewLine@3(LastInternalMovementLine@1000 : Record "Internal Movement Line");
    VAR
      InternalMovementLine@1001 : Record "Internal Movement Line";
    BEGIN
      GetInternalMovementHeader("No.");
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      if InternalMovementLine.COUNT > 0 then
        LastLineNo := LastInternalMovementLine."Line No."
      else
        LastLineNo := 0;
      "Line No." := GetNextLineNo;
      VALIDATE("Location Code",InternalMovementHeader."Location Code");
      "To Bin Code" := InternalMovementHeader."To Bin Code";
      "Due Date" := InternalMovementHeader."Due Date";
    END;

    LOCAL PROCEDURE CalcBaseQty@14(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      exit(ROUND(Qty * "Qty. per Unit of Measure",0.00001));
    END;

    LOCAL PROCEDURE CheckBinContentQty@9();
    VAR
      BinContent@1000 : Record "Bin Content";
      InternalMovementLine@1002 : Record "Internal Movement Line";
      AvailQtyBase@1001 : Decimal;
    BEGIN
      GetLocation("Location Code");

      if Location."Bin Mandatory" and
         ("Location Code" <> '') and ("From Bin Code" <> '') and
         ("Item No." <> '') and ("Unit of Measure Code" <> '')
      then begin
        BinContent."Location Code" := "Location Code";
        BinContent."Bin Code" := "From Bin Code";
        BinContent."Item No." := "Item No.";
        BinContent."Variant Code" := "Variant Code";
        BinContent."Unit of Measure Code" := "Unit of Measure Code";

        AvailQtyBase := BinContent.CalcQtyAvailToTake(0);
        InternalMovementLine.SETCURRENTKEY(
          "Item No.","From Bin Code","Location Code","Unit of Measure Code","Variant Code");
        InternalMovementLine.SETRANGE("Item No.","Item No.");
        InternalMovementLine.SETRANGE("From Bin Code","From Bin Code");
        InternalMovementLine.SETRANGE("Location Code","Location Code");
        InternalMovementLine.SETRANGE("Unit of Measure Code","Unit of Measure Code");
        InternalMovementLine.SETRANGE("Variant Code","Variant Code");
        InternalMovementLine.SETFILTER("Line No.",'<>%1',"Line No.");
        InternalMovementLine.CALCSUMS("Qty. (Base)");
        if AvailQtyBase - InternalMovementLine."Qty. (Base)" < "Qty. (Base)" then
          FIELDERROR(
            "Qty. (Base)",
            STRSUBSTNO(
              Text001,AvailQtyBase - InternalMovementLine."Qty. (Base)"));
      end;
    END;

    LOCAL PROCEDURE GetItemUnitOfMeasure@18();
    BEGIN
      GetItem;
      Item.TESTFIELD("No.");
      if (Item."No." <> ItemUnitOfMeasure."Item No.") or
         ("Unit of Measure Code" <> ItemUnitOfMeasure.Code)
      then
        if not ItemUnitOfMeasure.GET(Item."No.","Unit of Measure Code") then
          ItemUnitOfMeasure.GET(Item."No.",Item."Base Unit of Measure");
    END;

    LOCAL PROCEDURE GetItem@15();
    BEGIN
      if Item."No." <> "Item No." then
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE GetLocation@1(LocationCode@1000 : Code[10]);
    BEGIN
      if LocationCode = '' then
        CLEAR(Location)
      else
        if Location.Code <> LocationCode then
          Location.GET(LocationCode);
    END;

    LOCAL PROCEDURE GetInternalMovementHeader@7(InternalMovementNo@1000 : Code[20]);
    BEGIN
      if InternalMovementNo <> '' then
        InternalMovementHeader.GET(InternalMovementNo);
    END;

    LOCAL PROCEDURE LookUpBinContent@6();
    VAR
      BinContent@1000 : Record "Bin Content";
    BEGIN
      BinContent.FILTERGROUP(2);
      BinContent.SETRANGE("Location Code","Location Code");
      BinContent.FILTERGROUP(0);
      BinContent."Location Code" := "Location Code";
      BinContent."Bin Code" := "From Bin Code";
      BinContent."Item No." := "Item No.";
      if "Variant Code" <> '' then begin
        TESTFIELD("Item No.");
        BinContent."Variant Code" := "Variant Code";
      end;
      if "Unit of Measure Code" <> '' then begin
        TESTFIELD("Item No.");
        BinContent."Unit of Measure Code" := "Unit of Measure Code";
      end;
      if PAGE.RUNMODAL(0,BinContent) = ACTION::LookupOK then begin
        if BinContent."Block Movement" in [BinContent."Block Movement"::Outbound,BinContent."Block Movement"::All]
        then
          BinContent.FIELDERROR("Block Movement");
        VALIDATE("Location Code",BinContent."Location Code");
        VALIDATE(Quantity,0);
        VALIDATE("From Bin Code",BinContent."Bin Code");
        VALIDATE("Item No.",BinContent."Item No.");
        VALIDATE("Variant Code",BinContent."Variant Code");
        VALIDATE("Unit of Measure Code",BinContent."Unit of Measure Code");
      end;
    END;

    LOCAL PROCEDURE SelectLookUp@10(CurrentFieldNo@1000 : Integer);
    VAR
      ItemVariant@1001 : Record "Item Variant";
    BEGIN
      GetLocation("Location Code");
      if Location."Bin Mandatory" then
        LookUpBinContent
      else begin
        if CurrentFieldNo = FIELDNO("From Bin Code") then
          Location.TESTFIELD("Bin Mandatory");

        if CurrentFieldNo = FIELDNO("Item No.") then begin
          Item."No." := "Item No.";
          if PAGE.RUNMODAL(0,Item) = ACTION::LookupOK then
            VALIDATE("Item No.",Item."No.");
        end;

        if CurrentFieldNo = FIELDNO("Variant Code") then begin
          TESTFIELD("Item No.");
          ItemVariant.FILTERGROUP(2);
          ItemVariant.SETRANGE("Item No.","Item No.");
          ItemVariant.FILTERGROUP(0);
          ItemVariant."Item No." := "Item No.";
          ItemVariant.Code := "Variant Code";
          if PAGE.RUNMODAL(0,ItemVariant) = ACTION::LookupOK then
            VALIDATE("Variant Code",ItemVariant.Code);
        end;

        if CurrentFieldNo = FIELDNO("Unit of Measure Code") then begin
          TESTFIELD("Item No.");
          ItemUnitOfMeasure.FILTERGROUP(2);
          ItemUnitOfMeasure.SETRANGE("Item No.","Item No.");
          ItemUnitOfMeasure.FILTERGROUP(0);
          ItemUnitOfMeasure."Item No." := "Item No.";
          ItemUnitOfMeasure.Code := "Unit of Measure Code";
          if PAGE.RUNMODAL(0,ItemUnitOfMeasure) = ACTION::LookupOK then
            VALIDATE("Unit of Measure Code",ItemUnitOfMeasure.Code);
        end;
      end;
    END;

    [External]
    PROCEDURE OpenItemTrackingLines@6500();
    VAR
      WhseWorksheetLine@1001 : Record "Whse. Worksheet Line";
      WhseItemTrackingLinesForm@1000 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      WhseWorksheetLine.InitLineWithItem(
        WhseWorksheetLine."Whse. Document Type"::"Internal Movement","No.",
        "Line No.","Location Code","Item No.","Qty. (Base)","Qty. (Base)","Qty. per Unit of Measure");

      WhseItemTrackingLinesForm.SetSource(WhseWorksheetLine,DATABASE::"Internal Movement Line");
      WhseItemTrackingLinesForm.RUNMODAL;
    END;

    LOCAL PROCEDURE CheckQtyItemTrackingLines@2() : Boolean;
    VAR
      WhseWorksheetLine@1001 : Record "Whse. Worksheet Line";
      TotalWhseItemTrackingLine@1025 : Record "Whse. Item Tracking Line";
      ItemTrackingMgt@1000 : Codeunit "Item Tracking Management";
      SourceQuantityArray@1028 : ARRAY [2] OF Decimal;
      UndefinedQtyArray@1027 : ARRAY [2] OF Decimal;
      WhseSNRequired@1004 : Boolean;
      WhseLNRequired@1003 : Boolean;
    BEGIN
      ItemTrackingMgt.CheckWhseItemTrkgSetup("Item No.",WhseSNRequired,WhseLNRequired,false);
      if WhseSNRequired or WhseLNRequired then begin
        WhseWorksheetLine.InitLineWithItem(
          WhseWorksheetLine."Whse. Document Type"::"Internal Movement",
          "No.","Line No.","Location Code","Item No.","Qty. (Base)","Qty. (Base)","Qty. per Unit of Measure");
        exit(
          ItemTrackingMgt.UpdateQuantities(
            WhseWorksheetLine,TotalWhseItemTrackingLine,SourceQuantityArray,UndefinedQtyArray,DATABASE::"Internal Movement Line"));
      end;
      exit(true);
    END;

    LOCAL PROCEDURE GetNextLineNo@16() : Integer;
    VAR
      InternalMovementLine@1000 : Record "Internal Movement Line";
      HigherLineNo@1002 : Integer;
      LowerLineNo@1001 : Integer;
    BEGIN
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      if InternalMovementHeader."Sorting Method" <> InternalMovementHeader."Sorting Method"::" " then
        exit(GetLastLineNo + 10000);

      InternalMovementLine."No." := InternalMovementHeader."No.";
      InternalMovementLine."Line No." := LastLineNo;
      if InternalMovementLine.FIND('<') then
        LowerLineNo := InternalMovementLine."Line No."
      else begin
        if InternalMovementLine.FIND('>') then
          exit(LastLineNo div 2);

        exit(LastLineNo + 10000);
      end;

      InternalMovementLine."No." := InternalMovementHeader."No.";
      InternalMovementLine."Line No." := LastLineNo;
      if InternalMovementLine.FIND('>') then
        HigherLineNo := LastLineNo
      else
        exit(LastLineNo + 10000);

      exit(LowerLineNo + (HigherLineNo - LowerLineNo) div 2);
    END;

    LOCAL PROCEDURE GetLastLineNo@20() : Integer;
    VAR
      InternalMovementLine@1000 : Record "Internal Movement Line";
    BEGIN
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader."No.");
      if InternalMovementLine.FINDLAST then
        exit(InternalMovementLine."Line No.");

      exit(0);
    END;

    LOCAL PROCEDURE GetSortSeqNo@12() : Integer;
    VAR
      InternalMovementLine@1000 : Record "Internal Movement Line";
      HigherSeqNo@1002 : Integer;
      LowerSeqNo@1003 : Integer;
      LastSeqNo@1001 : Integer;
    BEGIN
      GetInternalMovementHeader("No.");

      InternalMovementLine.SETRANGE("No.","No.");
      case InternalMovementHeader."Sorting Method" of
        InternalMovementHeader."Sorting Method"::" ":
          InternalMovementLine.SETCURRENTKEY("No.","Line No.");
        InternalMovementHeader."Sorting Method"::Item:
          InternalMovementLine.SETCURRENTKEY("No.","Item No.");
        InternalMovementHeader."Sorting Method"::"Shelf or Bin":
          begin
            GetLocation("Location Code");
            if Location."Bin Mandatory" then
              InternalMovementLine.SETCURRENTKEY("No.","From Bin Code")
            else
              InternalMovementLine.SETCURRENTKEY("No.","Shelf No.");
          end;
        InternalMovementHeader."Sorting Method"::"Due Date":
          InternalMovementLine.SETCURRENTKEY("No.","Due Date");
        else
          exit("Line No.");
      end;

      InternalMovementLine := Rec;
      LastSeqNo := GetLastSeqNo(InternalMovementLine);
      if InternalMovementLine.FIND('<') then
        LowerSeqNo := InternalMovementLine."Sorting Sequence No."
      else
        if InternalMovementLine.FIND('>') then
          exit(InternalMovementLine."Sorting Sequence No." div 2);

      LowerSeqNo := 10000;

      InternalMovementLine := Rec;
      if InternalMovementLine.FIND('>') then
        HigherSeqNo := InternalMovementLine."Sorting Sequence No."
      else
        if InternalMovementLine.FIND('<') then
          exit(LastSeqNo + 10000);

      HigherSeqNo := LastSeqNo;
      exit(LowerSeqNo + (HigherSeqNo - LowerSeqNo) div 2);
    END;

    LOCAL PROCEDURE GetLastSeqNo@17(InternalMovementLine@1001 : Record "Internal Movement Line") : Integer;
    BEGIN
      InternalMovementLine.SETRECFILTER;
      InternalMovementLine.SETRANGE("Line No.");
      InternalMovementLine.SETCURRENTKEY("No.","Sorting Sequence No.");
      if InternalMovementLine.FINDLAST then
        exit(InternalMovementLine."Sorting Sequence No.");

      exit(0);
    END;

    [External]
    PROCEDURE SetItemTrackingLines@19(SerialNo@1000 : Code[20];LotNo@1001 : Code[20];ExpirationDate@1005 : Date;QtyToEmpty@1002 : Decimal);
    VAR
      WhseWorksheetLine@1004 : Record "Whse. Worksheet Line";
      WhseItemTrackingLinesForm@1003 : Page "Whse. Item Tracking Lines";
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. (Base)");
      WhseWorksheetLine.InitLineWithItem(
        WhseWorksheetLine."Whse. Document Type"::"Internal Movement",
        "No.","Line No.","Location Code","Item No.","Qty. (Base)","Qty. (Base)","Qty. per Unit of Measure");
      WhseItemTrackingLinesForm.SetSource(WhseWorksheetLine,DATABASE::"Internal Movement Line");
      WhseItemTrackingLinesForm.InsertItemTrackingLine(WhseWorksheetLine,SerialNo,LotNo,ExpirationDate,QtyToEmpty);
    END;

    BEGIN
    END.
  }
}

