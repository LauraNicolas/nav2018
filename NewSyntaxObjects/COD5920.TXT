OBJECT Codeunit 5920 ServItemManagement
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Do you want to create a %1?';
      Text001@1001 : TextConst 'ENU=Service item %1 was created. This service item does not belong to any service contract.';
      Item@1002 : Record Item;
      ServItemGr@1003 : Record "Service Item Group";
      ServItem@1004 : Record "Service Item";
      ServMgtSetup@1006 : Record "Service Mgt. Setup";
      ServHeader@1009 : Record "Service Header";
      ServInvoiceLine@1015 : Record "Service Line";
      ItemUnitOfMeasure@1020 : Record "Item Unit of Measure";
      TempReservEntry@1014 : TEMPORARY Record "Reservation Entry";
      GLSetup@1021 : Record "General Ledger Setup";
      ServiceItemTEMP@1200 : TEMPORARY Record "Service Item";
      ServiceItemCompTEMP@1201 : TEMPORARY Record "Service Item Component";
      ResSkillMgt@1013 : Codeunit "Resource Skill Mgt.";
      NoSeriesMgt@1007 : Codeunit NoSeriesManagement;
      ServLogMgt@1008 : Codeunit ServLogManagement;
      ServOrderMgt@1018 : Codeunit ServOrderManagement;
      NextLineNo@1010 : Integer;
      Index@1011 : Integer;
      Text002@1012 : TextConst 'ENU=You have inserted a %1 on the selected %2.\Would you like to copy this information into the %1 field for the newly created %3?';
      Text003@1016 : TextConst 'ENU=Posting cannot be completed successfully. %1 %2  belongs to the %3 that requires creating service items. Check if the %4 field contains a whole number.';
      Text004@1017 : TextConst 'ENU=Posting cannot be completed successfully. For the items that are used to replace or create service item components, the %1 field on the %2 must contain a whole number.';
      Text005@1120 : TextConst 'ENU=The service item that is linked to the order has been deleted.';

    [External]
    PROCEDURE AddOrReplaceSIComponent@5(VAR ServLine@1000 : Record "Service Line";ServHeader@1010 : Record "Service Header";ServShptDocNo@1007 : Code[20];ServShptLineNo@1008 : Integer;VAR TempTrackingSpecification@1009 : TEMPORARY Record "Tracking Specification");
    VAR
      ServItemComponent@1003 : Record "Service Item Component";
      ServItemComponent2@1002 : Record "Service Item Component";
      NewServItemComponent@1001 : Record "Service Item Component";
      ComponentLine@1004 : Integer;
      x@1006 : Integer;
      TrackingLinesExist@1005 : Boolean;
    BEGIN
      if (ServLine.Type <> ServLine.Type::Item) or (ServLine."Qty. to Ship" = 0) then
        exit;
      with ServLine do
        case "Spare Part Action" of
          "Spare Part Action"::"Component Replaced":
            begin
              CheckWholeNumber(ServLine);
              NewServItemComponent.LOCKTABLE;
              NewServItemComponent.RESET;
              NewServItemComponent.SETRANGE(Active,false);
              NewServItemComponent.SETRANGE("Parent Service Item No.","Service Item No.");
              if NewServItemComponent.FINDLAST then
                ComponentLine := NewServItemComponent."Line No."
              else
                ComponentLine := 0;

              if ServItemComponent2.GET(true,"Service Item No.","Component Line No.") then begin
                ServItemComponent := ServItemComponent2;
                ServItemComponent."Service Order No." := "Document No.";
                CLEAR(ServLogMgt);
                ServLogMgt.ServItemComponentRemoved(ServItemComponent);
                ServItemComponent.DELETE;
                ServItemComponent2.Active := false;
                ServItemComponent2."Line No." := ComponentLine + 10000;
                ServItemComponent2."From Line No." := ServItemComponent."Line No.";
                ServItemComponent2."Service Order No." := ServHeader."No.";
                ServItemComponent2.INSERT;
                if ServItemComponent2.Type = ServItemComponent2.Type::"Service Item" then begin
                  ServItem.GET(ServItemComponent2."No.");
                  ServItem.Status := ServItem.Status::Defective;
                  ServItem.MODIFY;
                end;
              end;

              NewServItemComponent.INIT;
              NewServItemComponent.Active := true;
              NewServItemComponent."Parent Service Item No." := "Service Item No.";
              NewServItemComponent."Line No." := ServItemComponent."Line No.";
              NewServItemComponent.Type := NewServItemComponent.Type::Item;
              NewServItemComponent."No." := "No.";
              NewServItemComponent."Date Installed" := ServHeader."Posting Date";

              TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
              TempTrackingSpecification.SETRANGE("Source Subtype","Document Type");
              TempTrackingSpecification.SETRANGE("Source ID","Document No.");
              TempTrackingSpecification.SETRANGE("Source Ref. No.","Line No.");
              TrackingLinesExist := TempTrackingSpecification.FIND('-');
              if TrackingLinesExist then begin
                NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
                if TempTrackingSpecification.NEXT = 0 then
                  TrackingLinesExist := false;
              end;

              NewServItemComponent."Variant Code" := "Variant Code";
              NewServItemComponent.Description := Description;
              NewServItemComponent."Description 2" := "Description 2";
              NewServItemComponent."Last Date Modified" := TODAY;
              NewServItemComponent."Service Order No." := "Document No.";
              NewServItemComponent.INSERT;
              CLEAR(ServLogMgt);
              ServLogMgt.ServItemComponentAdded(NewServItemComponent);

              NewServItemComponent.SETRANGE(Active,true);
              if NewServItemComponent.FINDLAST then
                ComponentLine := NewServItemComponent."Line No."
              else
                ComponentLine := 0;

              for x := 2 to "Qty. to Ship" do begin
                NewServItemComponent.INIT;
                NewServItemComponent."Parent Service Item No." := "Service Item No.";
                ComponentLine := ComponentLine + 10000;
                NewServItemComponent."Line No." := ComponentLine;
                NewServItemComponent.Active := true;
                NewServItemComponent."No." := "No.";
                NewServItemComponent.Type := NewServItemComponent.Type::Item;
                NewServItemComponent."Date Installed" := ServHeader."Posting Date";
                if TrackingLinesExist then begin
                  NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
                  if TempTrackingSpecification.NEXT = 0 then
                    TrackingLinesExist := false;
                end;
                NewServItemComponent.Description := Description;
                NewServItemComponent."Description 2" := "Description 2";
                NewServItemComponent."Last Date Modified" := TODAY;
                NewServItemComponent.INSERT;
                CLEAR(ServLogMgt);
                ServLogMgt.ServItemComponentAdded(NewServItemComponent);
              end;
            end;
          "Spare Part Action"::"Component Installed":
            begin
              CheckWholeNumber(ServLine);
              NewServItemComponent.LOCKTABLE;
              NewServItemComponent.RESET;
              NewServItemComponent.SETRANGE(Active,true);
              NewServItemComponent.SETRANGE("Parent Service Item No.","Service Item No.");
              if NewServItemComponent.FINDLAST then
                ComponentLine := NewServItemComponent."Line No."
              else
                ComponentLine := 0;

              TempTrackingSpecification.SETRANGE("Source Type",DATABASE::"Service Line");
              TempTrackingSpecification.SETRANGE("Source Subtype","Document Type");
              TempTrackingSpecification.SETRANGE("Source ID","Document No.");
              TempTrackingSpecification.SETRANGE("Source Ref. No.","Line No.");
              TrackingLinesExist := TempTrackingSpecification.FIND('-');

              for x := 1 to "Qty. to Ship" do begin
                NewServItemComponent.INIT;
                NewServItemComponent."Parent Service Item No." := "Service Item No.";
                ComponentLine := ComponentLine + 10000;
                NewServItemComponent."Line No." := ComponentLine;
                NewServItemComponent.Active := true;
                NewServItemComponent."No." := "No.";
                NewServItemComponent.Type := NewServItemComponent.Type::Item;
                NewServItemComponent."Date Installed" := ServHeader."Posting Date";
                if TrackingLinesExist then begin
                  NewServItemComponent."Serial No." := TempTrackingSpecification."Serial No.";
                  if TempTrackingSpecification.NEXT = 0 then
                    TrackingLinesExist := false;
                end;
                NewServItemComponent.Description := Description;
                NewServItemComponent."Description 2" := "Description 2";
                NewServItemComponent."Last Date Modified" := TODAY;
                NewServItemComponent."Service Order No." := "Document No.";
                NewServItemComponent.INSERT;
                CLEAR(ServLogMgt);
                ServLogMgt.ServItemComponentAdded(NewServItemComponent);
              end;
            end;
          "Spare Part Action"::Permanent,
          "Spare Part Action"::"Temporary":
            begin
              ServItem.GET("Service Item No.");
              ServOrderMgt.ReplacementCreateServItem(ServItem,ServLine,
                ServShptDocNo,ServShptLineNo,TempTrackingSpecification);
            end;
        end;
    END;

    [External]
    PROCEDURE CreateServItemOnSalesLineShpt@3(SalesHeader@1000 : Record "Sales Header";SalesLine@1003 : Record "Sales Line";SalesShipmentLine@1008 : Record "Sales Shipment Line");
    VAR
      ServItemComponent@1004 : Record "Service Item Component";
      ItemTrackingCode@1005 : Record "Item Tracking Code";
      BOMComp@1001 : Record "BOM Component";
      BOMComp2@1002 : Record "BOM Component";
      TrackingLinesExist@1006 : Boolean;
      x@1007 : Integer;
      ServItemWithSerialNoExist@1009 : Boolean;
    BEGIN
      if not (SalesHeader."Document Type" in [SalesHeader."Document Type"::Order,SalesHeader."Document Type"::Invoice]) then
        exit;

      if (SalesLine.Type = SalesLine.Type::Item) and (SalesLine."Qty. to Ship (Base)" > 0) then begin
        Item.GET(SalesLine."No.");
        if not ItemTrackingCode.GET(Item."Item Tracking Code") then
          ItemTrackingCode.INIT;
        if ServItemGr.GET(Item."Service Item Group") and ServItemGr."Create Service Item" then begin
          if SalesLine."Qty. to Ship (Base)" <> ROUND(SalesLine."Qty. to Ship (Base)",1) then
            ERROR(
              Text003,
              Item.TABLECAPTION,
              Item."No.",
              ServItemGr.TABLECAPTION,
              SalesLine.FIELDCAPTION("Qty. to Ship (Base)"));

          TempReservEntry.SETRANGE("Item No.",SalesLine."No.");
          TempReservEntry.SETRANGE("Location Code",SalesLine."Location Code");
          TempReservEntry.SETRANGE("Variant Code",SalesLine."Variant Code");
          TempReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
          TempReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
          TempReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
          TrackingLinesExist := TempReservEntry.FINDSET;

          ServiceItemTEMP.DELETEALL;
          ServiceItemCompTEMP.DELETEALL;

          GLSetup.GET;
          ServMgtSetup.GET;
          ServMgtSetup.TESTFIELD("Service Item Nos.");
          for x := 1 to SalesLine."Qty. to Ship (Base)" do begin
            CLEAR(ServItem);
            ServItemWithSerialNoExist := false;
            if TempReservEntry."Serial No." <> '' then begin
              ServItem.SETRANGE("Item No.",SalesLine."No.");
              ServItem.SETRANGE("Serial No.",TempReservEntry."Serial No.");
              if ServItem.FINDFIRST then
                ServItemWithSerialNoExist := true;
            end;
            if (TempReservEntry."Serial No." = '') or (not ServItemWithSerialNoExist) then begin
              ServItem.INIT;
              NoSeriesMgt.InitSeries(
                ServMgtSetup."Service Item Nos.",ServItem."No. Series",0D,ServItem."No.",ServItem."No. Series");
              ServItem.INSERT;
            end;
            ServItem."Sales/Serv. Shpt. Document No." := SalesShipmentLine."Document No.";
            ServItem."Sales/Serv. Shpt. Line No." := SalesShipmentLine."Line No.";
            ServItem."Shipment Type" := ServItem."Shipment Type"::Sales;
            ServItem.VALIDATE(Description,
              COPYSTR(SalesLine.Description,1,MAXSTRLEN(ServItem.Description)));
            ServItem."Description 2" := COPYSTR(
                STRSUBSTNO('%1 %2',SalesHeader."Document Type",SalesHeader."No."),
                1,MAXSTRLEN(ServItem."Description 2"));
            ServItem.VALIDATE("Customer No.",SalesHeader."Sell-to Customer No.");
            ServItem.VALIDATE("Ship-to Code",SalesHeader."Ship-to Code");
            ServItem.OmitAssignResSkills(true);
            ServItem.VALIDATE("Item No.",Item."No.");
            ServItem.OmitAssignResSkills(false);
            if TrackingLinesExist then
              ServItem."Serial No." := TempReservEntry."Serial No.";
            ServItem."Variant Code" := SalesLine."Variant Code";

            ItemUnitOfMeasure.GET(Item."No.",SalesLine."Unit of Measure Code");

            ServItem.VALIDATE("Sales Unit Cost",ROUND(SalesLine."Unit Cost (LCY)" /
                ItemUnitOfMeasure."Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision"));
            if SalesHeader."Currency Code" <> '' then
              ServItem.VALIDATE(
                "Sales Unit Price",
                AmountToLCY(
                  ROUND(SalesLine."Unit Price" /
                    ItemUnitOfMeasure."Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision"),
                  SalesHeader."Currency Factor",
                  SalesHeader."Currency Code",
                  SalesHeader."Posting Date"))
            else
              ServItem.VALIDATE("Sales Unit Price",ROUND(SalesLine."Unit Price" /
                  ItemUnitOfMeasure."Qty. per Unit of Measure",GLSetup."Unit-Amount Rounding Precision"));
            ServItem."Vendor No." := Item."Vendor No.";
            ServItem."Vendor Item No." := Item."Vendor Item No.";
            ServItem."Unit of Measure Code" := Item."Base Unit of Measure";
            ServItem."Sales Date" := SalesHeader."Posting Date";
            ServItem."Installation Date" := SalesHeader."Posting Date";
            ServItem."Warranty % (Parts)" := ServMgtSetup."Warranty Disc. % (Parts)";
            ServItem."Warranty % (Labor)" := ServMgtSetup."Warranty Disc. % (Labor)";
            ServItem."Warranty Starting Date (Parts)" := SalesHeader."Posting Date";
            if FORMAT(ItemTrackingCode."Warranty Date Formula") <> '' then
              ServItem."Warranty Ending Date (Parts)" :=
                CALCDATE(ItemTrackingCode."Warranty Date Formula",SalesHeader."Posting Date")
            else
              ServItem."Warranty Ending Date (Parts)" :=
                CALCDATE(
                  ServMgtSetup."Default Warranty Duration",
                  SalesHeader."Posting Date");
            ServItem."Warranty Starting Date (Labor)" := SalesHeader."Posting Date";
            ServItem."Warranty Ending Date (Labor)" :=
              CALCDATE(
                ServMgtSetup."Default Warranty Duration",
                SalesHeader."Posting Date");
            ServItem.MODIFY;
            CLEAR(ServiceItemTEMP);
            ServiceItemTEMP := ServItem;
            if ServiceItemTEMP.INSERT then;
            ResSkillMgt.AssignServItemResSkills(ServItem);
            if SalesLine."BOM Item No." <> '' then begin
              CLEAR(BOMComp);
              BOMComp.SETRANGE("Parent Item No.",SalesLine."BOM Item No.");
              BOMComp.SETRANGE(Type,BOMComp.Type::Item);
              BOMComp.SETRANGE("No.",SalesLine."No.");
              BOMComp.SETRANGE("Installed in Line No.",0);
              if BOMComp.FINDSET then
                repeat
                  CLEAR(BOMComp2);
                  BOMComp2.SETRANGE("Parent Item No.",SalesLine."BOM Item No.");
                  BOMComp2.SETRANGE("Installed in Line No.",BOMComp."Line No.");
                  NextLineNo := 0;
                  if BOMComp2.FINDSET then
                    repeat
                      for Index := 1 to ROUND(BOMComp2."Quantity per",1) do begin
                        NextLineNo := NextLineNo + 10000;
                        ServItemComponent.INIT;
                        ServItemComponent.Active := true;
                        ServItemComponent."Parent Service Item No." := ServItem."No.";
                        ServItemComponent."Line No." := NextLineNo;
                        ServItemComponent.Type := ServItemComponent.Type::Item;
                        ServItemComponent."No." := BOMComp2."No.";
                        ServItemComponent."Date Installed" := SalesHeader."Posting Date";
                        ServItemComponent.Description := BOMComp2.Description;
                        ServItemComponent."Serial No." := '';
                        ServItemComponent."Variant Code" := BOMComp2."Variant Code";
                        ServItemComponent.INSERT;
                        CLEAR(ServiceItemCompTEMP);
                        ServiceItemCompTEMP := ServItemComponent;
                        ServiceItemCompTEMP.INSERT;
                      end;
                    until BOMComp2.NEXT = 0;
                until BOMComp.NEXT = 0;
            end;
            CLEAR(ServLogMgt);
            ServLogMgt.ServItemAutoCreated(ServItem);
            TrackingLinesExist := TempReservEntry.NEXT = 1;
          end;
        end;
      end;
    END;

    [External]
    PROCEDURE CreateServItemOnServItemLine@2(VAR ServItemLine@1000 : Record "Service Item Line");
    BEGIN
      with ServItemLine do begin
        TESTFIELD("Service Item No.",'');
        TESTFIELD("Document No.");
        TESTFIELD(Description);
        if not CONFIRM(Text000,false,LOWERCASE(ServItem.TABLECAPTION)) then
          exit;

        CLEAR(ServItem);
        ServItem.INIT;
        ServMgtSetup.GET;
        ServMgtSetup.TESTFIELD("Service Item Nos.");
        NoSeriesMgt.InitSeries(
          ServMgtSetup."Service Item Nos.",ServItem."No. Series",0D,ServItem."No.",
          ServItem."No. Series");
        ServItem.INSERT;
        ServItem.VALIDATE(Description,Description);
        CLEAR(ServHeader);
        ServHeader.GET("Document Type","Document No.");
        ServItem.VALIDATE("Customer No.",ServHeader."Customer No.");
        ServItem.VALIDATE("Ship-to Code",ServHeader."Ship-to Code");
        ServItem.OmitAssignResSkills(true);
        ServItem.VALIDATE("Item No.","Item No.");
        ServItem.OmitAssignResSkills(false);
        ServItem."Variant Code" := "Variant Code";
        ServItem.VALIDATE("Serial No.","Serial No.");
        ServItem."Response Time (Hours)" := "Response Time (Hours)";
        ServItem."Sales Unit Cost" := 0;
        ServItem."Sales Unit Price" := 0;
        ServItem."Vendor No." := "Vendor No.";
        ServItem."Vendor Item No." := "Vendor Item No.";
        ServItem."Unit of Measure Code" := '';
        ServItem."Sales Date" := 0D;
        ServItem."Installation Date" := ServHeader."Posting Date";
        ServItem."Warranty Starting Date (Parts)" := "Warranty Starting Date (Parts)";
        ServItem."Warranty Ending Date (Parts)" := "Warranty Ending Date (Parts)";
        ServItem."Warranty Starting Date (Labor)" := "Warranty Starting Date (Labor)";
        ServItem."Warranty Ending Date (Labor)" := "Warranty Ending Date (Labor)";
        ServItem."Warranty % (Parts)" := "Warranty % (Parts)";
        ServItem."Warranty % (Labor)" := "Warranty % (Labor)";
        ServItem."Service Item Group Code" := "Service Item Group Code";
        if "Service Price Group Code" <> '' then
          if CONFIRM(Text002,false,FIELDCAPTION("Service Price Group Code"),TABLECAPTION,ServItem.TABLECAPTION) then
            ServItem."Service Price Group Code" := "Service Price Group Code";
        ServItem.MODIFY;
        ResSkillMgt.AssignServItemResSkills(ServItem);
        CLEAR(ServLogMgt);
        ServLogMgt.ServItemAutoCreated(ServItem);
        MESSAGE(Text001,ServItem."No.");
        "Service Item No." := ServItem."No.";
        "Contract No." := '';
        MODIFY;
        CreateDim(
          DATABASE::"Service Item","Service Item No.",
          DATABASE::"Service Item Group","Service Item Group Code",
          DATABASE::"Responsibility Center","Responsibility Center");
      end;

      ServLogMgt.ServItemToServOrder(ServItemLine);

      ServInvoiceLine.SETCURRENTKEY("Document Type","Document No.","Service Item Line No.");
      ServInvoiceLine.SETRANGE("Document Type",ServItemLine."Document Type");
      ServInvoiceLine.SETRANGE("Document No.",ServItemLine."Document No.");
      ServInvoiceLine.SETRANGE("Service Item Line No.",ServItemLine."Line No.");
      ServInvoiceLine.MODIFYALL("Service Item No.",ServItemLine."Service Item No.");
    END;

    LOCAL PROCEDURE AmountToLCY@22(FCAmount@1000 : Decimal;CurrencyFactor@1004 : Decimal;CurrencyCode@1005 : Code[10];CurrencyDate@1006 : Date) : Decimal;
    VAR
      CurrExchRate@1002 : Record "Currency Exchange Rate";
      Currency@1003 : Record Currency;
    BEGIN
      Currency.GET(CurrencyCode);
      Currency.TESTFIELD("Unit-Amount Rounding Precision");
      exit(
        ROUND(
          CurrExchRate.ExchangeAmtFCYToLCY(
            CurrencyDate,CurrencyCode,
            FCAmount,CurrencyFactor),
          Currency."Unit-Amount Rounding Precision"));
    END;

    [External]
    PROCEDURE CopyReservationEntry@1(SalesHeader@1003 : Record "Sales Header");
    VAR
      SalesLine@1000 : Record "Sales Line";
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      SalesLine.SETFILTER("Qty. to Ship",'<>0');
      if SalesLine.FINDSET then
        repeat
          CopyReservationEntryLine(SalesLine);
        until SalesLine.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyReservationEntryService@8(ServHeader@1003 : Record "Service Header");
    VAR
      ReservEntry@1000 : Record "Reservation Entry";
    BEGIN
      ReservEntry.RESET;
      CLEAR(TempReservEntry);

      ReservEntry.SETRANGE("Source Subtype",ServHeader."Document Type");
      ReservEntry.SETRANGE("Source ID",ServHeader."No.");
      ReservEntry.SETRANGE(Positive,false);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Service Line");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETFILTER("Serial No.",'<>%1','');
      ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>%1',0);

      if ReservEntry.FINDSET then
        repeat
          TempReservEntry := ReservEntry;
          TempReservEntry.INSERT;
        until ReservEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CreateServItemOnSalesInvoice@4(VAR SalesHeader@1000 : Record "Sales Header");
    VAR
      SalesLine@1001 : Record "Sales Line";
      DummySalesShptLine@1002 : Record "Sales Shipment Line";
    BEGIN
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      if SalesLine.FINDSET then
        repeat
          CreateServItemOnSalesLineShpt(SalesHeader,SalesLine,DummySalesShptLine);
        until SalesLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckWholeNumber@6(VAR ServLine@1000 : Record "Service Line");
    BEGIN
      with ServLine do begin
        if Quantity <> ROUND(Quantity,1) then
          ERROR(Text004,FIELDCAPTION(Quantity),TABLECAPTION);
        if "Qty. to Ship" <> ROUND("Qty. to Ship",1) then
          ERROR(Text004,FIELDCAPTION("Qty. to Ship"),TABLECAPTION);
      end;
    END;

    [External]
    PROCEDURE ReturnServItemComp@1206(VAR ServItemTmp@1200 : TEMPORARY Record "Service Item";VAR ServItemCmpTmp@1201 : TEMPORARY Record "Service Item Component");
    BEGIN
      ServItemTmp.DELETEALL;
      if ServiceItemTEMP.FIND('-') then
        repeat
          ServItemTmp := ServiceItemTEMP;
          ServItemTmp.INSERT;
        until ServiceItemTEMP.NEXT = 0;
      ServItemCmpTmp.DELETEALL;
      if ServiceItemCompTEMP.FIND('-') then
        repeat
          ServItemCmpTmp := ServiceItemCompTEMP;
          ServItemCmpTmp.INSERT;
        until ServiceItemCompTEMP.NEXT = 0;
    END;

    [External]
    PROCEDURE DeleteServItemOnSaleCreditMemo@1100(SalesHeader@1101 : Record "Sales Header");
    VAR
      SalesLine@1102 : Record "Sales Line";
      ServItem@1103 : Record "Service Item";
      ReservationEntry@1104 : Record "Reservation Entry";
      ServItemDeleted@1105 : Boolean;
    BEGIN
      if not (SalesHeader."Document Type" in [SalesHeader."Document Type"::"Credit Memo",SalesHeader."Document Type"::"Return Order"]) then
        exit;

      ServItemDeleted := false;
      SalesLine.SETRANGE("Document Type",SalesHeader."Document Type");
      SalesLine.SETRANGE("Document No.",SalesHeader."No.");
      if SalesLine.FINDSET then
        repeat
          if SalesLine.Type = SalesLine.Type::Item then begin
            ReservationEntry.SETRANGE("Item No.",SalesLine."No.");
            ReservationEntry.SETRANGE("Location Code",SalesLine."Location Code");
            ReservationEntry.SETRANGE("Source ID",SalesLine."Document No.");
            ReservationEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
            if ReservationEntry.FINDSET then
              repeat
                ServItem.SETRANGE("Item No.",SalesLine."No.");
                ServItem.SETRANGE("Customer No.",SalesLine."Sell-to Customer No.");
                ServItem.SETRANGE("Serial No.",ReservationEntry."Serial No.");
                if ServItem.FINDFIRST then begin
                  if ServItem.CheckIfCanBeDeleted <> '' then begin
                    ServItem.VALIDATE(Status,ServItem.Status::" ");
                    ServItem.MODIFY(true);
                  end else
                    if ServItem.DELETE(true) then
                      ServItemDeleted := true;
                end;
              until ReservationEntry.NEXT = 0;
          end;
        until SalesLine.NEXT = 0;
      if ServItemDeleted then
        MESSAGE(Text005);
    END;

    LOCAL PROCEDURE CopyReservationEntryLine@10(SalesLine@1003 : Record "Sales Line");
    VAR
      ReservEntry@1000 : Record "Reservation Entry";
    BEGIN
      ReservEntry.RESET;
      ReservEntry.SETRANGE("Source Subtype",SalesLine."Document Type");
      ReservEntry.SETRANGE("Source ID",SalesLine."Document No.");
      ReservEntry.SETRANGE(Positive,false);
      ReservEntry.SETRANGE("Source Type",DATABASE::"Sales Line");
      ReservEntry.SETRANGE("Source Ref. No.",SalesLine."Line No.");
      ReservEntry.SETRANGE("Source Batch Name",'');
      ReservEntry.SETRANGE("Source Prod. Order Line",0);
      ReservEntry.SETFILTER("Serial No.",'<>%1','');
      ReservEntry.SETFILTER("Qty. to Handle (Base)",'<>%1',0);

      if ReservEntry.FINDSET then
        repeat
          TempReservEntry := ReservEntry;
          TempReservEntry.INSERT;
        until ReservEntry.NEXT = 0;
    END;

    [External]
    PROCEDURE CopyReservation@286(PurchaseHeader@1000 : Record "Purchase Header");
    VAR
      PurchaseLine@1001 : Record "Purchase Line";
      SalesLine@1002 : Record "Sales Line";
    BEGIN
      PurchaseLine.SETRANGE("Document Type",PurchaseHeader."Document Type");
      PurchaseLine.SETRANGE("Document No.",PurchaseHeader."No.");
      PurchaseLine.SETRANGE("Drop Shipment",true);
      PurchaseLine.SETFILTER(Quantity,'<>0');
      if PurchaseLine.FINDSET then
        repeat
          if SalesLine.GET(SalesLine."Document Type"::Order,PurchaseLine."Sales Order No.",PurchaseLine."Sales Order Line No.") then
            CopyReservationEntryLine(SalesLine);
        until PurchaseLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

