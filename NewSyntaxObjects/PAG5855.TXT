OBJECT Page 5855 Posted Purchase Document Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    CaptionML=ENU=Posted Purchase Document Lines;
    SaveValues=true;
    InsertAllowed=false;
    DeleteAllowed=false;
    ModifyAllowed=false;
    LinksAllowed=false;
    SourceTable=Vendor;
    PageType=ListPlus;
    OnInit=BEGIN
             ShowRevLineEnable := true;
           END;

    OnOpenPage=BEGIN
                 CurrentMenuType := 1;
                 ChangeSubMenu(CurrentMenuType);

                 SETRANGE("No.","No.");

                 OriginalQuantity := false;
               END;

    OnAfterGetRecord=BEGIN
                       CALCFIELDS(
                         "No. of Pstd. Receipts","No. of Pstd. Invoices",
                         "No. of Pstd. Return Shipments","No. of Pstd. Credit Memos");
                       CurrentMenuTypeOpt := CurrentMenuType;
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                Name=Container1900000001;
                ContainerType=ContentArea }

    { 46  ;1   ;Group     ;
                Name=Options;
                CaptionML=ENU=Options }

    { 63  ;2   ;Field     ;
                Name=ShowRevLine;
                CaptionML=ENU=Show Reversible Lines Only;
                ToolTipML=ENU=Specifies if only lines with quantities that are available to be reversed are shown. For example, on a posted purchase invoice with an original quantity of 20, and 15 of the items have already been sold, the quantity that is available to be reversed on the posted purchase invoice is 5.;
                ApplicationArea=#Suite;
                SourceExpr=ShowRevLinesOnly;
                Enabled=ShowRevLineEnable;
                OnValidate=BEGIN
                             case CurrentMenuType of
                               0:
                                 CurrPage.PostedRcpts.PAGE.Initialize(
                                   ShowRevLinesOnly,
                                   CopyDocMgt.IsPurchFillExactCostRevLink(
                                     ToPurchHeader,CurrentMenuType,ToPurchHeader."Currency Code"),true);
                               1:
                                 CurrPage.PostedInvoices.PAGE.Initialize(
                                   ToPurchHeader,ShowRevLinesOnly,
                                   CopyDocMgt.IsPurchFillExactCostRevLink(
                                     ToPurchHeader,CurrentMenuType,ToPurchHeader."Currency Code"),true);
                             end;
                             ShowRevLinesOnlyOnAfterValidat;
                           END;

                ImplicitType=Boolean }

    { 2   ;2   ;Field     ;
                Name=OriginalQuantity;
                CaptionML=ENU=Return Original Quantity;
                ToolTipML=ENU=Specifies whether to use the original quantity to return quantities associated with specific receipts. For example, on a posted purchase invoice with an original quantity of 20, you can match this quantity with a specific shipment received even if some of the 20 items have been sold.;
                ApplicationArea=#Suite;
                SourceExpr=OriginalQuantity;
                ImplicitType=Boolean }

    { 19  ;1   ;Group     ;
                Name=Group19 }

    { 9   ;2   ;Group     ;
                Name=Group9 }

    { 15  ;3   ;Field     ;
                Name=PostedReceiptsBtn;
                OptionCaptionML=ENU=Posted Receipts,Posted Invoices,Posted Return Shipments,Posted Cr. Memos;
                ApplicationArea=#Suite;
                SourceExpr=CurrentMenuTypeOpt;
                CaptionClass=OptionCaptionServiceTier;
                OnValidate=BEGIN
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x3 then
                               x3CurrentMenuTypeOptOnValidate;
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x2 then
                               x2CurrentMenuTypeOptOnValidate;
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x1 then
                               x1CurrentMenuTypeOptOnValidate;
                             if CurrentMenuTypeOpt = CurrentMenuTypeOpt::x0 then
                               x0CurrentMenuTypeOptOnValidate;
                           END;

                ImplicitType=Option }

    { 16  ;3   ;Field     ;
                Name=&Posted Receipts;
                CaptionML=ENU=&Posted Receipts;
                ToolTipML=ENU=Specifies the lines that represent posted receipts.;
                ApplicationArea=#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Receipts");
                Editable=FALSE }

    { 14  ;3   ;Field     ;
                Name=NoOfPostedInvoices;
                CaptionML=ENU=Posted I&nvoices;
                ToolTipML=ENU=Specifies the lines that represent posted invoices.;
                ApplicationArea=#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Invoices" - NoOfPostedPrepmtInvoices);
                Editable=FALSE }

    { 41  ;3   ;Field     ;
                Name=Posted Ret&urn Shipments;
                CaptionML=ENU=Posted Ret&urn Shipments;
                ToolTipML=ENU=Specifies the lines that represent posted return shipments.;
                ApplicationArea=#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Return Shipments");
                Editable=FALSE }

    { 11  ;3   ;Field     ;
                Name=NoOfPostedCrMemos;
                CaptionML=ENU=Posted Cr. &Memos;
                ToolTipML=ENU=Specifies the lines that represent posted purchase credit memos.;
                ApplicationArea=#Suite;
                SourceExpr=STRSUBSTNO('(%1)',"No. of Pstd. Credit Memos" - NoOfPostedPrepmtCrMemos);
                Editable=FALSE }

    { 44  ;3   ;Field     ;
                Name=CurrentMenuTypeValue;
                ApplicationArea=#SalesReturnOrder;
                SourceExpr=CurrentMenuType;
                Visible=FALSE;
                ImplicitType=Integer }

    { 18  ;2   ;Group     ;
                Name=Group18 }

    { 6   ;3   ;Part      ;
                Name=PostedInvoices;
                ApplicationArea=#All;
                SubPageView=SORTING("Buy-from Vendor No.");
                SubPageLink="Buy-from Vendor No."=FIELD("No.");
                PagePartID="Get Post.Doc - P.InvLn Subform";
                Visible=PostedInvoicesVisible }

    { 7   ;3   ;Part      ;
                Name=PostedRcpts;
                ApplicationArea=#All;
                SubPageView=SORTING("Buy-from Vendor No.");
                SubPageLink="Buy-from Vendor No."=FIELD("No.");
                PagePartID="Get Post.Doc - P.RcptLn Sbfrm";
                Visible=PostedRcptsVisible }

    { 1   ;3   ;Part      ;
                Name=PostedCrMemos;
                ApplicationArea=#All;
                SubPageView=SORTING("Buy-from Vendor No.");
                SubPageLink="Buy-from Vendor No."=FIELD("No.");
                PagePartID="Get Post.Doc-P.Cr.MemoLn Sbfrm";
                Visible=PostedCrMemosVisible }

    { 5   ;3   ;Part      ;
                Name=PostedReturnShpts;
                ApplicationArea=#All;
                SubPageView=SORTING("Buy-from Vendor No.");
                SubPageLink="Buy-from Vendor No."=FIELD("No.");
                PagePartID="Get Pst.Doc-RtrnShptLn Subform";
                Visible=PostedReturnShptsVisible }

  }
  CODE
  {
    VAR
      ToPurchHeader@1002 : Record "Purchase Header";
      CopyDocMgt@1010 : Codeunit "Copy Document Mgt.";
      OldMenuType@1001 : Integer;
      CurrentMenuType@1000 : Integer;
      LinesNotCopied@1008 : Integer;
      ShowRevLinesOnly@1004 : Boolean;
      MissingExCostRevLink@1006 : Boolean;
      Text000@1009 : TextConst 'ENU=The document lines that have a G/L account that does not allow direct posting have not been copied to the new document.';
      OriginalQuantity@1003 : Boolean;
      Text002@1091 : TextConst 'ENU=Document Type Filter';
      PostedRcptsVisible@19051516 : Boolean INDATASET;
      PostedInvoicesVisible@19029596 : Boolean INDATASET;
      PostedReturnShptsVisible@19040725 : Boolean INDATASET;
      PostedCrMemosVisible@19050108 : Boolean INDATASET;
      ShowRevLineEnable@19075015 : Boolean INDATASET;
      CurrentMenuTypeOpt@19019278 : 'x0,x1,x2,x3';

    [Internal]
    PROCEDURE CopyLineToDoc@5();
    VAR
      FromPurchRcptLine@1001 : Record "Purch. Rcpt. Line";
      FromPurchInvLine@1002 : Record "Purch. Inv. Line";
      FromPurchCrMemoLine@1003 : Record "Purch. Cr. Memo Line";
      FromReturnShptLine@1004 : Record "Return Shipment Line";
      PurchDocType@1000 : 'Quote,"Blanket Order",Order,Invoice,"Return Order","Credit Memo","Posted Receipt","Posted Invoice","Posted Return Shipment","Posted Credit Memo"';
    BEGIN
      ToPurchHeader.TESTFIELD(Status,ToPurchHeader.Status::Open);
      LinesNotCopied := 0;
      case CurrentMenuType of
        0:
          begin
            CurrPage.PostedRcpts.PAGE.GetSelectedLine(FromPurchRcptLine);
            CopyDocMgt.SetProperties(false,false,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopyPurchaseLinesToDoc(
              PurchDocType::"Posted Receipt",ToPurchHeader,
              FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
        1:
          begin
            CurrPage.PostedInvoices.PAGE.GetSelectedLine(FromPurchInvLine);
            CopyDocMgt.SetProperties(false,false,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopyPurchaseLinesToDoc(
              PurchDocType::"Posted Invoice",ToPurchHeader,
              FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
        2:
          begin
            CurrPage.PostedReturnShpts.PAGE.GetSelectedLine(FromReturnShptLine);
            CopyDocMgt.SetProperties(false,true,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopyPurchaseLinesToDoc(
              PurchDocType::"Posted Return Shipment",ToPurchHeader,
              FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
        3:
          begin
            CurrPage.PostedCrMemos.PAGE.GetSelectedLine(FromPurchCrMemoLine);
            CopyDocMgt.SetProperties(false,false,false,false,true,true,OriginalQuantity);
            CopyDocMgt.CopyPurchaseLinesToDoc(
              PurchDocType::"Posted Credit Memo",ToPurchHeader,
              FromPurchRcptLine,FromPurchInvLine,FromReturnShptLine,FromPurchCrMemoLine,LinesNotCopied,MissingExCostRevLink);
          end;
      end;
      CopyDocMgt.ShowMessageReapply(OriginalQuantity);
      CLEAR(CopyDocMgt);

      if LinesNotCopied <> 0 then
        MESSAGE(Text000);
    END;

    LOCAL PROCEDURE ChangeSubMenu@1(NewMenuType@1000 : Integer);
    BEGIN
      if OldMenuType <> NewMenuType then
        SetSubMenu(OldMenuType,false);
      SetSubMenu(NewMenuType,true);
      OldMenuType := NewMenuType;
      CurrentMenuType := NewMenuType;
    END;

    LOCAL PROCEDURE SetSubMenu@2(MenuType@1000 : Integer;Visible@1001 : Boolean);
    BEGIN
      if ShowRevLinesOnly and (MenuType in [0,1]) then
        ShowRevLinesOnly :=
          CopyDocMgt.IsPurchFillExactCostRevLink(ToPurchHeader,MenuType,ToPurchHeader."Currency Code");
      ShowRevLineEnable := MenuType in [0,1];
      case MenuType of
        0:
          begin
            PostedRcptsVisible := Visible;
            CurrPage.PostedRcpts.PAGE.Initialize(
              ShowRevLinesOnly,
              CopyDocMgt.IsPurchFillExactCostRevLink(
                ToPurchHeader,MenuType,ToPurchHeader."Currency Code"),Visible);
          end;
        1:
          begin
            PostedInvoicesVisible := Visible;
            CurrPage.PostedInvoices.PAGE.Initialize(
              ToPurchHeader,ShowRevLinesOnly,
              CopyDocMgt.IsPurchFillExactCostRevLink(
                ToPurchHeader,MenuType,ToPurchHeader."Currency Code"),Visible);
          end;
        2:
          PostedReturnShptsVisible := Visible;
        3:
          PostedCrMemosVisible := Visible;
      end;
    END;

    [External]
    PROCEDURE SetToPurchHeader@4(NewToPurchHeader@1000 : Record "Purchase Header");
    BEGIN
      ToPurchHeader := NewToPurchHeader;
    END;

    LOCAL PROCEDURE OptionCaptionServiceTier@1088() : Text[70];
    BEGIN
      exit(Text002);
    END;

    LOCAL PROCEDURE ShowRevLinesOnlyOnAfterValidat@19064108();
    BEGIN
      CurrPage.UPDATE(true);
    END;

    LOCAL PROCEDURE x0CurrentMenuTypeOptOnPush@19052720();
    BEGIN
      ChangeSubMenu(0);
    END;

    LOCAL PROCEDURE x0CurrentMenuTypeOptOnValidate@19061499();
    BEGIN
      x0CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x1CurrentMenuTypeOptOnPush@19049100();
    BEGIN
      ChangeSubMenu(1);
    END;

    LOCAL PROCEDURE x1CurrentMenuTypeOptOnValidate@19066842();
    BEGIN
      x1CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x2CurrentMenuTypeOptOnPush@19056045();
    BEGIN
      ChangeSubMenu(2);
    END;

    LOCAL PROCEDURE x2CurrentMenuTypeOptOnValidate@19009894();
    BEGIN
      x2CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE x3CurrentMenuTypeOptOnPush@19036287();
    BEGIN
      ChangeSubMenu(3);
    END;

    LOCAL PROCEDURE x3CurrentMenuTypeOptOnValidate@19044768();
    BEGIN
      x3CurrentMenuTypeOptOnPush;
    END;

    LOCAL PROCEDURE NoOfPostedPrepmtInvoices@3() : Integer;
    VAR
      PurchInvHeader@1000 : Record "Purch. Inv. Header";
    BEGIN
      PurchInvHeader.SETRANGE("Buy-from Vendor No.","No.");
      PurchInvHeader.SETRANGE("Prepayment Invoice",true);
      exit(PurchInvHeader.COUNT);
    END;

    LOCAL PROCEDURE NoOfPostedPrepmtCrMemos@6() : Integer;
    VAR
      PurchCrMemoHdr@1000 : Record "Purch. Cr. Memo Hdr.";
    BEGIN
      PurchCrMemoHdr.SETRANGE("Buy-from Vendor No.","No.");
      PurchCrMemoHdr.SETRANGE("Prepayment Credit Memo",true);
      exit(PurchCrMemoHdr.COUNT);
    END;

    BEGIN
    END.
  }
}

