OBJECT Codeunit 99000752 Check Routing Lines
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Circular reference in routing %1 when calculating %2. Counted sequences %3. Max. lines %4.';
      Text001@1001 : TextConst 'ENU=back';
      Text002@1002 : TextConst 'ENU=Actual number of termination processes in route %1 is %2. They should be 1. Check %3.';
      Text003@1003 : TextConst 'ENU=Actual number of start processes in route %1 is %2. They should be 1. Check %3.';
      Text004@1004 : TextConst 'ENU=Not all routing lines are sequenced backwards on routing %1. Check %2.';
      Text005@1005 : TextConst 'ENU=Not all routing lines are sequenced forward on routing %1. Check %2.';
      Text006@1006 : TextConst 'ENU=Previous operations for %1 cannot be found.';
      Text007@1007 : TextConst 'ENU=Next operations for %1 cannot be found.';
      ErrList@1008 : Text[50];
      Text008@1009 : TextConst 'ENU=Operation %1 does not have a work center or a machine center defined.';

    LOCAL PROCEDURE ErrorInRouting@1(RoutingCode@1000 : Code[20];Direction@1001 : Text[20];ActualSequence@1002 : Integer;MaxSequences@1003 : Integer);
    BEGIN
      ERROR(
        Text000,
        RoutingCode,
        Direction,
        ActualSequence,
        MaxSequences);
    END;

    LOCAL PROCEDURE InsertInErrList@8(RtngLine@1000 : Record "Routing Line");
    BEGIN
      if (STRLEN(ErrList) + STRLEN(RtngLine."Operation No.") + 1) > MAXSTRLEN(ErrList) then
        exit;

      if STRLEN(ErrList) > 0 then
        ErrList := ErrList + ',' + RtngLine."Operation No."
      else
        ErrList := RtngLine."Operation No.";
    END;

    [External]
    PROCEDURE SetNextOperations@10(RtngHeader@1000 : Record "Routing Header";VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record "Routing Line";
      RtngLine2@1003 : Record "Routing Line";
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.MODIFYALL("Next Operation No.",'');

      if RtngLine.FIND('-') then
        repeat
          RtngLine2 := RtngLine;
          RtngLine2.SETRANGE("Routing No.",RtngHeader."No.");
          RtngLine2.SETRANGE("Version Code",VersionCode);
          if RtngLine2.FIND('>') then begin
            RtngLine."Next Operation No." := RtngLine2."Operation No.";
            RtngLine.MODIFY;
          end;
        until RtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcPreviousOperations@9(RtngHeader@1000 : Record "Routing Header";VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record "Routing Line";
      RtngLine2@1003 : Record "Routing Line";
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.MODIFYALL("Previous Operation No.",'');

      if RtngLine.FIND('-') then
        repeat
          if RtngLine."Next Operation No." <> '' then begin
            RtngLine2.SETRANGE("Routing No.",RtngHeader."No.");
            RtngLine2.SETRANGE("Version Code",VersionCode);
            RtngLine2.SETFILTER("Operation No.",RtngLine."Next Operation No.");
            if RtngLine2.FIND('-') then
              repeat
                if RtngLine2."Previous Operation No." <> '' then
                  RtngLine2."Previous Operation No." :=
                    RtngLine2."Previous Operation No." + '|';
                RtngLine2."Previous Operation No." :=
                  RtngLine2."Previous Operation No." +
                  RtngLine."Operation No.";
                RtngLine2.MODIFY;
              until RtngLine2.NEXT = 0;
          end;
        until RtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckCircularReference@12(ActSequences@1000 : Integer;MaxSequences@1001 : Integer;RoutingNo@1002 : Code[20]);
    BEGIN
      if ActSequences > MaxSequences then
        ErrorInRouting(
          RoutingNo,
          Text001,
          ActSequences,
          MaxSequences);
    END;

    LOCAL PROCEDURE SetRtngLineSequenceBack@6(RoutingType@1000 : 'Serial,Parallel';RoutingNo@1001 : Code[20];VersionCode@1003 : Code[20];Maxsequences@1002 : Integer);
    VAR
      RoutingLine@1004 : Record "Routing Line";
      SequenceNo@1005 : Integer;
      LinesFound@1006 : Boolean;
    BEGIN
      SequenceNo := 1;
      if RoutingType = RoutingType::Parallel then begin
        SetTerminalOperationSequenceNo(RoutingNo,VersionCode);
        RoutingLine.SETRANGE("Routing No.",RoutingNo);
        RoutingLine.SETRANGE("Version Code",VersionCode);
        repeat
          RoutingLine.SETRANGE("Sequence No. (Backward)",SequenceNo);
          LinesFound := RoutingLine.FINDSET;
          if LinesFound then begin
            CheckCircularReference(SequenceNo,Maxsequences,RoutingNo);
            SequenceNo += 1;
            repeat
              if RoutingLine."Previous Operation No." <> '' then
                SetSequenceNoOnPreviousOperations(RoutingNo,VersionCode,RoutingLine."Previous Operation No.",SequenceNo);
            until (RoutingLine.NEXT = 0) or (RoutingLine."Previous Operation No." = '');
          end;
        until not LinesFound or (RoutingLine."Previous Operation No." = '');
      end else begin
        RoutingLine.SETRANGE("Routing No.",RoutingNo);
        RoutingLine.SETRANGE("Version Code",VersionCode);
        if RoutingLine.FIND('+') then
          repeat
            RoutingLine."Sequence No. (Backward)" := SequenceNo;
            RoutingLine.MODIFY;
            SequenceNo += 1;
          until RoutingLine.NEXT(-1) = 0;
      end;
    END;

    [External]
    PROCEDURE SetRtngLineSequenceForward@7(RoutingType@1000 : 'Serial,Parallel';RoutingNo@1001 : Code[20];VersionCode@1003 : Code[20];MaxSequences@1002 : Integer);
    VAR
      RoutingLine@1004 : Record "Routing Line";
      SequenceNo@1005 : Integer;
      LinesFound@1006 : Boolean;
    BEGIN
      SequenceNo := 1;
      if RoutingType = RoutingType::Parallel then begin
        SetStartingOperationSequenceNo(RoutingNo,VersionCode);
        RoutingLine.SETRANGE("Routing No.",RoutingNo);
        RoutingLine.SETRANGE("Version Code",VersionCode);
        repeat
          RoutingLine.SETRANGE("Sequence No. (Forward)",SequenceNo);
          LinesFound := RoutingLine.FINDSET;
          if LinesFound then begin
            CheckCircularReference(SequenceNo,MaxSequences,RoutingNo);
            SequenceNo += 1;
            repeat
              if RoutingLine."Next Operation No." <> '' then
                SetSequenceNoOnNextOperations(RoutingNo,VersionCode,RoutingLine."Next Operation No.",SequenceNo);
            until (RoutingLine.NEXT = 0) or (RoutingLine."Next Operation No." = '');
          end;
        until not LinesFound or (RoutingLine."Next Operation No." = '');
      end else begin
        RoutingLine.SETRANGE("Routing No.",RoutingNo);
        RoutingLine.SETRANGE("Version Code",VersionCode);
        if RoutingLine.FIND('-') then
          repeat
            RoutingLine."Sequence No. (Forward)" := SequenceNo;
            RoutingLine.MODIFY;
            SequenceNo += 1;
          until RoutingLine.NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE SetStartingOperationSequenceNo@25(RoutingNo@1000 : Code[20];VersionCode@1001 : Code[20]);
    VAR
      RoutingLine@1002 : Record "Routing Line";
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE("Version Code",VersionCode);
      RoutingLine.SETFILTER("Previous Operation No.",'%1','');
      RoutingLine.FINDFIRST;
      RoutingLine."Sequence No. (Forward)" := 1;
      RoutingLine.MODIFY;
    END;

    LOCAL PROCEDURE SetTerminalOperationSequenceNo@26(RoutingNo@1002 : Code[20];VersionCode@1001 : Code[20]);
    VAR
      RoutingLine@1000 : Record "Routing Line";
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE("Version Code",VersionCode);
      RoutingLine.SETFILTER("Next Operation No.",'%1','');
      RoutingLine.FINDFIRST;
      RoutingLine."Sequence No. (Backward)" := 1;
      RoutingLine.MODIFY;
    END;

    LOCAL PROCEDURE SetSequenceNoOnNextOperations@27(RoutingNo@1001 : Code[20];VersionCode@1002 : Code[20];NextOperationFilter@1003 : Text;SequenceNo@1004 : Integer);
    VAR
      RoutingLine@1000 : Record "Routing Line";
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE("Version Code",VersionCode);
      RoutingLine.SETFILTER("Operation No.",NextOperationFilter);
      RoutingLine.MODIFYALL("Sequence No. (Forward)",SequenceNo);
    END;

    LOCAL PROCEDURE SetSequenceNoOnPreviousOperations@28(RoutingNo@1003 : Code[20];VersionCode@1002 : Code[20];PreviousOperationFilter@1001 : Text;SequenceNo@1000 : Integer);
    VAR
      RoutingLine@1004 : Record "Routing Line";
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE("Version Code",VersionCode);
      RoutingLine.SETFILTER("Operation No.",PreviousOperationFilter);
      RoutingLine.MODIFYALL("Sequence No. (Backward)",SequenceNo);
    END;

    LOCAL PROCEDURE CalcSequenceBack@2(RtngHeader@1000 : Record "Routing Header";VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record "Routing Line";
      MaxSeq@1003 : Integer;
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      if RtngLine.FIND('-') then
        repeat
          RtngLine."Sequence No. (Backward)" := 0;
          RtngLine."Fixed Scrap Qty. (Accum.)" := 0;
          RtngLine."Scrap Factor % (Accumulated)" := 0;
          RtngLine.MODIFY;
        until RtngLine.NEXT = 0;

      MaxSeq := RtngLine.COUNT;

      SetRtngLineSequenceBack(RtngHeader.Type,RtngHeader."No.",VersionCode,MaxSeq);
    END;

    LOCAL PROCEDURE CalcSequenceForward@3(RtngHeader@1000 : Record "Routing Header";VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record "Routing Line";
      MaxSeq@1003 : Integer;
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.MODIFYALL("Sequence No. (Forward)",0);

      MaxSeq := RtngLine.COUNT;

      SetRtngLineSequenceForward(RtngHeader.Type,RtngHeader."No.",VersionCode,MaxSeq);
    END;

    [External]
    PROCEDURE NeedsCalculation@11(RtngHeader@1000 : Record "Routing Header";VersionCode@1001 : Code[20]) : Boolean;
    VAR
      RtngLine@1002 : Record "Routing Line";
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.SETRANGE(Recalculate,true);
      exit(RtngLine.FINDFIRST);
    END;

    [External]
    PROCEDURE Calculate@4(RtngHeader@1000 : Record "Routing Header";VersionCode@1001 : Code[20]);
    VAR
      RtngVersion@1002 : Record "Routing Version";
      RtngLine@1003 : Record "Routing Line";
      RtngLine2@1004 : Record "Routing Line";
      CalcScrapFactor@1005 : Decimal;
      CalcScrapQty@1006 : Decimal;
      ScrapFactorThis@1007 : Decimal;
      ScrapQtyThis@1008 : Decimal;
    BEGIN
      RtngLine.SETCURRENTKEY("Routing No.","Version Code","Sequence No. (Backward)");
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      if RtngLine.ISEMPTY then
        exit;

      if VersionCode <> '' then begin
        RtngVersion.GET(RtngHeader."No.",VersionCode);
        RtngHeader.Type := RtngVersion.Type;
      end;

      if RtngHeader.Type = RtngHeader.Type::Serial then
        SetNextOperations(RtngHeader,VersionCode);

      CalcPreviousOperations(RtngHeader,VersionCode);
      CalcSequenceBack(RtngHeader,VersionCode);
      CalcSequenceForward(RtngHeader,VersionCode);

      if RtngLine.FIND('-') then
        repeat
          if RtngLine."Next Operation No." <> '' then begin
            RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
            RtngLine2.SETRANGE("Version Code",VersionCode);
            RtngLine2.SETFILTER("Operation No.",RtngLine."Next Operation No.");
            CalcScrapFactor := 0;
            CalcScrapQty := 0;
            if RtngLine2.FIND('-') then
              repeat
                ScrapFactorThis :=
                  RtngLine2."Scrap Factor % (Accumulated)";
                ScrapQtyThis := ROUND(RtngLine2."Fixed Scrap Qty. (Accum.)",0.00001);
                if CalcScrapFactor < ScrapFactorThis then
                  CalcScrapFactor := ScrapFactorThis;
                if CalcScrapQty < ScrapQtyThis then
                  CalcScrapQty := ScrapQtyThis;
              until RtngLine2.NEXT = 0;
          end;
          if CalcScrapFactor <> 0 then begin
            if RtngLine."Scrap Factor %" <> 0 then
              CalcScrapFactor :=
                ROUND(
                  (1 + CalcScrapFactor) *
                  (1 + RtngLine."Scrap Factor %" / 100),0.00001) - 1;
          end else
            CalcScrapFactor :=
              ROUND(1 + RtngLine."Scrap Factor %" / 100,0.00001) - 1;
          CalcScrapQty := CalcScrapQty * (1 + RtngLine."Scrap Factor %" / 100) + RtngLine."Fixed Scrap Quantity";
          RtngLine."Fixed Scrap Qty. (Accum.)" := CalcScrapQty;
          RtngLine."Scrap Factor % (Accumulated)" := CalcScrapFactor;
          RtngLine.MODIFY;
        until RtngLine.NEXT = 0;

      RtngLine.MODIFYALL(Recalculate,false);
      Check(RtngHeader,VersionCode);
    END;

    LOCAL PROCEDURE Check@5(RtngHeader@1000 : Record "Routing Header";VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record "Routing Line";
      RtngLine2@1003 : Record "Routing Line";
      NoOfProcesses@1004 : Integer;
    BEGIN
      ErrList := '';

      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.SETRANGE("No.",'');
      if RtngLine.FINDFIRST then
        ERROR(Text008,RtngLine."Operation No.");
      RtngLine.SETRANGE("No.");

      RtngLine.SETFILTER("Next Operation No.",'%1','');

      NoOfProcesses := RtngLine.COUNT;
      if NoOfProcesses <> 1 then begin
        repeat
          InsertInErrList(RtngLine);
        until RtngLine.NEXT = 0;
        ERROR(
          Text002,
          RtngHeader."No.",
          NoOfProcesses,
          ErrList);
      end;

      RtngLine.SETFILTER("Previous Operation No.",'%1','');
      RtngLine.SETRANGE("Next Operation No.");
      NoOfProcesses := RtngLine.COUNT;
      if NoOfProcesses <> 1 then begin
        repeat
          InsertInErrList(RtngLine);
        until RtngLine.NEXT = 0;
        ERROR(
          Text003,
          RtngHeader."No.",
          NoOfProcesses,
          ErrList);
      end;
      RtngLine.SETRANGE("Previous Operation No.");

      RtngLine.SETRANGE("Sequence No. (Backward)",0);
      if RtngLine.FIND('-') then begin
        repeat
          InsertInErrList(RtngLine);
        until RtngLine.NEXT = 0;
        ERROR(
          Text004,
          RtngLine."Routing No.",
          ErrList);
      end;
      RtngLine.SETRANGE("Sequence No. (Backward)");

      RtngLine.SETRANGE("Sequence No. (Forward)",0);
      if RtngLine.FIND('-') then begin
        repeat
          InsertInErrList(RtngLine);
        until RtngLine.NEXT = 0;
        ERROR(
          Text005,
          RtngLine."Routing No.",
          ErrList);
      end;
      RtngLine.SETRANGE("Sequence No. (Forward)");

      RtngLine.SETCURRENTKEY("Routing No.","Version Code","Sequence No. (Backward)");
      RtngLine.SETFILTER("Previous Operation No.",'<>%1','');

      if RtngLine.FIND('-') then
        repeat
          RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
          RtngLine2.SETRANGE("Version Code",VersionCode);
          RtngLine2.SETFILTER("Operation No.",RtngLine."Previous Operation No.");
          if RtngLine2.ISEMPTY then
            ERROR(
              Text006,
              RtngLine."Routing No.");
        until RtngLine.NEXT = 0;

      RtngLine.SETCURRENTKEY("Routing No.","Version Code","Sequence No. (Forward)");
      RtngLine.SETFILTER("Next Operation No.",'<>%1','');
      RtngLine.SETRANGE("Operation No.");

      if RtngLine.FIND('-') then
        repeat
          RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
          RtngLine2.SETRANGE("Version Code",VersionCode);
          RtngLine2.SETFILTER("Operation No.",RtngLine."Next Operation No.");
          if RtngLine2.ISEMPTY then
            ERROR(
              Text007,
              RtngLine."Routing No.");
        until RtngLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}

