OBJECT Codeunit 1640 Add-in Deployment Helper
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ExchangePowerShellRunner@1009 : Codeunit "Exchange PowerShell Runner";
      AddinManifestMgt@1026 : Codeunit "Add-in Manifest Management";
      AppNotInstalledErr@1015 : TextConst '@@@=%1: A GUID identifying the office add-in.;ENU=The application %1 did not install as expected. This might be caused by problems with the manifest file, problems connecting to the Exchange PowerShell server, or a version number that is not equal to or higher than the already installed application. You can download the manifest locally and then upload it to the Exchange Administration Center to determine the cause.';

    [Internal]
    PROCEDURE DeployManifest@1026(VAR NewOfficeAddin@1000 : Record "Office Add-in");
    VAR
      UserPreference@1001 : Record "User Preference";
      InstructionMgt@1002 : Codeunit "Instruction Mgt.";
      ManifestText@1004 : Text;
    BEGIN
      InitializeExchangePSRunner;
      AddinManifestMgt.GenerateManifest(NewOfficeAddin,ManifestText);

      // Clear the credentials if the action fails and reset the PS object.
      if not RunManifestDeployer(ManifestText,NewOfficeAddin."Application ID") then begin
        ExchangePowerShellRunner.ResetInitialization;
        ERROR(GETLASTERRORTEXT);
      end;

      NewOfficeAddin."Deployment Date" := TODAY;
      NewOfficeAddin.MODIFY;

      UserPreference.SETRANGE("Instruction Code",InstructionMgt.OfficeUpdateNotificationCode);
      UserPreference.DELETEALL;
    END;

    [TryFunction]
    LOCAL PROCEDURE RunManifestDeployer@1034(ManifestText@1011 : Text;AppID@1016 : GUID);
    VAR
      PSObj@1010 : DotNet "'Microsoft.Dynamics.Nav.PowerShellRunner, Version=11.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.PSObjectAdapter";
      Encoding@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.UTF8Encoding";
      ManifestBytes@1000 : DotNet "'mscorlib'.System.Array";
      ProvisionMode@1008 : Text;
      DefaultUserEnableState@1004 : Text;
      EnabledState@1003 : Text;
    BEGIN
      InitializeExchangePSRunner;

      ExchangePowerShellRunner.GetApp(AppID,PSObj);

      if ISNULL(PSObj) then begin
        DefaultUserEnableState := 'Enabled';
        EnabledState := 'TRUE';
        ProvisionMode := 'Everyone';
      end;

      Encoding := Encoding.UTF8Encoding;
      ManifestBytes := Encoding.GetBytes(ManifestText);

      // Add the add-in
      if not ExchangePowerShellRunner.NewApp(ManifestBytes,DefaultUserEnableState,EnabledState,ProvisionMode) then
        ERROR(AppNotInstalledErr,FORMAT(AppID));
    END;

    [External]
    PROCEDURE SetManifestDeploymentCredentials@1003(Username@1000 : Text[80];Password@1001 : Text[30]);
    BEGIN
      ExchangePowerShellRunner.SetCredentials(Username,Password);
    END;

    [External]
    PROCEDURE SetManifestDeploymentCustomEndpoint@1004(Endpoint@1000 : Text[250]);
    BEGIN
      ExchangePowerShellRunner.SetEndpoint(Endpoint);
    END;

    [Internal]
    PROCEDURE RemoveApp@1001(VAR OfficeAddin@1000 : Record "Office Add-in");
    VAR
      AppID@1001 : GUID;
    BEGIN
      InitializeExchangePSRunner;
      AppID := AddinManifestMgt.GetAppID(OfficeAddin.GetDefaultManifestText);
      ExchangePowerShellRunner.RemoveApp(AppID);
    END;

    LOCAL PROCEDURE InitializeExchangePSRunner@1007();
    BEGIN
      ExchangePowerShellRunner.PromptForCredentials;
      ExchangePowerShellRunner.InitializePSRunner;
      ExchangePowerShellRunner.ValidateCredentials;
    END;

    [Internal]
    PROCEDURE InitializeAndValidate@1010();
    BEGIN
      InitializeExchangePSRunner;
    END;

    [External]
    PROCEDURE CheckVersion@1002(HostType@1000 : Text;UserVersion@1001 : Text) CanContinue : Boolean;
    VAR
      OfficeAddin@1002 : Record "Office Add-in";
      InstructionMgt@1004 : Codeunit "Instruction Mgt.";
    BEGIN
      AddinManifestMgt.GetAddinByHostType(OfficeAddin,HostType);

      CanContinue := true;
      if UserVersion <> OfficeAddin.Version then begin
        OfficeAddin.Breaking := OfficeAddin.IsBreakingChange(UserVersion);
        if OfficeAddin.Breaking then
          PAGE.RUNMODAL(PAGE::"Office Update Available Dlg",OfficeAddin)
        else
          if InstructionMgt.IsEnabled(InstructionMgt.OfficeUpdateNotificationCode) then begin
            PAGE.RUNMODAL(PAGE::"Office Update Available Dlg",OfficeAddin);
            CanContinue := not OfficeAddin.Breaking;
          end;
      end;
    END;

    BEGIN
    END.
  }
}

