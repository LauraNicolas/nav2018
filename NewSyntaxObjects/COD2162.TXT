OBJECT Codeunit 2162 O365 Sales Invoice Events
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    TableNo="Calendar Event";
    Permissions=TableData "Calendar Event"=rimd;
    OnRun=BEGIN
            if not IsInvoicing then begin
              Result := NotInvoicingErr;
              State := State::Failed;
              exit;
            end;

            ParseEvent(Rec);
          END;

  }
  CODE
  {
    VAR
      InvoicePostedMsg@1000 : TextConst '@@@="%1=The invoice number";ENU=Invoice %1 was sent.';
      InvoicePaidMsg@1002 : TextConst '@@@="%1=The invoice number";ENU=Invoice %1 was paid.';
      InvoiceOverdueMsg@1005 : TextConst '@@@="%1=The invoice number";ENU=Invoice %1 is overdue.';
      InvoiceDraftMsg@1003 : TextConst 'ENU=There are unsent invoices.';
      InvoiceInactivityMsg@1004 : TextConst 'ENU=No invoices have been sent recently.';
      UnsupportedTypeErr@1001 : TextConst 'ENU=This event type is not supported.';
      NotInvoicingErr@1006 : TextConst 'ENU=This event is only handled for Invoicing.';

    LOCAL PROCEDURE ParseEvent@1(CalendarEvent@1000 : Record "Calendar Event");
    VAR
      O365SalesEvent@1001 : Record "O365 Sales Event";
      O365SalesWebService@1002 : Codeunit "O365 Sales Web Service";
    BEGIN
      O365SalesEvent.LOCKTABLE;
      O365SalesEvent.GET(CalendarEvent."Record ID to Process");

      case O365SalesEvent.Type of
        O365SalesEvent.Type::"Invoice Sent":
          begin
            O365SalesWebService.SendInvoiceCreatedEvent(O365SalesEvent."Document No.");
            O365SalesWebService.SendKPI;
          end;
        O365SalesEvent.Type::"Invoice Paid":
          begin
            O365SalesWebService.SendInvoicePaidEvent(O365SalesEvent."Document No.");
            O365SalesWebService.SendKPI;
          end;
        O365SalesEvent.Type::"Draft Reminder":
          O365SalesWebService.SendInvoiceDraftEvent;
        O365SalesEvent.Type::"Invoice Overdue":
          begin
            O365SalesWebService.SendInvoiceOverdueEvent(O365SalesEvent."Document No.");
            O365SalesWebService.SendKPI;
          end;
        O365SalesEvent.Type::"Invoicing Inactivity":
          O365SalesWebService.SendInvoiceInactivityEvent;
        else
          ERROR(UnsupportedTypeErr);
      end;
    END;

    LOCAL PROCEDURE UpdateDraftEvent@4();
    VAR
      O365C2GraphEventSettings@1000 : Record "O365 C2Graph Event Settings";
      CalendarEvent@1001 : Record "Calendar Event";
      SalesHeader@1003 : Record "Sales Header";
      O365SalesEvent@1005 : Record "O365 Sales Event";
      CalendarEventMangement@1004 : Codeunit "Calendar Event Mangement";
      NewDate@1002 : Date;
      EventNo@1006 : Integer;
    BEGIN
      if not O365C2GraphEventSettings.GET then
        O365C2GraphEventSettings.INSERT(true);

      NewDate := CALCDATE(STRSUBSTNO('<%1D>',O365C2GraphEventSettings."Inv. Draft Duration (Day)"),TODAY);

      SalesHeader.SETRANGE("Document Type",SalesHeader."Document Type"::Invoice);
      if CalendarEvent.GET(O365C2GraphEventSettings."Inv. Draft Event") and (not CalendarEvent.Archived) then begin
        if SalesHeader.ISEMPTY or (not O365C2GraphEventSettings."Inv. Draft Enabled") then
          CalendarEvent.DELETE(true)
        else begin
          CalendarEvent.VALIDATE("Scheduled Date",NewDate);
          CalendarEvent.MODIFY(true);
        end;

        exit;
      end;

      if SalesHeader.ISEMPTY or (not O365C2GraphEventSettings."Inv. Draft Enabled") then
        exit;

      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Draft Reminder",'');
      EventNo :=
        CalendarEventMangement.CreateCalendarEvent(
          NewDate,InvoiceDraftMsg,CODEUNIT::"O365 Sales Invoice Events",O365SalesEvent.RECORDID);

      O365C2GraphEventSettings."Inv. Draft Event" := EventNo;
      O365C2GraphEventSettings.MODIFY(true);
    END;

    LOCAL PROCEDURE UpdateInactivityEvent@6();
    VAR
      O365C2GraphEventSettings@1006 : Record "O365 C2Graph Event Settings";
      CalendarEvent@1005 : Record "Calendar Event";
      O365SalesEvent@1003 : Record "O365 Sales Event";
      CalendarEventMangement@1002 : Codeunit "Calendar Event Mangement";
      NewDate@1001 : Date;
      EventNo@1000 : Integer;
    BEGIN
      if not O365C2GraphEventSettings.GET then
        O365C2GraphEventSettings.INSERT(true);

      NewDate := CALCDATE(STRSUBSTNO('<%1D>',O365C2GraphEventSettings."Inv. Inactivity Duration (Day)"),TODAY);

      if CalendarEvent.GET(O365C2GraphEventSettings."Inv. Inactivity Event") and (not CalendarEvent.Archived) then begin
        if not O365C2GraphEventSettings."Inv. Inactivity Enabled" then
          CalendarEvent.DELETE(true)
        else begin
          CalendarEvent.VALIDATE("Scheduled Date",NewDate);
          CalendarEvent.MODIFY(true);
        end;

        exit;
      end;

      if not O365C2GraphEventSettings."Inv. Inactivity Enabled" then
        exit;

      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Invoicing Inactivity",'');
      EventNo :=
        CalendarEventMangement.CreateCalendarEvent(
          NewDate,InvoiceInactivityMsg,CODEUNIT::"O365 Sales Invoice Events",O365SalesEvent.RECORDID);

      O365C2GraphEventSettings."Inv. Inactivity Event" := EventNo;
      O365C2GraphEventSettings.MODIFY(true);
    END;

    LOCAL PROCEDURE CreateSendEvent@13(DocNo@1000 : Code[20]);
    VAR
      O365SalesEvent@1001 : Record "O365 Sales Event";
      CalendarEventMangement@1002 : Codeunit "Calendar Event Mangement";
    BEGIN
      if not O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoice Sent") then
        exit;

      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Invoice Sent",DocNo);
      CalendarEventMangement.CreateCalendarEvent(
        TODAY,STRSUBSTNO(InvoicePostedMsg,DocNo),CODEUNIT::"O365 Sales Invoice Events",O365SalesEvent.RECORDID);
    END;

    LOCAL PROCEDURE CreateOverdueEvent@14(DocNo@1000 : Code[20];DueDate@1003 : Date);
    VAR
      O365SalesEvent@1002 : Record "O365 Sales Event";
      CalendarEventMangement@1001 : Codeunit "Calendar Event Mangement";
    BEGIN
      if not O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoice Overdue") then
        exit;

      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Invoice Overdue",DocNo);
      CalendarEventMangement.CreateCalendarEvent(
        DueDate,STRSUBSTNO(InvoiceOverdueMsg,DocNo),CODEUNIT::"O365 Sales Invoice Events",O365SalesEvent.RECORDID);
    END;

    LOCAL PROCEDURE CreatePaidEvent@15(DocNo@1000 : Code[20]);
    VAR
      O365SalesEvent@1002 : Record "O365 Sales Event";
      CalendarEventMangement@1001 : Codeunit "Calendar Event Mangement";
    BEGIN
      if not O365SalesEvent.IsEventTypeEnabled(O365SalesEvent.Type::"Invoice Paid") then
        exit;

      CreateEvent(O365SalesEvent,O365SalesEvent.Type::"Invoice Paid",DocNo);
      CalendarEventMangement.CreateCalendarEvent(
        TODAY,STRSUBSTNO(InvoicePaidMsg,DocNo),CODEUNIT::"O365 Sales Invoice Events",
        O365SalesEvent.RECORDID);
    END;

    LOCAL PROCEDURE CreateEvent@5(VAR O365SalesEvent@1002 : Record "O365 Sales Event";Type@1000 : Integer;DocNo@1001 : Code[20]);
    BEGIN
      O365SalesEvent.INIT;
      O365SalesEvent.Type := Type;
      O365SalesEvent."Document No." := DocNo;
      O365SalesEvent.INSERT;
    END;

    LOCAL PROCEDURE IsInvoice@9(VAR SalesHeader@1000 : Record "Sales Header") : Boolean;
    BEGIN
      if SalesHeader.ISTEMPORARY then
        exit(false);

      exit(SalesHeader."Document Type" = SalesHeader."Document Type"::Invoice);
    END;

    LOCAL PROCEDURE IsInvoicing@8() : Boolean;
    VAR
      O365SalesInitialSetup@1000 : Record "O365 Sales Initial Setup";
      O365C2GraphEventSettings@1002 : Record "O365 C2Graph Event Settings";
      O365SalesEvent@1001 : Record "O365 Sales Event";
    BEGIN
      if not O365SalesInitialSetup.READPERMISSION then
        exit(false);

      if not (O365C2GraphEventSettings.READPERMISSION and O365C2GraphEventSettings.WRITEPERMISSION) then
        exit(false);

      if not (O365SalesEvent.READPERMISSION and O365SalesEvent.WRITEPERMISSION) then
        exit(false);

      if not O365SalesInitialSetup.GET then
        exit(false);

      exit(O365SalesInitialSetup."Is initialized");
    END;

    [EventSubscriber(Codeunit,80,OnAfterPostSalesDoc)]
    PROCEDURE OnAfterPostSalesDoc@2(VAR SalesHeader@1005 : Record "Sales Header";VAR GenJnlPostLine@1004 : Codeunit "Gen. Jnl.-Post Line";SalesShptHdrNo@1003 : Code[20];RetRcpHdrNo@1002 : Code[20];SalesInvHdrNo@1001 : Code[20];SalesCrMemoHdrNo@1000 : Code[20]);
    BEGIN
      if not IsInvoice(SalesHeader) then
        exit;

      if not IsInvoicing then
        exit;

      if SalesHeader."Document Type" <> SalesHeader."Document Type"::Invoice then
        exit;

      // Queue/update Events
      CreateSendEvent(SalesInvHdrNo);
      CreateOverdueEvent(SalesInvHdrNo,SalesHeader."Due Date");
      UpdateDraftEvent;
      UpdateInactivityEvent;
    END;

    [EventSubscriber(Codeunit,980,OnAfterPostPaymentRegistration)]
    PROCEDURE OnAfterPostPaymentRegistrationBuffer@3(VAR TempPaymentRegistrationBuffer@1000 : TEMPORARY Record "Payment Registration Buffer");
    VAR
      O365SalesEvent@1002 : Record "O365 Sales Event";
      SalesInvoiceHeader@1004 : Record "Sales Invoice Header";
      CalendarEvent@1003 : Record "Calendar Event";
    BEGIN
      if not IsInvoicing then
        exit;

      if TempPaymentRegistrationBuffer."Document Type" <> TempPaymentRegistrationBuffer."Document Type"::Invoice then
        exit;

      if not SalesInvoiceHeader.GET(TempPaymentRegistrationBuffer."Document No.") then
        exit;

      // Verify paid
      SalesInvoiceHeader.CALCFIELDS("Remaining Amount");
      if SalesInvoiceHeader."Remaining Amount" > 0 then
        exit;

      CreatePaidEvent(TempPaymentRegistrationBuffer."Document No.");

      // Remove overdue event
      O365SalesEvent.SETRANGE(Type,O365SalesEvent.Type::"Invoice Overdue");
      O365SalesEvent.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      if not O365SalesEvent.FINDFIRST then
        exit;

      CalendarEvent.SETRANGE("Record ID to Process",O365SalesEvent.RECORDID);
      if CalendarEvent.FINDFIRST then
        if not CalendarEvent.Archived then
          CalendarEvent.DELETE(true);
    END;

    [EventSubscriber(Table,36,OnAfterInsertEvent)]
    PROCEDURE OnAfterSalesHeaderInsert@7(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    BEGIN
      if not IsInvoice(Rec) then
        exit;

      if not IsInvoicing then
        exit;

      UpdateDraftEvent;
      UpdateInactivityEvent;
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    PROCEDURE OnAfterSalesHeaderDelete@10(VAR Rec@1000 : Record "Sales Header";RunTrigger@1001 : Boolean);
    BEGIN
      if not IsInvoice(Rec) then
        exit;

      if not IsInvoicing then
        exit;

      UpdateDraftEvent;
    END;

    BEGIN
    END.
  }
}

