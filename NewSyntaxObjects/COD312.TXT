OBJECT Codeunit 312 Cust-Check Cr. Limit
{
  OBJECT-PROPERTIES
  {
    Date=20171006D;
    Time=120000T;
    Version List=NAVW111.0;
  }
  PROPERTIES
  {
    Permissions=TableData "My Notifications"=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      InstructionMgt@1003 : Codeunit "Instruction Mgt.";
      NotificationLifecycleMgt@1000 : Codeunit "Notification Lifecycle Mgt.";
      CustCheckCreditLimit@1001 : Page "Check Credit Limit";
      InstructionTypeTxt@1004 : TextConst 'ENU=Check Cr. Limit';
      GetDetailsTxt@1006 : TextConst 'ENU=Show details';
      ShowNotificationDetailsTxt@1007 : TextConst '@@@={Locked};ENU=ShowNotificationDetails';
      CreditLimitNotificationTxt@1012 : TextConst 'ENU=Customer exceeds credit limit.';
      CreditLimitNotificationDescriptionTxt@1011 : TextConst 'ENU=Show warning when a sales document will exceed the customer''s credit limit.';
      OverdueBalanceNotificationTxt@1010 : TextConst 'ENU=Customer has overdue balance.';
      OverdueBalanceNotificationDescriptionTxt@1009 : TextConst 'ENU=Show warning when a sales document is for a customer with an overdue balance.';

    [External]
    PROCEDURE GenJnlLineCheck@1(GenJnlLine@1000 : Record "Gen. Journal Line");
    VAR
      SalesHeader@1002 : Record "Sales Header";
      AdditionalContextId@1001 : GUID;
    BEGIN
      if not GUIALLOWED then
        exit;

      if not SalesHeader.GET(GenJnlLine."Document Type",GenJnlLine."Document No.") then
        SalesHeader.INIT;
      OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,true);

      if CustCheckCreditLimit.GenJnlLineShowWarningAndGetCause(GenJnlLine,AdditionalContextId) then
        CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
    END;

    [External]
    PROCEDURE SalesHeaderCheck@2(SalesHeader@1000 : Record "Sales Header") CreditLimitExceeded : Boolean;
    VAR
      AdditionalContextId@1001 : GUID;
    BEGIN
      if not GUIALLOWED then
        exit;

      OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,true);

      if not CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesHeader,AdditionalContextId) then
        SalesHeader.OnCustomerCreditLimitNotExceeded
      else
        if InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesHeader."Document Type"),SalesHeader."No.")) then begin
          CreditLimitExceeded := true;

          CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
          SalesHeader.OnCustomerCreditLimitExceeded;
        end;
    END;

    [External]
    PROCEDURE SalesLineCheck@3(SalesLine@1000 : Record "Sales Line");
    VAR
      SalesHeader@1001 : Record "Sales Header";
      AdditionalContextId@1002 : GUID;
    BEGIN
      if not GUIALLOWED then
        exit;

      if not SalesHeader.GET(SalesLine."Document Type",SalesLine."Document No.") then
        SalesHeader.INIT;
      OnNewCheckRemoveCustomerNotifications(SalesHeader.RECORDID,false);

      if not CustCheckCreditLimit.SalesLineShowWarningAndGetCause(SalesLine,AdditionalContextId) then
        SalesHeader.OnCustomerCreditLimitNotExceeded
      else
        if InstructionMgt.IsEnabled(GetInstructionType(FORMAT(SalesLine."Document Type"),SalesLine."Document No.")) then begin
          CreateAndSendNotification(SalesHeader.RECORDID,AdditionalContextId,'');
          SalesHeader.OnCustomerCreditLimitExceeded;
        end;
    END;

    [External]
    PROCEDURE ServiceHeaderCheck@5(ServiceHeader@1000 : Record "Service Header");
    VAR
      AdditionalContextId@1001 : GUID;
    BEGIN
      if not GUIALLOWED then
        exit;

      OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,true);

      if CustCheckCreditLimit.ServiceHeaderShowWarningAndGetCause(ServiceHeader,AdditionalContextId) then
        CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
    END;

    [External]
    PROCEDURE ServiceLineCheck@6(ServiceLine@1000 : Record "Service Line");
    VAR
      ServiceHeader@1002 : Record "Service Header";
      AdditionalContextId@1001 : GUID;
    BEGIN
      if not GUIALLOWED then
        exit;

      if not ServiceHeader.GET(ServiceLine."Document Type",ServiceLine."Document No.") then
        ServiceHeader.INIT;
      OnNewCheckRemoveCustomerNotifications(ServiceHeader.RECORDID,false);

      if CustCheckCreditLimit.ServiceLineShowWarningAndGetCause(ServiceLine,AdditionalContextId) then
        CreateAndSendNotification(ServiceHeader.RECORDID,AdditionalContextId,'');
    END;

    [External]
    PROCEDURE ServiceContractHeaderCheck@7(ServiceContractHeader@1001 : Record "Service Contract Header");
    VAR
      AdditionalContextId@1000 : GUID;
    BEGIN
      if not GUIALLOWED then
        exit;

      OnNewCheckRemoveCustomerNotifications(ServiceContractHeader.RECORDID,true);

      if CustCheckCreditLimit.ServiceContractHeaderShowWarningAndGetCause(ServiceContractHeader,AdditionalContextId) then
        CreateAndSendNotification(ServiceContractHeader.RECORDID,AdditionalContextId,'');
    END;

    [External]
    PROCEDURE GetInstructionType@32(DocumentType@1000 : Code[30];DocumentNumber@1001 : Code[20]) : Code[50];
    BEGIN
      exit(COPYSTR(STRSUBSTNO('%1 %2 %3',DocumentType,DocumentNumber,InstructionTypeTxt),1,50));
    END;

    [External]
    PROCEDURE BlanketSalesOrderToOrderCheck@4(SalesOrderHeader@1000 : Record "Sales Header");
    VAR
      AdditionalContextId@1001 : GUID;
    BEGIN
      if not GUIALLOWED then
        exit;

      OnNewCheckRemoveCustomerNotifications(SalesOrderHeader.RECORDID,true);

      if CustCheckCreditLimit.SalesHeaderShowWarningAndGetCause(SalesOrderHeader,AdditionalContextId) then
        CreateAndSendNotification(SalesOrderHeader.RECORDID,AdditionalContextId,'');
    END;

    [External]
    PROCEDURE ShowNotificationDetails@10(CreditLimitNotification@1000 : Notification);
    VAR
      CreditLimitNotificationPage@1005 : Page "Credit Limit Notification";
    BEGIN
      CreditLimitNotificationPage.SetHeading(CreditLimitNotification.MESSAGE);
      CreditLimitNotificationPage.InitializeFromNotificationVar(CreditLimitNotification);
      CreditLimitNotificationPage.RUNMODAL;
    END;

    LOCAL PROCEDURE CreateAndSendNotification@13(RecordId@1000 : RecordID;AdditionalContextId@1003 : GUID;Heading@1001 : Text[250]);
    VAR
      NotificationToSend@1002 : Notification;
    BEGIN
      if AdditionalContextId = GetBothNotificationsId then begin
        CreateAndSendNotification(RecordId,GetCreditLimitNotificationId,CustCheckCreditLimit.GetHeading);
        CreateAndSendNotification(RecordId,GetOverdueBalanceNotificationId,CustCheckCreditLimit.GetSecondHeading);
        exit;
      end;

      NotificationToSend.ID(CREATEGUID);
      if Heading = '' then
        NotificationToSend.MESSAGE(CustCheckCreditLimit.GetHeading)
      else
        NotificationToSend.MESSAGE(Heading);
      NotificationToSend.SCOPE(NOTIFICATIONSCOPE::LocalScope);
      NotificationToSend.ADDACTION(GetDetailsTxt,CODEUNIT::"Cust-Check Cr. Limit",ShowNotificationDetailsTxt);
      CustCheckCreditLimit.PopulateDataOnNotification(NotificationToSend);
      NotificationLifecycleMgt.SendNotificationWithAdditionalContext(NotificationToSend,RecordId,AdditionalContextId);
    END;

    [External]
    PROCEDURE GetCreditLimitNotificationId@11() : GUID;
    BEGIN
      exit('C80FEEDA-802C-4879-B826-34A10FB77087');
    END;

    [External]
    PROCEDURE GetOverdueBalanceNotificationId@9() : GUID;
    BEGIN
      exit('EC8348CB-07C1-499A-9B70-B3B081A33C99');
    END;

    [External]
    PROCEDURE GetBothNotificationsId@16() : GUID;
    BEGIN
      exit('EC8348CB-07C1-499A-9B70-B3B081A33D00');
    END;

    [External]
    PROCEDURE IsCreditLimitNotificationEnabled@14(Customer@1000 : Record Customer) : Boolean;
    VAR
      MyNotifications@1001 : Record "My Notifications";
    BEGIN
      exit(MyNotifications.IsEnabledForRecord(GetCreditLimitNotificationId,Customer));
    END;

    [External]
    PROCEDURE IsOverdueBalanceNotificationEnabled@12(Customer@1000 : Record Customer) : Boolean;
    VAR
      MyNotifications@1001 : Record "My Notifications";
    BEGIN
      exit(MyNotifications.IsEnabledForRecord(GetOverdueBalanceNotificationId,Customer));
    END;

    [EventSubscriber(Page,1518,OnInitializingNotificationWithDefaultState)]
    LOCAL PROCEDURE OnInitializingNotificationWithDefaultState@15();
    VAR
      MyNotifications@1000 : Record "My Notifications";
    BEGIN
      MyNotifications.InsertDefaultWithTableNum(GetCreditLimitNotificationId,
        CreditLimitNotificationTxt,
        CreditLimitNotificationDescriptionTxt,
        DATABASE::Customer);
      MyNotifications.InsertDefaultWithTableNum(GetOverdueBalanceNotificationId,
        OverdueBalanceNotificationTxt,
        OverdueBalanceNotificationDescriptionTxt,
        DATABASE::Customer);
    END;

    [Integration]
    [External]
    PROCEDURE OnNewCheckRemoveCustomerNotifications@20(RecId@1000 : RecordID;RecallCreditOverdueNotif@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

