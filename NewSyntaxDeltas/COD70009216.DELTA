OBJECT Codeunit 70009216 G/L Source Name Permission Mgt
{
  OBJECT-PROPERTIES
  {
    Date=20161212D;
    Time=120000T;
    Version List=GLSN10.0;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ReadRoleId@1000000000 : TextConst 'ENU=G/L-SOURCE NAMES';
      UpdateRoleId@1000000001 : TextConst 'ENU=G/L-SOURCE NAMES, E';

    PROCEDURE GetAccessControl@1000000007(VAR TempUserAccess@1000000000 : TEMPORARY Record "G/L Source Name User Access";VAR TempGroupAccess@1000000001 : TEMPORARY Record "G/L Source Name Group Access");
    BEGIN
      GetReadOnlyMembers(TempUserAccess,TempGroupAccess);
      GetUpdateMembers(TempUserAccess,TempGroupAccess);
    END;

    PROCEDURE SetAccessControl@1000000004(VAR TempUserAccess@1000000001 : TEMPORARY Record "G/L Source Name User Access";VAR TempGroupAccess@1000000000 : TEMPORARY Record "G/L Source Name Group Access");
    BEGIN
      UpdateUserAccessControl(TempUserAccess);
      UpdateGroupAccessControl(TempGroupAccess);
    END;

    PROCEDURE SuggestAccessControl@70009200(VAR TempUserAccess@70009201 : TEMPORARY Record "G/L Source Name User Access";VAR TempGroupAccess@70009200 : TEMPORARY Record "G/L Source Name Group Access");
    VAR
      LocalTempUserAccess@70009203 : TEMPORARY Record "G/L Source Name User Access";
      LocalTempGroupAccess@70009202 : TEMPORARY Record "G/L Source Name Group Access";
    BEGIN
      with LocalTempGroupAccess do begin
        COPY(TempGroupAccess,true);
        SETRANGE("Has Permission",false);
        MODIFYALL("Assign Permission",true);
      end;
      with LocalTempUserAccess do begin
        COPY(TempUserAccess,true);
        SETRANGE("Has Permission",false);
        MODIFYALL("Assign Permission",true);
      end;
    END;

    LOCAL PROCEDURE UpdateUserAccessControl@1000000025(VAR TempUserAccess@1000000000 : TEMPORARY Record "G/L Source Name User Access");
    VAR
      LocalTempUserAccess@1000000001 : TEMPORARY Record "G/L Source Name User Access";
    BEGIN
      with LocalTempUserAccess do begin
        COPY(TempUserAccess,true);
        SETRANGE("Assign Permission",true);
        SETRANGE("Updated Via User Group",false);
        if FIND('-') then repeat
          AddUserAccess("User Security ID","Permission Level");
        until NEXT = 0;
        SETRANGE("Assign Permission");
        SETRANGE("Remove Permission",true);
        if FIND('-') then repeat
          RemoveUserAccess("User Security ID","Permission Level");
        until NEXT = 0;
        RESET;
      end;
    END;

    LOCAL PROCEDURE UpdateGroupAccessControl@1000000026(VAR TempGroupAccess@1000000000 : TEMPORARY Record "G/L Source Name Group Access");
    VAR
      LocalTempGroupAccess@1000000001 : TEMPORARY Record "G/L Source Name Group Access";
    BEGIN
      with LocalTempGroupAccess do begin
        COPY(TempGroupAccess,true);
        SETRANGE("Assign Permission",true);
        if FIND('-') then repeat
          AddGroupAccess("User Group Code","Permission Level");
        until NEXT = 0;
        SETRANGE("Assign Permission");
        SETRANGE("Remove Permission",true);
        if FIND('-') then repeat
          RemoveGroupAccess("User Group Code","Permission Level");
        until NEXT = 0;
        RESET;
      end;
    END;

    LOCAL PROCEDURE GetReadOnlyMembers@1000000005(VAR TempUserAccess@1000000003 : TEMPORARY Record "G/L Source Name User Access";VAR TempGroupAccess@1000000002 : TEMPORARY Record "G/L Source Name Group Access");
    VAR
      TempUser@1000000001 : TEMPORARY Record User;
      TempUserGroup@1000000000 : TEMPORARY Record "User Group";
    BEGIN
      WhoThatCanView(DATABASE::"G/L Entry",TempUser,TempUserGroup);

      CopyUserGroups(TempUserGroup,TempGroupAccess,TempGroupAccess."Permission Level"::Read);
      CopyUsers(TempUser,TempUserAccess,TempGroupAccess,TempGroupAccess."Permission Level"::Read);
    END;

    LOCAL PROCEDURE GetUpdateMembers@1000000006(VAR TempUserAccess@1000000003 : TEMPORARY Record "G/L Source Name User Access";VAR TempGroupAccess@1000000002 : TEMPORARY Record "G/L Source Name Group Access");
    VAR
      TempUser@1000000001 : TEMPORARY Record User;
      TempUserGroup@1000000000 : TEMPORARY Record "User Group";
    BEGIN
      WhoThatCanUpdate(DATABASE::Customer,TempUser,TempUserGroup);
      WhoThatCanUpdate(DATABASE::Vendor,TempUser,TempUserGroup);
      WhoThatCanUpdate(DATABASE::"Bank Account",TempUser,TempUserGroup);
      WhoThatCanUpdate(DATABASE::"Fixed Asset",TempUser,TempUserGroup);

      CopyUserGroups(TempUserGroup,TempGroupAccess,TempGroupAccess."Permission Level"::Update);
      CopyUsers(TempUser,TempUserAccess,TempGroupAccess,TempGroupAccess."Permission Level"::Update);
    END;

    LOCAL PROCEDURE CopyUserGroups@1000000014(VAR TempUserGroup@1000000001 : TEMPORARY Record "User Group";VAR TempGroupAccess@1000000000 : TEMPORARY Record "G/L Source Name Group Access";PermissionLevel@1000000002 : Option);
    BEGIN
      with TempUserGroup do
        if FIND('-') then repeat
          TempGroupAccess.INIT;
          TempGroupAccess."Permission Level" := PermissionLevel;
          TempGroupAccess."User Group Code" := Code;
          TempGroupAccess."Has Permission" := GroupHasAccess(Code,PermissionLevel);
          TempGroupAccess.INSERT;
        until NEXT = 0;
    END;

    LOCAL PROCEDURE CopyUsers@1000000013(VAR TempUser@1000000002 : TEMPORARY Record User;VAR TempUserAccess@1000000000 : TEMPORARY Record "G/L Source Name User Access";VAR TempGroupAccess@1000000001 : TEMPORARY Record "G/L Source Name Group Access";PermissionLevel@1000000003 : Option);
    BEGIN
      with TempUser do
        if FIND('-') then repeat
          TempUserAccess.INIT;
          TempUserAccess."Permission Level" := PermissionLevel;
          TempUserAccess."User Security ID" := "User Security ID";
          TempUserAccess."Access Via User Group Code" := HasAccessViaGroup(TempUserAccess,TempGroupAccess);
          TempUserAccess."Updated Via User Group" := TempUserAccess."Access Via User Group Code" <> '';
          TempUserAccess."Has Permission" := UserHasAccess("User Security ID",PermissionLevel);
          TempUserAccess.INSERT;
        until NEXT = 0;
    END;

    LOCAL PROCEDURE WhoThatCanView@1000000000(TableId@1000000001 : Integer;VAR TempUser@1000000000 : TEMPORARY Record User;VAR TempUserGroup@1000000003 : TEMPORARY Record "User Group");
    VAR
      Permission@1000000002 : Record Permission;
    BEGIN
      with Permission do begin
        SETRANGE("Object Type","Object Type"::"Table Data");
        SETRANGE("Object ID",TableId);
        SETRANGE("Read Permission","Read Permission"::Yes);
        if FINDSET then repeat
          AddUsersFromAccessControl("Role ID",TempUser);
          AddGroupFromAccessControl("Role ID",TempUserGroup);
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE WhoThatCanUpdate@1000000001(TableId@1000000001 : Integer;VAR TempUser@1000000000 : TEMPORARY Record User;VAR TempUserGroup@1000000003 : TEMPORARY Record "User Group");
    VAR
      Permission@1000000002 : Record Permission;
    BEGIN
      with Permission do begin
        SETRANGE("Object Type","Object Type"::"Table Data");
        SETRANGE("Object ID",TableId);
        SETRANGE("Modify Permission","Modify Permission"::Yes);
        if FINDSET then repeat
          AddUsersFromAccessControl("Role ID",TempUser);
          AddGroupFromAccessControl("Role ID",TempUserGroup);
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AddUsersFromAccessControl@1000000002(PermissionSetId@1000000001 : Code[20];VAR TempUser@1000000000 : TEMPORARY Record User);
    VAR
      AccessControl@1000000002 : Record "Access Control";
      User@1000000003 : Record User;
    BEGIN
      with AccessControl do begin
        SETRANGE("Role ID",PermissionSetId);
        SETFILTER("Company Name",'%1|%2',COMPANYNAME,'');
        if FINDSET then repeat
          if not TempUser.GET("User Security ID") then
            if User.GET("User Security ID") then begin
              TempUser := User;
              TempUser.INSERT;
            end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE AddGroupFromAccessControl@1000000003(PermissionSetId@1000000001 : Code[20];VAR TempUserGroup@1000000000 : TEMPORARY Record "User Group");
    VAR
      UserGroup@1000000002 : Record "User Group";
      AccessControl@1000000003 : Record "User Group Access Control";
    BEGIN
      with AccessControl do begin
        SETRANGE("Role ID",PermissionSetId);
        SETFILTER("Company Name",'%1|%2',COMPANYNAME,'');
        if FINDSET then repeat
          if not TempUserGroup.GET("User Group Code") then
            if UserGroup.GET("User Group Code") then begin
              TempUserGroup := UserGroup;
              TempUserGroup.INSERT;
            end;
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE HasAccessViaGroup@1000000008(TempUserAccess@1000000001 : TEMPORARY Record "G/L Source Name User Access";VAR TempGroupAccess@1000000000 : TEMPORARY Record "G/L Source Name Group Access") : Code[20];
    VAR
      UserGroupMember@1000000002 : Record "User Group Member";
      TempUserGroupAccess@1000000003 : TEMPORARY Record "G/L Source Name Group Access";
    BEGIN
      UserGroupMember.SETRANGE("User Security ID",TempUserAccess."User Security ID");
      with TempUserGroupAccess do begin
        COPY(TempGroupAccess,true);
        SETRANGE("Permission Level","Permission Level");
        if FIND('-') then repeat
          UserGroupMember.SETRANGE("User Group Code","User Group Code");
          if UserGroupMember.FINDFIRST then
            exit(UserGroupMember."User Group Code");
        until NEXT = 0;
      end;
    END;

    LOCAL PROCEDURE UserHasAccess@1000000011(UserSid@1000000000 : GUID;PermissionLevel@1000000001 : 'Read,Update') : Boolean;
    VAR
      AccessControl@1000000002 : Record "Access Control";
      AppMgt@1000000003 : Codeunit "G/L Source Name App Mgt.";
      AppGuid@1000000004 : GUID;
    BEGIN
      EVALUATE(AppGuid,AppMgt.GetAppId);
      with AccessControl do begin
        SETRANGE("User Security ID",UserSid);
        SETFILTER("Company Name",'%1|%2',COMPANYNAME,'');
        SETRANGE("App ID",AppGuid);
        SETRANGE(Scope,Scope::Tenant);
        case PermissionLevel of
          PermissionLevel::Read:
            SETRANGE("Role ID",ReadRoleId);
          PermissionLevel::Update:
            SETRANGE("Role ID",UpdateRoleId);
        end;
        exit(not ISEMPTY);
      end;
    END;

    LOCAL PROCEDURE GroupHasAccess@1000000012(GroupCode@1000000000 : Code[20];PermissionLevel@1000000001 : 'Read,Update') : Boolean;
    VAR
      UserGroupPermissionSet@1000000002 : Record "User Group Permission Set";
      AppMgt@1000000004 : Codeunit "G/L Source Name App Mgt.";
      AppGuid@1000000003 : GUID;
    BEGIN
      EVALUATE(AppGuid,AppMgt.GetAppId);
      with UserGroupPermissionSet do begin
        SETRANGE("User Group Code",GroupCode);
        SETRANGE("App ID",AppGuid);
        SETRANGE(Scope,Scope::Tenant);
        case PermissionLevel of
          PermissionLevel::Read:
            SETRANGE("Role ID",ReadRoleId);
          PermissionLevel::Update:
            SETRANGE("Role ID",UpdateRoleId);
        end;
        exit(not ISEMPTY);
      end;
    END;

    LOCAL PROCEDURE AddUserAccess@1000000010(UserSid@1000000000 : GUID;PermissionLevel@1000000001 : 'Read,Update') : Boolean;
    VAR
      AccessControl@1000000002 : Record "Access Control";
      AppMgt@1000000003 : Codeunit "G/L Source Name App Mgt.";
      AppGuid@1000000004 : GUID;
    BEGIN
      EVALUATE(AppGuid,AppMgt.GetAppId);
      with AccessControl do begin
        INIT;
        "User Security ID" := UserSid;
        "App ID" := AppGuid;
        "Company Name" := COMPANYNAME;
        Scope := Scope::Tenant;
        case PermissionLevel of
          PermissionLevel::Read:
            "Role ID" := ReadRoleId;
          PermissionLevel::Update:
            "Role ID" := UpdateRoleId;
        end;
        INSERT(true);
      end;
    END;

    LOCAL PROCEDURE AddGroupAccess@1000000009(GroupCode@1000000000 : Code[20];PermissionLevel@1000000001 : 'Read,Update') : Boolean;
    VAR
      UserGroupPermissionSet@1000000002 : Record "User Group Permission Set";
      AppMgt@1000000004 : Codeunit "G/L Source Name App Mgt.";
      AppGuid@1000000003 : GUID;
    BEGIN
      EVALUATE(AppGuid,AppMgt.GetAppId);
      with UserGroupPermissionSet do begin
        INIT;
        "User Group Code" := GroupCode;
        "App ID" := AppGuid;
        Scope := Scope::Tenant;
        case PermissionLevel of
          PermissionLevel::Read:
            "Role ID" := ReadRoleId;
          PermissionLevel::Update:
            "Role ID" := UpdateRoleId;
        end;
        INSERT(true);
      end;
    END;

    LOCAL PROCEDURE RemoveUserAccess@1000000019(UserSid@1000000000 : GUID;PermissionLevel@1000000001 : 'Read,Update') : Boolean;
    VAR
      AccessControl@1000000002 : Record "Access Control";
      AppMgt@1000000003 : Codeunit "G/L Source Name App Mgt.";
      AppGuid@1000000004 : GUID;
    BEGIN
      EVALUATE(AppGuid,AppMgt.GetAppId);
      with AccessControl do begin
        SETRANGE("User Security ID",UserSid);
        SETFILTER("Company Name",'%1|%2',COMPANYNAME,'');
        SETRANGE("App ID",AppGuid);
        SETRANGE(Scope,Scope::Tenant);
        case PermissionLevel of
          PermissionLevel::Read:
            SETRANGE("Role ID",ReadRoleId);
          PermissionLevel::Update:
            SETRANGE("Role ID",UpdateRoleId);
        end;
        DELETEALL(true);
      end;
    END;

    LOCAL PROCEDURE RemoveGroupAccess@1000000018(GroupCode@1000000000 : Code[20];PermissionLevel@1000000001 : 'Read,Update') : Boolean;
    VAR
      UserGroupPermissionSet@1000000002 : Record "User Group Permission Set";
      AppMgt@1000000004 : Codeunit "G/L Source Name App Mgt.";
      AppGuid@1000000003 : GUID;
    BEGIN
      EVALUATE(AppGuid,AppMgt.GetAppId);
      with UserGroupPermissionSet do begin
        SETRANGE("User Group Code",GroupCode);
        SETRANGE("App ID",AppGuid);
        SETRANGE(Scope,Scope::Tenant);
        case PermissionLevel of
          PermissionLevel::Read:
            SETRANGE("Role ID",ReadRoleId);
          PermissionLevel::Update:
            SETRANGE("Role ID",UpdateRoleId);
        end;
        DELETEALL(true);
      end;
    END;

    BEGIN
    END.
  }
}

